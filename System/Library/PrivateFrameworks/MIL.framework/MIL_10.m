void sub_1E09E59DC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x358];
  STACK[0x358] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x300], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x380], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::BaseAvgPool::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  char **v69;
  uint64_t v70;
  std::__shared_weak_count_vtbl *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t *v88;
  char *v89;
  char *v90;
  char *v91;
  __int128 v92;
  char *v93;
  char *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  char **v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _OWORD *v113;
  unsigned __int8 *v114;
  void *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  unint64_t *p_shared_owners;
  unint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  void *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  void *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count_vtbl *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  void *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count_vtbl *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  void *v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count_vtbl *v169;
  void *v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count_vtbl *v176;
  void *v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count_vtbl *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count_vtbl *v183;
  void *v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count_vtbl *v190;
  void *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count_vtbl *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  void *v204;
  void *v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count_vtbl *v207;
  uint64_t i;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  void *v212;
  void *v213;
  std::__shared_weak_count *v214;
  std::__shared_weak_count_vtbl *v215;
  uint64_t j;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t result;
  uint64_t v230;
  void *v231;
  std::__shared_weak_count *v232;
  void *v233[2];
  char v234;
  void *v235;
  std::__shared_weak_count *v236;
  void *v237[2];
  char v238;
  void *v239;
  std::__shared_weak_count *v240;
  void *v241;
  std::__shared_weak_count *v242;
  void *v243[2];
  char v244;
  void *v245[2];
  char v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  void *v251[2];
  char v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  void *v257[2];
  char v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263[2];
  char v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  char v268;
  void *v269[2];
  char v270;
  std::__shared_weak_count_vtbl *v271;
  std::__shared_weak_count *v272;
  void *v273;
  std::__shared_weak_count *v274;
  void *v275[2];
  char v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  void *v279;
  std::__shared_weak_count *v280;
  void *v281[2];
  char v282;
  std::__shared_weak_count_vtbl *v283;
  std::__shared_weak_count *v284;
  void *v285[2];
  char v286;
  void *v287[2];
  char v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  std::__shared_weak_count_vtbl *v291;
  std::__shared_weak_count *v292;
  __n128 v293;
  __int128 v294;
  __int128 v295;
  void *v296[2];
  uint64_t v297;
  void *v298;
  void *v299;
  _QWORD *v300;
  __n128 v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  char **v305;
  __n128 v306;
  __n128 v307;
  __n128 v308;
  __n128 v309;
  __n128 v310;
  __n128 v311;
  void *__p;
  void *v313;
  _QWORD *v314;
  __n128 v315;
  _QWORD *v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  _QWORD v320[3];
  _QWORD v321[3];
  _QWORD v322[3];
  uint64_t v323[3];
  _QWORD v324[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v327;
  _QWORD v328[3];
  _QWORD *v329;
  _BYTE v330[24];
  _BYTE *v331;
  _QWORD v332[3];
  _QWORD *v333;
  std::__shared_weak_count_vtbl *v334;
  std::__shared_weak_count_vtbl *v335;
  _QWORD *v336;
  uint64_t v337;

  v337 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v316 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v12->__get_deleter;
  v327 = (uint64_t)&v12->__get_deleter;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  Scalar = v12;
  v317 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v335 = (std::__shared_weak_count_vtbl *)&v16->__get_deleter;
  v336 = &v16->__get_deleter;
  v16->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v14;
  v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v15;
  v334 = v16;
  v318 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v334);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(0x18uLL);
  v314 = v20 + 3;
  *v20 = v17;
  v20[1] = v18;
  v20[2] = v19;
  __p = v20;
  v313 = v20 + 3;
  v319 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v317, 3, &v315);
  MIL::IRParameter::Make(&v315, (uint64_t *)&v298);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v298);
  v21 = v298;
  v298 = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v315.n128_u64[1];
  if (v315.n128_u64[1])
  {
    v23 = (unint64_t *)(v315.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v313 = __p;
    operator delete(__p);
  }
  if (v334)
  {
    v335 = v334;
    operator delete(v334);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v25 = v316;
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = operator new(8uLL);
  v317 = v27;
  *v27 = v26;
  v319 = (uint64_t)(v27 + 1);
  v318 = (uint64_t)(v27 + 1);
  v334 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v317);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v334, 1, &v311);
  MIL::IRParameter::Make(&v311, (uint64_t *)&Scalar);
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v25, "kernel_sizes", (uint64_t *)&Scalar);
  v29 = Scalar;
  Scalar = 0;
  if (v29)
    (*((void (**)(std::__shared_weak_count_vtbl *))v29->~__shared_weak_count + 1))(v29);
  v30 = (std::__shared_weak_count *)v311.n128_u64[1];
  if (v311.n128_u64[1])
  {
    v31 = (unint64_t *)(v311.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v317)
  {
    v318 = (uint64_t)v317;
    operator delete(v317);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v33 = v316;
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(8uLL);
  v317 = v35;
  *v35 = v34;
  v319 = (uint64_t)(v35 + 1);
  v318 = (uint64_t)(v35 + 1);
  v334 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v317);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v334, 1, &v310);
  MIL::IRParameter::Make(&v310, (uint64_t *)&Scalar);
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v33, "strides", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = (std::__shared_weak_count *)v310.n128_u64[1];
  if (v310.n128_u64[1])
  {
    v39 = (unint64_t *)(v310.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v317)
  {
    v318 = (uint64_t)v317;
    operator delete(v317);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v316;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v309);
  MIL::IRParameter::Make(&v309, (uint64_t *)&v317);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v41, "pad_type", (uint64_t *)&v317);
  v43 = v317;
  v317 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v309.n128_u64[1];
  if (v309.n128_u64[1])
  {
    v45 = (unint64_t *)(v309.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  v47 = v316;
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(0x10uLL);
  v319 = (uint64_t)(v50 + 2);
  *v50 = v48;
  v50[1] = v49;
  v317 = v50;
  v318 = (uint64_t)(v50 + 2);
  v334 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v317);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v334, 1, &v308);
  MIL::IRParameter::Make(&v308, (uint64_t *)&Scalar);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v47, "pad", (uint64_t *)&Scalar);
  v52 = Scalar;
  Scalar = 0;
  if (v52)
    (*((void (**)(std::__shared_weak_count_vtbl *))v52->~__shared_weak_count + 1))(v52);
  v53 = (std::__shared_weak_count *)v308.n128_u64[1];
  if (v308.n128_u64[1])
  {
    v54 = (unint64_t *)(v308.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v317)
  {
    v318 = (uint64_t)v317;
    operator delete(v317);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v56 = v316;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v307);
  MIL::IRParameter::Make(&v307, (uint64_t *)&v317);
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v56, "ceil_mode", (uint64_t *)&v317);
  v58 = v317;
  v317 = 0;
  if (v58)
    (*(void (**)(void *))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v307.n128_u64[1];
  if (v307.n128_u64[1])
  {
    v60 = (unint64_t *)(v307.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  v62 = v316;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v306);
  MIL::IRParameter::Make(&v306, (uint64_t *)&v317);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[29],std::unique_ptr<MIL::IRParameter>>(v62, "exclude_padding_from_average", (uint64_t *)&v317);
  v64 = v317;
  v317 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v306.n128_u64[1];
  if (v306.n128_u64[1])
  {
    v66 = (unint64_t *)(v306.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  v305 = 0;
  v68 = operator new();
  *(_QWORD *)v68 = 0;
  *(_QWORD *)(v68 + 8) = 0;
  *(_QWORD *)(v68 + 16) = 0;
  v317 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v305, (void **)v68);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v317, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v305, 1uLL);
  v69 = v305;
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v334 = v71;
  v71->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v70;
  v335 = (std::__shared_weak_count_vtbl *)&v71->~__shared_weak_count_0;
  v336 = &v71->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v334);
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(8uLL);
  __p = v73;
  *v73 = v72;
  v314 = v73 + 1;
  v313 = v73 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  v298 = v75;
  *v75 = v74;
  v300 = v75 + 1;
  v299 = v75 + 1;
  v327 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v298);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v301);
  MIL::IRParameter::Make(&v301, &v302);
  v76 = v302;
  v303 = v302;
  if (v302)
  {
    v77 = (_QWORD *)operator new();
    v78 = v302;
    *v77 = &unk_1EA99F888;
    v77[1] = 0;
    v77[2] = 0;
    v77[3] = v78;
  }
  else
  {
    v77 = 0;
  }
  v304 = v77;
  v302 = 0;
  v79 = v69[2];
  v80 = v69[1];
  if (v80 >= v79)
  {
    v82 = (v80 - *v69) >> 4;
    v83 = v82 + 1;
    if ((unint64_t)(v82 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v84 = v79 - *v69;
    if (v84 >> 3 > v83)
      v83 = v84 >> 3;
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF0)
      v85 = 0xFFFFFFFFFFFFFFFLL;
    else
      v85 = v83;
    v320[1] = v69 + 2;
    v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v69 + 2), v85);
    v88 = (uint64_t *)&v86[16 * v82];
    *v88 = v76;
    v88[1] = (uint64_t)v77;
    v304 = 0;
    v303 = 0;
    v90 = *v69;
    v89 = v69[1];
    if (v89 == *v69)
    {
      v93 = v69[1];
      v91 = &v86[16 * v82];
    }
    else
    {
      v91 = &v86[16 * v82];
      do
      {
        v92 = *((_OWORD *)v89 - 1);
        v89 -= 16;
        *((_OWORD *)v91 - 1) = v92;
        v91 -= 16;
        *(_QWORD *)v89 = 0;
        *((_QWORD *)v89 + 1) = 0;
      }
      while (v89 != v90);
      v93 = *v69;
      v89 = v69[1];
    }
    v81 = (char *)(v88 + 2);
    *v69 = v91;
    v318 = (uint64_t)v93;
    v69[1] = (char *)(v88 + 2);
    v319 = (uint64_t)v89;
    v94 = v69[2];
    v69[2] = &v86[16 * v87];
    v320[0] = v94;
    v317 = v93;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v317);
  }
  else
  {
    *(_QWORD *)v80 = v76;
    *((_QWORD *)v80 + 1) = v77;
    v81 = v80 + 16;
    v304 = 0;
    v303 = 0;
  }
  v69[1] = v81;
  v95 = v302;
  v302 = 0;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  v96 = (std::__shared_weak_count *)v301.n128_u64[1];
  if (v301.n128_u64[1])
  {
    v97 = (unint64_t *)(v301.n128_u64[1] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (v298)
  {
    v299 = v298;
    operator delete(v298);
  }
  if (__p)
  {
    v313 = __p;
    operator delete(__p);
  }
  if (v334)
  {
    v335 = v334;
    operator delete(v334);
  }
  *(_OWORD *)v296 = *(_OWORD *)a2;
  v297 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v99 = (uint64_t)v316;
  *(_QWORD *)&v295 = v316;
  if (v316)
  {
    v100 = (_QWORD *)operator new();
    *v100 = &unk_1EA99F8E8;
    v100[1] = 0;
    v100[2] = 0;
    v100[3] = v99;
  }
  else
  {
    v100 = 0;
  }
  *((_QWORD *)&v295 + 1) = v100;
  v316 = 0;
  *(_QWORD *)&v294 = v305;
  if (v305)
  {
    v101 = (_QWORD *)operator new();
    v102 = v305;
    *v101 = &unk_1EA99F948;
    v101[1] = 0;
    v101[2] = 0;
    v101[3] = v102;
  }
  else
  {
    v101 = 0;
  }
  *((_QWORD *)&v294 + 1) = v101;
  v305 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v332, a3);
  }
  else
  {
    v332[0] = &unk_1EA99FAC8;
    v332[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateBasePool;
    v333 = v332;
  }
  v331 = 0;
  MIL::IROperator::Make((__int128 *)v296, &v295, &v294, (uint64_t)v332, (uint64_t)v330, a4);
  v103 = v331;
  if (v331 == v330)
  {
    v104 = 4;
    v103 = v330;
  }
  else
  {
    if (!v331)
      goto LABEL_106;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_106:
  v105 = v333;
  if (v333 == v332)
  {
    v106 = 4;
    v105 = v332;
    goto LABEL_110;
  }
  if (v333)
  {
    v106 = 5;
LABEL_110:
    (*(void (**)(void))(*v105 + 8 * v106))();
  }
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
  if (*((_QWORD *)&v294 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v295 + 1);
  if (*((_QWORD *)&v295 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v295 + 1) + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  if (SHIBYTE(v297) < 0)
    operator delete(v296[0]);
  v334 = 0;
  v113 = (_OWORD *)operator new();
  *v113 = 0u;
  v113[1] = 0u;
  *((_DWORD *)v113 + 8) = 1065353216;
  v334 = (std::__shared_weak_count_vtbl *)v113;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v293);
  MIL::IRParameter::Make(&v293, (uint64_t *)&v317);
  v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v113, "minimum_compute_type", (uint64_t *)&v317);
  v115 = v317;
  v317 = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  v116 = (std::__shared_weak_count *)v293.n128_u64[1];
  if (v293.n128_u64[1])
  {
    v117 = (unint64_t *)(v293.n128_u64[1] + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v114 + 5) + 32))(*((_QWORD *)v114 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v114 + 5) + 48))(*((_QWORD *)v114 + 5), 1);
  v119 = *a4;
  v120 = v334;
  v291 = v334;
  if (v334)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v120;
  }
  else
  {
    v121 = 0;
  }
  v292 = v121;
  v334 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v119 + 184))(v119, &v291);
  v122 = v292;
  if (v292)
  {
    p_shared_owners = (unint64_t *)&v292->__shared_owners_;
    do
      v124 = __ldaxr(p_shared_owners);
    while (__stlxr(v124 - 1, p_shared_owners));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = *a4;
  v328[0] = &off_1EA99FBD8;
  v328[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceBasePool;
  v329 = v328;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v125 + 200))(v125, v328);
  v126 = v329;
  if (v329 == v328)
  {
    v127 = 4;
    v126 = v328;
  }
  else
  {
    if (!v329)
      goto LABEL_143;
    v127 = 5;
  }
  (*(void (**)(void))(*v126 + 8 * v127))();
LABEL_143:
  MIL::Validation::TensorDTypeConstraints::Make(&v317);
  v128 = v317;
  std::string::basic_string[abi:ne180100]<0>(v287, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v287, 0, (uint64_t *)&Scalar);
  v289 = Scalar;
  if (Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v290 = v129;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v285, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v128 + 24))(v128, &v289, v285);
  if (v286 < 0)
    operator delete(v285[0]);
  v131 = v290;
  if (v290)
  {
    v132 = (unint64_t *)&v290->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = Scalar;
  Scalar = 0;
  if (v134)
    (*((void (**)(std::__shared_weak_count_vtbl *))v134->~__shared_weak_count + 1))(v134);
  if (v288 < 0)
    operator delete(v287[0]);
  v135 = v317;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v283 = Scalar;
  if (Scalar)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = Scalar;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v284 = v136;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v281, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v135 + 24))(v135, &v283, v281);
  if (v282 < 0)
    operator delete(v281[0]);
  v138 = v284;
  if (v284)
  {
    v139 = (unint64_t *)&v284->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = Scalar;
  Scalar = 0;
  if (v141)
    (*((void (**)(std::__shared_weak_count_vtbl *))v141->~__shared_weak_count + 1))(v141);
  v142 = *a4;
  v279 = v317;
  if (v317)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = (std::__shared_weak_count_vtbl *)v317;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v280 = v143;
  v317 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v142 + 56))(v142, &v279);
  v145 = v280;
  if (v280)
  {
    v146 = (unint64_t *)&v280->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v317;
  v317 = 0;
  if (v148)
    (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
  MIL::Validation::TensorRankValueConstraints::Make(&v317);
  v149 = v317;
  std::string::basic_string[abi:ne180100]<0>(v275, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v275, 0, (uint64_t *)&Scalar);
  v277 = Scalar;
  if (Scalar)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = Scalar;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v278 = v150;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v149 + 32))(v149, &v277, 3, 5);
  v152 = v278;
  if (v278)
  {
    v153 = (unint64_t *)&v278->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = Scalar;
  Scalar = 0;
  if (v155)
    (*((void (**)(std::__shared_weak_count_vtbl *))v155->~__shared_weak_count + 1))(v155);
  if (v276 < 0)
    operator delete(v275[0]);
  v156 = *a4;
  v273 = v317;
  if (v317)
  {
    v157 = (std::__shared_weak_count *)operator new();
    v158 = (std::__shared_weak_count_vtbl *)v317;
    v157->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v157->__shared_owners_ = 0;
    v157->__shared_weak_owners_ = 0;
    v157[1].__vftable = v158;
  }
  else
  {
    v157 = 0;
  }
  v274 = v157;
  v317 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v156 + 56))(v156, &v273);
  v159 = v274;
  if (v274)
  {
    v160 = (unint64_t *)&v274->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = v317;
  v317 = 0;
  if (v162)
    (*(void (**)(void *))(*(_QWORD *)v162 + 8))(v162);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v317);
  v163 = v317;
  std::string::basic_string[abi:ne180100]<0>(v269, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v269, 0, (uint64_t *)&Scalar);
  v271 = Scalar;
  if (Scalar)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = Scalar;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v272 = v164;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v267, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v163 + 24))(v163, &v271, 1, v267);
  if (v268 < 0)
    operator delete(v267[0]);
  v166 = v272;
  if (v272)
  {
    v167 = (unint64_t *)&v272->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = Scalar;
  Scalar = 0;
  if (v169)
    (*((void (**)(std::__shared_weak_count_vtbl *))v169->~__shared_weak_count + 1))(v169);
  if (v270 < 0)
    operator delete(v269[0]);
  v170 = v317;
  std::string::basic_string[abi:ne180100]<0>(v263, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v263, 0, (uint64_t *)&Scalar);
  v265 = Scalar;
  if (Scalar)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = Scalar;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = v172;
  }
  else
  {
    v171 = 0;
  }
  v266 = v171;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))(*(_QWORD *)v170 + 32))(v170, &v265, 2, -1, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v173 = v266;
  if (v266)
  {
    v174 = (unint64_t *)&v266->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = Scalar;
  Scalar = 0;
  if (v176)
    (*((void (**)(std::__shared_weak_count_vtbl *))v176->~__shared_weak_count + 1))(v176);
  if (v264 < 0)
    operator delete(v263[0]);
  v177 = v317;
  std::string::basic_string[abi:ne180100]<0>(v257, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v257, 0, (uint64_t *)&Scalar);
  v259 = Scalar;
  if (Scalar)
  {
    v178 = (std::__shared_weak_count *)operator new();
    v179 = Scalar;
    v178->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v178->__shared_owners_ = 0;
    v178->__shared_weak_owners_ = 0;
    v178[1].__vftable = v179;
  }
  else
  {
    v178 = 0;
  }
  v260 = v178;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v255, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v177 + 24))(v177, &v259, 0, v255);
  if (v256 < 0)
    operator delete(v255[0]);
  v180 = v260;
  if (v260)
  {
    v181 = (unint64_t *)&v260->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = Scalar;
  Scalar = 0;
  if (v183)
    (*((void (**)(std::__shared_weak_count_vtbl *))v183->~__shared_weak_count + 1))(v183);
  if (v258 < 0)
    operator delete(v257[0]);
  v184 = v317;
  std::string::basic_string[abi:ne180100]<0>(v251, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v251, 0, (uint64_t *)&Scalar);
  v253 = Scalar;
  if (Scalar)
  {
    v185 = (std::__shared_weak_count *)operator new();
    v186 = Scalar;
    v185->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v185->__shared_owners_ = 0;
    v185->__shared_weak_owners_ = 0;
    v185[1].__vftable = v186;
  }
  else
  {
    v185 = 0;
  }
  v254 = v185;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v184 + 24))(v184, &v253, 0, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v187 = v254;
  if (v254)
  {
    v188 = (unint64_t *)&v254->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = Scalar;
  Scalar = 0;
  if (v190)
    (*((void (**)(std::__shared_weak_count_vtbl *))v190->~__shared_weak_count + 1))(v190);
  if (v252 < 0)
    operator delete(v251[0]);
  v191 = v317;
  std::string::basic_string[abi:ne180100]<0>(v245, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v245, 0, (uint64_t *)&Scalar);
  v247 = Scalar;
  if (Scalar)
  {
    v192 = (std::__shared_weak_count *)operator new();
    v193 = Scalar;
    v192->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v192->__shared_owners_ = 0;
    v192->__shared_weak_owners_ = 0;
    v192[1].__vftable = v193;
  }
  else
  {
    v192 = 0;
  }
  v248 = v192;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v243, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v191 + 24))(v191, &v247, 0, v243);
  if (v244 < 0)
    operator delete(v243[0]);
  v194 = v248;
  if (v248)
  {
    v195 = (unint64_t *)&v248->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = Scalar;
  Scalar = 0;
  if (v197)
    (*((void (**)(std::__shared_weak_count_vtbl *))v197->~__shared_weak_count + 1))(v197);
  if (v246 < 0)
    operator delete(v245[0]);
  v198 = *a4;
  v241 = v317;
  if (v317)
  {
    v199 = (std::__shared_weak_count *)operator new();
    v200 = (std::__shared_weak_count_vtbl *)v317;
    v199->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v199->__shared_owners_ = 0;
    v199->__shared_weak_owners_ = 0;
    v199[1].__vftable = v200;
  }
  else
  {
    v199 = 0;
  }
  v242 = v199;
  v317 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v198 + 56))(v198, &v241);
  v201 = v242;
  if (v242)
  {
    v202 = (unint64_t *)&v242->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v204 = v317;
  v317 = 0;
  if (v204)
    (*(void (**)(void *))(*(_QWORD *)v204 + 8))(v204);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v205 = __p;
  std::string::basic_string[abi:ne180100]<0>(v237, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v237, 0, (uint64_t *)&v298);
  v239 = v298;
  if (v298)
  {
    v206 = (std::__shared_weak_count *)operator new();
    v207 = (std::__shared_weak_count_vtbl *)v298;
    v206->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v206->__shared_owners_ = 0;
    v206->__shared_weak_owners_ = 0;
    v206[1].__vftable = v207;
  }
  else
  {
    v206 = 0;
  }
  v240 = v206;
  v298 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v317, "custom");
  std::string::basic_string[abi:ne180100]<0>(v320, "same");
  std::string::basic_string[abi:ne180100]<0>(v321, "same_lower");
  std::string::basic_string[abi:ne180100]<0>(v322, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v317, 4);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v205 + 24))(v205, &v239, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v322[i + 2]) < 0)
      operator delete((void *)v322[i]);
  }
  v209 = v240;
  if (v240)
  {
    v210 = (unint64_t *)&v240->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  v212 = v298;
  v298 = 0;
  if (v212)
    (*(void (**)(void *))(*(_QWORD *)v212 + 8))(v212);
  if (v238 < 0)
    operator delete(v237[0]);
  v213 = __p;
  std::string::basic_string[abi:ne180100]<0>(v233, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v233, 1, (uint64_t *)&v298);
  v235 = v298;
  if (v298)
  {
    v214 = (std::__shared_weak_count *)operator new();
    v215 = (std::__shared_weak_count_vtbl *)v298;
    v214->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v214->__shared_owners_ = 0;
    v214->__shared_weak_owners_ = 0;
    v214[1].__vftable = v215;
  }
  else
  {
    v214 = 0;
  }
  v236 = v214;
  v298 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v317, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v320, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v321, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v322, "int32");
  std::string::basic_string[abi:ne180100]<0>(v323, "int8");
  std::string::basic_string[abi:ne180100]<0>(v324, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v317, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v213 + 24))(v213, &v235, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v324[j + 2]) < 0)
      operator delete((void *)v324[j]);
  }
  v217 = v236;
  if (v236)
  {
    v218 = (unint64_t *)&v236->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = v298;
  v298 = 0;
  if (v220)
    (*(void (**)(void *))(*(_QWORD *)v220 + 8))(v220);
  if (v234 < 0)
    operator delete(v233[0]);
  v221 = *a4;
  v231 = __p;
  if (__p)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = (std::__shared_weak_count_vtbl *)__p;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v232 = v222;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v221 + 56))(v221, &v231);
  v224 = v232;
  if (v232)
  {
    v225 = (unint64_t *)&v232->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = __p;
  __p = 0;
  if (v227)
    (*(void (**)(void *))(*(_QWORD *)v227 + 8))(v227);
  if (v334)
  {
    v228 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v334);
    MEMORY[0x1E0C023A0](v228, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v305, 0);
  result = (uint64_t)v316;
  if (v316)
  {
    v230 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v316);
    return MEMORY[0x1E0C023A0](v230, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09E7E84(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x368];
  STACK[0x368] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x300], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x390], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::AvgPool::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseAvgPool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E09E87DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::L2Pool::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_1EA99FAC8;
  v7[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateL2Pool;
  v8 = v7;
  MIL::Operators::Common::ios18::BasePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E09E88F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::MaxPool::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BasePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E09E89F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::RandomBernoulli::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char **v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _OWORD *v70;
  unsigned __int8 *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  void *v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t i;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152;
  std::__shared_weak_count *v153;
  void *v154[2];
  char v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  void *v158[2];
  char v159;
  void *v160[2];
  char v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  __n128 v166;
  __int128 v167;
  __int128 v168;
  void *v169[2];
  uint64_t v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  __n128 v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  char **v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  _QWORD *v185;
  void *__p;
  uint64_t Scalar;
  uint64_t v188;
  _QWORD v189[3];
  uint64_t v190[3];
  uint64_t v191[3];
  uint64_t v192[3];
  _QWORD v193[3];
  uint64_t v194[5];
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  std::__shared_weak_count_vtbl *v201;
  std::__shared_weak_count_vtbl *v202;
  void (__cdecl **v203)(std::__shared_weak_count *__hidden);
  uint64_t v204;

  v204 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v188 = (uint64_t)(v8 + 1);
  Scalar = (uint64_t)(v8 + 1);
  v201 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v201, 1, &v184);
  MIL::IRParameter::Make(&v184, v194);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "shape", v194);
  v9 = v194[0];
  v194[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v11 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v13 = v185;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v188 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 3, &v183);
  MIL::IRParameter::Make(&v183, v194);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v13, "prob", v194);
  v15 = v194[0];
  v194[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v17 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  v19 = v185;
  v194[0] = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)v194, 1, &v182);
  MIL::IRParameter::Make(&v182, (uint64_t *)&__p);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "seed", (uint64_t *)&__p);
  v21 = __p;
  __p = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v182.n128_u64[1];
  if (v182.n128_u64[1])
  {
    v23 = (unint64_t *)(v182.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v181 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v181, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v181, 1uLL);
  v26 = v181;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v201 = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v202 = (std::__shared_weak_count_vtbl *)&v28->~__shared_weak_count_0;
  v203 = &v28->~__shared_weak_count_0;
  v194[0] = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v201);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v174 = v30;
  *v30 = v29;
  v175 = v30 + 1;
  v176 = v30 + 1;
  v194[1] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v174);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v171 = v32;
  *v32 = v31;
  v172 = v32 + 1;
  v173 = v32 + 1;
  v194[2] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v171);
  MIL::IRParameter::MakeTypeSet((uint64_t)v194, 3, &v177);
  MIL::IRParameter::Make(&v177, &v178);
  v33 = v178;
  v179 = v178;
  if (v178)
  {
    v34 = (_QWORD *)operator new();
    v35 = v178;
    *v34 = &unk_1EA99F888;
    v34[1] = 0;
    v34[2] = 0;
    v34[3] = v35;
  }
  else
  {
    v34 = 0;
  }
  v180 = v34;
  v178 = 0;
  v36 = v26[2];
  v37 = v26[1];
  if (v37 >= v36)
  {
    v39 = (v37 - *v26) >> 4;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v41 = v36 - *v26;
    if (v41 >> 3 > v40)
      v40 = v41 >> 3;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
      v42 = 0xFFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    v189[1] = v26 + 2;
    v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v42);
    v45 = (uint64_t *)&v43[16 * v39];
    *v45 = v33;
    v45[1] = (uint64_t)v34;
    v179 = 0;
    v180 = 0;
    v47 = *v26;
    v46 = v26[1];
    if (v46 == *v26)
    {
      v50 = v26[1];
      v48 = &v43[16 * v39];
    }
    else
    {
      v48 = &v43[16 * v39];
      do
      {
        v49 = *((_OWORD *)v46 - 1);
        v46 -= 16;
        *((_OWORD *)v48 - 1) = v49;
        v48 -= 16;
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
      }
      while (v46 != v47);
      v50 = *v26;
      v46 = v26[1];
    }
    v38 = (char *)(v45 + 2);
    *v26 = v48;
    __p = v50;
    Scalar = (uint64_t)v50;
    v26[1] = (char *)(v45 + 2);
    v188 = (uint64_t)v46;
    v51 = v26[2];
    v26[2] = &v43[16 * v44];
    v189[0] = v51;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v37 = v33;
    *((_QWORD *)v37 + 1) = v34;
    v38 = v37 + 16;
    v179 = 0;
    v180 = 0;
  }
  v26[1] = v38;
  v52 = v178;
  v178 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v54 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  *(_OWORD *)v169 = *(_OWORD *)a2;
  v170 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v56 = (uint64_t)v185;
  *(_QWORD *)&v168 = v185;
  if (v185)
  {
    v57 = (_QWORD *)operator new();
    *v57 = &unk_1EA99F8E8;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v56;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v168 + 1) = v57;
  v185 = 0;
  *(_QWORD *)&v167 = v181;
  if (v181)
  {
    v58 = (_QWORD *)operator new();
    v59 = v181;
    *v58 = &unk_1EA99F948;
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = v59;
  }
  else
  {
    v58 = 0;
  }
  *((_QWORD *)&v167 + 1) = v58;
  v181 = 0;
  v200 = 0;
  v198 = 0;
  MIL::IROperator::Make((__int128 *)v169, &v168, &v167, (uint64_t)v199, (uint64_t)v197, a3);
  v60 = v198;
  if (v198 == v197)
  {
    v61 = 4;
    v60 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_65;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_65:
  v62 = v200;
  if (v200 == v199)
  {
    v63 = 4;
    v62 = v199;
    goto LABEL_69;
  }
  if (v200)
  {
    v63 = 5;
LABEL_69:
    (*(void (**)(void))(*v62 + 8 * v63))();
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
  if (*((_QWORD *)&v168 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (SHIBYTE(v170) < 0)
    operator delete(v169[0]);
  v201 = 0;
  v70 = (_OWORD *)operator new();
  *v70 = 0u;
  v70[1] = 0u;
  *((_DWORD *)v70 + 8) = 1065353216;
  v201 = (std::__shared_weak_count_vtbl *)v70;
  v194[0] = MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)v194, 1, &v166);
  MIL::IRParameter::Make(&v166, (uint64_t *)&__p);
  v71 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v70, "minimum_compute_type", (uint64_t *)&__p);
  v72 = __p;
  __p = 0;
  if (v72)
    (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
  v73 = (std::__shared_weak_count *)v166.n128_u64[1];
  if (v166.n128_u64[1])
  {
    v74 = (unint64_t *)(v166.n128_u64[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v71 + 5) + 32))(*((_QWORD *)v71 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v71 + 5) + 48))(*((_QWORD *)v71 + 5), 1);
  v76 = *a3;
  v77 = v201;
  v164 = v201;
  if (v201)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v77;
  }
  else
  {
    v78 = 0;
  }
  v165 = v78;
  v201 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v76 + 184))(v76, &v164);
  v79 = v165;
  if (v165)
  {
    p_shared_owners = (unint64_t *)&v165->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *a3;
  v195[0] = &off_1EA99FBD8;
  v195[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomBernoulli;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v82 + 200))(v82, v195);
  v83 = v196;
  if (v196 == v195)
  {
    v84 = 4;
    v83 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_102;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_102:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v85 = __p;
  std::string::basic_string[abi:ne180100]<0>(v160, "prob");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v160, 0, v194);
  v162 = v194[0];
  if (v194[0])
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = v194[0];
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = (std::__shared_weak_count_vtbl *)v87;
  }
  else
  {
    v86 = 0;
  }
  v163 = v86;
  v194[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v158, "T");
  (*(void (**)(void *, uint64_t *, void **))(*(_QWORD *)v85 + 24))(v85, &v162, v158);
  if (v159 < 0)
    operator delete(v158[0]);
  v88 = v163;
  if (v163)
  {
    v89 = (unint64_t *)&v163->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v194[0];
  v194[0] = 0;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  if (v161 < 0)
    operator delete(v160[0]);
  v92 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, v194);
  v156 = v194[0];
  if (v194[0])
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = v194[0];
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v157 = v93;
  v194[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v154, "T");
  (*(void (**)(void *, uint64_t *, void **))(*(_QWORD *)v92 + 24))(v92, &v156, v154);
  if (v155 < 0)
    operator delete(v154[0]);
  v95 = v157;
  if (v157)
  {
    v96 = (unint64_t *)&v157->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v194[0];
  v194[0] = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  v99 = *a3;
  v152 = __p;
  if (__p)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = (std::__shared_weak_count_vtbl *)__p;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v153 = v100;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v99 + 56))(v99, &v152);
  v102 = v153;
  if (v153)
  {
    v103 = (unint64_t *)&v153->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = __p;
  __p = 0;
  if (v105)
    (*(void (**)(void *))(*(_QWORD *)v105 + 8))(v105);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v106 = __p;
  std::string::basic_string[abi:ne180100]<0>(v148, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v148, 0, v194);
  v150 = v194[0];
  if (v194[0])
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = v194[0];
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v151 = v107;
  v194[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "K");
  (*(void (**)(void *, uint64_t *, _QWORD, void **))(*(_QWORD *)v106 + 24))(v106, &v150, 0, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v151;
  if (v151)
  {
    v110 = (unint64_t *)&v151->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v194[0];
  v194[0] = 0;
  if (v112)
    (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
  if (v149 < 0)
    operator delete(v148[0]);
  v113 = *a3;
  v144 = __p;
  if (__p)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)__p;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = __p;
  __p = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v174);
  v120 = v174;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v171);
  v142 = v171;
  if (v171)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v171;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v171 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v189, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v190, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v191, "int32");
  std::string::basic_string[abi:ne180100]<0>(v192, "int8");
  std::string::basic_string[abi:ne180100]<0>(v193, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)v194, (unsigned __int8 *)&__p, 6);
  (*(void (**)(void *, void **, uint64_t *, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, v194, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v194);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v193[i + 2]) < 0)
      operator delete((void *)v193[i]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v171;
  v171 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = v174;
  if (v174)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)v174;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  v174 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v174;
  v174 = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (v201)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v201);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v181, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09E9AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a64;
  uint64_t a71;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v74;

  if (a56)
    (*(void (**)(void *))(*(_QWORD *)a56 + 8))(a56);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v72 - 96), 0);
  v74 = *v71;
  *v71 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::RandomCategorical::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void **v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  void **v60;
  char *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  char **v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _OWORD *v80;
  unsigned __int8 *v81;
  void **v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  void **v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count_vtbl *v101;
  void **v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  void **v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void **v115;
  void *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  uint64_t i;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t result;
  uint64_t v133;
  void *v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  void *v138;
  std::__shared_weak_count *v139;
  void **v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  void *v152;
  std::__shared_weak_count *v153;
  __n128 v154;
  __int128 v155;
  __int128 v156;
  void *v157[2];
  uint64_t v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  __n128 v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  char **v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  void *__p;
  void *v171;
  _QWORD *v172;
  void *v173;
  void *v174;
  _QWORD *v175;
  __n128 v176;
  _QWORD *v177;
  void **v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD v181[3];
  uint64_t v182[3];
  uint64_t v183[3];
  uint64_t v184[3];
  _QWORD v185[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v187;
  uint64_t v188;
  _QWORD v189[3];
  _QWORD *v190;
  _BYTE v191[24];
  _BYTE *v192;
  _BYTE v193[24];
  _BYTE *v194;
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v177 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v187 = (uint64_t)&v8->~__shared_weak_count_0;
  v188 = (uint64_t)&v8->~__shared_weak_count_0;
  v178 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v173 = v10;
  *v10 = v9;
  v174 = v10 + 1;
  v175 = v10 + 1;
  v179 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v173);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v171 = v12 + 1;
  v172 = v12 + 1;
  v180 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v178, 3, &v176);
  MIL::IRParameter::Make(&v176, (uint64_t *)&v159);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v159);
  v13 = v159;
  v159 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v176.n128_u64[1];
  if (v176.n128_u64[1])
  {
    v15 = (unint64_t *)(v176.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v171 = __p;
    operator delete(__p);
  }
  if (v173)
  {
    v174 = v173;
    operator delete(v173);
  }
  if (Scalar)
  {
    v187 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v177;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v169);
  MIL::IRParameter::Make(&v169, (uint64_t *)&v178);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "mode", (uint64_t *)&v178);
  v19 = v178;
  v178 = 0;
  if (v19)
    (*((void (**)(void **))*v19 + 1))(v19);
  v20 = (std::__shared_weak_count *)v169.n128_u64[1];
  if (v169.n128_u64[1])
  {
    v21 = (unint64_t *)(v169.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v177;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v168);
  MIL::IRParameter::Make(&v168, (uint64_t *)&v178);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v23, "size", (uint64_t *)&v178);
  v25 = v178;
  v178 = 0;
  if (v25)
    (*((void (**)(void **))*v25 + 1))(v25);
  v26 = (std::__shared_weak_count *)v168.n128_u64[1];
  if (v168.n128_u64[1])
  {
    v27 = (unint64_t *)(v168.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v177;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v167);
  MIL::IRParameter::Make(&v167, (uint64_t *)&v178);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v29, "seed", (uint64_t *)&v178);
  v31 = v178;
  v178 = 0;
  if (v31)
    (*((void (**)(void **))*v31 + 1))(v31);
  v32 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v33 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v166 = 0;
  v35 = operator new();
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  v178 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, (void **)v35);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v178, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v166, 1uLL);
  v36 = v166;
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v173 = v38;
  *v38 = v37;
  v174 = v38 + 1;
  v175 = v38 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v173);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  __p = v40;
  *v40 = v39;
  v171 = v40 + 1;
  v172 = v40 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v159 = v42;
  *v42 = v41;
  v160 = v42 + 1;
  v161 = v42 + 1;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v159);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v162);
  MIL::IRParameter::Make(&v162, &v163);
  v43 = v163;
  v164 = v163;
  if (v163)
  {
    v44 = (_QWORD *)operator new();
    v45 = v163;
    *v44 = &unk_1EA99F888;
    v44[1] = 0;
    v44[2] = 0;
    v44[3] = v45;
  }
  else
  {
    v44 = 0;
  }
  v165 = v44;
  v163 = 0;
  v46 = v36[2];
  v47 = v36[1];
  if (v47 >= v46)
  {
    v49 = (v47 - *v36) >> 4;
    v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v51 = v46 - *v36;
    if (v51 >> 3 > v50)
      v50 = v51 >> 3;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
      v52 = 0xFFFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    v181[1] = v36 + 2;
    v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v36 + 2), v52);
    v55 = (uint64_t *)&v53[16 * v49];
    *v55 = v43;
    v55[1] = (uint64_t)v44;
    v164 = 0;
    v165 = 0;
    v57 = *v36;
    v56 = v36[1];
    if (v56 == *v36)
    {
      v60 = (void **)v36[1];
      v58 = &v53[16 * v49];
    }
    else
    {
      v58 = &v53[16 * v49];
      do
      {
        v59 = *((_OWORD *)v56 - 1);
        v56 -= 16;
        *((_OWORD *)v58 - 1) = v59;
        v58 -= 16;
        *(_QWORD *)v56 = 0;
        *((_QWORD *)v56 + 1) = 0;
      }
      while (v56 != v57);
      v60 = (void **)*v36;
      v56 = v36[1];
    }
    v48 = (char *)(v55 + 2);
    *v36 = v58;
    v178 = v60;
    v179 = (uint64_t)v60;
    v36[1] = (char *)(v55 + 2);
    v180 = (uint64_t)v56;
    v61 = v36[2];
    v36[2] = &v53[16 * v54];
    v181[0] = v61;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v178);
  }
  else
  {
    *(_QWORD *)v47 = v43;
    *((_QWORD *)v47 + 1) = v44;
    v48 = v47 + 16;
    v164 = 0;
    v165 = 0;
  }
  v36[1] = v48;
  v62 = v163;
  v163 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v162.n128_u64[1];
  if (v162.n128_u64[1])
  {
    v64 = (unint64_t *)(v162.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (__p)
  {
    v171 = __p;
    operator delete(__p);
  }
  if (v173)
  {
    v174 = v173;
    operator delete(v173);
  }
  *(_OWORD *)v157 = *(_OWORD *)a2;
  v158 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v66 = (uint64_t)v177;
  *(_QWORD *)&v156 = v177;
  if (v177)
  {
    v67 = (_QWORD *)operator new();
    *v67 = &unk_1EA99F8E8;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v66;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v156 + 1) = v67;
  v177 = 0;
  *(_QWORD *)&v155 = v166;
  if (v166)
  {
    v68 = (_QWORD *)operator new();
    v69 = v166;
    *v68 = &unk_1EA99F948;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v69;
  }
  else
  {
    v68 = 0;
  }
  *((_QWORD *)&v155 + 1) = v68;
  v166 = 0;
  v194 = 0;
  v192 = 0;
  MIL::IROperator::Make((__int128 *)v157, &v156, &v155, (uint64_t)v193, (uint64_t)v191, a3);
  v70 = v192;
  if (v192 == v191)
  {
    v71 = 4;
    v70 = v191;
  }
  else
  {
    if (!v192)
      goto LABEL_76;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_76:
  v72 = v194;
  if (v194 == v193)
  {
    v73 = 4;
    v72 = v193;
    goto LABEL_80;
  }
  if (v194)
  {
    v73 = 5;
LABEL_80:
    (*(void (**)(void))(*v72 + 8 * v73))();
  }
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v75 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (SHIBYTE(v158) < 0)
    operator delete(v157[0]);
  v173 = 0;
  v80 = (_OWORD *)operator new();
  *v80 = 0u;
  v80[1] = 0u;
  *((_DWORD *)v80 + 8) = 1065353216;
  v173 = v80;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v178);
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v80, "minimum_compute_type", (uint64_t *)&v178);
  v82 = v178;
  v178 = 0;
  if (v82)
    (*((void (**)(void **))*v82 + 1))(v82);
  v83 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v84 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 32))(*((_QWORD *)v81 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 48))(*((_QWORD *)v81 + 5), 1);
  v86 = *a3;
  v87 = (std::__shared_weak_count_vtbl *)v173;
  v152 = v173;
  if (v173)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v87;
  }
  else
  {
    v88 = 0;
  }
  v153 = v88;
  v173 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v86 + 184))(v86, &v152);
  v89 = v153;
  if (v153)
  {
    p_shared_owners = (unint64_t *)&v153->__shared_owners_;
    do
      v91 = __ldaxr(p_shared_owners);
    while (__stlxr(v91 - 1, p_shared_owners));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = *a3;
  v189[0] = &off_1EA99FBD8;
  v189[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomCategorical;
  v190 = v189;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v92 + 200))(v92, v189);
  v93 = v190;
  if (v190 == v189)
  {
    v94 = 4;
    v93 = v189;
  }
  else
  {
    if (!v190)
      goto LABEL_113;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_113:
  MIL::Validation::TensorDTypeConstraints::Make(&v178);
  v95 = v178;
  std::string::basic_string[abi:ne180100]<0>(v148, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v148, 0, (uint64_t *)&Scalar);
  v150 = Scalar;
  if (Scalar)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = Scalar;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v97;
  }
  else
  {
    v96 = 0;
  }
  v151 = v96;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v95 + 3))(v95, &v150, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v98 = v151;
  if (v151)
  {
    v99 = (unint64_t *)&v151->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = Scalar;
  Scalar = 0;
  if (v101)
    (*((void (**)(std::__shared_weak_count_vtbl *))v101->~__shared_weak_count + 1))(v101);
  if (v149 < 0)
    operator delete(v148[0]);
  v102 = v178;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = Scalar;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v145 = v103;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v142, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v102 + 3))(v102, &v144, v142);
  if (v143 < 0)
    operator delete(v142[0]);
  v105 = v145;
  if (v145)
  {
    v106 = (unint64_t *)&v145->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = Scalar;
  Scalar = 0;
  if (v108)
    (*((void (**)(std::__shared_weak_count_vtbl *))v108->~__shared_weak_count + 1))(v108);
  v109 = *a3;
  v140 = v178;
  if (v178)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = v178;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = (std::__shared_weak_count_vtbl *)v111;
  }
  else
  {
    v110 = 0;
  }
  v141 = v110;
  v178 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v109 + 56))(v109, &v140);
  v112 = v141;
  if (v141)
  {
    v113 = (unint64_t *)&v141->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v178;
  v178 = 0;
  if (v115)
    (*((void (**)(void **))*v115 + 1))(v115);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v116 = __p;
  std::string::basic_string[abi:ne180100]<0>(v136, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v136, 1, (uint64_t *)&v159);
  v138 = v159;
  if (v159)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = (std::__shared_weak_count_vtbl *)v159;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v139 = v117;
  v159 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v178, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v181, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v182, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v183, "int32");
  std::string::basic_string[abi:ne180100]<0>(v184, "int8");
  std::string::basic_string[abi:ne180100]<0>(v185, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v178, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v116 + 24))(v116, &v138, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v185[i + 2]) < 0)
      operator delete((void *)v185[i]);
  }
  v120 = v139;
  if (v139)
  {
    v121 = (unint64_t *)&v139->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v159;
  v159 = 0;
  if (v123)
    (*(void (**)(void *))(*(_QWORD *)v123 + 8))(v123);
  if (v137 < 0)
    operator delete(v136[0]);
  v124 = *a3;
  v134 = __p;
  if (__p)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)__p;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v135 = v125;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v124 + 56))(v124, &v134);
  v127 = v135;
  if (v135)
  {
    v128 = (unint64_t *)&v135->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = __p;
  __p = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  if (v173)
  {
    v131 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v173);
    MEMORY[0x1E0C023A0](v131, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, 0);
  result = (uint64_t)v177;
  if (v177)
  {
    v133 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v177);
    return MEMORY[0x1E0C023A0](v133, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09EAF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t *v66;
  void *v68;
  uint64_t v69;

  v68 = a58;
  a58 = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v69 = *v66;
  *v66 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a66, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::RandomNormal::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char **v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _OWORD *v76;
  unsigned __int8 *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void *v118;
  void *v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  void *v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  uint64_t i;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t result;
  uint64_t v150;
  void *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155;
  std::__shared_weak_count *v156;
  void *v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  void *v161[2];
  char v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  void *v165;
  std::__shared_weak_count *v166;
  void *v167[2];
  char v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173[2];
  char v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  void *v179[2];
  char v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  __n128 v185;
  __int128 v186;
  __int128 v187;
  void *v188[2];
  uint64_t v189;
  void *v190;
  void *v191;
  _QWORD *v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  __n128 v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  char **v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  _QWORD *v205;
  void *__p;
  uint64_t Scalar;
  uint64_t v208;
  _QWORD v209[3];
  uint64_t v210[3];
  uint64_t v211[3];
  uint64_t v212[3];
  _QWORD v213[3];
  uint64_t v214[5];
  _QWORD v215[3];
  _QWORD *v216;
  _BYTE v217[24];
  _BYTE *v218;
  _BYTE v219[24];
  _BYTE *v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count_vtbl *v222;
  void (__cdecl **v223)(std::__shared_weak_count *__hidden);
  uint64_t v224;

  v224 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v205 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v208 = (uint64_t)(v8 + 1);
  Scalar = (uint64_t)(v8 + 1);
  v221 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v221, 1, &v204);
  MIL::IRParameter::Make(&v204, v214);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "shape", v214);
  v9 = v214[0];
  v214[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v204.n128_u64[1];
  if (v204.n128_u64[1])
  {
    v11 = (unint64_t *)(v204.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v13 = v205;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v208 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 3, &v203);
  MIL::IRParameter::Make(&v203, v214);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v13, "mean", v214);
  v15 = v214[0];
  v214[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v17 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  v19 = v205;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v208 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 3, &v202);
  MIL::IRParameter::Make(&v202, v214);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v19, "stddev", v214);
  v21 = v214[0];
  v214[0] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v202.n128_u64[1];
  if (v202.n128_u64[1])
  {
    v23 = (unint64_t *)(v202.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v205;
  v214[0] = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)v214, 1, &v201);
  MIL::IRParameter::Make(&v201, (uint64_t *)&__p);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v25, "seed", (uint64_t *)&__p);
  v27 = __p;
  __p = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v201.n128_u64[1];
  if (v201.n128_u64[1])
  {
    v29 = (unint64_t *)(v201.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v200 = 0;
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v200, (void **)v31);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v200, 1uLL);
  v32 = v200;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v221 = v34;
  v34->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v222 = (std::__shared_weak_count_vtbl *)&v34->~__shared_weak_count_0;
  v223 = &v34->~__shared_weak_count_0;
  v214[0] = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v221);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v193 = v36;
  *v36 = v35;
  v194 = v36 + 1;
  v195 = v36 + 1;
  v214[1] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v193);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v190 = v38;
  *v38 = v37;
  v191 = v38 + 1;
  v192 = v38 + 1;
  v214[2] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v190);
  MIL::IRParameter::MakeTypeSet((uint64_t)v214, 3, &v196);
  MIL::IRParameter::Make(&v196, &v197);
  v39 = v197;
  v198 = v197;
  if (v197)
  {
    v40 = (_QWORD *)operator new();
    v41 = v197;
    *v40 = &unk_1EA99F888;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  v199 = v40;
  v197 = 0;
  v42 = v32[2];
  v43 = v32[1];
  if (v43 >= v42)
  {
    v45 = (v43 - *v32) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v47 = v42 - *v32;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v209[1] = v32 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v32 + 2), v48);
    v51 = (uint64_t *)&v49[16 * v45];
    *v51 = v39;
    v51[1] = (uint64_t)v40;
    v198 = 0;
    v199 = 0;
    v53 = *v32;
    v52 = v32[1];
    if (v52 == *v32)
    {
      v56 = v32[1];
      v54 = &v49[16 * v45];
    }
    else
    {
      v54 = &v49[16 * v45];
      do
      {
        v55 = *((_OWORD *)v52 - 1);
        v52 -= 16;
        *((_OWORD *)v54 - 1) = v55;
        v54 -= 16;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
      }
      while (v52 != v53);
      v56 = *v32;
      v52 = v32[1];
    }
    v44 = (char *)(v51 + 2);
    *v32 = v54;
    Scalar = (uint64_t)v56;
    v32[1] = (char *)(v51 + 2);
    v208 = (uint64_t)v52;
    v57 = v32[2];
    v32[2] = &v49[16 * v50];
    v209[0] = v57;
    __p = v56;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v40;
    v44 = v43 + 16;
    v198 = 0;
    v199 = 0;
  }
  v32[1] = v44;
  v58 = v197;
  v197 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v60 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v221)
  {
    v222 = v221;
    operator delete(v221);
  }
  *(_OWORD *)v188 = *(_OWORD *)a2;
  v189 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v62 = (uint64_t)v205;
  *(_QWORD *)&v187 = v205;
  if (v205)
  {
    v63 = (_QWORD *)operator new();
    *v63 = &unk_1EA99F8E8;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v187 + 1) = v63;
  v205 = 0;
  *(_QWORD *)&v186 = v200;
  if (v200)
  {
    v64 = (_QWORD *)operator new();
    v65 = v200;
    *v64 = &unk_1EA99F948;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v186 + 1) = v64;
  v200 = 0;
  v220 = 0;
  v218 = 0;
  MIL::IROperator::Make((__int128 *)v188, &v187, &v186, (uint64_t)v219, (uint64_t)v217, a3);
  v66 = v218;
  if (v218 == v217)
  {
    v67 = 4;
    v66 = v217;
  }
  else
  {
    if (!v218)
      goto LABEL_72;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_72:
  v68 = v220;
  if (v220 == v219)
  {
    v69 = 4;
    v68 = v219;
    goto LABEL_76;
  }
  if (v220)
  {
    v69 = 5;
LABEL_76:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v189) < 0)
    operator delete(v188[0]);
  v221 = 0;
  v76 = (_OWORD *)operator new();
  *v76 = 0u;
  v76[1] = 0u;
  *((_DWORD *)v76 + 8) = 1065353216;
  v221 = (std::__shared_weak_count_vtbl *)v76;
  v214[0] = MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)v214, 1, &v185);
  MIL::IRParameter::Make(&v185, (uint64_t *)&__p);
  v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v76, "minimum_compute_type", (uint64_t *)&__p);
  v78 = __p;
  __p = 0;
  if (v78)
    (*(void (**)(void *))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v80 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 32))(*((_QWORD *)v77 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 48))(*((_QWORD *)v77 + 5), 1);
  v82 = *a3;
  v83 = v221;
  v183 = v221;
  if (v221)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v83;
  }
  else
  {
    v84 = 0;
  }
  v184 = v84;
  v221 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v82 + 184))(v82, &v183);
  v85 = v184;
  if (v184)
  {
    p_shared_owners = (unint64_t *)&v184->__shared_owners_;
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = *a3;
  v215[0] = &off_1EA99FBD8;
  v215[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomNormal;
  v216 = v215;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v88 + 200))(v88, v215);
  v89 = v216;
  if (v216 == v215)
  {
    v90 = 4;
    v89 = v215;
  }
  else
  {
    if (!v216)
      goto LABEL_109;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_109:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v91 = __p;
  std::string::basic_string[abi:ne180100]<0>(v179, "mean");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v179, 0, v214);
  v181 = v214[0];
  if (v214[0])
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = v214[0];
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = (std::__shared_weak_count_vtbl *)v93;
  }
  else
  {
    v92 = 0;
  }
  v182 = v92;
  v214[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "T");
  (*(void (**)(void *, uint64_t *, void **))(*(_QWORD *)v91 + 24))(v91, &v181, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v94 = v182;
  if (v182)
  {
    v95 = (unint64_t *)&v182->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v214[0];
  v214[0] = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  if (v180 < 0)
    operator delete(v179[0]);
  v98 = __p;
  std::string::basic_string[abi:ne180100]<0>(v173, "stddev");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, v214);
  v175 = v214[0];
  if (v214[0])
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = v214[0];
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v176 = v99;
  v214[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "T");
  (*(void (**)(void *, uint64_t *, void **))(*(_QWORD *)v98 + 24))(v98, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v101 = v176;
  if (v176)
  {
    v102 = (unint64_t *)&v176->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v214[0];
  v214[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v174 < 0)
    operator delete(v173[0]);
  v105 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, v214);
  v169 = v214[0];
  if (v214[0])
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v214[0];
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v170 = v106;
  v214[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v167, "T");
  (*(void (**)(void *, uint64_t *, void **))(*(_QWORD *)v105 + 24))(v105, &v169, v167);
  if (v168 < 0)
    operator delete(v167[0]);
  v108 = v170;
  if (v170)
  {
    v109 = (unint64_t *)&v170->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v214[0];
  v214[0] = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = *a3;
  v165 = __p;
  if (__p)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = (std::__shared_weak_count_vtbl *)__p;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v166 = v113;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v112 + 56))(v112, &v165);
  v115 = v166;
  if (v166)
  {
    v116 = (unint64_t *)&v166->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = __p;
  __p = 0;
  if (v118)
    (*(void (**)(void *))(*(_QWORD *)v118 + 8))(v118);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v119 = __p;
  std::string::basic_string[abi:ne180100]<0>(v161, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v161, 0, v214);
  v163 = v214[0];
  if (v214[0])
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = v214[0];
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = (std::__shared_weak_count_vtbl *)v121;
  }
  else
  {
    v120 = 0;
  }
  v164 = v120;
  v214[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v159, "K");
  (*(void (**)(void *, uint64_t *, _QWORD, void **))(*(_QWORD *)v119 + 24))(v119, &v163, 0, v159);
  if (v160 < 0)
    operator delete(v159[0]);
  v122 = v164;
  if (v164)
  {
    v123 = (unint64_t *)&v164->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v214[0];
  v214[0] = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  if (v162 < 0)
    operator delete(v161[0]);
  v126 = *a3;
  v157 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v158 = v127;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v126 + 56))(v126, &v157);
  v129 = v158;
  if (v158)
  {
    v130 = (unint64_t *)&v158->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = __p;
  __p = 0;
  if (v132)
    (*(void (**)(void *))(*(_QWORD *)v132 + 8))(v132);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v193);
  v133 = v193;
  std::string::basic_string[abi:ne180100]<0>(v153, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v153, 1, (uint64_t *)&v190);
  v155 = v190;
  if (v190)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)v190;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v156 = v134;
  v190 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v209, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v210, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v211, "int32");
  std::string::basic_string[abi:ne180100]<0>(v212, "int8");
  std::string::basic_string[abi:ne180100]<0>(v213, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)v214, (unsigned __int8 *)&__p, 6);
  (*(void (**)(void *, void **, uint64_t *, uint64_t))(*(_QWORD *)v133 + 24))(v133, &v155, v214, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v214);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v213[i + 2]) < 0)
      operator delete((void *)v213[i]);
  }
  v137 = v156;
  if (v156)
  {
    v138 = (unint64_t *)&v156->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v190;
  v190 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v154 < 0)
    operator delete(v153[0]);
  v141 = *a3;
  v151 = v193;
  if (v193)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)v193;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v152 = v142;
  v193 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v141 + 56))(v141, &v151);
  v144 = v152;
  if (v152)
  {
    v145 = (unint64_t *)&v152->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v193;
  v193 = 0;
  if (v147)
    (*(void (**)(void *))(*(_QWORD *)v147 + 8))(v147);
  if (v221)
  {
    v148 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v221);
    MEMORY[0x1E0C023A0](v148, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v200, 0);
  result = (uint64_t)v205;
  if (v205)
  {
    v150 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v205);
    return MEMORY[0x1E0C023A0](v150, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09EC638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void **a72;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v75;

  if (a64)
    (*(void (**)(void *))(*(_QWORD *)a64 + 8))(a64);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v73 - 96), 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x240], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::RandomUniform::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char **v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _OWORD *v76;
  unsigned __int8 *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void *v118;
  void *v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  void *v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  uint64_t i;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t result;
  uint64_t v150;
  void *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155;
  std::__shared_weak_count *v156;
  void *v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  void *v161[2];
  char v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  void *v165;
  std::__shared_weak_count *v166;
  void *v167[2];
  char v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173[2];
  char v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  void *v179[2];
  char v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  __n128 v185;
  __int128 v186;
  __int128 v187;
  void *v188[2];
  uint64_t v189;
  void *v190;
  void *v191;
  _QWORD *v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  __n128 v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  char **v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  _QWORD *v205;
  void *__p;
  uint64_t Scalar;
  uint64_t v208;
  _QWORD v209[3];
  uint64_t v210[3];
  uint64_t v211[3];
  uint64_t v212[3];
  _QWORD v213[3];
  uint64_t v214[5];
  _QWORD v215[3];
  _QWORD *v216;
  _BYTE v217[24];
  _BYTE *v218;
  _BYTE v219[24];
  _BYTE *v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count_vtbl *v222;
  void (__cdecl **v223)(std::__shared_weak_count *__hidden);
  uint64_t v224;

  v224 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v205 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v208 = (uint64_t)(v8 + 1);
  Scalar = (uint64_t)(v8 + 1);
  v221 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v221, 1, &v204);
  MIL::IRParameter::Make(&v204, v214);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "shape", v214);
  v9 = v214[0];
  v214[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v204.n128_u64[1];
  if (v204.n128_u64[1])
  {
    v11 = (unint64_t *)(v204.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v13 = v205;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v208 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 3, &v203);
  MIL::IRParameter::Make(&v203, v214);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v13, "low", v214);
  v15 = v214[0];
  v214[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v17 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  v19 = v205;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v208 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 3, &v202);
  MIL::IRParameter::Make(&v202, v214);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "high", v214);
  v21 = v214[0];
  v214[0] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v202.n128_u64[1];
  if (v202.n128_u64[1])
  {
    v23 = (unint64_t *)(v202.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v205;
  v214[0] = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)v214, 1, &v201);
  MIL::IRParameter::Make(&v201, (uint64_t *)&__p);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v25, "seed", (uint64_t *)&__p);
  v27 = __p;
  __p = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v201.n128_u64[1];
  if (v201.n128_u64[1])
  {
    v29 = (unint64_t *)(v201.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v200 = 0;
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v200, (void **)v31);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v200, 1uLL);
  v32 = v200;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v221 = v34;
  v34->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v222 = (std::__shared_weak_count_vtbl *)&v34->~__shared_weak_count_0;
  v223 = &v34->~__shared_weak_count_0;
  v214[0] = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v221);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v193 = v36;
  *v36 = v35;
  v194 = v36 + 1;
  v195 = v36 + 1;
  v214[1] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v193);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v190 = v38;
  *v38 = v37;
  v191 = v38 + 1;
  v192 = v38 + 1;
  v214[2] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v190);
  MIL::IRParameter::MakeTypeSet((uint64_t)v214, 3, &v196);
  MIL::IRParameter::Make(&v196, &v197);
  v39 = v197;
  v198 = v197;
  if (v197)
  {
    v40 = (_QWORD *)operator new();
    v41 = v197;
    *v40 = &unk_1EA99F888;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  v199 = v40;
  v197 = 0;
  v42 = v32[2];
  v43 = v32[1];
  if (v43 >= v42)
  {
    v45 = (v43 - *v32) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v47 = v42 - *v32;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v209[1] = v32 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v32 + 2), v48);
    v51 = (uint64_t *)&v49[16 * v45];
    *v51 = v39;
    v51[1] = (uint64_t)v40;
    v198 = 0;
    v199 = 0;
    v53 = *v32;
    v52 = v32[1];
    if (v52 == *v32)
    {
      v56 = v32[1];
      v54 = &v49[16 * v45];
    }
    else
    {
      v54 = &v49[16 * v45];
      do
      {
        v55 = *((_OWORD *)v52 - 1);
        v52 -= 16;
        *((_OWORD *)v54 - 1) = v55;
        v54 -= 16;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
      }
      while (v52 != v53);
      v56 = *v32;
      v52 = v32[1];
    }
    v44 = (char *)(v51 + 2);
    *v32 = v54;
    Scalar = (uint64_t)v56;
    v32[1] = (char *)(v51 + 2);
    v208 = (uint64_t)v52;
    v57 = v32[2];
    v32[2] = &v49[16 * v50];
    v209[0] = v57;
    __p = v56;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v40;
    v44 = v43 + 16;
    v198 = 0;
    v199 = 0;
  }
  v32[1] = v44;
  v58 = v197;
  v197 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v60 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v221)
  {
    v222 = v221;
    operator delete(v221);
  }
  *(_OWORD *)v188 = *(_OWORD *)a2;
  v189 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v62 = (uint64_t)v205;
  *(_QWORD *)&v187 = v205;
  if (v205)
  {
    v63 = (_QWORD *)operator new();
    *v63 = &unk_1EA99F8E8;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v187 + 1) = v63;
  v205 = 0;
  *(_QWORD *)&v186 = v200;
  if (v200)
  {
    v64 = (_QWORD *)operator new();
    v65 = v200;
    *v64 = &unk_1EA99F948;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v186 + 1) = v64;
  v200 = 0;
  v220 = 0;
  v218 = 0;
  MIL::IROperator::Make((__int128 *)v188, &v187, &v186, (uint64_t)v219, (uint64_t)v217, a3);
  v66 = v218;
  if (v218 == v217)
  {
    v67 = 4;
    v66 = v217;
  }
  else
  {
    if (!v218)
      goto LABEL_72;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_72:
  v68 = v220;
  if (v220 == v219)
  {
    v69 = 4;
    v68 = v219;
    goto LABEL_76;
  }
  if (v220)
  {
    v69 = 5;
LABEL_76:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v189) < 0)
    operator delete(v188[0]);
  v221 = 0;
  v76 = (_OWORD *)operator new();
  *v76 = 0u;
  v76[1] = 0u;
  *((_DWORD *)v76 + 8) = 1065353216;
  v221 = (std::__shared_weak_count_vtbl *)v76;
  v214[0] = MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)v214, 1, &v185);
  MIL::IRParameter::Make(&v185, (uint64_t *)&__p);
  v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v76, "minimum_compute_type", (uint64_t *)&__p);
  v78 = __p;
  __p = 0;
  if (v78)
    (*(void (**)(void *))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v80 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 32))(*((_QWORD *)v77 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 48))(*((_QWORD *)v77 + 5), 1);
  v82 = *a3;
  v83 = v221;
  v183 = v221;
  if (v221)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v83;
  }
  else
  {
    v84 = 0;
  }
  v184 = v84;
  v221 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v82 + 184))(v82, &v183);
  v85 = v184;
  if (v184)
  {
    p_shared_owners = (unint64_t *)&v184->__shared_owners_;
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = *a3;
  v215[0] = &off_1EA99FBD8;
  v215[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomUniform;
  v216 = v215;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v88 + 200))(v88, v215);
  v89 = v216;
  if (v216 == v215)
  {
    v90 = 4;
    v89 = v215;
  }
  else
  {
    if (!v216)
      goto LABEL_109;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_109:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v91 = __p;
  std::string::basic_string[abi:ne180100]<0>(v179, "low");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v179, 0, v214);
  v181 = v214[0];
  if (v214[0])
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = v214[0];
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = (std::__shared_weak_count_vtbl *)v93;
  }
  else
  {
    v92 = 0;
  }
  v182 = v92;
  v214[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "T");
  (*(void (**)(void *, uint64_t *, void **))(*(_QWORD *)v91 + 24))(v91, &v181, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v94 = v182;
  if (v182)
  {
    v95 = (unint64_t *)&v182->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v214[0];
  v214[0] = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  if (v180 < 0)
    operator delete(v179[0]);
  v98 = __p;
  std::string::basic_string[abi:ne180100]<0>(v173, "high");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, v214);
  v175 = v214[0];
  if (v214[0])
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = v214[0];
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v176 = v99;
  v214[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "T");
  (*(void (**)(void *, uint64_t *, void **))(*(_QWORD *)v98 + 24))(v98, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v101 = v176;
  if (v176)
  {
    v102 = (unint64_t *)&v176->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v214[0];
  v214[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v174 < 0)
    operator delete(v173[0]);
  v105 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, v214);
  v169 = v214[0];
  if (v214[0])
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v214[0];
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v170 = v106;
  v214[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v167, "T");
  (*(void (**)(void *, uint64_t *, void **))(*(_QWORD *)v105 + 24))(v105, &v169, v167);
  if (v168 < 0)
    operator delete(v167[0]);
  v108 = v170;
  if (v170)
  {
    v109 = (unint64_t *)&v170->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v214[0];
  v214[0] = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = *a3;
  v165 = __p;
  if (__p)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = (std::__shared_weak_count_vtbl *)__p;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v166 = v113;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v112 + 56))(v112, &v165);
  v115 = v166;
  if (v166)
  {
    v116 = (unint64_t *)&v166->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = __p;
  __p = 0;
  if (v118)
    (*(void (**)(void *))(*(_QWORD *)v118 + 8))(v118);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v119 = __p;
  std::string::basic_string[abi:ne180100]<0>(v161, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v161, 0, v214);
  v163 = v214[0];
  if (v214[0])
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = v214[0];
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = (std::__shared_weak_count_vtbl *)v121;
  }
  else
  {
    v120 = 0;
  }
  v164 = v120;
  v214[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v159, "K");
  (*(void (**)(void *, uint64_t *, _QWORD, void **))(*(_QWORD *)v119 + 24))(v119, &v163, 0, v159);
  if (v160 < 0)
    operator delete(v159[0]);
  v122 = v164;
  if (v164)
  {
    v123 = (unint64_t *)&v164->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v214[0];
  v214[0] = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  if (v162 < 0)
    operator delete(v161[0]);
  v126 = *a3;
  v157 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v158 = v127;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v126 + 56))(v126, &v157);
  v129 = v158;
  if (v158)
  {
    v130 = (unint64_t *)&v158->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = __p;
  __p = 0;
  if (v132)
    (*(void (**)(void *))(*(_QWORD *)v132 + 8))(v132);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v193);
  v133 = v193;
  std::string::basic_string[abi:ne180100]<0>(v153, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v153, 1, (uint64_t *)&v190);
  v155 = v190;
  if (v190)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)v190;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v156 = v134;
  v190 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v209, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v210, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v211, "int32");
  std::string::basic_string[abi:ne180100]<0>(v212, "int8");
  std::string::basic_string[abi:ne180100]<0>(v213, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)v214, (unsigned __int8 *)&__p, 6);
  (*(void (**)(void *, void **, uint64_t *, uint64_t))(*(_QWORD *)v133 + 24))(v133, &v155, v214, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v214);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v213[i + 2]) < 0)
      operator delete((void *)v213[i]);
  }
  v137 = v156;
  if (v156)
  {
    v138 = (unint64_t *)&v156->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v190;
  v190 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v154 < 0)
    operator delete(v153[0]);
  v141 = *a3;
  v151 = v193;
  if (v193)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)v193;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v152 = v142;
  v193 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v141 + 56))(v141, &v151);
  v144 = v152;
  if (v152)
  {
    v145 = (unint64_t *)&v152->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v193;
  v193 = 0;
  if (v147)
    (*(void (**)(void *))(*(_QWORD *)v147 + 8))(v147);
  if (v221)
  {
    v148 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v221);
    MEMORY[0x1E0C023A0](v148, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v200, 0);
  result = (uint64_t)v205;
  if (v205)
  {
    v150 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v205);
    return MEMORY[0x1E0C023A0](v150, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09EDDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void **a72;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v75;

  if (a64)
    (*(void (**)(void *))(*(_QWORD *)a64 + 8))(a64);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v73 - 96), 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x240], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::GRU::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count_vtbl *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  unsigned __int8 *v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  unsigned __int8 *v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  unsigned __int8 *v92;
  void **v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  unsigned __int8 *v98;
  void **v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  void **v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  unsigned __int8 *v110;
  void **v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  unsigned __int8 *v116;
  void **v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  char **v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t *v147;
  char *v148;
  char *v149;
  char *v150;
  __int128 v151;
  void **v152;
  char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  char **v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t *v180;
  char *v181;
  char *v182;
  char *v183;
  __int128 v184;
  void **v185;
  char *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  char **v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  _OWORD *v205;
  unsigned __int8 *v206;
  void **v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  unint64_t *p_shared_owners;
  unint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  void **v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count_vtbl *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count_vtbl *v226;
  void **v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count_vtbl *v233;
  void **v234;
  std::__shared_weak_count *v235;
  std::__shared_weak_count_vtbl *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count_vtbl *v240;
  void **v241;
  std::__shared_weak_count *v242;
  std::__shared_weak_count_vtbl *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count_vtbl *v247;
  void **v248;
  std::__shared_weak_count *v249;
  std::__shared_weak_count_vtbl *v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count_vtbl *v254;
  void **v255;
  std::__shared_weak_count *v256;
  std::__shared_weak_count_vtbl *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count_vtbl *v261;
  void **v262;
  std::__shared_weak_count *v263;
  std::__shared_weak_count_vtbl *v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count_vtbl *v268;
  void **v269;
  std::__shared_weak_count *v270;
  std::__shared_weak_count_vtbl *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count_vtbl *v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  void **v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  void **v282;
  void **v283;
  std::__shared_weak_count *v284;
  std::__shared_weak_count_vtbl *v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count_vtbl *v289;
  void **v290;
  std::__shared_weak_count *v291;
  std::__shared_weak_count_vtbl *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count_vtbl *v296;
  void **v297;
  std::__shared_weak_count *v298;
  std::__shared_weak_count_vtbl *v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count_vtbl *v303;
  void **v304;
  std::__shared_weak_count *v305;
  std::__shared_weak_count_vtbl *v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count_vtbl *v310;
  void **v311;
  std::__shared_weak_count *v312;
  std::__shared_weak_count_vtbl *v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count_vtbl *v317;
  void **v318;
  std::__shared_weak_count *v319;
  std::__shared_weak_count_vtbl *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count_vtbl *v324;
  void **v325;
  std::__shared_weak_count *v326;
  std::__shared_weak_count_vtbl *v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count_vtbl *v331;
  void **v332;
  std::__shared_weak_count *v333;
  std::__shared_weak_count_vtbl *v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count_vtbl *v338;
  void **v339;
  std::__shared_weak_count *v340;
  std::__shared_weak_count_vtbl *v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count_vtbl *v345;
  void **v346;
  std::__shared_weak_count *v347;
  std::__shared_weak_count_vtbl *v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count_vtbl *v352;
  void **v353;
  std::__shared_weak_count *v354;
  std::__shared_weak_count_vtbl *v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count_vtbl *v359;
  void **v360;
  std::__shared_weak_count *v361;
  std::__shared_weak_count_vtbl *v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count_vtbl *v366;
  void **v367;
  std::__shared_weak_count *v368;
  std::__shared_weak_count_vtbl *v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  std::__shared_weak_count_vtbl *v373;
  void **v374;
  std::__shared_weak_count *v375;
  std::__shared_weak_count_vtbl *v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count_vtbl *v380;
  void **v381;
  std::__shared_weak_count *v382;
  std::__shared_weak_count_vtbl *v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count_vtbl *v387;
  uint64_t v388;
  std::__shared_weak_count *v389;
  void **v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  void **v394;
  void *v395;
  std::__shared_weak_count *v396;
  std::__shared_weak_count_vtbl *v397;
  uint64_t i;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  void *v402;
  void *v403;
  std::__shared_weak_count *v404;
  std::__shared_weak_count_vtbl *v405;
  uint64_t j;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  void *v410;
  void *v411;
  std::__shared_weak_count *v412;
  std::__shared_weak_count_vtbl *v413;
  uint64_t k;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  void *v418;
  void *v419;
  std::__shared_weak_count *v420;
  std::__shared_weak_count_vtbl *v421;
  uint64_t m;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  void *v426;
  uint64_t v427;
  std::__shared_weak_count *v428;
  std::__shared_weak_count_vtbl *v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t result;
  uint64_t v436;
  void *v437;
  std::__shared_weak_count *v438;
  void *v439[2];
  char v440;
  void *v441;
  std::__shared_weak_count *v442;
  void *v443[2];
  char v444;
  void *v445;
  std::__shared_weak_count *v446;
  void *v447[2];
  char v448;
  void *v449;
  std::__shared_weak_count *v450;
  void *v451[2];
  char v452;
  void *v453;
  std::__shared_weak_count *v454;
  void **v455;
  std::__shared_weak_count *v456;
  void *v457[2];
  char v458;
  std::__shared_weak_count_vtbl *v459;
  std::__shared_weak_count *v460;
  void *v461[2];
  char v462;
  std::__shared_weak_count_vtbl *v463;
  std::__shared_weak_count *v464;
  void *v465[2];
  char v466;
  std::__shared_weak_count_vtbl *v467;
  std::__shared_weak_count *v468;
  void *v469[2];
  char v470;
  std::__shared_weak_count_vtbl *v471;
  std::__shared_weak_count *v472;
  void *v473[2];
  char v474;
  void *v475[2];
  char v476;
  std::__shared_weak_count_vtbl *v477;
  std::__shared_weak_count *v478;
  void *v479[2];
  char v480;
  void *v481[2];
  char v482;
  std::__shared_weak_count_vtbl *v483;
  std::__shared_weak_count *v484;
  void *v485[2];
  char v486;
  void *v487[2];
  char v488;
  std::__shared_weak_count_vtbl *v489;
  std::__shared_weak_count *v490;
  void *v491[2];
  char v492;
  void *v493[2];
  char v494;
  std::__shared_weak_count_vtbl *v495;
  std::__shared_weak_count *v496;
  void *v497[2];
  char v498;
  void *v499[2];
  char v500;
  std::__shared_weak_count_vtbl *v501;
  std::__shared_weak_count *v502;
  void *v503[2];
  char v504;
  void *v505[2];
  char v506;
  std::__shared_weak_count_vtbl *v507;
  std::__shared_weak_count *v508;
  void *v509[2];
  char v510;
  void *v511[2];
  char v512;
  std::__shared_weak_count_vtbl *v513;
  std::__shared_weak_count *v514;
  void *v515[2];
  char v516;
  void *v517[2];
  char v518;
  std::__shared_weak_count_vtbl *v519;
  std::__shared_weak_count *v520;
  void *v521[2];
  char v522;
  void *v523[2];
  char v524;
  std::__shared_weak_count_vtbl *v525;
  std::__shared_weak_count *v526;
  void *v527[2];
  char v528;
  void *v529[2];
  char v530;
  std::__shared_weak_count_vtbl *v531;
  std::__shared_weak_count *v532;
  void *v533[2];
  char v534;
  void *v535[2];
  char v536;
  std::__shared_weak_count_vtbl *v537;
  std::__shared_weak_count *v538;
  void **v539;
  std::__shared_weak_count *v540;
  void *v541[2];
  char v542;
  std::__shared_weak_count_vtbl *v543;
  std::__shared_weak_count *v544;
  void *v545[2];
  char v546;
  std::__shared_weak_count_vtbl *v547;
  std::__shared_weak_count *v548;
  void *v549[2];
  char v550;
  void *v551[2];
  char v552;
  std::__shared_weak_count_vtbl *v553;
  std::__shared_weak_count *v554;
  void *v555[2];
  char v556;
  void *v557[2];
  char v558;
  std::__shared_weak_count_vtbl *v559;
  std::__shared_weak_count *v560;
  void *v561[2];
  char v562;
  void *v563[2];
  char v564;
  std::__shared_weak_count_vtbl *v565;
  std::__shared_weak_count *v566;
  void *v567[2];
  char v568;
  void *v569[2];
  char v570;
  std::__shared_weak_count_vtbl *v571;
  std::__shared_weak_count *v572;
  void *v573[2];
  char v574;
  void *v575[2];
  char v576;
  std::__shared_weak_count_vtbl *v577;
  std::__shared_weak_count *v578;
  void *v579[2];
  char v580;
  void *v581[2];
  char v582;
  std::__shared_weak_count_vtbl *v583;
  std::__shared_weak_count *v584;
  void *v585;
  std::__shared_weak_count *v586;
  __n128 v587;
  __int128 v588;
  __int128 v589;
  void *v590[2];
  uint64_t v591;
  __n128 v592;
  void *v593;
  void *v594;
  _QWORD *v595;
  __n128 v596;
  uint64_t v597;
  uint64_t v598;
  _QWORD *v599;
  char **v600;
  __n128 v601;
  __n128 v602;
  __n128 v603;
  __n128 v604;
  __n128 v605;
  __n128 v606;
  __n128 v607;
  __n128 v608;
  __n128 v609;
  __n128 v610;
  void *__p;
  void *v612;
  _QWORD *v613;
  void *v614;
  void *v615;
  _QWORD *v616;
  __n128 v617;
  _QWORD *v618;
  void **v619;
  uint64_t v620;
  uint64_t v621;
  char *v622;
  char **v623;
  char v624;
  _QWORD v625[3];
  _QWORD v626[3];
  _QWORD v627[3];
  _QWORD v628[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t p_on_zero_shared;
  _QWORD v632[3];
  _QWORD *v633;
  _BYTE v634[24];
  _BYTE *v635;
  _QWORD v636[3];
  _QWORD *v637;
  uint64_t v638;

  v638 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v618 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  p_on_zero_shared = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v619 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v616 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v614 = v14;
  v615 = v14 + 3;
  v620 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v614);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v613 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v612 = v18 + 3;
  v621 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v619, 3, &v617);
  MIL::IRParameter::Make(&v617, (uint64_t *)&v593);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v593);
  v19 = v593;
  v593 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v617.n128_u64[1];
  if (v617.n128_u64[1])
  {
    v21 = (unint64_t *)(v617.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v612 = __p;
    operator delete(__p);
  }
  if (v614)
  {
    v615 = v614;
    operator delete(v614);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v618;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v26->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v26->__on_zero_shared;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v26->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  Scalar = v26;
  v619 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(0x10uLL);
  v616 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v614 = v29;
  v615 = v29 + 2;
  v620 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v614);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x10uLL);
  v613 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  __p = v32;
  v612 = v32 + 2;
  v621 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v619, 3, &v610);
  MIL::IRParameter::Make(&v610, (uint64_t *)&v593);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v23, "initial_h", (uint64_t *)&v593);
  v33 = v593;
  v593 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v610.n128_u64[1];
  if (v610.n128_u64[1])
  {
    v35 = (unint64_t *)(v610.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (__p)
  {
    v612 = __p;
    operator delete(__p);
  }
  if (v614)
  {
    v615 = v614;
    operator delete(v614);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v37 = v618;
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v40->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v40->__on_zero_shared;
  v40->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
  v40->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  Scalar = v40;
  v619 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x10uLL);
  v616 = v43 + 2;
  *v43 = v41;
  v43[1] = v42;
  v614 = v43;
  v615 = v43 + 2;
  v620 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v614);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = operator new(0x10uLL);
  v613 = v46 + 2;
  *v46 = v44;
  v46[1] = v45;
  __p = v46;
  v612 = v46 + 2;
  v621 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v619, 3, &v609);
  MIL::IRParameter::Make(&v609, (uint64_t *)&v593);
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v37, "weight_ih", (uint64_t *)&v593);
  v48 = v593;
  v593 = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v609.n128_u64[1];
  if (v609.n128_u64[1])
  {
    v50 = (unint64_t *)(v609.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (__p)
  {
    v612 = __p;
    operator delete(__p);
  }
  if (v614)
  {
    v615 = v614;
    operator delete(v614);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v618;
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v55->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v55->__on_zero_shared;
  v55->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v53;
  v55->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v54;
  Scalar = v55;
  v619 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v56 = MIL::IRUnknownDimension::Make(a1, 0);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(0x10uLL);
  v616 = v58 + 2;
  *v58 = v56;
  v58[1] = v57;
  v614 = v58;
  v615 = v58 + 2;
  v620 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v614);
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = operator new(0x10uLL);
  v613 = v61 + 2;
  *v61 = v59;
  v61[1] = v60;
  __p = v61;
  v612 = v61 + 2;
  v621 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v619, 3, &v608);
  MIL::IRParameter::Make(&v608, (uint64_t *)&v593);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v52, "weight_hh", (uint64_t *)&v593);
  v63 = v593;
  v593 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v608.n128_u64[1];
  if (v608.n128_u64[1])
  {
    v65 = (unint64_t *)(v608.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (__p)
  {
    v612 = __p;
    operator delete(__p);
  }
  if (v614)
  {
    v615 = v614;
    operator delete(v614);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  v67 = v618;
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v69 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v69;
  v69->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v68;
  p_get_deleter = (uint64_t)&v69->~__shared_weak_count_0;
  p_on_zero_shared = (uint64_t)&v69->~__shared_weak_count_0;
  v619 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = operator new(8uLL);
  v614 = v71;
  *v71 = v70;
  v616 = v71 + 1;
  v615 = v71 + 1;
  v620 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v614);
  v72 = MIL::IRUnknownDimension::Make(a1, 0);
  v73 = operator new(8uLL);
  __p = v73;
  *v73 = v72;
  v613 = v73 + 1;
  v612 = v73 + 1;
  v621 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v619, 3, &v607);
  MIL::IRParameter::Make(&v607, (uint64_t *)&v593);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v67, "bias", (uint64_t *)&v593);
  v75 = v593;
  v593 = 0;
  if (v75)
    (*(void (**)(void *))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v607.n128_u64[1];
  if (v607.n128_u64[1])
  {
    v77 = (unint64_t *)(v607.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (__p)
  {
    v612 = __p;
    operator delete(__p);
  }
  if (v614)
  {
    v615 = v614;
    operator delete(v614);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = v618;
  v80 = MIL::IRUnknownDimension::Make(a1, 0);
  v81 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v81;
  v81->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v80;
  p_get_deleter = (uint64_t)&v81->~__shared_weak_count_0;
  p_on_zero_shared = (uint64_t)&v81->~__shared_weak_count_0;
  v619 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v82 = MIL::IRUnknownDimension::Make(a1, 0);
  v83 = operator new(8uLL);
  v614 = v83;
  *v83 = v82;
  v616 = v83 + 1;
  v615 = v83 + 1;
  v620 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v614);
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = operator new(8uLL);
  __p = v85;
  *v85 = v84;
  v613 = v85 + 1;
  v612 = v85 + 1;
  v621 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v619, 3, &v606);
  MIL::IRParameter::Make(&v606, (uint64_t *)&v593);
  v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v79, "input_bias", (uint64_t *)&v593);
  v87 = v593;
  v593 = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  v88 = (std::__shared_weak_count *)v606.n128_u64[1];
  if (v606.n128_u64[1])
  {
    v89 = (unint64_t *)(v606.n128_u64[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (__p)
  {
    v612 = __p;
    operator delete(__p);
  }
  if (v614)
  {
    v615 = v614;
    operator delete(v614);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v86 + 5) + 32))(*((_QWORD *)v86 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v86 + 5) + 48))(*((_QWORD *)v86 + 5), 1);
  v91 = v618;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v605);
  MIL::IRParameter::Make(&v605, (uint64_t *)&v619);
  v92 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v91, "direction", (uint64_t *)&v619);
  v93 = v619;
  v619 = 0;
  if (v93)
    (*((void (**)(void **))*v93 + 1))(v93);
  v94 = (std::__shared_weak_count *)v605.n128_u64[1];
  if (v605.n128_u64[1])
  {
    v95 = (unint64_t *)(v605.n128_u64[1] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v92 + 5) + 32))(*((_QWORD *)v92 + 5), 1);
  v97 = v618;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v604);
  MIL::IRParameter::Make(&v604, (uint64_t *)&v619);
  v98 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v97, "output_sequence", (uint64_t *)&v619);
  v99 = v619;
  v619 = 0;
  if (v99)
    (*((void (**)(void **))*v99 + 1))(v99);
  v100 = (std::__shared_weak_count *)v604.n128_u64[1];
  if (v604.n128_u64[1])
  {
    v101 = (unint64_t *)(v604.n128_u64[1] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v98 + 5) + 32))(*((_QWORD *)v98 + 5), 1);
  v103 = v618;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v603);
  MIL::IRParameter::Make(&v603, (uint64_t *)&v619);
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v103, "recurrent_activation", (uint64_t *)&v619);
  v105 = v619;
  v619 = 0;
  if (v105)
    (*((void (**)(void **))*v105 + 1))(v105);
  v106 = (std::__shared_weak_count *)v603.n128_u64[1];
  if (v603.n128_u64[1])
  {
    v107 = (unint64_t *)(v603.n128_u64[1] + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v104 + 5) + 32))(*((_QWORD *)v104 + 5), 1);
  v109 = v618;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v602);
  MIL::IRParameter::Make(&v602, (uint64_t *)&v619);
  v110 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v109, "activation", (uint64_t *)&v619);
  v111 = v619;
  v619 = 0;
  if (v111)
    (*((void (**)(void **))*v111 + 1))(v111);
  v112 = (std::__shared_weak_count *)v602.n128_u64[1];
  if (v602.n128_u64[1])
  {
    v113 = (unint64_t *)(v602.n128_u64[1] + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v110 + 5) + 32))(*((_QWORD *)v110 + 5), 1);
  v115 = v618;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v601);
  MIL::IRParameter::Make(&v601, (uint64_t *)&v619);
  v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v115, "reset_after", (uint64_t *)&v619);
  v117 = v619;
  v619 = 0;
  if (v117)
    (*((void (**)(void **))*v117 + 1))(v117);
  v118 = (std::__shared_weak_count *)v601.n128_u64[1];
  if (v601.n128_u64[1])
  {
    v119 = (unint64_t *)(v601.n128_u64[1] + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v116 + 5) + 32))(*((_QWORD *)v116 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v116 + 5) + 48))(*((_QWORD *)v116 + 5), 1);
  v600 = 0;
  v121 = operator new();
  *(_QWORD *)v121 = 0;
  *(_QWORD *)(v121 + 8) = 0;
  *(_QWORD *)(v121 + 16) = 0;
  v619 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v600, (void **)v121);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v619, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v600, 2uLL);
  v122 = v600;
  v123 = MIL::IRUnknownDimension::Make(a1, 0);
  v124 = MIL::IRUnknownDimension::Make(a1, 0);
  v125 = MIL::IRUnknownDimension::Make(a1, 0);
  v126 = operator new(0x18uLL);
  v616 = v126 + 3;
  *v126 = v123;
  v126[1] = v124;
  v126[2] = v125;
  v614 = v126;
  v615 = v126 + 3;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v614);
  v127 = MIL::IRUnknownDimension::Make(a1, 0);
  v128 = MIL::IRUnknownDimension::Make(a1, 0);
  v129 = MIL::IRUnknownDimension::Make(a1, 0);
  v130 = operator new(0x18uLL);
  v613 = v130 + 3;
  *v130 = v127;
  v130[1] = v128;
  v130[2] = v129;
  __p = v130;
  v612 = v130 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v131 = MIL::IRUnknownDimension::Make(a1, 0);
  v132 = MIL::IRUnknownDimension::Make(a1, 0);
  v133 = MIL::IRUnknownDimension::Make(a1, 0);
  v134 = operator new(0x18uLL);
  v595 = v134 + 3;
  *v134 = v131;
  v134[1] = v132;
  v134[2] = v133;
  v593 = v134;
  v594 = v134 + 3;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v593);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v596);
  MIL::IRParameter::Make(&v596, &v597);
  v135 = v597;
  v598 = v597;
  if (v597)
  {
    v136 = (_QWORD *)operator new();
    v137 = v597;
    *v136 = &unk_1EA99F888;
    v136[1] = 0;
    v136[2] = 0;
    v136[3] = v137;
  }
  else
  {
    v136 = 0;
  }
  v599 = v136;
  v597 = 0;
  v138 = v122[2];
  v139 = v122[1];
  if (v139 >= v138)
  {
    v141 = (v139 - *v122) >> 4;
    v142 = v141 + 1;
    if ((unint64_t)(v141 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v143 = v138 - *v122;
    if (v143 >> 3 > v142)
      v142 = v143 >> 3;
    if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF0)
      v144 = 0xFFFFFFFFFFFFFFFLL;
    else
      v144 = v142;
    v623 = v122 + 2;
    v145 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v122 + 2), v144);
    v147 = (uint64_t *)&v145[16 * v141];
    *v147 = v135;
    v147[1] = (uint64_t)v136;
    v599 = 0;
    v598 = 0;
    v149 = *v122;
    v148 = v122[1];
    if (v148 == *v122)
    {
      v152 = (void **)v122[1];
      v150 = &v145[16 * v141];
    }
    else
    {
      v150 = &v145[16 * v141];
      do
      {
        v151 = *((_OWORD *)v148 - 1);
        v148 -= 16;
        *((_OWORD *)v150 - 1) = v151;
        v150 -= 16;
        *(_QWORD *)v148 = 0;
        *((_QWORD *)v148 + 1) = 0;
      }
      while (v148 != v149);
      v152 = (void **)*v122;
      v148 = v122[1];
    }
    v140 = (char *)(v147 + 2);
    *v122 = v150;
    v620 = (uint64_t)v152;
    v122[1] = (char *)(v147 + 2);
    v621 = (uint64_t)v148;
    v153 = v122[2];
    v122[2] = &v145[16 * v146];
    v622 = v153;
    v619 = v152;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v619);
  }
  else
  {
    *(_QWORD *)v139 = v135;
    *((_QWORD *)v139 + 1) = v136;
    v140 = v139 + 16;
    v599 = 0;
    v598 = 0;
  }
  v122[1] = v140;
  v154 = v597;
  v597 = 0;
  if (v154)
    (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
  v155 = (std::__shared_weak_count *)v596.n128_u64[1];
  if (v596.n128_u64[1])
  {
    v156 = (unint64_t *)(v596.n128_u64[1] + 8);
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  if (v593)
  {
    v594 = v593;
    operator delete(v593);
  }
  if (__p)
  {
    v612 = __p;
    operator delete(__p);
  }
  if (v614)
  {
    v615 = v614;
    operator delete(v614);
  }
  v158 = v600;
  v159 = MIL::IRUnknownDimension::Make(a1, 0);
  v160 = MIL::IRUnknownDimension::Make(a1, 0);
  v161 = operator new(0x10uLL);
  v616 = v161 + 2;
  *v161 = v159;
  v161[1] = v160;
  v614 = v161;
  v615 = v161 + 2;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v614);
  v162 = MIL::IRUnknownDimension::Make(a1, 0);
  v163 = MIL::IRUnknownDimension::Make(a1, 0);
  v164 = operator new(0x10uLL);
  v613 = v164 + 2;
  *v164 = v162;
  v164[1] = v163;
  __p = v164;
  v612 = v164 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v165 = MIL::IRUnknownDimension::Make(a1, 0);
  v166 = MIL::IRUnknownDimension::Make(a1, 0);
  v167 = operator new(0x10uLL);
  v595 = v167 + 2;
  *v167 = v165;
  v167[1] = v166;
  v593 = v167;
  v594 = v167 + 2;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v593);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v592);
  MIL::IRParameter::Make(&v592, &v597);
  v168 = v597;
  v598 = v597;
  if (v597)
  {
    v169 = (_QWORD *)operator new();
    v170 = v597;
    *v169 = &unk_1EA99F888;
    v169[1] = 0;
    v169[2] = 0;
    v169[3] = v170;
  }
  else
  {
    v169 = 0;
  }
  v599 = v169;
  v597 = 0;
  v171 = v158[2];
  v172 = v158[1];
  if (v172 >= v171)
  {
    v174 = (v172 - *v158) >> 4;
    v175 = v174 + 1;
    if ((unint64_t)(v174 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v176 = v171 - *v158;
    if (v176 >> 3 > v175)
      v175 = v176 >> 3;
    if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF0)
      v177 = 0xFFFFFFFFFFFFFFFLL;
    else
      v177 = v175;
    v623 = v158 + 2;
    v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v158 + 2), v177);
    v180 = (uint64_t *)&v178[16 * v174];
    *v180 = v168;
    v180[1] = (uint64_t)v169;
    v599 = 0;
    v598 = 0;
    v182 = *v158;
    v181 = v158[1];
    if (v181 == *v158)
    {
      v185 = (void **)v158[1];
      v183 = &v178[16 * v174];
    }
    else
    {
      v183 = &v178[16 * v174];
      do
      {
        v184 = *((_OWORD *)v181 - 1);
        v181 -= 16;
        *((_OWORD *)v183 - 1) = v184;
        v183 -= 16;
        *(_QWORD *)v181 = 0;
        *((_QWORD *)v181 + 1) = 0;
      }
      while (v181 != v182);
      v185 = (void **)*v158;
      v181 = v158[1];
    }
    v173 = (char *)(v180 + 2);
    *v158 = v183;
    v620 = (uint64_t)v185;
    v158[1] = (char *)(v180 + 2);
    v621 = (uint64_t)v181;
    v186 = v158[2];
    v158[2] = &v178[16 * v179];
    v622 = v186;
    v619 = v185;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v619);
  }
  else
  {
    *(_QWORD *)v172 = v168;
    *((_QWORD *)v172 + 1) = v169;
    v173 = v172 + 16;
    v599 = 0;
    v598 = 0;
  }
  v158[1] = v173;
  v187 = v597;
  v597 = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  v188 = (std::__shared_weak_count *)v592.n128_u64[1];
  if (v592.n128_u64[1])
  {
    v189 = (unint64_t *)(v592.n128_u64[1] + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  if (v593)
  {
    v594 = v593;
    operator delete(v593);
  }
  if (__p)
  {
    v612 = __p;
    operator delete(__p);
  }
  if (v614)
  {
    v615 = v614;
    operator delete(v614);
  }
  *(_OWORD *)v590 = *(_OWORD *)a2;
  v591 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v191 = (uint64_t)v618;
  *(_QWORD *)&v589 = v618;
  if (v618)
  {
    v192 = (_QWORD *)operator new();
    *v192 = &unk_1EA99F8E8;
    v192[1] = 0;
    v192[2] = 0;
    v192[3] = v191;
  }
  else
  {
    v192 = 0;
  }
  *((_QWORD *)&v589 + 1) = v192;
  v618 = 0;
  *(_QWORD *)&v588 = v600;
  if (v600)
  {
    v193 = (_QWORD *)operator new();
    v194 = v600;
    *v193 = &unk_1EA99F948;
    v193[1] = 0;
    v193[2] = 0;
    v193[3] = v194;
  }
  else
  {
    v193 = 0;
  }
  *((_QWORD *)&v588 + 1) = v193;
  v600 = 0;
  v636[0] = &unk_1EA99FAC8;
  v636[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateGRU;
  v637 = v636;
  v635 = 0;
  MIL::IROperator::Make((__int128 *)v590, &v589, &v588, (uint64_t)v636, (uint64_t)v634, a3);
  v195 = v635;
  if (v635 == v634)
  {
    v196 = 4;
    v195 = v634;
  }
  else
  {
    if (!v635)
      goto LABEL_185;
    v196 = 5;
  }
  (*(void (**)(void))(*v195 + 8 * v196))();
LABEL_185:
  v197 = v637;
  if (v637 == v636)
  {
    v198 = 4;
    v197 = v636;
    goto LABEL_189;
  }
  if (v637)
  {
    v198 = 5;
LABEL_189:
    (*(void (**)(void))(*v197 + 8 * v198))();
  }
  v199 = (std::__shared_weak_count *)*((_QWORD *)&v588 + 1);
  if (*((_QWORD *)&v588 + 1))
  {
    v200 = (unint64_t *)(*((_QWORD *)&v588 + 1) + 8);
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = (std::__shared_weak_count *)*((_QWORD *)&v589 + 1);
  if (*((_QWORD *)&v589 + 1))
  {
    v203 = (unint64_t *)(*((_QWORD *)&v589 + 1) + 8);
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  if (SHIBYTE(v591) < 0)
    operator delete(v590[0]);
  v614 = 0;
  v205 = (_OWORD *)operator new();
  *v205 = 0u;
  v205[1] = 0u;
  *((_DWORD *)v205 + 8) = 1065353216;
  v614 = v205;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v587);
  MIL::IRParameter::Make(&v587, (uint64_t *)&v619);
  v206 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v205, "minimum_compute_type", (uint64_t *)&v619);
  v207 = v619;
  v619 = 0;
  if (v207)
    (*((void (**)(void **))*v207 + 1))(v207);
  v208 = (std::__shared_weak_count *)v587.n128_u64[1];
  if (v587.n128_u64[1])
  {
    v209 = (unint64_t *)(v587.n128_u64[1] + 8);
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v206 + 5) + 32))(*((_QWORD *)v206 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v206 + 5) + 48))(*((_QWORD *)v206 + 5), 1);
  v211 = *a3;
  v212 = (std::__shared_weak_count_vtbl *)v614;
  v585 = v614;
  if (v614)
  {
    v213 = (std::__shared_weak_count *)operator new();
    v213->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v213->__shared_owners_ = 0;
    v213->__shared_weak_owners_ = 0;
    v213[1].__vftable = v212;
  }
  else
  {
    v213 = 0;
  }
  v586 = v213;
  v614 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v211 + 184))(v211, &v585);
  v214 = v586;
  if (v586)
  {
    p_shared_owners = (unint64_t *)&v586->__shared_owners_;
    do
      v216 = __ldaxr(p_shared_owners);
    while (__stlxr(v216 - 1, p_shared_owners));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = *a3;
  v632[0] = &off_1EA99FBD8;
  v632[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceGRU;
  v633 = v632;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v217 + 200))(v217, v632);
  v218 = v633;
  if (v633 == v632)
  {
    v219 = 4;
    v218 = v632;
  }
  else
  {
    if (!v633)
      goto LABEL_222;
    v219 = 5;
  }
  (*(void (**)(void))(*v218 + 8 * v219))();
LABEL_222:
  MIL::Validation::TensorDTypeConstraints::Make(&v619);
  v220 = v619;
  std::string::basic_string[abi:ne180100]<0>(v581, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v581, 0, (uint64_t *)&Scalar);
  v583 = Scalar;
  if (Scalar)
  {
    v221 = (std::__shared_weak_count *)operator new();
    v222 = Scalar;
    v221->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v221->__shared_owners_ = 0;
    v221->__shared_weak_owners_ = 0;
    v221[1].__vftable = v222;
  }
  else
  {
    v221 = 0;
  }
  v584 = v221;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v579, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v220 + 3))(v220, &v583, v579);
  if (v580 < 0)
    operator delete(v579[0]);
  v223 = v584;
  if (v584)
  {
    v224 = (unint64_t *)&v584->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = Scalar;
  Scalar = 0;
  if (v226)
    (*((void (**)(std::__shared_weak_count_vtbl *))v226->~__shared_weak_count + 1))(v226);
  if (v582 < 0)
    operator delete(v581[0]);
  v227 = v619;
  std::string::basic_string[abi:ne180100]<0>(v575, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v575, 0, (uint64_t *)&Scalar);
  v577 = Scalar;
  if (Scalar)
  {
    v228 = (std::__shared_weak_count *)operator new();
    v229 = Scalar;
    v228->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v228->__shared_owners_ = 0;
    v228->__shared_weak_owners_ = 0;
    v228[1].__vftable = v229;
  }
  else
  {
    v228 = 0;
  }
  v578 = v228;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v573, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v227 + 3))(v227, &v577, v573);
  if (v574 < 0)
    operator delete(v573[0]);
  v230 = v578;
  if (v578)
  {
    v231 = (unint64_t *)&v578->__shared_owners_;
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
    }
  }
  v233 = Scalar;
  Scalar = 0;
  if (v233)
    (*((void (**)(std::__shared_weak_count_vtbl *))v233->~__shared_weak_count + 1))(v233);
  if (v576 < 0)
    operator delete(v575[0]);
  v234 = v619;
  std::string::basic_string[abi:ne180100]<0>(v569, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v569, 0, (uint64_t *)&Scalar);
  v571 = Scalar;
  if (Scalar)
  {
    v235 = (std::__shared_weak_count *)operator new();
    v236 = Scalar;
    v235->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v235->__shared_owners_ = 0;
    v235->__shared_weak_owners_ = 0;
    v235[1].__vftable = v236;
  }
  else
  {
    v235 = 0;
  }
  v572 = v235;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v567, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v234 + 3))(v234, &v571, v567);
  if (v568 < 0)
    operator delete(v567[0]);
  v237 = v572;
  if (v572)
  {
    v238 = (unint64_t *)&v572->__shared_owners_;
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  v240 = Scalar;
  Scalar = 0;
  if (v240)
    (*((void (**)(std::__shared_weak_count_vtbl *))v240->~__shared_weak_count + 1))(v240);
  if (v570 < 0)
    operator delete(v569[0]);
  v241 = v619;
  std::string::basic_string[abi:ne180100]<0>(v563, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v563, 0, (uint64_t *)&Scalar);
  v565 = Scalar;
  if (Scalar)
  {
    v242 = (std::__shared_weak_count *)operator new();
    v243 = Scalar;
    v242->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v242->__shared_owners_ = 0;
    v242->__shared_weak_owners_ = 0;
    v242[1].__vftable = v243;
  }
  else
  {
    v242 = 0;
  }
  v566 = v242;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v561, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v241 + 3))(v241, &v565, v561);
  if (v562 < 0)
    operator delete(v561[0]);
  v244 = v566;
  if (v566)
  {
    v245 = (unint64_t *)&v566->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  v247 = Scalar;
  Scalar = 0;
  if (v247)
    (*((void (**)(std::__shared_weak_count_vtbl *))v247->~__shared_weak_count + 1))(v247);
  if (v564 < 0)
    operator delete(v563[0]);
  v248 = v619;
  std::string::basic_string[abi:ne180100]<0>(v557, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v557, 1, (uint64_t *)&Scalar);
  v559 = Scalar;
  if (Scalar)
  {
    v249 = (std::__shared_weak_count *)operator new();
    v250 = Scalar;
    v249->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v249->__shared_owners_ = 0;
    v249->__shared_weak_owners_ = 0;
    v249[1].__vftable = v250;
  }
  else
  {
    v249 = 0;
  }
  v560 = v249;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v555, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v248 + 3))(v248, &v559, v555);
  if (v556 < 0)
    operator delete(v555[0]);
  v251 = v560;
  if (v560)
  {
    v252 = (unint64_t *)&v560->__shared_owners_;
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  v254 = Scalar;
  Scalar = 0;
  if (v254)
    (*((void (**)(std::__shared_weak_count_vtbl *))v254->~__shared_weak_count + 1))(v254);
  if (v558 < 0)
    operator delete(v557[0]);
  v255 = v619;
  std::string::basic_string[abi:ne180100]<0>(v551, "input_bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v551, 1, (uint64_t *)&Scalar);
  v553 = Scalar;
  if (Scalar)
  {
    v256 = (std::__shared_weak_count *)operator new();
    v257 = Scalar;
    v256->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v256->__shared_owners_ = 0;
    v256->__shared_weak_owners_ = 0;
    v256[1].__vftable = v257;
  }
  else
  {
    v256 = 0;
  }
  v554 = v256;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v549, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v255 + 3))(v255, &v553, v549);
  if (v550 < 0)
    operator delete(v549[0]);
  v258 = v554;
  if (v554)
  {
    v259 = (unint64_t *)&v554->__shared_owners_;
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
  v261 = Scalar;
  Scalar = 0;
  if (v261)
    (*((void (**)(std::__shared_weak_count_vtbl *))v261->~__shared_weak_count + 1))(v261);
  if (v552 < 0)
    operator delete(v551[0]);
  v262 = v619;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v547 = Scalar;
  if (Scalar)
  {
    v263 = (std::__shared_weak_count *)operator new();
    v264 = Scalar;
    v263->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v263->__shared_owners_ = 0;
    v263->__shared_weak_owners_ = 0;
    v263[1].__vftable = v264;
  }
  else
  {
    v263 = 0;
  }
  v548 = v263;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v545, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v262 + 3))(v262, &v547, v545);
  if (v546 < 0)
    operator delete(v545[0]);
  v265 = v548;
  if (v548)
  {
    v266 = (unint64_t *)&v548->__shared_owners_;
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  v268 = Scalar;
  Scalar = 0;
  if (v268)
    (*((void (**)(std::__shared_weak_count_vtbl *))v268->~__shared_weak_count + 1))(v268);
  v269 = v619;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v543 = Scalar;
  if (Scalar)
  {
    v270 = (std::__shared_weak_count *)operator new();
    v271 = Scalar;
    v270->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v270->__shared_owners_ = 0;
    v270->__shared_weak_owners_ = 0;
    v270[1].__vftable = v271;
  }
  else
  {
    v270 = 0;
  }
  v544 = v270;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v541, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v269 + 3))(v269, &v543, v541);
  if (v542 < 0)
    operator delete(v541[0]);
  v272 = v544;
  if (v544)
  {
    v273 = (unint64_t *)&v544->__shared_owners_;
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }
  v275 = Scalar;
  Scalar = 0;
  if (v275)
    (*((void (**)(std::__shared_weak_count_vtbl *))v275->~__shared_weak_count + 1))(v275);
  v276 = *a3;
  v539 = v619;
  if (v619)
  {
    v277 = (std::__shared_weak_count *)operator new();
    v278 = v619;
    v277->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v277->__shared_owners_ = 0;
    v277->__shared_weak_owners_ = 0;
    v277[1].__vftable = (std::__shared_weak_count_vtbl *)v278;
  }
  else
  {
    v277 = 0;
  }
  v540 = v277;
  v619 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v276 + 56))(v276, &v539);
  v279 = v540;
  if (v540)
  {
    v280 = (unint64_t *)&v540->__shared_owners_;
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  v282 = v619;
  v619 = 0;
  if (v282)
    (*((void (**)(void **))*v282 + 1))(v282);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v619);
  v283 = v619;
  std::string::basic_string[abi:ne180100]<0>(v535, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v535, 0, (uint64_t *)&Scalar);
  v537 = Scalar;
  if (Scalar)
  {
    v284 = (std::__shared_weak_count *)operator new();
    v285 = Scalar;
    v284->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v284->__shared_owners_ = 0;
    v284->__shared_weak_owners_ = 0;
    v284[1].__vftable = v285;
  }
  else
  {
    v284 = 0;
  }
  v538 = v284;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v533, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v283 + 3))(v283, &v537, 0, v533);
  if (v534 < 0)
    operator delete(v533[0]);
  v286 = v538;
  if (v538)
  {
    v287 = (unint64_t *)&v538->__shared_owners_;
    do
      v288 = __ldaxr(v287);
    while (__stlxr(v288 - 1, v287));
    if (!v288)
    {
      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
      std::__shared_weak_count::__release_weak(v286);
    }
  }
  v289 = Scalar;
  Scalar = 0;
  if (v289)
    (*((void (**)(std::__shared_weak_count_vtbl *))v289->~__shared_weak_count + 1))(v289);
  if (v536 < 0)
    operator delete(v535[0]);
  v290 = v619;
  std::string::basic_string[abi:ne180100]<0>(v529, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v529, 0, (uint64_t *)&Scalar);
  v531 = Scalar;
  if (Scalar)
  {
    v291 = (std::__shared_weak_count *)operator new();
    v292 = Scalar;
    v291->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v291->__shared_owners_ = 0;
    v291->__shared_weak_owners_ = 0;
    v291[1].__vftable = v292;
  }
  else
  {
    v291 = 0;
  }
  v532 = v291;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v527, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v290 + 3))(v290, &v531, 1, v527);
  if (v528 < 0)
    operator delete(v527[0]);
  v293 = v532;
  if (v532)
  {
    v294 = (unint64_t *)&v532->__shared_owners_;
    do
      v295 = __ldaxr(v294);
    while (__stlxr(v295 - 1, v294));
    if (!v295)
    {
      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
      std::__shared_weak_count::__release_weak(v293);
    }
  }
  v296 = Scalar;
  Scalar = 0;
  if (v296)
    (*((void (**)(std::__shared_weak_count_vtbl *))v296->~__shared_weak_count + 1))(v296);
  if (v530 < 0)
    operator delete(v529[0]);
  v297 = v619;
  std::string::basic_string[abi:ne180100]<0>(v523, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v523, 0, (uint64_t *)&Scalar);
  v525 = Scalar;
  if (Scalar)
  {
    v298 = (std::__shared_weak_count *)operator new();
    v299 = Scalar;
    v298->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v298->__shared_owners_ = 0;
    v298->__shared_weak_owners_ = 0;
    v298[1].__vftable = v299;
  }
  else
  {
    v298 = 0;
  }
  v526 = v298;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v521, "I");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v297 + 3))(v297, &v525, 2, v521);
  if (v522 < 0)
    operator delete(v521[0]);
  v300 = v526;
  if (v526)
  {
    v301 = (unint64_t *)&v526->__shared_owners_;
    do
      v302 = __ldaxr(v301);
    while (__stlxr(v302 - 1, v301));
    if (!v302)
    {
      ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
      std::__shared_weak_count::__release_weak(v300);
    }
  }
  v303 = Scalar;
  Scalar = 0;
  if (v303)
    (*((void (**)(std::__shared_weak_count_vtbl *))v303->~__shared_weak_count + 1))(v303);
  if (v524 < 0)
    operator delete(v523[0]);
  v304 = v619;
  std::string::basic_string[abi:ne180100]<0>(v517, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v517, 0, (uint64_t *)&Scalar);
  v519 = Scalar;
  if (Scalar)
  {
    v305 = (std::__shared_weak_count *)operator new();
    v306 = Scalar;
    v305->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v305->__shared_owners_ = 0;
    v305->__shared_weak_owners_ = 0;
    v305[1].__vftable = v306;
  }
  else
  {
    v305 = 0;
  }
  v520 = v305;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v515, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v304 + 3))(v304, &v519, 0, v515);
  if (v516 < 0)
    operator delete(v515[0]);
  v307 = v520;
  if (v520)
  {
    v308 = (unint64_t *)&v520->__shared_owners_;
    do
      v309 = __ldaxr(v308);
    while (__stlxr(v309 - 1, v308));
    if (!v309)
    {
      ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
      std::__shared_weak_count::__release_weak(v307);
    }
  }
  v310 = Scalar;
  Scalar = 0;
  if (v310)
    (*((void (**)(std::__shared_weak_count_vtbl *))v310->~__shared_weak_count + 1))(v310);
  if (v518 < 0)
    operator delete(v517[0]);
  v311 = v619;
  std::string::basic_string[abi:ne180100]<0>(v511, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v511, 0, (uint64_t *)&Scalar);
  v513 = Scalar;
  if (Scalar)
  {
    v312 = (std::__shared_weak_count *)operator new();
    v313 = Scalar;
    v312->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v312->__shared_owners_ = 0;
    v312->__shared_weak_owners_ = 0;
    v312[1].__vftable = v313;
  }
  else
  {
    v312 = 0;
  }
  v514 = v312;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v509, "H");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v311 + 3))(v311, &v513, 1, v509);
  if (v510 < 0)
    operator delete(v509[0]);
  v314 = v514;
  if (v514)
  {
    v315 = (unint64_t *)&v514->__shared_owners_;
    do
      v316 = __ldaxr(v315);
    while (__stlxr(v316 - 1, v315));
    if (!v316)
    {
      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
      std::__shared_weak_count::__release_weak(v314);
    }
  }
  v317 = Scalar;
  Scalar = 0;
  if (v317)
    (*((void (**)(std::__shared_weak_count_vtbl *))v317->~__shared_weak_count + 1))(v317);
  if (v512 < 0)
    operator delete(v511[0]);
  v318 = v619;
  std::string::basic_string[abi:ne180100]<0>(v505, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v505, 0, (uint64_t *)&Scalar);
  v507 = Scalar;
  if (Scalar)
  {
    v319 = (std::__shared_weak_count *)operator new();
    v320 = Scalar;
    v319->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v319->__shared_owners_ = 0;
    v319->__shared_weak_owners_ = 0;
    v319[1].__vftable = v320;
  }
  else
  {
    v319 = 0;
  }
  v508 = v319;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v503, "H_dim");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v318 + 3))(v318, &v507, 0, v503);
  if (v504 < 0)
    operator delete(v503[0]);
  v321 = v508;
  if (v508)
  {
    v322 = (unint64_t *)&v508->__shared_owners_;
    do
      v323 = __ldaxr(v322);
    while (__stlxr(v323 - 1, v322));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
      std::__shared_weak_count::__release_weak(v321);
    }
  }
  v324 = Scalar;
  Scalar = 0;
  if (v324)
    (*((void (**)(std::__shared_weak_count_vtbl *))v324->~__shared_weak_count + 1))(v324);
  if (v506 < 0)
    operator delete(v505[0]);
  v325 = v619;
  std::string::basic_string[abi:ne180100]<0>(v499, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v499, 0, (uint64_t *)&Scalar);
  v501 = Scalar;
  if (Scalar)
  {
    v326 = (std::__shared_weak_count *)operator new();
    v327 = Scalar;
    v326->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v326->__shared_owners_ = 0;
    v326->__shared_weak_owners_ = 0;
    v326[1].__vftable = v327;
  }
  else
  {
    v326 = 0;
  }
  v502 = v326;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v497, "I");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v325 + 3))(v325, &v501, 1, v497);
  if (v498 < 0)
    operator delete(v497[0]);
  v328 = v502;
  if (v502)
  {
    v329 = (unint64_t *)&v502->__shared_owners_;
    do
      v330 = __ldaxr(v329);
    while (__stlxr(v330 - 1, v329));
    if (!v330)
    {
      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
      std::__shared_weak_count::__release_weak(v328);
    }
  }
  v331 = Scalar;
  Scalar = 0;
  if (v331)
    (*((void (**)(std::__shared_weak_count_vtbl *))v331->~__shared_weak_count + 1))(v331);
  if (v500 < 0)
    operator delete(v499[0]);
  v332 = v619;
  std::string::basic_string[abi:ne180100]<0>(v493, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v493, 0, (uint64_t *)&Scalar);
  v495 = Scalar;
  if (Scalar)
  {
    v333 = (std::__shared_weak_count *)operator new();
    v334 = Scalar;
    v333->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v333->__shared_owners_ = 0;
    v333->__shared_weak_owners_ = 0;
    v333[1].__vftable = v334;
  }
  else
  {
    v333 = 0;
  }
  v496 = v333;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v491, "H_dim");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v332 + 3))(v332, &v495, 0, v491);
  if (v492 < 0)
    operator delete(v491[0]);
  v335 = v496;
  if (v496)
  {
    v336 = (unint64_t *)&v496->__shared_owners_;
    do
      v337 = __ldaxr(v336);
    while (__stlxr(v337 - 1, v336));
    if (!v337)
    {
      ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
      std::__shared_weak_count::__release_weak(v335);
    }
  }
  v338 = Scalar;
  Scalar = 0;
  if (v338)
    (*((void (**)(std::__shared_weak_count_vtbl *))v338->~__shared_weak_count + 1))(v338);
  if (v494 < 0)
    operator delete(v493[0]);
  v339 = v619;
  std::string::basic_string[abi:ne180100]<0>(v487, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v487, 0, (uint64_t *)&Scalar);
  v489 = Scalar;
  if (Scalar)
  {
    v340 = (std::__shared_weak_count *)operator new();
    v341 = Scalar;
    v340->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v340->__shared_owners_ = 0;
    v340->__shared_weak_owners_ = 0;
    v340[1].__vftable = v341;
  }
  else
  {
    v340 = 0;
  }
  v490 = v340;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v485, "H");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v339 + 3))(v339, &v489, 1, v485);
  if (v486 < 0)
    operator delete(v485[0]);
  v342 = v490;
  if (v490)
  {
    v343 = (unint64_t *)&v490->__shared_owners_;
    do
      v344 = __ldaxr(v343);
    while (__stlxr(v344 - 1, v343));
    if (!v344)
    {
      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
      std::__shared_weak_count::__release_weak(v342);
    }
  }
  v345 = Scalar;
  Scalar = 0;
  if (v345)
    (*((void (**)(std::__shared_weak_count_vtbl *))v345->~__shared_weak_count + 1))(v345);
  if (v488 < 0)
    operator delete(v487[0]);
  v346 = v619;
  std::string::basic_string[abi:ne180100]<0>(v481, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v481, 1, (uint64_t *)&Scalar);
  v483 = Scalar;
  if (Scalar)
  {
    v347 = (std::__shared_weak_count *)operator new();
    v348 = Scalar;
    v347->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v347->__shared_owners_ = 0;
    v347->__shared_weak_owners_ = 0;
    v347[1].__vftable = v348;
  }
  else
  {
    v347 = 0;
  }
  v484 = v347;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v479, "H_dim");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v346 + 3))(v346, &v483, 0, v479);
  if (v480 < 0)
    operator delete(v479[0]);
  v349 = v484;
  if (v484)
  {
    v350 = (unint64_t *)&v484->__shared_owners_;
    do
      v351 = __ldaxr(v350);
    while (__stlxr(v351 - 1, v350));
    if (!v351)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
  }
  v352 = Scalar;
  Scalar = 0;
  if (v352)
    (*((void (**)(std::__shared_weak_count_vtbl *))v352->~__shared_weak_count + 1))(v352);
  if (v482 < 0)
    operator delete(v481[0]);
  v353 = v619;
  std::string::basic_string[abi:ne180100]<0>(v475, "input_bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v475, 1, (uint64_t *)&Scalar);
  v477 = Scalar;
  if (Scalar)
  {
    v354 = (std::__shared_weak_count *)operator new();
    v355 = Scalar;
    v354->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v354->__shared_owners_ = 0;
    v354->__shared_weak_owners_ = 0;
    v354[1].__vftable = v355;
  }
  else
  {
    v354 = 0;
  }
  v478 = v354;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v473, "H_dim");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v353 + 3))(v353, &v477, 0, v473);
  if (v474 < 0)
    operator delete(v473[0]);
  v356 = v478;
  if (v478)
  {
    v357 = (unint64_t *)&v478->__shared_owners_;
    do
      v358 = __ldaxr(v357);
    while (__stlxr(v358 - 1, v357));
    if (!v358)
    {
      ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
      std::__shared_weak_count::__release_weak(v356);
    }
  }
  v359 = Scalar;
  Scalar = 0;
  if (v359)
    (*((void (**)(std::__shared_weak_count_vtbl *))v359->~__shared_weak_count + 1))(v359);
  if (v476 < 0)
    operator delete(v475[0]);
  v360 = v619;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v471 = Scalar;
  if (Scalar)
  {
    v361 = (std::__shared_weak_count *)operator new();
    v362 = Scalar;
    v361->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v361->__shared_owners_ = 0;
    v361->__shared_weak_owners_ = 0;
    v361[1].__vftable = v362;
  }
  else
  {
    v361 = 0;
  }
  v472 = v361;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v469, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v360 + 3))(v360, &v471, 1, v469);
  if (v470 < 0)
    operator delete(v469[0]);
  v363 = v472;
  if (v472)
  {
    v364 = (unint64_t *)&v472->__shared_owners_;
    do
      v365 = __ldaxr(v364);
    while (__stlxr(v365 - 1, v364));
    if (!v365)
    {
      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
      std::__shared_weak_count::__release_weak(v363);
    }
  }
  v366 = Scalar;
  Scalar = 0;
  if (v366)
    (*((void (**)(std::__shared_weak_count_vtbl *))v366->~__shared_weak_count + 1))(v366);
  v367 = v619;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v467 = Scalar;
  if (Scalar)
  {
    v368 = (std::__shared_weak_count *)operator new();
    v369 = Scalar;
    v368->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v368->__shared_owners_ = 0;
    v368->__shared_weak_owners_ = 0;
    v368[1].__vftable = v369;
  }
  else
  {
    v368 = 0;
  }
  v468 = v368;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v465, "H");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v367 + 3))(v367, &v467, 2, v465);
  if (v466 < 0)
    operator delete(v465[0]);
  v370 = v468;
  if (v468)
  {
    v371 = (unint64_t *)&v468->__shared_owners_;
    do
      v372 = __ldaxr(v371);
    while (__stlxr(v372 - 1, v371));
    if (!v372)
    {
      ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
      std::__shared_weak_count::__release_weak(v370);
    }
  }
  v373 = Scalar;
  Scalar = 0;
  if (v373)
    (*((void (**)(std::__shared_weak_count_vtbl *))v373->~__shared_weak_count + 1))(v373);
  v374 = v619;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v463 = Scalar;
  if (Scalar)
  {
    v375 = (std::__shared_weak_count *)operator new();
    v376 = Scalar;
    v375->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v375->__shared_owners_ = 0;
    v375->__shared_weak_owners_ = 0;
    v375[1].__vftable = v376;
  }
  else
  {
    v375 = 0;
  }
  v464 = v375;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v461, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v374 + 3))(v374, &v463, 0, v461);
  if (v462 < 0)
    operator delete(v461[0]);
  v377 = v464;
  if (v464)
  {
    v378 = (unint64_t *)&v464->__shared_owners_;
    do
      v379 = __ldaxr(v378);
    while (__stlxr(v379 - 1, v378));
    if (!v379)
    {
      ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
      std::__shared_weak_count::__release_weak(v377);
    }
  }
  v380 = Scalar;
  Scalar = 0;
  if (v380)
    (*((void (**)(std::__shared_weak_count_vtbl *))v380->~__shared_weak_count + 1))(v380);
  v381 = v619;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v459 = Scalar;
  if (Scalar)
  {
    v382 = (std::__shared_weak_count *)operator new();
    v383 = Scalar;
    v382->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v382->__shared_owners_ = 0;
    v382->__shared_weak_owners_ = 0;
    v382[1].__vftable = v383;
  }
  else
  {
    v382 = 0;
  }
  v460 = v382;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v457, "H");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v381 + 3))(v381, &v459, 1, v457);
  if (v458 < 0)
    operator delete(v457[0]);
  v384 = v460;
  if (v460)
  {
    v385 = (unint64_t *)&v460->__shared_owners_;
    do
      v386 = __ldaxr(v385);
    while (__stlxr(v386 - 1, v385));
    if (!v386)
    {
      ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
      std::__shared_weak_count::__release_weak(v384);
    }
  }
  v387 = Scalar;
  Scalar = 0;
  if (v387)
    (*((void (**)(std::__shared_weak_count_vtbl *))v387->~__shared_weak_count + 1))(v387);
  v388 = *a3;
  v455 = v619;
  if (v619)
  {
    v389 = (std::__shared_weak_count *)operator new();
    v390 = v619;
    v389->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v389->__shared_owners_ = 0;
    v389->__shared_weak_owners_ = 0;
    v389[1].__vftable = (std::__shared_weak_count_vtbl *)v390;
  }
  else
  {
    v389 = 0;
  }
  v456 = v389;
  v619 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v388 + 56))(v388, &v455);
  v391 = v456;
  if (v456)
  {
    v392 = (unint64_t *)&v456->__shared_owners_;
    do
      v393 = __ldaxr(v392);
    while (__stlxr(v393 - 1, v392));
    if (!v393)
    {
      ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
      std::__shared_weak_count::__release_weak(v391);
    }
  }
  v394 = v619;
  v619 = 0;
  if (v394)
    (*((void (**)(void **))*v394 + 1))(v394);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v395 = __p;
  std::string::basic_string[abi:ne180100]<0>(v451, "direction");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v451, 0, (uint64_t *)&v593);
  v453 = v593;
  if (v593)
  {
    v396 = (std::__shared_weak_count *)operator new();
    v397 = (std::__shared_weak_count_vtbl *)v593;
    v396->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v396->__shared_owners_ = 0;
    v396->__shared_weak_owners_ = 0;
    v396[1].__vftable = v397;
  }
  else
  {
    v396 = 0;
  }
  v454 = v396;
  v593 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v619, "forward");
  std::string::basic_string[abi:ne180100]<0>(&v622, "reverse");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v619, 2);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v395 + 24))(v395, &v453, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (*(&v624 + i * 8) < 0)
      operator delete((&v622)[i]);
  }
  v399 = v454;
  if (v454)
  {
    v400 = (unint64_t *)&v454->__shared_owners_;
    do
      v401 = __ldaxr(v400);
    while (__stlxr(v401 - 1, v400));
    if (!v401)
    {
      ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
      std::__shared_weak_count::__release_weak(v399);
    }
  }
  v402 = v593;
  v593 = 0;
  if (v402)
    (*(void (**)(void *))(*(_QWORD *)v402 + 8))(v402);
  if (v452 < 0)
    operator delete(v451[0]);
  v403 = __p;
  std::string::basic_string[abi:ne180100]<0>(v447, "recurrent_activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v447, 0, (uint64_t *)&v593);
  v449 = v593;
  if (v593)
  {
    v404 = (std::__shared_weak_count *)operator new();
    v405 = (std::__shared_weak_count_vtbl *)v593;
    v404->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v404->__shared_owners_ = 0;
    v404->__shared_weak_owners_ = 0;
    v404[1].__vftable = v405;
  }
  else
  {
    v404 = 0;
  }
  v450 = v404;
  v593 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v619, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v622, "linear");
  std::string::basic_string[abi:ne180100]<0>(v625, "relu");
  std::string::basic_string[abi:ne180100]<0>(v626, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v627, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v628, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v619, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v403 + 24))(v403, &v449, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v628[j + 2]) < 0)
      operator delete((void *)v628[j]);
  }
  v407 = v450;
  if (v450)
  {
    v408 = (unint64_t *)&v450->__shared_owners_;
    do
      v409 = __ldaxr(v408);
    while (__stlxr(v409 - 1, v408));
    if (!v409)
    {
      ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
      std::__shared_weak_count::__release_weak(v407);
    }
  }
  v410 = v593;
  v593 = 0;
  if (v410)
    (*(void (**)(void *))(*(_QWORD *)v410 + 8))(v410);
  if (v448 < 0)
    operator delete(v447[0]);
  v411 = __p;
  std::string::basic_string[abi:ne180100]<0>(v443, "activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v443, 0, (uint64_t *)&v593);
  v445 = v593;
  if (v593)
  {
    v412 = (std::__shared_weak_count *)operator new();
    v413 = (std::__shared_weak_count_vtbl *)v593;
    v412->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v412->__shared_owners_ = 0;
    v412->__shared_weak_owners_ = 0;
    v412[1].__vftable = v413;
  }
  else
  {
    v412 = 0;
  }
  v446 = v412;
  v593 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v619, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v622, "linear");
  std::string::basic_string[abi:ne180100]<0>(v625, "relu");
  std::string::basic_string[abi:ne180100]<0>(v626, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v627, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v628, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v619, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v411 + 24))(v411, &v445, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -18; k -= 3)
  {
    if (SHIBYTE(v628[k + 2]) < 0)
      operator delete((void *)v628[k]);
  }
  v415 = v446;
  if (v446)
  {
    v416 = (unint64_t *)&v446->__shared_owners_;
    do
      v417 = __ldaxr(v416);
    while (__stlxr(v417 - 1, v416));
    if (!v417)
    {
      ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
      std::__shared_weak_count::__release_weak(v415);
    }
  }
  v418 = v593;
  v593 = 0;
  if (v418)
    (*(void (**)(void *))(*(_QWORD *)v418 + 8))(v418);
  if (v444 < 0)
    operator delete(v443[0]);
  v419 = __p;
  std::string::basic_string[abi:ne180100]<0>(v439, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v439, 1, (uint64_t *)&v593);
  v441 = v593;
  if (v593)
  {
    v420 = (std::__shared_weak_count *)operator new();
    v421 = (std::__shared_weak_count_vtbl *)v593;
    v420->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v420->__shared_owners_ = 0;
    v420->__shared_weak_owners_ = 0;
    v420[1].__vftable = v421;
  }
  else
  {
    v420 = 0;
  }
  v442 = v420;
  v593 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v619, "bf16");
  std::string::basic_string[abi:ne180100]<0>(&v622, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v625, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v626, "int32");
  std::string::basic_string[abi:ne180100]<0>(v627, "int8");
  std::string::basic_string[abi:ne180100]<0>(v628, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v619, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v419 + 24))(v419, &v441, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (m = 0; m != -18; m -= 3)
  {
    if (SHIBYTE(v628[m + 2]) < 0)
      operator delete((void *)v628[m]);
  }
  v423 = v442;
  if (v442)
  {
    v424 = (unint64_t *)&v442->__shared_owners_;
    do
      v425 = __ldaxr(v424);
    while (__stlxr(v425 - 1, v424));
    if (!v425)
    {
      ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
      std::__shared_weak_count::__release_weak(v423);
    }
  }
  v426 = v593;
  v593 = 0;
  if (v426)
    (*(void (**)(void *))(*(_QWORD *)v426 + 8))(v426);
  if (v440 < 0)
    operator delete(v439[0]);
  v427 = *a3;
  v437 = __p;
  if (__p)
  {
    v428 = (std::__shared_weak_count *)operator new();
    v429 = (std::__shared_weak_count_vtbl *)__p;
    v428->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v428->__shared_owners_ = 0;
    v428->__shared_weak_owners_ = 0;
    v428[1].__vftable = v429;
  }
  else
  {
    v428 = 0;
  }
  v438 = v428;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v427 + 56))(v427, &v437);
  v430 = v438;
  if (v438)
  {
    v431 = (unint64_t *)&v438->__shared_owners_;
    do
      v432 = __ldaxr(v431);
    while (__stlxr(v432 - 1, v431));
    if (!v432)
    {
      ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
      std::__shared_weak_count::__release_weak(v430);
    }
  }
  v433 = __p;
  __p = 0;
  if (v433)
    (*(void (**)(void *))(*(_QWORD *)v433 + 8))(v433);
  if (v614)
  {
    v434 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v614);
    MEMORY[0x1E0C023A0](v434, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v600, 0);
  result = (uint64_t)v618;
  if (v618)
  {
    v436 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v618);
    return MEMORY[0x1E0C023A0](v436, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09F1A70(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x758];
  STACK[0x758] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x770], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x6B0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x798], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::LSTM::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned __int8 *v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  unsigned __int8 *v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  unsigned __int8 *v100;
  void *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unsigned __int8 *v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count_vtbl *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unsigned __int8 *v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  std::__shared_weak_count_vtbl *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  unsigned __int8 *v142;
  void *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  unsigned __int8 *v154;
  void *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  unsigned __int8 *v160;
  void **v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  _QWORD *v165;
  unsigned __int8 *v166;
  void **v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  _QWORD *v171;
  unsigned __int8 *v172;
  void **v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  _QWORD *v177;
  unsigned __int8 *v178;
  void **v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  _QWORD *v183;
  unsigned __int8 *v184;
  void **v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  _QWORD *v189;
  unsigned __int8 *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  char **v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  char *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t *v221;
  char *v222;
  char *v223;
  char *v224;
  __int128 v225;
  void **v226;
  char *v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  char **v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  char *v245;
  char *v246;
  char *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t *v254;
  char *v255;
  char *v256;
  char *v257;
  __int128 v258;
  void **v259;
  char *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  char **v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  char *v278;
  char *v279;
  char *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t *v287;
  char *v288;
  char *v289;
  char *v290;
  __int128 v291;
  void **v292;
  char *v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  char **v301;
  _QWORD *v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  _OWORD *v312;
  unsigned __int8 *v313;
  void **v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  std::__shared_weak_count_vtbl *v319;
  std::__shared_weak_count *v320;
  std::__shared_weak_count *v321;
  unint64_t *p_shared_owners;
  unint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  void **v327;
  std::__shared_weak_count *v328;
  std::__shared_weak_count_vtbl *v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count_vtbl *v333;
  void **v334;
  std::__shared_weak_count *v335;
  std::__shared_weak_count_vtbl *v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count_vtbl *v340;
  void **v341;
  std::__shared_weak_count *v342;
  std::__shared_weak_count_vtbl *v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count_vtbl *v347;
  void **v348;
  std::__shared_weak_count *v349;
  std::__shared_weak_count_vtbl *v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count_vtbl *v354;
  void **v355;
  std::__shared_weak_count *v356;
  std::__shared_weak_count_vtbl *v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count_vtbl *v361;
  void **v362;
  std::__shared_weak_count *v363;
  std::__shared_weak_count_vtbl *v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count_vtbl *v368;
  void **v369;
  std::__shared_weak_count *v370;
  std::__shared_weak_count_vtbl *v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count_vtbl *v375;
  void **v376;
  std::__shared_weak_count *v377;
  std::__shared_weak_count_vtbl *v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  std::__shared_weak_count_vtbl *v382;
  void **v383;
  std::__shared_weak_count *v384;
  std::__shared_weak_count_vtbl *v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count_vtbl *v389;
  void **v390;
  std::__shared_weak_count *v391;
  std::__shared_weak_count_vtbl *v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count_vtbl *v396;
  void **v397;
  std::__shared_weak_count *v398;
  std::__shared_weak_count_vtbl *v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count_vtbl *v403;
  void **v404;
  std::__shared_weak_count *v405;
  std::__shared_weak_count_vtbl *v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count_vtbl *v410;
  void **v411;
  std::__shared_weak_count *v412;
  std::__shared_weak_count_vtbl *v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  std::__shared_weak_count_vtbl *v417;
  void **v418;
  std::__shared_weak_count *v419;
  std::__shared_weak_count_vtbl *v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count_vtbl *v424;
  void **v425;
  std::__shared_weak_count *v426;
  std::__shared_weak_count_vtbl *v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  std::__shared_weak_count_vtbl *v431;
  uint64_t v432;
  std::__shared_weak_count *v433;
  void **v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  void **v438;
  void **v439;
  std::__shared_weak_count *v440;
  std::__shared_weak_count_vtbl *v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  std::__shared_weak_count_vtbl *v445;
  void **v446;
  std::__shared_weak_count *v447;
  std::__shared_weak_count_vtbl *v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  std::__shared_weak_count_vtbl *v452;
  void **v453;
  std::__shared_weak_count *v454;
  std::__shared_weak_count_vtbl *v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  std::__shared_weak_count_vtbl *v459;
  void **v460;
  std::__shared_weak_count *v461;
  std::__shared_weak_count_vtbl *v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count_vtbl *v466;
  void **v467;
  std::__shared_weak_count *v468;
  std::__shared_weak_count_vtbl *v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count_vtbl *v473;
  void **v474;
  std::__shared_weak_count *v475;
  std::__shared_weak_count_vtbl *v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  std::__shared_weak_count_vtbl *v480;
  void **v481;
  std::__shared_weak_count *v482;
  std::__shared_weak_count_vtbl *v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  std::__shared_weak_count_vtbl *v487;
  void **v488;
  std::__shared_weak_count *v489;
  std::__shared_weak_count_vtbl *v490;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  std::__shared_weak_count_vtbl *v494;
  void **v495;
  std::__shared_weak_count *v496;
  std::__shared_weak_count_vtbl *v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  std::__shared_weak_count_vtbl *v501;
  void **v502;
  std::__shared_weak_count *v503;
  std::__shared_weak_count_vtbl *v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  std::__shared_weak_count_vtbl *v508;
  void **v509;
  std::__shared_weak_count *v510;
  std::__shared_weak_count_vtbl *v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  std::__shared_weak_count_vtbl *v515;
  void **v516;
  std::__shared_weak_count *v517;
  std::__shared_weak_count_vtbl *v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  std::__shared_weak_count_vtbl *v522;
  void **v523;
  std::__shared_weak_count *v524;
  std::__shared_weak_count_vtbl *v525;
  std::__shared_weak_count *v526;
  unint64_t *v527;
  unint64_t v528;
  std::__shared_weak_count_vtbl *v529;
  void **v530;
  std::__shared_weak_count *v531;
  std::__shared_weak_count_vtbl *v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  std::__shared_weak_count_vtbl *v536;
  void **v537;
  std::__shared_weak_count *v538;
  std::__shared_weak_count_vtbl *v539;
  std::__shared_weak_count *v540;
  unint64_t *v541;
  unint64_t v542;
  std::__shared_weak_count_vtbl *v543;
  void **v544;
  std::__shared_weak_count *v545;
  std::__shared_weak_count_vtbl *v546;
  std::__shared_weak_count *v547;
  unint64_t *v548;
  unint64_t v549;
  std::__shared_weak_count_vtbl *v550;
  void **v551;
  std::__shared_weak_count *v552;
  std::__shared_weak_count_vtbl *v553;
  std::__shared_weak_count *v554;
  unint64_t *v555;
  unint64_t v556;
  std::__shared_weak_count_vtbl *v557;
  void **v558;
  std::__shared_weak_count *v559;
  std::__shared_weak_count_vtbl *v560;
  std::__shared_weak_count *v561;
  unint64_t *v562;
  unint64_t v563;
  std::__shared_weak_count_vtbl *v564;
  void **v565;
  std::__shared_weak_count *v566;
  std::__shared_weak_count_vtbl *v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  std::__shared_weak_count_vtbl *v571;
  void **v572;
  std::__shared_weak_count *v573;
  std::__shared_weak_count_vtbl *v574;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count_vtbl *v578;
  void **v579;
  std::__shared_weak_count *v580;
  std::__shared_weak_count_vtbl *v581;
  std::__shared_weak_count *v582;
  unint64_t *v583;
  unint64_t v584;
  std::__shared_weak_count_vtbl *v585;
  void **v586;
  std::__shared_weak_count *v587;
  std::__shared_weak_count_vtbl *v588;
  std::__shared_weak_count *v589;
  unint64_t *v590;
  unint64_t v591;
  std::__shared_weak_count_vtbl *v592;
  void **v593;
  std::__shared_weak_count *v594;
  std::__shared_weak_count_vtbl *v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  std::__shared_weak_count_vtbl *v599;
  void **v600;
  std::__shared_weak_count *v601;
  std::__shared_weak_count_vtbl *v602;
  std::__shared_weak_count *v603;
  unint64_t *v604;
  unint64_t v605;
  std::__shared_weak_count_vtbl *v606;
  void **v607;
  std::__shared_weak_count *v608;
  std::__shared_weak_count_vtbl *v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  std::__shared_weak_count_vtbl *v613;
  uint64_t v614;
  std::__shared_weak_count *v615;
  void **v616;
  std::__shared_weak_count *v617;
  unint64_t *v618;
  unint64_t v619;
  void **v620;
  void *v621;
  std::__shared_weak_count *v622;
  std::__shared_weak_count_vtbl *v623;
  uint64_t i;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  void *v628;
  void *v629;
  std::__shared_weak_count *v630;
  std::__shared_weak_count_vtbl *v631;
  uint64_t j;
  std::__shared_weak_count *v633;
  unint64_t *v634;
  unint64_t v635;
  void *v636;
  void *v637;
  std::__shared_weak_count *v638;
  std::__shared_weak_count_vtbl *v639;
  uint64_t k;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  void *v644;
  void *v645;
  std::__shared_weak_count *v646;
  std::__shared_weak_count_vtbl *v647;
  uint64_t m;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  void *v652;
  void *v653;
  std::__shared_weak_count *v654;
  std::__shared_weak_count_vtbl *v655;
  uint64_t n;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  void *v660;
  uint64_t v661;
  std::__shared_weak_count *v662;
  std::__shared_weak_count_vtbl *v663;
  std::__shared_weak_count *v664;
  unint64_t *v665;
  unint64_t v666;
  void *v667;
  uint64_t v668;
  uint64_t result;
  uint64_t v670;
  void *v671;
  std::__shared_weak_count *v672;
  void *v673[2];
  char v674;
  void *v675;
  std::__shared_weak_count *v676;
  void *v677[2];
  char v678;
  void *v679;
  std::__shared_weak_count *v680;
  void *v681[2];
  char v682;
  void *v683;
  std::__shared_weak_count *v684;
  void *v685[2];
  char v686;
  void *v687;
  std::__shared_weak_count *v688;
  void *v689[2];
  char v690;
  void *v691;
  std::__shared_weak_count *v692;
  void **v693;
  std::__shared_weak_count *v694;
  void *v695[2];
  char v696;
  std::__shared_weak_count_vtbl *v697;
  std::__shared_weak_count *v698;
  void *v699[2];
  char v700;
  std::__shared_weak_count_vtbl *v701;
  std::__shared_weak_count *v702;
  void *v703[2];
  char v704;
  std::__shared_weak_count_vtbl *v705;
  std::__shared_weak_count *v706;
  void *v707[2];
  char v708;
  std::__shared_weak_count_vtbl *v709;
  std::__shared_weak_count *v710;
  void *v711[2];
  char v712;
  std::__shared_weak_count_vtbl *v713;
  std::__shared_weak_count *v714;
  void *v715[2];
  char v716;
  std::__shared_weak_count_vtbl *v717;
  std::__shared_weak_count *v718;
  void *v719[2];
  char v720;
  void *v721[2];
  char v722;
  std::__shared_weak_count_vtbl *v723;
  std::__shared_weak_count *v724;
  void *v725[2];
  char v726;
  void *v727[2];
  char v728;
  std::__shared_weak_count_vtbl *v729;
  std::__shared_weak_count *v730;
  void *v731[2];
  char v732;
  void *v733[2];
  char v734;
  std::__shared_weak_count_vtbl *v735;
  std::__shared_weak_count *v736;
  void *v737[2];
  char v738;
  void *v739[2];
  char v740;
  std::__shared_weak_count_vtbl *v741;
  std::__shared_weak_count *v742;
  void *v743[2];
  char v744;
  void *v745[2];
  char v746;
  std::__shared_weak_count_vtbl *v747;
  std::__shared_weak_count *v748;
  void *v749[2];
  char v750;
  void *v751[2];
  char v752;
  std::__shared_weak_count_vtbl *v753;
  std::__shared_weak_count *v754;
  void *v755[2];
  char v756;
  void *v757[2];
  char v758;
  std::__shared_weak_count_vtbl *v759;
  std::__shared_weak_count *v760;
  void *v761[2];
  char v762;
  void *v763[2];
  char v764;
  std::__shared_weak_count_vtbl *v765;
  std::__shared_weak_count *v766;
  void *v767[2];
  char v768;
  void *v769[2];
  char v770;
  std::__shared_weak_count_vtbl *v771;
  std::__shared_weak_count *v772;
  void *v773[2];
  char v774;
  void *v775[2];
  char v776;
  std::__shared_weak_count_vtbl *v777;
  std::__shared_weak_count *v778;
  void *v779[2];
  char v780;
  void *v781[2];
  char v782;
  std::__shared_weak_count_vtbl *v783;
  std::__shared_weak_count *v784;
  void *v785[2];
  char v786;
  void *v787[2];
  char v788;
  std::__shared_weak_count_vtbl *v789;
  std::__shared_weak_count *v790;
  void *v791[2];
  char v792;
  void *v793[2];
  char v794;
  std::__shared_weak_count_vtbl *v795;
  std::__shared_weak_count *v796;
  void *v797[2];
  char v798;
  void *v799[2];
  char v800;
  std::__shared_weak_count_vtbl *v801;
  std::__shared_weak_count *v802;
  void *v803[2];
  char v804;
  void *v805[2];
  char v806;
  std::__shared_weak_count_vtbl *v807;
  std::__shared_weak_count *v808;
  void *v809[2];
  char v810;
  void *v811[2];
  char v812;
  std::__shared_weak_count_vtbl *v813;
  std::__shared_weak_count *v814;
  void *v815[2];
  char v816;
  void *v817[2];
  char v818;
  std::__shared_weak_count_vtbl *v819;
  std::__shared_weak_count *v820;
  void *v821[2];
  char v822;
  void *v823[2];
  char v824;
  std::__shared_weak_count_vtbl *v825;
  std::__shared_weak_count *v826;
  void *v827[2];
  char v828;
  void *v829[2];
  char v830;
  std::__shared_weak_count_vtbl *v831;
  std::__shared_weak_count *v832;
  void **v833;
  std::__shared_weak_count *v834;
  void *v835[2];
  char v836;
  std::__shared_weak_count_vtbl *v837;
  std::__shared_weak_count *v838;
  void *v839[2];
  char v840;
  std::__shared_weak_count_vtbl *v841;
  std::__shared_weak_count *v842;
  void *v843[2];
  char v844;
  std::__shared_weak_count_vtbl *v845;
  std::__shared_weak_count *v846;
  void *v847[2];
  char v848;
  void *v849[2];
  char v850;
  std::__shared_weak_count_vtbl *v851;
  std::__shared_weak_count *v852;
  void *v853[2];
  char v854;
  void *v855[2];
  char v856;
  std::__shared_weak_count_vtbl *v857;
  std::__shared_weak_count *v858;
  void *v859[2];
  char v860;
  void *v861[2];
  char v862;
  std::__shared_weak_count_vtbl *v863;
  std::__shared_weak_count *v864;
  void *v865[2];
  char v866;
  void *v867[2];
  char v868;
  std::__shared_weak_count_vtbl *v869;
  std::__shared_weak_count *v870;
  void *v871[2];
  char v872;
  void *v873[2];
  char v874;
  std::__shared_weak_count_vtbl *v875;
  std::__shared_weak_count *v876;
  void *v877[2];
  char v878;
  void *v879[2];
  char v880;
  std::__shared_weak_count_vtbl *v881;
  std::__shared_weak_count *v882;
  void *v883[2];
  char v884;
  void *v885[2];
  char v886;
  std::__shared_weak_count_vtbl *v887;
  std::__shared_weak_count *v888;
  void *v889[2];
  char v890;
  void *v891[2];
  char v892;
  std::__shared_weak_count_vtbl *v893;
  std::__shared_weak_count *v894;
  void *v895[2];
  char v896;
  void *v897[2];
  char v898;
  std::__shared_weak_count_vtbl *v899;
  std::__shared_weak_count *v900;
  void *v901[2];
  char v902;
  void *v903[2];
  char v904;
  std::__shared_weak_count_vtbl *v905;
  std::__shared_weak_count *v906;
  void *v907[2];
  char v908;
  void *v909[2];
  char v910;
  std::__shared_weak_count_vtbl *v911;
  std::__shared_weak_count *v912;
  void *v913[2];
  char v914;
  void *v915[2];
  char v916;
  std::__shared_weak_count_vtbl *v917;
  std::__shared_weak_count *v918;
  void *v919;
  std::__shared_weak_count *v920;
  __n128 v921;
  __int128 v922;
  __int128 v923;
  void *v924[2];
  uint64_t v925;
  __n128 v926;
  __n128 v927;
  void *v928;
  void *v929;
  _QWORD *v930;
  __n128 v931;
  uint64_t v932;
  uint64_t v933;
  _QWORD *v934;
  char **v935;
  __n128 v936;
  __n128 v937;
  __n128 v938;
  __n128 v939;
  __n128 v940;
  __n128 v941;
  __n128 v942;
  __n128 v943;
  __n128 v944;
  __n128 v945;
  __n128 v946;
  __n128 v947;
  __n128 v948;
  __n128 v949;
  __n128 v950;
  __n128 v951;
  void *__p;
  void *v953;
  _QWORD *v954;
  void *v955;
  void *v956;
  _QWORD *v957;
  __n128 v958;
  _QWORD *v959;
  void **v960;
  uint64_t v961;
  uint64_t v962;
  char *v963;
  char **v964;
  _QWORD v965[3];
  _QWORD v966[3];
  _QWORD v967[3];
  _QWORD v968[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t p_on_zero_shared;
  _QWORD v972[3];
  _QWORD *v973;
  _BYTE v974[24];
  _BYTE *v975;
  _QWORD v976[3];
  _QWORD *v977;
  uint64_t v978;

  v978 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v959 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  p_on_zero_shared = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v960 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v957 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v955 = v14;
  v956 = v14 + 3;
  v961 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v955);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v954 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v953 = v18 + 3;
  v962 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v960, 3, &v958);
  MIL::IRParameter::Make(&v958, (uint64_t *)&v928);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v928);
  v19 = v928;
  v928 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v958.n128_u64[1];
  if (v958.n128_u64[1])
  {
    v21 = (unint64_t *)(v958.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v959;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v26->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v26->__on_zero_shared;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v26->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  Scalar = v26;
  v960 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(0x10uLL);
  v957 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v955 = v29;
  v956 = v29 + 2;
  v961 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v955);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x10uLL);
  v954 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  __p = v32;
  v953 = v32 + 2;
  v962 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v960, 3, &v951);
  MIL::IRParameter::Make(&v951, (uint64_t *)&v928);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v23, "initial_h", (uint64_t *)&v928);
  v33 = v928;
  v928 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v951.n128_u64[1];
  if (v951.n128_u64[1])
  {
    v35 = (unint64_t *)(v951.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v37 = v959;
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v40->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v40->__on_zero_shared;
  v40->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
  v40->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  Scalar = v40;
  v960 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x10uLL);
  v957 = v43 + 2;
  *v43 = v41;
  v43[1] = v42;
  v955 = v43;
  v956 = v43 + 2;
  v961 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v955);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = operator new(0x10uLL);
  v954 = v46 + 2;
  *v46 = v44;
  v46[1] = v45;
  __p = v46;
  v953 = v46 + 2;
  v962 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v960, 3, &v950);
  MIL::IRParameter::Make(&v950, (uint64_t *)&v928);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v37, "initial_c", (uint64_t *)&v928);
  v47 = v928;
  v928 = 0;
  if (v47)
    (*(void (**)(void *))(*(_QWORD *)v47 + 8))(v47);
  v48 = (std::__shared_weak_count *)v950.n128_u64[1];
  if (v950.n128_u64[1])
  {
    v49 = (unint64_t *)(v950.n128_u64[1] + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v51 = v959;
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v54->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v54->__on_zero_shared;
  v54->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v52;
  v54->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v53;
  Scalar = v54;
  v960 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = MIL::IRUnknownDimension::Make(a1, 0);
  v57 = operator new(0x10uLL);
  v957 = v57 + 2;
  *v57 = v55;
  v57[1] = v56;
  v955 = v57;
  v956 = v57 + 2;
  v961 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v955);
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = operator new(0x10uLL);
  v954 = v60 + 2;
  *v60 = v58;
  v60[1] = v59;
  __p = v60;
  v953 = v60 + 2;
  v962 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v960, 3, &v949);
  MIL::IRParameter::Make(&v949, (uint64_t *)&v928);
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v51, "weight_ih", (uint64_t *)&v928);
  v62 = v928;
  v928 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v949.n128_u64[1];
  if (v949.n128_u64[1])
  {
    v64 = (unint64_t *)(v949.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 32))(*((_QWORD *)v61 + 5), 1);
  v66 = v959;
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v69 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v69->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v69->__on_zero_shared;
  v69->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v67;
  v69->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v68;
  Scalar = v69;
  v960 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = MIL::IRUnknownDimension::Make(a1, 0);
  v72 = operator new(0x10uLL);
  v957 = v72 + 2;
  *v72 = v70;
  v72[1] = v71;
  v955 = v72;
  v956 = v72 + 2;
  v961 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v955);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = MIL::IRUnknownDimension::Make(a1, 0);
  v75 = operator new(0x10uLL);
  v954 = v75 + 2;
  *v75 = v73;
  v75[1] = v74;
  __p = v75;
  v953 = v75 + 2;
  v962 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v960, 3, &v948);
  MIL::IRParameter::Make(&v948, (uint64_t *)&v928);
  v76 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v66, "weight_hh", (uint64_t *)&v928);
  v77 = v928;
  v928 = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = (std::__shared_weak_count *)v948.n128_u64[1];
  if (v948.n128_u64[1])
  {
    v79 = (unint64_t *)(v948.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 32))(*((_QWORD *)v76 + 5), 1);
  v81 = v959;
  v82 = MIL::IRUnknownDimension::Make(a1, 0);
  v83 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v83;
  v83->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v82;
  p_get_deleter = (uint64_t)&v83->~__shared_weak_count_0;
  p_on_zero_shared = (uint64_t)&v83->~__shared_weak_count_0;
  v960 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = operator new(8uLL);
  v955 = v85;
  *v85 = v84;
  v957 = v85 + 1;
  v956 = v85 + 1;
  v961 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v955);
  v86 = MIL::IRUnknownDimension::Make(a1, 0);
  v87 = operator new(8uLL);
  __p = v87;
  *v87 = v86;
  v954 = v87 + 1;
  v953 = v87 + 1;
  v962 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v960, 3, &v947);
  MIL::IRParameter::Make(&v947, (uint64_t *)&v928);
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v81, "bias", (uint64_t *)&v928);
  v89 = v928;
  v928 = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = (std::__shared_weak_count *)v947.n128_u64[1];
  if (v947.n128_u64[1])
  {
    v91 = (unint64_t *)(v947.n128_u64[1] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v88 + 5) + 32))(*((_QWORD *)v88 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v88 + 5) + 48))(*((_QWORD *)v88 + 5), 1);
  v93 = v959;
  v94 = MIL::IRUnknownDimension::Make(a1, 0);
  v95 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v95;
  v95->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v94;
  p_get_deleter = (uint64_t)&v95->~__shared_weak_count_0;
  p_on_zero_shared = (uint64_t)&v95->~__shared_weak_count_0;
  v960 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v96 = MIL::IRUnknownDimension::Make(a1, 0);
  v97 = operator new(8uLL);
  v955 = v97;
  *v97 = v96;
  v957 = v97 + 1;
  v956 = v97 + 1;
  v961 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v955);
  v98 = MIL::IRUnknownDimension::Make(a1, 0);
  v99 = operator new(8uLL);
  __p = v99;
  *v99 = v98;
  v954 = v99 + 1;
  v953 = v99 + 1;
  v962 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v960, 3, &v946);
  MIL::IRParameter::Make(&v946, (uint64_t *)&v928);
  v100 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v93, "peephole", (uint64_t *)&v928);
  v101 = v928;
  v928 = 0;
  if (v101)
    (*(void (**)(void *))(*(_QWORD *)v101 + 8))(v101);
  v102 = (std::__shared_weak_count *)v946.n128_u64[1];
  if (v946.n128_u64[1])
  {
    v103 = (unint64_t *)(v946.n128_u64[1] + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v100 + 5) + 32))(*((_QWORD *)v100 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v100 + 5) + 48))(*((_QWORD *)v100 + 5), 1);
  v105 = v959;
  v106 = MIL::IRUnknownDimension::Make(a1, 0);
  v107 = MIL::IRUnknownDimension::Make(a1, 0);
  v108 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v108->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v108->__on_zero_shared;
  v108->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v106;
  v108->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v107;
  Scalar = v108;
  v960 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v109 = MIL::IRUnknownDimension::Make(a1, 0);
  v110 = MIL::IRUnknownDimension::Make(a1, 0);
  v111 = operator new(0x10uLL);
  v957 = v111 + 2;
  *v111 = v109;
  v111[1] = v110;
  v955 = v111;
  v956 = v111 + 2;
  v961 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v955);
  v112 = MIL::IRUnknownDimension::Make(a1, 0);
  v113 = MIL::IRUnknownDimension::Make(a1, 0);
  v114 = operator new(0x10uLL);
  v954 = v114 + 2;
  *v114 = v112;
  v114[1] = v113;
  __p = v114;
  v953 = v114 + 2;
  v962 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v960, 3, &v945);
  MIL::IRParameter::Make(&v945, (uint64_t *)&v928);
  v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v105, "weight_ih_back", (uint64_t *)&v928);
  v116 = v928;
  v928 = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  v117 = (std::__shared_weak_count *)v945.n128_u64[1];
  if (v945.n128_u64[1])
  {
    v118 = (unint64_t *)(v945.n128_u64[1] + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v115 + 5) + 32))(*((_QWORD *)v115 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v115 + 5) + 48))(*((_QWORD *)v115 + 5), 1);
  v120 = v959;
  v121 = MIL::IRUnknownDimension::Make(a1, 0);
  v122 = MIL::IRUnknownDimension::Make(a1, 0);
  v123 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v123->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v123->__on_zero_shared;
  v123->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v121;
  v123->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v122;
  Scalar = v123;
  v960 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v124 = MIL::IRUnknownDimension::Make(a1, 0);
  v125 = MIL::IRUnknownDimension::Make(a1, 0);
  v126 = operator new(0x10uLL);
  v957 = v126 + 2;
  *v126 = v124;
  v126[1] = v125;
  v955 = v126;
  v956 = v126 + 2;
  v961 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v955);
  v127 = MIL::IRUnknownDimension::Make(a1, 0);
  v128 = MIL::IRUnknownDimension::Make(a1, 0);
  v129 = operator new(0x10uLL);
  v954 = v129 + 2;
  *v129 = v127;
  v129[1] = v128;
  __p = v129;
  v953 = v129 + 2;
  v962 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v960, 3, &v944);
  MIL::IRParameter::Make(&v944, (uint64_t *)&v928);
  v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v120, "weight_hh_back", (uint64_t *)&v928);
  v131 = v928;
  v928 = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  v132 = (std::__shared_weak_count *)v944.n128_u64[1];
  if (v944.n128_u64[1])
  {
    v133 = (unint64_t *)(v944.n128_u64[1] + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v130 + 5) + 32))(*((_QWORD *)v130 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v130 + 5) + 48))(*((_QWORD *)v130 + 5), 1);
  v135 = v959;
  v136 = MIL::IRUnknownDimension::Make(a1, 0);
  v137 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v137;
  v137->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v136;
  p_get_deleter = (uint64_t)&v137->~__shared_weak_count_0;
  p_on_zero_shared = (uint64_t)&v137->~__shared_weak_count_0;
  v960 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v138 = MIL::IRUnknownDimension::Make(a1, 0);
  v139 = operator new(8uLL);
  v955 = v139;
  *v139 = v138;
  v957 = v139 + 1;
  v956 = v139 + 1;
  v961 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v955);
  v140 = MIL::IRUnknownDimension::Make(a1, 0);
  v141 = operator new(8uLL);
  __p = v141;
  *v141 = v140;
  v954 = v141 + 1;
  v953 = v141 + 1;
  v962 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v960, 3, &v943);
  MIL::IRParameter::Make(&v943, (uint64_t *)&v928);
  v142 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v135, "bias_back", (uint64_t *)&v928);
  v143 = v928;
  v928 = 0;
  if (v143)
    (*(void (**)(void *))(*(_QWORD *)v143 + 8))(v143);
  v144 = (std::__shared_weak_count *)v943.n128_u64[1];
  if (v943.n128_u64[1])
  {
    v145 = (unint64_t *)(v943.n128_u64[1] + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v142 + 5) + 32))(*((_QWORD *)v142 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v142 + 5) + 48))(*((_QWORD *)v142 + 5), 1);
  v147 = v959;
  v148 = MIL::IRUnknownDimension::Make(a1, 0);
  v149 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v149;
  v149->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v148;
  p_get_deleter = (uint64_t)&v149->~__shared_weak_count_0;
  p_on_zero_shared = (uint64_t)&v149->~__shared_weak_count_0;
  v960 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v150 = MIL::IRUnknownDimension::Make(a1, 0);
  v151 = operator new(8uLL);
  v955 = v151;
  *v151 = v150;
  v957 = v151 + 1;
  v956 = v151 + 1;
  v961 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v955);
  v152 = MIL::IRUnknownDimension::Make(a1, 0);
  v153 = operator new(8uLL);
  __p = v153;
  *v153 = v152;
  v954 = v153 + 1;
  v953 = v153 + 1;
  v962 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v960, 3, &v942);
  MIL::IRParameter::Make(&v942, (uint64_t *)&v928);
  v154 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v147, "peephole_back", (uint64_t *)&v928);
  v155 = v928;
  v928 = 0;
  if (v155)
    (*(void (**)(void *))(*(_QWORD *)v155 + 8))(v155);
  v156 = (std::__shared_weak_count *)v942.n128_u64[1];
  if (v942.n128_u64[1])
  {
    v157 = (unint64_t *)(v942.n128_u64[1] + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v154 + 5) + 32))(*((_QWORD *)v154 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v154 + 5) + 48))(*((_QWORD *)v154 + 5), 1);
  v159 = v959;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v941);
  MIL::IRParameter::Make(&v941, (uint64_t *)&v960);
  v160 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v159, "direction", (uint64_t *)&v960);
  v161 = v960;
  v960 = 0;
  if (v161)
    (*((void (**)(void **))*v161 + 1))(v161);
  v162 = (std::__shared_weak_count *)v941.n128_u64[1];
  if (v941.n128_u64[1])
  {
    v163 = (unint64_t *)(v941.n128_u64[1] + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v160 + 5) + 32))(*((_QWORD *)v160 + 5), 1);
  v165 = v959;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v940);
  MIL::IRParameter::Make(&v940, (uint64_t *)&v960);
  v166 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v165, "output_sequence", (uint64_t *)&v960);
  v167 = v960;
  v960 = 0;
  if (v167)
    (*((void (**)(void **))*v167 + 1))(v167);
  v168 = (std::__shared_weak_count *)v940.n128_u64[1];
  if (v940.n128_u64[1])
  {
    v169 = (unint64_t *)(v940.n128_u64[1] + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v166 + 5) + 32))(*((_QWORD *)v166 + 5), 1);
  v171 = v959;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v939);
  MIL::IRParameter::Make(&v939, (uint64_t *)&v960);
  v172 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v171, "recurrent_activation", (uint64_t *)&v960);
  v173 = v960;
  v960 = 0;
  if (v173)
    (*((void (**)(void **))*v173 + 1))(v173);
  v174 = (std::__shared_weak_count *)v939.n128_u64[1];
  if (v939.n128_u64[1])
  {
    v175 = (unint64_t *)(v939.n128_u64[1] + 8);
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v172 + 5) + 32))(*((_QWORD *)v172 + 5), 1);
  v177 = v959;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v938);
  MIL::IRParameter::Make(&v938, (uint64_t *)&v960);
  v178 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v177, "cell_activation", (uint64_t *)&v960);
  v179 = v960;
  v960 = 0;
  if (v179)
    (*((void (**)(void **))*v179 + 1))(v179);
  v180 = (std::__shared_weak_count *)v938.n128_u64[1];
  if (v938.n128_u64[1])
  {
    v181 = (unint64_t *)(v938.n128_u64[1] + 8);
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v178 + 5) + 32))(*((_QWORD *)v178 + 5), 1);
  v183 = v959;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v937);
  MIL::IRParameter::Make(&v937, (uint64_t *)&v960);
  v184 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v183, "activation", (uint64_t *)&v960);
  v185 = v960;
  v960 = 0;
  if (v185)
    (*((void (**)(void **))*v185 + 1))(v185);
  v186 = (std::__shared_weak_count *)v937.n128_u64[1];
  if (v937.n128_u64[1])
  {
    v187 = (unint64_t *)(v937.n128_u64[1] + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v184 + 5) + 32))(*((_QWORD *)v184 + 5), 1);
  v189 = v959;
  v960 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v961 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v962 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v960, 3, &v936);
  MIL::IRParameter::Make(&v936, (uint64_t *)&Scalar);
  v190 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v189, "clip", (uint64_t *)&Scalar);
  v191 = Scalar;
  Scalar = 0;
  if (v191)
    (*((void (**)(std::__shared_weak_count_vtbl *))v191->~__shared_weak_count + 1))(v191);
  v192 = (std::__shared_weak_count *)v936.n128_u64[1];
  if (v936.n128_u64[1])
  {
    v193 = (unint64_t *)(v936.n128_u64[1] + 8);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v190 + 5) + 32))(*((_QWORD *)v190 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v190 + 5) + 48))(*((_QWORD *)v190 + 5), 1);
  v935 = 0;
  v195 = operator new();
  *(_QWORD *)v195 = 0;
  *(_QWORD *)(v195 + 8) = 0;
  *(_QWORD *)(v195 + 16) = 0;
  v960 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v935, (void **)v195);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v960, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v935, 3uLL);
  v196 = v935;
  v197 = MIL::IRUnknownDimension::Make(a1, 0);
  v198 = MIL::IRUnknownDimension::Make(a1, 0);
  v199 = MIL::IRUnknownDimension::Make(a1, 0);
  v200 = operator new(0x18uLL);
  v957 = v200 + 3;
  *v200 = v197;
  v200[1] = v198;
  v200[2] = v199;
  v955 = v200;
  v956 = v200 + 3;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v955);
  v201 = MIL::IRUnknownDimension::Make(a1, 0);
  v202 = MIL::IRUnknownDimension::Make(a1, 0);
  v203 = MIL::IRUnknownDimension::Make(a1, 0);
  v204 = operator new(0x18uLL);
  v954 = v204 + 3;
  *v204 = v201;
  v204[1] = v202;
  v204[2] = v203;
  __p = v204;
  v953 = v204 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v205 = MIL::IRUnknownDimension::Make(a1, 0);
  v206 = MIL::IRUnknownDimension::Make(a1, 0);
  v207 = MIL::IRUnknownDimension::Make(a1, 0);
  v208 = operator new(0x18uLL);
  v930 = v208 + 3;
  *v208 = v205;
  v208[1] = v206;
  v208[2] = v207;
  v928 = v208;
  v929 = v208 + 3;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v928);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v931);
  MIL::IRParameter::Make(&v931, &v932);
  v209 = v932;
  v933 = v932;
  if (v932)
  {
    v210 = (_QWORD *)operator new();
    v211 = v932;
    *v210 = &unk_1EA99F888;
    v210[1] = 0;
    v210[2] = 0;
    v210[3] = v211;
  }
  else
  {
    v210 = 0;
  }
  v934 = v210;
  v932 = 0;
  v212 = v196[2];
  v213 = v196[1];
  if (v213 >= v212)
  {
    v215 = (v213 - *v196) >> 4;
    v216 = v215 + 1;
    if ((unint64_t)(v215 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v217 = v212 - *v196;
    if (v217 >> 3 > v216)
      v216 = v217 >> 3;
    if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF0)
      v218 = 0xFFFFFFFFFFFFFFFLL;
    else
      v218 = v216;
    v964 = v196 + 2;
    v219 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v196 + 2), v218);
    v221 = (uint64_t *)&v219[16 * v215];
    *v221 = v209;
    v221[1] = (uint64_t)v210;
    v934 = 0;
    v933 = 0;
    v223 = *v196;
    v222 = v196[1];
    if (v222 == *v196)
    {
      v226 = (void **)v196[1];
      v224 = &v219[16 * v215];
    }
    else
    {
      v224 = &v219[16 * v215];
      do
      {
        v225 = *((_OWORD *)v222 - 1);
        v222 -= 16;
        *((_OWORD *)v224 - 1) = v225;
        v224 -= 16;
        *(_QWORD *)v222 = 0;
        *((_QWORD *)v222 + 1) = 0;
      }
      while (v222 != v223);
      v226 = (void **)*v196;
      v222 = v196[1];
    }
    v214 = (char *)(v221 + 2);
    *v196 = v224;
    v961 = (uint64_t)v226;
    v196[1] = (char *)(v221 + 2);
    v962 = (uint64_t)v222;
    v227 = v196[2];
    v196[2] = &v219[16 * v220];
    v963 = v227;
    v960 = v226;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v960);
  }
  else
  {
    *(_QWORD *)v213 = v209;
    *((_QWORD *)v213 + 1) = v210;
    v214 = v213 + 16;
    v934 = 0;
    v933 = 0;
  }
  v196[1] = v214;
  v228 = v932;
  v932 = 0;
  if (v228)
    (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
  v229 = (std::__shared_weak_count *)v931.n128_u64[1];
  if (v931.n128_u64[1])
  {
    v230 = (unint64_t *)(v931.n128_u64[1] + 8);
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  if (v928)
  {
    v929 = v928;
    operator delete(v928);
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  v232 = v935;
  v233 = MIL::IRUnknownDimension::Make(a1, 0);
  v234 = MIL::IRUnknownDimension::Make(a1, 0);
  v235 = operator new(0x10uLL);
  v957 = v235 + 2;
  *v235 = v233;
  v235[1] = v234;
  v955 = v235;
  v956 = v235 + 2;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v955);
  v236 = MIL::IRUnknownDimension::Make(a1, 0);
  v237 = MIL::IRUnknownDimension::Make(a1, 0);
  v238 = operator new(0x10uLL);
  v954 = v238 + 2;
  *v238 = v236;
  v238[1] = v237;
  __p = v238;
  v953 = v238 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v239 = MIL::IRUnknownDimension::Make(a1, 0);
  v240 = MIL::IRUnknownDimension::Make(a1, 0);
  v241 = operator new(0x10uLL);
  v930 = v241 + 2;
  *v241 = v239;
  v241[1] = v240;
  v928 = v241;
  v929 = v241 + 2;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v928);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v927);
  MIL::IRParameter::Make(&v927, &v932);
  v242 = v932;
  v933 = v932;
  if (v932)
  {
    v243 = (_QWORD *)operator new();
    v244 = v932;
    *v243 = &unk_1EA99F888;
    v243[1] = 0;
    v243[2] = 0;
    v243[3] = v244;
  }
  else
  {
    v243 = 0;
  }
  v934 = v243;
  v932 = 0;
  v245 = v232[2];
  v246 = v232[1];
  if (v246 >= v245)
  {
    v248 = (v246 - *v232) >> 4;
    v249 = v248 + 1;
    if ((unint64_t)(v248 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v250 = v245 - *v232;
    if (v250 >> 3 > v249)
      v249 = v250 >> 3;
    if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFF0)
      v251 = 0xFFFFFFFFFFFFFFFLL;
    else
      v251 = v249;
    v964 = v232 + 2;
    v252 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v232 + 2), v251);
    v254 = (uint64_t *)&v252[16 * v248];
    *v254 = v242;
    v254[1] = (uint64_t)v243;
    v934 = 0;
    v933 = 0;
    v256 = *v232;
    v255 = v232[1];
    if (v255 == *v232)
    {
      v259 = (void **)v232[1];
      v257 = &v252[16 * v248];
    }
    else
    {
      v257 = &v252[16 * v248];
      do
      {
        v258 = *((_OWORD *)v255 - 1);
        v255 -= 16;
        *((_OWORD *)v257 - 1) = v258;
        v257 -= 16;
        *(_QWORD *)v255 = 0;
        *((_QWORD *)v255 + 1) = 0;
      }
      while (v255 != v256);
      v259 = (void **)*v232;
      v255 = v232[1];
    }
    v247 = (char *)(v254 + 2);
    *v232 = v257;
    v961 = (uint64_t)v259;
    v232[1] = (char *)(v254 + 2);
    v962 = (uint64_t)v255;
    v260 = v232[2];
    v232[2] = &v252[16 * v253];
    v963 = v260;
    v960 = v259;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v960);
  }
  else
  {
    *(_QWORD *)v246 = v242;
    *((_QWORD *)v246 + 1) = v243;
    v247 = v246 + 16;
    v934 = 0;
    v933 = 0;
  }
  v232[1] = v247;
  v261 = v932;
  v932 = 0;
  if (v261)
    (*(void (**)(uint64_t))(*(_QWORD *)v261 + 8))(v261);
  v262 = (std::__shared_weak_count *)v927.n128_u64[1];
  if (v927.n128_u64[1])
  {
    v263 = (unint64_t *)(v927.n128_u64[1] + 8);
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  if (v928)
  {
    v929 = v928;
    operator delete(v928);
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  v265 = v935;
  v266 = MIL::IRUnknownDimension::Make(a1, 0);
  v267 = MIL::IRUnknownDimension::Make(a1, 0);
  v268 = operator new(0x10uLL);
  v957 = v268 + 2;
  *v268 = v266;
  v268[1] = v267;
  v955 = v268;
  v956 = v268 + 2;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v955);
  v269 = MIL::IRUnknownDimension::Make(a1, 0);
  v270 = MIL::IRUnknownDimension::Make(a1, 0);
  v271 = operator new(0x10uLL);
  v954 = v271 + 2;
  *v271 = v269;
  v271[1] = v270;
  __p = v271;
  v953 = v271 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v272 = MIL::IRUnknownDimension::Make(a1, 0);
  v273 = MIL::IRUnknownDimension::Make(a1, 0);
  v274 = operator new(0x10uLL);
  v930 = v274 + 2;
  *v274 = v272;
  v274[1] = v273;
  v928 = v274;
  v929 = v274 + 2;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v928);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v926);
  MIL::IRParameter::Make(&v926, &v932);
  v275 = v932;
  v933 = v932;
  if (v932)
  {
    v276 = (_QWORD *)operator new();
    v277 = v932;
    *v276 = &unk_1EA99F888;
    v276[1] = 0;
    v276[2] = 0;
    v276[3] = v277;
  }
  else
  {
    v276 = 0;
  }
  v934 = v276;
  v932 = 0;
  v278 = v265[2];
  v279 = v265[1];
  if (v279 >= v278)
  {
    v281 = (v279 - *v265) >> 4;
    v282 = v281 + 1;
    if ((unint64_t)(v281 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v283 = v278 - *v265;
    if (v283 >> 3 > v282)
      v282 = v283 >> 3;
    if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFF0)
      v284 = 0xFFFFFFFFFFFFFFFLL;
    else
      v284 = v282;
    v964 = v265 + 2;
    v285 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v265 + 2), v284);
    v287 = (uint64_t *)&v285[16 * v281];
    *v287 = v275;
    v287[1] = (uint64_t)v276;
    v934 = 0;
    v933 = 0;
    v289 = *v265;
    v288 = v265[1];
    if (v288 == *v265)
    {
      v292 = (void **)v265[1];
      v290 = &v285[16 * v281];
    }
    else
    {
      v290 = &v285[16 * v281];
      do
      {
        v291 = *((_OWORD *)v288 - 1);
        v288 -= 16;
        *((_OWORD *)v290 - 1) = v291;
        v290 -= 16;
        *(_QWORD *)v288 = 0;
        *((_QWORD *)v288 + 1) = 0;
      }
      while (v288 != v289);
      v292 = (void **)*v265;
      v288 = v265[1];
    }
    v280 = (char *)(v287 + 2);
    *v265 = v290;
    v961 = (uint64_t)v292;
    v265[1] = (char *)(v287 + 2);
    v962 = (uint64_t)v288;
    v293 = v265[2];
    v265[2] = &v285[16 * v286];
    v963 = v293;
    v960 = v292;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v960);
  }
  else
  {
    *(_QWORD *)v279 = v275;
    *((_QWORD *)v279 + 1) = v276;
    v280 = v279 + 16;
    v934 = 0;
    v933 = 0;
  }
  v265[1] = v280;
  v294 = v932;
  v932 = 0;
  if (v294)
    (*(void (**)(uint64_t))(*(_QWORD *)v294 + 8))(v294);
  v295 = (std::__shared_weak_count *)v926.n128_u64[1];
  if (v926.n128_u64[1])
  {
    v296 = (unint64_t *)(v926.n128_u64[1] + 8);
    do
      v297 = __ldaxr(v296);
    while (__stlxr(v297 - 1, v296));
    if (!v297)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
  }
  if (v928)
  {
    v929 = v928;
    operator delete(v928);
  }
  if (__p)
  {
    v953 = __p;
    operator delete(__p);
  }
  if (v955)
  {
    v956 = v955;
    operator delete(v955);
  }
  *(_OWORD *)v924 = *(_OWORD *)a2;
  v925 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v298 = (uint64_t)v959;
  *(_QWORD *)&v923 = v959;
  if (v959)
  {
    v299 = (_QWORD *)operator new();
    *v299 = &unk_1EA99F8E8;
    v299[1] = 0;
    v299[2] = 0;
    v299[3] = v298;
  }
  else
  {
    v299 = 0;
  }
  *((_QWORD *)&v923 + 1) = v299;
  v959 = 0;
  *(_QWORD *)&v922 = v935;
  if (v935)
  {
    v300 = (_QWORD *)operator new();
    v301 = v935;
    *v300 = &unk_1EA99F948;
    v300[1] = 0;
    v300[2] = 0;
    v300[3] = v301;
  }
  else
  {
    v300 = 0;
  }
  *((_QWORD *)&v922 + 1) = v300;
  v935 = 0;
  v976[0] = &unk_1EA99FAC8;
  v976[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateLSTM;
  v977 = v976;
  v975 = 0;
  MIL::IROperator::Make((__int128 *)v924, &v923, &v922, (uint64_t)v976, (uint64_t)v974, a3);
  v302 = v975;
  if (v975 == v974)
  {
    v303 = 4;
    v302 = v974;
  }
  else
  {
    if (!v975)
      goto LABEL_287;
    v303 = 5;
  }
  (*(void (**)(void))(*v302 + 8 * v303))();
LABEL_287:
  v304 = v977;
  if (v977 == v976)
  {
    v305 = 4;
    v304 = v976;
    goto LABEL_291;
  }
  if (v977)
  {
    v305 = 5;
LABEL_291:
    (*(void (**)(void))(*v304 + 8 * v305))();
  }
  v306 = (std::__shared_weak_count *)*((_QWORD *)&v922 + 1);
  if (*((_QWORD *)&v922 + 1))
  {
    v307 = (unint64_t *)(*((_QWORD *)&v922 + 1) + 8);
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  v309 = (std::__shared_weak_count *)*((_QWORD *)&v923 + 1);
  if (*((_QWORD *)&v923 + 1))
  {
    v310 = (unint64_t *)(*((_QWORD *)&v923 + 1) + 8);
    do
      v311 = __ldaxr(v310);
    while (__stlxr(v311 - 1, v310));
    if (!v311)
    {
      ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
      std::__shared_weak_count::__release_weak(v309);
    }
  }
  if (SHIBYTE(v925) < 0)
    operator delete(v924[0]);
  v955 = 0;
  v312 = (_OWORD *)operator new();
  *v312 = 0u;
  v312[1] = 0u;
  *((_DWORD *)v312 + 8) = 1065353216;
  v955 = v312;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v921);
  MIL::IRParameter::Make(&v921, (uint64_t *)&v960);
  v313 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v312, "minimum_compute_type", (uint64_t *)&v960);
  v314 = v960;
  v960 = 0;
  if (v314)
    (*((void (**)(void **))*v314 + 1))(v314);
  v315 = (std::__shared_weak_count *)v921.n128_u64[1];
  if (v921.n128_u64[1])
  {
    v316 = (unint64_t *)(v921.n128_u64[1] + 8);
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v313 + 5) + 32))(*((_QWORD *)v313 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v313 + 5) + 48))(*((_QWORD *)v313 + 5), 1);
  v318 = *a3;
  v319 = (std::__shared_weak_count_vtbl *)v955;
  v919 = v955;
  if (v955)
  {
    v320 = (std::__shared_weak_count *)operator new();
    v320->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v320->__shared_owners_ = 0;
    v320->__shared_weak_owners_ = 0;
    v320[1].__vftable = v319;
  }
  else
  {
    v320 = 0;
  }
  v920 = v320;
  v955 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v318 + 184))(v318, &v919);
  v321 = v920;
  if (v920)
  {
    p_shared_owners = (unint64_t *)&v920->__shared_owners_;
    do
      v323 = __ldaxr(p_shared_owners);
    while (__stlxr(v323 - 1, p_shared_owners));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
      std::__shared_weak_count::__release_weak(v321);
    }
  }
  v324 = *a3;
  v972[0] = &off_1EA99FBD8;
  v972[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceLSTM;
  v973 = v972;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v324 + 200))(v324, v972);
  v325 = v973;
  if (v973 == v972)
  {
    v326 = 4;
    v325 = v972;
  }
  else
  {
    if (!v973)
      goto LABEL_324;
    v326 = 5;
  }
  (*(void (**)(void))(*v325 + 8 * v326))();
LABEL_324:
  MIL::Validation::TensorDTypeConstraints::Make(&v960);
  v327 = v960;
  std::string::basic_string[abi:ne180100]<0>(v915, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v915, 0, (uint64_t *)&Scalar);
  v917 = Scalar;
  if (Scalar)
  {
    v328 = (std::__shared_weak_count *)operator new();
    v329 = Scalar;
    v328->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v328->__shared_owners_ = 0;
    v328->__shared_weak_owners_ = 0;
    v328[1].__vftable = v329;
  }
  else
  {
    v328 = 0;
  }
  v918 = v328;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v913, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v327 + 3))(v327, &v917, v913);
  if (v914 < 0)
    operator delete(v913[0]);
  v330 = v918;
  if (v918)
  {
    v331 = (unint64_t *)&v918->__shared_owners_;
    do
      v332 = __ldaxr(v331);
    while (__stlxr(v332 - 1, v331));
    if (!v332)
    {
      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
      std::__shared_weak_count::__release_weak(v330);
    }
  }
  v333 = Scalar;
  Scalar = 0;
  if (v333)
    (*((void (**)(std::__shared_weak_count_vtbl *))v333->~__shared_weak_count + 1))(v333);
  if (v916 < 0)
    operator delete(v915[0]);
  v334 = v960;
  std::string::basic_string[abi:ne180100]<0>(v909, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v909, 0, (uint64_t *)&Scalar);
  v911 = Scalar;
  if (Scalar)
  {
    v335 = (std::__shared_weak_count *)operator new();
    v336 = Scalar;
    v335->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v335->__shared_owners_ = 0;
    v335->__shared_weak_owners_ = 0;
    v335[1].__vftable = v336;
  }
  else
  {
    v335 = 0;
  }
  v912 = v335;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v907, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v334 + 3))(v334, &v911, v907);
  if (v908 < 0)
    operator delete(v907[0]);
  v337 = v912;
  if (v912)
  {
    v338 = (unint64_t *)&v912->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
      std::__shared_weak_count::__release_weak(v337);
    }
  }
  v340 = Scalar;
  Scalar = 0;
  if (v340)
    (*((void (**)(std::__shared_weak_count_vtbl *))v340->~__shared_weak_count + 1))(v340);
  if (v910 < 0)
    operator delete(v909[0]);
  v341 = v960;
  std::string::basic_string[abi:ne180100]<0>(v903, "initial_c");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v903, 0, (uint64_t *)&Scalar);
  v905 = Scalar;
  if (Scalar)
  {
    v342 = (std::__shared_weak_count *)operator new();
    v343 = Scalar;
    v342->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v342->__shared_owners_ = 0;
    v342->__shared_weak_owners_ = 0;
    v342[1].__vftable = v343;
  }
  else
  {
    v342 = 0;
  }
  v906 = v342;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v901, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v341 + 3))(v341, &v905, v901);
  if (v902 < 0)
    operator delete(v901[0]);
  v344 = v906;
  if (v906)
  {
    v345 = (unint64_t *)&v906->__shared_owners_;
    do
      v346 = __ldaxr(v345);
    while (__stlxr(v346 - 1, v345));
    if (!v346)
    {
      ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
      std::__shared_weak_count::__release_weak(v344);
    }
  }
  v347 = Scalar;
  Scalar = 0;
  if (v347)
    (*((void (**)(std::__shared_weak_count_vtbl *))v347->~__shared_weak_count + 1))(v347);
  if (v904 < 0)
    operator delete(v903[0]);
  v348 = v960;
  std::string::basic_string[abi:ne180100]<0>(v897, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v897, 0, (uint64_t *)&Scalar);
  v899 = Scalar;
  if (Scalar)
  {
    v349 = (std::__shared_weak_count *)operator new();
    v350 = Scalar;
    v349->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v349->__shared_owners_ = 0;
    v349->__shared_weak_owners_ = 0;
    v349[1].__vftable = v350;
  }
  else
  {
    v349 = 0;
  }
  v900 = v349;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v895, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v348 + 3))(v348, &v899, v895);
  if (v896 < 0)
    operator delete(v895[0]);
  v351 = v900;
  if (v900)
  {
    v352 = (unint64_t *)&v900->__shared_owners_;
    do
      v353 = __ldaxr(v352);
    while (__stlxr(v353 - 1, v352));
    if (!v353)
    {
      ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
      std::__shared_weak_count::__release_weak(v351);
    }
  }
  v354 = Scalar;
  Scalar = 0;
  if (v354)
    (*((void (**)(std::__shared_weak_count_vtbl *))v354->~__shared_weak_count + 1))(v354);
  if (v898 < 0)
    operator delete(v897[0]);
  v355 = v960;
  std::string::basic_string[abi:ne180100]<0>(v891, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v891, 0, (uint64_t *)&Scalar);
  v893 = Scalar;
  if (Scalar)
  {
    v356 = (std::__shared_weak_count *)operator new();
    v357 = Scalar;
    v356->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v356->__shared_owners_ = 0;
    v356->__shared_weak_owners_ = 0;
    v356[1].__vftable = v357;
  }
  else
  {
    v356 = 0;
  }
  v894 = v356;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v889, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v355 + 3))(v355, &v893, v889);
  if (v890 < 0)
    operator delete(v889[0]);
  v358 = v894;
  if (v894)
  {
    v359 = (unint64_t *)&v894->__shared_owners_;
    do
      v360 = __ldaxr(v359);
    while (__stlxr(v360 - 1, v359));
    if (!v360)
    {
      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
      std::__shared_weak_count::__release_weak(v358);
    }
  }
  v361 = Scalar;
  Scalar = 0;
  if (v361)
    (*((void (**)(std::__shared_weak_count_vtbl *))v361->~__shared_weak_count + 1))(v361);
  if (v892 < 0)
    operator delete(v891[0]);
  v362 = v960;
  std::string::basic_string[abi:ne180100]<0>(v885, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v885, 1, (uint64_t *)&Scalar);
  v887 = Scalar;
  if (Scalar)
  {
    v363 = (std::__shared_weak_count *)operator new();
    v364 = Scalar;
    v363->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v363->__shared_owners_ = 0;
    v363->__shared_weak_owners_ = 0;
    v363[1].__vftable = v364;
  }
  else
  {
    v363 = 0;
  }
  v888 = v363;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v883, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v362 + 3))(v362, &v887, v883);
  if (v884 < 0)
    operator delete(v883[0]);
  v365 = v888;
  if (v888)
  {
    v366 = (unint64_t *)&v888->__shared_owners_;
    do
      v367 = __ldaxr(v366);
    while (__stlxr(v367 - 1, v366));
    if (!v367)
    {
      ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
      std::__shared_weak_count::__release_weak(v365);
    }
  }
  v368 = Scalar;
  Scalar = 0;
  if (v368)
    (*((void (**)(std::__shared_weak_count_vtbl *))v368->~__shared_weak_count + 1))(v368);
  if (v886 < 0)
    operator delete(v885[0]);
  v369 = v960;
  std::string::basic_string[abi:ne180100]<0>(v879, "peephole");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v879, 1, (uint64_t *)&Scalar);
  v881 = Scalar;
  if (Scalar)
  {
    v370 = (std::__shared_weak_count *)operator new();
    v371 = Scalar;
    v370->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v370->__shared_owners_ = 0;
    v370->__shared_weak_owners_ = 0;
    v370[1].__vftable = v371;
  }
  else
  {
    v370 = 0;
  }
  v882 = v370;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v877, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v369 + 3))(v369, &v881, v877);
  if (v878 < 0)
    operator delete(v877[0]);
  v372 = v882;
  if (v882)
  {
    v373 = (unint64_t *)&v882->__shared_owners_;
    do
      v374 = __ldaxr(v373);
    while (__stlxr(v374 - 1, v373));
    if (!v374)
    {
      ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
      std::__shared_weak_count::__release_weak(v372);
    }
  }
  v375 = Scalar;
  Scalar = 0;
  if (v375)
    (*((void (**)(std::__shared_weak_count_vtbl *))v375->~__shared_weak_count + 1))(v375);
  if (v880 < 0)
    operator delete(v879[0]);
  v376 = v960;
  std::string::basic_string[abi:ne180100]<0>(v873, "weight_ih_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v873, 1, (uint64_t *)&Scalar);
  v875 = Scalar;
  if (Scalar)
  {
    v377 = (std::__shared_weak_count *)operator new();
    v378 = Scalar;
    v377->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v377->__shared_owners_ = 0;
    v377->__shared_weak_owners_ = 0;
    v377[1].__vftable = v378;
  }
  else
  {
    v377 = 0;
  }
  v876 = v377;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v871, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v376 + 3))(v376, &v875, v871);
  if (v872 < 0)
    operator delete(v871[0]);
  v379 = v876;
  if (v876)
  {
    v380 = (unint64_t *)&v876->__shared_owners_;
    do
      v381 = __ldaxr(v380);
    while (__stlxr(v381 - 1, v380));
    if (!v381)
    {
      ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
      std::__shared_weak_count::__release_weak(v379);
    }
  }
  v382 = Scalar;
  Scalar = 0;
  if (v382)
    (*((void (**)(std::__shared_weak_count_vtbl *))v382->~__shared_weak_count + 1))(v382);
  if (v874 < 0)
    operator delete(v873[0]);
  v383 = v960;
  std::string::basic_string[abi:ne180100]<0>(v867, "weight_hh_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v867, 1, (uint64_t *)&Scalar);
  v869 = Scalar;
  if (Scalar)
  {
    v384 = (std::__shared_weak_count *)operator new();
    v385 = Scalar;
    v384->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v384->__shared_owners_ = 0;
    v384->__shared_weak_owners_ = 0;
    v384[1].__vftable = v385;
  }
  else
  {
    v384 = 0;
  }
  v870 = v384;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v865, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v383 + 3))(v383, &v869, v865);
  if (v866 < 0)
    operator delete(v865[0]);
  v386 = v870;
  if (v870)
  {
    v387 = (unint64_t *)&v870->__shared_owners_;
    do
      v388 = __ldaxr(v387);
    while (__stlxr(v388 - 1, v387));
    if (!v388)
    {
      ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
      std::__shared_weak_count::__release_weak(v386);
    }
  }
  v389 = Scalar;
  Scalar = 0;
  if (v389)
    (*((void (**)(std::__shared_weak_count_vtbl *))v389->~__shared_weak_count + 1))(v389);
  if (v868 < 0)
    operator delete(v867[0]);
  v390 = v960;
  std::string::basic_string[abi:ne180100]<0>(v861, "bias_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v861, 1, (uint64_t *)&Scalar);
  v863 = Scalar;
  if (Scalar)
  {
    v391 = (std::__shared_weak_count *)operator new();
    v392 = Scalar;
    v391->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v391->__shared_owners_ = 0;
    v391->__shared_weak_owners_ = 0;
    v391[1].__vftable = v392;
  }
  else
  {
    v391 = 0;
  }
  v864 = v391;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v859, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v390 + 3))(v390, &v863, v859);
  if (v860 < 0)
    operator delete(v859[0]);
  v393 = v864;
  if (v864)
  {
    v394 = (unint64_t *)&v864->__shared_owners_;
    do
      v395 = __ldaxr(v394);
    while (__stlxr(v395 - 1, v394));
    if (!v395)
    {
      ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
      std::__shared_weak_count::__release_weak(v393);
    }
  }
  v396 = Scalar;
  Scalar = 0;
  if (v396)
    (*((void (**)(std::__shared_weak_count_vtbl *))v396->~__shared_weak_count + 1))(v396);
  if (v862 < 0)
    operator delete(v861[0]);
  v397 = v960;
  std::string::basic_string[abi:ne180100]<0>(v855, "peephole_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v855, 1, (uint64_t *)&Scalar);
  v857 = Scalar;
  if (Scalar)
  {
    v398 = (std::__shared_weak_count *)operator new();
    v399 = Scalar;
    v398->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v398->__shared_owners_ = 0;
    v398->__shared_weak_owners_ = 0;
    v398[1].__vftable = v399;
  }
  else
  {
    v398 = 0;
  }
  v858 = v398;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v853, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v397 + 3))(v397, &v857, v853);
  if (v854 < 0)
    operator delete(v853[0]);
  v400 = v858;
  if (v858)
  {
    v401 = (unint64_t *)&v858->__shared_owners_;
    do
      v402 = __ldaxr(v401);
    while (__stlxr(v402 - 1, v401));
    if (!v402)
    {
      ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
      std::__shared_weak_count::__release_weak(v400);
    }
  }
  v403 = Scalar;
  Scalar = 0;
  if (v403)
    (*((void (**)(std::__shared_weak_count_vtbl *))v403->~__shared_weak_count + 1))(v403);
  if (v856 < 0)
    operator delete(v855[0]);
  v404 = v960;
  std::string::basic_string[abi:ne180100]<0>(v849, "clip");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v849, 1, (uint64_t *)&Scalar);
  v851 = Scalar;
  if (Scalar)
  {
    v405 = (std::__shared_weak_count *)operator new();
    v406 = Scalar;
    v405->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v405->__shared_owners_ = 0;
    v405->__shared_weak_owners_ = 0;
    v405[1].__vftable = v406;
  }
  else
  {
    v405 = 0;
  }
  v852 = v405;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v847, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v404 + 3))(v404, &v851, v847);
  if (v848 < 0)
    operator delete(v847[0]);
  v407 = v852;
  if (v852)
  {
    v408 = (unint64_t *)&v852->__shared_owners_;
    do
      v409 = __ldaxr(v408);
    while (__stlxr(v409 - 1, v408));
    if (!v409)
    {
      ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
      std::__shared_weak_count::__release_weak(v407);
    }
  }
  v410 = Scalar;
  Scalar = 0;
  if (v410)
    (*((void (**)(std::__shared_weak_count_vtbl *))v410->~__shared_weak_count + 1))(v410);
  if (v850 < 0)
    operator delete(v849[0]);
  v411 = v960;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v845 = Scalar;
  if (Scalar)
  {
    v412 = (std::__shared_weak_count *)operator new();
    v413 = Scalar;
    v412->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v412->__shared_owners_ = 0;
    v412->__shared_weak_owners_ = 0;
    v412[1].__vftable = v413;
  }
  else
  {
    v412 = 0;
  }
  v846 = v412;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v843, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v411 + 3))(v411, &v845, v843);
  if (v844 < 0)
    operator delete(v843[0]);
  v414 = v846;
  if (v846)
  {
    v415 = (unint64_t *)&v846->__shared_owners_;
    do
      v416 = __ldaxr(v415);
    while (__stlxr(v416 - 1, v415));
    if (!v416)
    {
      ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
      std::__shared_weak_count::__release_weak(v414);
    }
  }
  v417 = Scalar;
  Scalar = 0;
  if (v417)
    (*((void (**)(std::__shared_weak_count_vtbl *))v417->~__shared_weak_count + 1))(v417);
  v418 = v960;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v841 = Scalar;
  if (Scalar)
  {
    v419 = (std::__shared_weak_count *)operator new();
    v420 = Scalar;
    v419->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v419->__shared_owners_ = 0;
    v419->__shared_weak_owners_ = 0;
    v419[1].__vftable = v420;
  }
  else
  {
    v419 = 0;
  }
  v842 = v419;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v839, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v418 + 3))(v418, &v841, v839);
  if (v840 < 0)
    operator delete(v839[0]);
  v421 = v842;
  if (v842)
  {
    v422 = (unint64_t *)&v842->__shared_owners_;
    do
      v423 = __ldaxr(v422);
    while (__stlxr(v423 - 1, v422));
    if (!v423)
    {
      ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
      std::__shared_weak_count::__release_weak(v421);
    }
  }
  v424 = Scalar;
  Scalar = 0;
  if (v424)
    (*((void (**)(std::__shared_weak_count_vtbl *))v424->~__shared_weak_count + 1))(v424);
  v425 = v960;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &Scalar);
  v837 = Scalar;
  if (Scalar)
  {
    v426 = (std::__shared_weak_count *)operator new();
    v427 = Scalar;
    v426->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v426->__shared_owners_ = 0;
    v426->__shared_weak_owners_ = 0;
    v426[1].__vftable = v427;
  }
  else
  {
    v426 = 0;
  }
  v838 = v426;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v835, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v425 + 3))(v425, &v837, v835);
  if (v836 < 0)
    operator delete(v835[0]);
  v428 = v838;
  if (v838)
  {
    v429 = (unint64_t *)&v838->__shared_owners_;
    do
      v430 = __ldaxr(v429);
    while (__stlxr(v430 - 1, v429));
    if (!v430)
    {
      ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
      std::__shared_weak_count::__release_weak(v428);
    }
  }
  v431 = Scalar;
  Scalar = 0;
  if (v431)
    (*((void (**)(std::__shared_weak_count_vtbl *))v431->~__shared_weak_count + 1))(v431);
  v432 = *a3;
  v833 = v960;
  if (v960)
  {
    v433 = (std::__shared_weak_count *)operator new();
    v434 = v960;
    v433->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v433->__shared_owners_ = 0;
    v433->__shared_weak_owners_ = 0;
    v433[1].__vftable = (std::__shared_weak_count_vtbl *)v434;
  }
  else
  {
    v433 = 0;
  }
  v834 = v433;
  v960 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v432 + 56))(v432, &v833);
  v435 = v834;
  if (v834)
  {
    v436 = (unint64_t *)&v834->__shared_owners_;
    do
      v437 = __ldaxr(v436);
    while (__stlxr(v437 - 1, v436));
    if (!v437)
    {
      ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
      std::__shared_weak_count::__release_weak(v435);
    }
  }
  v438 = v960;
  v960 = 0;
  if (v438)
    (*((void (**)(void **))*v438 + 1))(v438);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v960);
  v439 = v960;
  std::string::basic_string[abi:ne180100]<0>(v829, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v829, 0, (uint64_t *)&Scalar);
  v831 = Scalar;
  if (Scalar)
  {
    v440 = (std::__shared_weak_count *)operator new();
    v441 = Scalar;
    v440->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v440->__shared_owners_ = 0;
    v440->__shared_weak_owners_ = 0;
    v440[1].__vftable = v441;
  }
  else
  {
    v440 = 0;
  }
  v832 = v440;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v827, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v439 + 3))(v439, &v831, 0, v827);
  if (v828 < 0)
    operator delete(v827[0]);
  v442 = v832;
  if (v832)
  {
    v443 = (unint64_t *)&v832->__shared_owners_;
    do
      v444 = __ldaxr(v443);
    while (__stlxr(v444 - 1, v443));
    if (!v444)
    {
      ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
      std::__shared_weak_count::__release_weak(v442);
    }
  }
  v445 = Scalar;
  Scalar = 0;
  if (v445)
    (*((void (**)(std::__shared_weak_count_vtbl *))v445->~__shared_weak_count + 1))(v445);
  if (v830 < 0)
    operator delete(v829[0]);
  v446 = v960;
  std::string::basic_string[abi:ne180100]<0>(v823, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v823, 0, (uint64_t *)&Scalar);
  v825 = Scalar;
  if (Scalar)
  {
    v447 = (std::__shared_weak_count *)operator new();
    v448 = Scalar;
    v447->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v447->__shared_owners_ = 0;
    v447->__shared_weak_owners_ = 0;
    v447[1].__vftable = v448;
  }
  else
  {
    v447 = 0;
  }
  v826 = v447;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v821, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v446 + 3))(v446, &v825, 1, v821);
  if (v822 < 0)
    operator delete(v821[0]);
  v449 = v826;
  if (v826)
  {
    v450 = (unint64_t *)&v826->__shared_owners_;
    do
      v451 = __ldaxr(v450);
    while (__stlxr(v451 - 1, v450));
    if (!v451)
    {
      ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
      std::__shared_weak_count::__release_weak(v449);
    }
  }
  v452 = Scalar;
  Scalar = 0;
  if (v452)
    (*((void (**)(std::__shared_weak_count_vtbl *))v452->~__shared_weak_count + 1))(v452);
  if (v824 < 0)
    operator delete(v823[0]);
  v453 = v960;
  std::string::basic_string[abi:ne180100]<0>(v817, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v817, 0, (uint64_t *)&Scalar);
  v819 = Scalar;
  if (Scalar)
  {
    v454 = (std::__shared_weak_count *)operator new();
    v455 = Scalar;
    v454->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v454->__shared_owners_ = 0;
    v454->__shared_weak_owners_ = 0;
    v454[1].__vftable = v455;
  }
  else
  {
    v454 = 0;
  }
  v820 = v454;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v815, "I");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v453 + 3))(v453, &v819, 2, v815);
  if (v816 < 0)
    operator delete(v815[0]);
  v456 = v820;
  if (v820)
  {
    v457 = (unint64_t *)&v820->__shared_owners_;
    do
      v458 = __ldaxr(v457);
    while (__stlxr(v458 - 1, v457));
    if (!v458)
    {
      ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
      std::__shared_weak_count::__release_weak(v456);
    }
  }
  v459 = Scalar;
  Scalar = 0;
  if (v459)
    (*((void (**)(std::__shared_weak_count_vtbl *))v459->~__shared_weak_count + 1))(v459);
  if (v818 < 0)
    operator delete(v817[0]);
  v460 = v960;
  std::string::basic_string[abi:ne180100]<0>(v811, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v811, 0, (uint64_t *)&Scalar);
  v813 = Scalar;
  if (Scalar)
  {
    v461 = (std::__shared_weak_count *)operator new();
    v462 = Scalar;
    v461->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v461->__shared_owners_ = 0;
    v461->__shared_weak_owners_ = 0;
    v461[1].__vftable = v462;
  }
  else
  {
    v461 = 0;
  }
  v814 = v461;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v809, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v460 + 3))(v460, &v813, 0, v809);
  if (v810 < 0)
    operator delete(v809[0]);
  v463 = v814;
  if (v814)
  {
    v464 = (unint64_t *)&v814->__shared_owners_;
    do
      v465 = __ldaxr(v464);
    while (__stlxr(v465 - 1, v464));
    if (!v465)
    {
      ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
      std::__shared_weak_count::__release_weak(v463);
    }
  }
  v466 = Scalar;
  Scalar = 0;
  if (v466)
    (*((void (**)(std::__shared_weak_count_vtbl *))v466->~__shared_weak_count + 1))(v466);
  if (v812 < 0)
    operator delete(v811[0]);
  v467 = v960;
  std::string::basic_string[abi:ne180100]<0>(v805, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v805, 0, (uint64_t *)&Scalar);
  v807 = Scalar;
  if (Scalar)
  {
    v468 = (std::__shared_weak_count *)operator new();
    v469 = Scalar;
    v468->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v468->__shared_owners_ = 0;
    v468->__shared_weak_owners_ = 0;
    v468[1].__vftable = v469;
  }
  else
  {
    v468 = 0;
  }
  v808 = v468;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v803, "H_dir");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v467 + 3))(v467, &v807, 1, v803);
  if (v804 < 0)
    operator delete(v803[0]);
  v470 = v808;
  if (v808)
  {
    v471 = (unint64_t *)&v808->__shared_owners_;
    do
      v472 = __ldaxr(v471);
    while (__stlxr(v472 - 1, v471));
    if (!v472)
    {
      ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
      std::__shared_weak_count::__release_weak(v470);
    }
  }
  v473 = Scalar;
  Scalar = 0;
  if (v473)
    (*((void (**)(std::__shared_weak_count_vtbl *))v473->~__shared_weak_count + 1))(v473);
  if (v806 < 0)
    operator delete(v805[0]);
  v474 = v960;
  std::string::basic_string[abi:ne180100]<0>(v799, "initial_c");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v799, 0, (uint64_t *)&Scalar);
  v801 = Scalar;
  if (Scalar)
  {
    v475 = (std::__shared_weak_count *)operator new();
    v476 = Scalar;
    v475->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v475->__shared_owners_ = 0;
    v475->__shared_weak_owners_ = 0;
    v475[1].__vftable = v476;
  }
  else
  {
    v475 = 0;
  }
  v802 = v475;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v797, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v474 + 3))(v474, &v801, 0, v797);
  if (v798 < 0)
    operator delete(v797[0]);
  v477 = v802;
  if (v802)
  {
    v478 = (unint64_t *)&v802->__shared_owners_;
    do
      v479 = __ldaxr(v478);
    while (__stlxr(v479 - 1, v478));
    if (!v479)
    {
      ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
      std::__shared_weak_count::__release_weak(v477);
    }
  }
  v480 = Scalar;
  Scalar = 0;
  if (v480)
    (*((void (**)(std::__shared_weak_count_vtbl *))v480->~__shared_weak_count + 1))(v480);
  if (v800 < 0)
    operator delete(v799[0]);
  v481 = v960;
  std::string::basic_string[abi:ne180100]<0>(v793, "initial_c");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v793, 0, (uint64_t *)&Scalar);
  v795 = Scalar;
  if (Scalar)
  {
    v482 = (std::__shared_weak_count *)operator new();
    v483 = Scalar;
    v482->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v482->__shared_owners_ = 0;
    v482->__shared_weak_owners_ = 0;
    v482[1].__vftable = v483;
  }
  else
  {
    v482 = 0;
  }
  v796 = v482;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v791, "H_dir");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v481 + 3))(v481, &v795, 1, v791);
  if (v792 < 0)
    operator delete(v791[0]);
  v484 = v796;
  if (v796)
  {
    v485 = (unint64_t *)&v796->__shared_owners_;
    do
      v486 = __ldaxr(v485);
    while (__stlxr(v486 - 1, v485));
    if (!v486)
    {
      ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
      std::__shared_weak_count::__release_weak(v484);
    }
  }
  v487 = Scalar;
  Scalar = 0;
  if (v487)
    (*((void (**)(std::__shared_weak_count_vtbl *))v487->~__shared_weak_count + 1))(v487);
  if (v794 < 0)
    operator delete(v793[0]);
  v488 = v960;
  std::string::basic_string[abi:ne180100]<0>(v787, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v787, 0, (uint64_t *)&Scalar);
  v789 = Scalar;
  if (Scalar)
  {
    v489 = (std::__shared_weak_count *)operator new();
    v490 = Scalar;
    v489->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v489->__shared_owners_ = 0;
    v489->__shared_weak_owners_ = 0;
    v489[1].__vftable = v490;
  }
  else
  {
    v489 = 0;
  }
  v790 = v489;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v785, "H_dim");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v488 + 3))(v488, &v789, 0, v785);
  if (v786 < 0)
    operator delete(v785[0]);
  v491 = v790;
  if (v790)
  {
    v492 = (unint64_t *)&v790->__shared_owners_;
    do
      v493 = __ldaxr(v492);
    while (__stlxr(v493 - 1, v492));
    if (!v493)
    {
      ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
      std::__shared_weak_count::__release_weak(v491);
    }
  }
  v494 = Scalar;
  Scalar = 0;
  if (v494)
    (*((void (**)(std::__shared_weak_count_vtbl *))v494->~__shared_weak_count + 1))(v494);
  if (v788 < 0)
    operator delete(v787[0]);
  v495 = v960;
  std::string::basic_string[abi:ne180100]<0>(v781, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v781, 0, (uint64_t *)&Scalar);
  v783 = Scalar;
  if (Scalar)
  {
    v496 = (std::__shared_weak_count *)operator new();
    v497 = Scalar;
    v496->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v496->__shared_owners_ = 0;
    v496->__shared_weak_owners_ = 0;
    v496[1].__vftable = v497;
  }
  else
  {
    v496 = 0;
  }
  v784 = v496;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v779, "I");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v495 + 3))(v495, &v783, 1, v779);
  if (v780 < 0)
    operator delete(v779[0]);
  v498 = v784;
  if (v784)
  {
    v499 = (unint64_t *)&v784->__shared_owners_;
    do
      v500 = __ldaxr(v499);
    while (__stlxr(v500 - 1, v499));
    if (!v500)
    {
      ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
      std::__shared_weak_count::__release_weak(v498);
    }
  }
  v501 = Scalar;
  Scalar = 0;
  if (v501)
    (*((void (**)(std::__shared_weak_count_vtbl *))v501->~__shared_weak_count + 1))(v501);
  if (v782 < 0)
    operator delete(v781[0]);
  v502 = v960;
  std::string::basic_string[abi:ne180100]<0>(v775, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v775, 0, (uint64_t *)&Scalar);
  v777 = Scalar;
  if (Scalar)
  {
    v503 = (std::__shared_weak_count *)operator new();
    v504 = Scalar;
    v503->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v503->__shared_owners_ = 0;
    v503->__shared_weak_owners_ = 0;
    v503[1].__vftable = v504;
  }
  else
  {
    v503 = 0;
  }
  v778 = v503;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v773, "H_dim");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v502 + 3))(v502, &v777, 0, v773);
  if (v774 < 0)
    operator delete(v773[0]);
  v505 = v778;
  if (v778)
  {
    v506 = (unint64_t *)&v778->__shared_owners_;
    do
      v507 = __ldaxr(v506);
    while (__stlxr(v507 - 1, v506));
    if (!v507)
    {
      ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
      std::__shared_weak_count::__release_weak(v505);
    }
  }
  v508 = Scalar;
  Scalar = 0;
  if (v508)
    (*((void (**)(std::__shared_weak_count_vtbl *))v508->~__shared_weak_count + 1))(v508);
  if (v776 < 0)
    operator delete(v775[0]);
  v509 = v960;
  std::string::basic_string[abi:ne180100]<0>(v769, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v769, 0, (uint64_t *)&Scalar);
  v771 = Scalar;
  if (Scalar)
  {
    v510 = (std::__shared_weak_count *)operator new();
    v511 = Scalar;
    v510->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v510->__shared_owners_ = 0;
    v510->__shared_weak_owners_ = 0;
    v510[1].__vftable = v511;
  }
  else
  {
    v510 = 0;
  }
  v772 = v510;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v767, "H");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v509 + 3))(v509, &v771, 1, v767);
  if (v768 < 0)
    operator delete(v767[0]);
  v512 = v772;
  if (v772)
  {
    v513 = (unint64_t *)&v772->__shared_owners_;
    do
      v514 = __ldaxr(v513);
    while (__stlxr(v514 - 1, v513));
    if (!v514)
    {
      ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
      std::__shared_weak_count::__release_weak(v512);
    }
  }
  v515 = Scalar;
  Scalar = 0;
  if (v515)
    (*((void (**)(std::__shared_weak_count_vtbl *))v515->~__shared_weak_count + 1))(v515);
  if (v770 < 0)
    operator delete(v769[0]);
  v516 = v960;
  std::string::basic_string[abi:ne180100]<0>(v763, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v763, 1, (uint64_t *)&Scalar);
  v765 = Scalar;
  if (Scalar)
  {
    v517 = (std::__shared_weak_count *)operator new();
    v518 = Scalar;
    v517->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v517->__shared_owners_ = 0;
    v517->__shared_weak_owners_ = 0;
    v517[1].__vftable = v518;
  }
  else
  {
    v517 = 0;
  }
  v766 = v517;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v761, "H_dim");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v516 + 3))(v516, &v765, 0, v761);
  if (v762 < 0)
    operator delete(v761[0]);
  v519 = v766;
  if (v766)
  {
    v520 = (unint64_t *)&v766->__shared_owners_;
    do
      v521 = __ldaxr(v520);
    while (__stlxr(v521 - 1, v520));
    if (!v521)
    {
      ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
      std::__shared_weak_count::__release_weak(v519);
    }
  }
  v522 = Scalar;
  Scalar = 0;
  if (v522)
    (*((void (**)(std::__shared_weak_count_vtbl *))v522->~__shared_weak_count + 1))(v522);
  if (v764 < 0)
    operator delete(v763[0]);
  v523 = v960;
  std::string::basic_string[abi:ne180100]<0>(v757, "peephole");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v757, 1, (uint64_t *)&Scalar);
  v759 = Scalar;
  if (Scalar)
  {
    v524 = (std::__shared_weak_count *)operator new();
    v525 = Scalar;
    v524->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v524->__shared_owners_ = 0;
    v524->__shared_weak_owners_ = 0;
    v524[1].__vftable = v525;
  }
  else
  {
    v524 = 0;
  }
  v760 = v524;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v755, "P_dim");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v523 + 3))(v523, &v759, 0, v755);
  if (v756 < 0)
    operator delete(v755[0]);
  v526 = v760;
  if (v760)
  {
    v527 = (unint64_t *)&v760->__shared_owners_;
    do
      v528 = __ldaxr(v527);
    while (__stlxr(v528 - 1, v527));
    if (!v528)
    {
      ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
      std::__shared_weak_count::__release_weak(v526);
    }
  }
  v529 = Scalar;
  Scalar = 0;
  if (v529)
    (*((void (**)(std::__shared_weak_count_vtbl *))v529->~__shared_weak_count + 1))(v529);
  if (v758 < 0)
    operator delete(v757[0]);
  v530 = v960;
  std::string::basic_string[abi:ne180100]<0>(v751, "weight_ih_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v751, 1, (uint64_t *)&Scalar);
  v753 = Scalar;
  if (Scalar)
  {
    v531 = (std::__shared_weak_count *)operator new();
    v532 = Scalar;
    v531->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v531->__shared_owners_ = 0;
    v531->__shared_weak_owners_ = 0;
    v531[1].__vftable = v532;
  }
  else
  {
    v531 = 0;
  }
  v754 = v531;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v749, "H_dim");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v530 + 3))(v530, &v753, 0, v749);
  if (v750 < 0)
    operator delete(v749[0]);
  v533 = v754;
  if (v754)
  {
    v534 = (unint64_t *)&v754->__shared_owners_;
    do
      v535 = __ldaxr(v534);
    while (__stlxr(v535 - 1, v534));
    if (!v535)
    {
      ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
      std::__shared_weak_count::__release_weak(v533);
    }
  }
  v536 = Scalar;
  Scalar = 0;
  if (v536)
    (*((void (**)(std::__shared_weak_count_vtbl *))v536->~__shared_weak_count + 1))(v536);
  if (v752 < 0)
    operator delete(v751[0]);
  v537 = v960;
  std::string::basic_string[abi:ne180100]<0>(v745, "weight_ih_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v745, 1, (uint64_t *)&Scalar);
  v747 = Scalar;
  if (Scalar)
  {
    v538 = (std::__shared_weak_count *)operator new();
    v539 = Scalar;
    v538->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v538->__shared_owners_ = 0;
    v538->__shared_weak_owners_ = 0;
    v538[1].__vftable = v539;
  }
  else
  {
    v538 = 0;
  }
  v748 = v538;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v743, "I");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v537 + 3))(v537, &v747, 1, v743);
  if (v744 < 0)
    operator delete(v743[0]);
  v540 = v748;
  if (v748)
  {
    v541 = (unint64_t *)&v748->__shared_owners_;
    do
      v542 = __ldaxr(v541);
    while (__stlxr(v542 - 1, v541));
    if (!v542)
    {
      ((void (*)(std::__shared_weak_count *))v540->__on_zero_shared)(v540);
      std::__shared_weak_count::__release_weak(v540);
    }
  }
  v543 = Scalar;
  Scalar = 0;
  if (v543)
    (*((void (**)(std::__shared_weak_count_vtbl *))v543->~__shared_weak_count + 1))(v543);
  if (v746 < 0)
    operator delete(v745[0]);
  v544 = v960;
  std::string::basic_string[abi:ne180100]<0>(v739, "weight_hh_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v739, 1, (uint64_t *)&Scalar);
  v741 = Scalar;
  if (Scalar)
  {
    v545 = (std::__shared_weak_count *)operator new();
    v546 = Scalar;
    v545->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v545->__shared_owners_ = 0;
    v545->__shared_weak_owners_ = 0;
    v545[1].__vftable = v546;
  }
  else
  {
    v545 = 0;
  }
  v742 = v545;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v737, "H_dim");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v544 + 3))(v544, &v741, 0, v737);
  if (v738 < 0)
    operator delete(v737[0]);
  v547 = v742;
  if (v742)
  {
    v548 = (unint64_t *)&v742->__shared_owners_;
    do
      v549 = __ldaxr(v548);
    while (__stlxr(v549 - 1, v548));
    if (!v549)
    {
      ((void (*)(std::__shared_weak_count *))v547->__on_zero_shared)(v547);
      std::__shared_weak_count::__release_weak(v547);
    }
  }
  v550 = Scalar;
  Scalar = 0;
  if (v550)
    (*((void (**)(std::__shared_weak_count_vtbl *))v550->~__shared_weak_count + 1))(v550);
  if (v740 < 0)
    operator delete(v739[0]);
  v551 = v960;
  std::string::basic_string[abi:ne180100]<0>(v733, "weight_hh_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v733, 1, (uint64_t *)&Scalar);
  v735 = Scalar;
  if (Scalar)
  {
    v552 = (std::__shared_weak_count *)operator new();
    v553 = Scalar;
    v552->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v552->__shared_owners_ = 0;
    v552->__shared_weak_owners_ = 0;
    v552[1].__vftable = v553;
  }
  else
  {
    v552 = 0;
  }
  v736 = v552;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v731, "H");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v551 + 3))(v551, &v735, 1, v731);
  if (v732 < 0)
    operator delete(v731[0]);
  v554 = v736;
  if (v736)
  {
    v555 = (unint64_t *)&v736->__shared_owners_;
    do
      v556 = __ldaxr(v555);
    while (__stlxr(v556 - 1, v555));
    if (!v556)
    {
      ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
      std::__shared_weak_count::__release_weak(v554);
    }
  }
  v557 = Scalar;
  Scalar = 0;
  if (v557)
    (*((void (**)(std::__shared_weak_count_vtbl *))v557->~__shared_weak_count + 1))(v557);
  if (v734 < 0)
    operator delete(v733[0]);
  v558 = v960;
  std::string::basic_string[abi:ne180100]<0>(v727, "bias_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v727, 1, (uint64_t *)&Scalar);
  v729 = Scalar;
  if (Scalar)
  {
    v559 = (std::__shared_weak_count *)operator new();
    v560 = Scalar;
    v559->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v559->__shared_owners_ = 0;
    v559->__shared_weak_owners_ = 0;
    v559[1].__vftable = v560;
  }
  else
  {
    v559 = 0;
  }
  v730 = v559;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v725, "H_dim");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v558 + 3))(v558, &v729, 0, v725);
  if (v726 < 0)
    operator delete(v725[0]);
  v561 = v730;
  if (v730)
  {
    v562 = (unint64_t *)&v730->__shared_owners_;
    do
      v563 = __ldaxr(v562);
    while (__stlxr(v563 - 1, v562));
    if (!v563)
    {
      ((void (*)(std::__shared_weak_count *))v561->__on_zero_shared)(v561);
      std::__shared_weak_count::__release_weak(v561);
    }
  }
  v564 = Scalar;
  Scalar = 0;
  if (v564)
    (*((void (**)(std::__shared_weak_count_vtbl *))v564->~__shared_weak_count + 1))(v564);
  if (v728 < 0)
    operator delete(v727[0]);
  v565 = v960;
  std::string::basic_string[abi:ne180100]<0>(v721, "peephole_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v721, 1, (uint64_t *)&Scalar);
  v723 = Scalar;
  if (Scalar)
  {
    v566 = (std::__shared_weak_count *)operator new();
    v567 = Scalar;
    v566->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v566->__shared_owners_ = 0;
    v566->__shared_weak_owners_ = 0;
    v566[1].__vftable = v567;
  }
  else
  {
    v566 = 0;
  }
  v724 = v566;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v719, "P_dim");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v565 + 3))(v565, &v723, 0, v719);
  if (v720 < 0)
    operator delete(v719[0]);
  v568 = v724;
  if (v724)
  {
    v569 = (unint64_t *)&v724->__shared_owners_;
    do
      v570 = __ldaxr(v569);
    while (__stlxr(v570 - 1, v569));
    if (!v570)
    {
      ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
      std::__shared_weak_count::__release_weak(v568);
    }
  }
  v571 = Scalar;
  Scalar = 0;
  if (v571)
    (*((void (**)(std::__shared_weak_count_vtbl *))v571->~__shared_weak_count + 1))(v571);
  if (v722 < 0)
    operator delete(v721[0]);
  v572 = v960;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v717 = Scalar;
  if (Scalar)
  {
    v573 = (std::__shared_weak_count *)operator new();
    v574 = Scalar;
    v573->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v573->__shared_owners_ = 0;
    v573->__shared_weak_owners_ = 0;
    v573[1].__vftable = v574;
  }
  else
  {
    v573 = 0;
  }
  v718 = v573;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v715, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v572 + 3))(v572, &v717, 1, v715);
  if (v716 < 0)
    operator delete(v715[0]);
  v575 = v718;
  if (v718)
  {
    v576 = (unint64_t *)&v718->__shared_owners_;
    do
      v577 = __ldaxr(v576);
    while (__stlxr(v577 - 1, v576));
    if (!v577)
    {
      ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
      std::__shared_weak_count::__release_weak(v575);
    }
  }
  v578 = Scalar;
  Scalar = 0;
  if (v578)
    (*((void (**)(std::__shared_weak_count_vtbl *))v578->~__shared_weak_count + 1))(v578);
  v579 = v960;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v713 = Scalar;
  if (Scalar)
  {
    v580 = (std::__shared_weak_count *)operator new();
    v581 = Scalar;
    v580->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v580->__shared_owners_ = 0;
    v580->__shared_weak_owners_ = 0;
    v580[1].__vftable = v581;
  }
  else
  {
    v580 = 0;
  }
  v714 = v580;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v711, "H_dir");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v579 + 3))(v579, &v713, 2, v711);
  if (v712 < 0)
    operator delete(v711[0]);
  v582 = v714;
  if (v714)
  {
    v583 = (unint64_t *)&v714->__shared_owners_;
    do
      v584 = __ldaxr(v583);
    while (__stlxr(v584 - 1, v583));
    if (!v584)
    {
      ((void (*)(std::__shared_weak_count *))v582->__on_zero_shared)(v582);
      std::__shared_weak_count::__release_weak(v582);
    }
  }
  v585 = Scalar;
  Scalar = 0;
  if (v585)
    (*((void (**)(std::__shared_weak_count_vtbl *))v585->~__shared_weak_count + 1))(v585);
  v586 = v960;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v709 = Scalar;
  if (Scalar)
  {
    v587 = (std::__shared_weak_count *)operator new();
    v588 = Scalar;
    v587->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v587->__shared_owners_ = 0;
    v587->__shared_weak_owners_ = 0;
    v587[1].__vftable = v588;
  }
  else
  {
    v587 = 0;
  }
  v710 = v587;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v707, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v586 + 3))(v586, &v709, 0, v707);
  if (v708 < 0)
    operator delete(v707[0]);
  v589 = v710;
  if (v710)
  {
    v590 = (unint64_t *)&v710->__shared_owners_;
    do
      v591 = __ldaxr(v590);
    while (__stlxr(v591 - 1, v590));
    if (!v591)
    {
      ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
      std::__shared_weak_count::__release_weak(v589);
    }
  }
  v592 = Scalar;
  Scalar = 0;
  if (v592)
    (*((void (**)(std::__shared_weak_count_vtbl *))v592->~__shared_weak_count + 1))(v592);
  v593 = v960;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v705 = Scalar;
  if (Scalar)
  {
    v594 = (std::__shared_weak_count *)operator new();
    v595 = Scalar;
    v594->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v594->__shared_owners_ = 0;
    v594->__shared_weak_owners_ = 0;
    v594[1].__vftable = v595;
  }
  else
  {
    v594 = 0;
  }
  v706 = v594;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v703, "H_dir");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v593 + 3))(v593, &v705, 1, v703);
  if (v704 < 0)
    operator delete(v703[0]);
  v596 = v706;
  if (v706)
  {
    v597 = (unint64_t *)&v706->__shared_owners_;
    do
      v598 = __ldaxr(v597);
    while (__stlxr(v598 - 1, v597));
    if (!v598)
    {
      ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
      std::__shared_weak_count::__release_weak(v596);
    }
  }
  v599 = Scalar;
  Scalar = 0;
  if (v599)
    (*((void (**)(std::__shared_weak_count_vtbl *))v599->~__shared_weak_count + 1))(v599);
  v600 = v960;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &Scalar);
  v701 = Scalar;
  if (Scalar)
  {
    v601 = (std::__shared_weak_count *)operator new();
    v602 = Scalar;
    v601->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v601->__shared_owners_ = 0;
    v601->__shared_weak_owners_ = 0;
    v601[1].__vftable = v602;
  }
  else
  {
    v601 = 0;
  }
  v702 = v601;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v699, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v600 + 3))(v600, &v701, 0, v699);
  if (v700 < 0)
    operator delete(v699[0]);
  v603 = v702;
  if (v702)
  {
    v604 = (unint64_t *)&v702->__shared_owners_;
    do
      v605 = __ldaxr(v604);
    while (__stlxr(v605 - 1, v604));
    if (!v605)
    {
      ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
      std::__shared_weak_count::__release_weak(v603);
    }
  }
  v606 = Scalar;
  Scalar = 0;
  if (v606)
    (*((void (**)(std::__shared_weak_count_vtbl *))v606->~__shared_weak_count + 1))(v606);
  v607 = v960;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &Scalar);
  v697 = Scalar;
  if (Scalar)
  {
    v608 = (std::__shared_weak_count *)operator new();
    v609 = Scalar;
    v608->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v608->__shared_owners_ = 0;
    v608->__shared_weak_owners_ = 0;
    v608[1].__vftable = v609;
  }
  else
  {
    v608 = 0;
  }
  v698 = v608;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v695, "H_dir");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v607 + 3))(v607, &v697, 1, v695);
  if (v696 < 0)
    operator delete(v695[0]);
  v610 = v698;
  if (v698)
  {
    v611 = (unint64_t *)&v698->__shared_owners_;
    do
      v612 = __ldaxr(v611);
    while (__stlxr(v612 - 1, v611));
    if (!v612)
    {
      ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
      std::__shared_weak_count::__release_weak(v610);
    }
  }
  v613 = Scalar;
  Scalar = 0;
  if (v613)
    (*((void (**)(std::__shared_weak_count_vtbl *))v613->~__shared_weak_count + 1))(v613);
  v614 = *a3;
  v693 = v960;
  if (v960)
  {
    v615 = (std::__shared_weak_count *)operator new();
    v616 = v960;
    v615->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v615->__shared_owners_ = 0;
    v615->__shared_weak_owners_ = 0;
    v615[1].__vftable = (std::__shared_weak_count_vtbl *)v616;
  }
  else
  {
    v615 = 0;
  }
  v694 = v615;
  v960 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v614 + 56))(v614, &v693);
  v617 = v694;
  if (v694)
  {
    v618 = (unint64_t *)&v694->__shared_owners_;
    do
      v619 = __ldaxr(v618);
    while (__stlxr(v619 - 1, v618));
    if (!v619)
    {
      ((void (*)(std::__shared_weak_count *))v617->__on_zero_shared)(v617);
      std::__shared_weak_count::__release_weak(v617);
    }
  }
  v620 = v960;
  v960 = 0;
  if (v620)
    (*((void (**)(void **))*v620 + 1))(v620);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v621 = __p;
  std::string::basic_string[abi:ne180100]<0>(v689, "direction");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v689, 0, (uint64_t *)&v928);
  v691 = v928;
  if (v928)
  {
    v622 = (std::__shared_weak_count *)operator new();
    v623 = (std::__shared_weak_count_vtbl *)v928;
    v622->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v622->__shared_owners_ = 0;
    v622->__shared_weak_owners_ = 0;
    v622[1].__vftable = v623;
  }
  else
  {
    v622 = 0;
  }
  v692 = v622;
  v928 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v960, "bidirectional");
  std::string::basic_string[abi:ne180100]<0>(&v963, "forward");
  std::string::basic_string[abi:ne180100]<0>(v965, "reverse");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v960, 3);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v621 + 24))(v621, &v691, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v965[i + 2]) < 0)
      operator delete((void *)v965[i]);
  }
  v625 = v692;
  if (v692)
  {
    v626 = (unint64_t *)&v692->__shared_owners_;
    do
      v627 = __ldaxr(v626);
    while (__stlxr(v627 - 1, v626));
    if (!v627)
    {
      ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
      std::__shared_weak_count::__release_weak(v625);
    }
  }
  v628 = v928;
  v928 = 0;
  if (v628)
    (*(void (**)(void *))(*(_QWORD *)v628 + 8))(v628);
  if (v690 < 0)
    operator delete(v689[0]);
  v629 = __p;
  std::string::basic_string[abi:ne180100]<0>(v685, "recurrent_activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v685, 0, (uint64_t *)&v928);
  v687 = v928;
  if (v928)
  {
    v630 = (std::__shared_weak_count *)operator new();
    v631 = (std::__shared_weak_count_vtbl *)v928;
    v630->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v630->__shared_owners_ = 0;
    v630->__shared_weak_owners_ = 0;
    v630[1].__vftable = v631;
  }
  else
  {
    v630 = 0;
  }
  v688 = v630;
  v928 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v960, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v963, "linear");
  std::string::basic_string[abi:ne180100]<0>(v965, "relu");
  std::string::basic_string[abi:ne180100]<0>(v966, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v967, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v968, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v960, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v629 + 24))(v629, &v687, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v968[j + 2]) < 0)
      operator delete((void *)v968[j]);
  }
  v633 = v688;
  if (v688)
  {
    v634 = (unint64_t *)&v688->__shared_owners_;
    do
      v635 = __ldaxr(v634);
    while (__stlxr(v635 - 1, v634));
    if (!v635)
    {
      ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
      std::__shared_weak_count::__release_weak(v633);
    }
  }
  v636 = v928;
  v928 = 0;
  if (v636)
    (*(void (**)(void *))(*(_QWORD *)v636 + 8))(v636);
  if (v686 < 0)
    operator delete(v685[0]);
  v637 = __p;
  std::string::basic_string[abi:ne180100]<0>(v681, "cell_activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v681, 0, (uint64_t *)&v928);
  v683 = v928;
  if (v928)
  {
    v638 = (std::__shared_weak_count *)operator new();
    v639 = (std::__shared_weak_count_vtbl *)v928;
    v638->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v638->__shared_owners_ = 0;
    v638->__shared_weak_owners_ = 0;
    v638[1].__vftable = v639;
  }
  else
  {
    v638 = 0;
  }
  v684 = v638;
  v928 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v960, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v963, "linear");
  std::string::basic_string[abi:ne180100]<0>(v965, "relu");
  std::string::basic_string[abi:ne180100]<0>(v966, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v967, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v968, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v960, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v637 + 24))(v637, &v683, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -18; k -= 3)
  {
    if (SHIBYTE(v968[k + 2]) < 0)
      operator delete((void *)v968[k]);
  }
  v641 = v684;
  if (v684)
  {
    v642 = (unint64_t *)&v684->__shared_owners_;
    do
      v643 = __ldaxr(v642);
    while (__stlxr(v643 - 1, v642));
    if (!v643)
    {
      ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
      std::__shared_weak_count::__release_weak(v641);
    }
  }
  v644 = v928;
  v928 = 0;
  if (v644)
    (*(void (**)(void *))(*(_QWORD *)v644 + 8))(v644);
  if (v682 < 0)
    operator delete(v681[0]);
  v645 = __p;
  std::string::basic_string[abi:ne180100]<0>(v677, "activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v677, 0, (uint64_t *)&v928);
  v679 = v928;
  if (v928)
  {
    v646 = (std::__shared_weak_count *)operator new();
    v647 = (std::__shared_weak_count_vtbl *)v928;
    v646->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v646->__shared_owners_ = 0;
    v646->__shared_weak_owners_ = 0;
    v646[1].__vftable = v647;
  }
  else
  {
    v646 = 0;
  }
  v680 = v646;
  v928 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v960, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v963, "linear");
  std::string::basic_string[abi:ne180100]<0>(v965, "relu");
  std::string::basic_string[abi:ne180100]<0>(v966, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v967, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v968, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v960, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v645 + 24))(v645, &v679, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (m = 0; m != -18; m -= 3)
  {
    if (SHIBYTE(v968[m + 2]) < 0)
      operator delete((void *)v968[m]);
  }
  v649 = v680;
  if (v680)
  {
    v650 = (unint64_t *)&v680->__shared_owners_;
    do
      v651 = __ldaxr(v650);
    while (__stlxr(v651 - 1, v650));
    if (!v651)
    {
      ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
      std::__shared_weak_count::__release_weak(v649);
    }
  }
  v652 = v928;
  v928 = 0;
  if (v652)
    (*(void (**)(void *))(*(_QWORD *)v652 + 8))(v652);
  if (v678 < 0)
    operator delete(v677[0]);
  v653 = __p;
  std::string::basic_string[abi:ne180100]<0>(v673, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v673, 1, (uint64_t *)&v928);
  v675 = v928;
  if (v928)
  {
    v654 = (std::__shared_weak_count *)operator new();
    v655 = (std::__shared_weak_count_vtbl *)v928;
    v654->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v654->__shared_owners_ = 0;
    v654->__shared_weak_owners_ = 0;
    v654[1].__vftable = v655;
  }
  else
  {
    v654 = 0;
  }
  v676 = v654;
  v928 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v960, "bf16");
  std::string::basic_string[abi:ne180100]<0>(&v963, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v965, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v966, "int32");
  std::string::basic_string[abi:ne180100]<0>(v967, "int8");
  std::string::basic_string[abi:ne180100]<0>(v968, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v960, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v653 + 24))(v653, &v675, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (n = 0; n != -18; n -= 3)
  {
    if (SHIBYTE(v968[n + 2]) < 0)
      operator delete((void *)v968[n]);
  }
  v657 = v676;
  if (v676)
  {
    v658 = (unint64_t *)&v676->__shared_owners_;
    do
      v659 = __ldaxr(v658);
    while (__stlxr(v659 - 1, v658));
    if (!v659)
    {
      ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
      std::__shared_weak_count::__release_weak(v657);
    }
  }
  v660 = v928;
  v928 = 0;
  if (v660)
    (*(void (**)(void *))(*(_QWORD *)v660 + 8))(v660);
  if (v674 < 0)
    operator delete(v673[0]);
  v661 = *a3;
  v671 = __p;
  if (__p)
  {
    v662 = (std::__shared_weak_count *)operator new();
    v663 = (std::__shared_weak_count_vtbl *)__p;
    v662->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v662->__shared_owners_ = 0;
    v662->__shared_weak_owners_ = 0;
    v662[1].__vftable = v663;
  }
  else
  {
    v662 = 0;
  }
  v672 = v662;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v661 + 56))(v661, &v671);
  v664 = v672;
  if (v672)
  {
    v665 = (unint64_t *)&v672->__shared_owners_;
    do
      v666 = __ldaxr(v665);
    while (__stlxr(v666 - 1, v665));
    if (!v666)
    {
      ((void (*)(std::__shared_weak_count *))v664->__on_zero_shared)(v664);
      std::__shared_weak_count::__release_weak(v664);
    }
  }
  v667 = __p;
  __p = 0;
  if (v667)
    (*(void (**)(void *))(*(_QWORD *)v667 + 8))(v667);
  if (v955)
  {
    v668 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v955);
    MEMORY[0x1E0C023A0](v668, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v935, 0);
  result = (uint64_t)v959;
  if (v959)
  {
    v670 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v959);
    return MEMORY[0x1E0C023A0](v670, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09F8044(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0xBE8];
  STACK[0xBE8] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0xC00], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0xAE0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0xC28], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::RNN::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count_vtbl *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  unsigned __int8 *v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  unsigned __int8 *v80;
  void **v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  unsigned __int8 *v86;
  void **v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  unsigned __int8 *v92;
  void **v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  char **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t *v123;
  char *v124;
  char *v125;
  char *v126;
  __int128 v127;
  void **v128;
  char *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  char **v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t *v156;
  char *v157;
  char *v158;
  char *v159;
  __int128 v160;
  void **v161;
  char *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  char **v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  _OWORD *v181;
  unsigned __int8 *v182;
  void **v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count *v190;
  unint64_t *p_shared_owners;
  unint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  void **v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count_vtbl *v202;
  void **v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count_vtbl *v209;
  void **v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count_vtbl *v216;
  void **v217;
  std::__shared_weak_count *v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count_vtbl *v223;
  void **v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count_vtbl *v230;
  void **v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count_vtbl *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count_vtbl *v237;
  void **v238;
  std::__shared_weak_count *v239;
  std::__shared_weak_count_vtbl *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count_vtbl *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  void **v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  void **v251;
  void **v252;
  std::__shared_weak_count *v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count_vtbl *v258;
  void **v259;
  std::__shared_weak_count *v260;
  std::__shared_weak_count_vtbl *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count_vtbl *v265;
  void **v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count_vtbl *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count_vtbl *v272;
  void **v273;
  std::__shared_weak_count *v274;
  std::__shared_weak_count_vtbl *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count_vtbl *v279;
  void **v280;
  std::__shared_weak_count *v281;
  std::__shared_weak_count_vtbl *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count_vtbl *v286;
  void **v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count_vtbl *v293;
  void **v294;
  std::__shared_weak_count *v295;
  std::__shared_weak_count_vtbl *v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count_vtbl *v300;
  void **v301;
  std::__shared_weak_count *v302;
  std::__shared_weak_count_vtbl *v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count_vtbl *v307;
  void **v308;
  std::__shared_weak_count *v309;
  std::__shared_weak_count_vtbl *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count_vtbl *v314;
  void **v315;
  std::__shared_weak_count *v316;
  std::__shared_weak_count_vtbl *v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count_vtbl *v321;
  void **v322;
  std::__shared_weak_count *v323;
  std::__shared_weak_count_vtbl *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count_vtbl *v328;
  void **v329;
  std::__shared_weak_count *v330;
  std::__shared_weak_count_vtbl *v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count_vtbl *v335;
  void **v336;
  std::__shared_weak_count *v337;
  std::__shared_weak_count_vtbl *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count_vtbl *v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  void **v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  void **v349;
  void *v350;
  std::__shared_weak_count *v351;
  std::__shared_weak_count_vtbl *v352;
  uint64_t i;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  void *v357;
  void *v358;
  std::__shared_weak_count *v359;
  std::__shared_weak_count_vtbl *v360;
  uint64_t j;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  void *v365;
  void *v366;
  std::__shared_weak_count *v367;
  std::__shared_weak_count_vtbl *v368;
  uint64_t k;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  void *v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  std::__shared_weak_count_vtbl *v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  void *v380;
  uint64_t v381;
  uint64_t result;
  uint64_t v383;
  void *v384;
  std::__shared_weak_count *v385;
  void *v386[2];
  char v387;
  void *v388;
  std::__shared_weak_count *v389;
  void *v390[2];
  char v391;
  void *v392;
  std::__shared_weak_count *v393;
  void *v394[2];
  char v395;
  void *v396;
  std::__shared_weak_count *v397;
  void **v398;
  std::__shared_weak_count *v399;
  void *v400[2];
  char v401;
  std::__shared_weak_count_vtbl *v402;
  std::__shared_weak_count *v403;
  void *v404[2];
  char v405;
  std::__shared_weak_count_vtbl *v406;
  std::__shared_weak_count *v407;
  void *v408[2];
  char v409;
  std::__shared_weak_count_vtbl *v410;
  std::__shared_weak_count *v411;
  void *v412[2];
  char v413;
  std::__shared_weak_count_vtbl *v414;
  std::__shared_weak_count *v415;
  void *v416[2];
  char v417;
  void *v418[2];
  char v419;
  std::__shared_weak_count_vtbl *v420;
  std::__shared_weak_count *v421;
  void *v422[2];
  char v423;
  void *v424[2];
  char v425;
  std::__shared_weak_count_vtbl *v426;
  std::__shared_weak_count *v427;
  void *v428[2];
  char v429;
  void *v430[2];
  char v431;
  std::__shared_weak_count_vtbl *v432;
  std::__shared_weak_count *v433;
  void *v434[2];
  char v435;
  void *v436[2];
  char v437;
  std::__shared_weak_count_vtbl *v438;
  std::__shared_weak_count *v439;
  void *v440[2];
  char v441;
  void *v442[2];
  char v443;
  std::__shared_weak_count_vtbl *v444;
  std::__shared_weak_count *v445;
  void *v446[2];
  char v447;
  void *v448[2];
  char v449;
  std::__shared_weak_count_vtbl *v450;
  std::__shared_weak_count *v451;
  void *v452[2];
  char v453;
  void *v454[2];
  char v455;
  std::__shared_weak_count_vtbl *v456;
  std::__shared_weak_count *v457;
  void *v458[2];
  char v459;
  void *v460[2];
  char v461;
  std::__shared_weak_count_vtbl *v462;
  std::__shared_weak_count *v463;
  void *v464[2];
  char v465;
  void *v466[2];
  char v467;
  std::__shared_weak_count_vtbl *v468;
  std::__shared_weak_count *v469;
  void **v470;
  std::__shared_weak_count *v471;
  void *v472[2];
  char v473;
  std::__shared_weak_count_vtbl *v474;
  std::__shared_weak_count *v475;
  void *v476[2];
  char v477;
  std::__shared_weak_count_vtbl *v478;
  std::__shared_weak_count *v479;
  void *v480[2];
  char v481;
  void *v482[2];
  char v483;
  std::__shared_weak_count_vtbl *v484;
  std::__shared_weak_count *v485;
  void *v486[2];
  char v487;
  void *v488[2];
  char v489;
  std::__shared_weak_count_vtbl *v490;
  std::__shared_weak_count *v491;
  void *v492[2];
  char v493;
  void *v494[2];
  char v495;
  std::__shared_weak_count_vtbl *v496;
  std::__shared_weak_count *v497;
  void *v498[2];
  char v499;
  void *v500[2];
  char v501;
  std::__shared_weak_count_vtbl *v502;
  std::__shared_weak_count *v503;
  void *v504[2];
  char v505;
  void *v506[2];
  char v507;
  std::__shared_weak_count_vtbl *v508;
  std::__shared_weak_count *v509;
  void *v510;
  std::__shared_weak_count *v511;
  __n128 v512;
  __int128 v513;
  __int128 v514;
  void *v515[2];
  uint64_t v516;
  __n128 v517;
  void *v518;
  void *v519;
  _QWORD *v520;
  __n128 v521;
  uint64_t v522;
  uint64_t v523;
  _QWORD *v524;
  char **v525;
  __n128 v526;
  __n128 v527;
  __n128 v528;
  __n128 v529;
  __n128 v530;
  __n128 v531;
  __n128 v532;
  void *__p;
  void *v534;
  _QWORD *v535;
  void *v536;
  void *v537;
  _QWORD *v538;
  __n128 v539;
  _QWORD *v540;
  void **v541;
  uint64_t v542;
  uint64_t v543;
  char *v544;
  char **v545;
  char v546;
  _QWORD v547[3];
  _QWORD v548[3];
  _QWORD v549[3];
  _QWORD v550[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t p_on_zero_shared;
  _QWORD v554[3];
  _QWORD *v555;
  _BYTE v556[24];
  _BYTE *v557;
  _QWORD v558[3];
  _QWORD *v559;
  uint64_t v560;

  v560 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v540 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  p_on_zero_shared = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v541 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v538 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v536 = v14;
  v537 = v14 + 3;
  v542 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v536);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v535 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v534 = v18 + 3;
  v543 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v541, 3, &v539);
  MIL::IRParameter::Make(&v539, (uint64_t *)&v518);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v518);
  v19 = v518;
  v518 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v539.n128_u64[1];
  if (v539.n128_u64[1])
  {
    v21 = (unint64_t *)(v539.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v534 = __p;
    operator delete(__p);
  }
  if (v536)
  {
    v537 = v536;
    operator delete(v536);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v540;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v26->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v26->__on_zero_shared;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v26->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  Scalar = v26;
  v541 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(0x10uLL);
  v538 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v536 = v29;
  v537 = v29 + 2;
  v542 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v536);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x10uLL);
  v535 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  __p = v32;
  v534 = v32 + 2;
  v543 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v541, 3, &v532);
  MIL::IRParameter::Make(&v532, (uint64_t *)&v518);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v23, "initial_h", (uint64_t *)&v518);
  v33 = v518;
  v518 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v532.n128_u64[1];
  if (v532.n128_u64[1])
  {
    v35 = (unint64_t *)(v532.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (__p)
  {
    v534 = __p;
    operator delete(__p);
  }
  if (v536)
  {
    v537 = v536;
    operator delete(v536);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v37 = v540;
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v40->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v40->__on_zero_shared;
  v40->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
  v40->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  Scalar = v40;
  v541 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x10uLL);
  v538 = v43 + 2;
  *v43 = v41;
  v43[1] = v42;
  v536 = v43;
  v537 = v43 + 2;
  v542 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v536);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = operator new(0x10uLL);
  v535 = v46 + 2;
  *v46 = v44;
  v46[1] = v45;
  __p = v46;
  v534 = v46 + 2;
  v543 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v541, 3, &v531);
  MIL::IRParameter::Make(&v531, (uint64_t *)&v518);
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v37, "weight_ih", (uint64_t *)&v518);
  v48 = v518;
  v518 = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v531.n128_u64[1];
  if (v531.n128_u64[1])
  {
    v50 = (unint64_t *)(v531.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (__p)
  {
    v534 = __p;
    operator delete(__p);
  }
  if (v536)
  {
    v537 = v536;
    operator delete(v536);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v540;
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v55->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v55->__on_zero_shared;
  v55->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v53;
  v55->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v54;
  Scalar = v55;
  v541 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v56 = MIL::IRUnknownDimension::Make(a1, 0);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(0x10uLL);
  v538 = v58 + 2;
  *v58 = v56;
  v58[1] = v57;
  v536 = v58;
  v537 = v58 + 2;
  v542 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v536);
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = operator new(0x10uLL);
  v535 = v61 + 2;
  *v61 = v59;
  v61[1] = v60;
  __p = v61;
  v534 = v61 + 2;
  v543 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v541, 3, &v530);
  MIL::IRParameter::Make(&v530, (uint64_t *)&v518);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v52, "weight_hh", (uint64_t *)&v518);
  v63 = v518;
  v518 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v530.n128_u64[1];
  if (v530.n128_u64[1])
  {
    v65 = (unint64_t *)(v530.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (__p)
  {
    v534 = __p;
    operator delete(__p);
  }
  if (v536)
  {
    v537 = v536;
    operator delete(v536);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  v67 = v540;
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v69 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v69;
  v69->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v68;
  p_get_deleter = (uint64_t)&v69->~__shared_weak_count_0;
  p_on_zero_shared = (uint64_t)&v69->~__shared_weak_count_0;
  v541 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = operator new(8uLL);
  v536 = v71;
  *v71 = v70;
  v538 = v71 + 1;
  v537 = v71 + 1;
  v542 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v536);
  v72 = MIL::IRUnknownDimension::Make(a1, 0);
  v73 = operator new(8uLL);
  __p = v73;
  *v73 = v72;
  v535 = v73 + 1;
  v534 = v73 + 1;
  v543 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v541, 3, &v529);
  MIL::IRParameter::Make(&v529, (uint64_t *)&v518);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v67, "bias", (uint64_t *)&v518);
  v75 = v518;
  v518 = 0;
  if (v75)
    (*(void (**)(void *))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v529.n128_u64[1];
  if (v529.n128_u64[1])
  {
    v77 = (unint64_t *)(v529.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (__p)
  {
    v534 = __p;
    operator delete(__p);
  }
  if (v536)
  {
    v537 = v536;
    operator delete(v536);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = v540;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v528);
  MIL::IRParameter::Make(&v528, (uint64_t *)&v541);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v79, "direction", (uint64_t *)&v541);
  v81 = v541;
  v541 = 0;
  if (v81)
    (*((void (**)(void **))*v81 + 1))(v81);
  v82 = (std::__shared_weak_count *)v528.n128_u64[1];
  if (v528.n128_u64[1])
  {
    v83 = (unint64_t *)(v528.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 32))(*((_QWORD *)v80 + 5), 1);
  v85 = v540;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v527);
  MIL::IRParameter::Make(&v527, (uint64_t *)&v541);
  v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v85, "output_sequence", (uint64_t *)&v541);
  v87 = v541;
  v541 = 0;
  if (v87)
    (*((void (**)(void **))*v87 + 1))(v87);
  v88 = (std::__shared_weak_count *)v527.n128_u64[1];
  if (v527.n128_u64[1])
  {
    v89 = (unint64_t *)(v527.n128_u64[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v86 + 5) + 32))(*((_QWORD *)v86 + 5), 1);
  v91 = v540;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v526);
  MIL::IRParameter::Make(&v526, (uint64_t *)&v541);
  v92 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v91, "activation", (uint64_t *)&v541);
  v93 = v541;
  v541 = 0;
  if (v93)
    (*((void (**)(void **))*v93 + 1))(v93);
  v94 = (std::__shared_weak_count *)v526.n128_u64[1];
  if (v526.n128_u64[1])
  {
    v95 = (unint64_t *)(v526.n128_u64[1] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v92 + 5) + 32))(*((_QWORD *)v92 + 5), 1);
  v525 = 0;
  v97 = operator new();
  *(_QWORD *)v97 = 0;
  *(_QWORD *)(v97 + 8) = 0;
  *(_QWORD *)(v97 + 16) = 0;
  v541 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v525, (void **)v97);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v541, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v525, 2uLL);
  v98 = v525;
  v99 = MIL::IRUnknownDimension::Make(a1, 0);
  v100 = MIL::IRUnknownDimension::Make(a1, 0);
  v101 = MIL::IRUnknownDimension::Make(a1, 0);
  v102 = operator new(0x18uLL);
  v538 = v102 + 3;
  *v102 = v99;
  v102[1] = v100;
  v102[2] = v101;
  v536 = v102;
  v537 = v102 + 3;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v536);
  v103 = MIL::IRUnknownDimension::Make(a1, 0);
  v104 = MIL::IRUnknownDimension::Make(a1, 0);
  v105 = MIL::IRUnknownDimension::Make(a1, 0);
  v106 = operator new(0x18uLL);
  v535 = v106 + 3;
  *v106 = v103;
  v106[1] = v104;
  v106[2] = v105;
  __p = v106;
  v534 = v106 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v107 = MIL::IRUnknownDimension::Make(a1, 0);
  v108 = MIL::IRUnknownDimension::Make(a1, 0);
  v109 = MIL::IRUnknownDimension::Make(a1, 0);
  v110 = operator new(0x18uLL);
  v520 = v110 + 3;
  *v110 = v107;
  v110[1] = v108;
  v110[2] = v109;
  v518 = v110;
  v519 = v110 + 3;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v518);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v521);
  MIL::IRParameter::Make(&v521, &v522);
  v111 = v522;
  v523 = v522;
  if (v522)
  {
    v112 = (_QWORD *)operator new();
    v113 = v522;
    *v112 = &unk_1EA99F888;
    v112[1] = 0;
    v112[2] = 0;
    v112[3] = v113;
  }
  else
  {
    v112 = 0;
  }
  v524 = v112;
  v522 = 0;
  v114 = v98[2];
  v115 = v98[1];
  if (v115 >= v114)
  {
    v117 = (v115 - *v98) >> 4;
    v118 = v117 + 1;
    if ((unint64_t)(v117 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v119 = v114 - *v98;
    if (v119 >> 3 > v118)
      v118 = v119 >> 3;
    if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0)
      v120 = 0xFFFFFFFFFFFFFFFLL;
    else
      v120 = v118;
    v545 = v98 + 2;
    v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v98 + 2), v120);
    v123 = (uint64_t *)&v121[16 * v117];
    *v123 = v111;
    v123[1] = (uint64_t)v112;
    v524 = 0;
    v523 = 0;
    v125 = *v98;
    v124 = v98[1];
    if (v124 == *v98)
    {
      v128 = (void **)v98[1];
      v126 = &v121[16 * v117];
    }
    else
    {
      v126 = &v121[16 * v117];
      do
      {
        v127 = *((_OWORD *)v124 - 1);
        v124 -= 16;
        *((_OWORD *)v126 - 1) = v127;
        v126 -= 16;
        *(_QWORD *)v124 = 0;
        *((_QWORD *)v124 + 1) = 0;
      }
      while (v124 != v125);
      v128 = (void **)*v98;
      v124 = v98[1];
    }
    v116 = (char *)(v123 + 2);
    *v98 = v126;
    v542 = (uint64_t)v128;
    v98[1] = (char *)(v123 + 2);
    v543 = (uint64_t)v124;
    v129 = v98[2];
    v98[2] = &v121[16 * v122];
    v544 = v129;
    v541 = v128;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v541);
  }
  else
  {
    *(_QWORD *)v115 = v111;
    *((_QWORD *)v115 + 1) = v112;
    v116 = v115 + 16;
    v524 = 0;
    v523 = 0;
  }
  v98[1] = v116;
  v130 = v522;
  v522 = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v131 = (std::__shared_weak_count *)v521.n128_u64[1];
  if (v521.n128_u64[1])
  {
    v132 = (unint64_t *)(v521.n128_u64[1] + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  if (v518)
  {
    v519 = v518;
    operator delete(v518);
  }
  if (__p)
  {
    v534 = __p;
    operator delete(__p);
  }
  if (v536)
  {
    v537 = v536;
    operator delete(v536);
  }
  v134 = v525;
  v135 = MIL::IRUnknownDimension::Make(a1, 0);
  v136 = MIL::IRUnknownDimension::Make(a1, 0);
  v137 = operator new(0x10uLL);
  v538 = v137 + 2;
  *v137 = v135;
  v137[1] = v136;
  v536 = v137;
  v537 = v137 + 2;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v536);
  v138 = MIL::IRUnknownDimension::Make(a1, 0);
  v139 = MIL::IRUnknownDimension::Make(a1, 0);
  v140 = operator new(0x10uLL);
  v535 = v140 + 2;
  *v140 = v138;
  v140[1] = v139;
  __p = v140;
  v534 = v140 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v141 = MIL::IRUnknownDimension::Make(a1, 0);
  v142 = MIL::IRUnknownDimension::Make(a1, 0);
  v143 = operator new(0x10uLL);
  v520 = v143 + 2;
  *v143 = v141;
  v143[1] = v142;
  v518 = v143;
  v519 = v143 + 2;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v518);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v517);
  MIL::IRParameter::Make(&v517, &v522);
  v144 = v522;
  v523 = v522;
  if (v522)
  {
    v145 = (_QWORD *)operator new();
    v146 = v522;
    *v145 = &unk_1EA99F888;
    v145[1] = 0;
    v145[2] = 0;
    v145[3] = v146;
  }
  else
  {
    v145 = 0;
  }
  v524 = v145;
  v522 = 0;
  v147 = v134[2];
  v148 = v134[1];
  if (v148 >= v147)
  {
    v150 = (v148 - *v134) >> 4;
    v151 = v150 + 1;
    if ((unint64_t)(v150 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v152 = v147 - *v134;
    if (v152 >> 3 > v151)
      v151 = v152 >> 3;
    if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF0)
      v153 = 0xFFFFFFFFFFFFFFFLL;
    else
      v153 = v151;
    v545 = v134 + 2;
    v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v134 + 2), v153);
    v156 = (uint64_t *)&v154[16 * v150];
    *v156 = v144;
    v156[1] = (uint64_t)v145;
    v524 = 0;
    v523 = 0;
    v158 = *v134;
    v157 = v134[1];
    if (v157 == *v134)
    {
      v161 = (void **)v134[1];
      v159 = &v154[16 * v150];
    }
    else
    {
      v159 = &v154[16 * v150];
      do
      {
        v160 = *((_OWORD *)v157 - 1);
        v157 -= 16;
        *((_OWORD *)v159 - 1) = v160;
        v159 -= 16;
        *(_QWORD *)v157 = 0;
        *((_QWORD *)v157 + 1) = 0;
      }
      while (v157 != v158);
      v161 = (void **)*v134;
      v157 = v134[1];
    }
    v149 = (char *)(v156 + 2);
    *v134 = v159;
    v542 = (uint64_t)v161;
    v134[1] = (char *)(v156 + 2);
    v543 = (uint64_t)v157;
    v162 = v134[2];
    v134[2] = &v154[16 * v155];
    v544 = v162;
    v541 = v161;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v541);
  }
  else
  {
    *(_QWORD *)v148 = v144;
    *((_QWORD *)v148 + 1) = v145;
    v149 = v148 + 16;
    v524 = 0;
    v523 = 0;
  }
  v134[1] = v149;
  v163 = v522;
  v522 = 0;
  if (v163)
    (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  v164 = (std::__shared_weak_count *)v517.n128_u64[1];
  if (v517.n128_u64[1])
  {
    v165 = (unint64_t *)(v517.n128_u64[1] + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  if (v518)
  {
    v519 = v518;
    operator delete(v518);
  }
  if (__p)
  {
    v534 = __p;
    operator delete(__p);
  }
  if (v536)
  {
    v537 = v536;
    operator delete(v536);
  }
  *(_OWORD *)v515 = *(_OWORD *)a2;
  v516 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v167 = (uint64_t)v540;
  *(_QWORD *)&v514 = v540;
  if (v540)
  {
    v168 = (_QWORD *)operator new();
    *v168 = &unk_1EA99F8E8;
    v168[1] = 0;
    v168[2] = 0;
    v168[3] = v167;
  }
  else
  {
    v168 = 0;
  }
  *((_QWORD *)&v514 + 1) = v168;
  v540 = 0;
  *(_QWORD *)&v513 = v525;
  if (v525)
  {
    v169 = (_QWORD *)operator new();
    v170 = v525;
    *v169 = &unk_1EA99F948;
    v169[1] = 0;
    v169[2] = 0;
    v169[3] = v170;
  }
  else
  {
    v169 = 0;
  }
  *((_QWORD *)&v513 + 1) = v169;
  v525 = 0;
  v558[0] = &unk_1EA99FAC8;
  v558[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateRNN;
  v559 = v558;
  v557 = 0;
  MIL::IROperator::Make((__int128 *)v515, &v514, &v513, (uint64_t)v558, (uint64_t)v556, a3);
  v171 = v557;
  if (v557 == v556)
  {
    v172 = 4;
    v171 = v556;
  }
  else
  {
    if (!v557)
      goto LABEL_158;
    v172 = 5;
  }
  (*(void (**)(void))(*v171 + 8 * v172))();
LABEL_158:
  v173 = v559;
  if (v559 == v558)
  {
    v174 = 4;
    v173 = v558;
    goto LABEL_162;
  }
  if (v559)
  {
    v174 = 5;
LABEL_162:
    (*(void (**)(void))(*v173 + 8 * v174))();
  }
  v175 = (std::__shared_weak_count *)*((_QWORD *)&v513 + 1);
  if (*((_QWORD *)&v513 + 1))
  {
    v176 = (unint64_t *)(*((_QWORD *)&v513 + 1) + 8);
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = (std::__shared_weak_count *)*((_QWORD *)&v514 + 1);
  if (*((_QWORD *)&v514 + 1))
  {
    v179 = (unint64_t *)(*((_QWORD *)&v514 + 1) + 8);
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  if (SHIBYTE(v516) < 0)
    operator delete(v515[0]);
  v536 = 0;
  v181 = (_OWORD *)operator new();
  *v181 = 0u;
  v181[1] = 0u;
  *((_DWORD *)v181 + 8) = 1065353216;
  v536 = v181;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v512);
  MIL::IRParameter::Make(&v512, (uint64_t *)&v541);
  v182 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v181, "minimum_compute_type", (uint64_t *)&v541);
  v183 = v541;
  v541 = 0;
  if (v183)
    (*((void (**)(void **))*v183 + 1))(v183);
  v184 = (std::__shared_weak_count *)v512.n128_u64[1];
  if (v512.n128_u64[1])
  {
    v185 = (unint64_t *)(v512.n128_u64[1] + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v182 + 5) + 32))(*((_QWORD *)v182 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v182 + 5) + 48))(*((_QWORD *)v182 + 5), 1);
  v187 = *a3;
  v188 = (std::__shared_weak_count_vtbl *)v536;
  v510 = v536;
  if (v536)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v188;
  }
  else
  {
    v189 = 0;
  }
  v511 = v189;
  v536 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v187 + 184))(v187, &v510);
  v190 = v511;
  if (v511)
  {
    p_shared_owners = (unint64_t *)&v511->__shared_owners_;
    do
      v192 = __ldaxr(p_shared_owners);
    while (__stlxr(v192 - 1, p_shared_owners));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = *a3;
  v554[0] = &off_1EA99FBD8;
  v554[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRNN;
  v555 = v554;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v193 + 200))(v193, v554);
  v194 = v555;
  if (v555 == v554)
  {
    v195 = 4;
    v194 = v554;
  }
  else
  {
    if (!v555)
      goto LABEL_195;
    v195 = 5;
  }
  (*(void (**)(void))(*v194 + 8 * v195))();
LABEL_195:
  MIL::Validation::TensorDTypeConstraints::Make(&v541);
  v196 = v541;
  std::string::basic_string[abi:ne180100]<0>(v506, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v506, 0, (uint64_t *)&Scalar);
  v508 = Scalar;
  if (Scalar)
  {
    v197 = (std::__shared_weak_count *)operator new();
    v198 = Scalar;
    v197->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v197->__shared_owners_ = 0;
    v197->__shared_weak_owners_ = 0;
    v197[1].__vftable = v198;
  }
  else
  {
    v197 = 0;
  }
  v509 = v197;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v504, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v196 + 3))(v196, &v508, v504);
  if (v505 < 0)
    operator delete(v504[0]);
  v199 = v509;
  if (v509)
  {
    v200 = (unint64_t *)&v509->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = Scalar;
  Scalar = 0;
  if (v202)
    (*((void (**)(std::__shared_weak_count_vtbl *))v202->~__shared_weak_count + 1))(v202);
  if (v507 < 0)
    operator delete(v506[0]);
  v203 = v541;
  std::string::basic_string[abi:ne180100]<0>(v500, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v500, 0, (uint64_t *)&Scalar);
  v502 = Scalar;
  if (Scalar)
  {
    v204 = (std::__shared_weak_count *)operator new();
    v205 = Scalar;
    v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v204->__shared_owners_ = 0;
    v204->__shared_weak_owners_ = 0;
    v204[1].__vftable = v205;
  }
  else
  {
    v204 = 0;
  }
  v503 = v204;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v498, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v203 + 3))(v203, &v502, v498);
  if (v499 < 0)
    operator delete(v498[0]);
  v206 = v503;
  if (v503)
  {
    v207 = (unint64_t *)&v503->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = Scalar;
  Scalar = 0;
  if (v209)
    (*((void (**)(std::__shared_weak_count_vtbl *))v209->~__shared_weak_count + 1))(v209);
  if (v501 < 0)
    operator delete(v500[0]);
  v210 = v541;
  std::string::basic_string[abi:ne180100]<0>(v494, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v494, 0, (uint64_t *)&Scalar);
  v496 = Scalar;
  if (Scalar)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = Scalar;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = v212;
  }
  else
  {
    v211 = 0;
  }
  v497 = v211;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v492, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v210 + 3))(v210, &v496, v492);
  if (v493 < 0)
    operator delete(v492[0]);
  v213 = v497;
  if (v497)
  {
    v214 = (unint64_t *)&v497->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = Scalar;
  Scalar = 0;
  if (v216)
    (*((void (**)(std::__shared_weak_count_vtbl *))v216->~__shared_weak_count + 1))(v216);
  if (v495 < 0)
    operator delete(v494[0]);
  v217 = v541;
  std::string::basic_string[abi:ne180100]<0>(v488, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v488, 0, (uint64_t *)&Scalar);
  v490 = Scalar;
  if (Scalar)
  {
    v218 = (std::__shared_weak_count *)operator new();
    v219 = Scalar;
    v218->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v218->__shared_owners_ = 0;
    v218->__shared_weak_owners_ = 0;
    v218[1].__vftable = v219;
  }
  else
  {
    v218 = 0;
  }
  v491 = v218;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v486, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v217 + 3))(v217, &v490, v486);
  if (v487 < 0)
    operator delete(v486[0]);
  v220 = v491;
  if (v491)
  {
    v221 = (unint64_t *)&v491->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = Scalar;
  Scalar = 0;
  if (v223)
    (*((void (**)(std::__shared_weak_count_vtbl *))v223->~__shared_weak_count + 1))(v223);
  if (v489 < 0)
    operator delete(v488[0]);
  v224 = v541;
  std::string::basic_string[abi:ne180100]<0>(v482, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v482, 1, (uint64_t *)&Scalar);
  v484 = Scalar;
  if (Scalar)
  {
    v225 = (std::__shared_weak_count *)operator new();
    v226 = Scalar;
    v225->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v225->__shared_owners_ = 0;
    v225->__shared_weak_owners_ = 0;
    v225[1].__vftable = v226;
  }
  else
  {
    v225 = 0;
  }
  v485 = v225;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v480, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v224 + 3))(v224, &v484, v480);
  if (v481 < 0)
    operator delete(v480[0]);
  v227 = v485;
  if (v485)
  {
    v228 = (unint64_t *)&v485->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = Scalar;
  Scalar = 0;
  if (v230)
    (*((void (**)(std::__shared_weak_count_vtbl *))v230->~__shared_weak_count + 1))(v230);
  if (v483 < 0)
    operator delete(v482[0]);
  v231 = v541;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v478 = Scalar;
  if (Scalar)
  {
    v232 = (std::__shared_weak_count *)operator new();
    v233 = Scalar;
    v232->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v232->__shared_owners_ = 0;
    v232->__shared_weak_owners_ = 0;
    v232[1].__vftable = v233;
  }
  else
  {
    v232 = 0;
  }
  v479 = v232;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v476, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v231 + 3))(v231, &v478, v476);
  if (v477 < 0)
    operator delete(v476[0]);
  v234 = v479;
  if (v479)
  {
    v235 = (unint64_t *)&v479->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v237 = Scalar;
  Scalar = 0;
  if (v237)
    (*((void (**)(std::__shared_weak_count_vtbl *))v237->~__shared_weak_count + 1))(v237);
  v238 = v541;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v474 = Scalar;
  if (Scalar)
  {
    v239 = (std::__shared_weak_count *)operator new();
    v240 = Scalar;
    v239->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v239->__shared_owners_ = 0;
    v239->__shared_weak_owners_ = 0;
    v239[1].__vftable = v240;
  }
  else
  {
    v239 = 0;
  }
  v475 = v239;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v472, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v238 + 3))(v238, &v474, v472);
  if (v473 < 0)
    operator delete(v472[0]);
  v241 = v475;
  if (v475)
  {
    v242 = (unint64_t *)&v475->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = Scalar;
  Scalar = 0;
  if (v244)
    (*((void (**)(std::__shared_weak_count_vtbl *))v244->~__shared_weak_count + 1))(v244);
  v245 = *a3;
  v470 = v541;
  if (v541)
  {
    v246 = (std::__shared_weak_count *)operator new();
    v247 = v541;
    v246->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v246->__shared_owners_ = 0;
    v246->__shared_weak_owners_ = 0;
    v246[1].__vftable = (std::__shared_weak_count_vtbl *)v247;
  }
  else
  {
    v246 = 0;
  }
  v471 = v246;
  v541 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v245 + 56))(v245, &v470);
  v248 = v471;
  if (v471)
  {
    v249 = (unint64_t *)&v471->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v251 = v541;
  v541 = 0;
  if (v251)
    (*((void (**)(void **))*v251 + 1))(v251);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v541);
  v252 = v541;
  std::string::basic_string[abi:ne180100]<0>(v466, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v466, 0, (uint64_t *)&Scalar);
  v468 = Scalar;
  if (Scalar)
  {
    v253 = (std::__shared_weak_count *)operator new();
    v254 = Scalar;
    v253->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v253->__shared_owners_ = 0;
    v253->__shared_weak_owners_ = 0;
    v253[1].__vftable = v254;
  }
  else
  {
    v253 = 0;
  }
  v469 = v253;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v464, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v252 + 3))(v252, &v468, 0, v464);
  if (v465 < 0)
    operator delete(v464[0]);
  v255 = v469;
  if (v469)
  {
    v256 = (unint64_t *)&v469->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  v258 = Scalar;
  Scalar = 0;
  if (v258)
    (*((void (**)(std::__shared_weak_count_vtbl *))v258->~__shared_weak_count + 1))(v258);
  if (v467 < 0)
    operator delete(v466[0]);
  v259 = v541;
  std::string::basic_string[abi:ne180100]<0>(v460, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v460, 0, (uint64_t *)&Scalar);
  v462 = Scalar;
  if (Scalar)
  {
    v260 = (std::__shared_weak_count *)operator new();
    v261 = Scalar;
    v260->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v260->__shared_owners_ = 0;
    v260->__shared_weak_owners_ = 0;
    v260[1].__vftable = v261;
  }
  else
  {
    v260 = 0;
  }
  v463 = v260;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v458, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v259 + 3))(v259, &v462, 1, v458);
  if (v459 < 0)
    operator delete(v458[0]);
  v262 = v463;
  if (v463)
  {
    v263 = (unint64_t *)&v463->__shared_owners_;
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = Scalar;
  Scalar = 0;
  if (v265)
    (*((void (**)(std::__shared_weak_count_vtbl *))v265->~__shared_weak_count + 1))(v265);
  if (v461 < 0)
    operator delete(v460[0]);
  v266 = v541;
  std::string::basic_string[abi:ne180100]<0>(v454, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v454, 0, (uint64_t *)&Scalar);
  v456 = Scalar;
  if (Scalar)
  {
    v267 = (std::__shared_weak_count *)operator new();
    v268 = Scalar;
    v267->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v267->__shared_owners_ = 0;
    v267->__shared_weak_owners_ = 0;
    v267[1].__vftable = v268;
  }
  else
  {
    v267 = 0;
  }
  v457 = v267;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v452, "I");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v266 + 3))(v266, &v456, 2, v452);
  if (v453 < 0)
    operator delete(v452[0]);
  v269 = v457;
  if (v457)
  {
    v270 = (unint64_t *)&v457->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  v272 = Scalar;
  Scalar = 0;
  if (v272)
    (*((void (**)(std::__shared_weak_count_vtbl *))v272->~__shared_weak_count + 1))(v272);
  if (v455 < 0)
    operator delete(v454[0]);
  v273 = v541;
  std::string::basic_string[abi:ne180100]<0>(v448, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v448, 0, (uint64_t *)&Scalar);
  v450 = Scalar;
  if (Scalar)
  {
    v274 = (std::__shared_weak_count *)operator new();
    v275 = Scalar;
    v274->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v274->__shared_owners_ = 0;
    v274->__shared_weak_owners_ = 0;
    v274[1].__vftable = v275;
  }
  else
  {
    v274 = 0;
  }
  v451 = v274;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v446, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v273 + 3))(v273, &v450, 0, v446);
  if (v447 < 0)
    operator delete(v446[0]);
  v276 = v451;
  if (v451)
  {
    v277 = (unint64_t *)&v451->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  v279 = Scalar;
  Scalar = 0;
  if (v279)
    (*((void (**)(std::__shared_weak_count_vtbl *))v279->~__shared_weak_count + 1))(v279);
  if (v449 < 0)
    operator delete(v448[0]);
  v280 = v541;
  std::string::basic_string[abi:ne180100]<0>(v442, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v442, 0, (uint64_t *)&Scalar);
  v444 = Scalar;
  if (Scalar)
  {
    v281 = (std::__shared_weak_count *)operator new();
    v282 = Scalar;
    v281->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v281->__shared_owners_ = 0;
    v281->__shared_weak_owners_ = 0;
    v281[1].__vftable = v282;
  }
  else
  {
    v281 = 0;
  }
  v445 = v281;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v440, "H");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v280 + 3))(v280, &v444, 1, v440);
  if (v441 < 0)
    operator delete(v440[0]);
  v283 = v445;
  if (v445)
  {
    v284 = (unint64_t *)&v445->__shared_owners_;
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }
  v286 = Scalar;
  Scalar = 0;
  if (v286)
    (*((void (**)(std::__shared_weak_count_vtbl *))v286->~__shared_weak_count + 1))(v286);
  if (v443 < 0)
    operator delete(v442[0]);
  v287 = v541;
  std::string::basic_string[abi:ne180100]<0>(v436, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v436, 0, (uint64_t *)&Scalar);
  v438 = Scalar;
  if (Scalar)
  {
    v288 = (std::__shared_weak_count *)operator new();
    v289 = Scalar;
    v288->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v288->__shared_owners_ = 0;
    v288->__shared_weak_owners_ = 0;
    v288[1].__vftable = v289;
  }
  else
  {
    v288 = 0;
  }
  v439 = v288;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v434, "H");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v287 + 3))(v287, &v438, 0, v434);
  if (v435 < 0)
    operator delete(v434[0]);
  v290 = v439;
  if (v439)
  {
    v291 = (unint64_t *)&v439->__shared_owners_;
    do
      v292 = __ldaxr(v291);
    while (__stlxr(v292 - 1, v291));
    if (!v292)
    {
      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
      std::__shared_weak_count::__release_weak(v290);
    }
  }
  v293 = Scalar;
  Scalar = 0;
  if (v293)
    (*((void (**)(std::__shared_weak_count_vtbl *))v293->~__shared_weak_count + 1))(v293);
  if (v437 < 0)
    operator delete(v436[0]);
  v294 = v541;
  std::string::basic_string[abi:ne180100]<0>(v430, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v430, 0, (uint64_t *)&Scalar);
  v432 = Scalar;
  if (Scalar)
  {
    v295 = (std::__shared_weak_count *)operator new();
    v296 = Scalar;
    v295->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v295->__shared_owners_ = 0;
    v295->__shared_weak_owners_ = 0;
    v295[1].__vftable = v296;
  }
  else
  {
    v295 = 0;
  }
  v433 = v295;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v428, "I");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v294 + 3))(v294, &v432, 1, v428);
  if (v429 < 0)
    operator delete(v428[0]);
  v297 = v433;
  if (v433)
  {
    v298 = (unint64_t *)&v433->__shared_owners_;
    do
      v299 = __ldaxr(v298);
    while (__stlxr(v299 - 1, v298));
    if (!v299)
    {
      ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
      std::__shared_weak_count::__release_weak(v297);
    }
  }
  v300 = Scalar;
  Scalar = 0;
  if (v300)
    (*((void (**)(std::__shared_weak_count_vtbl *))v300->~__shared_weak_count + 1))(v300);
  if (v431 < 0)
    operator delete(v430[0]);
  v301 = v541;
  std::string::basic_string[abi:ne180100]<0>(v424, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v424, 0, (uint64_t *)&Scalar);
  v426 = Scalar;
  if (Scalar)
  {
    v302 = (std::__shared_weak_count *)operator new();
    v303 = Scalar;
    v302->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v302->__shared_owners_ = 0;
    v302->__shared_weak_owners_ = 0;
    v302[1].__vftable = v303;
  }
  else
  {
    v302 = 0;
  }
  v427 = v302;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v422, "H");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v301 + 3))(v301, &v426, 1, v422);
  if (v423 < 0)
    operator delete(v422[0]);
  v304 = v427;
  if (v427)
  {
    v305 = (unint64_t *)&v427->__shared_owners_;
    do
      v306 = __ldaxr(v305);
    while (__stlxr(v306 - 1, v305));
    if (!v306)
    {
      ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
      std::__shared_weak_count::__release_weak(v304);
    }
  }
  v307 = Scalar;
  Scalar = 0;
  if (v307)
    (*((void (**)(std::__shared_weak_count_vtbl *))v307->~__shared_weak_count + 1))(v307);
  if (v425 < 0)
    operator delete(v424[0]);
  v308 = v541;
  std::string::basic_string[abi:ne180100]<0>(v418, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v418, 1, (uint64_t *)&Scalar);
  v420 = Scalar;
  if (Scalar)
  {
    v309 = (std::__shared_weak_count *)operator new();
    v310 = Scalar;
    v309->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v309->__shared_owners_ = 0;
    v309->__shared_weak_owners_ = 0;
    v309[1].__vftable = v310;
  }
  else
  {
    v309 = 0;
  }
  v421 = v309;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v416, "H");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v308 + 3))(v308, &v420, 0, v416);
  if (v417 < 0)
    operator delete(v416[0]);
  v311 = v421;
  if (v421)
  {
    v312 = (unint64_t *)&v421->__shared_owners_;
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
  v314 = Scalar;
  Scalar = 0;
  if (v314)
    (*((void (**)(std::__shared_weak_count_vtbl *))v314->~__shared_weak_count + 1))(v314);
  if (v419 < 0)
    operator delete(v418[0]);
  v315 = v541;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v414 = Scalar;
  if (Scalar)
  {
    v316 = (std::__shared_weak_count *)operator new();
    v317 = Scalar;
    v316->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v316->__shared_owners_ = 0;
    v316->__shared_weak_owners_ = 0;
    v316[1].__vftable = v317;
  }
  else
  {
    v316 = 0;
  }
  v415 = v316;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v412, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v315 + 3))(v315, &v414, 1, v412);
  if (v413 < 0)
    operator delete(v412[0]);
  v318 = v415;
  if (v415)
  {
    v319 = (unint64_t *)&v415->__shared_owners_;
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
      std::__shared_weak_count::__release_weak(v318);
    }
  }
  v321 = Scalar;
  Scalar = 0;
  if (v321)
    (*((void (**)(std::__shared_weak_count_vtbl *))v321->~__shared_weak_count + 1))(v321);
  v322 = v541;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v410 = Scalar;
  if (Scalar)
  {
    v323 = (std::__shared_weak_count *)operator new();
    v324 = Scalar;
    v323->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v323->__shared_owners_ = 0;
    v323->__shared_weak_owners_ = 0;
    v323[1].__vftable = v324;
  }
  else
  {
    v323 = 0;
  }
  v411 = v323;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v408, "H");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v322 + 3))(v322, &v410, 2, v408);
  if (v409 < 0)
    operator delete(v408[0]);
  v325 = v411;
  if (v411)
  {
    v326 = (unint64_t *)&v411->__shared_owners_;
    do
      v327 = __ldaxr(v326);
    while (__stlxr(v327 - 1, v326));
    if (!v327)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
  }
  v328 = Scalar;
  Scalar = 0;
  if (v328)
    (*((void (**)(std::__shared_weak_count_vtbl *))v328->~__shared_weak_count + 1))(v328);
  v329 = v541;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v406 = Scalar;
  if (Scalar)
  {
    v330 = (std::__shared_weak_count *)operator new();
    v331 = Scalar;
    v330->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v330->__shared_owners_ = 0;
    v330->__shared_weak_owners_ = 0;
    v330[1].__vftable = v331;
  }
  else
  {
    v330 = 0;
  }
  v407 = v330;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v404, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v329 + 3))(v329, &v406, 0, v404);
  if (v405 < 0)
    operator delete(v404[0]);
  v332 = v407;
  if (v407)
  {
    v333 = (unint64_t *)&v407->__shared_owners_;
    do
      v334 = __ldaxr(v333);
    while (__stlxr(v334 - 1, v333));
    if (!v334)
    {
      ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
      std::__shared_weak_count::__release_weak(v332);
    }
  }
  v335 = Scalar;
  Scalar = 0;
  if (v335)
    (*((void (**)(std::__shared_weak_count_vtbl *))v335->~__shared_weak_count + 1))(v335);
  v336 = v541;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v402 = Scalar;
  if (Scalar)
  {
    v337 = (std::__shared_weak_count *)operator new();
    v338 = Scalar;
    v337->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v337->__shared_owners_ = 0;
    v337->__shared_weak_owners_ = 0;
    v337[1].__vftable = v338;
  }
  else
  {
    v337 = 0;
  }
  v403 = v337;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v400, "H");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v336 + 3))(v336, &v402, 1, v400);
  if (v401 < 0)
    operator delete(v400[0]);
  v339 = v403;
  if (v403)
  {
    v340 = (unint64_t *)&v403->__shared_owners_;
    do
      v341 = __ldaxr(v340);
    while (__stlxr(v341 - 1, v340));
    if (!v341)
    {
      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
      std::__shared_weak_count::__release_weak(v339);
    }
  }
  v342 = Scalar;
  Scalar = 0;
  if (v342)
    (*((void (**)(std::__shared_weak_count_vtbl *))v342->~__shared_weak_count + 1))(v342);
  v343 = *a3;
  v398 = v541;
  if (v541)
  {
    v344 = (std::__shared_weak_count *)operator new();
    v345 = v541;
    v344->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v344->__shared_owners_ = 0;
    v344->__shared_weak_owners_ = 0;
    v344[1].__vftable = (std::__shared_weak_count_vtbl *)v345;
  }
  else
  {
    v344 = 0;
  }
  v399 = v344;
  v541 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v343 + 56))(v343, &v398);
  v346 = v399;
  if (v399)
  {
    v347 = (unint64_t *)&v399->__shared_owners_;
    do
      v348 = __ldaxr(v347);
    while (__stlxr(v348 - 1, v347));
    if (!v348)
    {
      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
      std::__shared_weak_count::__release_weak(v346);
    }
  }
  v349 = v541;
  v541 = 0;
  if (v349)
    (*((void (**)(void **))*v349 + 1))(v349);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v350 = __p;
  std::string::basic_string[abi:ne180100]<0>(v394, "direction");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v394, 0, (uint64_t *)&v518);
  v396 = v518;
  if (v518)
  {
    v351 = (std::__shared_weak_count *)operator new();
    v352 = (std::__shared_weak_count_vtbl *)v518;
    v351->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v351->__shared_owners_ = 0;
    v351->__shared_weak_owners_ = 0;
    v351[1].__vftable = v352;
  }
  else
  {
    v351 = 0;
  }
  v397 = v351;
  v518 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v541, "forward");
  std::string::basic_string[abi:ne180100]<0>(&v544, "reverse");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v541, 2);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v350 + 24))(v350, &v396, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (*(&v546 + i * 8) < 0)
      operator delete((&v544)[i]);
  }
  v354 = v397;
  if (v397)
  {
    v355 = (unint64_t *)&v397->__shared_owners_;
    do
      v356 = __ldaxr(v355);
    while (__stlxr(v356 - 1, v355));
    if (!v356)
    {
      ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
      std::__shared_weak_count::__release_weak(v354);
    }
  }
  v357 = v518;
  v518 = 0;
  if (v357)
    (*(void (**)(void *))(*(_QWORD *)v357 + 8))(v357);
  if (v395 < 0)
    operator delete(v394[0]);
  v358 = __p;
  std::string::basic_string[abi:ne180100]<0>(v390, "activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v390, 0, (uint64_t *)&v518);
  v392 = v518;
  if (v518)
  {
    v359 = (std::__shared_weak_count *)operator new();
    v360 = (std::__shared_weak_count_vtbl *)v518;
    v359->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v359->__shared_owners_ = 0;
    v359->__shared_weak_owners_ = 0;
    v359[1].__vftable = v360;
  }
  else
  {
    v359 = 0;
  }
  v393 = v359;
  v518 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v541, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v544, "linear");
  std::string::basic_string[abi:ne180100]<0>(v547, "relu");
  std::string::basic_string[abi:ne180100]<0>(v548, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v549, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v550, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v541, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v358 + 24))(v358, &v392, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v550[j + 2]) < 0)
      operator delete((void *)v550[j]);
  }
  v362 = v393;
  if (v393)
  {
    v363 = (unint64_t *)&v393->__shared_owners_;
    do
      v364 = __ldaxr(v363);
    while (__stlxr(v364 - 1, v363));
    if (!v364)
    {
      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
      std::__shared_weak_count::__release_weak(v362);
    }
  }
  v365 = v518;
  v518 = 0;
  if (v365)
    (*(void (**)(void *))(*(_QWORD *)v365 + 8))(v365);
  if (v391 < 0)
    operator delete(v390[0]);
  v366 = __p;
  std::string::basic_string[abi:ne180100]<0>(v386, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v386, 1, (uint64_t *)&v518);
  v388 = v518;
  if (v518)
  {
    v367 = (std::__shared_weak_count *)operator new();
    v368 = (std::__shared_weak_count_vtbl *)v518;
    v367->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v367->__shared_owners_ = 0;
    v367->__shared_weak_owners_ = 0;
    v367[1].__vftable = v368;
  }
  else
  {
    v367 = 0;
  }
  v389 = v367;
  v518 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v541, "bf16");
  std::string::basic_string[abi:ne180100]<0>(&v544, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v547, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v548, "int32");
  std::string::basic_string[abi:ne180100]<0>(v549, "int8");
  std::string::basic_string[abi:ne180100]<0>(v550, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v541, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v366 + 24))(v366, &v388, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -18; k -= 3)
  {
    if (SHIBYTE(v550[k + 2]) < 0)
      operator delete((void *)v550[k]);
  }
  v370 = v389;
  if (v389)
  {
    v371 = (unint64_t *)&v389->__shared_owners_;
    do
      v372 = __ldaxr(v371);
    while (__stlxr(v372 - 1, v371));
    if (!v372)
    {
      ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
      std::__shared_weak_count::__release_weak(v370);
    }
  }
  v373 = v518;
  v518 = 0;
  if (v373)
    (*(void (**)(void *))(*(_QWORD *)v373 + 8))(v373);
  if (v387 < 0)
    operator delete(v386[0]);
  v374 = *a3;
  v384 = __p;
  if (__p)
  {
    v375 = (std::__shared_weak_count *)operator new();
    v376 = (std::__shared_weak_count_vtbl *)__p;
    v375->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v375->__shared_owners_ = 0;
    v375->__shared_weak_owners_ = 0;
    v375[1].__vftable = v376;
  }
  else
  {
    v375 = 0;
  }
  v385 = v375;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v374 + 56))(v374, &v384);
  v377 = v385;
  if (v385)
  {
    v378 = (unint64_t *)&v385->__shared_owners_;
    do
      v379 = __ldaxr(v378);
    while (__stlxr(v379 - 1, v378));
    if (!v379)
    {
      ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
      std::__shared_weak_count::__release_weak(v377);
    }
  }
  v380 = __p;
  __p = 0;
  if (v380)
    (*(void (**)(void *))(*(_QWORD *)v380 + 8))(v380);
  if (v536)
  {
    v381 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v536);
    MEMORY[0x1E0C023A0](v381, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v525, 0);
  result = (uint64_t)v540;
  if (v540)
  {
    v383 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v540);
    return MEMORY[0x1E0C023A0](v383, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09FC8B8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x648];
  STACK[0x648] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x660], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x5D0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x688], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E09FD6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::BaseArgReduction::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  char **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void **v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  void **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void **v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  std::__shared_weak_count_vtbl *v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  void **v66;
  char *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char **v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _OWORD *v86;
  unsigned __int8 *v87;
  void **v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void **v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void **v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void **v121;
  void **v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  void **v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void **v135;
  void *v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  uint64_t i;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  void *v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  uint64_t j;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count_vtbl *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t result;
  uint64_t v161;
  void *v162;
  std::__shared_weak_count *v163;
  void *v164[2];
  char v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  void *v168[2];
  char v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  void **v172;
  std::__shared_weak_count *v173;
  void *v174[2];
  char v175;
  void *v176[2];
  char v177;
  std::__shared_weak_count_vtbl *v178;
  std::__shared_weak_count *v179;
  void **v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  void *v186[2];
  char v187;
  void *v188[2];
  char v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  void *v192;
  std::__shared_weak_count *v193;
  __n128 v194;
  __int128 v195;
  __int128 v196;
  void *v197[2];
  uint64_t v198;
  __n128 v199;
  void *v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  void *__p;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  __n128 v210;
  char **v211;
  _QWORD *v212;
  void **v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD v216[3];
  uint64_t v217[3];
  uint64_t v218[3];
  uint64_t v219[3];
  uint64_t v220[3];
  _QWORD v221[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v224;
  _QWORD v225[3];
  _QWORD *v226;
  _BYTE v227[24];
  _BYTE *v228;
  _QWORD v229[3];
  _QWORD *v230;
  std::__shared_weak_count_vtbl *v231;
  uint64_t v232;
  void (__cdecl **v233)(std::__shared_count *__hidden);
  uint64_t v234;

  v234 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v212 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v11->__on_zero_shared;
  v224 = &v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  Scalar = v11;
  v213 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v208 = v14 + 2;
  v209 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v207 = v14;
  v214 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v207);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v205 = v17 + 2;
  v206 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v215 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v232 = (uint64_t)&v20->__on_zero_shared;
  v233 = &v20->__on_zero_shared;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v20->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v231 = v20;
  v216[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v231);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v213, 4, &v210);
  MIL::IRParameter::Make(&v210, (uint64_t *)&v211);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v211);
  v21 = v211;
  v211 = 0;
  if (v21)
    (*((void (**)(char **))*v21 + 1))(v21);
  v22 = (std::__shared_weak_count *)v210.n128_u64[1];
  if (v210.n128_u64[1])
  {
    v23 = (unint64_t *)(v210.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v231)
  {
    v232 = (uint64_t)v231;
    operator delete(v231);
  }
  if (__p)
  {
    v205 = __p;
    operator delete(__p);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  v25 = v212;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v203);
  MIL::IRParameter::Make(&v203, (uint64_t *)&v213);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v25, "axis", (uint64_t *)&v213);
  v27 = v213;
  v213 = 0;
  if (v27)
    (*((void (**)(void **))*v27 + 1))(v27);
  v28 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v29 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v31 = v212;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v202);
  MIL::IRParameter::Make(&v202, (uint64_t *)&v213);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v31, "keep_dims", (uint64_t *)&v213);
  v33 = v213;
  v213 = 0;
  if (v33)
    (*((void (**)(void **))*v33 + 1))(v33);
  v34 = (std::__shared_weak_count *)v202.n128_u64[1];
  if (v202.n128_u64[1])
  {
    v35 = (unint64_t *)(v202.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 48))(*((_QWORD *)v32 + 5), 1);
  v37 = v212;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v201);
  MIL::IRParameter::Make(&v201, (uint64_t *)&v213);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v37, "output_dtype", (uint64_t *)&v213);
  v39 = v213;
  v213 = 0;
  if (v39)
    (*((void (**)(void **))*v39 + 1))(v39);
  v40 = (std::__shared_weak_count *)v201.n128_u64[1];
  if (v201.n128_u64[1])
  {
    v41 = (unint64_t *)(v201.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 48))(*((_QWORD *)v38 + 5), 1);
  v211 = 0;
  v43 = operator new();
  *(_QWORD *)v43 = 0;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 16) = 0;
  v213 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v211, (void **)v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v213, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v211, 1uLL);
  v44 = v211;
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v46;
  v46->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v45;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v46->~__shared_weak_count_0;
  v224 = &v46->~__shared_weak_count_0;
  v231 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&Scalar);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v207 = v48;
  *v48 = v47;
  v208 = v48 + 1;
  v209 = v48 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v207);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v231, 2, &v199);
  MIL::IRParameter::Make(&v199, (uint64_t *)&v200);
  v49 = v200;
  __p = v200;
  if (v200)
  {
    v50 = (_QWORD *)operator new();
    v51 = v200;
    *v50 = &unk_1EA99F888;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  v205 = v50;
  v200 = 0;
  v52 = v44[2];
  v53 = v44[1];
  if (v53 >= v52)
  {
    v55 = (v53 - *v44) >> 4;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v57 = v52 - *v44;
    if (v57 >> 3 > v56)
      v56 = v57 >> 3;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
      v58 = 0xFFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    v216[1] = v44 + 2;
    v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v44 + 2), v58);
    v61 = &v59[16 * v55];
    *(_QWORD *)v61 = v49;
    *((_QWORD *)v61 + 1) = v50;
    __p = 0;
    v205 = 0;
    v63 = *v44;
    v62 = v44[1];
    if (v62 == *v44)
    {
      v66 = (void **)v44[1];
      v64 = &v59[16 * v55];
    }
    else
    {
      v64 = &v59[16 * v55];
      do
      {
        v65 = *((_OWORD *)v62 - 1);
        v62 -= 16;
        *((_OWORD *)v64 - 1) = v65;
        v64 -= 16;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
      }
      while (v62 != v63);
      v66 = (void **)*v44;
      v62 = v44[1];
    }
    v54 = v61 + 16;
    *v44 = v64;
    v214 = (uint64_t)v66;
    v44[1] = v61 + 16;
    v215 = (uint64_t)v62;
    v67 = v44[2];
    v44[2] = &v59[16 * v60];
    v216[0] = v67;
    v213 = v66;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v213);
  }
  else
  {
    *(_QWORD *)v53 = v49;
    *((_QWORD *)v53 + 1) = v50;
    v54 = v53 + 16;
    __p = 0;
    v205 = 0;
  }
  v44[1] = v54;
  v68 = v200;
  v200 = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v199.n128_u64[1];
  if (v199.n128_u64[1])
  {
    v70 = (unint64_t *)(v199.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v197 = *(_OWORD *)a2;
  v198 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v72 = (uint64_t)v212;
  *(_QWORD *)&v196 = v212;
  if (v212)
  {
    v73 = (_QWORD *)operator new();
    *v73 = &unk_1EA99F8E8;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = v72;
  }
  else
  {
    v73 = 0;
  }
  *((_QWORD *)&v196 + 1) = v73;
  v212 = 0;
  *(_QWORD *)&v195 = v211;
  if (v211)
  {
    v74 = (_QWORD *)operator new();
    v75 = v211;
    *v74 = &unk_1EA99F948;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  *((_QWORD *)&v195 + 1) = v74;
  v211 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v229, a3);
  }
  else
  {
    v229[0] = &unk_1EA99FAC8;
    v229[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateBaseArgReduction;
    v230 = v229;
  }
  v228 = 0;
  MIL::IROperator::Make((__int128 *)v197, &v196, &v195, (uint64_t)v229, (uint64_t)v227, a4);
  v76 = v228;
  if (v228 == v227)
  {
    v77 = 4;
    v76 = v227;
  }
  else
  {
    if (!v228)
      goto LABEL_79;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_79:
  v78 = v230;
  if (v230 == v229)
  {
    v79 = 4;
    v78 = v229;
    goto LABEL_83;
  }
  if (v230)
  {
    v79 = 5;
LABEL_83:
    (*(void (**)(void))(*v78 + 8 * v79))();
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
  if (*((_QWORD *)&v195 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
  if (*((_QWORD *)&v196 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (SHIBYTE(v198) < 0)
    operator delete(v197[0]);
  v207 = 0;
  v86 = (_OWORD *)operator new();
  *v86 = 0u;
  v86[1] = 0u;
  *((_DWORD *)v86 + 8) = 1065353216;
  v207 = v86;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v194);
  MIL::IRParameter::Make(&v194, (uint64_t *)&v213);
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v86, "minimum_compute_type", (uint64_t *)&v213);
  v88 = v213;
  v213 = 0;
  if (v88)
    (*((void (**)(void **))*v88 + 1))(v88);
  v89 = (std::__shared_weak_count *)v194.n128_u64[1];
  if (v194.n128_u64[1])
  {
    v90 = (unint64_t *)(v194.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 32))(*((_QWORD *)v87 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 48))(*((_QWORD *)v87 + 5), 1);
  v92 = *a4;
  v93 = (std::__shared_weak_count_vtbl *)v207;
  v192 = v207;
  if (v207)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v93;
  }
  else
  {
    v94 = 0;
  }
  v193 = v94;
  v207 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v92 + 184))(v92, &v192);
  v95 = v193;
  if (v193)
  {
    p_shared_owners = (unint64_t *)&v193->__shared_owners_;
    do
      v97 = __ldaxr(p_shared_owners);
    while (__stlxr(v97 - 1, p_shared_owners));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = *a4;
  v225[0] = &off_1EA99FBD8;
  v225[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction;
  v226 = v225;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v98 + 200))(v98, v225);
  v99 = v226;
  if (v226 == v225)
  {
    v100 = 4;
    v99 = v225;
  }
  else
  {
    if (!v226)
      goto LABEL_116;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_116:
  MIL::Validation::TensorDTypeConstraints::Make(&v213);
  v101 = v213;
  std::string::basic_string[abi:ne180100]<0>(v188, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v188, 0, (uint64_t *)&Scalar);
  v190 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v191 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v186, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v101 + 3))(v101, &v190, v186);
  if (v187 < 0)
    operator delete(v186[0]);
  v104 = v191;
  if (v191)
  {
    v105 = (unint64_t *)&v191->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v189 < 0)
    operator delete(v188[0]);
  v108 = v213;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v184 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v185 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "OUT_T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v108 + 3))(v108, &v184, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v111 = v185;
  if (v185)
  {
    v112 = (unint64_t *)&v185->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  v115 = *a4;
  v180 = v213;
  if (v213)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = v213;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = (std::__shared_weak_count_vtbl *)v117;
  }
  else
  {
    v116 = 0;
  }
  v181 = v116;
  v213 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v115 + 56))(v115, &v180);
  v118 = v181;
  if (v181)
  {
    v119 = (unint64_t *)&v181->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v213;
  v213 = 0;
  if (v121)
    (*((void (**)(void **))*v121 + 1))(v121);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v213);
  v122 = v213;
  std::string::basic_string[abi:ne180100]<0>(v176, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v176, 0, (uint64_t *)&Scalar);
  v178 = Scalar;
  if (Scalar)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = Scalar;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v179 = v123;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v174, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v122 + 3))(v122, &v178, 0, v174);
  if (v175 < 0)
    operator delete(v174[0]);
  v125 = v179;
  if (v179)
  {
    v126 = (unint64_t *)&v179->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = Scalar;
  Scalar = 0;
  if (v128)
    (*((void (**)(std::__shared_weak_count_vtbl *))v128->~__shared_weak_count + 1))(v128);
  if (v177 < 0)
    operator delete(v176[0]);
  v129 = *a4;
  v172 = v213;
  if (v213)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = v213;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = (std::__shared_weak_count_vtbl *)v131;
  }
  else
  {
    v130 = 0;
  }
  v173 = v130;
  v213 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v129 + 56))(v129, &v172);
  v132 = v173;
  if (v173)
  {
    v133 = (unint64_t *)&v173->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v213;
  v213 = 0;
  if (v135)
    (*((void (**)(void **))*v135 + 1))(v135);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v136 = __p;
  std::string::basic_string[abi:ne180100]<0>(v168, "output_dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v168, 1, (uint64_t *)&v231);
  v170 = v231;
  if (v231)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = v231;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v171 = v137;
  v231 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v213, "int32");
  std::string::basic_string[abi:ne180100]<0>(v216, "uint16");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v213, 2);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v136 + 24))(v136, &v170, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v216[i + 2]) < 0)
      operator delete((void *)v216[i]);
  }
  v140 = v171;
  if (v171)
  {
    v141 = (unint64_t *)&v171->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v231;
  v231 = 0;
  if (v143)
    (*((void (**)(std::__shared_weak_count_vtbl *))v143->~__shared_weak_count + 1))(v143);
  if (v169 < 0)
    operator delete(v168[0]);
  v144 = __p;
  std::string::basic_string[abi:ne180100]<0>(v164, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v164, 1, (uint64_t *)&v231);
  v166 = v231;
  if (v231)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = v231;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v167 = v145;
  v231 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v213, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v216, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v217, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v218, "int32");
  std::string::basic_string[abi:ne180100]<0>(v219, "int8");
  std::string::basic_string[abi:ne180100]<0>(v220, "uint16");
  std::string::basic_string[abi:ne180100]<0>(v221, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v213, 7);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v144 + 24))(v144, &v166, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -21; j -= 3)
  {
    if (SHIBYTE(v221[j + 2]) < 0)
      operator delete((void *)v221[j]);
  }
  v148 = v167;
  if (v167)
  {
    v149 = (unint64_t *)&v167->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v231;
  v231 = 0;
  if (v151)
    (*((void (**)(std::__shared_weak_count_vtbl *))v151->~__shared_weak_count + 1))(v151);
  if (v165 < 0)
    operator delete(v164[0]);
  v152 = *a4;
  v162 = __p;
  if (__p)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = (std::__shared_weak_count_vtbl *)__p;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v163 = v153;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v152 + 56))(v152, &v162);
  v155 = v163;
  if (v163)
  {
    v156 = (unint64_t *)&v163->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = __p;
  __p = 0;
  if (v158)
    (*(void (**)(void *))(*(_QWORD *)v158 + 8))(v158);
  if (v207)
  {
    v159 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v207);
    MEMORY[0x1E0C023A0](v159, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v211, 0);
  result = (uint64_t)v212;
  if (v212)
  {
    v161 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v212);
    return MEMORY[0x1E0C023A0](v161, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09FEA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *a70;
  uint64_t *v70;
  uint64_t v72;

  if (a67)
    (*(void (**)(void *))(*(_QWORD *)a67 + 8))(a67);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a70, 0);
  v72 = *v70;
  *v70 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x218], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ReduceArgmax::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseArgReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E09FF13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::Builder::OperationBuilder::AddInput((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ReduceArgmin::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseArgReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E09FF23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::Builder::OperationBuilder::AddInput((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::BaseScatter::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  unsigned __int8 *v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  unsigned __int8 *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  char **v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t *v128;
  char *v129;
  char *v130;
  char *v131;
  __int128 v132;
  char *v133;
  char *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  char **v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  _OWORD *v153;
  unsigned __int8 *v154;
  void *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count *v162;
  unint64_t *p_shared_owners;
  unint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  void *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  char *v174;
  void *v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  char *v181;
  void *v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  char *v188;
  void *v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  char *v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  void *v202;
  void *v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  char *v209;
  void *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  char *v216;
  void *v217;
  std::__shared_weak_count *v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  char *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  void *v230;
  void *v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count_vtbl *v233;
  uint64_t i;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  void *v238;
  void *v239;
  std::__shared_weak_count *v240;
  std::__shared_weak_count_vtbl *v241;
  uint64_t j;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  void *v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t result;
  uint64_t v256;
  void *v257;
  std::__shared_weak_count *v258;
  void *v259[2];
  char v260;
  void *v261;
  std::__shared_weak_count *v262;
  void *v263[2];
  char v264;
  void *v265;
  std::__shared_weak_count *v266;
  void *v267;
  std::__shared_weak_count *v268;
  void *v269[2];
  char v270;
  void *v271[2];
  char v272;
  char *v273;
  std::__shared_weak_count *v274;
  void *v275[2];
  char v276;
  void *v277[2];
  char v278;
  char *v279;
  std::__shared_weak_count *v280;
  void *v281[2];
  char v282;
  void *v283[2];
  char v284;
  char *v285;
  std::__shared_weak_count *v286;
  void *v287;
  std::__shared_weak_count *v288;
  void *v289[2];
  char v290;
  char *v291;
  std::__shared_weak_count *v292;
  void *v293[2];
  char v294;
  void *v295[2];
  char v296;
  char *v297;
  std::__shared_weak_count *v298;
  void *v299[2];
  char v300;
  void *v301[2];
  char v302;
  char *v303;
  std::__shared_weak_count *v304;
  void *v305[2];
  char v306;
  void *v307[2];
  char v308;
  char *v309;
  std::__shared_weak_count *v310;
  void *v311;
  std::__shared_weak_count *v312;
  __n128 v313;
  __int128 v314;
  __int128 v315;
  void *v316[2];
  uint64_t v317;
  void *v318;
  void *v319;
  _QWORD *v320;
  __n128 v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  char **v325;
  __n128 v326;
  __n128 v327;
  __n128 v328;
  __n128 v329;
  void *__p;
  void *v331;
  _QWORD *v332;
  void *v333;
  void *v334;
  _QWORD *v335;
  void *v336;
  void *v337;
  _QWORD *v338;
  void *v339;
  void *v340;
  _QWORD *v341;
  void *v342;
  void *v343;
  _QWORD *v344;
  void *v345;
  void *v346;
  _QWORD *v347;
  void *v348;
  void *v349;
  _QWORD *v350;
  __n128 v351;
  _QWORD *v352;
  void *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD v361[3];
  _QWORD v362[3];
  _QWORD v363[3];
  _QWORD v364[3];
  _BYTE v365[24];
  _BYTE *v366;
  _BYTE v367[24];
  _BYTE *v368;
  _BYTE v369[24];
  _BYTE *v370;
  char *Scalar;
  char *v372;
  char *v373;
  char *v374;
  char **v375;
  uint64_t v376;

  v376 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v352 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (char *)operator new(0x10uLL);
  v372 = v11 + 16;
  v373 = v11 + 16;
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  Scalar = v11;
  v353 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v350 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v348 = v14;
  v349 = v14 + 2;
  v354 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v348);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v347 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  v345 = v17;
  v346 = v17 + 2;
  v355 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v345);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(0x10uLL);
  v344 = v20 + 2;
  *v20 = v18;
  v20[1] = v19;
  v342 = v20;
  v343 = v20 + 2;
  v356 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v342);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(0x10uLL);
  v341 = v23 + 2;
  *v23 = v21;
  v23[1] = v22;
  v339 = v23;
  v340 = v23 + 2;
  v357 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v339);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(0x10uLL);
  v338 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v336 = v26;
  v337 = v26 + 2;
  v358 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v336);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v335 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v333 = v29;
  v334 = v29 + 2;
  v359 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v333);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(0x10uLL);
  v332 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  __p = v32;
  v331 = v32 + 2;
  v360 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v353, 8, &v351);
  MIL::IRParameter::Make(&v351, (uint64_t *)&v318);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "data", (uint64_t *)&v318);
  v33 = v318;
  v318 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v351.n128_u64[1];
  if (v351.n128_u64[1])
  {
    v35 = (unint64_t *)(v351.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (__p)
  {
    v331 = __p;
    operator delete(__p);
  }
  if (v333)
  {
    v334 = v333;
    operator delete(v333);
  }
  if (v336)
  {
    v337 = v336;
    operator delete(v336);
  }
  if (v339)
  {
    v340 = v339;
    operator delete(v339);
  }
  if (v342)
  {
    v343 = v342;
    operator delete(v342);
  }
  if (v345)
  {
    v346 = v345;
    operator delete(v345);
  }
  if (v348)
  {
    v349 = v348;
    operator delete(v348);
  }
  if (Scalar)
  {
    v372 = Scalar;
    operator delete(Scalar);
  }
  v37 = v352;
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = (char *)operator new(0x10uLL);
  v372 = v40 + 16;
  v373 = v40 + 16;
  *(_QWORD *)v40 = v38;
  *((_QWORD *)v40 + 1) = v39;
  Scalar = v40;
  v353 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(0x10uLL);
  v350 = v43 + 2;
  *v43 = v41;
  v43[1] = v42;
  v348 = v43;
  v349 = v43 + 2;
  v354 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v348);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(0x10uLL);
  v347 = v46 + 2;
  *v46 = v44;
  v46[1] = v45;
  v345 = v46;
  v346 = v46 + 2;
  v355 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v345);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(0x10uLL);
  v344 = v49 + 2;
  *v49 = v47;
  v49[1] = v48;
  v342 = v49;
  v343 = v49 + 2;
  v356 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v342);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(0x10uLL);
  v341 = v52 + 2;
  *v52 = v50;
  v52[1] = v51;
  v339 = v52;
  v340 = v52 + 2;
  v357 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v339);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v353, 5, &v329);
  MIL::IRParameter::Make(&v329, (uint64_t *)&v336);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v37, "indices", (uint64_t *)&v336);
  v53 = v336;
  v336 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = (std::__shared_weak_count *)v329.n128_u64[1];
  if (v329.n128_u64[1])
  {
    v55 = (unint64_t *)(v329.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v339)
  {
    v340 = v339;
    operator delete(v339);
  }
  if (v342)
  {
    v343 = v342;
    operator delete(v342);
  }
  if (v345)
  {
    v346 = v345;
    operator delete(v345);
  }
  if (v348)
  {
    v349 = v348;
    operator delete(v348);
  }
  if (Scalar)
  {
    v372 = Scalar;
    operator delete(Scalar);
  }
  v57 = v352;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v328);
  MIL::IRParameter::Make(&v328, (uint64_t *)&v353);
  v58 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v57, "validate_indices", (uint64_t *)&v353);
  v59 = v353;
  v353 = 0;
  if (v59)
    (*(void (**)(void *))(*(_QWORD *)v59 + 8))(v59);
  v60 = (std::__shared_weak_count *)v328.n128_u64[1];
  if (v328.n128_u64[1])
  {
    v61 = (unint64_t *)(v328.n128_u64[1] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v58 + 5) + 32))(*((_QWORD *)v58 + 5), 1);
  v63 = v352;
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = (char *)operator new(0x10uLL);
  v372 = v66 + 16;
  v373 = v66 + 16;
  *(_QWORD *)v66 = v64;
  *((_QWORD *)v66 + 1) = v65;
  Scalar = v66;
  v353 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(0x10uLL);
  v350 = v69 + 2;
  *v69 = v67;
  v69[1] = v68;
  v348 = v69;
  v349 = v69 + 2;
  v354 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v348);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(0x10uLL);
  v347 = v72 + 2;
  *v72 = v70;
  v72[1] = v71;
  v345 = v72;
  v346 = v72 + 2;
  v355 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v345);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(0x10uLL);
  v344 = v75 + 2;
  *v75 = v73;
  v75[1] = v74;
  v342 = v75;
  v343 = v75 + 2;
  v356 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v342);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(0x10uLL);
  v341 = v78 + 2;
  *v78 = v76;
  v78[1] = v77;
  v339 = v78;
  v340 = v78 + 2;
  v357 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v339);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v81 = operator new(0x10uLL);
  v338 = v81 + 2;
  *v81 = v79;
  v81[1] = v80;
  v336 = v81;
  v337 = v81 + 2;
  v358 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v336);
  v82 = MIL::IRUnknownDimension::Make(a1, 0);
  v83 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v84 = operator new(0x10uLL);
  v335 = v84 + 2;
  *v84 = v82;
  v84[1] = v83;
  v333 = v84;
  v334 = v84 + 2;
  v359 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v333);
  v85 = MIL::IRUnknownDimension::Make(a1, 0);
  v86 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v87 = operator new(0x10uLL);
  v332 = v87 + 2;
  *v87 = v85;
  v87[1] = v86;
  __p = v87;
  v331 = v87 + 2;
  v360 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v353, 8, &v327);
  MIL::IRParameter::Make(&v327, (uint64_t *)&v318);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v63, "updates", (uint64_t *)&v318);
  v88 = v318;
  v318 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v327.n128_u64[1];
  if (v327.n128_u64[1])
  {
    v90 = (unint64_t *)(v327.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (__p)
  {
    v331 = __p;
    operator delete(__p);
  }
  if (v333)
  {
    v334 = v333;
    operator delete(v333);
  }
  if (v336)
  {
    v337 = v336;
    operator delete(v336);
  }
  if (v339)
  {
    v340 = v339;
    operator delete(v339);
  }
  if (v342)
  {
    v343 = v342;
    operator delete(v342);
  }
  if (v345)
  {
    v346 = v345;
    operator delete(v345);
  }
  if (v348)
  {
    v349 = v348;
    operator delete(v348);
  }
  if (Scalar)
  {
    v372 = Scalar;
    operator delete(Scalar);
  }
  v92 = v352;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v326);
  MIL::IRParameter::Make(&v326, (uint64_t *)&v353);
  v93 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v92, "mode", (uint64_t *)&v353);
  v94 = v353;
  v353 = 0;
  if (v94)
    (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
  v95 = (std::__shared_weak_count *)v326.n128_u64[1];
  if (v326.n128_u64[1])
  {
    v96 = (unint64_t *)(v326.n128_u64[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v93 + 5) + 32))(*((_QWORD *)v93 + 5), 1);
  v325 = 0;
  v98 = operator new();
  *(_QWORD *)v98 = 0;
  *(_QWORD *)(v98 + 8) = 0;
  *(_QWORD *)(v98 + 16) = 0;
  v353 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v325, (void **)v98);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v353, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v325, 1uLL);
  v99 = v325;
  v100 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v101 = operator new(8uLL);
  v348 = v101;
  *v101 = v100;
  v350 = v101 + 1;
  v349 = v101 + 1;
  v353 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v348);
  v102 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v103 = operator new(8uLL);
  v345 = v103;
  *v103 = v102;
  v347 = v103 + 1;
  v346 = v103 + 1;
  v354 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v345);
  v104 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v105 = operator new(8uLL);
  v342 = v105;
  *v105 = v104;
  v344 = v105 + 1;
  v343 = v105 + 1;
  v355 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v342);
  v106 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v107 = operator new(8uLL);
  v339 = v107;
  *v107 = v106;
  v341 = v107 + 1;
  v340 = v107 + 1;
  v356 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v339);
  v108 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v109 = operator new(8uLL);
  v336 = v109;
  *v109 = v108;
  v338 = v109 + 1;
  v337 = v109 + 1;
  v357 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v336);
  v110 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v111 = operator new(8uLL);
  v333 = v111;
  *v111 = v110;
  v335 = v111 + 1;
  v334 = v111 + 1;
  v358 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v333);
  v112 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v113 = operator new(8uLL);
  __p = v113;
  *v113 = v112;
  v332 = v113 + 1;
  v331 = v113 + 1;
  v359 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v114 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v115 = operator new(8uLL);
  v318 = v115;
  *v115 = v114;
  v320 = v115 + 1;
  v319 = v115 + 1;
  v360 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v318);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v353, 8, &v321);
  MIL::IRParameter::Make(&v321, &v322);
  v116 = v322;
  v323 = v322;
  if (v322)
  {
    v117 = (_QWORD *)operator new();
    v118 = v322;
    *v117 = &unk_1EA99F888;
    v117[1] = 0;
    v117[2] = 0;
    v117[3] = v118;
  }
  else
  {
    v117 = 0;
  }
  v324 = v117;
  v322 = 0;
  v119 = v99[2];
  v120 = v99[1];
  if (v120 >= v119)
  {
    v122 = (v120 - *v99) >> 4;
    v123 = v122 + 1;
    if ((unint64_t)(v122 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v124 = v119 - *v99;
    if (v124 >> 3 > v123)
      v123 = v124 >> 3;
    if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0)
      v125 = 0xFFFFFFFFFFFFFFFLL;
    else
      v125 = v123;
    v375 = v99 + 2;
    v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v99 + 2), v125);
    v128 = (uint64_t *)&v126[16 * v122];
    *v128 = v116;
    v128[1] = (uint64_t)v117;
    v324 = 0;
    v323 = 0;
    v130 = *v99;
    v129 = v99[1];
    if (v129 == *v99)
    {
      v133 = v99[1];
      v131 = &v126[16 * v122];
    }
    else
    {
      v131 = &v126[16 * v122];
      do
      {
        v132 = *((_OWORD *)v129 - 1);
        v129 -= 16;
        *((_OWORD *)v131 - 1) = v132;
        v131 -= 16;
        *(_QWORD *)v129 = 0;
        *((_QWORD *)v129 + 1) = 0;
      }
      while (v129 != v130);
      v133 = *v99;
      v129 = v99[1];
    }
    v121 = (char *)(v128 + 2);
    *v99 = v131;
    Scalar = v133;
    v372 = v133;
    v99[1] = (char *)(v128 + 2);
    v373 = v129;
    v134 = v99[2];
    v99[2] = &v126[16 * v127];
    v374 = v134;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v120 = v116;
    *((_QWORD *)v120 + 1) = v117;
    v121 = v120 + 16;
    v324 = 0;
    v323 = 0;
  }
  v99[1] = v121;
  v135 = v322;
  v322 = 0;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  v136 = (std::__shared_weak_count *)v321.n128_u64[1];
  if (v321.n128_u64[1])
  {
    v137 = (unint64_t *)(v321.n128_u64[1] + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  if (v318)
  {
    v319 = v318;
    operator delete(v318);
  }
  if (__p)
  {
    v331 = __p;
    operator delete(__p);
  }
  if (v333)
  {
    v334 = v333;
    operator delete(v333);
  }
  if (v336)
  {
    v337 = v336;
    operator delete(v336);
  }
  if (v339)
  {
    v340 = v339;
    operator delete(v339);
  }
  if (v342)
  {
    v343 = v342;
    operator delete(v342);
  }
  if (v345)
  {
    v346 = v345;
    operator delete(v345);
  }
  if (v348)
  {
    v349 = v348;
    operator delete(v348);
  }
  *(_OWORD *)v316 = *(_OWORD *)a2;
  v317 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v139 = (uint64_t)v352;
  *(_QWORD *)&v315 = v352;
  if (v352)
  {
    v140 = (_QWORD *)operator new();
    *v140 = &unk_1EA99F8E8;
    v140[1] = 0;
    v140[2] = 0;
    v140[3] = v139;
  }
  else
  {
    v140 = 0;
  }
  *((_QWORD *)&v315 + 1) = v140;
  v352 = 0;
  *(_QWORD *)&v314 = v325;
  if (v325)
  {
    v141 = (_QWORD *)operator new();
    v142 = v325;
    *v141 = &unk_1EA99F948;
    v141[1] = 0;
    v141[2] = 0;
    v141[3] = v142;
  }
  else
  {
    v141 = 0;
  }
  *((_QWORD *)&v314 + 1) = v141;
  v325 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v369, a3);
  v368 = 0;
  MIL::IROperator::Make((__int128 *)v316, &v315, &v314, (uint64_t)v369, (uint64_t)v367, a4);
  v143 = v368;
  if (v368 == v367)
  {
    v144 = 4;
    v143 = v367;
  }
  else
  {
    if (!v368)
      goto LABEL_129;
    v144 = 5;
  }
  (*(void (**)(void))(*v143 + 8 * v144))();
LABEL_129:
  v145 = v370;
  if (v370 == v369)
  {
    v146 = 4;
    v145 = v369;
    goto LABEL_133;
  }
  if (v370)
  {
    v146 = 5;
LABEL_133:
    (*(void (**)(void))(*v145 + 8 * v146))();
  }
  v147 = (std::__shared_weak_count *)*((_QWORD *)&v314 + 1);
  if (*((_QWORD *)&v314 + 1))
  {
    v148 = (unint64_t *)(*((_QWORD *)&v314 + 1) + 8);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = (std::__shared_weak_count *)*((_QWORD *)&v315 + 1);
  if (*((_QWORD *)&v315 + 1))
  {
    v151 = (unint64_t *)(*((_QWORD *)&v315 + 1) + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  if (SHIBYTE(v317) < 0)
    operator delete(v316[0]);
  v348 = 0;
  v153 = (_OWORD *)operator new();
  *v153 = 0u;
  v153[1] = 0u;
  *((_DWORD *)v153 + 8) = 1065353216;
  v348 = v153;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v313);
  MIL::IRParameter::Make(&v313, (uint64_t *)&v353);
  v154 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v153, "minimum_compute_type", (uint64_t *)&v353);
  v155 = v353;
  v353 = 0;
  if (v155)
    (*(void (**)(void *))(*(_QWORD *)v155 + 8))(v155);
  v156 = (std::__shared_weak_count *)v313.n128_u64[1];
  if (v313.n128_u64[1])
  {
    v157 = (unint64_t *)(v313.n128_u64[1] + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v154 + 5) + 32))(*((_QWORD *)v154 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v154 + 5) + 48))(*((_QWORD *)v154 + 5), 1);
  v159 = *a4;
  v160 = (std::__shared_weak_count_vtbl *)v348;
  v311 = v348;
  if (v348)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v160;
  }
  else
  {
    v161 = 0;
  }
  v312 = v161;
  v348 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v159 + 184))(v159, &v311);
  v162 = v312;
  if (v312)
  {
    p_shared_owners = (unint64_t *)&v312->__shared_owners_;
    do
      v164 = __ldaxr(p_shared_owners);
    while (__stlxr(v164 - 1, p_shared_owners));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v353, "data");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v353, (uint64_t)v365);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v165 + 200))(v165, v365);
  v166 = v366;
  if (v366 == v365)
  {
    v167 = 4;
    v166 = v365;
  }
  else
  {
    if (!v366)
      goto LABEL_166;
    v167 = 5;
  }
  (*(void (**)(void))(*v166 + 8 * v167))();
LABEL_166:
  if (SHIBYTE(v355) < 0)
    operator delete(v353);
  MIL::Validation::TensorDTypeConstraints::Make(&v353);
  v168 = v353;
  std::string::basic_string[abi:ne180100]<0>(v307, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v307, 0, (uint64_t *)&Scalar);
  v309 = Scalar;
  if (Scalar)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = (std::__shared_weak_count_vtbl *)Scalar;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v170;
  }
  else
  {
    v169 = 0;
  }
  v310 = v169;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v305, "T");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v168 + 24))(v168, &v309, v305);
  if (v306 < 0)
    operator delete(v305[0]);
  v171 = v310;
  if (v310)
  {
    v172 = (unint64_t *)&v310->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = Scalar;
  Scalar = 0;
  if (v174)
    (*(void (**)(char *))(*(_QWORD *)v174 + 8))(v174);
  if (v308 < 0)
    operator delete(v307[0]);
  v175 = v353;
  std::string::basic_string[abi:ne180100]<0>(v301, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v301, 0, (uint64_t *)&Scalar);
  v303 = Scalar;
  if (Scalar)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = (std::__shared_weak_count_vtbl *)Scalar;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = v177;
  }
  else
  {
    v176 = 0;
  }
  v304 = v176;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v299, "J");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v175 + 24))(v175, &v303, v299);
  if (v300 < 0)
    operator delete(v299[0]);
  v178 = v304;
  if (v304)
  {
    v179 = (unint64_t *)&v304->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = Scalar;
  Scalar = 0;
  if (v181)
    (*(void (**)(char *))(*(_QWORD *)v181 + 8))(v181);
  if (v302 < 0)
    operator delete(v301[0]);
  v182 = v353;
  std::string::basic_string[abi:ne180100]<0>(v295, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v295, 0, (uint64_t *)&Scalar);
  v297 = Scalar;
  if (Scalar)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = (std::__shared_weak_count_vtbl *)Scalar;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = v184;
  }
  else
  {
    v183 = 0;
  }
  v298 = v183;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v293, "T");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v182 + 24))(v182, &v297, v293);
  if (v294 < 0)
    operator delete(v293[0]);
  v185 = v298;
  if (v298)
  {
    v186 = (unint64_t *)&v298->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = Scalar;
  Scalar = 0;
  if (v188)
    (*(void (**)(char *))(*(_QWORD *)v188 + 8))(v188);
  if (v296 < 0)
    operator delete(v295[0]);
  v189 = v353;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v291 = Scalar;
  if (Scalar)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = (std::__shared_weak_count_vtbl *)Scalar;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v191;
  }
  else
  {
    v190 = 0;
  }
  v292 = v190;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v289, "T");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v189 + 24))(v189, &v291, v289);
  if (v290 < 0)
    operator delete(v289[0]);
  v192 = v292;
  if (v292)
  {
    v193 = (unint64_t *)&v292->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = Scalar;
  Scalar = 0;
  if (v195)
    (*(void (**)(char *))(*(_QWORD *)v195 + 8))(v195);
  v196 = *a4;
  v287 = v353;
  if (v353)
  {
    v197 = (std::__shared_weak_count *)operator new();
    v198 = (std::__shared_weak_count_vtbl *)v353;
    v197->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v197->__shared_owners_ = 0;
    v197->__shared_weak_owners_ = 0;
    v197[1].__vftable = v198;
  }
  else
  {
    v197 = 0;
  }
  v288 = v197;
  v353 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v196 + 56))(v196, &v287);
  v199 = v288;
  if (v288)
  {
    v200 = (unint64_t *)&v288->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = v353;
  v353 = 0;
  if (v202)
    (*(void (**)(void *))(*(_QWORD *)v202 + 8))(v202);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v353);
  v203 = v353;
  std::string::basic_string[abi:ne180100]<0>(v283, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v283, 0, (uint64_t *)&Scalar);
  v285 = Scalar;
  if (Scalar)
  {
    v204 = (std::__shared_weak_count *)operator new();
    v205 = (std::__shared_weak_count_vtbl *)Scalar;
    v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v204->__shared_owners_ = 0;
    v204->__shared_weak_owners_ = 0;
    v204[1].__vftable = v205;
  }
  else
  {
    v204 = 0;
  }
  v286 = v204;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v281, "D");
  (*(void (**)(void *, char **, _QWORD, void **))(*(_QWORD *)v203 + 24))(v203, &v285, 0, v281);
  if (v282 < 0)
    operator delete(v281[0]);
  v206 = v286;
  if (v286)
  {
    v207 = (unint64_t *)&v286->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = Scalar;
  Scalar = 0;
  if (v209)
    (*(void (**)(char *))(*(_QWORD *)v209 + 8))(v209);
  if (v284 < 0)
    operator delete(v283[0]);
  v210 = v353;
  std::string::basic_string[abi:ne180100]<0>(v277, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v277, 0, (uint64_t *)&Scalar);
  v279 = Scalar;
  if (Scalar)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = (std::__shared_weak_count_vtbl *)Scalar;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = v212;
  }
  else
  {
    v211 = 0;
  }
  v280 = v211;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v275, "I");
  (*(void (**)(void *, char **, _QWORD, void **))(*(_QWORD *)v210 + 24))(v210, &v279, 0, v275);
  if (v276 < 0)
    operator delete(v275[0]);
  v213 = v280;
  if (v280)
  {
    v214 = (unint64_t *)&v280->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = Scalar;
  Scalar = 0;
  if (v216)
    (*(void (**)(char *))(*(_QWORD *)v216 + 8))(v216);
  if (v278 < 0)
    operator delete(v277[0]);
  v217 = v353;
  std::string::basic_string[abi:ne180100]<0>(v271, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v271, 0, (uint64_t *)&Scalar);
  v273 = Scalar;
  if (Scalar)
  {
    v218 = (std::__shared_weak_count *)operator new();
    v219 = (std::__shared_weak_count_vtbl *)Scalar;
    v218->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v218->__shared_owners_ = 0;
    v218->__shared_weak_owners_ = 0;
    v218[1].__vftable = v219;
  }
  else
  {
    v218 = 0;
  }
  v274 = v218;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v269, "U");
  (*(void (**)(void *, char **, _QWORD, void **))(*(_QWORD *)v217 + 24))(v217, &v273, 0, v269);
  if (v270 < 0)
    operator delete(v269[0]);
  v220 = v274;
  if (v274)
  {
    v221 = (unint64_t *)&v274->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = Scalar;
  Scalar = 0;
  if (v223)
    (*(void (**)(char *))(*(_QWORD *)v223 + 8))(v223);
  if (v272 < 0)
    operator delete(v271[0]);
  v224 = *a4;
  v267 = v353;
  if (v353)
  {
    v225 = (std::__shared_weak_count *)operator new();
    v226 = (std::__shared_weak_count_vtbl *)v353;
    v225->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v225->__shared_owners_ = 0;
    v225->__shared_weak_owners_ = 0;
    v225[1].__vftable = v226;
  }
  else
  {
    v225 = 0;
  }
  v268 = v225;
  v353 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v224 + 56))(v224, &v267);
  v227 = v268;
  if (v268)
  {
    v228 = (unint64_t *)&v268->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = v353;
  v353 = 0;
  if (v230)
    (*(void (**)(void *))(*(_QWORD *)v230 + 8))(v230);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v345);
  v231 = v345;
  std::string::basic_string[abi:ne180100]<0>(v263, "mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v263, 0, (uint64_t *)&v342);
  v265 = v342;
  if (v342)
  {
    v232 = (std::__shared_weak_count *)operator new();
    v233 = (std::__shared_weak_count_vtbl *)v342;
    v232->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v232->__shared_owners_ = 0;
    v232->__shared_weak_owners_ = 0;
    v232[1].__vftable = v233;
  }
  else
  {
    v232 = 0;
  }
  v266 = v232;
  v342 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v353, "add");
  std::string::basic_string[abi:ne180100]<0>(&v356, "div");
  std::string::basic_string[abi:ne180100]<0>(&v359, "max");
  std::string::basic_string[abi:ne180100]<0>(v361, "min");
  std::string::basic_string[abi:ne180100]<0>(v362, "mul");
  std::string::basic_string[abi:ne180100]<0>(v363, "sub");
  std::string::basic_string[abi:ne180100]<0>(v364, "update");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v353, 7);
  (*(void (**)(void *, void **, char **, _QWORD))(*(_QWORD *)v231 + 24))(v231, &v265, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v364[i + 2]) < 0)
      operator delete((void *)v364[i]);
  }
  v235 = v266;
  if (v266)
  {
    v236 = (unint64_t *)&v266->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v238 = v342;
  v342 = 0;
  if (v238)
    (*(void (**)(void *))(*(_QWORD *)v238 + 8))(v238);
  if (v264 < 0)
    operator delete(v263[0]);
  v239 = v345;
  std::string::basic_string[abi:ne180100]<0>(v259, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v259, 1, (uint64_t *)&v342);
  v261 = v342;
  if (v342)
  {
    v240 = (std::__shared_weak_count *)operator new();
    v241 = (std::__shared_weak_count_vtbl *)v342;
    v240->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v240->__shared_owners_ = 0;
    v240->__shared_weak_owners_ = 0;
    v240[1].__vftable = v241;
  }
  else
  {
    v240 = 0;
  }
  v262 = v240;
  v342 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v353, "bf16");
  std::string::basic_string[abi:ne180100]<0>(&v356, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v359, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v361, "int32");
  std::string::basic_string[abi:ne180100]<0>(v362, "int8");
  std::string::basic_string[abi:ne180100]<0>(v363, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v353, 6);
  (*(void (**)(void *, void **, char **, uint64_t))(*(_QWORD *)v239 + 24))(v239, &v261, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v363[j + 2]) < 0)
      operator delete((void *)v363[j]);
  }
  v243 = v262;
  if (v262)
  {
    v244 = (unint64_t *)&v262->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  v246 = v342;
  v342 = 0;
  if (v246)
    (*(void (**)(void *))(*(_QWORD *)v246 + 8))(v246);
  if (v260 < 0)
    operator delete(v259[0]);
  v247 = *a4;
  v257 = v345;
  if (v345)
  {
    v248 = (std::__shared_weak_count *)operator new();
    v249 = (std::__shared_weak_count_vtbl *)v345;
    v248->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v248->__shared_owners_ = 0;
    v248->__shared_weak_owners_ = 0;
    v248[1].__vftable = v249;
  }
  else
  {
    v248 = 0;
  }
  v258 = v248;
  v345 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v247 + 56))(v247, &v257);
  v250 = v258;
  if (v258)
  {
    v251 = (unint64_t *)&v258->__shared_owners_;
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v253 = v345;
  v345 = 0;
  if (v253)
    (*(void (**)(void *))(*(_QWORD *)v253 + 8))(v253);
  if (v348)
  {
    v254 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v348);
    MEMORY[0x1E0C023A0](v254, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v325, 0);
  result = (uint64_t)v352;
  if (v352)
  {
    v256 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v352);
    return MEMORY[0x1E0C023A0](v256, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A012D4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x390];
  STACK[0x390] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3A8], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2D0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3D0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::BaseScatterWithAxis::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  unsigned __int8 *v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  unsigned __int8 *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  unsigned __int8 *v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  char **v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t *v134;
  char *v135;
  char *v136;
  char *v137;
  __int128 v138;
  char *v139;
  char *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  char **v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _OWORD *v159;
  unsigned __int8 *v160;
  void *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  unint64_t *p_shared_owners;
  unint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  void *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  char *v180;
  void *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  char *v187;
  void *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  char *v194;
  void *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  char *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  void *v208;
  void *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  char *v215;
  void *v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  char *v222;
  void *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  char *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  void *v236;
  void *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count_vtbl *v239;
  uint64_t i;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  void *v244;
  void *v245;
  std::__shared_weak_count *v246;
  std::__shared_weak_count_vtbl *v247;
  uint64_t j;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  void *v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t result;
  uint64_t v262;
  void *v263;
  std::__shared_weak_count *v264;
  void *v265[2];
  char v266;
  void *v267;
  std::__shared_weak_count *v268;
  void *v269[2];
  char v270;
  void *v271;
  std::__shared_weak_count *v272;
  void *v273;
  std::__shared_weak_count *v274;
  void *v275[2];
  char v276;
  void *v277[2];
  char v278;
  char *v279;
  std::__shared_weak_count *v280;
  void *v281[2];
  char v282;
  void *v283[2];
  char v284;
  char *v285;
  std::__shared_weak_count *v286;
  void *v287[2];
  char v288;
  void *v289[2];
  char v290;
  char *v291;
  std::__shared_weak_count *v292;
  void *v293;
  std::__shared_weak_count *v294;
  void *v295[2];
  char v296;
  char *v297;
  std::__shared_weak_count *v298;
  void *v299[2];
  char v300;
  void *v301[2];
  char v302;
  char *v303;
  std::__shared_weak_count *v304;
  void *v305[2];
  char v306;
  void *v307[2];
  char v308;
  char *v309;
  std::__shared_weak_count *v310;
  void *v311[2];
  char v312;
  void *v313[2];
  char v314;
  char *v315;
  std::__shared_weak_count *v316;
  void *v317;
  std::__shared_weak_count *v318;
  __n128 v319;
  __int128 v320;
  __int128 v321;
  void *v322[2];
  uint64_t v323;
  void *v324;
  void *v325;
  _QWORD *v326;
  __n128 v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  char **v331;
  __n128 v332;
  __n128 v333;
  __n128 v334;
  __n128 v335;
  __n128 v336;
  void *__p;
  void *v338;
  _QWORD *v339;
  void *v340;
  void *v341;
  _QWORD *v342;
  void *v343;
  void *v344;
  _QWORD *v345;
  void *v346;
  void *v347;
  _QWORD *v348;
  void *v349;
  void *v350;
  _QWORD *v351;
  void *v352;
  void *v353;
  _QWORD *v354;
  void *v355;
  void *v356;
  _QWORD *v357;
  __n128 v358;
  _QWORD *v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  _QWORD v368[3];
  _QWORD v369[3];
  _QWORD v370[3];
  _QWORD v371[3];
  _BYTE v372[24];
  _BYTE *v373;
  _BYTE v374[24];
  _BYTE *v375;
  _QWORD v376[3];
  _QWORD *v377;
  char *Scalar;
  char *v379;
  char *v380;
  char *v381;
  char **v382;
  uint64_t v383;

  v383 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v359 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (char *)operator new(0x10uLL);
  v379 = v11 + 16;
  v380 = v11 + 16;
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  Scalar = v11;
  v360 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v357 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v355 = v14;
  v356 = v14 + 2;
  v361 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v355);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v354 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  v352 = v17;
  v353 = v17 + 2;
  v362 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v352);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(0x10uLL);
  v351 = v20 + 2;
  *v20 = v18;
  v20[1] = v19;
  v349 = v20;
  v350 = v20 + 2;
  v363 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v349);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(0x10uLL);
  v348 = v23 + 2;
  *v23 = v21;
  v23[1] = v22;
  v346 = v23;
  v347 = v23 + 2;
  v364 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v346);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(0x10uLL);
  v345 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v343 = v26;
  v344 = v26 + 2;
  v365 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v343);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v342 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v340 = v29;
  v341 = v29 + 2;
  v366 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v340);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(0x10uLL);
  v339 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  __p = v32;
  v338 = v32 + 2;
  v367 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v360, 8, &v358);
  MIL::IRParameter::Make(&v358, (uint64_t *)&v324);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "data", (uint64_t *)&v324);
  v33 = v324;
  v324 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v358.n128_u64[1];
  if (v358.n128_u64[1])
  {
    v35 = (unint64_t *)(v358.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (__p)
  {
    v338 = __p;
    operator delete(__p);
  }
  if (v340)
  {
    v341 = v340;
    operator delete(v340);
  }
  if (v343)
  {
    v344 = v343;
    operator delete(v343);
  }
  if (v346)
  {
    v347 = v346;
    operator delete(v346);
  }
  if (v349)
  {
    v350 = v349;
    operator delete(v349);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v355)
  {
    v356 = v355;
    operator delete(v355);
  }
  if (Scalar)
  {
    v379 = Scalar;
    operator delete(Scalar);
  }
  v37 = v359;
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = (char *)operator new(0x10uLL);
  v379 = v40 + 16;
  v380 = v40 + 16;
  *(_QWORD *)v40 = v38;
  *((_QWORD *)v40 + 1) = v39;
  Scalar = v40;
  v360 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(0x10uLL);
  v357 = v43 + 2;
  *v43 = v41;
  v43[1] = v42;
  v355 = v43;
  v356 = v43 + 2;
  v361 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v355);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(0x10uLL);
  v354 = v46 + 2;
  *v46 = v44;
  v46[1] = v45;
  v352 = v46;
  v353 = v46 + 2;
  v362 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v352);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(0x10uLL);
  v351 = v49 + 2;
  *v49 = v47;
  v49[1] = v48;
  v349 = v49;
  v350 = v49 + 2;
  v363 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v349);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(0x10uLL);
  v348 = v52 + 2;
  *v52 = v50;
  v52[1] = v51;
  v346 = v52;
  v347 = v52 + 2;
  v364 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v346);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v360, 5, &v336);
  MIL::IRParameter::Make(&v336, (uint64_t *)&v343);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v37, "indices", (uint64_t *)&v343);
  v53 = v343;
  v343 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = (std::__shared_weak_count *)v336.n128_u64[1];
  if (v336.n128_u64[1])
  {
    v55 = (unint64_t *)(v336.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v346)
  {
    v347 = v346;
    operator delete(v346);
  }
  if (v349)
  {
    v350 = v349;
    operator delete(v349);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v355)
  {
    v356 = v355;
    operator delete(v355);
  }
  if (Scalar)
  {
    v379 = Scalar;
    operator delete(Scalar);
  }
  v57 = v359;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v335);
  MIL::IRParameter::Make(&v335, (uint64_t *)&v360);
  v58 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v57, "validate_indices", (uint64_t *)&v360);
  v59 = v360;
  v360 = 0;
  if (v59)
    (*(void (**)(void *))(*(_QWORD *)v59 + 8))(v59);
  v60 = (std::__shared_weak_count *)v335.n128_u64[1];
  if (v335.n128_u64[1])
  {
    v61 = (unint64_t *)(v335.n128_u64[1] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v58 + 5) + 32))(*((_QWORD *)v58 + 5), 1);
  v63 = v359;
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = (char *)operator new(0x10uLL);
  v379 = v66 + 16;
  v380 = v66 + 16;
  *(_QWORD *)v66 = v64;
  *((_QWORD *)v66 + 1) = v65;
  Scalar = v66;
  v360 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(0x10uLL);
  v357 = v69 + 2;
  *v69 = v67;
  v69[1] = v68;
  v355 = v69;
  v356 = v69 + 2;
  v361 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v355);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(0x10uLL);
  v354 = v72 + 2;
  *v72 = v70;
  v72[1] = v71;
  v352 = v72;
  v353 = v72 + 2;
  v362 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v352);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(0x10uLL);
  v351 = v75 + 2;
  *v75 = v73;
  v75[1] = v74;
  v349 = v75;
  v350 = v75 + 2;
  v363 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v349);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(0x10uLL);
  v348 = v78 + 2;
  *v78 = v76;
  v78[1] = v77;
  v346 = v78;
  v347 = v78 + 2;
  v364 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v346);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v81 = operator new(0x10uLL);
  v345 = v81 + 2;
  *v81 = v79;
  v81[1] = v80;
  v343 = v81;
  v344 = v81 + 2;
  v365 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v343);
  v82 = MIL::IRUnknownDimension::Make(a1, 0);
  v83 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v84 = operator new(0x10uLL);
  v342 = v84 + 2;
  *v84 = v82;
  v84[1] = v83;
  v340 = v84;
  v341 = v84 + 2;
  v366 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v340);
  v85 = MIL::IRUnknownDimension::Make(a1, 0);
  v86 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v87 = operator new(0x10uLL);
  v339 = v87 + 2;
  *v87 = v85;
  v87[1] = v86;
  __p = v87;
  v338 = v87 + 2;
  v367 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v360, 8, &v334);
  MIL::IRParameter::Make(&v334, (uint64_t *)&v324);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v63, "updates", (uint64_t *)&v324);
  v88 = v324;
  v324 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v334.n128_u64[1];
  if (v334.n128_u64[1])
  {
    v90 = (unint64_t *)(v334.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (__p)
  {
    v338 = __p;
    operator delete(__p);
  }
  if (v340)
  {
    v341 = v340;
    operator delete(v340);
  }
  if (v343)
  {
    v344 = v343;
    operator delete(v343);
  }
  if (v346)
  {
    v347 = v346;
    operator delete(v346);
  }
  if (v349)
  {
    v350 = v349;
    operator delete(v349);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v355)
  {
    v356 = v355;
    operator delete(v355);
  }
  if (Scalar)
  {
    v379 = Scalar;
    operator delete(Scalar);
  }
  v92 = v359;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v333);
  MIL::IRParameter::Make(&v333, (uint64_t *)&v360);
  v93 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v92, "mode", (uint64_t *)&v360);
  v94 = v360;
  v360 = 0;
  if (v94)
    (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
  v95 = (std::__shared_weak_count *)v333.n128_u64[1];
  if (v333.n128_u64[1])
  {
    v96 = (unint64_t *)(v333.n128_u64[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v93 + 5) + 32))(*((_QWORD *)v93 + 5), 1);
  v98 = v359;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v332);
  MIL::IRParameter::Make(&v332, (uint64_t *)&v360);
  v99 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v98, "axis", (uint64_t *)&v360);
  v100 = v360;
  v360 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  v101 = (std::__shared_weak_count *)v332.n128_u64[1];
  if (v332.n128_u64[1])
  {
    v102 = (unint64_t *)(v332.n128_u64[1] + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v99 + 5) + 32))(*((_QWORD *)v99 + 5), 1);
  v331 = 0;
  v104 = operator new();
  *(_QWORD *)v104 = 0;
  *(_QWORD *)(v104 + 8) = 0;
  *(_QWORD *)(v104 + 16) = 0;
  v360 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v331, (void **)v104);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v360, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v331, 1uLL);
  v105 = v331;
  v106 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v107 = operator new(8uLL);
  v355 = v107;
  *v107 = v106;
  v357 = v107 + 1;
  v356 = v107 + 1;
  v360 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v355);
  v108 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v109 = operator new(8uLL);
  v352 = v109;
  *v109 = v108;
  v354 = v109 + 1;
  v353 = v109 + 1;
  v361 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v352);
  v110 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v111 = operator new(8uLL);
  v349 = v111;
  *v111 = v110;
  v351 = v111 + 1;
  v350 = v111 + 1;
  v362 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v349);
  v112 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v113 = operator new(8uLL);
  v346 = v113;
  *v113 = v112;
  v348 = v113 + 1;
  v347 = v113 + 1;
  v363 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v346);
  v114 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v115 = operator new(8uLL);
  v343 = v115;
  *v115 = v114;
  v345 = v115 + 1;
  v344 = v115 + 1;
  v364 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v343);
  v116 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v117 = operator new(8uLL);
  v340 = v117;
  *v117 = v116;
  v342 = v117 + 1;
  v341 = v117 + 1;
  v365 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v340);
  v118 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v119 = operator new(8uLL);
  __p = v119;
  *v119 = v118;
  v339 = v119 + 1;
  v338 = v119 + 1;
  v366 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v120 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v121 = operator new(8uLL);
  v324 = v121;
  *v121 = v120;
  v326 = v121 + 1;
  v325 = v121 + 1;
  v367 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v324);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v360, 8, &v327);
  MIL::IRParameter::Make(&v327, &v328);
  v122 = v328;
  v329 = v328;
  if (v328)
  {
    v123 = (_QWORD *)operator new();
    v124 = v328;
    *v123 = &unk_1EA99F888;
    v123[1] = 0;
    v123[2] = 0;
    v123[3] = v124;
  }
  else
  {
    v123 = 0;
  }
  v330 = v123;
  v328 = 0;
  v125 = v105[2];
  v126 = v105[1];
  if (v126 >= v125)
  {
    v128 = (v126 - *v105) >> 4;
    v129 = v128 + 1;
    if ((unint64_t)(v128 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v130 = v125 - *v105;
    if (v130 >> 3 > v129)
      v129 = v130 >> 3;
    if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF0)
      v131 = 0xFFFFFFFFFFFFFFFLL;
    else
      v131 = v129;
    v382 = v105 + 2;
    v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v105 + 2), v131);
    v134 = (uint64_t *)&v132[16 * v128];
    *v134 = v122;
    v134[1] = (uint64_t)v123;
    v330 = 0;
    v329 = 0;
    v136 = *v105;
    v135 = v105[1];
    if (v135 == *v105)
    {
      v139 = v105[1];
      v137 = &v132[16 * v128];
    }
    else
    {
      v137 = &v132[16 * v128];
      do
      {
        v138 = *((_OWORD *)v135 - 1);
        v135 -= 16;
        *((_OWORD *)v137 - 1) = v138;
        v137 -= 16;
        *(_QWORD *)v135 = 0;
        *((_QWORD *)v135 + 1) = 0;
      }
      while (v135 != v136);
      v139 = *v105;
      v135 = v105[1];
    }
    v127 = (char *)(v134 + 2);
    *v105 = v137;
    Scalar = v139;
    v379 = v139;
    v105[1] = (char *)(v134 + 2);
    v380 = v135;
    v140 = v105[2];
    v105[2] = &v132[16 * v133];
    v381 = v140;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v126 = v122;
    *((_QWORD *)v126 + 1) = v123;
    v127 = v126 + 16;
    v330 = 0;
    v329 = 0;
  }
  v105[1] = v127;
  v141 = v328;
  v328 = 0;
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  v142 = (std::__shared_weak_count *)v327.n128_u64[1];
  if (v327.n128_u64[1])
  {
    v143 = (unint64_t *)(v327.n128_u64[1] + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  if (v324)
  {
    v325 = v324;
    operator delete(v324);
  }
  if (__p)
  {
    v338 = __p;
    operator delete(__p);
  }
  if (v340)
  {
    v341 = v340;
    operator delete(v340);
  }
  if (v343)
  {
    v344 = v343;
    operator delete(v343);
  }
  if (v346)
  {
    v347 = v346;
    operator delete(v346);
  }
  if (v349)
  {
    v350 = v349;
    operator delete(v349);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v355)
  {
    v356 = v355;
    operator delete(v355);
  }
  *(_OWORD *)v322 = *(_OWORD *)a2;
  v323 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v145 = (uint64_t)v359;
  *(_QWORD *)&v321 = v359;
  if (v359)
  {
    v146 = (_QWORD *)operator new();
    *v146 = &unk_1EA99F8E8;
    v146[1] = 0;
    v146[2] = 0;
    v146[3] = v145;
  }
  else
  {
    v146 = 0;
  }
  *((_QWORD *)&v321 + 1) = v146;
  v359 = 0;
  *(_QWORD *)&v320 = v331;
  if (v331)
  {
    v147 = (_QWORD *)operator new();
    v148 = v331;
    *v147 = &unk_1EA99F948;
    v147[1] = 0;
    v147[2] = 0;
    v147[3] = v148;
  }
  else
  {
    v147 = 0;
  }
  *((_QWORD *)&v320 + 1) = v147;
  v331 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v376, a3);
  }
  else
  {
    v376[0] = &unk_1EA99FAC8;
    v376[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateBaseScatterWithAxis;
    v377 = v376;
  }
  v375 = 0;
  MIL::IROperator::Make((__int128 *)v322, &v321, &v320, (uint64_t)v376, (uint64_t)v374, a4);
  v149 = v375;
  if (v375 == v374)
  {
    v150 = 4;
    v149 = v374;
  }
  else
  {
    if (!v375)
      goto LABEL_139;
    v150 = 5;
  }
  (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_139:
  v151 = v377;
  if (v377 == v376)
  {
    v152 = 4;
    v151 = v376;
    goto LABEL_143;
  }
  if (v377)
  {
    v152 = 5;
LABEL_143:
    (*(void (**)(void))(*v151 + 8 * v152))();
  }
  v153 = (std::__shared_weak_count *)*((_QWORD *)&v320 + 1);
  if (*((_QWORD *)&v320 + 1))
  {
    v154 = (unint64_t *)(*((_QWORD *)&v320 + 1) + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
  if (*((_QWORD *)&v321 + 1))
  {
    v157 = (unint64_t *)(*((_QWORD *)&v321 + 1) + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  if (SHIBYTE(v323) < 0)
    operator delete(v322[0]);
  v355 = 0;
  v159 = (_OWORD *)operator new();
  *v159 = 0u;
  v159[1] = 0u;
  *((_DWORD *)v159 + 8) = 1065353216;
  v355 = v159;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v319);
  MIL::IRParameter::Make(&v319, (uint64_t *)&v360);
  v160 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v159, "minimum_compute_type", (uint64_t *)&v360);
  v161 = v360;
  v360 = 0;
  if (v161)
    (*(void (**)(void *))(*(_QWORD *)v161 + 8))(v161);
  v162 = (std::__shared_weak_count *)v319.n128_u64[1];
  if (v319.n128_u64[1])
  {
    v163 = (unint64_t *)(v319.n128_u64[1] + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v160 + 5) + 32))(*((_QWORD *)v160 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v160 + 5) + 48))(*((_QWORD *)v160 + 5), 1);
  v165 = *a4;
  v166 = (std::__shared_weak_count_vtbl *)v355;
  v317 = v355;
  if (v355)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v166;
  }
  else
  {
    v167 = 0;
  }
  v318 = v167;
  v355 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v165 + 184))(v165, &v317);
  v168 = v318;
  if (v318)
  {
    p_shared_owners = (unint64_t *)&v318->__shared_owners_;
    do
      v170 = __ldaxr(p_shared_owners);
    while (__stlxr(v170 - 1, p_shared_owners));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v360, "data");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v360, (uint64_t)v372);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v171 + 200))(v171, v372);
  v172 = v373;
  if (v373 == v372)
  {
    v173 = 4;
    v172 = v372;
  }
  else
  {
    if (!v373)
      goto LABEL_176;
    v173 = 5;
  }
  (*(void (**)(void))(*v172 + 8 * v173))();
LABEL_176:
  if (SHIBYTE(v362) < 0)
    operator delete(v360);
  MIL::Validation::TensorDTypeConstraints::Make(&v360);
  v174 = v360;
  std::string::basic_string[abi:ne180100]<0>(v313, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v313, 0, (uint64_t *)&Scalar);
  v315 = Scalar;
  if (Scalar)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = (std::__shared_weak_count_vtbl *)Scalar;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v316 = v175;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v311, "T");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v174 + 24))(v174, &v315, v311);
  if (v312 < 0)
    operator delete(v311[0]);
  v177 = v316;
  if (v316)
  {
    v178 = (unint64_t *)&v316->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = Scalar;
  Scalar = 0;
  if (v180)
    (*(void (**)(char *))(*(_QWORD *)v180 + 8))(v180);
  if (v314 < 0)
    operator delete(v313[0]);
  v181 = v360;
  std::string::basic_string[abi:ne180100]<0>(v307, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v307, 0, (uint64_t *)&Scalar);
  v309 = Scalar;
  if (Scalar)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = (std::__shared_weak_count_vtbl *)Scalar;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v310 = v182;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v305, "J");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v181 + 24))(v181, &v309, v305);
  if (v306 < 0)
    operator delete(v305[0]);
  v184 = v310;
  if (v310)
  {
    v185 = (unint64_t *)&v310->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = Scalar;
  Scalar = 0;
  if (v187)
    (*(void (**)(char *))(*(_QWORD *)v187 + 8))(v187);
  if (v308 < 0)
    operator delete(v307[0]);
  v188 = v360;
  std::string::basic_string[abi:ne180100]<0>(v301, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v301, 0, (uint64_t *)&Scalar);
  v303 = Scalar;
  if (Scalar)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = (std::__shared_weak_count_vtbl *)Scalar;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v304 = v189;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v299, "T");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v188 + 24))(v188, &v303, v299);
  if (v300 < 0)
    operator delete(v299[0]);
  v191 = v304;
  if (v304)
  {
    v192 = (unint64_t *)&v304->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = Scalar;
  Scalar = 0;
  if (v194)
    (*(void (**)(char *))(*(_QWORD *)v194 + 8))(v194);
  if (v302 < 0)
    operator delete(v301[0]);
  v195 = v360;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v297 = Scalar;
  if (Scalar)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = (std::__shared_weak_count_vtbl *)Scalar;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v298 = v196;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v295, "T");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v195 + 24))(v195, &v297, v295);
  if (v296 < 0)
    operator delete(v295[0]);
  v198 = v298;
  if (v298)
  {
    v199 = (unint64_t *)&v298->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = Scalar;
  Scalar = 0;
  if (v201)
    (*(void (**)(char *))(*(_QWORD *)v201 + 8))(v201);
  v202 = *a4;
  v293 = v360;
  if (v360)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = (std::__shared_weak_count_vtbl *)v360;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v294 = v203;
  v360 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v202 + 56))(v202, &v293);
  v205 = v294;
  if (v294)
  {
    v206 = (unint64_t *)&v294->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = v360;
  v360 = 0;
  if (v208)
    (*(void (**)(void *))(*(_QWORD *)v208 + 8))(v208);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v360);
  v209 = v360;
  std::string::basic_string[abi:ne180100]<0>(v289, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v289, 0, (uint64_t *)&Scalar);
  v291 = Scalar;
  if (Scalar)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = (std::__shared_weak_count_vtbl *)Scalar;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = v211;
  }
  else
  {
    v210 = 0;
  }
  v292 = v210;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v287, "D");
  (*(void (**)(void *, char **, _QWORD, void **))(*(_QWORD *)v209 + 24))(v209, &v291, 0, v287);
  if (v288 < 0)
    operator delete(v287[0]);
  v212 = v292;
  if (v292)
  {
    v213 = (unint64_t *)&v292->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = Scalar;
  Scalar = 0;
  if (v215)
    (*(void (**)(char *))(*(_QWORD *)v215 + 8))(v215);
  if (v290 < 0)
    operator delete(v289[0]);
  v216 = v360;
  std::string::basic_string[abi:ne180100]<0>(v283, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v283, 0, (uint64_t *)&Scalar);
  v285 = Scalar;
  if (Scalar)
  {
    v217 = (std::__shared_weak_count *)operator new();
    v218 = (std::__shared_weak_count_vtbl *)Scalar;
    v217->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v217->__shared_owners_ = 0;
    v217->__shared_weak_owners_ = 0;
    v217[1].__vftable = v218;
  }
  else
  {
    v217 = 0;
  }
  v286 = v217;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v281, "I");
  (*(void (**)(void *, char **, _QWORD, void **))(*(_QWORD *)v216 + 24))(v216, &v285, 0, v281);
  if (v282 < 0)
    operator delete(v281[0]);
  v219 = v286;
  if (v286)
  {
    v220 = (unint64_t *)&v286->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = Scalar;
  Scalar = 0;
  if (v222)
    (*(void (**)(char *))(*(_QWORD *)v222 + 8))(v222);
  if (v284 < 0)
    operator delete(v283[0]);
  v223 = v360;
  std::string::basic_string[abi:ne180100]<0>(v277, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v277, 0, (uint64_t *)&Scalar);
  v279 = Scalar;
  if (Scalar)
  {
    v224 = (std::__shared_weak_count *)operator new();
    v225 = (std::__shared_weak_count_vtbl *)Scalar;
    v224->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v224->__shared_owners_ = 0;
    v224->__shared_weak_owners_ = 0;
    v224[1].__vftable = v225;
  }
  else
  {
    v224 = 0;
  }
  v280 = v224;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v275, "U");
  (*(void (**)(void *, char **, _QWORD, void **))(*(_QWORD *)v223 + 24))(v223, &v279, 0, v275);
  if (v276 < 0)
    operator delete(v275[0]);
  v226 = v280;
  if (v280)
  {
    v227 = (unint64_t *)&v280->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = Scalar;
  Scalar = 0;
  if (v229)
    (*(void (**)(char *))(*(_QWORD *)v229 + 8))(v229);
  if (v278 < 0)
    operator delete(v277[0]);
  v230 = *a4;
  v273 = v360;
  if (v360)
  {
    v231 = (std::__shared_weak_count *)operator new();
    v232 = (std::__shared_weak_count_vtbl *)v360;
    v231->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v231->__shared_owners_ = 0;
    v231->__shared_weak_owners_ = 0;
    v231[1].__vftable = v232;
  }
  else
  {
    v231 = 0;
  }
  v274 = v231;
  v360 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v230 + 56))(v230, &v273);
  v233 = v274;
  if (v274)
  {
    v234 = (unint64_t *)&v274->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  v236 = v360;
  v360 = 0;
  if (v236)
    (*(void (**)(void *))(*(_QWORD *)v236 + 8))(v236);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v352);
  v237 = v352;
  std::string::basic_string[abi:ne180100]<0>(v269, "mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v269, 0, (uint64_t *)&v349);
  v271 = v349;
  if (v349)
  {
    v238 = (std::__shared_weak_count *)operator new();
    v239 = (std::__shared_weak_count_vtbl *)v349;
    v238->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v238->__shared_owners_ = 0;
    v238->__shared_weak_owners_ = 0;
    v238[1].__vftable = v239;
  }
  else
  {
    v238 = 0;
  }
  v272 = v238;
  v349 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v360, "add");
  std::string::basic_string[abi:ne180100]<0>(&v363, "div");
  std::string::basic_string[abi:ne180100]<0>(&v366, "max");
  std::string::basic_string[abi:ne180100]<0>(v368, "min");
  std::string::basic_string[abi:ne180100]<0>(v369, "mul");
  std::string::basic_string[abi:ne180100]<0>(v370, "sub");
  std::string::basic_string[abi:ne180100]<0>(v371, "update");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v360, 7);
  (*(void (**)(void *, void **, char **, _QWORD))(*(_QWORD *)v237 + 24))(v237, &v271, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v371[i + 2]) < 0)
      operator delete((void *)v371[i]);
  }
  v241 = v272;
  if (v272)
  {
    v242 = (unint64_t *)&v272->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = v349;
  v349 = 0;
  if (v244)
    (*(void (**)(void *))(*(_QWORD *)v244 + 8))(v244);
  if (v270 < 0)
    operator delete(v269[0]);
  v245 = v352;
  std::string::basic_string[abi:ne180100]<0>(v265, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v265, 1, (uint64_t *)&v349);
  v267 = v349;
  if (v349)
  {
    v246 = (std::__shared_weak_count *)operator new();
    v247 = (std::__shared_weak_count_vtbl *)v349;
    v246->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v246->__shared_owners_ = 0;
    v246->__shared_weak_owners_ = 0;
    v246[1].__vftable = v247;
  }
  else
  {
    v246 = 0;
  }
  v268 = v246;
  v349 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v360, "bf16");
  std::string::basic_string[abi:ne180100]<0>(&v363, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v366, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v368, "int32");
  std::string::basic_string[abi:ne180100]<0>(v369, "int8");
  std::string::basic_string[abi:ne180100]<0>(v370, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v360, 6);
  (*(void (**)(void *, void **, char **, uint64_t))(*(_QWORD *)v245 + 24))(v245, &v267, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v370[j + 2]) < 0)
      operator delete((void *)v370[j]);
  }
  v249 = v268;
  if (v268)
  {
    v250 = (unint64_t *)&v268->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  v252 = v349;
  v349 = 0;
  if (v252)
    (*(void (**)(void *))(*(_QWORD *)v252 + 8))(v252);
  if (v266 < 0)
    operator delete(v265[0]);
  v253 = *a4;
  v263 = v352;
  if (v352)
  {
    v254 = (std::__shared_weak_count *)operator new();
    v255 = (std::__shared_weak_count_vtbl *)v352;
    v254->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v254->__shared_owners_ = 0;
    v254->__shared_weak_owners_ = 0;
    v254[1].__vftable = v255;
  }
  else
  {
    v254 = 0;
  }
  v264 = v254;
  v352 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v253 + 56))(v253, &v263);
  v256 = v264;
  if (v264)
  {
    v257 = (unint64_t *)&v264->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v259 = v352;
  v352 = 0;
  if (v259)
    (*(void (**)(void *))(*(_QWORD *)v259 + 8))(v259);
  if (v355)
  {
    v260 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v355);
    MEMORY[0x1E0C023A0](v260, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v331, 0);
  result = (uint64_t)v359;
  if (v359)
  {
    v262 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v359);
    return MEMORY[0x1E0C023A0](v262, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A03D90(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x3A0];
  STACK[0x3A0] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3B8], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2D0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3E0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::Scatter::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseScatterWithAxis::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0A0481C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ScatterAlongAxis::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseScatterWithAxis::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0A0491C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ScatterNd::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseScatter::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0A04A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValidators::ValidateReadState(MIL::Operators::Common::ios18::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTypedArgument *v6;
  MIL::Validation *OutputType;
  std::__shared_weak_count *v8;
  std::string::size_type v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count_vtbl *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  const MIL::IRValueType **v21;
  const MIL::IRValueType **v22;
  const MIL::IRValueType *v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39[2];
  char v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void *v43[2];
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  _QWORD v47[3];
  _OWORD v48[2];
  int v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *__p[2];
  char v55;
  _QWORD v56[5];
  _QWORD v57[3];
  void *v58[3];
  void (***v59)(MIL::MILContextImpl *__hidden);
  std::__shared_weak_count *v60;
  void **v61;
  _QWORD v62[2];
  std::string v63;
  _QWORD v64[4];

  v64[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v63, "input");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTypedArgument *)MIL::IRValueType::AsStateType(ParameterType);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  OutputType = (MIL::Validation *)MIL::IROperation::GetOutputType(this, 0);
  MIL::MILContext::Make(&v63);
  v59 = (void (***)(MIL::MILContextImpl *__hidden))v63.__r_.__value_.__r.__words[0];
  if (v63.__r_.__value_.__r.__words[0])
  {
    v8 = (std::__shared_weak_count *)operator new();
    v9 = v63.__r_.__value_.__r.__words[0];
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F0A8;
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
  }
  else
  {
    v8 = 0;
  }
  v60 = v8;
  MIL::UnknownLocation::Make(v57);
  v57[1] = v57[0];
  if (v57[0])
  {
    v10 = (std::__shared_weak_count *)operator new();
    v11 = (std::__shared_weak_count_vtbl *)v57[0];
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v11;
  }
  else
  {
    v10 = 0;
  }
  v57[2] = v10;
  v57[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  MIL::IRTypedArgument::Make(v6, &v50);
  v62[0] = v50;
  if (v50)
  {
    v12 = (_QWORD *)operator new();
    v13 = v50;
    *v12 = &unk_1EA994910;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v13;
  }
  else
  {
    v12 = 0;
  }
  v62[1] = v12;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  *(_QWORD *)&v48[0] = &v51;
  BYTE8(v48[0]) = 0;
  v14 = operator new(0x10uLL);
  v51 = v14;
  v53 = v14 + 2;
  *v14 = v62[0];
  v14[1] = v12;
  if (v12)
  {
    v15 = v12 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v52 = v14 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(&v63, (__int128 *)__p, &v51);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v56, (unsigned __int8 *)&v63, 1);
  memset(v48, 0, sizeof(v48));
  v49 = 1065353216;
  memset(v47, 0, sizeof(v47));
  MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceReadState(&v59, v56, v58);
  v61 = (void **)v47;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v61);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v48);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v56);
  *(_QWORD *)&v48[0] = v64;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  *(_QWORD *)&v48[0] = &v51;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v62);
  v17 = v50;
  v50 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (v55 < 0)
    operator delete(__p[0]);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v20 = v57[0];
  v57[0] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = (const MIL::IRValueType **)v58[0];
  v22 = (const MIL::IRValueType **)v58[1];
  if ((*(uint64_t (**)(MIL::Operators::Common::ios18::CustomValidators *))(*(_QWORD *)this + 192))(this) == v22 - v21)
  {
    if (v22 == v21)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    if (MIL::Validation::TypeShapeAndDataTypeMatch(OutputType, *v21, v23))
    {
      MIL::ValidationResult::ValidationResult(a2);
      goto LABEL_51;
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v32 = (std::__shared_weak_count *)LocationPtr[1];
    v41 = *LocationPtr;
    v42 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    std::string::basic_string[abi:ne180100]<0>(v39, "Unexpected output type.");
    MIL::ValidationResult::ValidationResult(a2, &v41, 313, v39);
    if (v40 < 0)
      operator delete(v39[0]);
    v28 = v42;
    if (v42)
    {
      v35 = (unint64_t *)&v42->__shared_owners_;
      do
        v30 = __ldaxr(v35);
      while (__stlxr(v30 - 1, v35));
      goto LABEL_49;
    }
  }
  else
  {
    v24 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v25 = (std::__shared_weak_count *)v24[1];
    v45 = *v24;
    v46 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    std::string::basic_string[abi:ne180100]<0>(v43, "Mismatch in the number of outputs.");
    MIL::ValidationResult::ValidationResult(a2, &v45, 313, v43);
    if (v44 < 0)
      operator delete(v43[0]);
    v28 = v46;
    if (v46)
    {
      v29 = (unint64_t *)&v46->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
LABEL_49:
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
LABEL_51:
  if (v58[0])
    operator delete(v58[0]);
  v36 = v60;
  if (v60)
  {
    v37 = (unint64_t *)&v60->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1E0A04F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  void *v45;
  uint64_t v46;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  *(_QWORD *)(v46 - 160) = v45;
  operator delete(v45);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v46 - 144);
  _Unwind_Resume(a1);
}

void sub_1E0A050AC()
{
  JUMPOUT(0x1E0A050A4);
}

_QWORD *MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceReadState@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRStateValueType *v7;
  MIL::IRValueType *WrappedType;
  uint64_t Tensor;
  _QWORD *v10;
  _QWORD *result;
  void *__p[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v7 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(SingleValueType);
  WrappedType = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v7);
  if (v13 < 0)
    operator delete(__p[0]);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v10 = operator new(8uLL);
  *a3 = v10;
  *v10 = Tensor;
  result = v10 + 1;
  a3[1] = result;
  a3[2] = result;
  return result;
}

void sub_1E0A0514C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::ios18::`anonymous namespace'::ExtractTensor(void (****a1)(MIL::MILContextImpl *__hidden this), MIL::IRValueType *a2)
{
  MIL::IRMemoryLayoutValueType *v5;
  MIL::IRTensorBufferValueType *v6;
  uint64_t Shape;
  int DataType;
  uint64_t v9;
  void *__p;
  void *v11;
  uint64_t v12;

  if ((*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)a2 + 24))(a2))
    return MIL::IRValueType::AsTensorType(a2);
  v5 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
  v6 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v5);
  Shape = MIL::IRTensorBufferValueType::GetShape(v6);
  v11 = 0;
  v12 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)Shape, *(_QWORD *)(Shape + 8), (uint64_t)(*(_QWORD *)(Shape + 8) - *(_QWORD *)Shape) >> 3);
  DataType = MIL::IRTensorBufferValueType::GetDataType(v6);
  v9 = MIL::IRTensorValueType::MakeWithShape(*a1, DataType, (uint64_t)&__p);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_1E0A05218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios18::CustomValidators::ValidateWriteState(MIL::Operators::Common::ios18::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRStateValueType *v6;
  MIL::Validation *v7;
  MIL::IRValueType *WrappedType;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  const MIL::IRValueType *Tensor;
  const MIL::IRValueType *v12;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  void *__p;
  std::__shared_weak_count *v29;
  char v30;

  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(ParameterType);
  if (v30 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "data");
  v7 = (MIL::Validation *)MIL::IROperation::GetParameterType(this);
  if (v30 < 0)
    operator delete(__p);
  WrappedType = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v6);
  MIL::MILContext::Make(&v27);
  __p = v27;
  if (v27)
  {
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v27;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F0A8;
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v10;
  }
  else
  {
    v9 = 0;
  }
  v29 = v9;
  if (MIL::Validation::TypeShapeAndDataTypeMatch(v7, Tensor, v12))
  {
    MIL::ValidationResult::ValidationResult(a2);
  }
  else
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v14 = (std::__shared_weak_count *)LocationPtr[1];
    v25 = *LocationPtr;
    v26 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "Unexpected type for the data parameter.");
    MIL::ValidationResult::ValidationResult(a2, &v25, 313, v23);
    if (v24 < 0)
      operator delete(v23[0]);
    v17 = v26;
    if (v26)
    {
      v18 = (unint64_t *)&v26->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1E0A05420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceWriteState(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t MIL::Operators::Common::ios18::ReadState::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  MIL::MILContext *v9;
  const MIL::IRValueType *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  MIL::MILContext *v15;
  const MIL::IRValueType *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  MIL::MILContext *v20;
  const MIL::IRValueType *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  void ***v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  unint64_t v33;
  void **v34;
  void **v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void **v43;
  void **v44;
  char *v45;
  __int128 v46;
  void **v47;
  void **v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count_vtbl *v56;
  void **v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t result;
  uint64_t v74;
  void **v75;
  char **v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *v80[2];
  uint64_t v81;
  __n128 v82;
  void *__p;
  void *v84;
  _QWORD *v85;
  void *v86;
  void *v87;
  _QWORD *v88;
  void *v89;
  void *v90;
  _QWORD *v91;
  void *v92;
  void *v93;
  _QWORD *v94;
  __n128 v95;
  uint64_t v96;
  _QWORD v97[3];
  _QWORD *v98;
  _BYTE v99[24];
  _BYTE *v100;
  _QWORD v101[3];
  _QWORD *v102;
  uint64_t v103;
  void **v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  _QWORD *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v96 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v92 = v8;
  *v8 = v7;
  v93 = v8 + 1;
  v94 = v8 + 1;
  v9 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v92);
  v104 = (void **)MIL::IRStateValueType::Make(a1, v9, v10);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v89 = v12;
  *v12 = v11;
  v90 = v12 + 1;
  v91 = v12 + 1;
  v13 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v86 = v14;
  *v14 = v13;
  v87 = v14 + 1;
  v88 = v14 + 1;
  v15 = (MIL::MILContext *)MIL::IRTensorBufferValueType::MakeWithShape(a1, 18, (uint64_t)&v89, (uint64_t)&v86);
  v105 = MIL::IRStateValueType::Make(a1, v15, v16);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v84 = v18 + 1;
  v85 = v18 + 1;
  v19 = MIL::IRUnknownProperty::Make(a1, 0);
  v20 = (MIL::MILContext *)MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 18, (uint64_t)&__p, v19);
  v106 = MIL::IRStateValueType::Make(a1, v20, v21);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v104, 3, &v95);
  MIL::IRParameter::Make(&v95, &v103);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", &v103);
  v22 = v103;
  v103 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)v95.n128_u64[1];
  if (v95.n128_u64[1])
  {
    v24 = (unint64_t *)(v95.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p)
  {
    v84 = __p;
    operator delete(__p);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  v86 = 0;
  v26 = operator new();
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v104 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v86, (void **)v26);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v104, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v86, 1uLL);
  v27 = (void ***)v86;
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v92 = v29;
  *v29 = v28;
  v93 = v29 + 1;
  v94 = v29 + 1;
  v103 = MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v92);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v103, 1, &v82);
  MIL::IRParameter::Make(&v82, (uint64_t *)&__p);
  v30 = __p;
  v89 = __p;
  if (__p)
  {
    v31 = (_QWORD *)operator new();
    v32 = __p;
    *v31 = &unk_1EA99F888;
    v31[1] = 0;
    v31[2] = 0;
    v31[3] = v32;
  }
  else
  {
    v31 = 0;
  }
  v90 = v31;
  __p = 0;
  v33 = (unint64_t)v27[2];
  v34 = v27[1];
  if ((unint64_t)v34 >= v33)
  {
    v36 = ((char *)v34 - (char *)*v27) >> 4;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v38 = v33 - (_QWORD)*v27;
    if (v38 >> 3 > v37)
      v37 = v38 >> 3;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
      v39 = 0xFFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    v108 = v27 + 2;
    v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v27 + 2), v39);
    v42 = &v40[16 * v36];
    *(_QWORD *)v42 = v30;
    *((_QWORD *)v42 + 1) = v31;
    v89 = 0;
    v90 = 0;
    v44 = *v27;
    v43 = v27[1];
    if (v43 == *v27)
    {
      v47 = v27[1];
      v45 = &v40[16 * v36];
    }
    else
    {
      v45 = &v40[16 * v36];
      do
      {
        v46 = *((_OWORD *)v43 - 1);
        v43 -= 2;
        *((_OWORD *)v45 - 1) = v46;
        v45 -= 16;
        *v43 = 0;
        v43[1] = 0;
      }
      while (v43 != v44);
      v47 = *v27;
      v43 = v27[1];
    }
    v35 = (void **)(v42 + 16);
    *v27 = (void **)v45;
    v104 = v47;
    v105 = (uint64_t)v47;
    v27[1] = (void **)(v42 + 16);
    v106 = (uint64_t)v43;
    v48 = v27[2];
    v27[2] = (void **)&v40[16 * v41];
    v107 = v48;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v104);
  }
  else
  {
    *v34 = v30;
    v34[1] = v31;
    v35 = v34 + 2;
    v89 = 0;
    v90 = 0;
  }
  v27[1] = v35;
  v49 = __p;
  __p = 0;
  if (v49)
    (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
  v50 = (std::__shared_weak_count *)v82.n128_u64[1];
  if (v82.n128_u64[1])
  {
    v51 = (unint64_t *)(v82.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  *(_OWORD *)v80 = *(_OWORD *)a2;
  v81 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v53 = v96;
  v78 = v96;
  if (v96)
  {
    v54 = (std::__shared_weak_count *)operator new();
    v54->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v54->__shared_owners_ = 0;
    v54->__shared_weak_owners_ = 0;
    v54[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
  }
  else
  {
    v54 = 0;
  }
  v79 = v54;
  v96 = 0;
  v76 = (char **)v86;
  if (v86)
  {
    v55 = (std::__shared_weak_count *)operator new();
    v56 = (std::__shared_weak_count_vtbl *)v86;
    v55->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F948;
    v55->__shared_owners_ = 0;
    v55->__shared_weak_owners_ = 0;
    v55[1].__vftable = v56;
  }
  else
  {
    v55 = 0;
  }
  v77 = v55;
  v86 = 0;
  MIL::IRStateReadEffect::Make(&v104);
  v57 = v104;
  v104 = 0;
  v75 = v57;
  v101[0] = &unk_1EA99FAC8;
  v101[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateReadState;
  v102 = v101;
  v100 = 0;
  MIL::IROperator::Make((__int128 *)v80, &v78, &v76, (uint64_t *)&v75, (uint64_t)v101, (uint64_t)v99, a3);
  v58 = v100;
  if (v100 == v99)
  {
    v59 = 4;
    v58 = v99;
  }
  else
  {
    if (!v100)
      goto LABEL_53;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_53:
  v60 = v102;
  if (v102 == v101)
  {
    v61 = 4;
    v60 = v101;
  }
  else
  {
    if (!v102)
      goto LABEL_58;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_58:
  v62 = (uint64_t)v75;
  v75 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = v104;
  v104 = 0;
  if (v63)
    (*((void (**)(void **))*v63 + 1))(v63);
  v64 = v77;
  if (v77)
  {
    p_shared_owners = (unint64_t *)&v77->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v79;
  if (v79)
  {
    v68 = (unint64_t *)&v79->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (SHIBYTE(v81) < 0)
    operator delete(v80[0]);
  v70 = *a3;
  v97[0] = &off_1EA99FBD8;
  v97[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceReadState;
  v98 = v97;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v70 + 200))(v70, v97);
  v71 = v98;
  if (v98 == v97)
  {
    v72 = 4;
    v71 = v97;
  }
  else
  {
    if (!v98)
      goto LABEL_79;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_79:
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v86, 0);
  result = v96;
  if (v96)
  {
    v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v96);
    return MEMORY[0x1E0C023A0](v74, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A05BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a27, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a38, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::WriteState::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  MIL::MILContext *v9;
  const MIL::IRValueType *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  MIL::MILContext *v15;
  const MIL::IRValueType *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  MIL::MILContext *v20;
  const MIL::IRValueType *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void **v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void **v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  void *v58[2];
  uint64_t v59;
  __n128 v60;
  void *__p;
  void *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  _QWORD *v69;
  __n128 v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD v73[3];
  _QWORD *v74;
  _BYTE v75[24];
  _BYTE *v76;
  _QWORD v77[3];
  _QWORD *v78;
  void *v79;
  void *v80;
  _QWORD *v81;
  void **v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v72 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v67 = v8;
  *v8 = v7;
  v68 = v8 + 1;
  v69 = v8 + 1;
  v9 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v67);
  v82 = (void **)MIL::IRStateValueType::Make(a1, v9, v10);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v79 = v12;
  *v12 = v11;
  v80 = v12 + 1;
  v81 = v12 + 1;
  v13 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v64 = v14;
  *v14 = v13;
  v65 = v14 + 1;
  v66 = v14 + 1;
  v15 = (MIL::MILContext *)MIL::IRTensorBufferValueType::MakeWithShape(a1, 18, (uint64_t)&v79, (uint64_t)&v64);
  v83 = (void **)MIL::IRStateValueType::Make(a1, v15, v16);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v62 = v18 + 1;
  v63 = v18 + 1;
  v19 = MIL::IRUnknownProperty::Make(a1, 0);
  v20 = (MIL::MILContext *)MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 18, (uint64_t)&__p, v19);
  v84 = MIL::IRStateValueType::Make(a1, v20, v21);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v82, 3, &v70);
  MIL::IRParameter::Make(&v70, &v71);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", &v71);
  v22 = v71;
  v71 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)v70.n128_u64[1];
  if (v70.n128_u64[1])
  {
    v24 = (unint64_t *)(v70.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p)
  {
    v62 = __p;
    operator delete(__p);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  v26 = v72;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (void **)operator new(8uLL);
  v82 = v28;
  *v28 = (void *)v27;
  v83 = v28 + 1;
  v84 = (uint64_t)(v28 + 1);
  v79 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v82);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v79, 1, &v60);
  MIL::IRParameter::Make(&v60, (uint64_t *)&v67);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v26, "data", (uint64_t *)&v67);
  v29 = v67;
  v67 = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)v60.n128_u64[1];
  if (v60.n128_u64[1])
  {
    v31 = (unint64_t *)(v60.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  v82 = 0;
  *(_OWORD *)v58 = *(_OWORD *)a2;
  v59 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v33 = (uint64_t)v72;
  *(_QWORD *)&v57 = v72;
  if (v72)
  {
    v34 = (_QWORD *)operator new();
    *v34 = &unk_1EA99F8E8;
    v34[1] = 0;
    v34[2] = 0;
    v34[3] = v33;
    *((_QWORD *)&v57 + 1) = v34;
    v72 = 0;
    *(_QWORD *)&v56 = v82;
    if (v82)
    {
      v35 = (_QWORD *)operator new();
      v36 = v82;
      *v35 = &unk_1EA99F948;
      v35[1] = 0;
      v35[2] = 0;
      v35[3] = v36;
    }
    else
    {
      v35 = 0;
    }
  }
  else
  {
    v57 = 0uLL;
    v35 = 0;
    v72 = 0;
    *(_QWORD *)&v56 = 0;
  }
  *((_QWORD *)&v56 + 1) = v35;
  v82 = 0;
  MIL::IRStateWriteEffect::Make(&v67);
  v37 = v67;
  v67 = 0;
  v55 = (uint64_t)v37;
  v77[0] = &unk_1EA99FAC8;
  v77[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateWriteState;
  v78 = v77;
  v76 = 0;
  MIL::IROperator::Make((__int128 *)v58, 2, 2, 0, 0, &v57, &v56, &v55, a3, (uint64_t)v77, (uint64_t)v75);
  v38 = v76;
  if (v76 == v75)
  {
    v39 = 4;
    v38 = v75;
  }
  else
  {
    if (!v76)
      goto LABEL_35;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_35:
  v40 = v78;
  if (v78 == v77)
  {
    v41 = 4;
    v40 = v77;
  }
  else
  {
    if (!v78)
      goto LABEL_40;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_40:
  v42 = v55;
  v55 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = v67;
  v67 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (SHIBYTE(v59) < 0)
    operator delete(v58[0]);
  v50 = *a3;
  v73[0] = &off_1EA99FBD8;
  v73[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceWriteState;
  v74 = v73;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v50 + 200))(v50, v73);
  v51 = v74;
  if (v74 == v73)
  {
    v52 = 4;
    v51 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_61;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_61:
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v82, 0);
  result = (uint64_t)v72;
  if (v72)
  {
    v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v72);
    return MEMORY[0x1E0C023A0](v54, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A06410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a22 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v38 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a38, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::NonMaximumSuppression::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count_vtbl *v71;
  void *v72;
  _QWORD *v73;
  void *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  __int128 v88;
  void **v89;
  char *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  char **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void *v108;
  _QWORD *v109;
  void *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  __int128 v124;
  void **v125;
  char *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  char **v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  void *v138;
  _QWORD *v139;
  void *v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  __int128 v154;
  void **v155;
  char *v156;
  void *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  char **v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  _OWORD *v175;
  unsigned __int8 *v176;
  void **v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count *v184;
  unint64_t *p_shared_owners;
  unint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  void **v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  void *v199;
  void **v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void *v206;
  void **v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  void *v213;
  void **v214;
  std::__shared_weak_count *v215;
  std::__shared_weak_count_vtbl *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  void *v220;
  void **v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  void *v227;
  void **v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  void **v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  void **v241;
  void **v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  void *v248;
  void **v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  void *v255;
  void **v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  void *v262;
  void **v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  void *v269;
  void **v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  void *v276;
  void **v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  void *v283;
  void **v284;
  std::__shared_weak_count *v285;
  std::__shared_weak_count_vtbl *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  void *v290;
  void **v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count_vtbl *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  void *v297;
  void **v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count_vtbl *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  void *v304;
  void **v305;
  std::__shared_weak_count *v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  void *v311;
  void **v312;
  std::__shared_weak_count *v313;
  std::__shared_weak_count_vtbl *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  void *v318;
  void **v319;
  std::__shared_weak_count *v320;
  std::__shared_weak_count_vtbl *v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  void *v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  void **v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  void **v332;
  void *v333;
  std::__shared_weak_count *v334;
  std::__shared_weak_count_vtbl *v335;
  uint64_t i;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count_vtbl *v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  std::__shared_weak_count_vtbl *v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  void *v347;
  uint64_t v348;
  uint64_t result;
  uint64_t v350;
  void *v351;
  std::__shared_weak_count *v352;
  void *v353[2];
  char v354;
  std::__shared_weak_count_vtbl *v355;
  std::__shared_weak_count *v356;
  void **v357;
  std::__shared_weak_count *v358;
  void *v359[2];
  char v360;
  void *v361;
  std::__shared_weak_count *v362;
  void *v363[2];
  char v364;
  void *v365;
  std::__shared_weak_count *v366;
  void *v367[2];
  char v368;
  void *v369;
  std::__shared_weak_count *v370;
  void *v371[2];
  char v372;
  void *v373;
  std::__shared_weak_count *v374;
  void *v375[2];
  char v376;
  void *v377;
  std::__shared_weak_count *v378;
  void *v379[2];
  char v380;
  void *v381;
  std::__shared_weak_count *v382;
  void *v383[2];
  char v384;
  void *v385;
  std::__shared_weak_count *v386;
  void *v387[2];
  char v388;
  void *v389[2];
  char v390;
  void *v391;
  std::__shared_weak_count *v392;
  void *v393[2];
  char v394;
  void *v395[2];
  char v396;
  void *v397;
  std::__shared_weak_count *v398;
  void *v399[2];
  char v400;
  void *v401[2];
  char v402;
  void *v403;
  std::__shared_weak_count *v404;
  void *v405[2];
  char v406;
  void *v407[2];
  char v408;
  void *v409;
  std::__shared_weak_count *v410;
  void *v411[2];
  char v412;
  void *v413[2];
  char v414;
  void *v415;
  std::__shared_weak_count *v416;
  void **v417;
  std::__shared_weak_count *v418;
  void *v419[2];
  char v420;
  void *v421;
  std::__shared_weak_count *v422;
  void *v423[2];
  char v424;
  void *v425;
  std::__shared_weak_count *v426;
  void *v427[2];
  char v428;
  void *v429;
  std::__shared_weak_count *v430;
  void *v431[2];
  char v432;
  void *v433[2];
  char v434;
  void *v435;
  std::__shared_weak_count *v436;
  void *v437[2];
  char v438;
  void *v439[2];
  char v440;
  void *v441;
  std::__shared_weak_count *v442;
  void *v443[2];
  char v444;
  void *v445[2];
  char v446;
  void *v447;
  std::__shared_weak_count *v448;
  void *v449;
  std::__shared_weak_count *v450;
  __n128 v451;
  __int128 v452;
  __int128 v453;
  void *v454[2];
  uint64_t v455;
  __n128 v456;
  __n128 v457;
  __n128 v458;
  void *v459;
  void *v460;
  _QWORD *v461;
  char **v462;
  __n128 v463;
  __n128 v464;
  __n128 v465;
  __n128 v466;
  void *__p;
  void *v468;
  _QWORD *v469;
  void *v470;
  void *v471;
  _QWORD *v472;
  __n128 v473;
  _QWORD *v474;
  void **Scalar;
  uint64_t v476;
  uint64_t v477;
  char *v478;
  char **v479;
  uint64_t v480[3];
  uint64_t v481[3];
  uint64_t v482[3];
  void *v483[3];
  void *v484;
  uint64_t v485;
  uint64_t v486;
  _QWORD v487[3];
  _QWORD *v488;
  _QWORD v489[3];
  _QWORD *v490;
  _BYTE v491[24];
  _BYTE *v492;
  _QWORD v493[3];
  _QWORD *v494;
  std::__shared_weak_count_vtbl *v495;
  uint64_t p_get_deleter;
  const void *(__cdecl **v497)(const std::__shared_weak_count *__hidden, const std::type_info *);
  uint64_t v498;

  v498 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v474 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = operator new(0x18uLL);
  v486 = (uint64_t)(v10 + 3);
  *v10 = v7;
  v10[1] = v8;
  v10[2] = v9;
  v484 = v10;
  v485 = (uint64_t)(v10 + 3);
  Scalar = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v484);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v472 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v470 = v14;
  v471 = v14 + 3;
  v476 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v470);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v469 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v468 = v18 + 3;
  v477 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v473);
  MIL::IRParameter::Make(&v473, (uint64_t *)&v495);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "boxes", (uint64_t *)&v495);
  v19 = v495;
  v495 = 0;
  if (v19)
    (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  v20 = (std::__shared_weak_count *)v473.n128_u64[1];
  if (v473.n128_u64[1])
  {
    v21 = (unint64_t *)(v473.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v468 = __p;
    operator delete(__p);
  }
  if (v470)
  {
    v471 = v470;
    operator delete(v470);
  }
  if (v484)
  {
    v485 = (uint64_t)v484;
    operator delete(v484);
  }
  v23 = v474;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = operator new(0x18uLL);
  v486 = (uint64_t)(v27 + 3);
  *v27 = v24;
  v27[1] = v25;
  v27[2] = v26;
  v484 = v27;
  v485 = (uint64_t)(v27 + 3);
  Scalar = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v484);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = operator new(0x18uLL);
  v472 = v31 + 3;
  *v31 = v28;
  v31[1] = v29;
  v31[2] = v30;
  v470 = v31;
  v471 = v31 + 3;
  v476 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v470);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(0x18uLL);
  v469 = v35 + 3;
  *v35 = v32;
  v35[1] = v33;
  v35[2] = v34;
  __p = v35;
  v468 = v35 + 3;
  v477 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v466);
  MIL::IRParameter::Make(&v466, (uint64_t *)&v495);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v23, "scores", (uint64_t *)&v495);
  v36 = v495;
  v495 = 0;
  if (v36)
    (*((void (**)(std::__shared_weak_count_vtbl *))v36->~__shared_weak_count + 1))(v36);
  v37 = (std::__shared_weak_count *)v466.n128_u64[1];
  if (v466.n128_u64[1])
  {
    v38 = (unint64_t *)(v466.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (__p)
  {
    v468 = __p;
    operator delete(__p);
  }
  if (v470)
  {
    v471 = v470;
    operator delete(v470);
  }
  if (v484)
  {
    v485 = (uint64_t)v484;
    operator delete(v484);
  }
  v40 = v474;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v476 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v477 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v465);
  MIL::IRParameter::Make(&v465, (uint64_t *)&v484);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v40, "iou_threshold", (uint64_t *)&v484);
  v42 = v484;
  v484 = 0;
  if (v42)
    (*(void (**)(void *))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v465.n128_u64[1];
  if (v465.n128_u64[1])
  {
    v44 = (unint64_t *)(v465.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  v46 = v474;
  v484 = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v484, 1, &v464);
  MIL::IRParameter::Make(&v464, (uint64_t *)&Scalar);
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v46, "max_boxes", (uint64_t *)&Scalar);
  v48 = Scalar;
  Scalar = 0;
  if (v48)
    (*((void (**)(void **))*v48 + 1))(v48);
  v49 = (std::__shared_weak_count *)v464.n128_u64[1];
  if (v464.n128_u64[1])
  {
    v50 = (unint64_t *)(v464.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v474;
  v484 = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v484, 1, &v463);
  MIL::IRParameter::Make(&v463, (uint64_t *)&Scalar);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[22],std::unique_ptr<MIL::IRParameter>>(v52, "per_class_suppression", (uint64_t *)&Scalar);
  v54 = Scalar;
  Scalar = 0;
  if (v54)
    (*((void (**)(void **))*v54 + 1))(v54);
  v55 = (std::__shared_weak_count *)v463.n128_u64[1];
  if (v463.n128_u64[1])
  {
    v56 = (unint64_t *)(v463.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  v462 = 0;
  v58 = operator new();
  *(_QWORD *)v58 = 0;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v462, (void **)v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v462, 3uLL);
  v59 = v462;
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v62 = MIL::IRUnknownDimension::Make(a1, 0);
  v63 = operator new(0x18uLL);
  v472 = v63 + 3;
  *v63 = v60;
  v63[1] = v61;
  v63[2] = v62;
  v470 = v63;
  v471 = v63 + 3;
  v484 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v470);
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = operator new(0x18uLL);
  v469 = v67 + 3;
  *v67 = v64;
  v67[1] = v65;
  v67[2] = v66;
  __p = v67;
  v468 = v67 + 3;
  v485 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v69 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v71->__get_deleter;
  v497 = &v71->__get_deleter;
  v71->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v68;
  v71->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v69;
  v71->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v70;
  v495 = v71;
  v486 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v495);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v484, 3, &v458);
  MIL::IRParameter::Make(&v458, (uint64_t *)&v459);
  v72 = v459;
  v460 = v459;
  if (v459)
  {
    v73 = (_QWORD *)operator new();
    v74 = v459;
    *v73 = &unk_1EA99F888;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = v74;
  }
  else
  {
    v73 = 0;
  }
  v461 = v73;
  v459 = 0;
  v75 = v59[2];
  v76 = v59[1];
  if (v76 >= v75)
  {
    v78 = (v76 - *v59) >> 4;
    v79 = v78 + 1;
    if ((unint64_t)(v78 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v80 = v75 - *v59;
    if (v80 >> 3 > v79)
      v79 = v80 >> 3;
    if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
      v81 = 0xFFFFFFFFFFFFFFFLL;
    else
      v81 = v79;
    v479 = v59 + 2;
    v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v59 + 2), v81);
    v84 = &v82[16 * v78];
    *(_QWORD *)v84 = v72;
    *((_QWORD *)v84 + 1) = v73;
    v461 = 0;
    v460 = 0;
    v86 = *v59;
    v85 = v59[1];
    if (v85 == *v59)
    {
      v89 = (void **)v59[1];
      v87 = &v82[16 * v78];
    }
    else
    {
      v87 = &v82[16 * v78];
      do
      {
        v88 = *((_OWORD *)v85 - 1);
        v85 -= 16;
        *((_OWORD *)v87 - 1) = v88;
        v87 -= 16;
        *(_QWORD *)v85 = 0;
        *((_QWORD *)v85 + 1) = 0;
      }
      while (v85 != v86);
      v89 = (void **)*v59;
      v85 = v59[1];
    }
    v77 = v84 + 16;
    *v59 = v87;
    v476 = (uint64_t)v89;
    v59[1] = v84 + 16;
    v477 = (uint64_t)v85;
    v90 = v59[2];
    v59[2] = &v82[16 * v83];
    v478 = v90;
    Scalar = v89;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v76 = v72;
    *((_QWORD *)v76 + 1) = v73;
    v77 = v76 + 16;
    v461 = 0;
    v460 = 0;
  }
  v59[1] = v77;
  v91 = (uint64_t)v459;
  v459 = 0;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  v92 = (std::__shared_weak_count *)v458.n128_u64[1];
  if (v458.n128_u64[1])
  {
    v93 = (unint64_t *)(v458.n128_u64[1] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (v495)
  {
    p_get_deleter = (uint64_t)v495;
    operator delete(v495);
  }
  if (__p)
  {
    v468 = __p;
    operator delete(__p);
  }
  if (v470)
  {
    v471 = v470;
    operator delete(v470);
  }
  v95 = v462;
  v96 = MIL::IRUnknownDimension::Make(a1, 0);
  v97 = MIL::IRUnknownDimension::Make(a1, 0);
  v98 = MIL::IRUnknownDimension::Make(a1, 0);
  v99 = operator new(0x18uLL);
  v472 = v99 + 3;
  *v99 = v96;
  v99[1] = v97;
  v99[2] = v98;
  v470 = v99;
  v471 = v99 + 3;
  v484 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v470);
  v100 = MIL::IRUnknownDimension::Make(a1, 0);
  v101 = MIL::IRUnknownDimension::Make(a1, 0);
  v102 = MIL::IRUnknownDimension::Make(a1, 0);
  v103 = operator new(0x18uLL);
  v469 = v103 + 3;
  *v103 = v100;
  v103[1] = v101;
  v103[2] = v102;
  __p = v103;
  v468 = v103 + 3;
  v485 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v104 = MIL::IRUnknownDimension::Make(a1, 0);
  v105 = MIL::IRUnknownDimension::Make(a1, 0);
  v106 = MIL::IRUnknownDimension::Make(a1, 0);
  v107 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v107->__get_deleter;
  v497 = &v107->__get_deleter;
  v107->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v104;
  v107->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v105;
  v107->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v106;
  v495 = v107;
  v486 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v495);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v484, 3, &v457);
  MIL::IRParameter::Make(&v457, (uint64_t *)&v459);
  v108 = v459;
  v460 = v459;
  if (v459)
  {
    v109 = (_QWORD *)operator new();
    v110 = v459;
    *v109 = &unk_1EA99F888;
    v109[1] = 0;
    v109[2] = 0;
    v109[3] = v110;
  }
  else
  {
    v109 = 0;
  }
  v461 = v109;
  v459 = 0;
  v111 = v95[2];
  v112 = v95[1];
  if (v112 >= v111)
  {
    v114 = (v112 - *v95) >> 4;
    v115 = v114 + 1;
    if ((unint64_t)(v114 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v116 = v111 - *v95;
    if (v116 >> 3 > v115)
      v115 = v116 >> 3;
    if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF0)
      v117 = 0xFFFFFFFFFFFFFFFLL;
    else
      v117 = v115;
    v479 = v95 + 2;
    v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v95 + 2), v117);
    v120 = &v118[16 * v114];
    *(_QWORD *)v120 = v108;
    *((_QWORD *)v120 + 1) = v109;
    v461 = 0;
    v460 = 0;
    v122 = *v95;
    v121 = v95[1];
    if (v121 == *v95)
    {
      v125 = (void **)v95[1];
      v123 = &v118[16 * v114];
    }
    else
    {
      v123 = &v118[16 * v114];
      do
      {
        v124 = *((_OWORD *)v121 - 1);
        v121 -= 16;
        *((_OWORD *)v123 - 1) = v124;
        v123 -= 16;
        *(_QWORD *)v121 = 0;
        *((_QWORD *)v121 + 1) = 0;
      }
      while (v121 != v122);
      v125 = (void **)*v95;
      v121 = v95[1];
    }
    v113 = v120 + 16;
    *v95 = v123;
    v476 = (uint64_t)v125;
    v95[1] = v120 + 16;
    v477 = (uint64_t)v121;
    v126 = v95[2];
    v95[2] = &v118[16 * v119];
    v478 = v126;
    Scalar = v125;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v112 = v108;
    *((_QWORD *)v112 + 1) = v109;
    v113 = v112 + 16;
    v461 = 0;
    v460 = 0;
  }
  v95[1] = v113;
  v127 = (uint64_t)v459;
  v459 = 0;
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  v128 = (std::__shared_weak_count *)v457.n128_u64[1];
  if (v457.n128_u64[1])
  {
    v129 = (unint64_t *)(v457.n128_u64[1] + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  if (v495)
  {
    p_get_deleter = (uint64_t)v495;
    operator delete(v495);
  }
  if (__p)
  {
    v468 = __p;
    operator delete(__p);
  }
  if (v470)
  {
    v471 = v470;
    operator delete(v470);
  }
  v131 = v462;
  v132 = MIL::IRUnknownDimension::Make(a1, 0);
  v133 = MIL::IRUnknownDimension::Make(a1, 0);
  v134 = operator new(0x10uLL);
  v486 = (uint64_t)(v134 + 2);
  *v134 = v132;
  v134[1] = v133;
  v484 = v134;
  v485 = (uint64_t)(v134 + 2);
  v495 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v484);
  v135 = MIL::IRUnknownDimension::Make(a1, 0);
  v136 = MIL::IRUnknownDimension::Make(a1, 0);
  v137 = operator new(0x10uLL);
  v472 = v137 + 2;
  *v137 = v135;
  v137[1] = v136;
  v470 = v137;
  v471 = v137 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v470);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v495, 2, &v456);
  MIL::IRParameter::Make(&v456, (uint64_t *)&v460);
  v138 = v460;
  __p = v460;
  if (v460)
  {
    v139 = (_QWORD *)operator new();
    v140 = v460;
    *v139 = &unk_1EA99F888;
    v139[1] = 0;
    v139[2] = 0;
    v139[3] = v140;
  }
  else
  {
    v139 = 0;
  }
  v468 = v139;
  v460 = 0;
  v141 = v131[2];
  v142 = v131[1];
  if (v142 >= v141)
  {
    v144 = (v142 - *v131) >> 4;
    v145 = v144 + 1;
    if ((unint64_t)(v144 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v146 = v141 - *v131;
    if (v146 >> 3 > v145)
      v145 = v146 >> 3;
    if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF0)
      v147 = 0xFFFFFFFFFFFFFFFLL;
    else
      v147 = v145;
    v479 = v131 + 2;
    v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v131 + 2), v147);
    v150 = &v148[16 * v144];
    *(_QWORD *)v150 = v138;
    *((_QWORD *)v150 + 1) = v139;
    v468 = 0;
    __p = 0;
    v152 = *v131;
    v151 = v131[1];
    if (v151 == *v131)
    {
      v155 = (void **)v131[1];
      v153 = &v148[16 * v144];
    }
    else
    {
      v153 = &v148[16 * v144];
      do
      {
        v154 = *((_OWORD *)v151 - 1);
        v151 -= 16;
        *((_OWORD *)v153 - 1) = v154;
        v153 -= 16;
        *(_QWORD *)v151 = 0;
        *((_QWORD *)v151 + 1) = 0;
      }
      while (v151 != v152);
      v155 = (void **)*v131;
      v151 = v131[1];
    }
    v143 = v150 + 16;
    *v131 = v153;
    v476 = (uint64_t)v155;
    v131[1] = v150 + 16;
    v477 = (uint64_t)v151;
    v156 = v131[2];
    v131[2] = &v148[16 * v149];
    v478 = v156;
    Scalar = v155;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v142 = v138;
    *((_QWORD *)v142 + 1) = v139;
    v143 = v142 + 16;
    v468 = 0;
    __p = 0;
  }
  v131[1] = v143;
  v157 = v460;
  v460 = 0;
  if (v157)
    (*(void (**)(void *))(*(_QWORD *)v157 + 8))(v157);
  v158 = (std::__shared_weak_count *)v456.n128_u64[1];
  if (v456.n128_u64[1])
  {
    v159 = (unint64_t *)(v456.n128_u64[1] + 8);
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  if (v470)
  {
    v471 = v470;
    operator delete(v470);
  }
  if (v484)
  {
    v485 = (uint64_t)v484;
    operator delete(v484);
  }
  *(_OWORD *)v454 = *(_OWORD *)a2;
  v455 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v161 = (uint64_t)v474;
  *(_QWORD *)&v453 = v474;
  if (v474)
  {
    v162 = (_QWORD *)operator new();
    *v162 = &unk_1EA99F8E8;
    v162[1] = 0;
    v162[2] = 0;
    v162[3] = v161;
  }
  else
  {
    v162 = 0;
  }
  *((_QWORD *)&v453 + 1) = v162;
  v474 = 0;
  *(_QWORD *)&v452 = v462;
  if (v462)
  {
    v163 = (_QWORD *)operator new();
    v164 = v462;
    *v163 = &unk_1EA99F948;
    v163[1] = 0;
    v163[2] = 0;
    v163[3] = v164;
  }
  else
  {
    v163 = 0;
  }
  *((_QWORD *)&v452 + 1) = v163;
  v462 = 0;
  v493[0] = &unk_1EA99FAC8;
  v493[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateNonMaximumSuppression;
  v494 = v493;
  v492 = 0;
  MIL::IROperator::Make((__int128 *)v454, &v453, &v452, (uint64_t)v493, (uint64_t)v491, a3);
  v165 = v492;
  if (v492 == v491)
  {
    v166 = 4;
    v165 = v491;
  }
  else
  {
    if (!v492)
      goto LABEL_147;
    v166 = 5;
  }
  (*(void (**)(void))(*v165 + 8 * v166))();
LABEL_147:
  v167 = v494;
  if (v494 == v493)
  {
    v168 = 4;
    v167 = v493;
    goto LABEL_151;
  }
  if (v494)
  {
    v168 = 5;
LABEL_151:
    (*(void (**)(void))(*v167 + 8 * v168))();
  }
  v169 = (std::__shared_weak_count *)*((_QWORD *)&v452 + 1);
  if (*((_QWORD *)&v452 + 1))
  {
    v170 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = (std::__shared_weak_count *)*((_QWORD *)&v453 + 1);
  if (*((_QWORD *)&v453 + 1))
  {
    v173 = (unint64_t *)(*((_QWORD *)&v453 + 1) + 8);
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  if (SHIBYTE(v455) < 0)
    operator delete(v454[0]);
  v470 = 0;
  v175 = (_OWORD *)operator new();
  *v175 = 0u;
  v175[1] = 0u;
  *((_DWORD *)v175 + 8) = 1065353216;
  v470 = v175;
  v484 = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v484, 1, &v451);
  MIL::IRParameter::Make(&v451, (uint64_t *)&Scalar);
  v176 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v175, "minimum_compute_type", (uint64_t *)&Scalar);
  v177 = Scalar;
  Scalar = 0;
  if (v177)
    (*((void (**)(void **))*v177 + 1))(v177);
  v178 = (std::__shared_weak_count *)v451.n128_u64[1];
  if (v451.n128_u64[1])
  {
    v179 = (unint64_t *)(v451.n128_u64[1] + 8);
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v176 + 5) + 32))(*((_QWORD *)v176 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v176 + 5) + 48))(*((_QWORD *)v176 + 5), 1);
  v181 = *a3;
  v182 = (std::__shared_weak_count_vtbl *)v470;
  v449 = v470;
  if (v470)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = v182;
  }
  else
  {
    v183 = 0;
  }
  v450 = v183;
  v470 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v181 + 184))(v181, &v449);
  v184 = v450;
  if (v450)
  {
    p_shared_owners = (unint64_t *)&v450->__shared_owners_;
    do
      v186 = __ldaxr(p_shared_owners);
    while (__stlxr(v186 - 1, p_shared_owners));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = *a3;
  v489[0] = &off_1EA99FBD8;
  v489[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceNonMaximumSuppression;
  v490 = v489;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v187 + 200))(v187, v489);
  v188 = v490;
  if (v490 == v489)
  {
    v189 = 4;
    v188 = v489;
  }
  else
  {
    if (!v490)
      goto LABEL_184;
    v189 = 5;
  }
  (*(void (**)(void))(*v188 + 8 * v189))();
LABEL_184:
  v190 = *a3;
  v487[0] = &off_1EA9A00F8;
  v487[1] = MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceNonMaximumSuppression;
  v488 = v487;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v190 + 216))(v190, v487);
  v191 = v488;
  if (v488 == v487)
  {
    v192 = 4;
    v191 = v487;
  }
  else
  {
    if (!v488)
      goto LABEL_189;
    v192 = 5;
  }
  (*(void (**)(void))(*v191 + 8 * v192))();
LABEL_189:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v193 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v445, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v445, 0, (uint64_t *)&v484);
  v447 = v484;
  if (v484)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = (std::__shared_weak_count_vtbl *)v484;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v195;
  }
  else
  {
    v194 = 0;
  }
  v448 = v194;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v443, "T");
  (*((void (**)(void **, void **, void **))*v193 + 3))(v193, &v447, v443);
  if (v444 < 0)
    operator delete(v443[0]);
  v196 = v448;
  if (v448)
  {
    v197 = (unint64_t *)&v448->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = v484;
  v484 = 0;
  if (v199)
    (*(void (**)(void *))(*(_QWORD *)v199 + 8))(v199);
  if (v446 < 0)
    operator delete(v445[0]);
  v200 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v439, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v439, 0, (uint64_t *)&v484);
  v441 = v484;
  if (v484)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = (std::__shared_weak_count_vtbl *)v484;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = v202;
  }
  else
  {
    v201 = 0;
  }
  v442 = v201;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v437, "T");
  (*((void (**)(void **, void **, void **))*v200 + 3))(v200, &v441, v437);
  if (v438 < 0)
    operator delete(v437[0]);
  v203 = v442;
  if (v442)
  {
    v204 = (unint64_t *)&v442->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v484;
  v484 = 0;
  if (v206)
    (*(void (**)(void *))(*(_QWORD *)v206 + 8))(v206);
  if (v440 < 0)
    operator delete(v439[0]);
  v207 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v433, "iou_threshold");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v433, 0, (uint64_t *)&v484);
  v435 = v484;
  if (v484)
  {
    v208 = (std::__shared_weak_count *)operator new();
    v209 = (std::__shared_weak_count_vtbl *)v484;
    v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v208->__shared_owners_ = 0;
    v208->__shared_weak_owners_ = 0;
    v208[1].__vftable = v209;
  }
  else
  {
    v208 = 0;
  }
  v436 = v208;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v431, "T");
  (*((void (**)(void **, void **, void **))*v207 + 3))(v207, &v435, v431);
  if (v432 < 0)
    operator delete(v431[0]);
  v210 = v436;
  if (v436)
  {
    v211 = (unint64_t *)&v436->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = v484;
  v484 = 0;
  if (v213)
    (*(void (**)(void *))(*(_QWORD *)v213 + 8))(v213);
  if (v434 < 0)
    operator delete(v433[0]);
  v214 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v484);
  v429 = v484;
  if (v484)
  {
    v215 = (std::__shared_weak_count *)operator new();
    v216 = (std::__shared_weak_count_vtbl *)v484;
    v215->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v215->__shared_owners_ = 0;
    v215->__shared_weak_owners_ = 0;
    v215[1].__vftable = v216;
  }
  else
  {
    v215 = 0;
  }
  v430 = v215;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v427, "T");
  (*((void (**)(void **, void **, void **))*v214 + 3))(v214, &v429, v427);
  if (v428 < 0)
    operator delete(v427[0]);
  v217 = v430;
  if (v430)
  {
    v218 = (unint64_t *)&v430->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = v484;
  v484 = 0;
  if (v220)
    (*(void (**)(void *))(*(_QWORD *)v220 + 8))(v220);
  v221 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &v484);
  v425 = v484;
  if (v484)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = (std::__shared_weak_count_vtbl *)v484;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v426 = v222;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v423, "T");
  (*((void (**)(void **, void **, void **))*v221 + 3))(v221, &v425, v423);
  if (v424 < 0)
    operator delete(v423[0]);
  v224 = v426;
  if (v426)
  {
    v225 = (unint64_t *)&v426->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = v484;
  v484 = 0;
  if (v227)
    (*(void (**)(void *))(*(_QWORD *)v227 + 8))(v227);
  v228 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &v484);
  v421 = v484;
  if (v484)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = (std::__shared_weak_count_vtbl *)v484;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v422 = v229;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v419, "U");
  (*((void (**)(void **, void **, void **))*v228 + 3))(v228, &v421, v419);
  if (v420 < 0)
    operator delete(v419[0]);
  v231 = v422;
  if (v422)
  {
    v232 = (unint64_t *)&v422->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = v484;
  v484 = 0;
  if (v234)
    (*(void (**)(void *))(*(_QWORD *)v234 + 8))(v234);
  v235 = *a3;
  v417 = Scalar;
  if (Scalar)
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = Scalar;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = (std::__shared_weak_count_vtbl *)v237;
  }
  else
  {
    v236 = 0;
  }
  v418 = v236;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v235 + 56))(v235, &v417);
  v238 = v418;
  if (v418)
  {
    v239 = (unint64_t *)&v418->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = Scalar;
  Scalar = 0;
  if (v241)
    (*((void (**)(void **))*v241 + 1))(v241);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v242 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v413, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v413, 0, (uint64_t *)&v484);
  v415 = v484;
  if (v484)
  {
    v243 = (std::__shared_weak_count *)operator new();
    v244 = (std::__shared_weak_count_vtbl *)v484;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v243->__shared_owners_ = 0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = v244;
  }
  else
  {
    v243 = 0;
  }
  v416 = v243;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v411, "B");
  (*((void (**)(void **, void **, _QWORD, void **))*v242 + 3))(v242, &v415, 0, v411);
  if (v412 < 0)
    operator delete(v411[0]);
  v245 = v416;
  if (v416)
  {
    v246 = (unint64_t *)&v416->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = v484;
  v484 = 0;
  if (v248)
    (*(void (**)(void *))(*(_QWORD *)v248 + 8))(v248);
  if (v414 < 0)
    operator delete(v413[0]);
  v249 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v407, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v407, 0, (uint64_t *)&v484);
  v409 = v484;
  if (v484)
  {
    v250 = (std::__shared_weak_count *)operator new();
    v251 = (std::__shared_weak_count_vtbl *)v484;
    v250->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v250->__shared_owners_ = 0;
    v250->__shared_weak_owners_ = 0;
    v250[1].__vftable = v251;
  }
  else
  {
    v250 = 0;
  }
  v410 = v250;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v405, "N");
  (*((void (**)(void **, void **, uint64_t, void **))*v249 + 3))(v249, &v409, 2, v405);
  if (v406 < 0)
    operator delete(v405[0]);
  v252 = v410;
  if (v410)
  {
    v253 = (unint64_t *)&v410->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = v484;
  v484 = 0;
  if (v255)
    (*(void (**)(void *))(*(_QWORD *)v255 + 8))(v255);
  if (v408 < 0)
    operator delete(v407[0]);
  v256 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v401, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v401, 0, (uint64_t *)&v484);
  v403 = v484;
  if (v484)
  {
    v257 = (std::__shared_weak_count *)operator new();
    v258 = (std::__shared_weak_count_vtbl *)v484;
    v257->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v257->__shared_owners_ = 0;
    v257->__shared_weak_owners_ = 0;
    v257[1].__vftable = v258;
  }
  else
  {
    v257 = 0;
  }
  v404 = v257;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v399, "B");
  (*((void (**)(void **, void **, _QWORD, void **))*v256 + 3))(v256, &v403, 0, v399);
  if (v400 < 0)
    operator delete(v399[0]);
  v259 = v404;
  if (v404)
  {
    v260 = (unint64_t *)&v404->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v262 = v484;
  v484 = 0;
  if (v262)
    (*(void (**)(void *))(*(_QWORD *)v262 + 8))(v262);
  if (v402 < 0)
    operator delete(v401[0]);
  v263 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v395, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v395, 0, (uint64_t *)&v484);
  v397 = v484;
  if (v484)
  {
    v264 = (std::__shared_weak_count *)operator new();
    v265 = (std::__shared_weak_count_vtbl *)v484;
    v264->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v264->__shared_owners_ = 0;
    v264->__shared_weak_owners_ = 0;
    v264[1].__vftable = v265;
  }
  else
  {
    v264 = 0;
  }
  v398 = v264;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v393, "K");
  (*((void (**)(void **, void **, uint64_t, void **))*v263 + 3))(v263, &v397, 1, v393);
  if (v394 < 0)
    operator delete(v393[0]);
  v266 = v398;
  if (v398)
  {
    v267 = (unint64_t *)&v398->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v269 = v484;
  v484 = 0;
  if (v269)
    (*(void (**)(void *))(*(_QWORD *)v269 + 8))(v269);
  if (v396 < 0)
    operator delete(v395[0]);
  v270 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v389, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v389, 0, (uint64_t *)&v484);
  v391 = v484;
  if (v484)
  {
    v271 = (std::__shared_weak_count *)operator new();
    v272 = (std::__shared_weak_count_vtbl *)v484;
    v271->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v271->__shared_owners_ = 0;
    v271->__shared_weak_owners_ = 0;
    v271[1].__vftable = v272;
  }
  else
  {
    v271 = 0;
  }
  v392 = v271;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v387, "N");
  (*((void (**)(void **, void **, uint64_t, void **))*v270 + 3))(v270, &v391, 2, v387);
  if (v388 < 0)
    operator delete(v387[0]);
  v273 = v392;
  if (v392)
  {
    v274 = (unint64_t *)&v392->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  v276 = v484;
  v484 = 0;
  if (v276)
    (*(void (**)(void *))(*(_QWORD *)v276 + 8))(v276);
  if (v390 < 0)
    operator delete(v389[0]);
  v277 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v484);
  v385 = v484;
  if (v484)
  {
    v278 = (std::__shared_weak_count *)operator new();
    v279 = (std::__shared_weak_count_vtbl *)v484;
    v278->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v278->__shared_owners_ = 0;
    v278->__shared_weak_owners_ = 0;
    v278[1].__vftable = v279;
  }
  else
  {
    v278 = 0;
  }
  v386 = v278;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v383, "B");
  (*((void (**)(void **, void **, _QWORD, void **))*v277 + 3))(v277, &v385, 0, v383);
  if (v384 < 0)
    operator delete(v383[0]);
  v280 = v386;
  if (v386)
  {
    v281 = (unint64_t *)&v386->__shared_owners_;
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  v283 = v484;
  v484 = 0;
  if (v283)
    (*(void (**)(void *))(*(_QWORD *)v283 + 8))(v283);
  v284 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v484);
  v381 = v484;
  if (v484)
  {
    v285 = (std::__shared_weak_count *)operator new();
    v286 = (std::__shared_weak_count_vtbl *)v484;
    v285->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v285->__shared_owners_ = 0;
    v285->__shared_weak_owners_ = 0;
    v285[1].__vftable = v286;
  }
  else
  {
    v285 = 0;
  }
  v382 = v285;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v379, "M");
  (*((void (**)(void **, void **, uint64_t, void **))*v284 + 3))(v284, &v381, 2, v379);
  if (v380 < 0)
    operator delete(v379[0]);
  v287 = v382;
  if (v382)
  {
    v288 = (unint64_t *)&v382->__shared_owners_;
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }
  v290 = v484;
  v484 = 0;
  if (v290)
    (*(void (**)(void *))(*(_QWORD *)v290 + 8))(v290);
  v291 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &v484);
  v377 = v484;
  if (v484)
  {
    v292 = (std::__shared_weak_count *)operator new();
    v293 = (std::__shared_weak_count_vtbl *)v484;
    v292->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v292->__shared_owners_ = 0;
    v292->__shared_weak_owners_ = 0;
    v292[1].__vftable = v293;
  }
  else
  {
    v292 = 0;
  }
  v378 = v292;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v375, "B");
  (*((void (**)(void **, void **, _QWORD, void **))*v291 + 3))(v291, &v377, 0, v375);
  if (v376 < 0)
    operator delete(v375[0]);
  v294 = v378;
  if (v378)
  {
    v295 = (unint64_t *)&v378->__shared_owners_;
    do
      v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }
  v297 = v484;
  v484 = 0;
  if (v297)
    (*(void (**)(void *))(*(_QWORD *)v297 + 8))(v297);
  v298 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &v484);
  v373 = v484;
  if (v484)
  {
    v299 = (std::__shared_weak_count *)operator new();
    v300 = (std::__shared_weak_count_vtbl *)v484;
    v299->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v299->__shared_owners_ = 0;
    v299->__shared_weak_owners_ = 0;
    v299[1].__vftable = v300;
  }
  else
  {
    v299 = 0;
  }
  v374 = v299;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v371, "K");
  (*((void (**)(void **, void **, uint64_t, void **))*v298 + 3))(v298, &v373, 1, v371);
  if (v372 < 0)
    operator delete(v371[0]);
  v301 = v374;
  if (v374)
  {
    v302 = (unint64_t *)&v374->__shared_owners_;
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  v304 = v484;
  v484 = 0;
  if (v304)
    (*(void (**)(void *))(*(_QWORD *)v304 + 8))(v304);
  v305 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &v484);
  v369 = v484;
  if (v484)
  {
    v306 = (std::__shared_weak_count *)operator new();
    v307 = (std::__shared_weak_count_vtbl *)v484;
    v306->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v306->__shared_owners_ = 0;
    v306->__shared_weak_owners_ = 0;
    v306[1].__vftable = v307;
  }
  else
  {
    v306 = 0;
  }
  v370 = v306;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v367, "M");
  (*((void (**)(void **, void **, uint64_t, void **))*v305 + 3))(v305, &v369, 2, v367);
  if (v368 < 0)
    operator delete(v367[0]);
  v308 = v370;
  if (v370)
  {
    v309 = (unint64_t *)&v370->__shared_owners_;
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  v311 = v484;
  v484 = 0;
  if (v311)
    (*(void (**)(void *))(*(_QWORD *)v311 + 8))(v311);
  v312 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &v484);
  v365 = v484;
  if (v484)
  {
    v313 = (std::__shared_weak_count *)operator new();
    v314 = (std::__shared_weak_count_vtbl *)v484;
    v313->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v313->__shared_owners_ = 0;
    v313->__shared_weak_owners_ = 0;
    v313[1].__vftable = v314;
  }
  else
  {
    v313 = 0;
  }
  v366 = v313;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v363, "B");
  (*((void (**)(void **, void **, _QWORD, void **))*v312 + 3))(v312, &v365, 0, v363);
  if (v364 < 0)
    operator delete(v363[0]);
  v315 = v366;
  if (v366)
  {
    v316 = (unint64_t *)&v366->__shared_owners_;
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  v318 = v484;
  v484 = 0;
  if (v318)
    (*(void (**)(void *))(*(_QWORD *)v318 + 8))(v318);
  v319 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &v484);
  v361 = v484;
  if (v484)
  {
    v320 = (std::__shared_weak_count *)operator new();
    v321 = (std::__shared_weak_count_vtbl *)v484;
    v320->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v320->__shared_owners_ = 0;
    v320->__shared_weak_owners_ = 0;
    v320[1].__vftable = v321;
  }
  else
  {
    v320 = 0;
  }
  v362 = v320;
  v484 = 0;
  std::string::basic_string[abi:ne180100]<0>(v359, "M");
  (*((void (**)(void **, void **, uint64_t, void **))*v319 + 3))(v319, &v361, 1, v359);
  if (v360 < 0)
    operator delete(v359[0]);
  v322 = v362;
  if (v362)
  {
    v323 = (unint64_t *)&v362->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  v325 = v484;
  v484 = 0;
  if (v325)
    (*(void (**)(void *))(*(_QWORD *)v325 + 8))(v325);
  v326 = *a3;
  v357 = Scalar;
  if (Scalar)
  {
    v327 = (std::__shared_weak_count *)operator new();
    v328 = Scalar;
    v327->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v327->__shared_owners_ = 0;
    v327->__shared_weak_owners_ = 0;
    v327[1].__vftable = (std::__shared_weak_count_vtbl *)v328;
  }
  else
  {
    v327 = 0;
  }
  v358 = v327;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v326 + 56))(v326, &v357);
  v329 = v358;
  if (v358)
  {
    v330 = (unint64_t *)&v358->__shared_owners_;
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  v332 = Scalar;
  Scalar = 0;
  if (v332)
    (*((void (**)(void **))*v332 + 1))(v332);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v333 = __p;
  std::string::basic_string[abi:ne180100]<0>(v353, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v353, 1, (uint64_t *)&v495);
  v355 = v495;
  if (v495)
  {
    v334 = (std::__shared_weak_count *)operator new();
    v335 = v495;
    v334->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v334->__shared_owners_ = 0;
    v334->__shared_weak_owners_ = 0;
    v334[1].__vftable = v335;
  }
  else
  {
    v334 = 0;
  }
  v356 = v334;
  v495 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bf16");
  std::string::basic_string[abi:ne180100]<0>(&v478, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v480, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v481, "int32");
  std::string::basic_string[abi:ne180100]<0>(v482, "int8");
  std::string::basic_string[abi:ne180100]<0>(v483, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v484, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v333 + 24))(v333, &v355, &v484, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v484);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v483[i + 2]) < 0)
      operator delete(v483[i]);
  }
  v337 = v356;
  if (v356)
  {
    v338 = (unint64_t *)&v356->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
      std::__shared_weak_count::__release_weak(v337);
    }
  }
  v340 = v495;
  v495 = 0;
  if (v340)
    (*((void (**)(std::__shared_weak_count_vtbl *))v340->~__shared_weak_count + 1))(v340);
  if (v354 < 0)
    operator delete(v353[0]);
  v341 = *a3;
  v351 = __p;
  if (__p)
  {
    v342 = (std::__shared_weak_count *)operator new();
    v343 = (std::__shared_weak_count_vtbl *)__p;
    v342->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v342->__shared_owners_ = 0;
    v342->__shared_weak_owners_ = 0;
    v342[1].__vftable = v343;
  }
  else
  {
    v342 = 0;
  }
  v352 = v342;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v341 + 56))(v341, &v351);
  v344 = v352;
  if (v352)
  {
    v345 = (unint64_t *)&v352->__shared_owners_;
    do
      v346 = __ldaxr(v345);
    while (__stlxr(v346 - 1, v345));
    if (!v346)
    {
      ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
      std::__shared_weak_count::__release_weak(v344);
    }
  }
  v347 = __p;
  __p = 0;
  if (v347)
    (*(void (**)(void *))(*(_QWORD *)v347 + 8))(v347);
  if (v470)
  {
    v348 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v470);
    MEMORY[0x1E0C023A0](v348, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v462, 0);
  result = (uint64_t)v474;
  if (v474)
  {
    v350 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v474);
    return MEMORY[0x1E0C023A0](v350, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A08EB4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;

  v4 = STACK[0x4E0];
  STACK[0x4E0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4F8], 0);
  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x498], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x520], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Topk::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count_vtbl *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  uint64_t result;
  uint64_t v116;
  void *v117;
  std::__shared_weak_count *v118;
  void *v119[2];
  char v120;
  void *v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  void *v141[2];
  uint64_t v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  void *__p;
  void *v150;
  _QWORD *v151;
  void *v152;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  void *v161;
  void *v162;
  _QWORD *v163;
  void *v164;
  void *v165;
  _QWORD *v166;
  void *v167;
  void *v168;
  _QWORD *v169;
  __n128 v170;
  uint64_t v171;
  _QWORD *v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count_vtbl *v174;
  void (__cdecl **v175)(std::__shared_weak_count *__hidden);
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _QWORD v180[3];
  _QWORD *v181;
  uint64_t Scalar;
  uint64_t v183;
  uint64_t v184;
  _QWORD v185[2];
  _QWORD v186[4];

  v186[3] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v172 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v173 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v174 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v175 = &v8->~__shared_weak_count_0;
  Scalar = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v173);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v167 = v10;
  *v10 = v9;
  v169 = v10 + 1;
  v168 = v10 + 1;
  v183 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v167);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v164 = v12;
  *v12 = v11;
  v165 = v12 + 1;
  v166 = v12 + 1;
  v184 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v164);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v161 = v14;
  *v14 = v13;
  v162 = v14 + 1;
  v163 = v14 + 1;
  v185[0] = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v161);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v158 = v16;
  *v16 = v15;
  v159 = v16 + 1;
  v160 = v16 + 1;
  v185[1] = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v158);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v155 = v18;
  *v18 = v17;
  v156 = v18 + 1;
  v157 = v18 + 1;
  v186[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v155);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v152 = v20;
  *v20 = v19;
  v153 = v20 + 1;
  v154 = v20 + 1;
  v186[1] = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v152);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v150 = v22 + 1;
  v151 = v22 + 1;
  v186[2] = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 8, &v170);
  MIL::IRParameter::Make(&v170, &v171);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v171);
  v23 = v171;
  v171 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v25 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p)
  {
    v150 = __p;
    operator delete(__p);
  }
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v173)
  {
    v174 = v173;
    operator delete(v173);
  }
  v27 = v172;
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 9);
  v183 = MIL::IRTensorValueType::MakeScalar(a1, 10);
  v184 = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v173);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v27, "k", (uint64_t *)&v173);
  v28 = v173;
  v173 = 0;
  if (v28)
    (*((void (**)(std::__shared_weak_count_vtbl *))v28->~__shared_weak_count + 1))(v28);
  v29 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v30 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v172;
  v173 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v173, 1, &v147);
  MIL::IRParameter::Make(&v147, &Scalar);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v32, "axis", &Scalar);
  v34 = Scalar;
  Scalar = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v36 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v38 = v172;
  v173 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v173, 1, &v146);
  MIL::IRParameter::Make(&v146, &Scalar);
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v38, "ascending", &Scalar);
  v40 = Scalar;
  Scalar = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v146.n128_u64[1];
  if (v146.n128_u64[1])
  {
    v42 = (unint64_t *)(v146.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  v44 = v172;
  v173 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v173, 1, &v145);
  MIL::IRParameter::Make(&v145, &Scalar);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v44, "sort", &Scalar);
  v46 = Scalar;
  Scalar = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v48 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 48))(*((_QWORD *)v45 + 5), 1);
  v50 = v172;
  v173 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v173, 1, &v144);
  MIL::IRParameter::Make(&v144, &Scalar);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v50, "return_indices", &Scalar);
  v52 = Scalar;
  Scalar = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v54 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 48))(*((_QWORD *)v51 + 5), 1);
  v56 = v172;
  v173 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v173, 1, &v143);
  MIL::IRParameter::Make(&v143, &Scalar);
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v56, "output_indices_dtype", &Scalar);
  v58 = Scalar;
  Scalar = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v143.n128_u64[1];
  if (v143.n128_u64[1])
  {
    v60 = (unint64_t *)(v143.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 48))(*((_QWORD *)v57 + 5), 1);
  v167 = 0;
  *(_OWORD *)v141 = *(_OWORD *)a2;
  v142 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v62 = (uint64_t)v172;
  v139 = (uint64_t)v172;
  if (v172)
  {
    v63 = (std::__shared_weak_count *)operator new();
    v63->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v63->__shared_owners_ = 0;
    v63->__shared_weak_owners_ = 0;
    v63[1].__vftable = (std::__shared_weak_count_vtbl *)v62;
    v140 = v63;
    v172 = 0;
    v137 = v167;
    if (v167)
    {
      v64 = (std::__shared_weak_count *)operator new();
      v65 = (std::__shared_weak_count_vtbl *)v167;
      v64->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F948;
      v64->__shared_owners_ = 0;
      v64->__shared_weak_owners_ = 0;
      v64[1].__vftable = v65;
    }
    else
    {
      v64 = 0;
    }
  }
  else
  {
    v64 = 0;
    v140 = 0;
    v172 = 0;
    v137 = 0;
  }
  v138 = v64;
  v167 = 0;
  v180[0] = &unk_1EA99FAC8;
  v180[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateTopk;
  v181 = v180;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v141, 4, 7, 1, 2, (uint64_t)&v139, (uint64_t)&v137, (uint64_t)v180, a3, (uint64_t)v178);
  v66 = v179;
  if (v179 == v178)
  {
    v67 = 4;
    v66 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_76;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_76:
  v68 = v181;
  if (v181 == v180)
  {
    v69 = 4;
    v68 = v180;
    goto LABEL_80;
  }
  if (v181)
  {
    v69 = 5;
LABEL_80:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v140;
  if (v140)
  {
    v74 = (unint64_t *)&v140->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v142) < 0)
    operator delete(v141[0]);
  v76 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceTopk;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 200))(v76, v176);
  v77 = v177;
  if (v177 == v176)
  {
    v78 = 4;
    v77 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_98;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_98:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v79 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&v173);
  v135 = v173;
  if (v173)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = v173;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v136 = v80;
  v173 = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v79 + 24))(v79, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v82 = v136;
  if (v136)
  {
    v83 = (unint64_t *)&v136->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v173;
  v173 = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  if (v134 < 0)
    operator delete(v133[0]);
  v86 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v127, "k");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v127, 0, (uint64_t *)&v173);
  v129 = v173;
  if (v173)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = v173;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v130 = v87;
  v173 = 0;
  std::string::basic_string[abi:ne180100]<0>(v125, "K_TYPE");
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v86 + 24))(v86, &v129, v125);
  if (v126 < 0)
    operator delete(v125[0]);
  v89 = v130;
  if (v130)
  {
    v90 = (unint64_t *)&v130->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = v173;
  v173 = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  if (v128 < 0)
    operator delete(v127[0]);
  v93 = *a3;
  v123 = Scalar;
  if (Scalar)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = Scalar;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = (std::__shared_weak_count_vtbl *)v95;
  }
  else
  {
    v94 = 0;
  }
  v124 = v94;
  Scalar = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v93 + 56))(v93, &v123);
  v96 = v124;
  if (v124)
  {
    v97 = (unint64_t *)&v124->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v164);
  v100 = v164;
  std::string::basic_string[abi:ne180100]<0>(v119, "output_indices_dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v119, 1, (uint64_t *)&v161);
  v121 = v161;
  if (v161)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)v161;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v122 = v101;
  v161 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "int32");
  std::string::basic_string[abi:ne180100]<0>(v185, "uint16");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v173, (unsigned __int8 *)&Scalar, 2);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v100 + 24))(v100, &v121, &v173, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v173);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v186[i]) < 0)
      operator delete((void *)v185[i]);
  }
  v104 = v122;
  if (v122)
  {
    v105 = (unint64_t *)&v122->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v161;
  v161 = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  if (v120 < 0)
    operator delete(v119[0]);
  v108 = *a3;
  v117 = v164;
  if (v164)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)v164;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v118 = v109;
  v164 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v108 + 56))(v108, &v117);
  v111 = v118;
  if (v118)
  {
    v112 = (unint64_t *)&v118->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v164;
  v164 = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, 0);
  result = (uint64_t)v172;
  if (v172)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v172);
    return MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A0A800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a72;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (a44 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a72, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x228], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::CustomValidators::ValidateSliceUpdate@<X0>(MIL::Operators::Common::ios18::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count_vtbl *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  MIL::IRValueType *ParameterType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _BYTE __p[40];
  uint64_t v43;
  int v44;
  void *v45[2];
  char v46;
  _QWORD v47[2];
  void *v48[2];
  char v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *v52[2];
  uint64_t v53;
  _QWORD v54[2];
  std::__shared_weak_count *v55;
  void *v56;
  void *v57;
  void (***v58)(MIL::MILContextImpl *__hidden);
  std::__shared_weak_count *v59;
  char v60[8];
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  _OWORD v65[2];
  int v66;
  void **v67;

  memset(v65, 0, sizeof(v65));
  v66 = 1065353216;
  MIL::Validation::OpToTypeInferenceParams(this, (uint64_t)v65, (MIL::ValidationResult *)v60);
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v60))
  {
    *(_OWORD *)(a2 + 8) = v61;
    v61 = 0uLL;
    *(_OWORD *)(a2 + 24) = v62;
    *(_QWORD *)(a2 + 40) = v63;
    v62 = 0uLL;
    v63 = 0;
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v64;
    goto LABEL_42;
  }
  MIL::MILContext::Make(__p);
  v58 = *(void (****)(MIL::MILContextImpl *__hidden))__p;
  if (*(_QWORD *)__p)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = *(std::__shared_weak_count_vtbl **)__p;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F0A8;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v6;
  }
  else
  {
    v5 = 0;
  }
  v59 = v5;
  MIL::UnknownLocation::Make(v54);
  v54[1] = v54[0];
  if (v54[0])
  {
    v7 = (std::__shared_weak_count *)operator new();
    v8 = (std::__shared_weak_count_vtbl *)v54[0];
    v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7[1].__vftable = v8;
  }
  else
  {
    v7 = 0;
  }
  v55 = v7;
  v53 = 0;
  v54[0] = 0;
  memset(__p, 0, 32);
  *(_DWORD *)&__p[32] = 1065353216;
  v52[0] = 0;
  v52[1] = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceByIndex(&v58, v65, (uint64_t **)&v56);
  v67 = v52;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v67);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
  v9 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v54[0];
  v54[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  std::string::basic_string[abi:ne180100]<0>(__p, "update");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v14 = MIL::IRValueType::AsTensorType(ParameterType);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 104))(v14))
  {
    if (v57 == v56)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v15 = MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v56);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 104))(v15))
    {
      v16 = MIL::IRValueType::AsTensorType(ParameterType);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 96))(v16);
      if (v57 == v56)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v18 = (uint64_t *)v17;
      v19 = MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v56);
      v20 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
      v21 = *v18;
      v22 = v18[1];
      if (v22 - *v18 != v20[1] - *v20)
      {
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v32 = (std::__shared_weak_count *)LocationPtr[1];
        v50 = *LocationPtr;
        v51 = v32;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        MIL::ValidationResult::ValidationResult(a2, &v50, 304, v48);
        if (v49 < 0)
          operator delete(v48[0]);
        v35 = v51;
        if (v51)
        {
          v36 = (unint64_t *)&v51->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        goto LABEL_35;
      }
      if (v22 != v21)
      {
        v23 = 0;
        while (1)
        {
          if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 8 * v23) + 24))(*(_QWORD *)(v21 + 8 * v23))
            && !(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v20 + 8 * v23) + 24))(*(_QWORD *)(*v20 + 8 * v23)))
          {
            v24 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v18 + 8 * v23));
            v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24);
            v26 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v20 + 8 * v23));
            if (v25 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 48))(v26))
              break;
          }
          ++v23;
          v21 = *v18;
          if (v23 >= (v18[1] - *v18) >> 3)
            goto LABEL_29;
        }
        v38 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
        v39 = v38[1];
        v47[0] = *v38;
        v47[1] = v39;
        if (v39)
        {
          v40 = (unint64_t *)(v39 + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        MIL::ValidationResult::ValidationResult(a2, v47, 304, v45);
        if (v46 < 0)
          operator delete(v45[0]);
        std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v47);
        goto LABEL_35;
      }
    }
  }
LABEL_29:
  std::string::basic_string[abi:ne180100]<0>(v52, "x");
  MIL::Validation::VerifyOutputShapeMatchesInput(this, (MIL::ValidationResult *)__p);
  if (SHIBYTE(v53) < 0)
    operator delete(v52[0]);
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&__p[24];
    *(_QWORD *)(a2 + 40) = v43;
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[32] = 0;
    v43 = 0;
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v44;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
LABEL_35:
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  v27 = v59;
  if (v59)
  {
    v28 = (unint64_t *)&v59->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_42:
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v60);
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v65);
}

void sub_1E0A0B244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46)
{
  uint64_t v46;

  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v46 - 184);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v46 - 168));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v46 - 112);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Concat::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  char **v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  void **v63;
  char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  char **v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void **v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void **v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void **v106;
  uint64_t result;
  uint64_t v108;
  void **v109;
  std::__shared_weak_count *v110;
  void *v111[2];
  char v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  void *v115[2];
  char v116;
  void *v117[2];
  char v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  __int128 v121;
  __int128 v122;
  void *v123[2];
  uint64_t v124;
  void *v125;
  void *v126;
  _QWORD *v127;
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  char **v132;
  __n128 v133;
  __n128 v134;
  void *__p;
  void *v136;
  _QWORD *v137;
  void *v138;
  void *v139;
  _QWORD *v140;
  void *v141;
  void *v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  _BYTE v151[24];
  _BYTE *v152;
  _QWORD v153[3];
  _QWORD *v154;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v148 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v156 = (uint64_t)&v8->~__shared_weak_count_0;
  v157 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v144 = v10;
  *v10 = v9;
  v145 = v10 + 1;
  v146 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v144);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v141 = v12;
  *v12 = v11;
  v142 = v12 + 1;
  v143 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v141);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v138 = v14;
  *v14 = v13;
  v139 = v14 + 1;
  v140 = v14 + 1;
  v163 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v138);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  __p = v16;
  *v16 = v15;
  v136 = v16 + 1;
  v137 = v16 + 1;
  v164 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 5, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v125);
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "values", (uint64_t *)&v125);
  v18 = v125;
  v125 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v20 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v136 = __p;
    operator delete(__p);
  }
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (Scalar)
  {
    v156 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v17 + 5) + 64))(*((_QWORD *)v17 + 5), 1);
  v22 = v148;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v134);
  MIL::IRParameter::Make(&v134, (uint64_t *)&v160);
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v22, "axis", (uint64_t *)&v160);
  v24 = v160;
  v160 = 0;
  if (v24)
    (*((void (**)(void **))*v24 + 1))(v24);
  v25 = (std::__shared_weak_count *)v134.n128_u64[1];
  if (v134.n128_u64[1])
  {
    v26 = (unint64_t *)(v134.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v23 + 5) + 32))(*((_QWORD *)v23 + 5), 1);
  v28 = v148;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v133);
  MIL::IRParameter::Make(&v133, (uint64_t *)&v160);
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v28, "interleave", (uint64_t *)&v160);
  v30 = v160;
  v160 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = (std::__shared_weak_count *)v133.n128_u64[1];
  if (v133.n128_u64[1])
  {
    v32 = (unint64_t *)(v133.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  v132 = 0;
  v34 = operator new();
  *(_QWORD *)v34 = 0;
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v132, (void **)v34);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v132, 1uLL);
  v35 = v132;
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v144 = v37;
  *v37 = v36;
  v145 = v37 + 1;
  v146 = v37 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v144);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v141 = v39;
  *v39 = v38;
  v142 = v39 + 1;
  v143 = v39 + 1;
  v156 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v141);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v138 = v41;
  *v41 = v40;
  v139 = v41 + 1;
  v140 = v41 + 1;
  v157 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v138);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  __p = v43;
  *v43 = v42;
  v136 = v43 + 1;
  v137 = v43 + 1;
  v158 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v125 = v45;
  *v45 = v44;
  v126 = v45 + 1;
  v127 = v45 + 1;
  v159 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v125);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 5, &v128);
  MIL::IRParameter::Make(&v128, &v129);
  v46 = v129;
  v130 = v129;
  if (v129)
  {
    v47 = (_QWORD *)operator new();
    v48 = v129;
    *v47 = &unk_1EA99F888;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v48;
  }
  else
  {
    v47 = 0;
  }
  v131 = v47;
  v129 = 0;
  v49 = v35[2];
  v50 = v35[1];
  if (v50 >= v49)
  {
    v52 = (v50 - *v35) >> 4;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v54 = v49 - *v35;
    if (v54 >> 3 > v53)
      v53 = v54 >> 3;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
      v55 = 0xFFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    v164 = (uint64_t)(v35 + 2);
    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v35 + 2), v55);
    v58 = (uint64_t *)&v56[16 * v52];
    *v58 = v46;
    v58[1] = (uint64_t)v47;
    v130 = 0;
    v131 = 0;
    v60 = *v35;
    v59 = v35[1];
    if (v59 == *v35)
    {
      v63 = (void **)v35[1];
      v61 = &v56[16 * v52];
    }
    else
    {
      v61 = &v56[16 * v52];
      do
      {
        v62 = *((_OWORD *)v59 - 1);
        v59 -= 16;
        *((_OWORD *)v61 - 1) = v62;
        v61 -= 16;
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = 0;
      }
      while (v59 != v60);
      v63 = (void **)*v35;
      v59 = v35[1];
    }
    v51 = (char *)(v58 + 2);
    *v35 = v61;
    v160 = v63;
    v161 = (uint64_t)v63;
    v35[1] = (char *)(v58 + 2);
    v162 = (uint64_t)v59;
    v64 = v35[2];
    v35[2] = &v56[16 * v57];
    v163 = (uint64_t)v64;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v50 = v46;
    *((_QWORD *)v50 + 1) = v47;
    v51 = v50 + 16;
    v130 = 0;
    v131 = 0;
  }
  v35[1] = v51;
  v65 = v129;
  v129 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v128.n128_u64[1];
  if (v128.n128_u64[1])
  {
    v67 = (unint64_t *)(v128.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  if (__p)
  {
    v136 = __p;
    operator delete(__p);
  }
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  *(_OWORD *)v123 = *(_OWORD *)a2;
  v124 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v69 = (uint64_t)v148;
  *(_QWORD *)&v122 = v148;
  if (v148)
  {
    v70 = (_QWORD *)operator new();
    *v70 = &unk_1EA99F8E8;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v69;
  }
  else
  {
    v70 = 0;
  }
  *((_QWORD *)&v122 + 1) = v70;
  v148 = 0;
  *(_QWORD *)&v121 = v132;
  if (v132)
  {
    v71 = (_QWORD *)operator new();
    v72 = v132;
    *v71 = &unk_1EA99F948;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v121 + 1) = v71;
  v132 = 0;
  v153[0] = &unk_1EA99FAC8;
  v153[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateConcat;
  v154 = v153;
  v152 = 0;
  MIL::IROperator::Make((__int128 *)v123, &v122, &v121, (uint64_t)v153, (uint64_t)v151, a3);
  v73 = v152;
  if (v152 == v151)
  {
    v74 = 4;
    v73 = v151;
  }
  else
  {
    if (!v152)
      goto LABEL_77;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_77:
  v75 = v154;
  if (v154 == v153)
  {
    v76 = 4;
    v75 = v153;
    goto LABEL_81;
  }
  if (v154)
  {
    v76 = 5;
LABEL_81:
    (*(void (**)(void))(*v75 + 8 * v76))();
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  if (*((_QWORD *)&v121 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
  if (*((_QWORD *)&v122 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (SHIBYTE(v124) < 0)
    operator delete(v123[0]);
  v83 = *a3;
  v149[0] = &off_1EA99FBD8;
  v149[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceConcat;
  v150 = v149;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v83 + 200))(v83, v149);
  v84 = v150;
  if (v150 == v149)
  {
    v85 = 4;
    v84 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_99;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v86 = v160;
  std::string::basic_string[abi:ne180100]<0>(v117, "values");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v117, 0, (uint64_t *)&Scalar);
  v119 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v120 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v115, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v86 + 3))(v86, &v119, v115);
  if (v116 < 0)
    operator delete(v115[0]);
  v89 = v120;
  if (v120)
  {
    p_shared_owners = (unint64_t *)&v120->__shared_owners_;
    do
      v91 = __ldaxr(p_shared_owners);
    while (__stlxr(v91 - 1, p_shared_owners));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  if (v118 < 0)
    operator delete(v117[0]);
  v93 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v113 = Scalar;
  if (Scalar)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = Scalar;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v114 = v94;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v111, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v93 + 3))(v93, &v113, v111);
  if (v112 < 0)
    operator delete(v111[0]);
  v96 = v114;
  if (v114)
  {
    v97 = (unint64_t *)&v114->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*((void (**)(std::__shared_weak_count_vtbl *))v99->~__shared_weak_count + 1))(v99);
  v100 = *a3;
  v109 = v160;
  if (v160)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v160;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v110 = v101;
  v160 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v100 + 56))(v100, &v109);
  v103 = v110;
  if (v110)
  {
    v104 = (unint64_t *)&v110->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v160;
  v160 = 0;
  if (v106)
    (*((void (**)(void **))*v106 + 1))(v106);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v132, 0);
  result = (uint64_t)v148;
  if (v148)
  {
    v108 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v148);
    return MEMORY[0x1E0C023A0](v108, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A0BFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40)
{
  uint64_t *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;

  v43 = *(_QWORD *)(v41 - 112);
  *(_QWORD *)(v41 - 112) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *v40;
  *v40 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v41 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ExpandDims::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void **v31;
  unsigned __int8 *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char **v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  char *v72;
  char *v73;
  char *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  char **v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  void **v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  void **v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  void **v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void **v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void **v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void **v133;
  uint64_t result;
  uint64_t v135;
  void **v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  void **v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  void *v154;
  std::__shared_weak_count *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  void *v160;
  void *v161;
  _QWORD *v162;
  __n128 v163;
  uint64_t v164;
  __int128 v165;
  char **v166;
  __n128 v167;
  void *__p;
  void *v169;
  _QWORD *v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  void *v177;
  void *v178;
  _QWORD *v179;
  void *v180;
  void *v181;
  _QWORD *v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  void *v186;
  void *v187;
  _QWORD *v188;
  __n128 v189;
  _QWORD *v190;
  void *v191;
  void *v192;
  char *v193;
  char *v194;
  char **v195;
  _QWORD v196[3];
  _QWORD *v197;
  _BYTE v198[24];
  _BYTE *v199;
  _QWORD v200[3];
  _QWORD *v201;
  void *v202;
  void *v203;
  _QWORD *v204;
  void **v205;
  void **v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v190 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  v191 = v8;
  *(_QWORD *)v8 = v7;
  v193 = v8 + 8;
  v192 = v8 + 8;
  v205 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v191);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v202 = v10;
  *v10 = v9;
  v203 = v10 + 1;
  v204 = v10 + 1;
  v206 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v202);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v186 = v12;
  *v12 = v11;
  v188 = v12 + 1;
  v187 = v12 + 1;
  v207 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v186);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v183 = v14;
  *v14 = v13;
  v184 = v14 + 1;
  v185 = v14 + 1;
  v208 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v183);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v180 = v16;
  *v16 = v15;
  v181 = v16 + 1;
  v182 = v16 + 1;
  v209 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v180);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v177 = v18;
  *v18 = v17;
  v178 = v18 + 1;
  v179 = v18 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v177);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v174 = v20;
  *v20 = v19;
  v175 = v20 + 1;
  v176 = v20 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v174);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v171 = v22;
  *v22 = v21;
  v172 = v22 + 1;
  v173 = v22 + 1;
  v212 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v171);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v169 = v24 + 1;
  v170 = v24 + 1;
  v213 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v205, 9, &v189);
  MIL::IRParameter::Make(&v189, (uint64_t *)&v160);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v160);
  v25 = v160;
  v160 = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v189.n128_u64[1];
  if (v189.n128_u64[1])
  {
    v27 = (unint64_t *)(v189.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (__p)
  {
    v169 = __p;
    operator delete(__p);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  v29 = v190;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (void **)operator new(8uLL);
  v205 = v31;
  *v31 = (void *)v30;
  v206 = v31 + 1;
  v207 = (uint64_t)(v31 + 1);
  v202 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v205);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v202, 1, &v167);
  MIL::IRParameter::Make(&v167, (uint64_t *)&v191);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v29, "axes", (uint64_t *)&v191);
  v33 = v191;
  v191 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v35 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v166 = 0;
  v37 = operator new();
  *(_QWORD *)v37 = 0;
  *(_QWORD *)(v37 + 8) = 0;
  *(_QWORD *)(v37 + 16) = 0;
  v205 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, (void **)v37);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v205, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v166, 1uLL);
  v38 = v166;
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v202 = v40;
  *v40 = v39;
  v203 = v40 + 1;
  v204 = v40 + 1;
  v205 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v202);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v186 = v42;
  *v42 = v41;
  v188 = v42 + 1;
  v187 = v42 + 1;
  v206 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v186);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v183 = v44;
  *v44 = v43;
  v184 = v44 + 1;
  v185 = v44 + 1;
  v207 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v183);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v180 = v46;
  *v46 = v45;
  v181 = v46 + 1;
  v182 = v46 + 1;
  v208 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v180);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v177 = v48;
  *v48 = v47;
  v178 = v48 + 1;
  v179 = v48 + 1;
  v209 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v177);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v174 = v50;
  *v50 = v49;
  v175 = v50 + 1;
  v176 = v50 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v174);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v171 = v52;
  *v52 = v51;
  v172 = v52 + 1;
  v173 = v52 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v171);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  __p = v54;
  *v54 = v53;
  v169 = v54 + 1;
  v170 = v54 + 1;
  v212 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v160 = v56;
  *v56 = v55;
  v161 = v56 + 1;
  v162 = v56 + 1;
  v213 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v160);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v205, 9, &v163);
  MIL::IRParameter::Make(&v163, &v164);
  *(_QWORD *)&v165 = v164;
  if (v164)
  {
    v57 = (_QWORD *)operator new();
    v58 = v164;
    *v57 = &unk_1EA99F888;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v165 + 1) = v57;
  v164 = 0;
  v59 = v38[2];
  v60 = v38[1];
  if (v60 >= v59)
  {
    v61 = (v60 - *v38) >> 4;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v63 = v59 - *v38;
    if (v63 >> 3 > v62)
      v62 = v63 >> 3;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
      v64 = 0xFFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    v195 = v38 + 2;
    v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v38 + 2), v64);
    v67 = &v65[16 * v61];
    *(_OWORD *)v67 = v165;
    v165 = 0uLL;
    v69 = *v38;
    v68 = v38[1];
    if (v68 == *v38)
    {
      v72 = v38[1];
      v70 = &v65[16 * v61];
    }
    else
    {
      v70 = &v65[16 * v61];
      do
      {
        v71 = *((_OWORD *)v68 - 1);
        v68 -= 16;
        *((_OWORD *)v70 - 1) = v71;
        v70 -= 16;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
      }
      while (v68 != v69);
      v72 = *v38;
      v68 = v38[1];
    }
    v73 = v67 + 16;
    *v38 = v70;
    v192 = v72;
    v38[1] = v67 + 16;
    v193 = v68;
    v74 = v38[2];
    v38[2] = &v65[16 * v66];
    v194 = v74;
    v191 = v72;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v191);
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
    v38[1] = v73;
    if (v75)
    {
      p_shared_owners = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(p_shared_owners);
      while (__stlxr(v77 - 1, p_shared_owners));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
  }
  else
  {
    *(_QWORD *)v60 = v165;
    *((_QWORD *)v60 + 1) = v57;
    v165 = 0uLL;
    v38[1] = v60 + 16;
  }
  v78 = v164;
  v164 = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v80 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  if (__p)
  {
    v169 = __p;
    operator delete(__p);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  v158 = *(_OWORD *)a2;
  v159 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v82 = (uint64_t)v190;
  *(_QWORD *)&v157 = v190;
  if (v190)
  {
    v83 = (_QWORD *)operator new();
    *v83 = &unk_1EA99F8E8;
    v83[1] = 0;
    v83[2] = 0;
    v83[3] = v82;
  }
  else
  {
    v83 = 0;
  }
  *((_QWORD *)&v157 + 1) = v83;
  v190 = 0;
  *(_QWORD *)&v156 = v166;
  if (v166)
  {
    v84 = (_QWORD *)operator new();
    v85 = v166;
    *v84 = &unk_1EA99F948;
    v84[1] = 0;
    v84[2] = 0;
    v84[3] = v85;
  }
  else
  {
    v84 = 0;
  }
  *((_QWORD *)&v156 + 1) = v84;
  v166 = 0;
  v200[0] = &unk_1EA99FAC8;
  v200[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateExpandDims;
  v201 = v200;
  v199 = 0;
  MIL::IROperator::Make(&v158, &v157, &v156, (uint64_t)v200, (uint64_t)v198, a3);
  v86 = v199;
  if (v199 == v198)
  {
    v87 = 4;
    v86 = v198;
  }
  else
  {
    if (!v199)
      goto LABEL_92;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_92:
  v88 = v201;
  if (v201 == v200)
  {
    v89 = 4;
    v88 = v200;
    goto LABEL_96;
  }
  if (v201)
  {
    v89 = 5;
LABEL_96:
    (*(void (**)(void))(*v88 + 8 * v89))();
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
  if (*((_QWORD *)&v157 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (SHIBYTE(v159) < 0)
    operator delete((void *)v158);
  v96 = *a3;
  v196[0] = &off_1EA99FBD8;
  v196[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceExpandDims;
  v197 = v196;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v96 + 200))(v96, v196);
  v97 = v197;
  if (v197 == v196)
  {
    v98 = 4;
    v97 = v196;
  }
  else
  {
    if (!v197)
      goto LABEL_114;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v205);
  v99 = v205;
  std::string::basic_string[abi:ne180100]<0>(v152, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&v191);
  v154 = v191;
  if (v191)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = (std::__shared_weak_count_vtbl *)v191;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  v191 = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*((void (**)(void **, void **, void **))*v99 + 3))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v191;
  v191 = 0;
  if (v105)
    (*(void (**)(void *))(*(_QWORD *)v105 + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v205;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v191);
  v148 = v191;
  if (v191)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)v191;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  v191 = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*((void (**)(void **, void **, void **))*v106 + 3))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v191;
  v191 = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  v113 = *a3;
  v144 = v205;
  if (v205)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = v205;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = (std::__shared_weak_count_vtbl *)v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  v205 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v205;
  v205 = 0;
  if (v119)
    (*((void (**)(void **))*v119 + 1))(v119);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v205);
  v120 = v205;
  std::string::basic_string[abi:ne180100]<0>(v140, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&v191);
  v142 = v191;
  if (v191)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v191;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v191 = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v120 + 3))(v120, &v142, 0, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v123 = v143;
  if (v143)
  {
    v124 = (unint64_t *)&v143->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v191;
  v191 = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  if (v141 < 0)
    operator delete(v140[0]);
  v127 = *a3;
  v136 = v205;
  if (v205)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = v205;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = (std::__shared_weak_count_vtbl *)v129;
  }
  else
  {
    v128 = 0;
  }
  v137 = v128;
  v205 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v127 + 56))(v127, &v136);
  v130 = v137;
  if (v137)
  {
    v131 = (unint64_t *)&v137->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v205;
  v205 = 0;
  if (v133)
    (*((void (**)(void **))*v133 + 1))(v133);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, 0);
  result = (uint64_t)v190;
  if (v190)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v190);
    return MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A0D404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void **a52)
{
  uint64_t *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;

  v55 = *(_QWORD *)(v53 - 144);
  *(_QWORD *)(v53 - 144) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *v52;
  *v52 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x228], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Reshape::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  char *v75;
  char *v76;
  char *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  char **v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  void **v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  void **v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  void **v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  void **v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void **v129;
  void **v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  void **v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void **v143;
  uint64_t result;
  uint64_t v145;
  void **v146;
  std::__shared_weak_count *v147;
  void *v148[2];
  char v149;
  void *v150[2];
  char v151;
  void *v152;
  std::__shared_weak_count *v153;
  void **v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  void *v162[2];
  char v163;
  void *v164;
  std::__shared_weak_count *v165;
  void *v166[2];
  char v167;
  void *v168[2];
  char v169;
  void *v170;
  std::__shared_weak_count *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  void *v176;
  void *v177;
  _QWORD *v178;
  __n128 v179;
  uint64_t v180;
  __int128 v181;
  char **v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *v190;
  void *v191;
  _QWORD *v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  void *v199;
  void *v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  _QWORD *v204;
  void *v205;
  void *v206;
  _QWORD *v207;
  __n128 v208;
  _QWORD *v209;
  void *v210;
  void *v211;
  char *v212;
  char *v213;
  char **v214;
  _QWORD v215[3];
  _QWORD *v216;
  _BYTE v217[24];
  _BYTE *v218;
  _QWORD v219[3];
  _QWORD *v220;
  void **v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;

  v230 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v209 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  v210 = v8;
  *(_QWORD *)v8 = v7;
  v212 = v8 + 8;
  v211 = v8 + 8;
  v221 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v210);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v205 = v10;
  *v10 = v9;
  v207 = v10 + 1;
  v206 = v10 + 1;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v205);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v202 = v12;
  *v12 = v11;
  v204 = v12 + 1;
  v203 = v12 + 1;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v202);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v199 = v14;
  *v14 = v13;
  v201 = v14 + 1;
  v200 = v14 + 1;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v199);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v196 = v16;
  *v16 = v15;
  v198 = v16 + 1;
  v197 = v16 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v196);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v193 = v18;
  *v18 = v17;
  v195 = v18 + 1;
  v194 = v18 + 1;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v193);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v190 = v20;
  *v20 = v19;
  v191 = v20 + 1;
  v192 = v20 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v190);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v187 = v22;
  *v22 = v21;
  v188 = v22 + 1;
  v189 = v22 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v187);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v185 = v24 + 1;
  v186 = v24 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v221, 9, &v208);
  MIL::IRParameter::Make(&v208, (uint64_t *)&v176);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v176);
  v25 = v176;
  v176 = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v208.n128_u64[1];
  if (v208.n128_u64[1])
  {
    v27 = (unint64_t *)(v208.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  v29 = v209;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (char *)operator new(8uLL);
  v210 = v31;
  *(_QWORD *)v31 = v30;
  v212 = v31 + 8;
  v211 = v31 + 8;
  v221 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v210);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = operator new(8uLL);
  v205 = v33;
  *v33 = v32;
  v207 = v33 + 1;
  v206 = v33 + 1;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v205);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(8uLL);
  v202 = v35;
  *v35 = v34;
  v204 = v35 + 1;
  v203 = v35 + 1;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v202);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v221, 3, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v199);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v29, "shape", (uint64_t *)&v199);
  v36 = v199;
  v199 = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v38 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  v182 = 0;
  v40 = operator new();
  *(_QWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  v221 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, (void **)v40);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v221, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v182, 1uLL);
  v41 = v182;
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v205 = v43;
  *v43 = v42;
  v207 = v43 + 1;
  v206 = v43 + 1;
  v221 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v205);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v202 = v45;
  *v45 = v44;
  v204 = v45 + 1;
  v203 = v45 + 1;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v202);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v199 = v47;
  *v47 = v46;
  v201 = v47 + 1;
  v200 = v47 + 1;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v199);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v196 = v49;
  *v49 = v48;
  v198 = v49 + 1;
  v197 = v49 + 1;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v196);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  v193 = v51;
  *v51 = v50;
  v195 = v51 + 1;
  v194 = v51 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v193);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  v190 = v53;
  *v53 = v52;
  v191 = v53 + 1;
  v192 = v53 + 1;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v190);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(8uLL);
  v187 = v55;
  *v55 = v54;
  v188 = v55 + 1;
  v189 = v55 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v187);
  v56 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v57 = operator new(8uLL);
  __p = v57;
  *v57 = v56;
  v185 = v57 + 1;
  v186 = v57 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(8uLL);
  v176 = v59;
  *v59 = v58;
  v177 = v59 + 1;
  v178 = v59 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v176);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v221, 9, &v179);
  MIL::IRParameter::Make(&v179, &v180);
  *(_QWORD *)&v181 = v180;
  if (v180)
  {
    v60 = (_QWORD *)operator new();
    v61 = v180;
    *v60 = &unk_1EA99F888;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v181 + 1) = v60;
  v180 = 0;
  v62 = v41[2];
  v63 = v41[1];
  if (v63 >= v62)
  {
    v64 = (v63 - *v41) >> 4;
    v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v66 = v62 - *v41;
    if (v66 >> 3 > v65)
      v65 = v66 >> 3;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
      v67 = 0xFFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    v214 = v41 + 2;
    v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v41 + 2), v67);
    v70 = &v68[16 * v64];
    *(_OWORD *)v70 = v181;
    v181 = 0uLL;
    v72 = *v41;
    v71 = v41[1];
    if (v71 == *v41)
    {
      v75 = v41[1];
      v73 = &v68[16 * v64];
    }
    else
    {
      v73 = &v68[16 * v64];
      do
      {
        v74 = *((_OWORD *)v71 - 1);
        v71 -= 16;
        *((_OWORD *)v73 - 1) = v74;
        v73 -= 16;
        *(_QWORD *)v71 = 0;
        *((_QWORD *)v71 + 1) = 0;
      }
      while (v71 != v72);
      v75 = *v41;
      v71 = v41[1];
    }
    v76 = v70 + 16;
    *v41 = v73;
    v211 = v75;
    v41[1] = v70 + 16;
    v212 = v71;
    v77 = v41[2];
    v41[2] = &v68[16 * v69];
    v213 = v77;
    v210 = v75;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v210);
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
    v41[1] = v76;
    if (v78)
    {
      p_shared_owners = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldaxr(p_shared_owners);
      while (__stlxr(v80 - 1, p_shared_owners));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
  }
  else
  {
    *(_QWORD *)v63 = v181;
    *((_QWORD *)v63 + 1) = v60;
    v181 = 0uLL;
    v41[1] = v63 + 16;
  }
  v81 = v180;
  v180 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v179.n128_u64[1];
  if (v179.n128_u64[1])
  {
    v83 = (unint64_t *)(v179.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v176)
  {
    v177 = v176;
    operator delete(v176);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  v174 = *(_OWORD *)a2;
  v175 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v85 = (uint64_t)v209;
  *(_QWORD *)&v173 = v209;
  if (v209)
  {
    v86 = (_QWORD *)operator new();
    *v86 = &unk_1EA99F8E8;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v85;
  }
  else
  {
    v86 = 0;
  }
  *((_QWORD *)&v173 + 1) = v86;
  v209 = 0;
  *(_QWORD *)&v172 = v182;
  if (v182)
  {
    v87 = (_QWORD *)operator new();
    v88 = v182;
    *v87 = &unk_1EA99F948;
    v87[1] = 0;
    v87[2] = 0;
    v87[3] = v88;
  }
  else
  {
    v87 = 0;
  }
  *((_QWORD *)&v172 + 1) = v87;
  v182 = 0;
  v219[0] = &unk_1EA99FAC8;
  v219[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateReshape;
  v220 = v219;
  v218 = 0;
  MIL::IROperator::Make(&v174, &v173, &v172, (uint64_t)v219, (uint64_t)v217, a3);
  v89 = v218;
  if (v218 == v217)
  {
    v90 = 4;
    v89 = v217;
  }
  else
  {
    if (!v218)
      goto LABEL_96;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_96:
  v91 = v220;
  if (v220 == v219)
  {
    v92 = 4;
    v91 = v219;
    goto LABEL_100;
  }
  if (v220)
  {
    v92 = 5;
LABEL_100:
    (*(void (**)(void))(*v91 + 8 * v92))();
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (*((_QWORD *)&v173 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (SHIBYTE(v175) < 0)
    operator delete((void *)v174);
  v99 = *a3;
  v215[0] = &off_1EA99FBD8;
  v215[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceReshape;
  v216 = v215;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v99 + 200))(v99, v215);
  v100 = v216;
  if (v216 == v215)
  {
    v101 = 4;
    v100 = v215;
  }
  else
  {
    if (!v216)
      goto LABEL_118;
    v101 = 5;
  }
  (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_118:
  MIL::Validation::TensorDTypeConstraints::Make(&v221);
  v102 = v221;
  std::string::basic_string[abi:ne180100]<0>(v168, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v168, 0, (uint64_t *)&v210);
  v170 = v210;
  if (v210)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = (std::__shared_weak_count_vtbl *)v210;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v171 = v103;
  v210 = 0;
  std::string::basic_string[abi:ne180100]<0>(v166, "T");
  (*((void (**)(void **, void **, void **))*v102 + 3))(v102, &v170, v166);
  if (v167 < 0)
    operator delete(v166[0]);
  v105 = v171;
  if (v171)
  {
    v106 = (unint64_t *)&v171->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v210;
  v210 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v169 < 0)
    operator delete(v168[0]);
  v109 = v221;
  std::string::basic_string[abi:ne180100]<0>(v162, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v162, 0, (uint64_t *)&v210);
  v164 = v210;
  if (v210)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)v210;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v165 = v110;
  v210 = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "SHAPE_T");
  (*((void (**)(void **, void **, void **))*v109 + 3))(v109, &v164, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v112 = v165;
  if (v165)
  {
    v113 = (unint64_t *)&v165->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v210;
  v210 = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v163 < 0)
    operator delete(v162[0]);
  v116 = v221;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v210);
  v158 = v210;
  if (v210)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = (std::__shared_weak_count_vtbl *)v210;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v159 = v117;
  v210 = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*((void (**)(void **, void **, void **))*v116 + 3))(v116, &v158, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v119 = v159;
  if (v159)
  {
    v120 = (unint64_t *)&v159->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v210;
  v210 = 0;
  if (v122)
    (*(void (**)(void *))(*(_QWORD *)v122 + 8))(v122);
  v123 = *a3;
  v154 = v221;
  if (v221)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = v221;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = (std::__shared_weak_count_vtbl *)v125;
  }
  else
  {
    v124 = 0;
  }
  v155 = v124;
  v221 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v123 + 56))(v123, &v154);
  v126 = v155;
  if (v155)
  {
    v127 = (unint64_t *)&v155->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v221;
  v221 = 0;
  if (v129)
    (*((void (**)(void **))*v129 + 1))(v129);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v221);
  v130 = v221;
  std::string::basic_string[abi:ne180100]<0>(v150, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v150, 0, (uint64_t *)&v210);
  v152 = v210;
  if (v210)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = (std::__shared_weak_count_vtbl *)v210;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v153 = v131;
  v210 = 0;
  std::string::basic_string[abi:ne180100]<0>(v148, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v130 + 3))(v130, &v152, 0, v148);
  if (v149 < 0)
    operator delete(v148[0]);
  v133 = v153;
  if (v153)
  {
    v134 = (unint64_t *)&v153->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v210;
  v210 = 0;
  if (v136)
    (*(void (**)(void *))(*(_QWORD *)v136 + 8))(v136);
  if (v151 < 0)
    operator delete(v150[0]);
  v137 = *a3;
  v146 = v221;
  if (v221)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = v221;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = (std::__shared_weak_count_vtbl *)v139;
  }
  else
  {
    v138 = 0;
  }
  v147 = v138;
  v221 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v137 + 56))(v137, &v146);
  v140 = v147;
  if (v147)
  {
    v141 = (unint64_t *)&v147->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v221;
  v221 = 0;
  if (v143)
    (*((void (**)(void **))*v143 + 1))(v143);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, 0);
  result = (uint64_t)v209;
  if (v209)
  {
    v145 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v209);
    return MEMORY[0x1E0C023A0](v145, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A0EB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 144);
  *(_QWORD *)(v61 - 144) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ReshapeLike::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  void **v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  unsigned __int8 *v66;
  void **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  char **v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  __int128 v105;
  char *v106;
  char *v107;
  char *v108;
  std::__shared_weak_count *v109;
  unint64_t *p_shared_owners;
  unint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  char **v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  char *v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  char *v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  void **v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void **v160;
  uint64_t result;
  uint64_t v162;
  void **v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  char *v167;
  std::__shared_weak_count *v168;
  void *v169[2];
  char v170;
  void *v171[2];
  char v172;
  char *v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  void *v177[2];
  char v178;
  char *v179;
  std::__shared_weak_count *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  void *v185;
  void *v186;
  _QWORD *v187;
  __n128 v188;
  uint64_t v189;
  __int128 v190;
  char **v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  void *__p;
  void *v197;
  _QWORD *v198;
  void *v199;
  void *v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  _QWORD *v204;
  void *v205;
  void *v206;
  _QWORD *v207;
  void *v208;
  void *v209;
  _QWORD *v210;
  void *v211;
  void *v212;
  _QWORD *v213;
  void *v214;
  void *v215;
  _QWORD *v216;
  void *v217;
  void *v218;
  _QWORD *v219;
  __n128 v220;
  _QWORD *v221;
  _QWORD v222[3];
  _QWORD *v223;
  _BYTE v224[24];
  _BYTE *v225;
  _QWORD v226[3];
  _QWORD *v227;
  void **v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *Scalar;
  char *v238;
  char *v239;
  char *v240;
  char **v241;
  uint64_t v242;

  v242 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v221 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v238 = v8 + 8;
  v239 = v8 + 8;
  v228 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v217 = v10;
  *v10 = v9;
  v219 = v10 + 1;
  v218 = v10 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v217);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v214 = v12;
  *v12 = v11;
  v216 = v12 + 1;
  v215 = v12 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v214);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v211 = v14;
  *v14 = v13;
  v213 = v14 + 1;
  v212 = v14 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v211);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v208 = v16;
  *v16 = v15;
  v209 = v16 + 1;
  v210 = v16 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v208);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v205 = v18;
  *v18 = v17;
  v206 = v18 + 1;
  v207 = v18 + 1;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v205);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v202 = v20;
  *v20 = v19;
  v203 = v20 + 1;
  v204 = v20 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v202);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v199 = v22;
  *v22 = v21;
  v200 = v22 + 1;
  v201 = v22 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v199);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v197 = v24 + 1;
  v198 = v24 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v228, 9, &v220);
  MIL::IRParameter::Make(&v220, (uint64_t *)&v185);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v185);
  v25 = v185;
  v185 = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v220.n128_u64[1];
  if (v220.n128_u64[1])
  {
    v27 = (unint64_t *)(v220.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (__p)
  {
    v197 = __p;
    operator delete(__p);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (Scalar)
  {
    v238 = Scalar;
    operator delete(Scalar);
  }
  v29 = v221;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (char *)operator new(8uLL);
  Scalar = v31;
  *(_QWORD *)v31 = v30;
  v238 = v31 + 8;
  v239 = v31 + 8;
  v228 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  v217 = v33;
  *v33 = v32;
  v219 = v33 + 1;
  v218 = v33 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v217);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v214 = v35;
  *v35 = v34;
  v216 = v35 + 1;
  v215 = v35 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v214);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v211 = v37;
  *v37 = v36;
  v213 = v37 + 1;
  v212 = v37 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v211);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v208 = v39;
  *v39 = v38;
  v209 = v39 + 1;
  v210 = v39 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v208);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v205 = v41;
  *v41 = v40;
  v206 = v41 + 1;
  v207 = v41 + 1;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v205);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v202 = v43;
  *v43 = v42;
  v203 = v43 + 1;
  v204 = v43 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v202);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v199 = v45;
  *v45 = v44;
  v200 = v45 + 1;
  v201 = v45 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v199);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  __p = v47;
  *v47 = v46;
  v197 = v47 + 1;
  v198 = v47 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v228, 9, &v195);
  MIL::IRParameter::Make(&v195, (uint64_t *)&v185);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v29, "ref_tensors", (uint64_t *)&v185);
  v49 = v185;
  v185 = 0;
  if (v49)
    (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
  v50 = (std::__shared_weak_count *)v195.n128_u64[1];
  if (v195.n128_u64[1])
  {
    v51 = (unint64_t *)(v195.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (__p)
  {
    v197 = __p;
    operator delete(__p);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (Scalar)
  {
    v238 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 64))(*((_QWORD *)v48 + 5), 1);
  v53 = v221;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v194);
  MIL::IRParameter::Make(&v194, (uint64_t *)&v228);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v53, "begins", (uint64_t *)&v228);
  v55 = v228;
  v228 = 0;
  if (v55)
    (*((void (**)(void **))*v55 + 1))(v55);
  v56 = (std::__shared_weak_count *)v194.n128_u64[1];
  if (v194.n128_u64[1])
  {
    v57 = (unint64_t *)(v194.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 64))(*((_QWORD *)v54 + 5), 1);
  v59 = v221;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v228);
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v59, "ends", (uint64_t *)&v228);
  v61 = v228;
  v228 = 0;
  if (v61)
    (*((void (**)(void **))*v61 + 1))(v61);
  v62 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v63 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 64))(*((_QWORD *)v60 + 5), 1);
  v65 = v221;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v192);
  MIL::IRParameter::Make(&v192, (uint64_t *)&v228);
  v66 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v65, "end_masks", (uint64_t *)&v228);
  v67 = v228;
  v228 = 0;
  if (v67)
    (*((void (**)(void **))*v67 + 1))(v67);
  v68 = (std::__shared_weak_count *)v192.n128_u64[1];
  if (v192.n128_u64[1])
  {
    v69 = (unint64_t *)(v192.n128_u64[1] + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 32))(*((_QWORD *)v66 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 48))(*((_QWORD *)v66 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 64))(*((_QWORD *)v66 + 5), 1);
  v191 = 0;
  v71 = operator new();
  *(_QWORD *)v71 = 0;
  *(_QWORD *)(v71 + 8) = 0;
  *(_QWORD *)(v71 + 16) = 0;
  v228 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v191, (void **)v71);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v228, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v191, 1uLL);
  v72 = v191;
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v217 = v74;
  *v74 = v73;
  v219 = v74 + 1;
  v218 = v74 + 1;
  v228 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v217);
  v75 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v76 = operator new(8uLL);
  v214 = v76;
  *v76 = v75;
  v216 = v76 + 1;
  v215 = v76 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v214);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(8uLL);
  v211 = v78;
  *v78 = v77;
  v213 = v78 + 1;
  v212 = v78 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v211);
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(8uLL);
  v208 = v80;
  *v80 = v79;
  v209 = v80 + 1;
  v210 = v80 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v208);
  v81 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v82 = operator new(8uLL);
  v205 = v82;
  *v82 = v81;
  v206 = v82 + 1;
  v207 = v82 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v205);
  v83 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v84 = operator new(8uLL);
  v202 = v84;
  *v84 = v83;
  v203 = v84 + 1;
  v204 = v84 + 1;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v202);
  v85 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v86 = operator new(8uLL);
  v199 = v86;
  *v86 = v85;
  v200 = v86 + 1;
  v201 = v86 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v199);
  v87 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v88 = operator new(8uLL);
  __p = v88;
  *v88 = v87;
  v197 = v88 + 1;
  v198 = v88 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v89 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v90 = operator new(8uLL);
  v185 = v90;
  *v90 = v89;
  v186 = v90 + 1;
  v187 = v90 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v185);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v228, 9, &v188);
  MIL::IRParameter::Make(&v188, &v189);
  *(_QWORD *)&v190 = v189;
  if (v189)
  {
    v91 = (_QWORD *)operator new();
    v92 = v189;
    *v91 = &unk_1EA99F888;
    v91[1] = 0;
    v91[2] = 0;
    v91[3] = v92;
  }
  else
  {
    v91 = 0;
  }
  *((_QWORD *)&v190 + 1) = v91;
  v189 = 0;
  v93 = v72[2];
  v94 = v72[1];
  if (v94 >= v93)
  {
    v95 = (v94 - *v72) >> 4;
    v96 = v95 + 1;
    if ((unint64_t)(v95 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v97 = v93 - *v72;
    if (v97 >> 3 > v96)
      v96 = v97 >> 3;
    if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF0)
      v98 = 0xFFFFFFFFFFFFFFFLL;
    else
      v98 = v96;
    v241 = v72 + 2;
    v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v72 + 2), v98);
    v101 = &v99[16 * v95];
    *(_OWORD *)v101 = v190;
    v190 = 0uLL;
    v103 = *v72;
    v102 = v72[1];
    if (v102 == *v72)
    {
      v106 = v72[1];
      v104 = &v99[16 * v95];
    }
    else
    {
      v104 = &v99[16 * v95];
      do
      {
        v105 = *((_OWORD *)v102 - 1);
        v102 -= 16;
        *((_OWORD *)v104 - 1) = v105;
        v104 -= 16;
        *(_QWORD *)v102 = 0;
        *((_QWORD *)v102 + 1) = 0;
      }
      while (v102 != v103);
      v106 = *v72;
      v102 = v72[1];
    }
    v107 = v101 + 16;
    *v72 = v104;
    Scalar = v106;
    v238 = v106;
    v72[1] = v101 + 16;
    v239 = v102;
    v108 = v72[2];
    v72[2] = &v99[16 * v100];
    v240 = v108;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
    v109 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
    v72[1] = v107;
    if (v109)
    {
      p_shared_owners = (unint64_t *)&v109->__shared_owners_;
      do
        v111 = __ldaxr(p_shared_owners);
      while (__stlxr(v111 - 1, p_shared_owners));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
  }
  else
  {
    *(_QWORD *)v94 = v190;
    *((_QWORD *)v94 + 1) = v91;
    v190 = 0uLL;
    v72[1] = v94 + 16;
  }
  v112 = v189;
  v189 = 0;
  if (v112)
    (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
  v113 = (std::__shared_weak_count *)v188.n128_u64[1];
  if (v188.n128_u64[1])
  {
    v114 = (unint64_t *)(v188.n128_u64[1] + 8);
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  if (__p)
  {
    v197 = __p;
    operator delete(__p);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  v183 = *(_OWORD *)a2;
  v184 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v116 = (uint64_t)v221;
  *(_QWORD *)&v182 = v221;
  if (v221)
  {
    v117 = (_QWORD *)operator new();
    *v117 = &unk_1EA99F8E8;
    v117[1] = 0;
    v117[2] = 0;
    v117[3] = v116;
  }
  else
  {
    v117 = 0;
  }
  *((_QWORD *)&v182 + 1) = v117;
  v221 = 0;
  *(_QWORD *)&v181 = v191;
  if (v191)
  {
    v118 = (_QWORD *)operator new();
    v119 = v191;
    *v118 = &unk_1EA99F948;
    v118[1] = 0;
    v118[2] = 0;
    v118[3] = v119;
  }
  else
  {
    v118 = 0;
  }
  *((_QWORD *)&v181 + 1) = v118;
  v191 = 0;
  v226[0] = &unk_1EA99FAC8;
  v226[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateReshapeLike;
  v227 = v226;
  v225 = 0;
  MIL::IROperator::Make(&v183, &v182, &v181, (uint64_t)v226, (uint64_t)v224, a3);
  v120 = v225;
  if (v225 == v224)
  {
    v121 = 4;
    v120 = v224;
  }
  else
  {
    if (!v225)
      goto LABEL_129;
    v121 = 5;
  }
  (*(void (**)(void))(*v120 + 8 * v121))();
LABEL_129:
  v122 = v227;
  if (v227 == v226)
  {
    v123 = 4;
    v122 = v226;
    goto LABEL_133;
  }
  if (v227)
  {
    v123 = 5;
LABEL_133:
    (*(void (**)(void))(*v122 + 8 * v123))();
  }
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  if (*((_QWORD *)&v181 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
  if (*((_QWORD *)&v182 + 1))
  {
    v128 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  if (SHIBYTE(v184) < 0)
    operator delete((void *)v183);
  v130 = *a3;
  v222[0] = &off_1EA99FBD8;
  v222[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceReshapeLike;
  v223 = v222;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v130 + 200))(v130, v222);
  v131 = v223;
  if (v223 == v222)
  {
    v132 = 4;
    v131 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_151;
    v132 = 5;
  }
  (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_151:
  MIL::Validation::TensorDTypeConstraints::Make(&v228);
  v133 = v228;
  std::string::basic_string[abi:ne180100]<0>(v177, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v177, 0, (uint64_t *)&Scalar);
  v179 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v180 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v175, "T");
  (*((void (**)(void **, char **, void **))*v133 + 3))(v133, &v179, v175);
  if (v176 < 0)
    operator delete(v175[0]);
  v136 = v180;
  if (v180)
  {
    v137 = (unint64_t *)&v180->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*(void (**)(char *))(*(_QWORD *)v139 + 8))(v139);
  if (v178 < 0)
    operator delete(v177[0]);
  v140 = v228;
  std::string::basic_string[abi:ne180100]<0>(v171, "ref_tensors");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v171, 0, (uint64_t *)&Scalar);
  v173 = Scalar;
  if (Scalar)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = (std::__shared_weak_count_vtbl *)Scalar;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v174 = v141;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v169, "R");
  (*((void (**)(void **, char **, void **))*v140 + 3))(v140, &v173, v169);
  if (v170 < 0)
    operator delete(v169[0]);
  v143 = v174;
  if (v174)
  {
    v144 = (unint64_t *)&v174->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = Scalar;
  Scalar = 0;
  if (v146)
    (*(void (**)(char *))(*(_QWORD *)v146 + 8))(v146);
  if (v172 < 0)
    operator delete(v171[0]);
  v147 = v228;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v167 = Scalar;
  if (Scalar)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = (std::__shared_weak_count_vtbl *)Scalar;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v168 = v148;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "T");
  (*((void (**)(void **, char **, void **))*v147 + 3))(v147, &v167, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v150 = v168;
  if (v168)
  {
    v151 = (unint64_t *)&v168->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = Scalar;
  Scalar = 0;
  if (v153)
    (*(void (**)(char *))(*(_QWORD *)v153 + 8))(v153);
  v154 = *a3;
  v163 = v228;
  if (v228)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = v228;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = (std::__shared_weak_count_vtbl *)v156;
  }
  else
  {
    v155 = 0;
  }
  v164 = v155;
  v228 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v154 + 56))(v154, &v163);
  v157 = v164;
  if (v164)
  {
    v158 = (unint64_t *)&v164->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = v228;
  v228 = 0;
  if (v160)
    (*((void (**)(void **))*v160 + 1))(v160);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v191, 0);
  result = (uint64_t)v221;
  if (v221)
  {
    v162 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v221);
    return MEMORY[0x1E0C023A0](v162, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A104C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  v53 = *(_QWORD *)(v51 - 184);
  *(_QWORD *)(v51 - 184) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *v50;
  *v50 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x260], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Reverse::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void **v40;
  unsigned __int8 *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  char *v90;
  char *v91;
  char *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  char **v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void **v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void *v145;
  void **v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  void **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void **v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void **v166;
  uint64_t result;
  uint64_t v168;
  void **v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  void *v177[2];
  char v178;
  void *v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  void *v183[2];
  char v184;
  void *v185;
  std::__shared_weak_count *v186;
  void **v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191;
  std::__shared_weak_count *v192;
  void *v193[2];
  char v194;
  void *v195[2];
  char v196;
  void *v197;
  std::__shared_weak_count *v198;
  __int128 v199;
  __int128 v200;
  void *v201[2];
  uint64_t v202;
  void *v203;
  void *v204;
  _QWORD *v205;
  __n128 v206;
  uint64_t v207;
  __int128 v208;
  char **v209;
  __n128 v210;
  void *__p;
  void *v212;
  _QWORD *v213;
  void *v214;
  void *v215;
  _QWORD *v216;
  void *v217;
  void *v218;
  _QWORD *v219;
  void *v220;
  void *v221;
  _QWORD *v222;
  void *v223;
  void *v224;
  _QWORD *v225;
  void *v226;
  void *v227;
  _QWORD *v228;
  void *v229;
  void *v230;
  _QWORD *v231;
  __n128 v232;
  _QWORD *v233;
  void *v234;
  void *v235;
  char *v236;
  char *v237;
  char **v238;
  _BYTE v239[24];
  _BYTE *v240;
  _BYTE v241[24];
  _BYTE *v242;
  _QWORD v243[3];
  _QWORD *v244;
  void *v245;
  void *v246;
  _QWORD *v247;
  void **v248;
  void **v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;

  v257 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v233 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v236 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v234 = v9;
  v235 = v9 + 16;
  v248 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v234);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v246 = v12 + 2;
  v247 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v245 = v12;
  v249 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v245);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v231 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v229 = v15;
  v230 = v15 + 2;
  v250 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v229);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v228 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v226 = v18;
  v227 = v18 + 2;
  v251 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v226);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v225 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v223 = v21;
  v224 = v21 + 2;
  v252 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v223);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v222 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v220 = v24;
  v221 = v24 + 2;
  v253 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v220);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v219 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v217 = v27;
  v218 = v27 + 2;
  v254 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v217);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v215 = v30 + 2;
  v216 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v214 = v30;
  v255 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v214);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v212 = v33 + 2;
  v213 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  __p = v33;
  v256 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v248, 9, &v232);
  MIL::IRParameter::Make(&v232, (uint64_t *)&v203);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v203);
  v34 = v203;
  v203 = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v232.n128_u64[1];
  if (v232.n128_u64[1])
  {
    v36 = (unint64_t *)(v232.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (__p)
  {
    v212 = __p;
    operator delete(__p);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  if (v229)
  {
    v230 = v229;
    operator delete(v229);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  v38 = v233;
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (void **)operator new(8uLL);
  v248 = v40;
  *v40 = (void *)v39;
  v249 = v40 + 1;
  v250 = (uint64_t)(v40 + 1);
  v245 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v248);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v245, 1, &v210);
  MIL::IRParameter::Make(&v210, (uint64_t *)&v234);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v38, "axes", (uint64_t *)&v234);
  v42 = v234;
  v234 = 0;
  if (v42)
    (*(void (**)(void *))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v210.n128_u64[1];
  if (v210.n128_u64[1])
  {
    v44 = (unint64_t *)(v210.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v248)
  {
    v249 = v248;
    operator delete(v248);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 48))(*((_QWORD *)v41 + 5), 1);
  v209 = 0;
  v46 = operator new();
  *(_QWORD *)v46 = 0;
  *(_QWORD *)(v46 + 8) = 0;
  *(_QWORD *)(v46 + 16) = 0;
  v248 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v209, (void **)v46);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v248, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v209, 1uLL);
  v47 = v209;
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(0x10uLL);
  v246 = v50 + 2;
  v247 = v50 + 2;
  *v50 = v48;
  v50[1] = v49;
  v245 = v50;
  v248 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v245);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(0x10uLL);
  v231 = v53 + 2;
  *v53 = v51;
  v53[1] = v52;
  v229 = v53;
  v230 = v53 + 2;
  v249 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v229);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(0x10uLL);
  v228 = v56 + 2;
  *v56 = v54;
  v56[1] = v55;
  v226 = v56;
  v227 = v56 + 2;
  v250 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v226);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(0x10uLL);
  v225 = v59 + 2;
  *v59 = v57;
  v59[1] = v58;
  v223 = v59;
  v224 = v59 + 2;
  v251 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v223);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(0x10uLL);
  v222 = v62 + 2;
  *v62 = v60;
  v62[1] = v61;
  v220 = v62;
  v221 = v62 + 2;
  v252 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v220);
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(0x10uLL);
  v219 = v65 + 2;
  *v65 = v63;
  v65[1] = v64;
  v217 = v65;
  v218 = v65 + 2;
  v253 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v217);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(0x10uLL);
  v215 = v68 + 2;
  v216 = v68 + 2;
  *v68 = v66;
  v68[1] = v67;
  v214 = v68;
  v254 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v214);
  v69 = MIL::IRUnknownDimension::Make(a1, 0);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(0x10uLL);
  v212 = v71 + 2;
  v213 = v71 + 2;
  *v71 = v69;
  v71[1] = v70;
  __p = v71;
  v255 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v72 = MIL::IRUnknownDimension::Make(a1, 0);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(0x10uLL);
  v204 = v74 + 2;
  v205 = v74 + 2;
  *v74 = v72;
  v74[1] = v73;
  v203 = v74;
  v256 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v203);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v248, 9, &v206);
  MIL::IRParameter::Make(&v206, &v207);
  *(_QWORD *)&v208 = v207;
  if (v207)
  {
    v75 = (_QWORD *)operator new();
    v76 = v207;
    *v75 = &unk_1EA99F888;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = v76;
  }
  else
  {
    v75 = 0;
  }
  *((_QWORD *)&v208 + 1) = v75;
  v207 = 0;
  v77 = v47[2];
  v78 = v47[1];
  if (v78 >= v77)
  {
    v79 = (v78 - *v47) >> 4;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v81 = v77 - *v47;
    if (v81 >> 3 > v80)
      v80 = v81 >> 3;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
      v82 = 0xFFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    v238 = v47 + 2;
    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v47 + 2), v82);
    v85 = &v83[16 * v79];
    *(_OWORD *)v85 = v208;
    v208 = 0uLL;
    v87 = *v47;
    v86 = v47[1];
    if (v86 == *v47)
    {
      v90 = v47[1];
      v88 = &v83[16 * v79];
    }
    else
    {
      v88 = &v83[16 * v79];
      do
      {
        v89 = *((_OWORD *)v86 - 1);
        v86 -= 16;
        *((_OWORD *)v88 - 1) = v89;
        v88 -= 16;
        *(_QWORD *)v86 = 0;
        *((_QWORD *)v86 + 1) = 0;
      }
      while (v86 != v87);
      v90 = *v47;
      v86 = v47[1];
    }
    v91 = v85 + 16;
    *v47 = v88;
    v235 = v90;
    v47[1] = v85 + 16;
    v236 = v86;
    v92 = v47[2];
    v47[2] = &v83[16 * v84];
    v237 = v92;
    v234 = v90;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v234);
    v93 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
    v47[1] = v91;
    if (v93)
    {
      p_shared_owners = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldaxr(p_shared_owners);
      while (__stlxr(v95 - 1, p_shared_owners));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
  }
  else
  {
    *(_QWORD *)v78 = v208;
    *((_QWORD *)v78 + 1) = v75;
    v208 = 0uLL;
    v47[1] = v78 + 16;
  }
  v96 = v207;
  v207 = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = (std::__shared_weak_count *)v206.n128_u64[1];
  if (v206.n128_u64[1])
  {
    v98 = (unint64_t *)(v206.n128_u64[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (__p)
  {
    v212 = __p;
    operator delete(__p);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  if (v229)
  {
    v230 = v229;
    operator delete(v229);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
  *(_OWORD *)v201 = *(_OWORD *)a2;
  v202 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v100 = (uint64_t)v233;
  *(_QWORD *)&v200 = v233;
  if (v233)
  {
    v101 = (_QWORD *)operator new();
    *v101 = &unk_1EA99F8E8;
    v101[1] = 0;
    v101[2] = 0;
    v101[3] = v100;
  }
  else
  {
    v101 = 0;
  }
  *((_QWORD *)&v200 + 1) = v101;
  v233 = 0;
  *(_QWORD *)&v199 = v209;
  if (v209)
  {
    v102 = (_QWORD *)operator new();
    v103 = v209;
    *v102 = &unk_1EA99F948;
    v102[1] = 0;
    v102[2] = 0;
    v102[3] = v103;
  }
  else
  {
    v102 = 0;
  }
  *((_QWORD *)&v199 + 1) = v102;
  v209 = 0;
  v243[0] = &unk_1EA99FAC8;
  v243[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateReverse;
  v244 = v243;
  v242 = 0;
  MIL::IROperator::Make((__int128 *)v201, &v200, &v199, (uint64_t)v243, (uint64_t)v241, a3);
  v104 = v242;
  if (v242 == v241)
  {
    v105 = 4;
    v104 = v241;
  }
  else
  {
    if (!v242)
      goto LABEL_92;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_92:
  v106 = v244;
  if (v244 == v243)
  {
    v107 = 4;
    v106 = v243;
    goto LABEL_96;
  }
  if (v244)
  {
    v107 = 5;
LABEL_96:
    (*(void (**)(void))(*v106 + 8 * v107))();
  }
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
  if (*((_QWORD *)&v199 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
  if (*((_QWORD *)&v200 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (SHIBYTE(v202) < 0)
    operator delete(v201[0]);
  v114 = *a3;
  v115 = std::string::basic_string[abi:ne180100]<0>(&v248, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v115, (uint64_t)v239);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v114 + 200))(v114, v239);
  v116 = v240;
  if (v240 == v239)
  {
    v117 = 4;
    v116 = v239;
  }
  else
  {
    if (!v240)
      goto LABEL_114;
    v117 = 5;
  }
  (*(void (**)(void))(*v116 + 8 * v117))();
LABEL_114:
  if (SHIBYTE(v250) < 0)
    operator delete(v248);
  MIL::Validation::TensorDTypeConstraints::Make(&v248);
  v118 = v248;
  std::string::basic_string[abi:ne180100]<0>(v195, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v195, 0, (uint64_t *)&v234);
  v197 = v234;
  if (v234)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)v234;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v198 = v119;
  v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v193, "T");
  (*((void (**)(void **, void **, void **))*v118 + 3))(v118, &v197, v193);
  if (v194 < 0)
    operator delete(v193[0]);
  v121 = v198;
  if (v198)
  {
    v122 = (unint64_t *)&v198->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v234;
  v234 = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  if (v196 < 0)
    operator delete(v195[0]);
  v125 = v248;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v234);
  v191 = v234;
  if (v234)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)v234;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v192 = v126;
  v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "T");
  (*((void (**)(void **, void **, void **))*v125 + 3))(v125, &v191, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v128 = v192;
  if (v192)
  {
    v129 = (unint64_t *)&v192->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v234;
  v234 = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  v132 = *a3;
  v187 = v248;
  if (v248)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v248;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v188 = v133;
  v248 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v187);
  v135 = v188;
  if (v188)
  {
    v136 = (unint64_t *)&v188->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v248;
  v248 = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v248);
  v139 = v248;
  std::string::basic_string[abi:ne180100]<0>(v183, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v183, 0, (uint64_t *)&v234);
  v185 = v234;
  if (v234)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = (std::__shared_weak_count_vtbl *)v234;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v186 = v140;
  v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v181, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v139 + 3))(v139, &v185, 0, v181);
  if (v182 < 0)
    operator delete(v181[0]);
  v142 = v186;
  if (v186)
  {
    v143 = (unint64_t *)&v186->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v234;
  v234 = 0;
  if (v145)
    (*(void (**)(void *))(*(_QWORD *)v145 + 8))(v145);
  if (v184 < 0)
    operator delete(v183[0]);
  v146 = v248;
  std::string::basic_string[abi:ne180100]<0>(v177, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v177, 1, (uint64_t *)&v234);
  v179 = v234;
  if (v234)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)v234;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v180 = v147;
  v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v175, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v146 + 3))(v146, &v179, 0, v175);
  if (v176 < 0)
    operator delete(v175[0]);
  v149 = v180;
  if (v180)
  {
    v150 = (unint64_t *)&v180->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v234;
  v234 = 0;
  if (v152)
    (*(void (**)(void *))(*(_QWORD *)v152 + 8))(v152);
  if (v178 < 0)
    operator delete(v177[0]);
  v153 = v248;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v234);
  v173 = v234;
  if (v234)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)v234;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v174 = v154;
  v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v153 + 3))(v153, &v173, 0, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v156 = v174;
  if (v174)
  {
    v157 = (unint64_t *)&v174->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = v234;
  v234 = 0;
  if (v159)
    (*(void (**)(void *))(*(_QWORD *)v159 + 8))(v159);
  v160 = *a3;
  v169 = v248;
  if (v248)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = v248;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = (std::__shared_weak_count_vtbl *)v162;
  }
  else
  {
    v161 = 0;
  }
  v170 = v161;
  v248 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v160 + 56))(v160, &v169);
  v163 = v170;
  if (v170)
  {
    v164 = (unint64_t *)&v170->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = v248;
  v248 = 0;
  if (v166)
    (*((void (**)(void **))*v166 + 1))(v166);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v209, 0);
  result = (uint64_t)v233;
  if (v233)
  {
    v168 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v233);
    return MEMORY[0x1E0C023A0](v168, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A11E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a64;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;

  v67 = *(_QWORD *)(v65 - 144);
  *(_QWORD *)(v65 - 144) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *v64;
  *v64 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x288], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ReverseSequence::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void **v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char **v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  __int128 v104;
  char *v105;
  char *v106;
  char *v107;
  std::__shared_weak_count *v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  char **v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  char *v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  char *v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  void **v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void **v160;
  void **v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  char *v167;
  void **v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  char *v174;
  void **v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  void **v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  void **v188;
  uint64_t result;
  uint64_t v190;
  void **v191;
  std::__shared_weak_count *v192;
  void *v193[2];
  char v194;
  char *v195;
  std::__shared_weak_count *v196;
  void *v197[2];
  char v198;
  void *v199[2];
  char v200;
  char *v201;
  std::__shared_weak_count *v202;
  void *v203[2];
  char v204;
  void *v205[2];
  char v206;
  char *v207;
  std::__shared_weak_count *v208;
  void **v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  char *v213;
  std::__shared_weak_count *v214;
  void *v215[2];
  char v216;
  void *v217[2];
  char v218;
  char *v219;
  std::__shared_weak_count *v220;
  void *v221[2];
  char v222;
  void *v223[2];
  char v224;
  char *v225;
  std::__shared_weak_count *v226;
  __int128 v227;
  __int128 v228;
  void *v229[2];
  uint64_t v230;
  void *v231;
  void *v232;
  _QWORD *v233;
  __n128 v234;
  uint64_t v235;
  __int128 v236;
  char **v237;
  __n128 v238;
  __n128 v239;
  __n128 v240;
  void *__p;
  void *v242;
  _QWORD *v243;
  void *v244;
  void *v245;
  _QWORD *v246;
  void *v247;
  void *v248;
  _QWORD *v249;
  void *v250;
  void *v251;
  _QWORD *v252;
  void *v253;
  void *v254;
  _QWORD *v255;
  void *v256;
  void *v257;
  _QWORD *v258;
  void *v259;
  void *v260;
  _QWORD *v261;
  void *v262;
  void *v263;
  _QWORD *v264;
  __n128 v265;
  _QWORD *v266;
  _BYTE v267[24];
  _BYTE *v268;
  _BYTE v269[24];
  _BYTE *v270;
  _BYTE v271[24];
  _BYTE *v272;
  void **v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *Scalar;
  char *v283;
  char *v284;
  char *v285;
  char **v286;
  uint64_t v287;

  v287 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v266 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v283 = v9 + 16;
  v284 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = v9;
  v273 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v264 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v262 = v12;
  v263 = v12 + 2;
  v274 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v262);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v261 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v259 = v15;
  v260 = v15 + 2;
  v275 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v259);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v258 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v256 = v18;
  v257 = v18 + 2;
  v276 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v256);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v255 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v253 = v21;
  v254 = v21 + 2;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v253);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v252 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v250 = v24;
  v251 = v24 + 2;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v250);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v249 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v247 = v27;
  v248 = v27 + 2;
  v279 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v247);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v246 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v244 = v30;
  v245 = v30 + 2;
  v280 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v244);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v243 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  __p = v33;
  v242 = v33 + 2;
  v281 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v273, 9, &v265);
  MIL::IRParameter::Make(&v265, (uint64_t *)&v231);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v231);
  v34 = v231;
  v231 = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v265.n128_u64[1];
  if (v265.n128_u64[1])
  {
    v36 = (unint64_t *)(v265.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (__p)
  {
    v242 = __p;
    operator delete(__p);
  }
  if (v244)
  {
    v245 = v244;
    operator delete(v244);
  }
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  if (v259)
  {
    v260 = v259;
    operator delete(v259);
  }
  if (v262)
  {
    v263 = v262;
    operator delete(v262);
  }
  if (Scalar)
  {
    v283 = Scalar;
    operator delete(Scalar);
  }
  v38 = v266;
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (char *)operator new(8uLL);
  Scalar = v40;
  *(_QWORD *)v40 = v39;
  v283 = v40 + 8;
  v284 = v40 + 8;
  v273 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = operator new(8uLL);
  v262 = v42;
  *v42 = v41;
  v264 = v42 + 1;
  v263 = v42 + 1;
  v274 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v262);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = operator new(8uLL);
  v259 = v44;
  *v44 = v43;
  v261 = v44 + 1;
  v260 = v44 + 1;
  v275 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v259);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v273, 3, &v240);
  MIL::IRParameter::Make(&v240, (uint64_t *)&v256);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v38, "lengths", (uint64_t *)&v256);
  v45 = v256;
  v256 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v240.n128_u64[1];
  if (v240.n128_u64[1])
  {
    v47 = (unint64_t *)(v240.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v259)
  {
    v260 = v259;
    operator delete(v259);
  }
  if (v262)
  {
    v263 = v262;
    operator delete(v262);
  }
  if (Scalar)
  {
    v283 = Scalar;
    operator delete(Scalar);
  }
  v49 = v266;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v239);
  MIL::IRParameter::Make(&v239, (uint64_t *)&v273);
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v49, "seq_axis", (uint64_t *)&v273);
  v51 = v273;
  v273 = 0;
  if (v51)
    (*((void (**)(void **))*v51 + 1))(v51);
  v52 = (std::__shared_weak_count *)v239.n128_u64[1];
  if (v239.n128_u64[1])
  {
    v53 = (unint64_t *)(v239.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v55 = v266;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v238);
  MIL::IRParameter::Make(&v238, (uint64_t *)&v273);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v55, "batch_axis", (uint64_t *)&v273);
  v57 = v273;
  v273 = 0;
  if (v57)
    (*((void (**)(void **))*v57 + 1))(v57);
  v58 = (std::__shared_weak_count *)v238.n128_u64[1];
  if (v238.n128_u64[1])
  {
    v59 = (unint64_t *)(v238.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 48))(*((_QWORD *)v56 + 5), 1);
  v237 = 0;
  v61 = operator new();
  *(_QWORD *)v61 = 0;
  *(_QWORD *)(v61 + 8) = 0;
  *(_QWORD *)(v61 + 16) = 0;
  v273 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v237, (void **)v61);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v273, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v237, 1uLL);
  v62 = v237;
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(0x10uLL);
  v264 = v65 + 2;
  *v65 = v63;
  v65[1] = v64;
  v262 = v65;
  v263 = v65 + 2;
  v273 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v262);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(0x10uLL);
  v261 = v68 + 2;
  *v68 = v66;
  v68[1] = v67;
  v259 = v68;
  v260 = v68 + 2;
  v274 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v259);
  v69 = MIL::IRUnknownDimension::Make(a1, 0);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(0x10uLL);
  v258 = v71 + 2;
  *v71 = v69;
  v71[1] = v70;
  v256 = v71;
  v257 = v71 + 2;
  v275 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v256);
  v72 = MIL::IRUnknownDimension::Make(a1, 0);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(0x10uLL);
  v255 = v74 + 2;
  *v74 = v72;
  v74[1] = v73;
  v253 = v74;
  v254 = v74 + 2;
  v276 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v253);
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(0x10uLL);
  v252 = v77 + 2;
  *v77 = v75;
  v77[1] = v76;
  v250 = v77;
  v251 = v77 + 2;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v250);
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(0x10uLL);
  v249 = v80 + 2;
  *v80 = v78;
  v80[1] = v79;
  v247 = v80;
  v248 = v80 + 2;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v247);
  v81 = MIL::IRUnknownDimension::Make(a1, 0);
  v82 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v83 = operator new(0x10uLL);
  v246 = v83 + 2;
  *v83 = v81;
  v83[1] = v82;
  v244 = v83;
  v245 = v83 + 2;
  v279 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v244);
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v86 = operator new(0x10uLL);
  v243 = v86 + 2;
  *v86 = v84;
  v86[1] = v85;
  __p = v86;
  v242 = v86 + 2;
  v280 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v89 = operator new(0x10uLL);
  v232 = v89 + 2;
  v233 = v89 + 2;
  *v89 = v87;
  v89[1] = v88;
  v231 = v89;
  v281 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v231);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v273, 9, &v234);
  MIL::IRParameter::Make(&v234, &v235);
  *(_QWORD *)&v236 = v235;
  if (v235)
  {
    v90 = (_QWORD *)operator new();
    v91 = v235;
    *v90 = &unk_1EA99F888;
    v90[1] = 0;
    v90[2] = 0;
    v90[3] = v91;
  }
  else
  {
    v90 = 0;
  }
  *((_QWORD *)&v236 + 1) = v90;
  v235 = 0;
  v92 = v62[2];
  v93 = v62[1];
  if (v93 >= v92)
  {
    v94 = (v93 - *v62) >> 4;
    v95 = v94 + 1;
    if ((unint64_t)(v94 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v96 = v92 - *v62;
    if (v96 >> 3 > v95)
      v95 = v96 >> 3;
    if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0)
      v97 = 0xFFFFFFFFFFFFFFFLL;
    else
      v97 = v95;
    v286 = v62 + 2;
    v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v62 + 2), v97);
    v100 = &v98[16 * v94];
    *(_OWORD *)v100 = v236;
    v236 = 0uLL;
    v102 = *v62;
    v101 = v62[1];
    if (v101 == *v62)
    {
      v105 = v62[1];
      v103 = &v98[16 * v94];
    }
    else
    {
      v103 = &v98[16 * v94];
      do
      {
        v104 = *((_OWORD *)v101 - 1);
        v101 -= 16;
        *((_OWORD *)v103 - 1) = v104;
        v103 -= 16;
        *(_QWORD *)v101 = 0;
        *((_QWORD *)v101 + 1) = 0;
      }
      while (v101 != v102);
      v105 = *v62;
      v101 = v62[1];
    }
    v106 = v100 + 16;
    *v62 = v103;
    Scalar = v105;
    v283 = v105;
    v62[1] = v100 + 16;
    v284 = v101;
    v107 = v62[2];
    v62[2] = &v98[16 * v99];
    v285 = v107;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
    v108 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
    v62[1] = v106;
    if (v108)
    {
      p_shared_owners = (unint64_t *)&v108->__shared_owners_;
      do
        v110 = __ldaxr(p_shared_owners);
      while (__stlxr(v110 - 1, p_shared_owners));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
  }
  else
  {
    *(_QWORD *)v93 = v236;
    *((_QWORD *)v93 + 1) = v90;
    v236 = 0uLL;
    v62[1] = v93 + 16;
  }
  v111 = v235;
  v235 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = (std::__shared_weak_count *)v234.n128_u64[1];
  if (v234.n128_u64[1])
  {
    v113 = (unint64_t *)(v234.n128_u64[1] + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  if (__p)
  {
    v242 = __p;
    operator delete(__p);
  }
  if (v244)
  {
    v245 = v244;
    operator delete(v244);
  }
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  if (v259)
  {
    v260 = v259;
    operator delete(v259);
  }
  if (v262)
  {
    v263 = v262;
    operator delete(v262);
  }
  *(_OWORD *)v229 = *(_OWORD *)a2;
  v230 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v115 = (uint64_t)v266;
  *(_QWORD *)&v228 = v266;
  if (v266)
  {
    v116 = (_QWORD *)operator new();
    *v116 = &unk_1EA99F8E8;
    v116[1] = 0;
    v116[2] = 0;
    v116[3] = v115;
  }
  else
  {
    v116 = 0;
  }
  *((_QWORD *)&v228 + 1) = v116;
  v266 = 0;
  *(_QWORD *)&v227 = v237;
  if (v237)
  {
    v117 = (_QWORD *)operator new();
    v118 = v237;
    *v117 = &unk_1EA99F948;
    v117[1] = 0;
    v117[2] = 0;
    v117[3] = v118;
  }
  else
  {
    v117 = 0;
  }
  *((_QWORD *)&v227 + 1) = v117;
  v237 = 0;
  v272 = 0;
  v270 = 0;
  MIL::IROperator::Make((__int128 *)v229, &v228, &v227, (uint64_t)v271, (uint64_t)v269, a3);
  v119 = v270;
  if (v270 == v269)
  {
    v120 = 4;
    v119 = v269;
  }
  else
  {
    if (!v270)
      goto LABEL_110;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_110:
  v121 = v272;
  if (v272 == v271)
  {
    v122 = 4;
    v121 = v271;
    goto LABEL_114;
  }
  if (v272)
  {
    v122 = 5;
LABEL_114:
    (*(void (**)(void))(*v121 + 8 * v122))();
  }
  v123 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
  if (*((_QWORD *)&v227 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
  if (*((_QWORD *)&v228 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (SHIBYTE(v230) < 0)
    operator delete(v229[0]);
  v129 = *a3;
  v130 = std::string::basic_string[abi:ne180100]<0>(&v273, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v130, (uint64_t)v267);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v129 + 200))(v129, v267);
  v131 = v268;
  if (v268 == v267)
  {
    v132 = 4;
    v131 = v267;
  }
  else
  {
    if (!v268)
      goto LABEL_132;
    v132 = 5;
  }
  (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_132:
  if (SHIBYTE(v275) < 0)
    operator delete(v273);
  MIL::Validation::TensorDTypeConstraints::Make(&v273);
  v133 = v273;
  std::string::basic_string[abi:ne180100]<0>(v223, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v223, 0, (uint64_t *)&Scalar);
  v225 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v226 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v221, "T");
  (*((void (**)(void **, char **, void **))*v133 + 3))(v133, &v225, v221);
  if (v222 < 0)
    operator delete(v221[0]);
  v136 = v226;
  if (v226)
  {
    v137 = (unint64_t *)&v226->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*(void (**)(char *))(*(_QWORD *)v139 + 8))(v139);
  if (v224 < 0)
    operator delete(v223[0]);
  v140 = v273;
  std::string::basic_string[abi:ne180100]<0>(v217, "lengths");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v217, 0, (uint64_t *)&Scalar);
  v219 = Scalar;
  if (Scalar)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = (std::__shared_weak_count_vtbl *)Scalar;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v220 = v141;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v215, "LENGTHS_T");
  (*((void (**)(void **, char **, void **))*v140 + 3))(v140, &v219, v215);
  if (v216 < 0)
    operator delete(v215[0]);
  v143 = v220;
  if (v220)
  {
    v144 = (unint64_t *)&v220->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = Scalar;
  Scalar = 0;
  if (v146)
    (*(void (**)(char *))(*(_QWORD *)v146 + 8))(v146);
  if (v218 < 0)
    operator delete(v217[0]);
  v147 = v273;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v213 = Scalar;
  if (Scalar)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = (std::__shared_weak_count_vtbl *)Scalar;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v214 = v148;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v211, "T");
  (*((void (**)(void **, char **, void **))*v147 + 3))(v147, &v213, v211);
  if (v212 < 0)
    operator delete(v211[0]);
  v150 = v214;
  if (v214)
  {
    v151 = (unint64_t *)&v214->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = Scalar;
  Scalar = 0;
  if (v153)
    (*(void (**)(char *))(*(_QWORD *)v153 + 8))(v153);
  v154 = *a3;
  v209 = v273;
  if (v273)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = v273;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = (std::__shared_weak_count_vtbl *)v156;
  }
  else
  {
    v155 = 0;
  }
  v210 = v155;
  v273 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v154 + 56))(v154, &v209);
  v157 = v210;
  if (v210)
  {
    v158 = (unint64_t *)&v210->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = v273;
  v273 = 0;
  if (v160)
    (*((void (**)(void **))*v160 + 1))(v160);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v273);
  v161 = v273;
  std::string::basic_string[abi:ne180100]<0>(v205, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v205, 0, (uint64_t *)&Scalar);
  v207 = Scalar;
  if (Scalar)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = (std::__shared_weak_count_vtbl *)Scalar;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v208 = v162;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v203, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v161 + 3))(v161, &v207, 0, v203);
  if (v204 < 0)
    operator delete(v203[0]);
  v164 = v208;
  if (v208)
  {
    v165 = (unint64_t *)&v208->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = Scalar;
  Scalar = 0;
  if (v167)
    (*(void (**)(char *))(*(_QWORD *)v167 + 8))(v167);
  if (v206 < 0)
    operator delete(v205[0]);
  v168 = v273;
  std::string::basic_string[abi:ne180100]<0>(v199, "lengths");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v199, 0, (uint64_t *)&Scalar);
  v201 = Scalar;
  if (Scalar)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = (std::__shared_weak_count_vtbl *)Scalar;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v170;
  }
  else
  {
    v169 = 0;
  }
  v202 = v169;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v197, "K");
  (*((void (**)(void **, char **, _QWORD, void **))*v168 + 3))(v168, &v201, 0, v197);
  if (v198 < 0)
    operator delete(v197[0]);
  v171 = v202;
  if (v202)
  {
    v172 = (unint64_t *)&v202->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = Scalar;
  Scalar = 0;
  if (v174)
    (*(void (**)(char *))(*(_QWORD *)v174 + 8))(v174);
  if (v200 < 0)
    operator delete(v199[0]);
  v175 = v273;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v195 = Scalar;
  if (Scalar)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = (std::__shared_weak_count_vtbl *)Scalar;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = v177;
  }
  else
  {
    v176 = 0;
  }
  v196 = v176;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v193, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v175 + 3))(v175, &v195, 0, v193);
  if (v194 < 0)
    operator delete(v193[0]);
  v178 = v196;
  if (v196)
  {
    v179 = (unint64_t *)&v196->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = Scalar;
  Scalar = 0;
  if (v181)
    (*(void (**)(char *))(*(_QWORD *)v181 + 8))(v181);
  v182 = *a3;
  v191 = v273;
  if (v273)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = v273;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = (std::__shared_weak_count_vtbl *)v184;
  }
  else
  {
    v183 = 0;
  }
  v192 = v183;
  v273 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v182 + 56))(v182, &v191);
  v185 = v192;
  if (v192)
  {
    v186 = (unint64_t *)&v192->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = v273;
  v273 = 0;
  if (v188)
    (*((void (**)(void **))*v188 + 1))(v188);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v237, 0);
  result = (uint64_t)v266;
  if (v266)
  {
    v190 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v266);
    return MEMORY[0x1E0C023A0](v190, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A13B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void **a72;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;

  v75 = *(_QWORD *)(v73 - 184);
  *(_QWORD *)(v73 - 184) = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = *v72;
  *v72 = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x300], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::SliceByIndex::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  unsigned __int8 *v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  void **v92;
  unsigned __int8 *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  void **v100;
  unsigned __int8 *v101;
  void *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  void **v108;
  unsigned __int8 *v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  char **v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  __int128 v148;
  char *v149;
  char *v150;
  char *v151;
  std::__shared_weak_count *v152;
  unint64_t *p_shared_owners;
  unint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  char **v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  void **v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count_vtbl *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  void *v182;
  void **v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  void *v189;
  void **v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  void *v196;
  void **v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  void *v203;
  void **v204;
  std::__shared_weak_count *v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  void **v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  void **v217;
  void **v218;
  std::__shared_weak_count *v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  void *v224;
  void **v225;
  std::__shared_weak_count *v226;
  std::__shared_weak_count_vtbl *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  void *v231;
  void **v232;
  std::__shared_weak_count *v233;
  std::__shared_weak_count_vtbl *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  void *v238;
  void **v239;
  std::__shared_weak_count *v240;
  std::__shared_weak_count_vtbl *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  void *v245;
  void **v246;
  std::__shared_weak_count *v247;
  std::__shared_weak_count_vtbl *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  void *v252;
  void **v253;
  std::__shared_weak_count *v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  void *v259;
  void **v260;
  std::__shared_weak_count *v261;
  std::__shared_weak_count_vtbl *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  void *v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  void **v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  void **v273;
  uint64_t result;
  uint64_t v275;
  void **v276;
  std::__shared_weak_count *v277;
  void *v278[2];
  char v279;
  void *v280[2];
  char v281;
  void *v282;
  std::__shared_weak_count *v283;
  void *v284[2];
  char v285;
  void *v286[2];
  char v287;
  void *v288;
  std::__shared_weak_count *v289;
  void *v290[2];
  char v291;
  void *v292[2];
  char v293;
  void *v294;
  std::__shared_weak_count *v295;
  void *v296[2];
  char v297;
  void *v298[2];
  char v299;
  void *v300;
  std::__shared_weak_count *v301;
  void *v302[2];
  char v303;
  void *v304[2];
  char v305;
  void *v306;
  std::__shared_weak_count *v307;
  void *v308[2];
  char v309;
  void *v310[2];
  char v311;
  void *v312;
  std::__shared_weak_count *v313;
  void *v314[2];
  char v315;
  void *v316[2];
  char v317;
  void *v318;
  std::__shared_weak_count *v319;
  void **v320;
  std::__shared_weak_count *v321;
  void *v322[2];
  char v323;
  void *v324;
  std::__shared_weak_count *v325;
  void *v326[2];
  char v327;
  void *v328[2];
  char v329;
  void *v330;
  std::__shared_weak_count *v331;
  void *v332[2];
  char v333;
  void *v334[2];
  char v335;
  void *v336;
  std::__shared_weak_count *v337;
  void *v338[2];
  char v339;
  void *v340[2];
  char v341;
  void *v342;
  std::__shared_weak_count *v343;
  void *v344[2];
  char v345;
  void *v346[2];
  char v347;
  void *v348;
  std::__shared_weak_count *v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  void *v354;
  void *v355;
  _QWORD *v356;
  __n128 v357;
  uint64_t v358;
  __int128 v359;
  char **v360;
  __n128 v361;
  __n128 v362;
  __n128 v363;
  __n128 v364;
  __n128 v365;
  __n128 v366;
  void *__p;
  void *v368;
  _QWORD *v369;
  void *v370;
  void *v371;
  _QWORD *v372;
  void *v373;
  void *v374;
  _QWORD *v375;
  void *v376;
  void *v377;
  _QWORD *v378;
  void *v379;
  void *v380;
  _QWORD *v381;
  void *v382;
  void *v383;
  _QWORD *v384;
  void *v385;
  void *v386;
  _QWORD *v387;
  __n128 v388;
  _QWORD *v389;
  void *v390;
  void *v391;
  char *v392;
  char *v393;
  char **v394;
  _QWORD v395[3];
  _QWORD *v396;
  _BYTE v397[24];
  _BYTE *v398;
  _BYTE v399[24];
  _BYTE *v400;
  void *v401;
  void *v402;
  _QWORD *v403;
  void **v404;
  void **v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;

  v413 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v389 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v392 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v390 = v9;
  v391 = v9 + 16;
  v404 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v390);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v402 = v12 + 2;
  v403 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v401 = v12;
  v405 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v401);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v387 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v385 = v15;
  v386 = v15 + 2;
  v406 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v385);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v384 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v382 = v18;
  v383 = v18 + 2;
  v407 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v382);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v381 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v379 = v21;
  v380 = v21 + 2;
  v408 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v379);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v378 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v376 = v24;
  v377 = v24 + 2;
  v409 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v376);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v375 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v373 = v27;
  v374 = v27 + 2;
  v410 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v373);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v372 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v370 = v30;
  v371 = v30 + 2;
  v411 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v370);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v369 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  __p = v33;
  v368 = v33 + 2;
  v412 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v404, 9, &v388);
  MIL::IRParameter::Make(&v388, (uint64_t *)&v354);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v354);
  v34 = v354;
  v354 = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v388.n128_u64[1];
  if (v388.n128_u64[1])
  {
    v36 = (unint64_t *)(v388.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (__p)
  {
    v368 = __p;
    operator delete(__p);
  }
  if (v370)
  {
    v371 = v370;
    operator delete(v370);
  }
  if (v373)
  {
    v374 = v373;
    operator delete(v373);
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (v379)
  {
    v380 = v379;
    operator delete(v379);
  }
  if (v382)
  {
    v383 = v382;
    operator delete(v382);
  }
  if (v385)
  {
    v386 = v385;
    operator delete(v385);
  }
  if (v401)
  {
    v402 = v401;
    operator delete(v401);
  }
  if (v390)
  {
    v391 = v390;
    operator delete(v390);
  }
  v38 = v389;
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (char *)operator new(8uLL);
  v390 = v40;
  *(_QWORD *)v40 = v39;
  v392 = v40 + 8;
  v391 = v40 + 8;
  v404 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v390);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = operator new(8uLL);
  v401 = v42;
  *v42 = v41;
  v402 = v42 + 1;
  v403 = v42 + 1;
  v405 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v401);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = operator new(8uLL);
  v385 = v44;
  *v44 = v43;
  v387 = v44 + 1;
  v386 = v44 + 1;
  v406 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v385);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = operator new(8uLL);
  v382 = v46;
  *v46 = v45;
  v384 = v46 + 1;
  v383 = v46 + 1;
  v407 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v382);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = operator new(8uLL);
  v379 = v48;
  *v48 = v47;
  v381 = v48 + 1;
  v380 = v48 + 1;
  v408 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v379);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = operator new(8uLL);
  v376 = v50;
  *v50 = v49;
  v378 = v50 + 1;
  v377 = v50 + 1;
  v409 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v376);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v404, 6, &v366);
  MIL::IRParameter::Make(&v366, (uint64_t *)&v373);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v38, "begin", (uint64_t *)&v373);
  v51 = v373;
  v373 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v366.n128_u64[1];
  if (v366.n128_u64[1])
  {
    v53 = (unint64_t *)(v366.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (v379)
  {
    v380 = v379;
    operator delete(v379);
  }
  if (v382)
  {
    v383 = v382;
    operator delete(v382);
  }
  if (v385)
  {
    v386 = v385;
    operator delete(v385);
  }
  if (v401)
  {
    v402 = v401;
    operator delete(v401);
  }
  if (v390)
  {
    v391 = v390;
    operator delete(v390);
  }
  v55 = v389;
  v56 = MIL::IRUnknownDimension::Make(a1, 0);
  v57 = (char *)operator new(8uLL);
  v390 = v57;
  *(_QWORD *)v57 = v56;
  v392 = v57 + 8;
  v391 = v57 + 8;
  v404 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v390);
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = operator new(8uLL);
  v401 = v59;
  *v59 = v58;
  v402 = v59 + 1;
  v403 = v59 + 1;
  v405 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v401);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = operator new(8uLL);
  v385 = v61;
  *v61 = v60;
  v387 = v61 + 1;
  v386 = v61 + 1;
  v406 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v385);
  v62 = MIL::IRUnknownDimension::Make(a1, 0);
  v63 = operator new(8uLL);
  v382 = v63;
  *v63 = v62;
  v384 = v63 + 1;
  v383 = v63 + 1;
  v407 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v382);
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = operator new(8uLL);
  v379 = v65;
  *v65 = v64;
  v381 = v65 + 1;
  v380 = v65 + 1;
  v408 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v379);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = operator new(8uLL);
  v376 = v67;
  *v67 = v66;
  v378 = v67 + 1;
  v377 = v67 + 1;
  v409 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v376);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v404, 6, &v365);
  MIL::IRParameter::Make(&v365, (uint64_t *)&v373);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v55, "end", (uint64_t *)&v373);
  v68 = v373;
  v373 = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v365.n128_u64[1];
  if (v365.n128_u64[1])
  {
    v70 = (unint64_t *)(v365.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (v379)
  {
    v380 = v379;
    operator delete(v379);
  }
  if (v382)
  {
    v383 = v382;
    operator delete(v382);
  }
  if (v385)
  {
    v386 = v385;
    operator delete(v385);
  }
  if (v401)
  {
    v402 = v401;
    operator delete(v401);
  }
  if (v390)
  {
    v391 = v390;
    operator delete(v390);
  }
  v72 = v389;
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = (char *)operator new(8uLL);
  v390 = v74;
  *(_QWORD *)v74 = v73;
  v392 = v74 + 8;
  v391 = v74 + 8;
  v404 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v390);
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = operator new(8uLL);
  v401 = v76;
  *v76 = v75;
  v402 = v76 + 1;
  v403 = v76 + 1;
  v405 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v401);
  v77 = MIL::IRUnknownDimension::Make(a1, 0);
  v78 = operator new(8uLL);
  v385 = v78;
  *v78 = v77;
  v387 = v78 + 1;
  v386 = v78 + 1;
  v406 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v385);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = operator new(8uLL);
  v382 = v80;
  *v80 = v79;
  v384 = v80 + 1;
  v383 = v80 + 1;
  v407 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v382);
  v81 = MIL::IRUnknownDimension::Make(a1, 0);
  v82 = operator new(8uLL);
  v379 = v82;
  *v82 = v81;
  v381 = v82 + 1;
  v380 = v82 + 1;
  v408 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v379);
  v83 = MIL::IRUnknownDimension::Make(a1, 0);
  v84 = operator new(8uLL);
  v376 = v84;
  *v84 = v83;
  v378 = v84 + 1;
  v377 = v84 + 1;
  v409 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v376);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v404, 6, &v364);
  MIL::IRParameter::Make(&v364, (uint64_t *)&v373);
  v85 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v72, "stride", (uint64_t *)&v373);
  v86 = v373;
  v373 = 0;
  if (v86)
    (*(void (**)(void *))(*(_QWORD *)v86 + 8))(v86);
  v87 = (std::__shared_weak_count *)v364.n128_u64[1];
  if (v364.n128_u64[1])
  {
    v88 = (unint64_t *)(v364.n128_u64[1] + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (v379)
  {
    v380 = v379;
    operator delete(v379);
  }
  if (v382)
  {
    v383 = v382;
    operator delete(v382);
  }
  if (v385)
  {
    v386 = v385;
    operator delete(v385);
  }
  if (v401)
  {
    v402 = v401;
    operator delete(v401);
  }
  if (v390)
  {
    v391 = v390;
    operator delete(v390);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v85 + 5) + 48))(*((_QWORD *)v85 + 5), 1);
  v90 = v389;
  v91 = MIL::IRUnknownDimension::Make(a1, 0);
  v92 = (void **)operator new(8uLL);
  v404 = v92;
  *v92 = (void *)v91;
  v405 = v92 + 1;
  v406 = (uint64_t)(v92 + 1);
  v401 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v404);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v401, 1, &v363);
  MIL::IRParameter::Make(&v363, (uint64_t *)&v390);
  v93 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v90, "begin_mask", (uint64_t *)&v390);
  v94 = v390;
  v390 = 0;
  if (v94)
    (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
  v95 = (std::__shared_weak_count *)v363.n128_u64[1];
  if (v363.n128_u64[1])
  {
    v96 = (unint64_t *)(v363.n128_u64[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (v404)
  {
    v405 = v404;
    operator delete(v404);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v93 + 5) + 48))(*((_QWORD *)v93 + 5), 1);
  v98 = v389;
  v99 = MIL::IRUnknownDimension::Make(a1, 0);
  v100 = (void **)operator new(8uLL);
  v404 = v100;
  *v100 = (void *)v99;
  v405 = v100 + 1;
  v406 = (uint64_t)(v100 + 1);
  v401 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v404);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v401, 1, &v362);
  MIL::IRParameter::Make(&v362, (uint64_t *)&v390);
  v101 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v98, "end_mask", (uint64_t *)&v390);
  v102 = v390;
  v390 = 0;
  if (v102)
    (*(void (**)(void *))(*(_QWORD *)v102 + 8))(v102);
  v103 = (std::__shared_weak_count *)v362.n128_u64[1];
  if (v362.n128_u64[1])
  {
    v104 = (unint64_t *)(v362.n128_u64[1] + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (v404)
  {
    v405 = v404;
    operator delete(v404);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v101 + 5) + 48))(*((_QWORD *)v101 + 5), 1);
  v106 = v389;
  v107 = MIL::IRUnknownDimension::Make(a1, 0);
  v108 = (void **)operator new(8uLL);
  v404 = v108;
  *v108 = (void *)v107;
  v405 = v108 + 1;
  v406 = (uint64_t)(v108 + 1);
  v401 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v404);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v401, 1, &v361);
  MIL::IRParameter::Make(&v361, (uint64_t *)&v390);
  v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v106, "squeeze_mask", (uint64_t *)&v390);
  v110 = v390;
  v390 = 0;
  if (v110)
    (*(void (**)(void *))(*(_QWORD *)v110 + 8))(v110);
  v111 = (std::__shared_weak_count *)v361.n128_u64[1];
  if (v361.n128_u64[1])
  {
    v112 = (unint64_t *)(v361.n128_u64[1] + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (v404)
  {
    v405 = v404;
    operator delete(v404);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v109 + 5) + 48))(*((_QWORD *)v109 + 5), 1);
  v360 = 0;
  v114 = operator new();
  *(_QWORD *)v114 = 0;
  *(_QWORD *)(v114 + 8) = 0;
  *(_QWORD *)(v114 + 16) = 0;
  v404 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v360, (void **)v114);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v404, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v360, 1uLL);
  v115 = v360;
  v116 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v117 = operator new(8uLL);
  v401 = v117;
  *v117 = v116;
  v402 = v117 + 1;
  v403 = v117 + 1;
  v404 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v401);
  v118 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v119 = operator new(8uLL);
  v385 = v119;
  *v119 = v118;
  v387 = v119 + 1;
  v386 = v119 + 1;
  v405 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v385);
  v120 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v121 = operator new(8uLL);
  v382 = v121;
  *v121 = v120;
  v384 = v121 + 1;
  v383 = v121 + 1;
  v406 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v382);
  v122 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v123 = operator new(8uLL);
  v379 = v123;
  *v123 = v122;
  v381 = v123 + 1;
  v380 = v123 + 1;
  v407 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v379);
  v124 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v125 = operator new(8uLL);
  v376 = v125;
  *v125 = v124;
  v378 = v125 + 1;
  v377 = v125 + 1;
  v408 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v376);
  v126 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v127 = operator new(8uLL);
  v373 = v127;
  *v127 = v126;
  v375 = v127 + 1;
  v374 = v127 + 1;
  v409 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v373);
  v128 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v129 = operator new(8uLL);
  v370 = v129;
  *v129 = v128;
  v372 = v129 + 1;
  v371 = v129 + 1;
  v410 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v370);
  v130 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v131 = operator new(8uLL);
  __p = v131;
  *v131 = v130;
  v369 = v131 + 1;
  v368 = v131 + 1;
  v411 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v132 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v133 = operator new(8uLL);
  v354 = v133;
  *v133 = v132;
  v356 = v133 + 1;
  v355 = v133 + 1;
  v412 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v354);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v404, 9, &v357);
  MIL::IRParameter::Make(&v357, &v358);
  *(_QWORD *)&v359 = v358;
  if (v358)
  {
    v134 = (_QWORD *)operator new();
    v135 = v358;
    *v134 = &unk_1EA99F888;
    v134[1] = 0;
    v134[2] = 0;
    v134[3] = v135;
  }
  else
  {
    v134 = 0;
  }
  *((_QWORD *)&v359 + 1) = v134;
  v358 = 0;
  v136 = v115[2];
  v137 = v115[1];
  if (v137 >= v136)
  {
    v138 = (v137 - *v115) >> 4;
    v139 = v138 + 1;
    if ((unint64_t)(v138 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v140 = v136 - *v115;
    if (v140 >> 3 > v139)
      v139 = v140 >> 3;
    if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF0)
      v141 = 0xFFFFFFFFFFFFFFFLL;
    else
      v141 = v139;
    v394 = v115 + 2;
    v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v115 + 2), v141);
    v144 = &v142[16 * v138];
    *(_OWORD *)v144 = v359;
    v359 = 0uLL;
    v146 = *v115;
    v145 = v115[1];
    if (v145 == *v115)
    {
      v149 = v115[1];
      v147 = &v142[16 * v138];
    }
    else
    {
      v147 = &v142[16 * v138];
      do
      {
        v148 = *((_OWORD *)v145 - 1);
        v145 -= 16;
        *((_OWORD *)v147 - 1) = v148;
        v147 -= 16;
        *(_QWORD *)v145 = 0;
        *((_QWORD *)v145 + 1) = 0;
      }
      while (v145 != v146);
      v149 = *v115;
      v145 = v115[1];
    }
    v150 = v144 + 16;
    *v115 = v147;
    v391 = v149;
    v115[1] = v144 + 16;
    v392 = v145;
    v151 = v115[2];
    v115[2] = &v142[16 * v143];
    v393 = v151;
    v390 = v149;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v390);
    v152 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
    v115[1] = v150;
    if (v152)
    {
      p_shared_owners = (unint64_t *)&v152->__shared_owners_;
      do
        v154 = __ldaxr(p_shared_owners);
      while (__stlxr(v154 - 1, p_shared_owners));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
  }
  else
  {
    *(_QWORD *)v137 = v359;
    *((_QWORD *)v137 + 1) = v134;
    v359 = 0uLL;
    v115[1] = v137 + 16;
  }
  v155 = v358;
  v358 = 0;
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  v156 = (std::__shared_weak_count *)v357.n128_u64[1];
  if (v357.n128_u64[1])
  {
    v157 = (unint64_t *)(v357.n128_u64[1] + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  if (v354)
  {
    v355 = v354;
    operator delete(v354);
  }
  if (__p)
  {
    v368 = __p;
    operator delete(__p);
  }
  if (v370)
  {
    v371 = v370;
    operator delete(v370);
  }
  if (v373)
  {
    v374 = v373;
    operator delete(v373);
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (v379)
  {
    v380 = v379;
    operator delete(v379);
  }
  if (v382)
  {
    v383 = v382;
    operator delete(v382);
  }
  if (v385)
  {
    v386 = v385;
    operator delete(v385);
  }
  if (v401)
  {
    v402 = v401;
    operator delete(v401);
  }
  v352 = *(_OWORD *)a2;
  v353 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v159 = (uint64_t)v389;
  *(_QWORD *)&v351 = v389;
  if (v389)
  {
    v160 = (_QWORD *)operator new();
    *v160 = &unk_1EA99F8E8;
    v160[1] = 0;
    v160[2] = 0;
    v160[3] = v159;
  }
  else
  {
    v160 = 0;
  }
  *((_QWORD *)&v351 + 1) = v160;
  v389 = 0;
  *(_QWORD *)&v350 = v360;
  if (v360)
  {
    v161 = (_QWORD *)operator new();
    v162 = v360;
    *v161 = &unk_1EA99F948;
    v161[1] = 0;
    v161[2] = 0;
    v161[3] = v162;
  }
  else
  {
    v161 = 0;
  }
  *((_QWORD *)&v350 + 1) = v161;
  v360 = 0;
  v400 = 0;
  v398 = 0;
  MIL::IROperator::Make(&v352, &v351, &v350, (uint64_t)v399, (uint64_t)v397, a3);
  v163 = v398;
  if (v398 == v397)
  {
    v164 = 4;
    v163 = v397;
  }
  else
  {
    if (!v398)
      goto LABEL_167;
    v164 = 5;
  }
  (*(void (**)(void))(*v163 + 8 * v164))();
LABEL_167:
  v165 = v400;
  if (v400 == v399)
  {
    v166 = 4;
    v165 = v399;
    goto LABEL_171;
  }
  if (v400)
  {
    v166 = 5;
LABEL_171:
    (*(void (**)(void))(*v165 + 8 * v166))();
  }
  v167 = (std::__shared_weak_count *)*((_QWORD *)&v350 + 1);
  if (*((_QWORD *)&v350 + 1))
  {
    v168 = (unint64_t *)(*((_QWORD *)&v350 + 1) + 8);
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
  if (*((_QWORD *)&v351 + 1))
  {
    v171 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  if (SHIBYTE(v353) < 0)
    operator delete((void *)v352);
  v173 = *a3;
  v395[0] = &off_1EA99FBD8;
  v395[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceByIndex;
  v396 = v395;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v173 + 200))(v173, v395);
  v174 = v396;
  if (v396 == v395)
  {
    v175 = 4;
    v174 = v395;
  }
  else
  {
    if (!v396)
      goto LABEL_189;
    v175 = 5;
  }
  (*(void (**)(void))(*v174 + 8 * v175))();
LABEL_189:
  MIL::Validation::TensorDTypeConstraints::Make(&v404);
  v176 = v404;
  std::string::basic_string[abi:ne180100]<0>(v346, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v346, 0, (uint64_t *)&v390);
  v348 = v390;
  if (v390)
  {
    v177 = (std::__shared_weak_count *)operator new();
    v178 = (std::__shared_weak_count_vtbl *)v390;
    v177->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v177->__shared_owners_ = 0;
    v177->__shared_weak_owners_ = 0;
    v177[1].__vftable = v178;
  }
  else
  {
    v177 = 0;
  }
  v349 = v177;
  v390 = 0;
  std::string::basic_string[abi:ne180100]<0>(v344, "T");
  (*((void (**)(void **, void **, void **))*v176 + 3))(v176, &v348, v344);
  if (v345 < 0)
    operator delete(v344[0]);
  v179 = v349;
  if (v349)
  {
    v180 = (unint64_t *)&v349->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v182 = v390;
  v390 = 0;
  if (v182)
    (*(void (**)(void *))(*(_QWORD *)v182 + 8))(v182);
  if (v347 < 0)
    operator delete(v346[0]);
  v183 = v404;
  std::string::basic_string[abi:ne180100]<0>(v340, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v340, 0, (uint64_t *)&v390);
  v342 = v390;
  if (v390)
  {
    v184 = (std::__shared_weak_count *)operator new();
    v185 = (std::__shared_weak_count_vtbl *)v390;
    v184->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v184->__shared_owners_ = 0;
    v184->__shared_weak_owners_ = 0;
    v184[1].__vftable = v185;
  }
  else
  {
    v184 = 0;
  }
  v343 = v184;
  v390 = 0;
  std::string::basic_string[abi:ne180100]<0>(v338, "U");
  (*((void (**)(void **, void **, void **))*v183 + 3))(v183, &v342, v338);
  if (v339 < 0)
    operator delete(v338[0]);
  v186 = v343;
  if (v343)
  {
    v187 = (unint64_t *)&v343->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = v390;
  v390 = 0;
  if (v189)
    (*(void (**)(void *))(*(_QWORD *)v189 + 8))(v189);
  if (v341 < 0)
    operator delete(v340[0]);
  v190 = v404;
  std::string::basic_string[abi:ne180100]<0>(v334, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v334, 0, (uint64_t *)&v390);
  v336 = v390;
  if (v390)
  {
    v191 = (std::__shared_weak_count *)operator new();
    v192 = (std::__shared_weak_count_vtbl *)v390;
    v191->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v191->__shared_owners_ = 0;
    v191->__shared_weak_owners_ = 0;
    v191[1].__vftable = v192;
  }
  else
  {
    v191 = 0;
  }
  v337 = v191;
  v390 = 0;
  std::string::basic_string[abi:ne180100]<0>(v332, "U");
  (*((void (**)(void **, void **, void **))*v190 + 3))(v190, &v336, v332);
  if (v333 < 0)
    operator delete(v332[0]);
  v193 = v337;
  if (v337)
  {
    v194 = (unint64_t *)&v337->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = v390;
  v390 = 0;
  if (v196)
    (*(void (**)(void *))(*(_QWORD *)v196 + 8))(v196);
  if (v335 < 0)
    operator delete(v334[0]);
  v197 = v404;
  std::string::basic_string[abi:ne180100]<0>(v328, "stride");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v328, 1, (uint64_t *)&v390);
  v330 = v390;
  if (v390)
  {
    v198 = (std::__shared_weak_count *)operator new();
    v199 = (std::__shared_weak_count_vtbl *)v390;
    v198->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v198->__shared_owners_ = 0;
    v198->__shared_weak_owners_ = 0;
    v198[1].__vftable = v199;
  }
  else
  {
    v198 = 0;
  }
  v331 = v198;
  v390 = 0;
  std::string::basic_string[abi:ne180100]<0>(v326, "U");
  (*((void (**)(void **, void **, void **))*v197 + 3))(v197, &v330, v326);
  if (v327 < 0)
    operator delete(v326[0]);
  v200 = v331;
  if (v331)
  {
    v201 = (unint64_t *)&v331->__shared_owners_;
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  v203 = v390;
  v390 = 0;
  if (v203)
    (*(void (**)(void *))(*(_QWORD *)v203 + 8))(v203);
  if (v329 < 0)
    operator delete(v328[0]);
  v204 = v404;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v390);
  v324 = v390;
  if (v390)
  {
    v205 = (std::__shared_weak_count *)operator new();
    v206 = (std::__shared_weak_count_vtbl *)v390;
    v205->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v205->__shared_owners_ = 0;
    v205->__shared_weak_owners_ = 0;
    v205[1].__vftable = v206;
  }
  else
  {
    v205 = 0;
  }
  v325 = v205;
  v390 = 0;
  std::string::basic_string[abi:ne180100]<0>(v322, "T");
  (*((void (**)(void **, void **, void **))*v204 + 3))(v204, &v324, v322);
  if (v323 < 0)
    operator delete(v322[0]);
  v207 = v325;
  if (v325)
  {
    v208 = (unint64_t *)&v325->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = v390;
  v390 = 0;
  if (v210)
    (*(void (**)(void *))(*(_QWORD *)v210 + 8))(v210);
  v211 = *a3;
  v320 = v404;
  if (v404)
  {
    v212 = (std::__shared_weak_count *)operator new();
    v213 = v404;
    v212->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v212->__shared_owners_ = 0;
    v212->__shared_weak_owners_ = 0;
    v212[1].__vftable = (std::__shared_weak_count_vtbl *)v213;
  }
  else
  {
    v212 = 0;
  }
  v321 = v212;
  v404 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v211 + 56))(v211, &v320);
  v214 = v321;
  if (v321)
  {
    v215 = (unint64_t *)&v321->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = v404;
  v404 = 0;
  if (v217)
    (*((void (**)(void **))*v217 + 1))(v217);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v404);
  v218 = v404;
  std::string::basic_string[abi:ne180100]<0>(v316, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v316, 0, (uint64_t *)&v390);
  v318 = v390;
  if (v390)
  {
    v219 = (std::__shared_weak_count *)operator new();
    v220 = (std::__shared_weak_count_vtbl *)v390;
    v219->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v219->__shared_owners_ = 0;
    v219->__shared_weak_owners_ = 0;
    v219[1].__vftable = v220;
  }
  else
  {
    v219 = 0;
  }
  v319 = v219;
  v390 = 0;
  std::string::basic_string[abi:ne180100]<0>(v314, "D");
  (*((void (**)(void **, void **, void **))*v218 + 5))(v218, &v318, v314);
  if (v315 < 0)
    operator delete(v314[0]);
  v221 = v319;
  if (v319)
  {
    v222 = (unint64_t *)&v319->__shared_owners_;
    do
      v223 = __ldaxr(v222);
    while (__stlxr(v223 - 1, v222));
    if (!v223)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  v224 = v390;
  v390 = 0;
  if (v224)
    (*(void (**)(void *))(*(_QWORD *)v224 + 8))(v224);
  if (v317 < 0)
    operator delete(v316[0]);
  v225 = v404;
  std::string::basic_string[abi:ne180100]<0>(v310, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v310, 0, (uint64_t *)&v390);
  v312 = v390;
  if (v390)
  {
    v226 = (std::__shared_weak_count *)operator new();
    v227 = (std::__shared_weak_count_vtbl *)v390;
    v226->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v226->__shared_owners_ = 0;
    v226->__shared_weak_owners_ = 0;
    v226[1].__vftable = v227;
  }
  else
  {
    v226 = 0;
  }
  v313 = v226;
  v390 = 0;
  std::string::basic_string[abi:ne180100]<0>(v308, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v225 + 3))(v225, &v312, 0, v308);
  if (v309 < 0)
    operator delete(v308[0]);
  v228 = v313;
  if (v313)
  {
    v229 = (unint64_t *)&v313->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v231 = v390;
  v390 = 0;
  if (v231)
    (*(void (**)(void *))(*(_QWORD *)v231 + 8))(v231);
  if (v311 < 0)
    operator delete(v310[0]);
  v232 = v404;
  std::string::basic_string[abi:ne180100]<0>(v304, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v304, 0, (uint64_t *)&v390);
  v306 = v390;
  if (v390)
  {
    v233 = (std::__shared_weak_count *)operator new();
    v234 = (std::__shared_weak_count_vtbl *)v390;
    v233->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v233->__shared_owners_ = 0;
    v233->__shared_weak_owners_ = 0;
    v233[1].__vftable = v234;
  }
  else
  {
    v233 = 0;
  }
  v307 = v233;
  v390 = 0;
  std::string::basic_string[abi:ne180100]<0>(v302, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v232 + 3))(v232, &v306, 0, v302);
  if (v303 < 0)
    operator delete(v302[0]);
  v235 = v307;
  if (v307)
  {
    v236 = (unint64_t *)&v307->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v238 = v390;
  v390 = 0;
  if (v238)
    (*(void (**)(void *))(*(_QWORD *)v238 + 8))(v238);
  if (v305 < 0)
    operator delete(v304[0]);
  v239 = v404;
  std::string::basic_string[abi:ne180100]<0>(v298, "stride");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v298, 1, (uint64_t *)&v390);
  v300 = v390;
  if (v390)
  {
    v240 = (std::__shared_weak_count *)operator new();
    v241 = (std::__shared_weak_count_vtbl *)v390;
    v240->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v240->__shared_owners_ = 0;
    v240->__shared_weak_owners_ = 0;
    v240[1].__vftable = v241;
  }
  else
  {
    v240 = 0;
  }
  v301 = v240;
  v390 = 0;
  std::string::basic_string[abi:ne180100]<0>(v296, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v239 + 3))(v239, &v300, 0, v296);
  if (v297 < 0)
    operator delete(v296[0]);
  v242 = v301;
  if (v301)
  {
    v243 = (unint64_t *)&v301->__shared_owners_;
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  v245 = v390;
  v390 = 0;
  if (v245)
    (*(void (**)(void *))(*(_QWORD *)v245 + 8))(v245);
  if (v299 < 0)
    operator delete(v298[0]);
  v246 = v404;
  std::string::basic_string[abi:ne180100]<0>(v292, "begin_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v292, 1, (uint64_t *)&v390);
  v294 = v390;
  if (v390)
  {
    v247 = (std::__shared_weak_count *)operator new();
    v248 = (std::__shared_weak_count_vtbl *)v390;
    v247->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v247->__shared_owners_ = 0;
    v247->__shared_weak_owners_ = 0;
    v247[1].__vftable = v248;
  }
  else
  {
    v247 = 0;
  }
  v295 = v247;
  v390 = 0;
  std::string::basic_string[abi:ne180100]<0>(v290, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v246 + 3))(v246, &v294, 0, v290);
  if (v291 < 0)
    operator delete(v290[0]);
  v249 = v295;
  if (v295)
  {
    v250 = (unint64_t *)&v295->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  v252 = v390;
  v390 = 0;
  if (v252)
    (*(void (**)(void *))(*(_QWORD *)v252 + 8))(v252);
  if (v293 < 0)
    operator delete(v292[0]);
  v253 = v404;
  std::string::basic_string[abi:ne180100]<0>(v286, "end_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v286, 1, (uint64_t *)&v390);
  v288 = v390;
  if (v390)
  {
    v254 = (std::__shared_weak_count *)operator new();
    v255 = (std::__shared_weak_count_vtbl *)v390;
    v254->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v254->__shared_owners_ = 0;
    v254->__shared_weak_owners_ = 0;
    v254[1].__vftable = v255;
  }
  else
  {
    v254 = 0;
  }
  v289 = v254;
  v390 = 0;
  std::string::basic_string[abi:ne180100]<0>(v284, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v253 + 3))(v253, &v288, 0, v284);
  if (v285 < 0)
    operator delete(v284[0]);
  v256 = v289;
  if (v289)
  {
    v257 = (unint64_t *)&v289->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v259 = v390;
  v390 = 0;
  if (v259)
    (*(void (**)(void *))(*(_QWORD *)v259 + 8))(v259);
  if (v287 < 0)
    operator delete(v286[0]);
  v260 = v404;
  std::string::basic_string[abi:ne180100]<0>(v280, "squeeze_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v280, 1, (uint64_t *)&v390);
  v282 = v390;
  if (v390)
  {
    v261 = (std::__shared_weak_count *)operator new();
    v262 = (std::__shared_weak_count_vtbl *)v390;
    v261->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v261->__shared_owners_ = 0;
    v261->__shared_weak_owners_ = 0;
    v261[1].__vftable = v262;
  }
  else
  {
    v261 = 0;
  }
  v283 = v261;
  v390 = 0;
  std::string::basic_string[abi:ne180100]<0>(v278, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v260 + 3))(v260, &v282, 0, v278);
  if (v279 < 0)
    operator delete(v278[0]);
  v263 = v283;
  if (v283)
  {
    v264 = (unint64_t *)&v283->__shared_owners_;
    do
      v265 = __ldaxr(v264);
    while (__stlxr(v265 - 1, v264));
    if (!v265)
    {
      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
      std::__shared_weak_count::__release_weak(v263);
    }
  }
  v266 = v390;
  v390 = 0;
  if (v266)
    (*(void (**)(void *))(*(_QWORD *)v266 + 8))(v266);
  if (v281 < 0)
    operator delete(v280[0]);
  v267 = *a3;
  v276 = v404;
  if (v404)
  {
    v268 = (std::__shared_weak_count *)operator new();
    v269 = v404;
    v268->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v268->__shared_owners_ = 0;
    v268->__shared_weak_owners_ = 0;
    v268[1].__vftable = (std::__shared_weak_count_vtbl *)v269;
  }
  else
  {
    v268 = 0;
  }
  v277 = v268;
  v404 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v267 + 56))(v267, &v276);
  v270 = v277;
  if (v277)
  {
    v271 = (unint64_t *)&v277->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
      std::__shared_weak_count::__release_weak(v270);
    }
  }
  v273 = v404;
  v404 = 0;
  if (v273)
    (*((void (**)(void **))*v273 + 1))(v273);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v360, 0);
  result = (uint64_t)v389;
  if (v389)
  {
    v275 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v389);
    return MEMORY[0x1E0C023A0](v275, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A164B0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 144);
  *(_QWORD *)(v2 - 144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x398], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4B8], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::SliceBySize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  char **v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  __int128 v106;
  char *v107;
  char *v108;
  char *v109;
  std::__shared_weak_count *v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  char **v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  void **v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void *v154;
  void **v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  void **v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void **v168;
  void **v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count_vtbl *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  void *v175;
  void **v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count_vtbl *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  void *v182;
  void **v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  void **v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  void **v196;
  uint64_t result;
  uint64_t v198;
  void **v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  void *v203[2];
  char v204;
  void *v205;
  std::__shared_weak_count *v206;
  void *v207[2];
  char v208;
  void *v209[2];
  char v210;
  void *v211;
  std::__shared_weak_count *v212;
  void *v213[2];
  char v214;
  void *v215[2];
  char v216;
  void *v217;
  std::__shared_weak_count *v218;
  void **v219;
  std::__shared_weak_count *v220;
  void *v221[2];
  char v222;
  void *v223;
  std::__shared_weak_count *v224;
  void *v225[2];
  char v226;
  void *v227[2];
  char v228;
  void *v229;
  std::__shared_weak_count *v230;
  void *v231[2];
  char v232;
  void *v233[2];
  char v234;
  void *v235;
  std::__shared_weak_count *v236;
  void *v237[2];
  char v238;
  void *v239[2];
  char v240;
  void *v241;
  std::__shared_weak_count *v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  void *v247;
  void *v248;
  _QWORD *v249;
  __n128 v250;
  uint64_t v251;
  __int128 v252;
  char **v253;
  __n128 v254;
  __n128 v255;
  void *__p;
  void *v257;
  _QWORD *v258;
  void *v259;
  void *v260;
  _QWORD *v261;
  void *v262;
  void *v263;
  _QWORD *v264;
  void *v265;
  void *v266;
  _QWORD *v267;
  void *v268;
  void *v269;
  _QWORD *v270;
  void *v271;
  void *v272;
  _QWORD *v273;
  void *v274;
  void *v275;
  _QWORD *v276;
  void *v277;
  void *v278;
  _QWORD *v279;
  __n128 v280;
  _QWORD *v281;
  void *v282;
  void *v283;
  char *v284;
  char *v285;
  char **v286;
  _QWORD v287[3];
  _QWORD *v288;
  _BYTE v289[24];
  _BYTE *v290;
  _BYTE v291[24];
  _BYTE *v292;
  void **v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;

  v302 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v281 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v284 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v282 = v9;
  v283 = v9 + 16;
  v293 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v282);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v279 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v277 = v12;
  v278 = v12 + 2;
  v294 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v277);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v276 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v274 = v15;
  v275 = v15 + 2;
  v295 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v274);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v273 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v271 = v18;
  v272 = v18 + 2;
  v296 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v271);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v270 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v268 = v21;
  v269 = v21 + 2;
  v297 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v268);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v267 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v265 = v24;
  v266 = v24 + 2;
  v298 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v265);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v264 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v262 = v27;
  v263 = v27 + 2;
  v299 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v262);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v261 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v259 = v30;
  v260 = v30 + 2;
  v300 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v259);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v258 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  __p = v33;
  v257 = v33 + 2;
  v301 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v293, 9, &v280);
  MIL::IRParameter::Make(&v280, (uint64_t *)&v247);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v247);
  v34 = v247;
  v247 = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v280.n128_u64[1];
  if (v280.n128_u64[1])
  {
    v36 = (unint64_t *)(v280.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (__p)
  {
    v257 = __p;
    operator delete(__p);
  }
  if (v259)
  {
    v260 = v259;
    operator delete(v259);
  }
  if (v262)
  {
    v263 = v262;
    operator delete(v262);
  }
  if (v265)
  {
    v266 = v265;
    operator delete(v265);
  }
  if (v268)
  {
    v269 = v268;
    operator delete(v268);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (v274)
  {
    v275 = v274;
    operator delete(v274);
  }
  if (v277)
  {
    v278 = v277;
    operator delete(v277);
  }
  if (v282)
  {
    v283 = v282;
    operator delete(v282);
  }
  v38 = v281;
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (char *)operator new(8uLL);
  v282 = v40;
  *(_QWORD *)v40 = v39;
  v284 = v40 + 8;
  v283 = v40 + 8;
  v293 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v282);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = operator new(8uLL);
  v277 = v42;
  *v42 = v41;
  v279 = v42 + 1;
  v278 = v42 + 1;
  v294 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v277);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = operator new(8uLL);
  v274 = v44;
  *v44 = v43;
  v276 = v44 + 1;
  v275 = v44 + 1;
  v295 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v274);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = operator new(8uLL);
  v271 = v46;
  *v46 = v45;
  v273 = v46 + 1;
  v272 = v46 + 1;
  v296 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v271);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = operator new(8uLL);
  v268 = v48;
  *v48 = v47;
  v270 = v48 + 1;
  v269 = v48 + 1;
  v297 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v268);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = operator new(8uLL);
  v265 = v50;
  *v50 = v49;
  v267 = v50 + 1;
  v266 = v50 + 1;
  v298 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v265);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v293, 6, &v255);
  MIL::IRParameter::Make(&v255, (uint64_t *)&v262);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v38, "begin", (uint64_t *)&v262);
  v51 = v262;
  v262 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v255.n128_u64[1];
  if (v255.n128_u64[1])
  {
    v53 = (unint64_t *)(v255.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v265)
  {
    v266 = v265;
    operator delete(v265);
  }
  if (v268)
  {
    v269 = v268;
    operator delete(v268);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (v274)
  {
    v275 = v274;
    operator delete(v274);
  }
  if (v277)
  {
    v278 = v277;
    operator delete(v277);
  }
  if (v282)
  {
    v283 = v282;
    operator delete(v282);
  }
  v55 = v281;
  v56 = MIL::IRUnknownDimension::Make(a1, 0);
  v57 = (char *)operator new(8uLL);
  v282 = v57;
  *(_QWORD *)v57 = v56;
  v284 = v57 + 8;
  v283 = v57 + 8;
  v293 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v282);
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = operator new(8uLL);
  v277 = v59;
  *v59 = v58;
  v279 = v59 + 1;
  v278 = v59 + 1;
  v294 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v277);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = operator new(8uLL);
  v274 = v61;
  *v61 = v60;
  v276 = v61 + 1;
  v275 = v61 + 1;
  v295 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v274);
  v62 = MIL::IRUnknownDimension::Make(a1, 0);
  v63 = operator new(8uLL);
  v271 = v63;
  *v63 = v62;
  v273 = v63 + 1;
  v272 = v63 + 1;
  v296 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v271);
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = operator new(8uLL);
  v268 = v65;
  *v65 = v64;
  v270 = v65 + 1;
  v269 = v65 + 1;
  v297 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v268);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = operator new(8uLL);
  v265 = v67;
  *v67 = v66;
  v267 = v67 + 1;
  v266 = v67 + 1;
  v298 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v265);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v293, 6, &v254);
  MIL::IRParameter::Make(&v254, (uint64_t *)&v262);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v55, "size", (uint64_t *)&v262);
  v68 = v262;
  v262 = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v254.n128_u64[1];
  if (v254.n128_u64[1])
  {
    v70 = (unint64_t *)(v254.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v265)
  {
    v266 = v265;
    operator delete(v265);
  }
  if (v268)
  {
    v269 = v268;
    operator delete(v268);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (v274)
  {
    v275 = v274;
    operator delete(v274);
  }
  if (v277)
  {
    v278 = v277;
    operator delete(v277);
  }
  if (v282)
  {
    v283 = v282;
    operator delete(v282);
  }
  v253 = 0;
  v72 = operator new();
  *(_QWORD *)v72 = 0;
  *(_QWORD *)(v72 + 8) = 0;
  *(_QWORD *)(v72 + 16) = 0;
  v293 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v253, (void **)v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v293, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v253, 1uLL);
  v73 = v253;
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  v277 = v75;
  *v75 = v74;
  v279 = v75 + 1;
  v278 = v75 + 1;
  v293 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v277);
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(8uLL);
  v274 = v77;
  *v77 = v76;
  v276 = v77 + 1;
  v275 = v77 + 1;
  v294 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v274);
  v78 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v79 = operator new(8uLL);
  v271 = v79;
  *v79 = v78;
  v273 = v79 + 1;
  v272 = v79 + 1;
  v295 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v271);
  v80 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v81 = operator new(8uLL);
  v268 = v81;
  *v81 = v80;
  v270 = v81 + 1;
  v269 = v81 + 1;
  v296 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v268);
  v82 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v83 = operator new(8uLL);
  v265 = v83;
  *v83 = v82;
  v267 = v83 + 1;
  v266 = v83 + 1;
  v297 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v265);
  v84 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v85 = operator new(8uLL);
  v262 = v85;
  *v85 = v84;
  v264 = v85 + 1;
  v263 = v85 + 1;
  v298 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v262);
  v86 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v87 = operator new(8uLL);
  v259 = v87;
  *v87 = v86;
  v261 = v87 + 1;
  v260 = v87 + 1;
  v299 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v259);
  v88 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v89 = operator new(8uLL);
  __p = v89;
  *v89 = v88;
  v258 = v89 + 1;
  v257 = v89 + 1;
  v300 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v90 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v91 = operator new(8uLL);
  v247 = v91;
  *v91 = v90;
  v249 = v91 + 1;
  v248 = v91 + 1;
  v301 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v247);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v293, 9, &v250);
  MIL::IRParameter::Make(&v250, &v251);
  *(_QWORD *)&v252 = v251;
  if (v251)
  {
    v92 = (_QWORD *)operator new();
    v93 = v251;
    *v92 = &unk_1EA99F888;
    v92[1] = 0;
    v92[2] = 0;
    v92[3] = v93;
  }
  else
  {
    v92 = 0;
  }
  *((_QWORD *)&v252 + 1) = v92;
  v251 = 0;
  v94 = v73[2];
  v95 = v73[1];
  if (v95 >= v94)
  {
    v96 = (v95 - *v73) >> 4;
    v97 = v96 + 1;
    if ((unint64_t)(v96 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v98 = v94 - *v73;
    if (v98 >> 3 > v97)
      v97 = v98 >> 3;
    if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF0)
      v99 = 0xFFFFFFFFFFFFFFFLL;
    else
      v99 = v97;
    v286 = v73 + 2;
    v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v73 + 2), v99);
    v102 = &v100[16 * v96];
    *(_OWORD *)v102 = v252;
    v252 = 0uLL;
    v104 = *v73;
    v103 = v73[1];
    if (v103 == *v73)
    {
      v107 = v73[1];
      v105 = &v100[16 * v96];
    }
    else
    {
      v105 = &v100[16 * v96];
      do
      {
        v106 = *((_OWORD *)v103 - 1);
        v103 -= 16;
        *((_OWORD *)v105 - 1) = v106;
        v105 -= 16;
        *(_QWORD *)v103 = 0;
        *((_QWORD *)v103 + 1) = 0;
      }
      while (v103 != v104);
      v107 = *v73;
      v103 = v73[1];
    }
    v108 = v102 + 16;
    *v73 = v105;
    v283 = v107;
    v73[1] = v102 + 16;
    v284 = v103;
    v109 = v73[2];
    v73[2] = &v100[16 * v101];
    v285 = v109;
    v282 = v107;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v282);
    v110 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
    v73[1] = v108;
    if (v110)
    {
      p_shared_owners = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldaxr(p_shared_owners);
      while (__stlxr(v112 - 1, p_shared_owners));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
  }
  else
  {
    *(_QWORD *)v95 = v252;
    *((_QWORD *)v95 + 1) = v92;
    v252 = 0uLL;
    v73[1] = v95 + 16;
  }
  v113 = v251;
  v251 = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  v114 = (std::__shared_weak_count *)v250.n128_u64[1];
  if (v250.n128_u64[1])
  {
    v115 = (unint64_t *)(v250.n128_u64[1] + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  if (__p)
  {
    v257 = __p;
    operator delete(__p);
  }
  if (v259)
  {
    v260 = v259;
    operator delete(v259);
  }
  if (v262)
  {
    v263 = v262;
    operator delete(v262);
  }
  if (v265)
  {
    v266 = v265;
    operator delete(v265);
  }
  if (v268)
  {
    v269 = v268;
    operator delete(v268);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (v274)
  {
    v275 = v274;
    operator delete(v274);
  }
  if (v277)
  {
    v278 = v277;
    operator delete(v277);
  }
  v245 = *(_OWORD *)a2;
  v246 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v117 = (uint64_t)v281;
  *(_QWORD *)&v244 = v281;
  if (v281)
  {
    v118 = (_QWORD *)operator new();
    *v118 = &unk_1EA99F8E8;
    v118[1] = 0;
    v118[2] = 0;
    v118[3] = v117;
  }
  else
  {
    v118 = 0;
  }
  *((_QWORD *)&v244 + 1) = v118;
  v281 = 0;
  *(_QWORD *)&v243 = v253;
  if (v253)
  {
    v119 = (_QWORD *)operator new();
    v120 = v253;
    *v119 = &unk_1EA99F948;
    v119[1] = 0;
    v119[2] = 0;
    v119[3] = v120;
  }
  else
  {
    v119 = 0;
  }
  *((_QWORD *)&v243 + 1) = v119;
  v253 = 0;
  v292 = 0;
  v290 = 0;
  MIL::IROperator::Make(&v245, &v244, &v243, (uint64_t)v291, (uint64_t)v289, a3);
  v121 = v290;
  if (v290 == v289)
  {
    v122 = 4;
    v121 = v289;
  }
  else
  {
    if (!v290)
      goto LABEL_121;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_121:
  v123 = v292;
  if (v292 == v291)
  {
    v124 = 4;
    v123 = v291;
    goto LABEL_125;
  }
  if (v292)
  {
    v124 = 5;
LABEL_125:
    (*(void (**)(void))(*v123 + 8 * v124))();
  }
  v125 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
  if (*((_QWORD *)&v243 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
  if (*((_QWORD *)&v244 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  if (SHIBYTE(v246) < 0)
    operator delete((void *)v245);
  v131 = *a3;
  v287[0] = &off_1EA99FBD8;
  v287[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceBySize;
  v288 = v287;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v131 + 200))(v131, v287);
  v132 = v288;
  if (v288 == v287)
  {
    v133 = 4;
    v132 = v287;
  }
  else
  {
    if (!v288)
      goto LABEL_143;
    v133 = 5;
  }
  (*(void (**)(void))(*v132 + 8 * v133))();
LABEL_143:
  MIL::Validation::TensorDTypeConstraints::Make(&v293);
  v134 = v293;
  std::string::basic_string[abi:ne180100]<0>(v239, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v239, 0, (uint64_t *)&v282);
  v241 = v282;
  if (v282)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)v282;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v242 = v135;
  v282 = 0;
  std::string::basic_string[abi:ne180100]<0>(v237, "T");
  (*((void (**)(void **, void **, void **))*v134 + 3))(v134, &v241, v237);
  if (v238 < 0)
    operator delete(v237[0]);
  v137 = v242;
  if (v242)
  {
    v138 = (unint64_t *)&v242->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v282;
  v282 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v240 < 0)
    operator delete(v239[0]);
  v141 = v293;
  std::string::basic_string[abi:ne180100]<0>(v233, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v233, 0, (uint64_t *)&v282);
  v235 = v282;
  if (v282)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)v282;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v236 = v142;
  v282 = 0;
  std::string::basic_string[abi:ne180100]<0>(v231, "U");
  (*((void (**)(void **, void **, void **))*v141 + 3))(v141, &v235, v231);
  if (v232 < 0)
    operator delete(v231[0]);
  v144 = v236;
  if (v236)
  {
    v145 = (unint64_t *)&v236->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v282;
  v282 = 0;
  if (v147)
    (*(void (**)(void *))(*(_QWORD *)v147 + 8))(v147);
  if (v234 < 0)
    operator delete(v233[0]);
  v148 = v293;
  std::string::basic_string[abi:ne180100]<0>(v227, "size");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v227, 0, (uint64_t *)&v282);
  v229 = v282;
  if (v282)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = (std::__shared_weak_count_vtbl *)v282;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v230 = v149;
  v282 = 0;
  std::string::basic_string[abi:ne180100]<0>(v225, "U");
  (*((void (**)(void **, void **, void **))*v148 + 3))(v148, &v229, v225);
  if (v226 < 0)
    operator delete(v225[0]);
  v151 = v230;
  if (v230)
  {
    v152 = (unint64_t *)&v230->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = v282;
  v282 = 0;
  if (v154)
    (*(void (**)(void *))(*(_QWORD *)v154 + 8))(v154);
  if (v228 < 0)
    operator delete(v227[0]);
  v155 = v293;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v282);
  v223 = v282;
  if (v282)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = (std::__shared_weak_count_vtbl *)v282;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v224 = v156;
  v282 = 0;
  std::string::basic_string[abi:ne180100]<0>(v221, "T");
  (*((void (**)(void **, void **, void **))*v155 + 3))(v155, &v223, v221);
  if (v222 < 0)
    operator delete(v221[0]);
  v158 = v224;
  if (v224)
  {
    v159 = (unint64_t *)&v224->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = v282;
  v282 = 0;
  if (v161)
    (*(void (**)(void *))(*(_QWORD *)v161 + 8))(v161);
  v162 = *a3;
  v219 = v293;
  if (v293)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = v293;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = (std::__shared_weak_count_vtbl *)v164;
  }
  else
  {
    v163 = 0;
  }
  v220 = v163;
  v293 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v162 + 56))(v162, &v219);
  v165 = v220;
  if (v220)
  {
    v166 = (unint64_t *)&v220->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v293;
  v293 = 0;
  if (v168)
    (*((void (**)(void **))*v168 + 1))(v168);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v293);
  v169 = v293;
  std::string::basic_string[abi:ne180100]<0>(v215, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v215, 0, (uint64_t *)&v282);
  v217 = v282;
  if (v282)
  {
    v170 = (std::__shared_weak_count *)operator new();
    v171 = (std::__shared_weak_count_vtbl *)v282;
    v170->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v170->__shared_owners_ = 0;
    v170->__shared_weak_owners_ = 0;
    v170[1].__vftable = v171;
  }
  else
  {
    v170 = 0;
  }
  v218 = v170;
  v282 = 0;
  std::string::basic_string[abi:ne180100]<0>(v213, "D");
  (*((void (**)(void **, void **, void **))*v169 + 5))(v169, &v217, v213);
  if (v214 < 0)
    operator delete(v213[0]);
  v172 = v218;
  if (v218)
  {
    v173 = (unint64_t *)&v218->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = v282;
  v282 = 0;
  if (v175)
    (*(void (**)(void *))(*(_QWORD *)v175 + 8))(v175);
  if (v216 < 0)
    operator delete(v215[0]);
  v176 = v293;
  std::string::basic_string[abi:ne180100]<0>(v209, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v209, 0, (uint64_t *)&v282);
  v211 = v282;
  if (v282)
  {
    v177 = (std::__shared_weak_count *)operator new();
    v178 = (std::__shared_weak_count_vtbl *)v282;
    v177->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v177->__shared_owners_ = 0;
    v177->__shared_weak_owners_ = 0;
    v177[1].__vftable = v178;
  }
  else
  {
    v177 = 0;
  }
  v212 = v177;
  v282 = 0;
  std::string::basic_string[abi:ne180100]<0>(v207, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v176 + 3))(v176, &v211, 0, v207);
  if (v208 < 0)
    operator delete(v207[0]);
  v179 = v212;
  if (v212)
  {
    v180 = (unint64_t *)&v212->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v182 = v282;
  v282 = 0;
  if (v182)
    (*(void (**)(void *))(*(_QWORD *)v182 + 8))(v182);
  if (v210 < 0)
    operator delete(v209[0]);
  v183 = v293;
  std::string::basic_string[abi:ne180100]<0>(v203, "size");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v203, 0, (uint64_t *)&v282);
  v205 = v282;
  if (v282)
  {
    v184 = (std::__shared_weak_count *)operator new();
    v185 = (std::__shared_weak_count_vtbl *)v282;
    v184->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v184->__shared_owners_ = 0;
    v184->__shared_weak_owners_ = 0;
    v184[1].__vftable = v185;
  }
  else
  {
    v184 = 0;
  }
  v206 = v184;
  v282 = 0;
  std::string::basic_string[abi:ne180100]<0>(v201, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v183 + 3))(v183, &v205, 0, v201);
  if (v202 < 0)
    operator delete(v201[0]);
  v186 = v206;
  if (v206)
  {
    v187 = (unint64_t *)&v206->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = v282;
  v282 = 0;
  if (v189)
    (*(void (**)(void *))(*(_QWORD *)v189 + 8))(v189);
  if (v204 < 0)
    operator delete(v203[0]);
  v190 = *a3;
  v199 = v293;
  if (v293)
  {
    v191 = (std::__shared_weak_count *)operator new();
    v192 = v293;
    v191->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v191->__shared_owners_ = 0;
    v191->__shared_weak_owners_ = 0;
    v191[1].__vftable = (std::__shared_weak_count_vtbl *)v192;
  }
  else
  {
    v191 = 0;
  }
  v200 = v191;
  v293 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v190 + 56))(v190, &v199);
  v193 = v200;
  if (v200)
  {
    v194 = (unint64_t *)&v200->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = v293;
  v293 = 0;
  if (v196)
    (*((void (**)(void **))*v196 + 1))(v196);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v253, 0);
  result = (uint64_t)v281;
  if (v281)
  {
    v198 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v281);
    return MEMORY[0x1E0C023A0](v198, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A187E8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 144);
  *(_QWORD *)(v2 - 144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x258], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x350], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::SliceUpdate::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  unsigned __int8 *v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  void **v106;
  unsigned __int8 *v107;
  void *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  void **v114;
  unsigned __int8 *v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  void **v122;
  unsigned __int8 *v123;
  void *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  char **v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  __int128 v171;
  char *v172;
  char *v173;
  char *v174;
  std::__shared_weak_count *v175;
  unint64_t *p_shared_owners;
  unint64_t v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  char **v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  void **v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void *v206;
  void **v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  void *v213;
  void **v214;
  std::__shared_weak_count *v215;
  std::__shared_weak_count_vtbl *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  void *v220;
  void **v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  void *v227;
  void **v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  void *v234;
  void **v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  void **v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  void **v248;
  void **v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  void *v255;
  void **v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  void *v262;
  void **v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  void *v269;
  void **v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  void *v276;
  void **v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  void *v283;
  void **v284;
  std::__shared_weak_count *v285;
  std::__shared_weak_count_vtbl *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  void *v290;
  void **v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count_vtbl *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  void *v297;
  void **v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count_vtbl *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  void *v304;
  void **v305;
  std::__shared_weak_count *v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  void *v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  void **v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  void **v318;
  uint64_t result;
  uint64_t v320;
  void **v321;
  std::__shared_weak_count *v322;
  void *v323[2];
  char v324;
  void *v325;
  std::__shared_weak_count *v326;
  void *v327[2];
  char v328;
  void *v329[2];
  char v330;
  void *v331;
  std::__shared_weak_count *v332;
  void *v333[2];
  char v334;
  void *v335[2];
  char v336;
  void *v337;
  std::__shared_weak_count *v338;
  void *v339[2];
  char v340;
  void *v341[2];
  char v342;
  void *v343;
  std::__shared_weak_count *v344;
  void *v345[2];
  char v346;
  void *v347[2];
  char v348;
  void *v349;
  std::__shared_weak_count *v350;
  void *v351[2];
  char v352;
  void *v353[2];
  char v354;
  void *v355;
  std::__shared_weak_count *v356;
  void *v357[2];
  char v358;
  void *v359[2];
  char v360;
  void *v361;
  std::__shared_weak_count *v362;
  void *v363[2];
  char v364;
  void *v365[2];
  char v366;
  void *v367;
  std::__shared_weak_count *v368;
  void *v369[2];
  char v370;
  void *v371[2];
  char v372;
  void *v373;
  std::__shared_weak_count *v374;
  void **v375;
  std::__shared_weak_count *v376;
  void *v377[2];
  char v378;
  void *v379;
  std::__shared_weak_count *v380;
  void *v381[2];
  char v382;
  void *v383[2];
  char v384;
  void *v385;
  std::__shared_weak_count *v386;
  void *v387[2];
  char v388;
  void *v389[2];
  char v390;
  void *v391;
  std::__shared_weak_count *v392;
  void *v393[2];
  char v394;
  void *v395[2];
  char v396;
  void *v397;
  std::__shared_weak_count *v398;
  void *v399[2];
  char v400;
  void *v401[2];
  char v402;
  void *v403;
  std::__shared_weak_count *v404;
  void *v405[2];
  char v406;
  void *v407[2];
  char v408;
  void *v409;
  std::__shared_weak_count *v410;
  __int128 v411;
  __int128 v412;
  void *v413[2];
  uint64_t v414;
  void *v415;
  void *v416;
  _QWORD *v417;
  __n128 v418;
  uint64_t v419;
  __int128 v420;
  char **v421;
  __n128 v422;
  __n128 v423;
  __n128 v424;
  __n128 v425;
  __n128 v426;
  __n128 v427;
  __n128 v428;
  void *__p;
  void *v430;
  _QWORD *v431;
  void *v432;
  void *v433;
  _QWORD *v434;
  void *v435;
  void *v436;
  _QWORD *v437;
  void *v438;
  void *v439;
  _QWORD *v440;
  void *v441;
  void *v442;
  _QWORD *v443;
  void *v444;
  void *v445;
  _QWORD *v446;
  void *v447;
  void *v448;
  _QWORD *v449;
  __n128 v450;
  _QWORD *v451;
  void *v452;
  void *v453;
  char *v454;
  char *v455;
  char **v456;
  _BYTE v457[24];
  _BYTE *v458;
  _BYTE v459[24];
  _BYTE *v460;
  _QWORD v461[3];
  _QWORD *v462;
  void *v463;
  void *v464;
  _QWORD *v465;
  void **v466;
  void **v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;

  v475 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v451 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v454 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v452 = v9;
  v453 = v9 + 16;
  v466 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v452);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v464 = v12 + 2;
  v465 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v463 = v12;
  v467 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v463);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v449 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v447 = v15;
  v448 = v15 + 2;
  v468 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v447);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v446 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v444 = v18;
  v445 = v18 + 2;
  v469 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v444);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v443 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v441 = v21;
  v442 = v21 + 2;
  v470 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v441);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v440 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v438 = v24;
  v439 = v24 + 2;
  v471 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v438);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v437 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v435 = v27;
  v436 = v27 + 2;
  v472 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v435);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v434 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v432 = v30;
  v433 = v30 + 2;
  v473 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v432);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v431 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  __p = v33;
  v430 = v33 + 2;
  v474 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v466, 9, &v450);
  MIL::IRParameter::Make(&v450, (uint64_t *)&v415);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v415);
  v34 = v415;
  v415 = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v450.n128_u64[1];
  if (v450.n128_u64[1])
  {
    v36 = (unint64_t *)(v450.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (__p)
  {
    v430 = __p;
    operator delete(__p);
  }
  if (v432)
  {
    v433 = v432;
    operator delete(v432);
  }
  if (v435)
  {
    v436 = v435;
    operator delete(v435);
  }
  if (v438)
  {
    v439 = v438;
    operator delete(v438);
  }
  if (v441)
  {
    v442 = v441;
    operator delete(v441);
  }
  if (v444)
  {
    v445 = v444;
    operator delete(v444);
  }
  if (v447)
  {
    v448 = v447;
    operator delete(v447);
  }
  if (v463)
  {
    v464 = v463;
    operator delete(v463);
  }
  if (v452)
  {
    v453 = v452;
    operator delete(v452);
  }
  v38 = v451;
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = (char *)operator new(0x10uLL);
  v454 = v41 + 16;
  *(_QWORD *)v41 = v39;
  *((_QWORD *)v41 + 1) = v40;
  v452 = v41;
  v453 = v41 + 16;
  v466 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v452);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(0x10uLL);
  v464 = v44 + 2;
  v465 = v44 + 2;
  *v44 = v42;
  v44[1] = v43;
  v463 = v44;
  v467 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v463);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(0x10uLL);
  v449 = v47 + 2;
  *v47 = v45;
  v47[1] = v46;
  v447 = v47;
  v448 = v47 + 2;
  v468 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v447);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(0x10uLL);
  v446 = v50 + 2;
  *v50 = v48;
  v50[1] = v49;
  v444 = v50;
  v445 = v50 + 2;
  v469 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v444);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(0x10uLL);
  v443 = v53 + 2;
  *v53 = v51;
  v53[1] = v52;
  v441 = v53;
  v442 = v53 + 2;
  v470 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v441);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(0x10uLL);
  v440 = v56 + 2;
  *v56 = v54;
  v56[1] = v55;
  v438 = v56;
  v439 = v56 + 2;
  v471 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v438);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(0x10uLL);
  v437 = v59 + 2;
  *v59 = v57;
  v59[1] = v58;
  v435 = v59;
  v436 = v59 + 2;
  v472 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v435);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(0x10uLL);
  v434 = v62 + 2;
  *v62 = v60;
  v62[1] = v61;
  v432 = v62;
  v433 = v62 + 2;
  v473 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v432);
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(0x10uLL);
  v431 = v65 + 2;
  *v65 = v63;
  v65[1] = v64;
  __p = v65;
  v430 = v65 + 2;
  v474 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v466, 9, &v428);
  MIL::IRParameter::Make(&v428, (uint64_t *)&v415);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v38, "update", (uint64_t *)&v415);
  v66 = v415;
  v415 = 0;
  if (v66)
    (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v428.n128_u64[1];
  if (v428.n128_u64[1])
  {
    v68 = (unint64_t *)(v428.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (__p)
  {
    v430 = __p;
    operator delete(__p);
  }
  if (v432)
  {
    v433 = v432;
    operator delete(v432);
  }
  if (v435)
  {
    v436 = v435;
    operator delete(v435);
  }
  if (v438)
  {
    v439 = v438;
    operator delete(v438);
  }
  if (v441)
  {
    v442 = v441;
    operator delete(v441);
  }
  if (v444)
  {
    v445 = v444;
    operator delete(v444);
  }
  if (v447)
  {
    v448 = v447;
    operator delete(v447);
  }
  if (v463)
  {
    v464 = v463;
    operator delete(v463);
  }
  if (v452)
  {
    v453 = v452;
    operator delete(v452);
  }
  v70 = v451;
  v71 = MIL::IRUnknownDimension::Make(a1, 0);
  v72 = (char *)operator new(8uLL);
  v452 = v72;
  *(_QWORD *)v72 = v71;
  v454 = v72 + 8;
  v453 = v72 + 8;
  v466 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v452);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = operator new(8uLL);
  v463 = v74;
  *v74 = v73;
  v464 = v74 + 1;
  v465 = v74 + 1;
  v467 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v463);
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = operator new(8uLL);
  v447 = v76;
  *v76 = v75;
  v449 = v76 + 1;
  v448 = v76 + 1;
  v468 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v447);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v466, 3, &v427);
  MIL::IRParameter::Make(&v427, (uint64_t *)&v444);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v70, "begin", (uint64_t *)&v444);
  v77 = v444;
  v444 = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = (std::__shared_weak_count *)v427.n128_u64[1];
  if (v427.n128_u64[1])
  {
    v79 = (unint64_t *)(v427.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (v447)
  {
    v448 = v447;
    operator delete(v447);
  }
  if (v463)
  {
    v464 = v463;
    operator delete(v463);
  }
  if (v452)
  {
    v453 = v452;
    operator delete(v452);
  }
  v81 = v451;
  v82 = MIL::IRUnknownDimension::Make(a1, 0);
  v83 = (char *)operator new(8uLL);
  v452 = v83;
  *(_QWORD *)v83 = v82;
  v454 = v83 + 8;
  v453 = v83 + 8;
  v466 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v452);
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = operator new(8uLL);
  v463 = v85;
  *v85 = v84;
  v464 = v85 + 1;
  v465 = v85 + 1;
  v467 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v463);
  v86 = MIL::IRUnknownDimension::Make(a1, 0);
  v87 = operator new(8uLL);
  v447 = v87;
  *v87 = v86;
  v449 = v87 + 1;
  v448 = v87 + 1;
  v468 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v447);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v466, 3, &v426);
  MIL::IRParameter::Make(&v426, (uint64_t *)&v444);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v81, "end", (uint64_t *)&v444);
  v88 = v444;
  v444 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v426.n128_u64[1];
  if (v426.n128_u64[1])
  {
    v90 = (unint64_t *)(v426.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v447)
  {
    v448 = v447;
    operator delete(v447);
  }
  if (v463)
  {
    v464 = v463;
    operator delete(v463);
  }
  if (v452)
  {
    v453 = v452;
    operator delete(v452);
  }
  v92 = v451;
  v93 = MIL::IRUnknownDimension::Make(a1, 0);
  v94 = (char *)operator new(8uLL);
  v452 = v94;
  *(_QWORD *)v94 = v93;
  v454 = v94 + 8;
  v453 = v94 + 8;
  v466 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v452);
  v95 = MIL::IRUnknownDimension::Make(a1, 0);
  v96 = operator new(8uLL);
  v463 = v96;
  *v96 = v95;
  v464 = v96 + 1;
  v465 = v96 + 1;
  v467 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v463);
  v97 = MIL::IRUnknownDimension::Make(a1, 0);
  v98 = operator new(8uLL);
  v447 = v98;
  *v98 = v97;
  v449 = v98 + 1;
  v448 = v98 + 1;
  v468 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v447);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v466, 3, &v425);
  MIL::IRParameter::Make(&v425, (uint64_t *)&v444);
  v99 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v92, "stride", (uint64_t *)&v444);
  v100 = v444;
  v444 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  v101 = (std::__shared_weak_count *)v425.n128_u64[1];
  if (v425.n128_u64[1])
  {
    v102 = (unint64_t *)(v425.n128_u64[1] + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (v447)
  {
    v448 = v447;
    operator delete(v447);
  }
  if (v463)
  {
    v464 = v463;
    operator delete(v463);
  }
  if (v452)
  {
    v453 = v452;
    operator delete(v452);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v99 + 5) + 48))(*((_QWORD *)v99 + 5), 1);
  v104 = v451;
  v105 = MIL::IRUnknownDimension::Make(a1, 0);
  v106 = (void **)operator new(8uLL);
  v466 = v106;
  *v106 = (void *)v105;
  v467 = v106 + 1;
  v468 = (uint64_t)(v106 + 1);
  v463 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v466);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v463, 1, &v424);
  MIL::IRParameter::Make(&v424, (uint64_t *)&v452);
  v107 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v104, "begin_mask", (uint64_t *)&v452);
  v108 = v452;
  v452 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  v109 = (std::__shared_weak_count *)v424.n128_u64[1];
  if (v424.n128_u64[1])
  {
    v110 = (unint64_t *)(v424.n128_u64[1] + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (v466)
  {
    v467 = v466;
    operator delete(v466);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v107 + 5) + 48))(*((_QWORD *)v107 + 5), 1);
  v112 = v451;
  v113 = MIL::IRUnknownDimension::Make(a1, 0);
  v114 = (void **)operator new(8uLL);
  v466 = v114;
  *v114 = (void *)v113;
  v467 = v114 + 1;
  v468 = (uint64_t)(v114 + 1);
  v463 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v466);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v463, 1, &v423);
  MIL::IRParameter::Make(&v423, (uint64_t *)&v452);
  v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v112, "end_mask", (uint64_t *)&v452);
  v116 = v452;
  v452 = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  v117 = (std::__shared_weak_count *)v423.n128_u64[1];
  if (v423.n128_u64[1])
  {
    v118 = (unint64_t *)(v423.n128_u64[1] + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (v466)
  {
    v467 = v466;
    operator delete(v466);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v115 + 5) + 48))(*((_QWORD *)v115 + 5), 1);
  v120 = v451;
  v121 = MIL::IRUnknownDimension::Make(a1, 0);
  v122 = (void **)operator new(8uLL);
  v466 = v122;
  *v122 = (void *)v121;
  v467 = v122 + 1;
  v468 = (uint64_t)(v122 + 1);
  v463 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v466);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v463, 1, &v422);
  MIL::IRParameter::Make(&v422, (uint64_t *)&v452);
  v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v120, "squeeze_mask", (uint64_t *)&v452);
  v124 = v452;
  v452 = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  v125 = (std::__shared_weak_count *)v422.n128_u64[1];
  if (v422.n128_u64[1])
  {
    v126 = (unint64_t *)(v422.n128_u64[1] + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  if (v466)
  {
    v467 = v466;
    operator delete(v466);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v123 + 5) + 48))(*((_QWORD *)v123 + 5), 1);
  v421 = 0;
  v128 = operator new();
  *(_QWORD *)v128 = 0;
  *(_QWORD *)(v128 + 8) = 0;
  *(_QWORD *)(v128 + 16) = 0;
  v466 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v421, (void **)v128);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v466, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v421, 1uLL);
  v129 = v421;
  v130 = MIL::IRUnknownDimension::Make(a1, 0);
  v131 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v132 = operator new(0x10uLL);
  v464 = v132 + 2;
  v465 = v132 + 2;
  *v132 = v130;
  v132[1] = v131;
  v463 = v132;
  v466 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v463);
  v133 = MIL::IRUnknownDimension::Make(a1, 0);
  v134 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v135 = operator new(0x10uLL);
  v449 = v135 + 2;
  *v135 = v133;
  v135[1] = v134;
  v447 = v135;
  v448 = v135 + 2;
  v467 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v447);
  v136 = MIL::IRUnknownDimension::Make(a1, 0);
  v137 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v138 = operator new(0x10uLL);
  v446 = v138 + 2;
  *v138 = v136;
  v138[1] = v137;
  v444 = v138;
  v445 = v138 + 2;
  v468 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v444);
  v139 = MIL::IRUnknownDimension::Make(a1, 0);
  v140 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v141 = operator new(0x10uLL);
  v443 = v141 + 2;
  *v141 = v139;
  v141[1] = v140;
  v441 = v141;
  v442 = v141 + 2;
  v469 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v441);
  v142 = MIL::IRUnknownDimension::Make(a1, 0);
  v143 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v144 = operator new(0x10uLL);
  v440 = v144 + 2;
  *v144 = v142;
  v144[1] = v143;
  v438 = v144;
  v439 = v144 + 2;
  v470 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v438);
  v145 = MIL::IRUnknownDimension::Make(a1, 0);
  v146 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v147 = operator new(0x10uLL);
  v437 = v147 + 2;
  *v147 = v145;
  v147[1] = v146;
  v435 = v147;
  v436 = v147 + 2;
  v471 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v435);
  v148 = MIL::IRUnknownDimension::Make(a1, 0);
  v149 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v150 = operator new(0x10uLL);
  v434 = v150 + 2;
  *v150 = v148;
  v150[1] = v149;
  v432 = v150;
  v433 = v150 + 2;
  v472 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v432);
  v151 = MIL::IRUnknownDimension::Make(a1, 0);
  v152 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v153 = operator new(0x10uLL);
  v431 = v153 + 2;
  *v153 = v151;
  v153[1] = v152;
  __p = v153;
  v430 = v153 + 2;
  v473 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v154 = MIL::IRUnknownDimension::Make(a1, 0);
  v155 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v156 = operator new(0x10uLL);
  v417 = v156 + 2;
  *v156 = v154;
  v156[1] = v155;
  v415 = v156;
  v416 = v156 + 2;
  v474 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v415);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v466, 9, &v418);
  MIL::IRParameter::Make(&v418, &v419);
  *(_QWORD *)&v420 = v419;
  if (v419)
  {
    v157 = (_QWORD *)operator new();
    v158 = v419;
    *v157 = &unk_1EA99F888;
    v157[1] = 0;
    v157[2] = 0;
    v157[3] = v158;
  }
  else
  {
    v157 = 0;
  }
  *((_QWORD *)&v420 + 1) = v157;
  v419 = 0;
  v159 = v129[2];
  v160 = v129[1];
  if (v160 >= v159)
  {
    v161 = (v160 - *v129) >> 4;
    v162 = v161 + 1;
    if ((unint64_t)(v161 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v163 = v159 - *v129;
    if (v163 >> 3 > v162)
      v162 = v163 >> 3;
    if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF0)
      v164 = 0xFFFFFFFFFFFFFFFLL;
    else
      v164 = v162;
    v456 = v129 + 2;
    v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v129 + 2), v164);
    v167 = &v165[16 * v161];
    *(_OWORD *)v167 = v420;
    v420 = 0uLL;
    v169 = *v129;
    v168 = v129[1];
    if (v168 == *v129)
    {
      v172 = v129[1];
      v170 = &v165[16 * v161];
    }
    else
    {
      v170 = &v165[16 * v161];
      do
      {
        v171 = *((_OWORD *)v168 - 1);
        v168 -= 16;
        *((_OWORD *)v170 - 1) = v171;
        v170 -= 16;
        *(_QWORD *)v168 = 0;
        *((_QWORD *)v168 + 1) = 0;
      }
      while (v168 != v169);
      v172 = *v129;
      v168 = v129[1];
    }
    v173 = v167 + 16;
    *v129 = v170;
    v453 = v172;
    v129[1] = v167 + 16;
    v454 = v168;
    v174 = v129[2];
    v129[2] = &v165[16 * v166];
    v455 = v174;
    v452 = v172;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v452);
    v175 = (std::__shared_weak_count *)*((_QWORD *)&v420 + 1);
    v129[1] = v173;
    if (v175)
    {
      p_shared_owners = (unint64_t *)&v175->__shared_owners_;
      do
        v177 = __ldaxr(p_shared_owners);
      while (__stlxr(v177 - 1, p_shared_owners));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
    }
  }
  else
  {
    *(_QWORD *)v160 = v420;
    *((_QWORD *)v160 + 1) = v157;
    v420 = 0uLL;
    v129[1] = v160 + 16;
  }
  v178 = v419;
  v419 = 0;
  if (v178)
    (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
  v179 = (std::__shared_weak_count *)v418.n128_u64[1];
  if (v418.n128_u64[1])
  {
    v180 = (unint64_t *)(v418.n128_u64[1] + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  if (v415)
  {
    v416 = v415;
    operator delete(v415);
  }
  if (__p)
  {
    v430 = __p;
    operator delete(__p);
  }
  if (v432)
  {
    v433 = v432;
    operator delete(v432);
  }
  if (v435)
  {
    v436 = v435;
    operator delete(v435);
  }
  if (v438)
  {
    v439 = v438;
    operator delete(v438);
  }
  if (v441)
  {
    v442 = v441;
    operator delete(v441);
  }
  if (v444)
  {
    v445 = v444;
    operator delete(v444);
  }
  if (v447)
  {
    v448 = v447;
    operator delete(v447);
  }
  if (v463)
  {
    v464 = v463;
    operator delete(v463);
  }
  *(_OWORD *)v413 = *(_OWORD *)a2;
  v414 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v182 = (uint64_t)v451;
  *(_QWORD *)&v412 = v451;
  if (v451)
  {
    v183 = (_QWORD *)operator new();
    *v183 = &unk_1EA99F8E8;
    v183[1] = 0;
    v183[2] = 0;
    v183[3] = v182;
  }
  else
  {
    v183 = 0;
  }
  *((_QWORD *)&v412 + 1) = v183;
  v451 = 0;
  *(_QWORD *)&v411 = v421;
  if (v421)
  {
    v184 = (_QWORD *)operator new();
    v185 = v421;
    *v184 = &unk_1EA99F948;
    v184[1] = 0;
    v184[2] = 0;
    v184[3] = v185;
  }
  else
  {
    v184 = 0;
  }
  *((_QWORD *)&v411 + 1) = v184;
  v421 = 0;
  v461[0] = &unk_1EA99FAC8;
  v461[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateSliceUpdate;
  v462 = v461;
  v460 = 0;
  MIL::IROperator::Make((__int128 *)v413, &v412, &v411, (uint64_t)v461, (uint64_t)v459, a3);
  v186 = v460;
  if (v460 == v459)
  {
    v187 = 4;
    v186 = v459;
  }
  else
  {
    if (!v460)
      goto LABEL_174;
    v187 = 5;
  }
  (*(void (**)(void))(*v186 + 8 * v187))();
LABEL_174:
  v188 = v462;
  if (v462 == v461)
  {
    v189 = 4;
    v188 = v461;
    goto LABEL_178;
  }
  if (v462)
  {
    v189 = 5;
LABEL_178:
    (*(void (**)(void))(*v188 + 8 * v189))();
  }
  v190 = (std::__shared_weak_count *)*((_QWORD *)&v411 + 1);
  if (*((_QWORD *)&v411 + 1))
  {
    v191 = (unint64_t *)(*((_QWORD *)&v411 + 1) + 8);
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
  if (*((_QWORD *)&v412 + 1))
  {
    v194 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  if (SHIBYTE(v414) < 0)
    operator delete(v413[0]);
  v196 = *a3;
  v197 = std::string::basic_string[abi:ne180100]<0>(&v466, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v197, (uint64_t)v457);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v196 + 200))(v196, v457);
  v198 = v458;
  if (v458 == v457)
  {
    v199 = 4;
    v198 = v457;
  }
  else
  {
    if (!v458)
      goto LABEL_196;
    v199 = 5;
  }
  (*(void (**)(void))(*v198 + 8 * v199))();
LABEL_196:
  if (SHIBYTE(v468) < 0)
    operator delete(v466);
  MIL::Validation::TensorDTypeConstraints::Make(&v466);
  v200 = v466;
  std::string::basic_string[abi:ne180100]<0>(v407, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v407, 0, (uint64_t *)&v452);
  v409 = v452;
  if (v452)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = (std::__shared_weak_count_vtbl *)v452;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = v202;
  }
  else
  {
    v201 = 0;
  }
  v410 = v201;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v405, "T");
  (*((void (**)(void **, void **, void **))*v200 + 3))(v200, &v409, v405);
  if (v406 < 0)
    operator delete(v405[0]);
  v203 = v410;
  if (v410)
  {
    v204 = (unint64_t *)&v410->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v452;
  v452 = 0;
  if (v206)
    (*(void (**)(void *))(*(_QWORD *)v206 + 8))(v206);
  if (v408 < 0)
    operator delete(v407[0]);
  v207 = v466;
  std::string::basic_string[abi:ne180100]<0>(v401, "update");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v401, 0, (uint64_t *)&v452);
  v403 = v452;
  if (v452)
  {
    v208 = (std::__shared_weak_count *)operator new();
    v209 = (std::__shared_weak_count_vtbl *)v452;
    v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v208->__shared_owners_ = 0;
    v208->__shared_weak_owners_ = 0;
    v208[1].__vftable = v209;
  }
  else
  {
    v208 = 0;
  }
  v404 = v208;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v399, "T");
  (*((void (**)(void **, void **, void **))*v207 + 3))(v207, &v403, v399);
  if (v400 < 0)
    operator delete(v399[0]);
  v210 = v404;
  if (v404)
  {
    v211 = (unint64_t *)&v404->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = v452;
  v452 = 0;
  if (v213)
    (*(void (**)(void *))(*(_QWORD *)v213 + 8))(v213);
  if (v402 < 0)
    operator delete(v401[0]);
  v214 = v466;
  std::string::basic_string[abi:ne180100]<0>(v395, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v395, 0, (uint64_t *)&v452);
  v397 = v452;
  if (v452)
  {
    v215 = (std::__shared_weak_count *)operator new();
    v216 = (std::__shared_weak_count_vtbl *)v452;
    v215->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v215->__shared_owners_ = 0;
    v215->__shared_weak_owners_ = 0;
    v215[1].__vftable = v216;
  }
  else
  {
    v215 = 0;
  }
  v398 = v215;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v393, "U");
  (*((void (**)(void **, void **, void **))*v214 + 3))(v214, &v397, v393);
  if (v394 < 0)
    operator delete(v393[0]);
  v217 = v398;
  if (v398)
  {
    v218 = (unint64_t *)&v398->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = v452;
  v452 = 0;
  if (v220)
    (*(void (**)(void *))(*(_QWORD *)v220 + 8))(v220);
  if (v396 < 0)
    operator delete(v395[0]);
  v221 = v466;
  std::string::basic_string[abi:ne180100]<0>(v389, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v389, 0, (uint64_t *)&v452);
  v391 = v452;
  if (v452)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = (std::__shared_weak_count_vtbl *)v452;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v392 = v222;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v387, "U");
  (*((void (**)(void **, void **, void **))*v221 + 3))(v221, &v391, v387);
  if (v388 < 0)
    operator delete(v387[0]);
  v224 = v392;
  if (v392)
  {
    v225 = (unint64_t *)&v392->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = v452;
  v452 = 0;
  if (v227)
    (*(void (**)(void *))(*(_QWORD *)v227 + 8))(v227);
  if (v390 < 0)
    operator delete(v389[0]);
  v228 = v466;
  std::string::basic_string[abi:ne180100]<0>(v383, "stride");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v383, 1, (uint64_t *)&v452);
  v385 = v452;
  if (v452)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = (std::__shared_weak_count_vtbl *)v452;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v386 = v229;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v381, "U");
  (*((void (**)(void **, void **, void **))*v228 + 3))(v228, &v385, v381);
  if (v382 < 0)
    operator delete(v381[0]);
  v231 = v386;
  if (v386)
  {
    v232 = (unint64_t *)&v386->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = v452;
  v452 = 0;
  if (v234)
    (*(void (**)(void *))(*(_QWORD *)v234 + 8))(v234);
  if (v384 < 0)
    operator delete(v383[0]);
  v235 = v466;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v452);
  v379 = v452;
  if (v452)
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = (std::__shared_weak_count_vtbl *)v452;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = v237;
  }
  else
  {
    v236 = 0;
  }
  v380 = v236;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v377, "T");
  (*((void (**)(void **, void **, void **))*v235 + 3))(v235, &v379, v377);
  if (v378 < 0)
    operator delete(v377[0]);
  v238 = v380;
  if (v380)
  {
    v239 = (unint64_t *)&v380->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = v452;
  v452 = 0;
  if (v241)
    (*(void (**)(void *))(*(_QWORD *)v241 + 8))(v241);
  v242 = *a3;
  v375 = v466;
  if (v466)
  {
    v243 = (std::__shared_weak_count *)operator new();
    v244 = v466;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v243->__shared_owners_ = 0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = (std::__shared_weak_count_vtbl *)v244;
  }
  else
  {
    v243 = 0;
  }
  v376 = v243;
  v466 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v242 + 56))(v242, &v375);
  v245 = v376;
  if (v376)
  {
    v246 = (unint64_t *)&v376->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = v466;
  v466 = 0;
  if (v248)
    (*((void (**)(void **))*v248 + 1))(v248);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v466);
  v249 = v466;
  std::string::basic_string[abi:ne180100]<0>(v371, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v371, 0, (uint64_t *)&v452);
  v373 = v452;
  if (v452)
  {
    v250 = (std::__shared_weak_count *)operator new();
    v251 = (std::__shared_weak_count_vtbl *)v452;
    v250->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v250->__shared_owners_ = 0;
    v250->__shared_weak_owners_ = 0;
    v250[1].__vftable = v251;
  }
  else
  {
    v250 = 0;
  }
  v374 = v250;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v369, "D");
  (*((void (**)(void **, void **, void **))*v249 + 5))(v249, &v373, v369);
  if (v370 < 0)
    operator delete(v369[0]);
  v252 = v374;
  if (v374)
  {
    v253 = (unint64_t *)&v374->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = v452;
  v452 = 0;
  if (v255)
    (*(void (**)(void *))(*(_QWORD *)v255 + 8))(v255);
  if (v372 < 0)
    operator delete(v371[0]);
  v256 = v466;
  std::string::basic_string[abi:ne180100]<0>(v365, "update");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v365, 0, (uint64_t *)&v452);
  v367 = v452;
  if (v452)
  {
    v257 = (std::__shared_weak_count *)operator new();
    v258 = (std::__shared_weak_count_vtbl *)v452;
    v257->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v257->__shared_owners_ = 0;
    v257->__shared_weak_owners_ = 0;
    v257[1].__vftable = v258;
  }
  else
  {
    v257 = 0;
  }
  v368 = v257;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v363, "K");
  (*((void (**)(void **, void **, void **))*v256 + 5))(v256, &v367, v363);
  if (v364 < 0)
    operator delete(v363[0]);
  v259 = v368;
  if (v368)
  {
    v260 = (unint64_t *)&v368->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v262 = v452;
  v452 = 0;
  if (v262)
    (*(void (**)(void *))(*(_QWORD *)v262 + 8))(v262);
  if (v366 < 0)
    operator delete(v365[0]);
  v263 = v466;
  std::string::basic_string[abi:ne180100]<0>(v359, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v359, 0, (uint64_t *)&v452);
  v361 = v452;
  if (v452)
  {
    v264 = (std::__shared_weak_count *)operator new();
    v265 = (std::__shared_weak_count_vtbl *)v452;
    v264->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v264->__shared_owners_ = 0;
    v264->__shared_weak_owners_ = 0;
    v264[1].__vftable = v265;
  }
  else
  {
    v264 = 0;
  }
  v362 = v264;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v357, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v263 + 3))(v263, &v361, 0, v357);
  if (v358 < 0)
    operator delete(v357[0]);
  v266 = v362;
  if (v362)
  {
    v267 = (unint64_t *)&v362->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v269 = v452;
  v452 = 0;
  if (v269)
    (*(void (**)(void *))(*(_QWORD *)v269 + 8))(v269);
  if (v360 < 0)
    operator delete(v359[0]);
  v270 = v466;
  std::string::basic_string[abi:ne180100]<0>(v353, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v353, 0, (uint64_t *)&v452);
  v355 = v452;
  if (v452)
  {
    v271 = (std::__shared_weak_count *)operator new();
    v272 = (std::__shared_weak_count_vtbl *)v452;
    v271->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v271->__shared_owners_ = 0;
    v271->__shared_weak_owners_ = 0;
    v271[1].__vftable = v272;
  }
  else
  {
    v271 = 0;
  }
  v356 = v271;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v351, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v270 + 3))(v270, &v355, 0, v351);
  if (v352 < 0)
    operator delete(v351[0]);
  v273 = v356;
  if (v356)
  {
    v274 = (unint64_t *)&v356->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  v276 = v452;
  v452 = 0;
  if (v276)
    (*(void (**)(void *))(*(_QWORD *)v276 + 8))(v276);
  if (v354 < 0)
    operator delete(v353[0]);
  v277 = v466;
  std::string::basic_string[abi:ne180100]<0>(v347, "stride");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v347, 1, (uint64_t *)&v452);
  v349 = v452;
  if (v452)
  {
    v278 = (std::__shared_weak_count *)operator new();
    v279 = (std::__shared_weak_count_vtbl *)v452;
    v278->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v278->__shared_owners_ = 0;
    v278->__shared_weak_owners_ = 0;
    v278[1].__vftable = v279;
  }
  else
  {
    v278 = 0;
  }
  v350 = v278;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v345, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v277 + 3))(v277, &v349, 0, v345);
  if (v346 < 0)
    operator delete(v345[0]);
  v280 = v350;
  if (v350)
  {
    v281 = (unint64_t *)&v350->__shared_owners_;
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  v283 = v452;
  v452 = 0;
  if (v283)
    (*(void (**)(void *))(*(_QWORD *)v283 + 8))(v283);
  if (v348 < 0)
    operator delete(v347[0]);
  v284 = v466;
  std::string::basic_string[abi:ne180100]<0>(v341, "begin_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v341, 1, (uint64_t *)&v452);
  v343 = v452;
  if (v452)
  {
    v285 = (std::__shared_weak_count *)operator new();
    v286 = (std::__shared_weak_count_vtbl *)v452;
    v285->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v285->__shared_owners_ = 0;
    v285->__shared_weak_owners_ = 0;
    v285[1].__vftable = v286;
  }
  else
  {
    v285 = 0;
  }
  v344 = v285;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v339, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v284 + 3))(v284, &v343, 0, v339);
  if (v340 < 0)
    operator delete(v339[0]);
  v287 = v344;
  if (v344)
  {
    v288 = (unint64_t *)&v344->__shared_owners_;
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }
  v290 = v452;
  v452 = 0;
  if (v290)
    (*(void (**)(void *))(*(_QWORD *)v290 + 8))(v290);
  if (v342 < 0)
    operator delete(v341[0]);
  v291 = v466;
  std::string::basic_string[abi:ne180100]<0>(v335, "end_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v335, 1, (uint64_t *)&v452);
  v337 = v452;
  if (v452)
  {
    v292 = (std::__shared_weak_count *)operator new();
    v293 = (std::__shared_weak_count_vtbl *)v452;
    v292->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v292->__shared_owners_ = 0;
    v292->__shared_weak_owners_ = 0;
    v292[1].__vftable = v293;
  }
  else
  {
    v292 = 0;
  }
  v338 = v292;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v333, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v291 + 3))(v291, &v337, 0, v333);
  if (v334 < 0)
    operator delete(v333[0]);
  v294 = v338;
  if (v338)
  {
    v295 = (unint64_t *)&v338->__shared_owners_;
    do
      v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }
  v297 = v452;
  v452 = 0;
  if (v297)
    (*(void (**)(void *))(*(_QWORD *)v297 + 8))(v297);
  if (v336 < 0)
    operator delete(v335[0]);
  v298 = v466;
  std::string::basic_string[abi:ne180100]<0>(v329, "squeeze_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v329, 1, (uint64_t *)&v452);
  v331 = v452;
  if (v452)
  {
    v299 = (std::__shared_weak_count *)operator new();
    v300 = (std::__shared_weak_count_vtbl *)v452;
    v299->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v299->__shared_owners_ = 0;
    v299->__shared_weak_owners_ = 0;
    v299[1].__vftable = v300;
  }
  else
  {
    v299 = 0;
  }
  v332 = v299;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v327, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v298 + 3))(v298, &v331, 0, v327);
  if (v328 < 0)
    operator delete(v327[0]);
  v301 = v332;
  if (v332)
  {
    v302 = (unint64_t *)&v332->__shared_owners_;
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  v304 = v452;
  v452 = 0;
  if (v304)
    (*(void (**)(void *))(*(_QWORD *)v304 + 8))(v304);
  if (v330 < 0)
    operator delete(v329[0]);
  v305 = v466;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v452);
  v325 = v452;
  if (v452)
  {
    v306 = (std::__shared_weak_count *)operator new();
    v307 = (std::__shared_weak_count_vtbl *)v452;
    v306->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v306->__shared_owners_ = 0;
    v306->__shared_weak_owners_ = 0;
    v306[1].__vftable = v307;
  }
  else
  {
    v306 = 0;
  }
  v326 = v306;
  v452 = 0;
  std::string::basic_string[abi:ne180100]<0>(v323, "D");
  (*((void (**)(void **, void **, void **))*v305 + 5))(v305, &v325, v323);
  if (v324 < 0)
    operator delete(v323[0]);
  v308 = v326;
  if (v326)
  {
    v309 = (unint64_t *)&v326->__shared_owners_;
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  v311 = v452;
  v452 = 0;
  if (v311)
    (*(void (**)(void *))(*(_QWORD *)v311 + 8))(v311);
  v312 = *a3;
  v321 = v466;
  if (v466)
  {
    v313 = (std::__shared_weak_count *)operator new();
    v314 = v466;
    v313->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v313->__shared_owners_ = 0;
    v313->__shared_weak_owners_ = 0;
    v313[1].__vftable = (std::__shared_weak_count_vtbl *)v314;
  }
  else
  {
    v313 = 0;
  }
  v322 = v313;
  v466 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v312 + 56))(v312, &v321);
  v315 = v322;
  if (v322)
  {
    v316 = (unint64_t *)&v322->__shared_owners_;
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  v318 = v466;
  v466 = 0;
  if (v318)
    (*((void (**)(void **))*v318 + 1))(v318);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v421, 0);
  result = (uint64_t)v451;
  if (v451)
  {
    v320 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v451);
    return MEMORY[0x1E0C023A0](v320, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A1B6FC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 144);
  *(_QWORD *)(v2 - 144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x438], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x568], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::SlidingWindows::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  void **v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char **v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  __int128 v90;
  char *v91;
  char *v92;
  char *v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  char **v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  char *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void **v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  void **v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void **v152;
  uint64_t result;
  uint64_t v154;
  void **v155;
  std::__shared_weak_count *v156;
  void *v157[2];
  char v158;
  void *v159[2];
  char v160;
  char *v161;
  std::__shared_weak_count *v162;
  void **v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  char *v167;
  std::__shared_weak_count *v168;
  void *v169[2];
  char v170;
  void *v171[2];
  char v172;
  char *v173;
  std::__shared_weak_count *v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  void *v179;
  void *v180;
  _QWORD *v181;
  __n128 v182;
  uint64_t v183;
  __int128 v184;
  char **v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  void *__p;
  void *v190;
  _QWORD *v191;
  void *v192;
  void *v193;
  _QWORD *v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  void *v204;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  void *v210;
  void *v211;
  _QWORD *v212;
  __n128 v213;
  _QWORD *v214;
  _QWORD v215[3];
  _QWORD *v216;
  _BYTE v217[24];
  _BYTE *v218;
  _QWORD v219[3];
  _QWORD *v220;
  void **v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *Scalar;
  char *v231;
  char *v232;
  char *v233;
  char **v234;
  uint64_t v235;

  v235 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v214 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v231 = v9 + 16;
  v232 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = v9;
  v221 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v212 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v210 = v12;
  v211 = v12 + 2;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v210);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v209 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v207 = v15;
  v208 = v15 + 2;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v207);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v206 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v204 = v18;
  v205 = v18 + 2;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v204);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v202 = v21 + 2;
  v203 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v201 = v21;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v201);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v199 = v24 + 2;
  v200 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v198 = v24;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v198);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v196 = v27 + 2;
  v197 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v195 = v27;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v195);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v193 = v30 + 2;
  v194 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v192 = v30;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v192);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v190 = v33 + 2;
  v191 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  __p = v33;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v221, 9, &v213);
  MIL::IRParameter::Make(&v213, (uint64_t *)&v179);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v179);
  v34 = v179;
  v179 = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v213.n128_u64[1];
  if (v213.n128_u64[1])
  {
    v36 = (unint64_t *)(v213.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (__p)
  {
    v190 = __p;
    operator delete(__p);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (Scalar)
  {
    v231 = Scalar;
    operator delete(Scalar);
  }
  v38 = v214;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v188);
  MIL::IRParameter::Make(&v188, (uint64_t *)&v221);
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v38, "axis", (uint64_t *)&v221);
  v40 = v221;
  v221 = 0;
  if (v40)
    (*((void (**)(void **))*v40 + 1))(v40);
  v41 = (std::__shared_weak_count *)v188.n128_u64[1];
  if (v188.n128_u64[1])
  {
    v42 = (unint64_t *)(v188.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  v44 = v214;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v187);
  MIL::IRParameter::Make(&v187, (uint64_t *)&v221);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v44, "size", (uint64_t *)&v221);
  v46 = v221;
  v221 = 0;
  if (v46)
    (*((void (**)(void **))*v46 + 1))(v46);
  v47 = (std::__shared_weak_count *)v187.n128_u64[1];
  if (v187.n128_u64[1])
  {
    v48 = (unint64_t *)(v187.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v50 = v214;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v186);
  MIL::IRParameter::Make(&v186, (uint64_t *)&v221);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v50, "stride", (uint64_t *)&v221);
  v52 = v221;
  v221 = 0;
  if (v52)
    (*((void (**)(void **))*v52 + 1))(v52);
  v53 = (std::__shared_weak_count *)v186.n128_u64[1];
  if (v186.n128_u64[1])
  {
    v54 = (unint64_t *)(v186.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v185 = 0;
  v56 = operator new();
  *(_QWORD *)v56 = 0;
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v56 + 16) = 0;
  v221 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v185, (void **)v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v221, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v185, 1uLL);
  v57 = v185;
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(8uLL);
  v210 = v59;
  *v59 = v58;
  v212 = v59 + 1;
  v211 = v59 + 1;
  v221 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v210);
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  v207 = v61;
  *v61 = v60;
  v209 = v61 + 1;
  v208 = v61 + 1;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v207);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  v204 = v63;
  *v63 = v62;
  v206 = v63 + 1;
  v205 = v63 + 1;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v204);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  v201 = v65;
  *v65 = v64;
  v202 = v65 + 1;
  v203 = v65 + 1;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v201);
  v66 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v67 = operator new(8uLL);
  v198 = v67;
  *v67 = v66;
  v199 = v67 + 1;
  v200 = v67 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v198);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(8uLL);
  v195 = v69;
  *v69 = v68;
  v196 = v69 + 1;
  v197 = v69 + 1;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v195);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(8uLL);
  v192 = v71;
  *v71 = v70;
  v193 = v71 + 1;
  v194 = v71 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v192);
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(8uLL);
  __p = v73;
  *v73 = v72;
  v190 = v73 + 1;
  v191 = v73 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  v179 = v75;
  *v75 = v74;
  v180 = v75 + 1;
  v181 = v75 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v179);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v221, 9, &v182);
  MIL::IRParameter::Make(&v182, &v183);
  *(_QWORD *)&v184 = v183;
  if (v183)
  {
    v76 = (_QWORD *)operator new();
    v77 = v183;
    *v76 = &unk_1EA99F888;
    v76[1] = 0;
    v76[2] = 0;
    v76[3] = v77;
  }
  else
  {
    v76 = 0;
  }
  *((_QWORD *)&v184 + 1) = v76;
  v183 = 0;
  v78 = v57[2];
  v79 = v57[1];
  if (v79 >= v78)
  {
    v80 = (v79 - *v57) >> 4;
    v81 = v80 + 1;
    if ((unint64_t)(v80 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v82 = v78 - *v57;
    if (v82 >> 3 > v81)
      v81 = v82 >> 3;
    if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0)
      v83 = 0xFFFFFFFFFFFFFFFLL;
    else
      v83 = v81;
    v234 = v57 + 2;
    v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v57 + 2), v83);
    v86 = &v84[16 * v80];
    *(_OWORD *)v86 = v184;
    v184 = 0uLL;
    v88 = *v57;
    v87 = v57[1];
    if (v87 == *v57)
    {
      v91 = v57[1];
      v89 = &v84[16 * v80];
    }
    else
    {
      v89 = &v84[16 * v80];
      do
      {
        v90 = *((_OWORD *)v87 - 1);
        v87 -= 16;
        *((_OWORD *)v89 - 1) = v90;
        v89 -= 16;
        *(_QWORD *)v87 = 0;
        *((_QWORD *)v87 + 1) = 0;
      }
      while (v87 != v88);
      v91 = *v57;
      v87 = v57[1];
    }
    v92 = v86 + 16;
    *v57 = v89;
    Scalar = v91;
    v231 = v91;
    v57[1] = v86 + 16;
    v232 = v87;
    v93 = v57[2];
    v57[2] = &v84[16 * v85];
    v233 = v93;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
    v94 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
    v57[1] = v92;
    if (v94)
    {
      p_shared_owners = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldaxr(p_shared_owners);
      while (__stlxr(v96 - 1, p_shared_owners));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
  }
  else
  {
    *(_QWORD *)v79 = v184;
    *((_QWORD *)v79 + 1) = v76;
    v184 = 0uLL;
    v57[1] = v79 + 16;
  }
  v97 = v183;
  v183 = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = (std::__shared_weak_count *)v182.n128_u64[1];
  if (v182.n128_u64[1])
  {
    v99 = (unint64_t *)(v182.n128_u64[1] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (v179)
  {
    v180 = v179;
    operator delete(v179);
  }
  if (__p)
  {
    v190 = __p;
    operator delete(__p);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  v177 = *(_OWORD *)a2;
  v178 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v101 = (uint64_t)v214;
  *(_QWORD *)&v176 = v214;
  if (v214)
  {
    v102 = (_QWORD *)operator new();
    *v102 = &unk_1EA99F8E8;
    v102[1] = 0;
    v102[2] = 0;
    v102[3] = v101;
  }
  else
  {
    v102 = 0;
  }
  *((_QWORD *)&v176 + 1) = v102;
  v214 = 0;
  *(_QWORD *)&v175 = v185;
  if (v185)
  {
    v103 = (_QWORD *)operator new();
    v104 = v185;
    *v103 = &unk_1EA99F948;
    v103[1] = 0;
    v103[2] = 0;
    v103[3] = v104;
  }
  else
  {
    v103 = 0;
  }
  *((_QWORD *)&v175 + 1) = v103;
  v185 = 0;
  v219[0] = &unk_1EA99FAC8;
  v219[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateSlidingWindows;
  v220 = v219;
  v218 = 0;
  MIL::IROperator::Make(&v177, &v176, &v175, (uint64_t)v219, (uint64_t)v217, a3);
  v105 = v218;
  if (v218 == v217)
  {
    v106 = 4;
    v105 = v217;
  }
  else
  {
    if (!v218)
      goto LABEL_104;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_104:
  v107 = v220;
  if (v220 == v219)
  {
    v108 = 4;
    v107 = v219;
    goto LABEL_108;
  }
  if (v220)
  {
    v108 = 5;
LABEL_108:
    (*(void (**)(void))(*v107 + 8 * v108))();
  }
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if (SHIBYTE(v178) < 0)
    operator delete((void *)v177);
  v115 = *a3;
  v215[0] = &off_1EA99FBD8;
  v215[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSlidingWindows;
  v216 = v215;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v115 + 200))(v115, v215);
  v116 = v216;
  if (v216 == v215)
  {
    v117 = 4;
    v116 = v215;
  }
  else
  {
    if (!v216)
      goto LABEL_126;
    v117 = 5;
  }
  (*(void (**)(void))(*v116 + 8 * v117))();
LABEL_126:
  MIL::Validation::TensorDTypeConstraints::Make(&v221);
  v118 = v221;
  std::string::basic_string[abi:ne180100]<0>(v171, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v171, 0, (uint64_t *)&Scalar);
  v173 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v174 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v169, "T");
  (*((void (**)(void **, char **, void **))*v118 + 3))(v118, &v173, v169);
  if (v170 < 0)
    operator delete(v169[0]);
  v121 = v174;
  if (v174)
  {
    v122 = (unint64_t *)&v174->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*(void (**)(char *))(*(_QWORD *)v124 + 8))(v124);
  if (v172 < 0)
    operator delete(v171[0]);
  v125 = v221;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v167 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v168 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "T");
  (*((void (**)(void **, char **, void **))*v125 + 3))(v125, &v167, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v128 = v168;
  if (v168)
  {
    v129 = (unint64_t *)&v168->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*(void (**)(char *))(*(_QWORD *)v131 + 8))(v131);
  v132 = *a3;
  v163 = v221;
  if (v221)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v221;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v164 = v133;
  v221 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v163);
  v135 = v164;
  if (v164)
  {
    v136 = (unint64_t *)&v164->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v221;
  v221 = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v221);
  v139 = v221;
  std::string::basic_string[abi:ne180100]<0>(v159, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v159, 0, (uint64_t *)&Scalar);
  v161 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = (std::__shared_weak_count_vtbl *)Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v162 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v157, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v139 + 3))(v139, &v161, 0, v157);
  if (v158 < 0)
    operator delete(v157[0]);
  v142 = v162;
  if (v162)
  {
    v143 = (unint64_t *)&v162->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*(void (**)(char *))(*(_QWORD *)v145 + 8))(v145);
  if (v160 < 0)
    operator delete(v159[0]);
  v146 = *a3;
  v155 = v221;
  if (v221)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = v221;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = (std::__shared_weak_count_vtbl *)v148;
  }
  else
  {
    v147 = 0;
  }
  v156 = v147;
  v221 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v146 + 56))(v146, &v155);
  v149 = v156;
  if (v156)
  {
    v150 = (unint64_t *)&v156->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v221;
  v221 = 0;
  if (v152)
    (*((void (**)(void **))*v152 + 1))(v152);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v185, 0);
  result = (uint64_t)v214;
  if (v214)
  {
    v154 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v214);
    return MEMORY[0x1E0C023A0](v154, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A1D4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void **a52)
{
  uint64_t *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;

  v55 = *(_QWORD *)(v53 - 184);
  *(_QWORD *)(v53 - 184) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *v52;
  *v52 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x260], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Squeeze::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void **v40;
  unsigned __int8 *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  char *v81;
  char *v82;
  char *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  char **v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void **v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void **v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  void **v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  void **v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  void **v149;
  uint64_t result;
  uint64_t v151;
  void **v152;
  std::__shared_weak_count *v153;
  void *v154[2];
  char v155;
  void *v156[2];
  char v157;
  void *v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  void *v162[2];
  char v163;
  void *v164;
  std::__shared_weak_count *v165;
  void **v166;
  std::__shared_weak_count *v167;
  void *v168[2];
  char v169;
  void *v170;
  std::__shared_weak_count *v171;
  void *v172[2];
  char v173;
  void *v174[2];
  char v175;
  void *v176;
  std::__shared_weak_count *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  void *v182;
  void *v183;
  _QWORD *v184;
  __n128 v185;
  uint64_t v186;
  __int128 v187;
  char **v188;
  __n128 v189;
  void *__p;
  void *v191;
  _QWORD *v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  void *v199;
  void *v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  _QWORD *v204;
  void *v205;
  void *v206;
  _QWORD *v207;
  void *v208;
  void *v209;
  _QWORD *v210;
  __n128 v211;
  _QWORD *v212;
  void *v213;
  void *v214;
  char *v215;
  char *v216;
  char **v217;
  _QWORD v218[3];
  _QWORD *v219;
  _BYTE v220[24];
  _BYTE *v221;
  _QWORD v222[3];
  _QWORD *v223;
  void *v224;
  void *v225;
  _QWORD *v226;
  void **v227;
  void **v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;

  v236 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v212 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v215 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v213 = v9;
  v214 = v9 + 16;
  v227 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v213);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v225 = v12 + 2;
  v226 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v224 = v12;
  v228 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v224);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v210 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v208 = v15;
  v209 = v15 + 2;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v208);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v207 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v205 = v18;
  v206 = v18 + 2;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v205);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v204 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v202 = v21;
  v203 = v21 + 2;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v202);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v201 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v199 = v24;
  v200 = v24 + 2;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v199);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v197 = v27 + 2;
  v198 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v196 = v27;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v196);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v194 = v30 + 2;
  v195 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v193 = v30;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v193);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v191 = v33 + 2;
  v192 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  __p = v33;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v227, 9, &v211);
  MIL::IRParameter::Make(&v211, (uint64_t *)&v182);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v182);
  v34 = v182;
  v182 = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v211.n128_u64[1];
  if (v211.n128_u64[1])
  {
    v36 = (unint64_t *)(v211.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (__p)
  {
    v191 = __p;
    operator delete(__p);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  v38 = v212;
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (void **)operator new(8uLL);
  v227 = v40;
  *v40 = (void *)v39;
  v228 = v40 + 1;
  v229 = (uint64_t)(v40 + 1);
  v224 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v227);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v224, 1, &v189);
  MIL::IRParameter::Make(&v189, (uint64_t *)&v213);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v38, "axes", (uint64_t *)&v213);
  v42 = v213;
  v213 = 0;
  if (v42)
    (*(void (**)(void *))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v189.n128_u64[1];
  if (v189.n128_u64[1])
  {
    v44 = (unint64_t *)(v189.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 48))(*((_QWORD *)v41 + 5), 1);
  v188 = 0;
  v46 = operator new();
  *(_QWORD *)v46 = 0;
  *(_QWORD *)(v46 + 8) = 0;
  *(_QWORD *)(v46 + 16) = 0;
  v227 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v188, (void **)v46);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v227, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v188, 1uLL);
  v47 = v188;
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v224 = v49;
  *v49 = v48;
  v225 = v49 + 1;
  v226 = v49 + 1;
  v227 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v224);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  v208 = v51;
  *v51 = v50;
  v210 = v51 + 1;
  v209 = v51 + 1;
  v228 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v208);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  v205 = v53;
  *v53 = v52;
  v207 = v53 + 1;
  v206 = v53 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v205);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(8uLL);
  v202 = v55;
  *v55 = v54;
  v204 = v55 + 1;
  v203 = v55 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v202);
  v56 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v57 = operator new(8uLL);
  v199 = v57;
  *v57 = v56;
  v201 = v57 + 1;
  v200 = v57 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v199);
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(8uLL);
  v196 = v59;
  *v59 = v58;
  v197 = v59 + 1;
  v198 = v59 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v196);
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  v193 = v61;
  *v61 = v60;
  v194 = v61 + 1;
  v195 = v61 + 1;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v193);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  __p = v63;
  *v63 = v62;
  v191 = v63 + 1;
  v192 = v63 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  v182 = v65;
  *v65 = v64;
  v183 = v65 + 1;
  v184 = v65 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v182);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v227, 9, &v185);
  MIL::IRParameter::Make(&v185, &v186);
  *(_QWORD *)&v187 = v186;
  if (v186)
  {
    v66 = (_QWORD *)operator new();
    v67 = v186;
    *v66 = &unk_1EA99F888;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v187 + 1) = v66;
  v186 = 0;
  v68 = v47[2];
  v69 = v47[1];
  if (v69 >= v68)
  {
    v70 = (v69 - *v47) >> 4;
    v71 = v70 + 1;
    if ((unint64_t)(v70 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v72 = v68 - *v47;
    if (v72 >> 3 > v71)
      v71 = v72 >> 3;
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
      v73 = 0xFFFFFFFFFFFFFFFLL;
    else
      v73 = v71;
    v217 = v47 + 2;
    v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v47 + 2), v73);
    v76 = &v74[16 * v70];
    *(_OWORD *)v76 = v187;
    v187 = 0uLL;
    v78 = *v47;
    v77 = v47[1];
    if (v77 == *v47)
    {
      v81 = v47[1];
      v79 = &v74[16 * v70];
    }
    else
    {
      v79 = &v74[16 * v70];
      do
      {
        v80 = *((_OWORD *)v77 - 1);
        v77 -= 16;
        *((_OWORD *)v79 - 1) = v80;
        v79 -= 16;
        *(_QWORD *)v77 = 0;
        *((_QWORD *)v77 + 1) = 0;
      }
      while (v77 != v78);
      v81 = *v47;
      v77 = v47[1];
    }
    v82 = v76 + 16;
    *v47 = v79;
    v214 = v81;
    v47[1] = v76 + 16;
    v215 = v77;
    v83 = v47[2];
    v47[2] = &v74[16 * v75];
    v216 = v83;
    v213 = v81;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v213);
    v84 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
    v47[1] = v82;
    if (v84)
    {
      p_shared_owners = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(p_shared_owners);
      while (__stlxr(v86 - 1, p_shared_owners));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
  }
  else
  {
    *(_QWORD *)v69 = v187;
    *((_QWORD *)v69 + 1) = v66;
    v187 = 0uLL;
    v47[1] = v69 + 16;
  }
  v87 = v186;
  v186 = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v89 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  if (__p)
  {
    v191 = __p;
    operator delete(__p);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  v180 = *(_OWORD *)a2;
  v181 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v91 = (uint64_t)v212;
  *(_QWORD *)&v179 = v212;
  if (v212)
  {
    v92 = (_QWORD *)operator new();
    *v92 = &unk_1EA99F8E8;
    v92[1] = 0;
    v92[2] = 0;
    v92[3] = v91;
  }
  else
  {
    v92 = 0;
  }
  *((_QWORD *)&v179 + 1) = v92;
  v212 = 0;
  *(_QWORD *)&v178 = v188;
  if (v188)
  {
    v93 = (_QWORD *)operator new();
    v94 = v188;
    *v93 = &unk_1EA99F948;
    v93[1] = 0;
    v93[2] = 0;
    v93[3] = v94;
  }
  else
  {
    v93 = 0;
  }
  *((_QWORD *)&v178 + 1) = v93;
  v188 = 0;
  v222[0] = &unk_1EA99FAC8;
  v222[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateSqueeze;
  v223 = v222;
  v221 = 0;
  MIL::IROperator::Make(&v180, &v179, &v178, (uint64_t)v222, (uint64_t)v220, a3);
  v95 = v221;
  if (v221 == v220)
  {
    v96 = 4;
    v95 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_92;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_92:
  v97 = v223;
  if (v223 == v222)
  {
    v98 = 4;
    v97 = v222;
    goto LABEL_96;
  }
  if (v223)
  {
    v98 = 5;
LABEL_96:
    (*(void (**)(void))(*v97 + 8 * v98))();
  }
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  if (*((_QWORD *)&v178 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
  if (*((_QWORD *)&v179 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (SHIBYTE(v181) < 0)
    operator delete((void *)v180);
  v105 = *a3;
  v218[0] = &off_1EA99FBD8;
  v218[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSqueeze;
  v219 = v218;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v105 + 200))(v105, v218);
  v106 = v219;
  if (v219 == v218)
  {
    v107 = 4;
    v106 = v218;
  }
  else
  {
    if (!v219)
      goto LABEL_114;
    v107 = 5;
  }
  (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v227);
  v108 = v227;
  std::string::basic_string[abi:ne180100]<0>(v174, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v174, 0, (uint64_t *)&v213);
  v176 = v213;
  if (v213)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)v213;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v177 = v109;
  v213 = 0;
  std::string::basic_string[abi:ne180100]<0>(v172, "T");
  (*((void (**)(void **, void **, void **))*v108 + 3))(v108, &v176, v172);
  if (v173 < 0)
    operator delete(v172[0]);
  v111 = v177;
  if (v177)
  {
    v112 = (unint64_t *)&v177->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v213;
  v213 = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  if (v175 < 0)
    operator delete(v174[0]);
  v115 = v227;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v213);
  v170 = v213;
  if (v213)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = (std::__shared_weak_count_vtbl *)v213;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v171 = v116;
  v213 = 0;
  std::string::basic_string[abi:ne180100]<0>(v168, "T");
  (*((void (**)(void **, void **, void **))*v115 + 3))(v115, &v170, v168);
  if (v169 < 0)
    operator delete(v168[0]);
  v118 = v171;
  if (v171)
  {
    v119 = (unint64_t *)&v171->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v213;
  v213 = 0;
  if (v121)
    (*(void (**)(void *))(*(_QWORD *)v121 + 8))(v121);
  v122 = *a3;
  v166 = v227;
  if (v227)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v227;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  }
  else
  {
    v123 = 0;
  }
  v167 = v123;
  v227 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v122 + 56))(v122, &v166);
  v125 = v167;
  if (v167)
  {
    v126 = (unint64_t *)&v167->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v227;
  v227 = 0;
  if (v128)
    (*((void (**)(void **))*v128 + 1))(v128);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v227);
  v129 = v227;
  std::string::basic_string[abi:ne180100]<0>(v162, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v162, 0, (uint64_t *)&v213);
  v164 = v213;
  if (v213)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = (std::__shared_weak_count_vtbl *)v213;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v165 = v130;
  v213 = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v129 + 3))(v129, &v164, 0, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v132 = v165;
  if (v165)
  {
    v133 = (unint64_t *)&v165->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v213;
  v213 = 0;
  if (v135)
    (*(void (**)(void *))(*(_QWORD *)v135 + 8))(v135);
  if (v163 < 0)
    operator delete(v162[0]);
  v136 = v227;
  std::string::basic_string[abi:ne180100]<0>(v156, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v156, 1, (uint64_t *)&v213);
  v158 = v213;
  if (v213)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = (std::__shared_weak_count_vtbl *)v213;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v159 = v137;
  v213 = 0;
  std::string::basic_string[abi:ne180100]<0>(v154, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v136 + 3))(v136, &v158, 0, v154);
  if (v155 < 0)
    operator delete(v154[0]);
  v139 = v159;
  if (v159)
  {
    v140 = (unint64_t *)&v159->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v213;
  v213 = 0;
  if (v142)
    (*(void (**)(void *))(*(_QWORD *)v142 + 8))(v142);
  if (v157 < 0)
    operator delete(v156[0]);
  v143 = *a3;
  v152 = v227;
  if (v227)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = v227;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = (std::__shared_weak_count_vtbl *)v145;
  }
  else
  {
    v144 = 0;
  }
  v153 = v144;
  v227 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v143 + 56))(v143, &v152);
  v146 = v153;
  if (v153)
  {
    v147 = (unint64_t *)&v153->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v227;
  v227 = 0;
  if (v149)
    (*((void (**)(void **))*v149 + 1))(v149);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v188, 0);
  result = (uint64_t)v212;
  if (v212)
  {
    v151 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v212);
    return MEMORY[0x1E0C023A0](v151, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A1EC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 144);
  *(_QWORD *)(v61 - 144) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x268], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Transpose::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void **v40;
  unsigned __int8 *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  char *v81;
  char *v82;
  char *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  char **v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void **v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void **v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  void **v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  void **v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  void **v149;
  uint64_t result;
  uint64_t v151;
  void **v152;
  std::__shared_weak_count *v153;
  void *v154[2];
  char v155;
  void *v156[2];
  char v157;
  void *v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  void *v162[2];
  char v163;
  void *v164;
  std::__shared_weak_count *v165;
  void **v166;
  std::__shared_weak_count *v167;
  void *v168[2];
  char v169;
  void *v170;
  std::__shared_weak_count *v171;
  void *v172[2];
  char v173;
  void *v174[2];
  char v175;
  void *v176;
  std::__shared_weak_count *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  void *v182;
  void *v183;
  _QWORD *v184;
  __n128 v185;
  uint64_t v186;
  __int128 v187;
  char **v188;
  __n128 v189;
  void *__p;
  void *v191;
  _QWORD *v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  void *v199;
  void *v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  _QWORD *v204;
  void *v205;
  void *v206;
  _QWORD *v207;
  void *v208;
  void *v209;
  _QWORD *v210;
  __n128 v211;
  _QWORD *v212;
  void *v213;
  void *v214;
  char *v215;
  char *v216;
  char **v217;
  _QWORD v218[3];
  _QWORD *v219;
  _BYTE v220[24];
  _BYTE *v221;
  _QWORD v222[3];
  _QWORD *v223;
  void *v224;
  void *v225;
  _QWORD *v226;
  void **v227;
  void **v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;

  v236 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v212 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v215 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v213 = v9;
  v214 = v9 + 16;
  v227 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v213);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v225 = v12 + 2;
  v226 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v224 = v12;
  v228 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v224);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v210 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v208 = v15;
  v209 = v15 + 2;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v208);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v207 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v205 = v18;
  v206 = v18 + 2;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v205);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v204 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v202 = v21;
  v203 = v21 + 2;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v202);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v201 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v199 = v24;
  v200 = v24 + 2;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v199);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v197 = v27 + 2;
  v198 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v196 = v27;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v196);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v194 = v30 + 2;
  v195 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v193 = v30;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v193);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v191 = v33 + 2;
  v192 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  __p = v33;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v227, 9, &v211);
  MIL::IRParameter::Make(&v211, (uint64_t *)&v182);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v182);
  v34 = v182;
  v182 = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v211.n128_u64[1];
  if (v211.n128_u64[1])
  {
    v36 = (unint64_t *)(v211.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (__p)
  {
    v191 = __p;
    operator delete(__p);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  v38 = v212;
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (void **)operator new(8uLL);
  v227 = v40;
  *v40 = (void *)v39;
  v228 = v40 + 1;
  v229 = (uint64_t)(v40 + 1);
  v224 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v227);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v224, 1, &v189);
  MIL::IRParameter::Make(&v189, (uint64_t *)&v213);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v38, "perm", (uint64_t *)&v213);
  v42 = v213;
  v213 = 0;
  if (v42)
    (*(void (**)(void *))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v189.n128_u64[1];
  if (v189.n128_u64[1])
  {
    v44 = (unint64_t *)(v189.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  v188 = 0;
  v46 = operator new();
  *(_QWORD *)v46 = 0;
  *(_QWORD *)(v46 + 8) = 0;
  *(_QWORD *)(v46 + 16) = 0;
  v227 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v188, (void **)v46);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v227, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v188, 1uLL);
  v47 = v188;
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v224 = v49;
  *v49 = v48;
  v225 = v49 + 1;
  v226 = v49 + 1;
  v227 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v224);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  v208 = v51;
  *v51 = v50;
  v210 = v51 + 1;
  v209 = v51 + 1;
  v228 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v208);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  v205 = v53;
  *v53 = v52;
  v207 = v53 + 1;
  v206 = v53 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v205);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(8uLL);
  v202 = v55;
  *v55 = v54;
  v204 = v55 + 1;
  v203 = v55 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v202);
  v56 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v57 = operator new(8uLL);
  v199 = v57;
  *v57 = v56;
  v201 = v57 + 1;
  v200 = v57 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v199);
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(8uLL);
  v196 = v59;
  *v59 = v58;
  v197 = v59 + 1;
  v198 = v59 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v196);
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  v193 = v61;
  *v61 = v60;
  v194 = v61 + 1;
  v195 = v61 + 1;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v193);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  __p = v63;
  *v63 = v62;
  v191 = v63 + 1;
  v192 = v63 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  v182 = v65;
  *v65 = v64;
  v183 = v65 + 1;
  v184 = v65 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v182);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v227, 9, &v185);
  MIL::IRParameter::Make(&v185, &v186);
  *(_QWORD *)&v187 = v186;
  if (v186)
  {
    v66 = (_QWORD *)operator new();
    v67 = v186;
    *v66 = &unk_1EA99F888;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v187 + 1) = v66;
  v186 = 0;
  v68 = v47[2];
  v69 = v47[1];
  if (v69 >= v68)
  {
    v70 = (v69 - *v47) >> 4;
    v71 = v70 + 1;
    if ((unint64_t)(v70 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v72 = v68 - *v47;
    if (v72 >> 3 > v71)
      v71 = v72 >> 3;
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
      v73 = 0xFFFFFFFFFFFFFFFLL;
    else
      v73 = v71;
    v217 = v47 + 2;
    v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v47 + 2), v73);
    v76 = &v74[16 * v70];
    *(_OWORD *)v76 = v187;
    v187 = 0uLL;
    v78 = *v47;
    v77 = v47[1];
    if (v77 == *v47)
    {
      v81 = v47[1];
      v79 = &v74[16 * v70];
    }
    else
    {
      v79 = &v74[16 * v70];
      do
      {
        v80 = *((_OWORD *)v77 - 1);
        v77 -= 16;
        *((_OWORD *)v79 - 1) = v80;
        v79 -= 16;
        *(_QWORD *)v77 = 0;
        *((_QWORD *)v77 + 1) = 0;
      }
      while (v77 != v78);
      v81 = *v47;
      v77 = v47[1];
    }
    v82 = v76 + 16;
    *v47 = v79;
    v214 = v81;
    v47[1] = v76 + 16;
    v215 = v77;
    v83 = v47[2];
    v47[2] = &v74[16 * v75];
    v216 = v83;
    v213 = v81;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v213);
    v84 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
    v47[1] = v82;
    if (v84)
    {
      p_shared_owners = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(p_shared_owners);
      while (__stlxr(v86 - 1, p_shared_owners));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
  }
  else
  {
    *(_QWORD *)v69 = v187;
    *((_QWORD *)v69 + 1) = v66;
    v187 = 0uLL;
    v47[1] = v69 + 16;
  }
  v87 = v186;
  v186 = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v89 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  if (__p)
  {
    v191 = __p;
    operator delete(__p);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  v180 = *(_OWORD *)a2;
  v181 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v91 = (uint64_t)v212;
  *(_QWORD *)&v179 = v212;
  if (v212)
  {
    v92 = (_QWORD *)operator new();
    *v92 = &unk_1EA99F8E8;
    v92[1] = 0;
    v92[2] = 0;
    v92[3] = v91;
  }
  else
  {
    v92 = 0;
  }
  *((_QWORD *)&v179 + 1) = v92;
  v212 = 0;
  *(_QWORD *)&v178 = v188;
  if (v188)
  {
    v93 = (_QWORD *)operator new();
    v94 = v188;
    *v93 = &unk_1EA99F948;
    v93[1] = 0;
    v93[2] = 0;
    v93[3] = v94;
  }
  else
  {
    v93 = 0;
  }
  *((_QWORD *)&v178 + 1) = v93;
  v188 = 0;
  v222[0] = &unk_1EA99FAC8;
  v222[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateTranspose;
  v223 = v222;
  v221 = 0;
  MIL::IROperator::Make(&v180, &v179, &v178, (uint64_t)v222, (uint64_t)v220, a3);
  v95 = v221;
  if (v221 == v220)
  {
    v96 = 4;
    v95 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_92;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_92:
  v97 = v223;
  if (v223 == v222)
  {
    v98 = 4;
    v97 = v222;
    goto LABEL_96;
  }
  if (v223)
  {
    v98 = 5;
LABEL_96:
    (*(void (**)(void))(*v97 + 8 * v98))();
  }
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  if (*((_QWORD *)&v178 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
  if (*((_QWORD *)&v179 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (SHIBYTE(v181) < 0)
    operator delete((void *)v180);
  v105 = *a3;
  v218[0] = &off_1EA99FBD8;
  v218[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceTranspose;
  v219 = v218;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v105 + 200))(v105, v218);
  v106 = v219;
  if (v219 == v218)
  {
    v107 = 4;
    v106 = v218;
  }
  else
  {
    if (!v219)
      goto LABEL_114;
    v107 = 5;
  }
  (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v227);
  v108 = v227;
  std::string::basic_string[abi:ne180100]<0>(v174, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v174, 0, (uint64_t *)&v213);
  v176 = v213;
  if (v213)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)v213;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v177 = v109;
  v213 = 0;
  std::string::basic_string[abi:ne180100]<0>(v172, "T");
  (*((void (**)(void **, void **, void **))*v108 + 3))(v108, &v176, v172);
  if (v173 < 0)
    operator delete(v172[0]);
  v111 = v177;
  if (v177)
  {
    v112 = (unint64_t *)&v177->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v213;
  v213 = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  if (v175 < 0)
    operator delete(v174[0]);
  v115 = v227;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v213);
  v170 = v213;
  if (v213)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = (std::__shared_weak_count_vtbl *)v213;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v171 = v116;
  v213 = 0;
  std::string::basic_string[abi:ne180100]<0>(v168, "T");
  (*((void (**)(void **, void **, void **))*v115 + 3))(v115, &v170, v168);
  if (v169 < 0)
    operator delete(v168[0]);
  v118 = v171;
  if (v171)
  {
    v119 = (unint64_t *)&v171->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v213;
  v213 = 0;
  if (v121)
    (*(void (**)(void *))(*(_QWORD *)v121 + 8))(v121);
  v122 = *a3;
  v166 = v227;
  if (v227)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v227;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  }
  else
  {
    v123 = 0;
  }
  v167 = v123;
  v227 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v122 + 56))(v122, &v166);
  v125 = v167;
  if (v167)
  {
    v126 = (unint64_t *)&v167->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v227;
  v227 = 0;
  if (v128)
    (*((void (**)(void **))*v128 + 1))(v128);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v227);
  v129 = v227;
  std::string::basic_string[abi:ne180100]<0>(v162, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v162, 0, (uint64_t *)&v213);
  v164 = v213;
  if (v213)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = (std::__shared_weak_count_vtbl *)v213;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v165 = v130;
  v213 = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v129 + 3))(v129, &v164, 0, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v132 = v165;
  if (v165)
  {
    v133 = (unint64_t *)&v165->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v213;
  v213 = 0;
  if (v135)
    (*(void (**)(void *))(*(_QWORD *)v135 + 8))(v135);
  if (v163 < 0)
    operator delete(v162[0]);
  v136 = v227;
  std::string::basic_string[abi:ne180100]<0>(v156, "perm");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v156, 0, (uint64_t *)&v213);
  v158 = v213;
  if (v213)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = (std::__shared_weak_count_vtbl *)v213;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v159 = v137;
  v213 = 0;
  std::string::basic_string[abi:ne180100]<0>(v154, "D_In");
  (*((void (**)(void **, void **, _QWORD, void **))*v136 + 3))(v136, &v158, 0, v154);
  if (v155 < 0)
    operator delete(v154[0]);
  v139 = v159;
  if (v159)
  {
    v140 = (unint64_t *)&v159->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v213;
  v213 = 0;
  if (v142)
    (*(void (**)(void *))(*(_QWORD *)v142 + 8))(v142);
  if (v157 < 0)
    operator delete(v156[0]);
  v143 = *a3;
  v152 = v227;
  if (v227)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = v227;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = (std::__shared_weak_count_vtbl *)v145;
  }
  else
  {
    v144 = 0;
  }
  v153 = v144;
  v227 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v143 + 56))(v143, &v152);
  v146 = v153;
  if (v153)
  {
    v147 = (unint64_t *)&v153->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v227;
  v227 = 0;
  if (v149)
    (*((void (**)(void **))*v149 + 1))(v149);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v188, 0);
  result = (uint64_t)v212;
  if (v212)
  {
    v151 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v212);
    return MEMORY[0x1E0C023A0](v151, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A203E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 144);
  *(_QWORD *)(v61 - 144) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x268], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValidators::ValidateScaledDotProductAttention(MIL::Operators::Common::ios18::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  MIL::IRValueType *v7;
  uint64_t v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  MIL::IRValueType *OutputType;
  uint64_t v12;
  MIL::IRValueType *v13;
  uint64_t v14;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21[2];
  void *v22[2];
  char v23;
  void *__p[2];
  char v25;

  std::string::basic_string[abi:ne180100]<0>(__p, "query");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "key");
  v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = MIL::IRValueType::AsTensorType(v7);
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  v9 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v10 = MIL::IRValueType::AsTensorType(v9);
  if (v25 < 0)
    operator delete(__p[0]);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  v12 = MIL::IRValueType::AsTensorType(OutputType);
  std::string::basic_string[abi:ne180100]<0>(__p, "attn_mask");
  if (MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "attn_mask");
    v13 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)v22, 0);
    v14 = MIL::IRValueType::AsTensorType(v13);
    if (v23 < 0)
      operator delete(v22[0]);
  }
  else
  {
    v14 = 0;
  }
  if (v25 < 0)
    operator delete(__p[0]);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v16 = (std::__shared_weak_count *)LocationPtr[1];
  v21[0] = *LocationPtr;
  v21[1] = (uint64_t)v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1E0A20B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::ValidateScaledDotProductAttentionInputs(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, MIL::ValidationResult *a7@<X8>)
{
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL CanBroadcastShapes;
  uint64_t j;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  void *v82[2];
  char v83;
  _QWORD v84[2];
  uint64_t v85[3];
  void *__p;
  char *v87;
  char *v88;
  void *v89[2];
  char v90;
  _QWORD v91[2];
  void *v92[2];
  char v93;
  _QWORD v94[2];
  void *v95[2];
  char v96;
  _QWORD v97[2];
  void *v98[2];
  char v99;
  _QWORD v100[2];
  void *v101[2];
  char v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void *v105[2];
  char v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  void **v109;
  _QWORD v110[3];
  uint64_t v111;
  _QWORD v112[4];

  v112[2] = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3)
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2)
    || a4 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 104))(a4) & 1) == 0)
  {
    v55 = (std::__shared_weak_count *)a6[1];
    v107 = *a6;
    v108 = v55;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(p_shared_owners);
      while (__stxr(v57 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v105, "Scaled Dot Product Attention currently doesn't support variadic shapes.");
    MIL::ValidationResult::ValidationResult(a7, &v107, 318, v105);
    if (v106 < 0)
      operator delete(v105[0]);
    v58 = v108;
    if (!v108)
      return;
    v59 = (unint64_t *)&v108->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
LABEL_66:
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
    return;
  }
  v14 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v16 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 96))(a3);
  v17 = (v14[1] - *v14) >> 3;
  if (v17 != (uint64_t)(v15[1] - *v15) >> 3 || (v18 = v16, v17 != (uint64_t)(v16[1] - *v16) >> 3))
  {
    v61 = (std::__shared_weak_count *)a6[1];
    v103 = *a6;
    v104 = v61;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    std::string::basic_string[abi:ne180100]<0>(v101, "Query, key, and value should have the same rank.");
    MIL::ValidationResult::ValidationResult(a7, &v103, 304, v101);
    if (v102 < 0)
      operator delete(v101[0]);
    v58 = v104;
    if (!v104)
      return;
    v64 = (unint64_t *)&v104->__shared_owners_;
    do
      v60 = __ldaxr(v64);
    while (__stlxr(v60 - 1, v64));
    goto LABEL_66;
  }
  if (a5
    && (v19 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 96))(a5),
        v17 != (uint64_t)(v19[1] - *v19) >> 3))
  {
    v65 = a6[1];
    v100[0] = *a6;
    v100[1] = v65;
    if (v65)
    {
      v66 = (unint64_t *)(v65 + 8);
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    std::string::basic_string[abi:ne180100]<0>(v98, "Output should have the same rank as query, key, and value.");
    MIL::ValidationResult::ValidationResult(a7, v100, 304, v98);
    if (v99 < 0)
      operator delete(v98[0]);
    v68 = v100;
LABEL_84:
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v68);
  }
  else
  {
    v81 = v17 - 2;
    if (v17 - 2 >= 2)
    {
      for (i = 0; v17 - 3 != i; ++i)
      {
        v21 = *(_QWORD *)(*v15 + 8 * i + 8);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
        {
          v22 = *(_QWORD *)(*v15 + 8 * i + 8);
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23);
        }
        else
        {
          v24 = -1;
        }
        v25 = *(_QWORD *)(*v14 + 8 * i + 8);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25))
        {
          if ((v24 & 0x8000000000000000) == 0)
          {
            v26 = *(_QWORD *)(*v14 + 8 * i + 8);
            v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27) != v24)
            {
              v72 = a6[1];
              v97[0] = *a6;
              v97[1] = v72;
              if (v72)
              {
                v73 = (unint64_t *)(v72 + 8);
                do
                  v74 = __ldxr(v73);
                while (__stxr(v74 + 1, v73));
              }
              std::string::basic_string[abi:ne180100]<0>(v95, "Inner dimensions of Query, Key, and Value must match.");
              MIL::ValidationResult::ValidationResult(a7, v97, 304, v95);
              if (v96 < 0)
                operator delete(v95[0]);
              v68 = v97;
              goto LABEL_84;
            }
          }
          v28 = *(_QWORD *)(*v14 + 8 * i + 8);
          v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 48))(v29);
        }
        v30 = *(_QWORD *)(*v18 + 8 * i + 8);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30))
        {
          if ((v24 & 0x8000000000000000) == 0)
          {
            v31 = *(_QWORD *)(*v18 + 8 * i + 8);
            v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32) != v24)
            {
              v75 = a6[1];
              v94[0] = *a6;
              v94[1] = v75;
              if (v75)
              {
                v76 = (unint64_t *)(v75 + 8);
                do
                  v77 = __ldxr(v76);
                while (__stxr(v77 + 1, v76));
              }
              std::string::basic_string[abi:ne180100]<0>(v92, "Inner dimensions of Query, Key, and Value must match.");
              MIL::ValidationResult::ValidationResult(a7, v94, 304, v92);
              if (v93 < 0)
                operator delete(v92[0]);
              v68 = v94;
              goto LABEL_84;
            }
          }
          v33 = *(_QWORD *)(*v18 + 8 * i + 8);
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 48))(v34);
        }
        if (a5)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 96))(a5) + 8 * i + 8);
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35) && v24 >= 1)
          {
            v37 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 96))(a5) + 8 * i + 8);
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38) != v24)
            {
              v78 = a6[1];
              v91[0] = *a6;
              v91[1] = v78;
              if (v78)
              {
                v79 = (unint64_t *)(v78 + 8);
                do
                  v80 = __ldxr(v79);
                while (__stxr(v80 + 1, v79));
              }
              std::string::basic_string[abi:ne180100]<0>(v89, "Inner dimensions of Output must match Query, Key, and Value.");
              MIL::ValidationResult::ValidationResult(a7, v91, 304, v89);
              if (v90 < 0)
                operator delete(v89[0]);
              v68 = v91;
              goto LABEL_84;
            }
          }
        }
      }
    }
    if (!a4)
      goto LABEL_57;
    __p = 0;
    v87 = 0;
    v88 = 0;
    std::vector<std::string const*>::reserve(&__p, v17);
    v39 = v17 - 1;
    if (v39)
    {
      v40 = 0;
      v41 = v87;
      do
      {
        v42 = *v14;
        if (v41 >= v88)
        {
          v43 = (v41 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v43 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v44 = (v88 - (_BYTE *)__p) >> 2;
          if (v44 <= v43 + 1)
            v44 = v43 + 1;
          if ((unint64_t)(v88 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          if (v45)
            v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v88, v45);
          else
            v46 = 0;
          v47 = &v46[8 * v43];
          *(_QWORD *)v47 = *(_QWORD *)(v42 + 8 * v40);
          v41 = v47 + 8;
          v49 = (char *)__p;
          v48 = v87;
          if (v87 != __p)
          {
            do
            {
              v50 = *((_QWORD *)v48 - 1);
              v48 -= 8;
              *((_QWORD *)v47 - 1) = v50;
              v47 -= 8;
            }
            while (v48 != v49);
            v48 = (char *)__p;
          }
          __p = v47;
          v87 = v41;
          v88 = &v46[8 * v45];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *(_QWORD *)v41 = *(_QWORD *)(v42 + 8 * v40);
          v41 += 8;
        }
        v87 = v41;
        ++v40;
      }
      while (v40 != v39);
    }
    std::vector<MIL::IRDimension const*>::push_back[abi:ne180100](&__p, (_QWORD *)(*v15 + 8 * v81));
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 96))(a4);
    memset(v110, 0, sizeof(v110));
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v110, *(const void **)v51, *(_QWORD *)(v51 + 8), (uint64_t)(*(_QWORD *)(v51 + 8) - *(_QWORD *)v51) >> 3);
    v111 = 0;
    v112[0] = 0;
    v112[1] = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v111, __p, (uint64_t)v87, (v87 - (_BYTE *)__p) >> 3);
    std::vector<std::vector<MIL::IRDimension const*>>::vector[abi:ne180100](v85, (uint64_t)v110, 2uLL);
    CanBroadcastShapes = MIL::Validation::CanBroadcastShapes(v85);
    v109 = (void **)v85;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v109);
    for (j = 0; j != -6; j -= 3)
    {
      v54 = (void *)v110[j + 3];
      if (v54)
      {
        v112[j] = v54;
        operator delete(v54);
      }
    }
    if (CanBroadcastShapes)
    {
      if (__p)
      {
        v87 = (char *)__p;
        operator delete(__p);
      }
LABEL_57:
      MIL::ValidationResult::ValidationResult(a7);
      return;
    }
    v69 = a6[1];
    v84[0] = *a6;
    v84[1] = v69;
    if (v69)
    {
      v70 = (unint64_t *)(v69 + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    std::string::basic_string[abi:ne180100]<0>(v82, "Attention mask is not broadcastable with query/value/key.");
    MIL::ValidationResult::ValidationResult(a7, v84, 304, v82);
    if (v83 < 0)
      operator delete(v82[0]);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v84);
    if (__p)
    {
      v87 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1E0A213BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55)
{
  if (a30 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceScaledDotProductAttention(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  MIL::IRValueType *v10;
  uint64_t v11;
  MIL::IRValueType *v12;
  uint64_t v13;
  MIL::IRValueType *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void (***v75)(MIL::MILContextImpl *__hidden);
  int v76;
  uint64_t v77;
  uint64_t *v78;
  void *exception;
  uint64_t **v80;
  uint64_t v81;
  uint64_t *v82;
  std::string v83[2];
  int v84;
  uint64_t v85[2];
  void *__p[2];
  char v87;
  int v88;
  uint64_t *v89;
  uint64_t *v90;
  _QWORD v91[2];

  std::string::basic_string[abi:ne180100]<0>(__p, "query");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v87 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "key");
  v10 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v11 = MIL::IRValueType::AsTensorType(v10);
  if (v87 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  v12 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v13 = MIL::IRValueType::AsTensorType(v12);
  if (v87 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "attn_mask");
  if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "attn_mask");
    v14 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v89);
    v15 = MIL::IRValueType::AsTensorType(v14);
    if (SHIBYTE(v91[0]) < 0)
      operator delete(v89);
  }
  else
  {
    v15 = 0;
  }
  if (v87 < 0)
    operator delete(__p[0]);
  v16 = *a2;
  v17 = (std::__shared_weak_count *)a2[1];
  v85[0] = v16;
  v85[1] = (uint64_t)v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v83, (uint64_t)__p);
    v83[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v84 = v88;
    MIL::ValidationError::ValidationError(exception, v83);
  }
  v89 = 0;
  v90 = 0;
  v91[0] = 0;
  v22 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v80 = a4;
  v82 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
  v81 = v9;
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13);
  v24 = v22[1] - *v22;
  if (v24)
  {
    v25 = (uint64_t *)v23;
    v26 = 0;
    v27 = v24 >> 3;
    v28 = v27 - 2;
    v29 = v27 - 1;
    if (v27 <= 1)
      v30 = 1;
    else
      v30 = v27;
    do
    {
      if (v26 == v28)
      {
        if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v22 + 8 * v28) + 16))(*(_QWORD *)(*v22 + 8 * v28)))
        {
          v31 = *v22;
          v32 = v90;
          if ((unint64_t)v90 >= v91[0])
          {
            v44 = v90 - v89;
            if ((unint64_t)(v44 + 1) >> 61)
              goto LABEL_148;
            v45 = (uint64_t)(v91[0] - (_QWORD)v89) >> 2;
            if (v45 <= v44 + 1)
              v45 = v44 + 1;
            if (v91[0] - (_QWORD)v89 >= 0x7FFFFFFFFFFFFFF8uLL)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v45;
            if (v38)
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v91, v38);
            else
              v39 = 0;
            v51 = (uint64_t *)&v39[8 * v44];
            *v51 = *(_QWORD *)(v31 + 8 * v28);
            v46 = v51 + 1;
            v53 = (char *)v89;
            v52 = (char *)v90;
            if (v90 != v89)
            {
              do
              {
                v54 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *--v51 = v54;
              }
              while (v52 != v53);
              goto LABEL_141;
            }
            goto LABEL_142;
          }
          v33 = *(_QWORD *)(v31 + 8 * v28);
          goto LABEL_96;
        }
        v40 = MIL::IRUnknownDimension::Make(*a1, 0);
        v41 = v90;
        if ((unint64_t)v90 >= v91[0])
        {
          v42 = v90 - v89;
          if ((unint64_t)(v42 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v43 = (uint64_t)(v91[0] - (_QWORD)v89) >> 2;
          if (v43 <= v42 + 1)
            v43 = v42 + 1;
          if (v91[0] - (_QWORD)v89 >= 0x7FFFFFFFFFFFFFF8uLL)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v43;
          if (v38)
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v91, v38);
          else
            v39 = 0;
          v51 = (uint64_t *)&v39[8 * v42];
          *v51 = v40;
          v46 = v51 + 1;
          v57 = (char *)v89;
          v52 = (char *)v90;
          if (v90 != v89)
          {
            do
            {
              v58 = *((_QWORD *)v52 - 1);
              v52 -= 8;
              *--v51 = v58;
            }
            while (v52 != v57);
            goto LABEL_141;
          }
          goto LABEL_142;
        }
      }
      else if (v26 == v29)
      {
        if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v25 + 8 * v29) + 16))(*(_QWORD *)(*v25 + 8 * v29)))
        {
          v34 = *v25;
          v32 = v90;
          if ((unint64_t)v90 >= v91[0])
          {
            v49 = v90 - v89;
            if ((unint64_t)(v49 + 1) >> 61)
              goto LABEL_148;
            v50 = (uint64_t)(v91[0] - (_QWORD)v89) >> 2;
            if (v50 <= v49 + 1)
              v50 = v49 + 1;
            if (v91[0] - (_QWORD)v89 >= 0x7FFFFFFFFFFFFFF8uLL)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v50;
            if (v38)
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v91, v38);
            else
              v39 = 0;
            v51 = (uint64_t *)&v39[8 * v49];
            *v51 = *(_QWORD *)(v34 + 8 * v29);
            v46 = v51 + 1;
            v61 = (char *)v89;
            v52 = (char *)v90;
            if (v90 != v89)
            {
              do
              {
                v62 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *--v51 = v62;
              }
              while (v52 != v61);
              goto LABEL_141;
            }
            goto LABEL_142;
          }
          v33 = *(_QWORD *)(v34 + 8 * v29);
          goto LABEL_96;
        }
        v40 = MIL::IRUnknownDimension::Make(*a1, 0);
        v41 = v90;
        if ((unint64_t)v90 >= v91[0])
        {
          v55 = v90 - v89;
          if ((unint64_t)(v55 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v56 = (uint64_t)(v91[0] - (_QWORD)v89) >> 2;
          if (v56 <= v55 + 1)
            v56 = v55 + 1;
          if (v91[0] - (_QWORD)v89 >= 0x7FFFFFFFFFFFFFF8uLL)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v56;
          if (v38)
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v91, v38);
          else
            v39 = 0;
          v51 = (uint64_t *)&v39[8 * v55];
          *v51 = v40;
          v46 = v51 + 1;
          v63 = (char *)v89;
          v52 = (char *)v90;
          if (v90 != v89)
          {
            do
            {
              v64 = *((_QWORD *)v52 - 1);
              v52 -= 8;
              *--v51 = v64;
            }
            while (v52 != v63);
            goto LABEL_141;
          }
          goto LABEL_142;
        }
      }
      else
      {
        if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v22 + 8 * v26) + 16))(*(_QWORD *)(*v22 + 8 * v26)))
        {
          v35 = *v22;
          v32 = v90;
          if ((unint64_t)v90 >= v91[0])
          {
            v36 = v90 - v89;
            if ((unint64_t)(v36 + 1) >> 61)
              goto LABEL_148;
            v37 = (uint64_t)(v91[0] - (_QWORD)v89) >> 2;
            if (v37 <= v36 + 1)
              v37 = v36 + 1;
            if (v91[0] - (_QWORD)v89 >= 0x7FFFFFFFFFFFFFF8uLL)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v37;
            if (v38)
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v91, v38);
            else
              v39 = 0;
            v51 = (uint64_t *)&v39[8 * v36];
            *v51 = *(_QWORD *)(v35 + 8 * v26);
            v46 = v51 + 1;
            v59 = (char *)v89;
            v52 = (char *)v90;
            if (v90 != v89)
            {
              do
              {
                v60 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *--v51 = v60;
              }
              while (v52 != v59);
              goto LABEL_141;
            }
            goto LABEL_142;
          }
          goto LABEL_95;
        }
        if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v82 + 8 * v26) + 16))(*(_QWORD *)(*v82 + 8 * v26)))
        {
          v35 = *v82;
          v32 = v90;
          if ((unint64_t)v90 >= v91[0])
          {
            v47 = v90 - v89;
            if ((unint64_t)(v47 + 1) >> 61)
              goto LABEL_148;
            v48 = (uint64_t)(v91[0] - (_QWORD)v89) >> 2;
            if (v48 <= v47 + 1)
              v48 = v47 + 1;
            if (v91[0] - (_QWORD)v89 >= 0x7FFFFFFFFFFFFFF8uLL)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v48;
            if (v38)
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v91, v38);
            else
              v39 = 0;
            v51 = (uint64_t *)&v39[8 * v47];
            *v51 = *(_QWORD *)(v35 + 8 * v26);
            v46 = v51 + 1;
            v67 = (char *)v89;
            v52 = (char *)v90;
            if (v90 != v89)
            {
              do
              {
                v68 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *--v51 = v68;
              }
              while (v52 != v67);
              goto LABEL_141;
            }
            goto LABEL_142;
          }
          goto LABEL_95;
        }
        if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v25 + 8 * v26) + 16))(*(_QWORD *)(*v25 + 8 * v26)))
        {
          v35 = *v25;
          v32 = v90;
          if ((unint64_t)v90 >= v91[0])
          {
            v69 = v90 - v89;
            if ((unint64_t)(v69 + 1) >> 61)
LABEL_148:
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v70 = (uint64_t)(v91[0] - (_QWORD)v89) >> 2;
            if (v70 <= v69 + 1)
              v70 = v69 + 1;
            if (v91[0] - (_QWORD)v89 >= 0x7FFFFFFFFFFFFFF8uLL)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v70;
            if (v38)
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v91, v38);
            else
              v39 = 0;
            v51 = (uint64_t *)&v39[8 * v69];
            *v51 = *(_QWORD *)(v35 + 8 * v26);
            v46 = v51 + 1;
            v71 = (char *)v89;
            v52 = (char *)v90;
            if (v90 != v89)
            {
              do
              {
                v72 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *--v51 = v72;
              }
              while (v52 != v71);
              goto LABEL_141;
            }
            goto LABEL_142;
          }
LABEL_95:
          v33 = *(_QWORD *)(v35 + 8 * v26);
LABEL_96:
          *v32 = v33;
          v46 = v32 + 1;
          goto LABEL_144;
        }
        v40 = MIL::IRUnknownDimension::Make(*a1, 0);
        v41 = v90;
        if ((unint64_t)v90 >= v91[0])
        {
          v65 = v90 - v89;
          if ((unint64_t)(v65 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v66 = (uint64_t)(v91[0] - (_QWORD)v89) >> 2;
          if (v66 <= v65 + 1)
            v66 = v65 + 1;
          if (v91[0] - (_QWORD)v89 >= 0x7FFFFFFFFFFFFFF8uLL)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v66;
          if (v38)
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v91, v38);
          else
            v39 = 0;
          v51 = (uint64_t *)&v39[8 * v65];
          *v51 = v40;
          v46 = v51 + 1;
          v73 = (char *)v89;
          v52 = (char *)v90;
          if (v90 != v89)
          {
            do
            {
              v74 = *((_QWORD *)v52 - 1);
              v52 -= 8;
              *--v51 = v74;
            }
            while (v52 != v73);
LABEL_141:
            v52 = (char *)v89;
          }
LABEL_142:
          v89 = v51;
          v90 = v46;
          v91[0] = &v39[8 * v38];
          if (v52)
            operator delete(v52);
          goto LABEL_144;
        }
      }
      *v41 = v40;
      v46 = v41 + 1;
LABEL_144:
      v90 = v46;
      ++v26;
    }
    while (v26 != v30);
  }
  v75 = *a1;
  v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 88))(v81);
  v77 = MIL::IRTensorValueType::MakeWithShape(v75, v76, (uint64_t)&v89);
  *v80 = 0;
  v80[1] = 0;
  v80[2] = 0;
  v78 = (uint64_t *)operator new(8uLL);
  *v80 = v78;
  *v78++ = v77;
  v80[1] = v78;
  v80[2] = v78;
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
}

void sub_1E0A21DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
  _Unwind_Resume(a1);
}

void std::vector<MIL::IRDimension const*>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

_QWORD *std::vector<std::vector<MIL::IRDimension const*>>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;

  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a3);
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<MIL::IRDimension const*>>,std::vector<MIL::IRDimension const*> const*,std::vector<MIL::IRDimension const*> const*,std::vector<MIL::IRDimension const*>*>(v4, a2, a2 + 24 * a3, (_QWORD *)a1[1]);
  }
  return a1;
}

void sub_1E0A22008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ScaledDotProductAttention::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count_vtbl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  char **v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t *v113;
  char *v114;
  char *v115;
  char *v116;
  __int128 v117;
  void **v118;
  char *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  char **v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *p_shared_owners;
  unint64_t v146;
  std::__shared_weak_count_vtbl *v147;
  void **v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count_vtbl *v154;
  void **v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count_vtbl *v161;
  void **v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count_vtbl *v168;
  void **v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count_vtbl *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count_vtbl *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  void **v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  void **v182;
  void **v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count_vtbl *v189;
  void **v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count_vtbl *v196;
  void **v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count_vtbl *v203;
  void **v204;
  std::__shared_weak_count *v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count_vtbl *v210;
  void **v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count_vtbl *v217;
  void **v218;
  std::__shared_weak_count *v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count_vtbl *v224;
  void **v225;
  std::__shared_weak_count *v226;
  std::__shared_weak_count_vtbl *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count_vtbl *v231;
  void **v232;
  std::__shared_weak_count *v233;
  std::__shared_weak_count_vtbl *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count_vtbl *v238;
  void **v239;
  std::__shared_weak_count *v240;
  std::__shared_weak_count_vtbl *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count_vtbl *v245;
  void **v246;
  std::__shared_weak_count *v247;
  std::__shared_weak_count_vtbl *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count_vtbl *v252;
  void **v253;
  std::__shared_weak_count *v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count_vtbl *v259;
  void **v260;
  std::__shared_weak_count *v261;
  std::__shared_weak_count_vtbl *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count_vtbl *v266;
  void **v267;
  std::__shared_weak_count *v268;
  std::__shared_weak_count_vtbl *v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count_vtbl *v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  void **v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  void **v280;
  uint64_t result;
  uint64_t v282;
  void **v283;
  std::__shared_weak_count *v284;
  void *v285[2];
  char v286;
  std::__shared_weak_count_vtbl *v287;
  std::__shared_weak_count *v288;
  void *v289[2];
  char v290;
  std::__shared_weak_count_vtbl *v291;
  std::__shared_weak_count *v292;
  void *v293[2];
  char v294;
  std::__shared_weak_count_vtbl *v295;
  std::__shared_weak_count *v296;
  void *v297[2];
  char v298;
  void *v299[2];
  char v300;
  std::__shared_weak_count_vtbl *v301;
  std::__shared_weak_count *v302;
  void *v303[2];
  char v304;
  void *v305[2];
  char v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  void *v309[2];
  char v310;
  void *v311[2];
  char v312;
  std::__shared_weak_count_vtbl *v313;
  std::__shared_weak_count *v314;
  void *v315[2];
  char v316;
  void *v317[2];
  char v318;
  std::__shared_weak_count_vtbl *v319;
  std::__shared_weak_count *v320;
  void *v321[2];
  char v322;
  void *v323[2];
  char v324;
  std::__shared_weak_count_vtbl *v325;
  std::__shared_weak_count *v326;
  void *v327[2];
  char v328;
  void *v329[2];
  char v330;
  std::__shared_weak_count_vtbl *v331;
  std::__shared_weak_count *v332;
  void *v333[2];
  char v334;
  void *v335[2];
  char v336;
  std::__shared_weak_count_vtbl *v337;
  std::__shared_weak_count *v338;
  void *v339[2];
  char v340;
  void *v341[2];
  char v342;
  std::__shared_weak_count_vtbl *v343;
  std::__shared_weak_count *v344;
  void *v345[2];
  char v346;
  void *v347[2];
  char v348;
  std::__shared_weak_count_vtbl *v349;
  std::__shared_weak_count *v350;
  void *v351[2];
  char v352;
  void *v353[2];
  char v354;
  std::__shared_weak_count_vtbl *v355;
  std::__shared_weak_count *v356;
  void **v357;
  std::__shared_weak_count *v358;
  void *v359[2];
  char v360;
  std::__shared_weak_count_vtbl *v361;
  std::__shared_weak_count *v362;
  void *v363[2];
  char v364;
  void *v365[2];
  char v366;
  std::__shared_weak_count_vtbl *v367;
  std::__shared_weak_count *v368;
  void *v369[2];
  char v370;
  void *v371[2];
  char v372;
  std::__shared_weak_count_vtbl *v373;
  std::__shared_weak_count *v374;
  void *v375[2];
  char v376;
  void *v377[2];
  char v378;
  std::__shared_weak_count_vtbl *v379;
  std::__shared_weak_count *v380;
  void *v381[2];
  char v382;
  void *v383[2];
  char v384;
  std::__shared_weak_count_vtbl *v385;
  std::__shared_weak_count *v386;
  __int128 v387;
  __int128 v388;
  void *v389[2];
  uint64_t v390;
  __n128 v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  char **v395;
  void *v396;
  void *v397;
  _QWORD *v398;
  __n128 v399;
  __n128 v400;
  __n128 v401;
  void *__p;
  void *v403;
  _QWORD *v404;
  void *v405;
  void *v406;
  _QWORD *v407;
  __n128 v408;
  _QWORD *v409;
  _QWORD v410[3];
  _QWORD *v411;
  _BYTE v412[24];
  _BYTE *v413;
  _QWORD v414[3];
  _QWORD *v415;
  std::__shared_weak_count_vtbl *v416;
  uint64_t p_on_zero_shared_weak;
  uint64_t p_on_zero_shared;
  void **v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char **v423;
  uint64_t v424;

  v424 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v409 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v11->__on_zero_shared_weak;
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared_weak;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v11->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  v11->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v10;
  v416 = v11;
  v419 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v416);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x20uLL);
  v407 = v16 + 4;
  *v16 = v12;
  v16[1] = v13;
  v16[2] = v14;
  v16[3] = v15;
  v405 = v16;
  v406 = v16 + 4;
  v420 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v405);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = operator new(0x20uLL);
  v404 = v21 + 4;
  *v21 = v17;
  v21[1] = v18;
  v21[2] = v19;
  v21[3] = v20;
  __p = v21;
  v403 = v21 + 4;
  v421 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v419, 3, &v408);
  MIL::IRParameter::Make(&v408, (uint64_t *)&v396);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "query", (uint64_t *)&v396);
  v22 = v396;
  v396 = 0;
  if (v22)
    (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)v408.n128_u64[1];
  if (v408.n128_u64[1])
  {
    v24 = (unint64_t *)(v408.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p)
  {
    v403 = __p;
    operator delete(__p);
  }
  if (v405)
  {
    v406 = v405;
    operator delete(v405);
  }
  if (v416)
  {
    p_on_zero_shared_weak = (uint64_t)v416;
    operator delete(v416);
  }
  v26 = v409;
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v31->__on_zero_shared_weak;
  p_on_zero_shared = (uint64_t)&v31->__on_zero_shared_weak;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v31->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v31->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v29;
  v31->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v30;
  v416 = v31;
  v419 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v416);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = operator new(0x20uLL);
  v407 = v36 + 4;
  *v36 = v32;
  v36[1] = v33;
  v36[2] = v34;
  v36[3] = v35;
  v405 = v36;
  v406 = v36 + 4;
  v420 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v405);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = operator new(0x20uLL);
  v404 = v41 + 4;
  *v41 = v37;
  v41[1] = v38;
  v41[2] = v39;
  v41[3] = v40;
  __p = v41;
  v403 = v41 + 4;
  v421 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v419, 3, &v401);
  MIL::IRParameter::Make(&v401, (uint64_t *)&v396);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v26, "key", (uint64_t *)&v396);
  v42 = v396;
  v396 = 0;
  if (v42)
    (*(void (**)(void *))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v401.n128_u64[1];
  if (v401.n128_u64[1])
  {
    v44 = (unint64_t *)(v401.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (__p)
  {
    v403 = __p;
    operator delete(__p);
  }
  if (v405)
  {
    v406 = v405;
    operator delete(v405);
  }
  if (v416)
  {
    p_on_zero_shared_weak = (uint64_t)v416;
    operator delete(v416);
  }
  v46 = v409;
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v51->__on_zero_shared_weak;
  p_on_zero_shared = (uint64_t)&v51->__on_zero_shared_weak;
  v51->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v47;
  v51->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v48;
  v51->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v49;
  v51->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v50;
  v416 = v51;
  v419 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v416);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(0x20uLL);
  v407 = v56 + 4;
  *v56 = v52;
  v56[1] = v53;
  v56[2] = v54;
  v56[3] = v55;
  v405 = v56;
  v406 = v56 + 4;
  v420 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v405);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = operator new(0x20uLL);
  v404 = v61 + 4;
  *v61 = v57;
  v61[1] = v58;
  v61[2] = v59;
  v61[3] = v60;
  __p = v61;
  v403 = v61 + 4;
  v421 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v419, 3, &v400);
  MIL::IRParameter::Make(&v400, (uint64_t *)&v396);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v46, "value", (uint64_t *)&v396);
  v62 = v396;
  v396 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v400.n128_u64[1];
  if (v400.n128_u64[1])
  {
    v64 = (unint64_t *)(v400.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (__p)
  {
    v403 = __p;
    operator delete(__p);
  }
  if (v405)
  {
    v406 = v405;
    operator delete(v405);
  }
  if (v416)
  {
    p_on_zero_shared_weak = (uint64_t)v416;
    operator delete(v416);
  }
  v66 = v409;
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v69 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared_weak = (uint64_t)&v69->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v69->__on_zero_shared;
  v69->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v67;
  v69->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v68;
  v416 = v69;
  v419 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v416);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = MIL::IRUnknownDimension::Make(a1, 0);
  v72 = operator new(0x10uLL);
  v407 = v72 + 2;
  *v72 = v70;
  v72[1] = v71;
  v405 = v72;
  v406 = v72 + 2;
  v420 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v405);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = MIL::IRUnknownDimension::Make(a1, 0);
  v75 = operator new(0x10uLL);
  v404 = v75 + 2;
  *v75 = v73;
  v75[1] = v74;
  __p = v75;
  v403 = v75 + 2;
  v421 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = MIL::IRUnknownDimension::Make(a1, 0);
  v78 = operator new(0x10uLL);
  v398 = v78 + 2;
  *v78 = v76;
  v78[1] = v77;
  v396 = v78;
  v397 = v78 + 2;
  v422 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v396);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v419, 4, &v399);
  MIL::IRParameter::Make(&v399, &v393);
  v79 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v66, "attn_mask", &v393);
  v80 = v393;
  v393 = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = (std::__shared_weak_count *)v399.n128_u64[1];
  if (v399.n128_u64[1])
  {
    v82 = (unint64_t *)(v399.n128_u64[1] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v396)
  {
    v397 = v396;
    operator delete(v396);
  }
  if (__p)
  {
    v403 = __p;
    operator delete(__p);
  }
  if (v405)
  {
    v406 = v405;
    operator delete(v405);
  }
  if (v416)
  {
    p_on_zero_shared_weak = (uint64_t)v416;
    operator delete(v416);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v79 + 5) + 48))(*((_QWORD *)v79 + 5), 1);
  v395 = 0;
  v84 = operator new();
  *(_QWORD *)v84 = 0;
  *(_QWORD *)(v84 + 8) = 0;
  *(_QWORD *)(v84 + 16) = 0;
  v419 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v395, (void **)v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v419, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v395, 1uLL);
  v85 = v395;
  v86 = MIL::IRUnknownDimension::Make(a1, 0);
  v87 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v88 = MIL::IRUnknownDimension::Make(a1, 0);
  v89 = MIL::IRUnknownDimension::Make(a1, 0);
  v90 = operator new(0x20uLL);
  v407 = v90 + 4;
  *v90 = v86;
  v90[1] = v87;
  v90[2] = v88;
  v90[3] = v89;
  v405 = v90;
  v406 = v90 + 4;
  v416 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v405);
  v91 = MIL::IRUnknownDimension::Make(a1, 0);
  v92 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v93 = MIL::IRUnknownDimension::Make(a1, 0);
  v94 = MIL::IRUnknownDimension::Make(a1, 0);
  v95 = operator new(0x20uLL);
  v404 = v95 + 4;
  *v95 = v91;
  v95[1] = v92;
  v95[2] = v93;
  v95[3] = v94;
  __p = v95;
  v403 = v95 + 4;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v96 = MIL::IRUnknownDimension::Make(a1, 0);
  v97 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v98 = MIL::IRUnknownDimension::Make(a1, 0);
  v99 = MIL::IRUnknownDimension::Make(a1, 0);
  v100 = operator new(0x20uLL);
  v398 = v100 + 4;
  *v100 = v96;
  v100[1] = v97;
  v100[2] = v98;
  v100[3] = v99;
  v396 = v100;
  v397 = v100 + 4;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v396);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v416, 3, &v391);
  MIL::IRParameter::Make(&v391, &v392);
  v101 = v392;
  v393 = v392;
  if (v392)
  {
    v102 = (_QWORD *)operator new();
    v103 = v392;
    *v102 = &unk_1EA99F888;
    v102[1] = 0;
    v102[2] = 0;
    v102[3] = v103;
  }
  else
  {
    v102 = 0;
  }
  v394 = v102;
  v392 = 0;
  v104 = v85[2];
  v105 = v85[1];
  if (v105 >= v104)
  {
    v107 = (v105 - *v85) >> 4;
    v108 = v107 + 1;
    if ((unint64_t)(v107 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v109 = v104 - *v85;
    if (v109 >> 3 > v108)
      v108 = v109 >> 3;
    if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0)
      v110 = 0xFFFFFFFFFFFFFFFLL;
    else
      v110 = v108;
    v423 = v85 + 2;
    v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v85 + 2), v110);
    v113 = (uint64_t *)&v111[16 * v107];
    *v113 = v101;
    v113[1] = (uint64_t)v102;
    v394 = 0;
    v393 = 0;
    v115 = *v85;
    v114 = v85[1];
    if (v114 == *v85)
    {
      v118 = (void **)v85[1];
      v116 = &v111[16 * v107];
    }
    else
    {
      v116 = &v111[16 * v107];
      do
      {
        v117 = *((_OWORD *)v114 - 1);
        v114 -= 16;
        *((_OWORD *)v116 - 1) = v117;
        v116 -= 16;
        *(_QWORD *)v114 = 0;
        *((_QWORD *)v114 + 1) = 0;
      }
      while (v114 != v115);
      v118 = (void **)*v85;
      v114 = v85[1];
    }
    v106 = (char *)(v113 + 2);
    *v85 = v116;
    v419 = v118;
    v420 = (uint64_t)v118;
    v85[1] = (char *)(v113 + 2);
    v421 = (uint64_t)v114;
    v119 = v85[2];
    v85[2] = &v111[16 * v112];
    v422 = (uint64_t)v119;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v419);
  }
  else
  {
    *(_QWORD *)v105 = v101;
    *((_QWORD *)v105 + 1) = v102;
    v106 = v105 + 16;
    v394 = 0;
    v393 = 0;
  }
  v85[1] = v106;
  v120 = v392;
  v392 = 0;
  if (v120)
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  v121 = (std::__shared_weak_count *)v391.n128_u64[1];
  if (v391.n128_u64[1])
  {
    v122 = (unint64_t *)(v391.n128_u64[1] + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  if (v396)
  {
    v397 = v396;
    operator delete(v396);
  }
  if (__p)
  {
    v403 = __p;
    operator delete(__p);
  }
  if (v405)
  {
    v406 = v405;
    operator delete(v405);
  }
  *(_OWORD *)v389 = *(_OWORD *)a2;
  v390 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v124 = (uint64_t)v409;
  *(_QWORD *)&v388 = v409;
  if (v409)
  {
    v125 = (_QWORD *)operator new();
    *v125 = &unk_1EA99F8E8;
    v125[1] = 0;
    v125[2] = 0;
    v125[3] = v124;
  }
  else
  {
    v125 = 0;
  }
  *((_QWORD *)&v388 + 1) = v125;
  v409 = 0;
  *(_QWORD *)&v387 = v395;
  if (v395)
  {
    v126 = (_QWORD *)operator new();
    v127 = v395;
    *v126 = &unk_1EA99F948;
    v126[1] = 0;
    v126[2] = 0;
    v126[3] = v127;
  }
  else
  {
    v126 = 0;
  }
  *((_QWORD *)&v387 + 1) = v126;
  v395 = 0;
  v414[0] = &unk_1EA99FAC8;
  v414[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateScaledDotProductAttention;
  v415 = v414;
  v413 = 0;
  MIL::IROperator::Make((__int128 *)v389, &v388, &v387, (uint64_t)v414, (uint64_t)v412, a3);
  v128 = v413;
  if (v413 == v412)
  {
    v129 = 4;
    v128 = v412;
  }
  else
  {
    if (!v413)
      goto LABEL_96;
    v129 = 5;
  }
  (*(void (**)(void))(*v128 + 8 * v129))();
LABEL_96:
  v130 = v415;
  if (v415 == v414)
  {
    v131 = 4;
    v130 = v414;
    goto LABEL_100;
  }
  if (v415)
  {
    v131 = 5;
LABEL_100:
    (*(void (**)(void))(*v130 + 8 * v131))();
  }
  v132 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
  if (*((_QWORD *)&v387 + 1))
  {
    v133 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
  if (*((_QWORD *)&v388 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  if (SHIBYTE(v390) < 0)
    operator delete(v389[0]);
  v138 = *a3;
  v410[0] = &off_1EA99FBD8;
  v410[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceScaledDotProductAttention;
  v411 = v410;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v138 + 200))(v138, v410);
  v139 = v411;
  if (v411 == v410)
  {
    v140 = 4;
    v139 = v410;
  }
  else
  {
    if (!v411)
      goto LABEL_118;
    v140 = 5;
  }
  (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_118:
  MIL::Validation::TensorDTypeConstraints::Make(&v419);
  v141 = v419;
  std::string::basic_string[abi:ne180100]<0>(v383, "query");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v383, 0, (uint64_t *)&v416);
  v385 = v416;
  if (v416)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = v416;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v386 = v142;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v381, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v141 + 3))(v141, &v385, v381);
  if (v382 < 0)
    operator delete(v381[0]);
  v144 = v386;
  if (v386)
  {
    p_shared_owners = (unint64_t *)&v386->__shared_owners_;
    do
      v146 = __ldaxr(p_shared_owners);
    while (__stlxr(v146 - 1, p_shared_owners));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v416;
  v416 = 0;
  if (v147)
    (*((void (**)(std::__shared_weak_count_vtbl *))v147->~__shared_weak_count + 1))(v147);
  if (v384 < 0)
    operator delete(v383[0]);
  v148 = v419;
  std::string::basic_string[abi:ne180100]<0>(v377, "key");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v377, 0, (uint64_t *)&v416);
  v379 = v416;
  if (v416)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = v416;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v380 = v149;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v375, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v148 + 3))(v148, &v379, v375);
  if (v376 < 0)
    operator delete(v375[0]);
  v151 = v380;
  if (v380)
  {
    v152 = (unint64_t *)&v380->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = v416;
  v416 = 0;
  if (v154)
    (*((void (**)(std::__shared_weak_count_vtbl *))v154->~__shared_weak_count + 1))(v154);
  if (v378 < 0)
    operator delete(v377[0]);
  v155 = v419;
  std::string::basic_string[abi:ne180100]<0>(v371, "value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v371, 0, (uint64_t *)&v416);
  v373 = v416;
  if (v416)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = v416;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v374 = v156;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v369, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v155 + 3))(v155, &v373, v369);
  if (v370 < 0)
    operator delete(v369[0]);
  v158 = v374;
  if (v374)
  {
    v159 = (unint64_t *)&v374->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = v416;
  v416 = 0;
  if (v161)
    (*((void (**)(std::__shared_weak_count_vtbl *))v161->~__shared_weak_count + 1))(v161);
  if (v372 < 0)
    operator delete(v371[0]);
  v162 = v419;
  std::string::basic_string[abi:ne180100]<0>(v365, "attn_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v365, 1, (uint64_t *)&v416);
  v367 = v416;
  if (v416)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = v416;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = v164;
  }
  else
  {
    v163 = 0;
  }
  v368 = v163;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v363, "M");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v162 + 3))(v162, &v367, v363);
  if (v364 < 0)
    operator delete(v363[0]);
  v165 = v368;
  if (v368)
  {
    v166 = (unint64_t *)&v368->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v416;
  v416 = 0;
  if (v168)
    (*((void (**)(std::__shared_weak_count_vtbl *))v168->~__shared_weak_count + 1))(v168);
  if (v366 < 0)
    operator delete(v365[0]);
  v169 = v419;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v416);
  v361 = v416;
  if (v416)
  {
    v170 = (std::__shared_weak_count *)operator new();
    v171 = v416;
    v170->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v170->__shared_owners_ = 0;
    v170->__shared_weak_owners_ = 0;
    v170[1].__vftable = v171;
  }
  else
  {
    v170 = 0;
  }
  v362 = v170;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v359, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v169 + 3))(v169, &v361, v359);
  if (v360 < 0)
    operator delete(v359[0]);
  v172 = v362;
  if (v362)
  {
    v173 = (unint64_t *)&v362->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = v416;
  v416 = 0;
  if (v175)
    (*((void (**)(std::__shared_weak_count_vtbl *))v175->~__shared_weak_count + 1))(v175);
  v176 = *a3;
  v357 = v419;
  if (v419)
  {
    v177 = (std::__shared_weak_count *)operator new();
    v178 = v419;
    v177->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v177->__shared_owners_ = 0;
    v177->__shared_weak_owners_ = 0;
    v177[1].__vftable = (std::__shared_weak_count_vtbl *)v178;
  }
  else
  {
    v177 = 0;
  }
  v358 = v177;
  v419 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v176 + 56))(v176, &v357);
  v179 = v358;
  if (v358)
  {
    v180 = (unint64_t *)&v358->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v182 = v419;
  v419 = 0;
  if (v182)
    (*((void (**)(void **))*v182 + 1))(v182);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v419);
  v183 = v419;
  std::string::basic_string[abi:ne180100]<0>(v353, "query");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v353, 0, (uint64_t *)&v416);
  v355 = v416;
  if (v416)
  {
    v184 = (std::__shared_weak_count *)operator new();
    v185 = v416;
    v184->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v184->__shared_owners_ = 0;
    v184->__shared_weak_owners_ = 0;
    v184[1].__vftable = v185;
  }
  else
  {
    v184 = 0;
  }
  v356 = v184;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v351, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v183 + 3))(v183, &v355, 0, v351);
  if (v352 < 0)
    operator delete(v351[0]);
  v186 = v356;
  if (v356)
  {
    v187 = (unint64_t *)&v356->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = v416;
  v416 = 0;
  if (v189)
    (*((void (**)(std::__shared_weak_count_vtbl *))v189->~__shared_weak_count + 1))(v189);
  if (v354 < 0)
    operator delete(v353[0]);
  v190 = v419;
  std::string::basic_string[abi:ne180100]<0>(v347, "query");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v347, 0, (uint64_t *)&v416);
  v349 = v416;
  if (v416)
  {
    v191 = (std::__shared_weak_count *)operator new();
    v192 = v416;
    v191->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v191->__shared_owners_ = 0;
    v191->__shared_weak_owners_ = 0;
    v191[1].__vftable = v192;
  }
  else
  {
    v191 = 0;
  }
  v350 = v191;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v345, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v190 + 3))(v190, &v349, -2, v345);
  if (v346 < 0)
    operator delete(v345[0]);
  v193 = v350;
  if (v350)
  {
    v194 = (unint64_t *)&v350->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = v416;
  v416 = 0;
  if (v196)
    (*((void (**)(std::__shared_weak_count_vtbl *))v196->~__shared_weak_count + 1))(v196);
  if (v348 < 0)
    operator delete(v347[0]);
  v197 = v419;
  std::string::basic_string[abi:ne180100]<0>(v341, "query");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v341, 0, (uint64_t *)&v416);
  v343 = v416;
  if (v416)
  {
    v198 = (std::__shared_weak_count *)operator new();
    v199 = v416;
    v198->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v198->__shared_owners_ = 0;
    v198->__shared_weak_owners_ = 0;
    v198[1].__vftable = v199;
  }
  else
  {
    v198 = 0;
  }
  v344 = v198;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v339, "E");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v197 + 3))(v197, &v343, -1, v339);
  if (v340 < 0)
    operator delete(v339[0]);
  v200 = v344;
  if (v344)
  {
    v201 = (unint64_t *)&v344->__shared_owners_;
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  v203 = v416;
  v416 = 0;
  if (v203)
    (*((void (**)(std::__shared_weak_count_vtbl *))v203->~__shared_weak_count + 1))(v203);
  if (v342 < 0)
    operator delete(v341[0]);
  v204 = v419;
  std::string::basic_string[abi:ne180100]<0>(v335, "key");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v335, 0, (uint64_t *)&v416);
  v337 = v416;
  if (v416)
  {
    v205 = (std::__shared_weak_count *)operator new();
    v206 = v416;
    v205->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v205->__shared_owners_ = 0;
    v205->__shared_weak_owners_ = 0;
    v205[1].__vftable = v206;
  }
  else
  {
    v205 = 0;
  }
  v338 = v205;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v333, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v204 + 3))(v204, &v337, 0, v333);
  if (v334 < 0)
    operator delete(v333[0]);
  v207 = v338;
  if (v338)
  {
    v208 = (unint64_t *)&v338->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = v416;
  v416 = 0;
  if (v210)
    (*((void (**)(std::__shared_weak_count_vtbl *))v210->~__shared_weak_count + 1))(v210);
  if (v336 < 0)
    operator delete(v335[0]);
  v211 = v419;
  std::string::basic_string[abi:ne180100]<0>(v329, "key");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v329, 0, (uint64_t *)&v416);
  v331 = v416;
  if (v416)
  {
    v212 = (std::__shared_weak_count *)operator new();
    v213 = v416;
    v212->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v212->__shared_owners_ = 0;
    v212->__shared_weak_owners_ = 0;
    v212[1].__vftable = v213;
  }
  else
  {
    v212 = 0;
  }
  v332 = v212;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v327, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v211 + 3))(v211, &v331, -2, v327);
  if (v328 < 0)
    operator delete(v327[0]);
  v214 = v332;
  if (v332)
  {
    v215 = (unint64_t *)&v332->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = v416;
  v416 = 0;
  if (v217)
    (*((void (**)(std::__shared_weak_count_vtbl *))v217->~__shared_weak_count + 1))(v217);
  if (v330 < 0)
    operator delete(v329[0]);
  v218 = v419;
  std::string::basic_string[abi:ne180100]<0>(v323, "key");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v323, 0, (uint64_t *)&v416);
  v325 = v416;
  if (v416)
  {
    v219 = (std::__shared_weak_count *)operator new();
    v220 = v416;
    v219->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v219->__shared_owners_ = 0;
    v219->__shared_weak_owners_ = 0;
    v219[1].__vftable = v220;
  }
  else
  {
    v219 = 0;
  }
  v326 = v219;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v321, "E");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v218 + 3))(v218, &v325, -1, v321);
  if (v322 < 0)
    operator delete(v321[0]);
  v221 = v326;
  if (v326)
  {
    v222 = (unint64_t *)&v326->__shared_owners_;
    do
      v223 = __ldaxr(v222);
    while (__stlxr(v223 - 1, v222));
    if (!v223)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  v224 = v416;
  v416 = 0;
  if (v224)
    (*((void (**)(std::__shared_weak_count_vtbl *))v224->~__shared_weak_count + 1))(v224);
  if (v324 < 0)
    operator delete(v323[0]);
  v225 = v419;
  std::string::basic_string[abi:ne180100]<0>(v317, "value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v317, 0, (uint64_t *)&v416);
  v319 = v416;
  if (v416)
  {
    v226 = (std::__shared_weak_count *)operator new();
    v227 = v416;
    v226->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v226->__shared_owners_ = 0;
    v226->__shared_weak_owners_ = 0;
    v226[1].__vftable = v227;
  }
  else
  {
    v226 = 0;
  }
  v320 = v226;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v315, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v225 + 3))(v225, &v319, 0, v315);
  if (v316 < 0)
    operator delete(v315[0]);
  v228 = v320;
  if (v320)
  {
    v229 = (unint64_t *)&v320->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v231 = v416;
  v416 = 0;
  if (v231)
    (*((void (**)(std::__shared_weak_count_vtbl *))v231->~__shared_weak_count + 1))(v231);
  if (v318 < 0)
    operator delete(v317[0]);
  v232 = v419;
  std::string::basic_string[abi:ne180100]<0>(v311, "value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v311, 0, (uint64_t *)&v416);
  v313 = v416;
  if (v416)
  {
    v233 = (std::__shared_weak_count *)operator new();
    v234 = v416;
    v233->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v233->__shared_owners_ = 0;
    v233->__shared_weak_owners_ = 0;
    v233[1].__vftable = v234;
  }
  else
  {
    v233 = 0;
  }
  v314 = v233;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v309, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v232 + 3))(v232, &v313, -2, v309);
  if (v310 < 0)
    operator delete(v309[0]);
  v235 = v314;
  if (v314)
  {
    v236 = (unint64_t *)&v314->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v238 = v416;
  v416 = 0;
  if (v238)
    (*((void (**)(std::__shared_weak_count_vtbl *))v238->~__shared_weak_count + 1))(v238);
  if (v312 < 0)
    operator delete(v311[0]);
  v239 = v419;
  std::string::basic_string[abi:ne180100]<0>(v305, "value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v305, 0, (uint64_t *)&v416);
  v307 = v416;
  if (v416)
  {
    v240 = (std::__shared_weak_count *)operator new();
    v241 = v416;
    v240->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v240->__shared_owners_ = 0;
    v240->__shared_weak_owners_ = 0;
    v240[1].__vftable = v241;
  }
  else
  {
    v240 = 0;
  }
  v308 = v240;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v303, "EV");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v239 + 3))(v239, &v307, -1, v303);
  if (v304 < 0)
    operator delete(v303[0]);
  v242 = v308;
  if (v308)
  {
    v243 = (unint64_t *)&v308->__shared_owners_;
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  v245 = v416;
  v416 = 0;
  if (v245)
    (*((void (**)(std::__shared_weak_count_vtbl *))v245->~__shared_weak_count + 1))(v245);
  if (v306 < 0)
    operator delete(v305[0]);
  v246 = v419;
  std::string::basic_string[abi:ne180100]<0>(v299, "attn_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v299, 1, (uint64_t *)&v416);
  v301 = v416;
  if (v416)
  {
    v247 = (std::__shared_weak_count *)operator new();
    v248 = v416;
    v247->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v247->__shared_owners_ = 0;
    v247->__shared_weak_owners_ = 0;
    v247[1].__vftable = v248;
  }
  else
  {
    v247 = 0;
  }
  v302 = v247;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v297, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v246 + 3))(v246, &v301, -1, v297);
  if (v298 < 0)
    operator delete(v297[0]);
  v249 = v302;
  if (v302)
  {
    v250 = (unint64_t *)&v302->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  v252 = v416;
  v416 = 0;
  if (v252)
    (*((void (**)(std::__shared_weak_count_vtbl *))v252->~__shared_weak_count + 1))(v252);
  if (v300 < 0)
    operator delete(v299[0]);
  v253 = v419;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v416);
  v295 = v416;
  if (v416)
  {
    v254 = (std::__shared_weak_count *)operator new();
    v255 = v416;
    v254->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v254->__shared_owners_ = 0;
    v254->__shared_weak_owners_ = 0;
    v254[1].__vftable = v255;
  }
  else
  {
    v254 = 0;
  }
  v296 = v254;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v293, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v253 + 3))(v253, &v295, 0, v293);
  if (v294 < 0)
    operator delete(v293[0]);
  v256 = v296;
  if (v296)
  {
    v257 = (unint64_t *)&v296->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v259 = v416;
  v416 = 0;
  if (v259)
    (*((void (**)(std::__shared_weak_count_vtbl *))v259->~__shared_weak_count + 1))(v259);
  v260 = v419;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v416);
  v291 = v416;
  if (v416)
  {
    v261 = (std::__shared_weak_count *)operator new();
    v262 = v416;
    v261->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v261->__shared_owners_ = 0;
    v261->__shared_weak_owners_ = 0;
    v261[1].__vftable = v262;
  }
  else
  {
    v261 = 0;
  }
  v292 = v261;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v289, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v260 + 3))(v260, &v291, -2, v289);
  if (v290 < 0)
    operator delete(v289[0]);
  v263 = v292;
  if (v292)
  {
    v264 = (unint64_t *)&v292->__shared_owners_;
    do
      v265 = __ldaxr(v264);
    while (__stlxr(v265 - 1, v264));
    if (!v265)
    {
      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
      std::__shared_weak_count::__release_weak(v263);
    }
  }
  v266 = v416;
  v416 = 0;
  if (v266)
    (*((void (**)(std::__shared_weak_count_vtbl *))v266->~__shared_weak_count + 1))(v266);
  v267 = v419;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v416);
  v287 = v416;
  if (v416)
  {
    v268 = (std::__shared_weak_count *)operator new();
    v269 = v416;
    v268->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v268->__shared_owners_ = 0;
    v268->__shared_weak_owners_ = 0;
    v268[1].__vftable = v269;
  }
  else
  {
    v268 = 0;
  }
  v288 = v268;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(v285, "EV");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v267 + 3))(v267, &v287, -1, v285);
  if (v286 < 0)
    operator delete(v285[0]);
  v270 = v288;
  if (v288)
  {
    v271 = (unint64_t *)&v288->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
      std::__shared_weak_count::__release_weak(v270);
    }
  }
  v273 = v416;
  v416 = 0;
  if (v273)
    (*((void (**)(std::__shared_weak_count_vtbl *))v273->~__shared_weak_count + 1))(v273);
  v274 = *a3;
  v283 = v419;
  if (v419)
  {
    v275 = (std::__shared_weak_count *)operator new();
    v276 = v419;
    v275->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v275->__shared_owners_ = 0;
    v275->__shared_weak_owners_ = 0;
    v275[1].__vftable = (std::__shared_weak_count_vtbl *)v276;
  }
  else
  {
    v275 = 0;
  }
  v284 = v275;
  v419 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v274 + 56))(v274, &v283);
  v277 = v284;
  if (v284)
  {
    v278 = (unint64_t *)&v284->__shared_owners_;
    do
      v279 = __ldaxr(v278);
    while (__stlxr(v279 - 1, v278));
    if (!v279)
    {
      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
      std::__shared_weak_count::__release_weak(v277);
    }
  }
  v280 = v419;
  v419 = 0;
  if (v280)
    (*((void (**)(void **))*v280 + 1))(v280);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v395, 0);
  result = (uint64_t)v409;
  if (v409)
  {
    v282 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v409);
    return MEMORY[0x1E0C023A0](v282, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A24220(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x4A0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceConstexprBlockwiseShiftScale(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprBlockwiseShiftScale(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0A24C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceConstexprLutToDense(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprLutToDense(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0A24CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceConstexprSparseToDense(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprSparseToDense(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0A24D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceConstexprCast(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprCast(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0A24DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  void ***v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  void *v74;
  _QWORD *v75;
  void *v76;
  unint64_t v77;
  void **v78;
  void **v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  void **v87;
  void **v88;
  char *v89;
  __int128 v90;
  void **v91;
  uint64_t v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  void *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  void **v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *p_shared_owners;
  unint64_t v122;
  std::__shared_weak_count_vtbl *v123;
  void **v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  void **v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count_vtbl *v137;
  void **v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count_vtbl *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  void **v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void **v151;
  void **v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count_vtbl *v158;
  void **v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count_vtbl *v165;
  void **v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count_vtbl *v172;
  void **v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count_vtbl *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  void **v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void **v186;
  uint64_t result;
  uint64_t v188;
  void **v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  void *v193[2];
  char v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  void *v197[2];
  char v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  void **v205;
  std::__shared_weak_count *v206;
  void *v207[2];
  char v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  void *v213[2];
  char v214;
  std::__shared_weak_count_vtbl *v215;
  std::__shared_weak_count *v216;
  void *v217[2];
  char v218;
  void *v219[2];
  char v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count *v222;
  void *v223[2];
  char v224;
  void *v225[2];
  char v226;
  std::__shared_weak_count_vtbl *v227;
  std::__shared_weak_count *v228;
  __int128 v229;
  __int128 v230;
  void *v231[2];
  uint64_t v232;
  __n128 v233;
  __n128 v234;
  __n128 v235;
  void *__p;
  void *v237;
  _QWORD *v238;
  void *v239;
  void *v240;
  _QWORD *v241;
  void *v242;
  void *v243;
  _QWORD *v244;
  void *v245;
  void *v246;
  _QWORD *v247;
  void *v248;
  void *v249;
  _QWORD *v250;
  void *v251;
  void *v252;
  _QWORD *v253;
  void *v254;
  void *v255;
  _QWORD *v256;
  void *v257;
  void *v258;
  _QWORD *v259;
  __n128 v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD v263[3];
  _QWORD *v264;
  _QWORD v265[3];
  _QWORD *v266;
  _BYTE v267[24];
  _BYTE *v268;
  _QWORD v269[3];
  _QWORD *v270;
  std::__shared_weak_count_vtbl *v271;
  uint64_t v272;
  uint64_t v273;
  void **v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;

  v283 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v262 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v271 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v272 = (uint64_t)&v8->~__shared_weak_count_0;
  v273 = (uint64_t)&v8->~__shared_weak_count_0;
  v274 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v271);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v257 = v10;
  *v10 = v9;
  v259 = v10 + 1;
  v258 = v10 + 1;
  v275 = MIL::IRTensorValueType::MakeWithShape(a1, 13, (uint64_t)&v257);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v254 = v12;
  *v12 = v11;
  v256 = v12 + 1;
  v255 = v12 + 1;
  v276 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v254);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v251 = v14;
  *v14 = v13;
  v253 = v14 + 1;
  v252 = v14 + 1;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v251);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v248 = v16;
  *v16 = v15;
  v250 = v16 + 1;
  v249 = v16 + 1;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v248);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v245 = v18;
  *v18 = v17;
  v247 = v18 + 1;
  v246 = v18 + 1;
  v279 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v245);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v242 = v20;
  *v20 = v19;
  v244 = v20 + 1;
  v243 = v20 + 1;
  v280 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v242);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v239 = v22;
  *v22 = v21;
  v241 = v22 + 1;
  v240 = v22 + 1;
  v281 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v239);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v238 = v24 + 1;
  v237 = v24 + 1;
  v282 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v274, 9, &v260);
  MIL::IRParameter::Make(&v260, &v261);
  v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "data", &v261);
  v26 = v261;
  v261 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = (std::__shared_weak_count *)v260.n128_u64[1];
  if (v260.n128_u64[1])
  {
    v28 = (unint64_t *)(v260.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v237 = __p;
    operator delete(__p);
  }
  if (v239)
  {
    v240 = v239;
    operator delete(v239);
  }
  if (v242)
  {
    v243 = v242;
    operator delete(v242);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
  if (v248)
  {
    v249 = v248;
    operator delete(v248);
  }
  if (v251)
  {
    v252 = v251;
    operator delete(v251);
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  if (v257)
  {
    v258 = v257;
    operator delete(v257);
  }
  if (v271)
  {
    v272 = (uint64_t)v271;
    operator delete(v271);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v25 + 5) + 32))(*((_QWORD *)v25 + 5), 1);
  v30 = v262;
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v271 = v32;
  v32->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v31;
  v272 = (uint64_t)&v32->~__shared_weak_count_0;
  v273 = (uint64_t)&v32->~__shared_weak_count_0;
  v274 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v271);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v257 = v34;
  *v34 = v33;
  v259 = v34 + 1;
  v258 = v34 + 1;
  v275 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v257);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v254 = v36;
  *v36 = v35;
  v256 = v36 + 1;
  v255 = v36 + 1;
  v276 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v254);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v274, 3, &v235);
  MIL::IRParameter::Make(&v235, (uint64_t *)&v251);
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v30, "scale", (uint64_t *)&v251);
  v38 = v251;
  v251 = 0;
  if (v38)
    (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
  v39 = (std::__shared_weak_count *)v235.n128_u64[1];
  if (v235.n128_u64[1])
  {
    v40 = (unint64_t *)(v235.n128_u64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  if (v257)
  {
    v258 = v257;
    operator delete(v257);
  }
  if (v271)
  {
    v272 = (uint64_t)v271;
    operator delete(v271);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 32))(*((_QWORD *)v37 + 5), 1);
  v42 = v262;
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v271 = v44;
  v44->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v43;
  v272 = (uint64_t)&v44->~__shared_weak_count_0;
  v273 = (uint64_t)&v44->~__shared_weak_count_0;
  v274 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v271);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v257 = v46;
  *v46 = v45;
  v259 = v46 + 1;
  v258 = v46 + 1;
  v275 = MIL::IRTensorValueType::MakeWithShape(a1, 13, (uint64_t)&v257);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v254 = v48;
  *v48 = v47;
  v256 = v48 + 1;
  v255 = v48 + 1;
  v276 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v254);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v251 = v50;
  *v50 = v49;
  v253 = v50 + 1;
  v252 = v50 + 1;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v251);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v248 = v52;
  *v52 = v51;
  v250 = v52 + 1;
  v249 = v52 + 1;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v248);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v245 = v54;
  *v54 = v53;
  v247 = v54 + 1;
  v246 = v54 + 1;
  v279 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v245);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v242 = v56;
  *v56 = v55;
  v244 = v56 + 1;
  v243 = v56 + 1;
  v280 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v242);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v239 = v58;
  *v58 = v57;
  v241 = v58 + 1;
  v240 = v58 + 1;
  v281 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v239);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  __p = v60;
  *v60 = v59;
  v238 = v60 + 1;
  v237 = v60 + 1;
  v282 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v274, 9, &v234);
  MIL::IRParameter::Make(&v234, &v261);
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v42, "offset", &v261);
  v62 = v261;
  v261 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v234.n128_u64[1];
  if (v234.n128_u64[1])
  {
    v64 = (unint64_t *)(v234.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (__p)
  {
    v237 = __p;
    operator delete(__p);
  }
  if (v239)
  {
    v240 = v239;
    operator delete(v239);
  }
  if (v242)
  {
    v243 = v242;
    operator delete(v242);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
  if (v248)
  {
    v249 = v248;
    operator delete(v248);
  }
  if (v251)
  {
    v252 = v251;
    operator delete(v251);
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  if (v257)
  {
    v258 = v257;
    operator delete(v257);
  }
  if (v271)
  {
    v272 = (uint64_t)v271;
    operator delete(v271);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 32))(*((_QWORD *)v61 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 48))(*((_QWORD *)v61 + 5), 1);
  v245 = 0;
  v66 = operator new();
  *(_QWORD *)v66 = 0;
  *(_QWORD *)(v66 + 8) = 0;
  *(_QWORD *)(v66 + 16) = 0;
  v274 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v245, (void **)v66);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v274, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v245, 1uLL);
  v67 = (void ***)v245;
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(8uLL);
  v257 = v69;
  *v69 = v68;
  v259 = v69 + 1;
  v258 = v69 + 1;
  v271 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v257);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(8uLL);
  v254 = v71;
  *v71 = v70;
  v256 = v71 + 1;
  v255 = v71 + 1;
  v272 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v254);
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(8uLL);
  v251 = v73;
  *v73 = v72;
  v253 = v73 + 1;
  v252 = v73 + 1;
  v273 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v251);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v271, 3, &v233);
  MIL::IRParameter::Make(&v233, (uint64_t *)&v242);
  v74 = v242;
  v248 = v242;
  if (v242)
  {
    v75 = (_QWORD *)operator new();
    v76 = v242;
    *v75 = &unk_1EA99F888;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = v76;
  }
  else
  {
    v75 = 0;
  }
  v249 = v75;
  v242 = 0;
  v77 = (unint64_t)v67[2];
  v78 = v67[1];
  if ((unint64_t)v78 >= v77)
  {
    v80 = ((char *)v78 - (char *)*v67) >> 4;
    v81 = v80 + 1;
    if ((unint64_t)(v80 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v82 = v77 - (_QWORD)*v67;
    if (v82 >> 3 > v81)
      v81 = v82 >> 3;
    if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0)
      v83 = 0xFFFFFFFFFFFFFFFLL;
    else
      v83 = v81;
    v278 = (uint64_t)(v67 + 2);
    v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v67 + 2), v83);
    v86 = &v84[16 * v80];
    *(_QWORD *)v86 = v74;
    *((_QWORD *)v86 + 1) = v75;
    v249 = 0;
    v248 = 0;
    v88 = *v67;
    v87 = v67[1];
    if (v87 == *v67)
    {
      v91 = v67[1];
      v89 = &v84[16 * v80];
    }
    else
    {
      v89 = &v84[16 * v80];
      do
      {
        v90 = *((_OWORD *)v87 - 1);
        v87 -= 2;
        *((_OWORD *)v89 - 1) = v90;
        v89 -= 16;
        *v87 = 0;
        v87[1] = 0;
      }
      while (v87 != v88);
      v91 = *v67;
      v87 = v67[1];
    }
    v79 = (void **)(v86 + 16);
    *v67 = (void **)v89;
    v274 = v91;
    v275 = (uint64_t)v91;
    v67[1] = (void **)(v86 + 16);
    v276 = (uint64_t)v87;
    v92 = (uint64_t)v67[2];
    v67[2] = (void **)&v84[16 * v85];
    v277 = v92;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v274);
  }
  else
  {
    *v78 = v74;
    v78[1] = v75;
    v79 = v78 + 2;
    v249 = 0;
    v248 = 0;
  }
  v67[1] = v79;
  v93 = v242;
  v242 = 0;
  if (v93)
    (*(void (**)(void *))(*(_QWORD *)v93 + 8))(v93);
  v94 = (std::__shared_weak_count *)v233.n128_u64[1];
  if (v233.n128_u64[1])
  {
    v95 = (unint64_t *)(v233.n128_u64[1] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v251)
  {
    v252 = v251;
    operator delete(v251);
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  if (v257)
  {
    v258 = v257;
    operator delete(v257);
  }
  *(_OWORD *)v231 = *(_OWORD *)a2;
  v232 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v97 = (uint64_t)v262;
  *(_QWORD *)&v230 = v262;
  if (v262)
  {
    v98 = (_QWORD *)operator new();
    *v98 = &unk_1EA99F8E8;
    v98[1] = 0;
    v98[2] = 0;
    v98[3] = v97;
  }
  else
  {
    v98 = 0;
  }
  *((_QWORD *)&v230 + 1) = v98;
  v262 = 0;
  *(_QWORD *)&v229 = v245;
  if (v245)
  {
    v99 = (_QWORD *)operator new();
    v100 = v245;
    *v99 = &unk_1EA99F948;
    v99[1] = 0;
    v99[2] = 0;
    v99[3] = v100;
  }
  else
  {
    v99 = 0;
  }
  *((_QWORD *)&v229 + 1) = v99;
  v245 = 0;
  v269[0] = &unk_1EA99FAC8;
  v269[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateConstexprBlockwiseShiftScale;
  v270 = v269;
  v268 = 0;
  MIL::IROperator::Make((__int128 *)v231, &v230, &v229, (uint64_t)v269, (uint64_t)v267, a3);
  v101 = v268;
  if (v268 == v267)
  {
    v102 = 4;
    v101 = v267;
  }
  else
  {
    if (!v268)
      goto LABEL_105;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_105:
  v103 = v270;
  if (v270 == v269)
  {
    v104 = 4;
    v103 = v269;
    goto LABEL_109;
  }
  if (v270)
  {
    v104 = 5;
LABEL_109:
    (*(void (**)(void))(*v103 + 8 * v104))();
  }
  v105 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
  if (*((_QWORD *)&v229 + 1))
  {
    v106 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
  if (*((_QWORD *)&v230 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (SHIBYTE(v232) < 0)
    operator delete(v231[0]);
  v111 = *a3;
  v265[0] = &off_1EA99FBD8;
  v265[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceConstexprBlockwiseShiftScale;
  v266 = v265;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v111 + 200))(v111, v265);
  v112 = v266;
  if (v266 == v265)
  {
    v113 = 4;
    v112 = v265;
  }
  else
  {
    if (!v266)
      goto LABEL_127;
    v113 = 5;
  }
  (*(void (**)(void))(*v112 + 8 * v113))();
LABEL_127:
  v114 = *a3;
  v263[0] = &off_1EA9A1D18;
  v263[1] = a1;
  v264 = v263;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v114 + 144))(v114, v263);
  v115 = v264;
  if (v264 == v263)
  {
    v116 = 4;
    v115 = v263;
  }
  else
  {
    if (!v264)
      goto LABEL_132;
    v116 = 5;
  }
  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_132:
  MIL::Validation::TensorDTypeConstraints::Make(&v274);
  v117 = v274;
  std::string::basic_string[abi:ne180100]<0>(v225, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v225, 0, (uint64_t *)&v271);
  v227 = v271;
  if (v271)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v271;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v228 = v118;
  v271 = 0;
  std::string::basic_string[abi:ne180100]<0>(v223, "SrcT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v117 + 3))(v117, &v227, v223);
  if (v224 < 0)
    operator delete(v223[0]);
  v120 = v228;
  if (v228)
  {
    p_shared_owners = (unint64_t *)&v228->__shared_owners_;
    do
      v122 = __ldaxr(p_shared_owners);
    while (__stlxr(v122 - 1, p_shared_owners));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v271;
  v271 = 0;
  if (v123)
    (*((void (**)(std::__shared_weak_count_vtbl *))v123->~__shared_weak_count + 1))(v123);
  if (v226 < 0)
    operator delete(v225[0]);
  v124 = v274;
  std::string::basic_string[abi:ne180100]<0>(v219, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v219, 0, (uint64_t *)&v271);
  v221 = v271;
  if (v271)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = v271;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v222 = v125;
  v271 = 0;
  std::string::basic_string[abi:ne180100]<0>(v217, "DstT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v124 + 3))(v124, &v221, v217);
  if (v218 < 0)
    operator delete(v217[0]);
  v127 = v222;
  if (v222)
  {
    v128 = (unint64_t *)&v222->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v271;
  v271 = 0;
  if (v130)
    (*((void (**)(std::__shared_weak_count_vtbl *))v130->~__shared_weak_count + 1))(v130);
  if (v220 < 0)
    operator delete(v219[0]);
  v131 = v274;
  std::string::basic_string[abi:ne180100]<0>(v213, "offset");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v213, 1, (uint64_t *)&v271);
  v215 = v271;
  if (v271)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v271;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v216 = v132;
  v271 = 0;
  std::string::basic_string[abi:ne180100]<0>(v211, "OffsetT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v131 + 3))(v131, &v215, v211);
  if (v212 < 0)
    operator delete(v211[0]);
  v134 = v216;
  if (v216)
  {
    v135 = (unint64_t *)&v216->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v271;
  v271 = 0;
  if (v137)
    (*((void (**)(std::__shared_weak_count_vtbl *))v137->~__shared_weak_count + 1))(v137);
  if (v214 < 0)
    operator delete(v213[0]);
  v138 = v274;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v271);
  v209 = v271;
  if (v271)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = v271;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v210 = v139;
  v271 = 0;
  std::string::basic_string[abi:ne180100]<0>(v207, "DstT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v138 + 3))(v138, &v209, v207);
  if (v208 < 0)
    operator delete(v207[0]);
  v141 = v210;
  if (v210)
  {
    v142 = (unint64_t *)&v210->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = v271;
  v271 = 0;
  if (v144)
    (*((void (**)(std::__shared_weak_count_vtbl *))v144->~__shared_weak_count + 1))(v144);
  v145 = *a3;
  v205 = v274;
  if (v274)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = v274;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = (std::__shared_weak_count_vtbl *)v147;
  }
  else
  {
    v146 = 0;
  }
  v206 = v146;
  v274 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v145 + 56))(v145, &v205);
  v148 = v206;
  if (v206)
  {
    v149 = (unint64_t *)&v206->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v274;
  v274 = 0;
  if (v151)
    (*((void (**)(void **))*v151 + 1))(v151);
  MIL::Validation::TensorRankValueConstraints::Make(&v274);
  v152 = v274;
  std::string::basic_string[abi:ne180100]<0>(v201, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v201, 0, (uint64_t *)&v271);
  v203 = v271;
  if (v271)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = v271;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v204 = v153;
  v271 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v152 + 4))(v152, &v203, 1, 0x7FFFFFFFFFFFFFFFLL);
  v155 = v204;
  if (v204)
  {
    v156 = (unint64_t *)&v204->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v271;
  v271 = 0;
  if (v158)
    (*((void (**)(std::__shared_weak_count_vtbl *))v158->~__shared_weak_count + 1))(v158);
  if (v202 < 0)
    operator delete(v201[0]);
  v159 = v274;
  std::string::basic_string[abi:ne180100]<0>(v197, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v197, 0, (uint64_t *)&v271);
  v199 = v271;
  if (v271)
  {
    v160 = (std::__shared_weak_count *)operator new();
    v161 = v271;
    v160->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v160->__shared_owners_ = 0;
    v160->__shared_weak_owners_ = 0;
    v160[1].__vftable = v161;
  }
  else
  {
    v160 = 0;
  }
  v200 = v160;
  v271 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v159 + 4))(v159, &v199, 1, 0x7FFFFFFFFFFFFFFFLL);
  v162 = v200;
  if (v200)
  {
    v163 = (unint64_t *)&v200->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = v271;
  v271 = 0;
  if (v165)
    (*((void (**)(std::__shared_weak_count_vtbl *))v165->~__shared_weak_count + 1))(v165);
  if (v198 < 0)
    operator delete(v197[0]);
  v166 = v274;
  std::string::basic_string[abi:ne180100]<0>(v193, "offset");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v193, 1, (uint64_t *)&v271);
  v195 = v271;
  if (v271)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = v271;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v196 = v167;
  v271 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v166 + 4))(v166, &v195, 1, 0x7FFFFFFFFFFFFFFFLL);
  v169 = v196;
  if (v196)
  {
    v170 = (unint64_t *)&v196->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = v271;
  v271 = 0;
  if (v172)
    (*((void (**)(std::__shared_weak_count_vtbl *))v172->~__shared_weak_count + 1))(v172);
  if (v194 < 0)
    operator delete(v193[0]);
  v173 = v274;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v271);
  v191 = v271;
  if (v271)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v175 = v271;
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v175;
  }
  else
  {
    v174 = 0;
  }
  v192 = v174;
  v271 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v173 + 4))(v173, &v191, 1, 0x7FFFFFFFFFFFFFFFLL);
  v176 = v192;
  if (v192)
  {
    v177 = (unint64_t *)&v192->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = v271;
  v271 = 0;
  if (v179)
    (*((void (**)(std::__shared_weak_count_vtbl *))v179->~__shared_weak_count + 1))(v179);
  v180 = *a3;
  v189 = v274;
  if (v274)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = v274;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = (std::__shared_weak_count_vtbl *)v182;
  }
  else
  {
    v181 = 0;
  }
  v190 = v181;
  v274 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v180 + 56))(v180, &v189);
  v183 = v190;
  if (v190)
  {
    v184 = (unint64_t *)&v190->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = v274;
  v274 = 0;
  if (v186)
    (*((void (**)(void **))*v186 + 1))(v186);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v245, 0);
  result = (uint64_t)v262;
  if (v262)
  {
    v188 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v262);
    return MEMORY[0x1E0C023A0](v188, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A26538(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 144);
  *(_QWORD *)(v2 - 144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x240], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2D0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::ConstexprCast::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  void **v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void ***v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count_vtbl *v28;
  _QWORD *v29;
  std::__shared_weak_count_vtbl *v30;
  unint64_t v31;
  void **v32;
  void **v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  void **v41;
  void **v42;
  char *v43;
  __int128 v44;
  void **v45;
  void **v46;
  std::__shared_weak_count_vtbl *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void **v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  std::__shared_weak_count_vtbl *v77;
  void **v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count_vtbl *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  void **v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void **v91;
  void *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  uint64_t result;
  uint64_t v107;
  void *v108;
  std::__shared_weak_count *v109;
  void *v110[2];
  char v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  void *v122[2];
  char v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  __int128 v126;
  __int128 v127;
  void *v128[2];
  uint64_t v129;
  __n128 v130;
  __n128 v131;
  void *__p;
  void *v133;
  _QWORD *v134;
  void *v135;
  void *v136;
  _QWORD *v137;
  __n128 v138;
  std::__shared_weak_count_vtbl *v139;
  _QWORD *v140;
  _QWORD v141[3];
  _QWORD *v142;
  _QWORD v143[3];
  _QWORD *v144;
  _BYTE v145[24];
  _BYTE *v146;
  _BYTE v147[24];
  _BYTE *v148;
  uint64_t v149;
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v151;
  void (__cdecl **v152)(std::__shared_weak_count *__hidden);
  void **v153;
  uint64_t v154;
  uint64_t v155;
  void **v156;
  _QWORD *v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v140 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v151 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v152 = &v8->~__shared_weak_count_0;
  v153 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v135 = v10;
  *v10 = v9;
  v136 = v10 + 1;
  v137 = v10 + 1;
  v154 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v135);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v133 = v12 + 1;
  v134 = v12 + 1;
  v155 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v153, 3, &v138);
  MIL::IRParameter::Make(&v138, (uint64_t *)&v139);
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "source_val", (uint64_t *)&v139);
  v14 = v139;
  v139 = 0;
  if (v14)
    (*((void (**)(std::__shared_weak_count_vtbl *))v14->~__shared_weak_count + 1))(v14);
  v15 = (std::__shared_weak_count *)v138.n128_u64[1];
  if (v138.n128_u64[1])
  {
    v16 = (unint64_t *)(v138.n128_u64[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v133 = __p;
    operator delete(__p);
  }
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  if (Scalar)
  {
    v151 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v13 + 5) + 32))(*((_QWORD *)v13 + 5), 1);
  v18 = v140;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v131);
  MIL::IRParameter::Make(&v131, (uint64_t *)&v153);
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v18, "output_dtype", (uint64_t *)&v153);
  v20 = v153;
  v153 = 0;
  if (v20)
    (*((void (**)(void **))*v20 + 1))(v20);
  v21 = (std::__shared_weak_count *)v131.n128_u64[1];
  if (v131.n128_u64[1])
  {
    v22 = (unint64_t *)(v131.n128_u64[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 5) + 32))(*((_QWORD *)v19 + 5), 1);
  __p = 0;
  v24 = operator new();
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 16) = 0;
  v153 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v24);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v153, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v25 = (void ***)__p;
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v27;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
  v151 = (std::__shared_weak_count_vtbl *)&v27->~__shared_weak_count_0;
  v152 = &v27->~__shared_weak_count_0;
  v149 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v149, 1, &v130);
  MIL::IRParameter::Make(&v130, (uint64_t *)&v139);
  v28 = v139;
  v135 = v139;
  if (v139)
  {
    v29 = (_QWORD *)operator new();
    v30 = v139;
    *v29 = &unk_1EA99F888;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = v30;
  }
  else
  {
    v29 = 0;
  }
  v136 = v29;
  v139 = 0;
  v31 = (unint64_t)v25[2];
  v32 = v25[1];
  if ((unint64_t)v32 >= v31)
  {
    v34 = ((char *)v32 - (char *)*v25) >> 4;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v36 = v31 - (_QWORD)*v25;
    if (v36 >> 3 > v35)
      v35 = v36 >> 3;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
      v37 = 0xFFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    v157 = v25 + 2;
    v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v25 + 2), v37);
    v40 = &v38[16 * v34];
    *(_QWORD *)v40 = v28;
    *((_QWORD *)v40 + 1) = v29;
    v135 = 0;
    v136 = 0;
    v42 = *v25;
    v41 = v25[1];
    if (v41 == *v25)
    {
      v45 = v25[1];
      v43 = &v38[16 * v34];
    }
    else
    {
      v43 = &v38[16 * v34];
      do
      {
        v44 = *((_OWORD *)v41 - 1);
        v41 -= 2;
        *((_OWORD *)v43 - 1) = v44;
        v43 -= 16;
        *v41 = 0;
        v41[1] = 0;
      }
      while (v41 != v42);
      v45 = *v25;
      v41 = v25[1];
    }
    v33 = (void **)(v40 + 16);
    *v25 = (void **)v43;
    v153 = v45;
    v154 = (uint64_t)v45;
    v25[1] = (void **)(v40 + 16);
    v155 = (uint64_t)v41;
    v46 = v25[2];
    v25[2] = (void **)&v38[16 * v39];
    v156 = v46;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v153);
  }
  else
  {
    *v32 = v28;
    v32[1] = v29;
    v33 = v32 + 2;
    v135 = 0;
    v136 = 0;
  }
  v25[1] = v33;
  v47 = v139;
  v139 = 0;
  if (v47)
    (*((void (**)(std::__shared_weak_count_vtbl *))v47->~__shared_weak_count + 1))(v47);
  v48 = (std::__shared_weak_count *)v130.n128_u64[1];
  if (v130.n128_u64[1])
  {
    v49 = (unint64_t *)(v130.n128_u64[1] + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (Scalar)
  {
    v151 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v128 = *(_OWORD *)a2;
  v129 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v51 = (uint64_t)v140;
  *(_QWORD *)&v127 = v140;
  if (v140)
  {
    v52 = (_QWORD *)operator new();
    *v52 = &unk_1EA99F8E8;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v51;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v127 + 1) = v52;
  v140 = 0;
  *(_QWORD *)&v126 = __p;
  if (__p)
  {
    v53 = (_QWORD *)operator new();
    v54 = __p;
    *v53 = &unk_1EA99F948;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v54;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v126 + 1) = v53;
  __p = 0;
  v148 = 0;
  v146 = 0;
  MIL::IROperator::Make((__int128 *)v128, &v127, &v126, (uint64_t)v147, (uint64_t)v145, a3);
  v55 = v146;
  if (v146 == v145)
  {
    v56 = 4;
    v55 = v145;
  }
  else
  {
    if (!v146)
      goto LABEL_58;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_58:
  v57 = v148;
  if (v148 == v147)
  {
    v58 = 4;
    v57 = v147;
    goto LABEL_62;
  }
  if (v148)
  {
    v58 = 5;
LABEL_62:
    (*(void (**)(void))(*v57 + 8 * v58))();
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
  if (*((_QWORD *)&v126 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (SHIBYTE(v129) < 0)
    operator delete(v128[0]);
  v65 = *a3;
  v143[0] = &off_1EA99FBD8;
  v143[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceConstexprCast;
  v144 = v143;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v65 + 200))(v65, v143);
  v66 = v144;
  if (v144 == v143)
  {
    v67 = 4;
    v66 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_80;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_80:
  v68 = *a3;
  v141[0] = &off_1EA9A1D98;
  v141[1] = a1;
  v142 = v141;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v68 + 144))(v68, v141);
  v69 = v142;
  if (v142 == v141)
  {
    v70 = 4;
    v69 = v141;
  }
  else
  {
    if (!v142)
      goto LABEL_85;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_85:
  MIL::Validation::TensorDTypeConstraints::Make(&v153);
  v71 = v153;
  std::string::basic_string[abi:ne180100]<0>(v122, "source_val");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v122, 0, (uint64_t *)&Scalar);
  v124 = Scalar;
  if (Scalar)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = Scalar;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v125 = v72;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v120, "SrcT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v71 + 3))(v71, &v124, v120);
  if (v121 < 0)
    operator delete(v120[0]);
  v74 = v125;
  if (v125)
  {
    p_shared_owners = (unint64_t *)&v125->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = Scalar;
  Scalar = 0;
  if (v77)
    (*((void (**)(std::__shared_weak_count_vtbl *))v77->~__shared_weak_count + 1))(v77);
  if (v123 < 0)
    operator delete(v122[0]);
  v78 = v153;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v118 = Scalar;
  if (Scalar)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = Scalar;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v119 = v79;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "DstT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v78 + 3))(v78, &v118, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v81 = v119;
  if (v119)
  {
    v82 = (unint64_t *)&v119->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = Scalar;
  Scalar = 0;
  if (v84)
    (*((void (**)(std::__shared_weak_count_vtbl *))v84->~__shared_weak_count + 1))(v84);
  v85 = *a3;
  v114 = v153;
  if (v153)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = v153;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = (std::__shared_weak_count_vtbl *)v87;
  }
  else
  {
    v86 = 0;
  }
  v115 = v86;
  v153 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v85 + 56))(v85, &v114);
  v88 = v115;
  if (v115)
  {
    v89 = (unint64_t *)&v115->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v153;
  v153 = 0;
  if (v91)
    (*((void (**)(void **))*v91 + 1))(v91);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v135);
  v92 = v135;
  std::string::basic_string[abi:ne180100]<0>(v110, "output_dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v110, 0, (uint64_t *)&v139);
  v112 = v139;
  if (v139)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = v139;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v113 = v93;
  v139 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp32");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v153, (unsigned __int8 *)&Scalar, 1);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void ***, uint64_t))(*(_QWORD *)v92 + 24))(v92, &v112, &v153, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v153);
  if (SHIBYTE(v152) < 0)
    operator delete(Scalar);
  v95 = v113;
  if (v113)
  {
    v96 = (unint64_t *)&v113->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v139;
  v139 = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  if (v111 < 0)
    operator delete(v110[0]);
  v99 = *a3;
  v108 = v135;
  if (v135)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = (std::__shared_weak_count_vtbl *)v135;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v109 = v100;
  v135 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v99 + 56))(v99, &v108);
  v102 = v109;
  if (v109)
  {
    v103 = (unint64_t *)&v109->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v135;
  v135 = 0;
  if (v105)
    (*(void (**)(void *))(*(_QWORD *)v105 + 8))(v105);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v140;
  if (v140)
  {
    v107 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v140);
    return MEMORY[0x1E0C023A0](v107, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A277D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t *v52;
  void *v54;
  uint64_t v55;

  v54 = a46;
  a46 = 0;
  if (v54)
    (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
  v55 = *v52;
  *v52 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a43, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  char **v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  char *v93;
  char *v94;
  char *v95;
  __int128 v96;
  char *v97;
  char *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  char **v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  void **v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *p_shared_owners;
  unint64_t v128;
  char *v129;
  void **v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  char *v136;
  void **v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void **v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  void **v150;
  void **v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  char *v157;
  void **v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  char *v164;
  void **v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  void **v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  void **v178;
  void **v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  char *v185;
  void **v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  void **v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  void **v199;
  uint64_t result;
  uint64_t v201;
  void **v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  void *v206[2];
  char v207;
  char *v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  char v211;
  void *v212[2];
  char v213;
  char *v214;
  std::__shared_weak_count *v215;
  void **v216;
  std::__shared_weak_count *v217;
  char *v218;
  std::__shared_weak_count *v219;
  void *v220[2];
  char v221;
  char *v222;
  std::__shared_weak_count *v223;
  void *v224[2];
  char v225;
  char *v226;
  std::__shared_weak_count *v227;
  void **v228;
  std::__shared_weak_count *v229;
  void *v230[2];
  char v231;
  char *v232;
  std::__shared_weak_count *v233;
  void *v234[2];
  char v235;
  void *v236[2];
  char v237;
  char *v238;
  std::__shared_weak_count *v239;
  void *v240[2];
  char v241;
  void *v242[2];
  char v243;
  char *v244;
  std::__shared_weak_count *v245;
  __int128 v246;
  __int128 v247;
  void *v248[2];
  uint64_t v249;
  void *v250;
  void *v251;
  _QWORD *v252;
  __n128 v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  char **v257;
  __n128 v258;
  void *v259;
  void *v260;
  _QWORD *v261;
  __n128 v262;
  void *__p;
  void *v264;
  _QWORD *v265;
  void *v266;
  void *v267;
  _QWORD *v268;
  void *v269;
  void *v270;
  _QWORD *v271;
  void *v272;
  void *v273;
  _QWORD *v274;
  void *v275;
  void *v276;
  _QWORD *v277;
  __n128 v278;
  _QWORD *v279;
  _QWORD v280[3];
  _QWORD *v281;
  _QWORD v282[3];
  _QWORD *v283;
  _BYTE v284[24];
  _BYTE *v285;
  _QWORD v286[3];
  _QWORD *v287;
  void **v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *Scalar;
  char *v296;
  char *v297;
  char *v298;
  char **v299;
  uint64_t v300;

  v300 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v279 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v296 = v8 + 8;
  v297 = v8 + 8;
  v288 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v275 = v10;
  *v10 = v9;
  v277 = v10 + 1;
  v276 = v10 + 1;
  v289 = MIL::IRTensorValueType::MakeWithShape(a1, 23, (uint64_t)&v275);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v272 = v12;
  *v12 = v11;
  v274 = v12 + 1;
  v273 = v12 + 1;
  v290 = MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v272);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v269 = v14;
  *v14 = v13;
  v271 = v14 + 1;
  v270 = v14 + 1;
  v291 = MIL::IRTensorValueType::MakeWithShape(a1, 22, (uint64_t)&v269);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v266 = v16;
  *v16 = v15;
  v268 = v16 + 1;
  v267 = v16 + 1;
  v292 = MIL::IRTensorValueType::MakeWithShape(a1, 19, (uint64_t)&v266);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v265 = v18 + 1;
  v264 = v18 + 1;
  v293 = MIL::IRTensorValueType::MakeWithShape(a1, 21, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v288, 6, &v278);
  MIL::IRParameter::Make(&v278, (uint64_t *)&v259);
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "indices", (uint64_t *)&v259);
  v20 = v259;
  v259 = 0;
  if (v20)
    (*(void (**)(void *))(*(_QWORD *)v20 + 8))(v20);
  v21 = (std::__shared_weak_count *)v278.n128_u64[1];
  if (v278.n128_u64[1])
  {
    v22 = (unint64_t *)(v278.n128_u64[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (__p)
  {
    v264 = __p;
    operator delete(__p);
  }
  if (v266)
  {
    v267 = v266;
    operator delete(v266);
  }
  if (v269)
  {
    v270 = v269;
    operator delete(v269);
  }
  if (v272)
  {
    v273 = v272;
    operator delete(v272);
  }
  if (v275)
  {
    v276 = v275;
    operator delete(v275);
  }
  if (Scalar)
  {
    v296 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 5) + 32))(*((_QWORD *)v19 + 5), 1);
  v24 = v279;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = (char *)operator new(0x18uLL);
  v296 = v28 + 24;
  v297 = v28 + 24;
  *(_QWORD *)v28 = v25;
  *((_QWORD *)v28 + 1) = v26;
  *((_QWORD *)v28 + 2) = v27;
  Scalar = v28;
  v288 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&Scalar);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x18uLL);
  v277 = v32 + 3;
  *v32 = v29;
  v32[1] = v30;
  v32[2] = v31;
  v275 = v32;
  v276 = v32 + 3;
  v289 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v275);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = operator new(0x18uLL);
  v274 = v36 + 3;
  *v36 = v33;
  v36[1] = v34;
  v36[2] = v35;
  v272 = v36;
  v273 = v36 + 3;
  v290 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v272);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = operator new(0x18uLL);
  v271 = v40 + 3;
  *v40 = v37;
  v40[1] = v38;
  v40[2] = v39;
  v269 = v40;
  v270 = v40 + 3;
  v291 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v269);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = operator new(0x18uLL);
  v268 = v44 + 3;
  *v44 = v41;
  v44[1] = v42;
  v44[2] = v43;
  v266 = v44;
  v267 = v44 + 3;
  v292 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v266);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = operator new(0x18uLL);
  v265 = v48 + 3;
  *v48 = v45;
  v48[1] = v46;
  v48[2] = v47;
  __p = v48;
  v264 = v48 + 3;
  v293 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&__p);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = operator new(0x18uLL);
  v261 = v52 + 3;
  *v52 = v49;
  v52[1] = v50;
  v52[2] = v51;
  v259 = v52;
  v260 = v52 + 3;
  v294 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v259);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v288, 7, &v262);
  MIL::IRParameter::Make(&v262, (uint64_t *)&v250);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v24, "lut", (uint64_t *)&v250);
  v54 = v250;
  v250 = 0;
  if (v54)
    (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v262.n128_u64[1];
  if (v262.n128_u64[1])
  {
    v56 = (unint64_t *)(v262.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v259)
  {
    v260 = v259;
    operator delete(v259);
  }
  if (__p)
  {
    v264 = __p;
    operator delete(__p);
  }
  if (v266)
  {
    v267 = v266;
    operator delete(v266);
  }
  if (v269)
  {
    v270 = v269;
    operator delete(v269);
  }
  if (v272)
  {
    v273 = v272;
    operator delete(v272);
  }
  if (v275)
  {
    v276 = v275;
    operator delete(v275);
  }
  if (Scalar)
  {
    v296 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  v58 = v279;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v258);
  MIL::IRParameter::Make(&v258, (uint64_t *)&v288);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v58, "vector_axis", (uint64_t *)&v288);
  v60 = v288;
  v288 = 0;
  if (v60)
    (*((void (**)(void **))*v60 + 1))(v60);
  v61 = (std::__shared_weak_count *)v258.n128_u64[1];
  if (v258.n128_u64[1])
  {
    v62 = (unint64_t *)(v258.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v257 = 0;
  v64 = operator new();
  *(_QWORD *)v64 = 0;
  *(_QWORD *)(v64 + 8) = 0;
  *(_QWORD *)(v64 + 16) = 0;
  v288 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v257, (void **)v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v288, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v257, 1uLL);
  v65 = v257;
  v66 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v67 = operator new(8uLL);
  v275 = v67;
  *v67 = v66;
  v277 = v67 + 1;
  v276 = v67 + 1;
  v288 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v275);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(8uLL);
  v272 = v69;
  *v69 = v68;
  v274 = v69 + 1;
  v273 = v69 + 1;
  v289 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v272);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(8uLL);
  v269 = v71;
  *v71 = v70;
  v271 = v71 + 1;
  v270 = v71 + 1;
  v290 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v269);
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(8uLL);
  v266 = v73;
  *v73 = v72;
  v268 = v73 + 1;
  v267 = v73 + 1;
  v291 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v266);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  __p = v75;
  *v75 = v74;
  v265 = v75 + 1;
  v264 = v75 + 1;
  v292 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(8uLL);
  v259 = v77;
  *v77 = v76;
  v261 = v77 + 1;
  v260 = v77 + 1;
  v293 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v259);
  v78 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v79 = operator new(8uLL);
  v250 = v79;
  *v79 = v78;
  v252 = v79 + 1;
  v251 = v79 + 1;
  v294 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v250);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v288, 7, &v253);
  MIL::IRParameter::Make(&v253, &v254);
  v80 = v254;
  v255 = v254;
  if (v254)
  {
    v81 = (_QWORD *)operator new();
    v82 = v254;
    *v81 = &unk_1EA99F888;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v82;
  }
  else
  {
    v81 = 0;
  }
  v256 = v81;
  v254 = 0;
  v83 = v65[2];
  v84 = v65[1];
  if (v84 >= v83)
  {
    v86 = (v84 - *v65) >> 4;
    v87 = v86 + 1;
    if ((unint64_t)(v86 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v88 = v83 - *v65;
    if (v88 >> 3 > v87)
      v87 = v88 >> 3;
    if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
      v89 = 0xFFFFFFFFFFFFFFFLL;
    else
      v89 = v87;
    v299 = v65 + 2;
    v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v65 + 2), v89);
    v92 = (uint64_t *)&v90[16 * v86];
    *v92 = v80;
    v92[1] = (uint64_t)v81;
    v256 = 0;
    v255 = 0;
    v94 = *v65;
    v93 = v65[1];
    if (v93 == *v65)
    {
      v97 = v65[1];
      v95 = &v90[16 * v86];
    }
    else
    {
      v95 = &v90[16 * v86];
      do
      {
        v96 = *((_OWORD *)v93 - 1);
        v93 -= 16;
        *((_OWORD *)v95 - 1) = v96;
        v95 -= 16;
        *(_QWORD *)v93 = 0;
        *((_QWORD *)v93 + 1) = 0;
      }
      while (v93 != v94);
      v97 = *v65;
      v93 = v65[1];
    }
    v85 = (char *)(v92 + 2);
    *v65 = v95;
    Scalar = v97;
    v296 = v97;
    v65[1] = (char *)(v92 + 2);
    v297 = v93;
    v98 = v65[2];
    v65[2] = &v90[16 * v91];
    v298 = v98;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v84 = v80;
    *((_QWORD *)v84 + 1) = v81;
    v85 = v84 + 16;
    v256 = 0;
    v255 = 0;
  }
  v65[1] = v85;
  v99 = v254;
  v254 = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = (std::__shared_weak_count *)v253.n128_u64[1];
  if (v253.n128_u64[1])
  {
    v101 = (unint64_t *)(v253.n128_u64[1] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  if (v259)
  {
    v260 = v259;
    operator delete(v259);
  }
  if (__p)
  {
    v264 = __p;
    operator delete(__p);
  }
  if (v266)
  {
    v267 = v266;
    operator delete(v266);
  }
  if (v269)
  {
    v270 = v269;
    operator delete(v269);
  }
  if (v272)
  {
    v273 = v272;
    operator delete(v272);
  }
  if (v275)
  {
    v276 = v275;
    operator delete(v275);
  }
  *(_OWORD *)v248 = *(_OWORD *)a2;
  v249 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v103 = (uint64_t)v279;
  *(_QWORD *)&v247 = v279;
  if (v279)
  {
    v104 = (_QWORD *)operator new();
    *v104 = &unk_1EA99F8E8;
    v104[1] = 0;
    v104[2] = 0;
    v104[3] = v103;
  }
  else
  {
    v104 = 0;
  }
  *((_QWORD *)&v247 + 1) = v104;
  v279 = 0;
  *(_QWORD *)&v246 = v257;
  if (v257)
  {
    v105 = (_QWORD *)operator new();
    v106 = v257;
    *v105 = &unk_1EA99F948;
    v105[1] = 0;
    v105[2] = 0;
    v105[3] = v106;
  }
  else
  {
    v105 = 0;
  }
  *((_QWORD *)&v246 + 1) = v105;
  v257 = 0;
  v286[0] = &unk_1EA99FAC8;
  v286[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateConstexprLutToDense;
  v287 = v286;
  v285 = 0;
  MIL::IROperator::Make((__int128 *)v248, &v247, &v246, (uint64_t)v286, (uint64_t)v284, a3);
  v107 = v285;
  if (v285 == v284)
  {
    v108 = 4;
    v107 = v284;
  }
  else
  {
    if (!v285)
      goto LABEL_97;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_97:
  v109 = v287;
  if (v287 == v286)
  {
    v110 = 4;
    v109 = v286;
    goto LABEL_101;
  }
  if (v287)
  {
    v110 = 5;
LABEL_101:
    (*(void (**)(void))(*v109 + 8 * v110))();
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v246 + 1);
  if (*((_QWORD *)&v246 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
  if (*((_QWORD *)&v247 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  if (SHIBYTE(v249) < 0)
    operator delete(v248[0]);
  v117 = *a3;
  v282[0] = &off_1EA99FBD8;
  v282[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceConstexprLutToDense;
  v283 = v282;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v117 + 200))(v117, v282);
  v118 = v283;
  if (v283 == v282)
  {
    v119 = 4;
    v118 = v282;
  }
  else
  {
    if (!v283)
      goto LABEL_119;
    v119 = 5;
  }
  (*(void (**)(void))(*v118 + 8 * v119))();
LABEL_119:
  v120 = *a3;
  v280[0] = &off_1EA9A1E18;
  v280[1] = a1;
  v281 = v280;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v120 + 144))(v120, v280);
  v121 = v281;
  if (v281 == v280)
  {
    v122 = 4;
    v121 = v280;
  }
  else
  {
    if (!v281)
      goto LABEL_124;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_124:
  MIL::Validation::TensorDTypeConstraints::Make(&v288);
  v123 = v288;
  std::string::basic_string[abi:ne180100]<0>(v242, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v242, 0, (uint64_t *)&Scalar);
  v244 = Scalar;
  if (Scalar)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = (std::__shared_weak_count_vtbl *)Scalar;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v245 = v124;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v240, "IndicesT");
  (*((void (**)(void **, char **, void **))*v123 + 3))(v123, &v244, v240);
  if (v241 < 0)
    operator delete(v240[0]);
  v126 = v245;
  if (v245)
  {
    p_shared_owners = (unint64_t *)&v245->__shared_owners_;
    do
      v128 = __ldaxr(p_shared_owners);
    while (__stlxr(v128 - 1, p_shared_owners));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = Scalar;
  Scalar = 0;
  if (v129)
    (*(void (**)(char *))(*(_QWORD *)v129 + 8))(v129);
  if (v243 < 0)
    operator delete(v242[0]);
  v130 = v288;
  std::string::basic_string[abi:ne180100]<0>(v236, "lut");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v236, 0, (uint64_t *)&Scalar);
  v238 = Scalar;
  if (Scalar)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = (std::__shared_weak_count_vtbl *)Scalar;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v239 = v131;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v234, "T");
  (*((void (**)(void **, char **, void **))*v130 + 3))(v130, &v238, v234);
  if (v235 < 0)
    operator delete(v234[0]);
  v133 = v239;
  if (v239)
  {
    v134 = (unint64_t *)&v239->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = Scalar;
  Scalar = 0;
  if (v136)
    (*(void (**)(char *))(*(_QWORD *)v136 + 8))(v136);
  if (v237 < 0)
    operator delete(v236[0]);
  v137 = v288;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v232 = Scalar;
  if (Scalar)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = (std::__shared_weak_count_vtbl *)Scalar;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v233 = v138;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v230, "T");
  (*((void (**)(void **, char **, void **))*v137 + 3))(v137, &v232, v230);
  if (v231 < 0)
    operator delete(v230[0]);
  v140 = v233;
  if (v233)
  {
    v141 = (unint64_t *)&v233->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = Scalar;
  Scalar = 0;
  if (v143)
    (*(void (**)(char *))(*(_QWORD *)v143 + 8))(v143);
  v144 = *a3;
  v228 = v288;
  if (v288)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = v288;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = (std::__shared_weak_count_vtbl *)v146;
  }
  else
  {
    v145 = 0;
  }
  v229 = v145;
  v288 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v144 + 56))(v144, &v228);
  v147 = v229;
  if (v229)
  {
    v148 = (unint64_t *)&v229->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v288;
  v288 = 0;
  if (v150)
    (*((void (**)(void **))*v150 + 1))(v150);
  MIL::Validation::TensorRankValueConstraints::Make(&v288);
  v151 = v288;
  std::string::basic_string[abi:ne180100]<0>(v224, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v224, 0, (uint64_t *)&Scalar);
  v226 = Scalar;
  if (Scalar)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = (std::__shared_weak_count_vtbl *)Scalar;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v227 = v152;
  Scalar = 0;
  (*((void (**)(void **, char **, uint64_t, uint64_t))*v151 + 4))(v151, &v226, 1, 0x7FFFFFFFFFFFFFFFLL);
  v154 = v227;
  if (v227)
  {
    v155 = (unint64_t *)&v227->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = Scalar;
  Scalar = 0;
  if (v157)
    (*(void (**)(char *))(*(_QWORD *)v157 + 8))(v157);
  if (v225 < 0)
    operator delete(v224[0]);
  v158 = v288;
  std::string::basic_string[abi:ne180100]<0>(v220, "lut");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v220, 0, (uint64_t *)&Scalar);
  v222 = Scalar;
  if (Scalar)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = (std::__shared_weak_count_vtbl *)Scalar;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v223 = v159;
  Scalar = 0;
  (*((void (**)(void **, char **, uint64_t, uint64_t))*v158 + 4))(v158, &v222, 3, 0x7FFFFFFFFFFFFFFFLL);
  v161 = v223;
  if (v223)
  {
    v162 = (unint64_t *)&v223->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = Scalar;
  Scalar = 0;
  if (v164)
    (*(void (**)(char *))(*(_QWORD *)v164 + 8))(v164);
  if (v221 < 0)
    operator delete(v220[0]);
  v165 = v288;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v218 = Scalar;
  if (Scalar)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = (std::__shared_weak_count_vtbl *)Scalar;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v219 = v166;
  Scalar = 0;
  (*((void (**)(void **, char **, uint64_t, uint64_t))*v165 + 4))(v165, &v218, 1, 0x7FFFFFFFFFFFFFFFLL);
  v168 = v219;
  if (v219)
  {
    v169 = (unint64_t *)&v219->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = Scalar;
  Scalar = 0;
  if (v171)
    (*(void (**)(char *))(*(_QWORD *)v171 + 8))(v171);
  v172 = *a3;
  v216 = v288;
  if (v288)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = v288;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = (std::__shared_weak_count_vtbl *)v174;
  }
  else
  {
    v173 = 0;
  }
  v217 = v173;
  v288 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v172 + 56))(v172, &v216);
  v175 = v217;
  if (v217)
  {
    v176 = (unint64_t *)&v217->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = v288;
  v288 = 0;
  if (v178)
    (*((void (**)(void **))*v178 + 1))(v178);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v288);
  v179 = v288;
  std::string::basic_string[abi:ne180100]<0>(v212, "lut");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v212, 0, (uint64_t *)&Scalar);
  v214 = Scalar;
  if (Scalar)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = (std::__shared_weak_count_vtbl *)Scalar;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v215 = v180;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v210, "NUM_PALETTES");
  (*((void (**)(void **, char **, uint64_t, void **))*v179 + 3))(v179, &v214, -2, v210);
  if (v211 < 0)
    operator delete(v210[0]);
  v182 = v215;
  if (v215)
  {
    v183 = (unint64_t *)&v215->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = Scalar;
  Scalar = 0;
  if (v185)
    (*(void (**)(char *))(*(_QWORD *)v185 + 8))(v185);
  if (v213 < 0)
    operator delete(v212[0]);
  v186 = v288;
  std::string::basic_string[abi:ne180100]<0>(v206, "lut");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v206, 0, (uint64_t *)&Scalar);
  v208 = Scalar;
  if (Scalar)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = (std::__shared_weak_count_vtbl *)Scalar;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v209 = v187;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v204, "VECTOR_SIZE");
  (*((void (**)(void **, char **, uint64_t, void **))*v186 + 3))(v186, &v208, -1, v204);
  if (v205 < 0)
    operator delete(v204[0]);
  v189 = v209;
  if (v209)
  {
    v190 = (unint64_t *)&v209->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = Scalar;
  Scalar = 0;
  if (v192)
    (*(void (**)(char *))(*(_QWORD *)v192 + 8))(v192);
  if (v207 < 0)
    operator delete(v206[0]);
  v193 = *a3;
  v202 = v288;
  if (v288)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = v288;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = (std::__shared_weak_count_vtbl *)v195;
  }
  else
  {
    v194 = 0;
  }
  v203 = v194;
  v288 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v193 + 56))(v193, &v202);
  v196 = v203;
  if (v203)
  {
    v197 = (unint64_t *)&v203->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = v288;
  v288 = 0;
  if (v199)
    (*((void (**)(void **))*v199 + 1))(v199);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v257, 0);
  result = (uint64_t)v279;
  if (v279)
  {
    v201 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v279);
    return MEMORY[0x1E0C023A0](v201, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A29384(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 168);
  *(_QWORD *)(v2 - 168) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x238], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x300], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unsigned __int8 *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char **v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  void *v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  void **v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void **v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void **v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  void **v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void **v152;
  uint64_t result;
  uint64_t v154;
  void **v155;
  std::__shared_weak_count *v156;
  void *v157[2];
  char v158;
  void *v159[2];
  char v160;
  void *v161;
  std::__shared_weak_count *v162;
  void **v163;
  std::__shared_weak_count *v164;
  void *v165;
  std::__shared_weak_count *v166;
  void *v167[2];
  char v168;
  void *v169;
  std::__shared_weak_count *v170;
  void **v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  void *v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  void *v179[2];
  char v180;
  void *v181;
  std::__shared_weak_count *v182;
  __int128 v183;
  __int128 v184;
  void *v185[2];
  uint64_t v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  __n128 v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  char **v194;
  void *__p;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  void *v204;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  void *v210;
  void *v211;
  _QWORD *v212;
  __n128 v213;
  __n128 v214;
  _QWORD *v215;
  void *v216;
  void *v217;
  char *v218;
  char *v219;
  char **v220;
  _QWORD v221[3];
  _QWORD *v222;
  _QWORD v223[3];
  _QWORD *v224;
  _BYTE v225[24];
  _BYTE *v226;
  _QWORD v227[3];
  _QWORD *v228;
  void *v229;
  void *v230;
  _QWORD *v231;
  void **v232;
  void **v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

  v240 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v215 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  v232 = v8;
  *v8 = (void *)v7;
  v233 = v8 + 1;
  v234 = (uint64_t)(v8 + 1);
  v229 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 21, (uint64_t)&v232);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v229, 1, &v214);
  MIL::IRParameter::Make(&v214, (uint64_t *)&v216);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "mask", (uint64_t *)&v216);
  v10 = v216;
  v216 = 0;
  if (v10)
    (*(void (**)(void *))(*(_QWORD *)v10 + 8))(v10);
  v11 = (std::__shared_weak_count *)v214.n128_u64[1];
  if (v214.n128_u64[1])
  {
    v12 = (unint64_t *)(v214.n128_u64[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v9 + 5) + 32))(*((_QWORD *)v9 + 5), 1);
  v14 = v215;
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = (char *)operator new(8uLL);
  v216 = v16;
  *(_QWORD *)v16 = v15;
  v218 = v16 + 8;
  v217 = v16 + 8;
  v232 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 13, (uint64_t)&v216);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(8uLL);
  v229 = v18;
  *v18 = v17;
  v230 = v18 + 1;
  v231 = v18 + 1;
  v233 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v229);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = operator new(8uLL);
  v210 = v20;
  *v20 = v19;
  v212 = v20 + 1;
  v211 = v20 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v210);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = operator new(8uLL);
  v207 = v22;
  *v22 = v21;
  v208 = v22 + 1;
  v209 = v22 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v207);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = operator new(8uLL);
  v204 = v24;
  *v24 = v23;
  v205 = v24 + 1;
  v206 = v24 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v204);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = operator new(8uLL);
  v201 = v26;
  *v26 = v25;
  v202 = v26 + 1;
  v203 = v26 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v201);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = operator new(8uLL);
  v198 = v28;
  *v28 = v27;
  v199 = v28 + 1;
  v200 = v28 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v198);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = operator new(8uLL);
  __p = v30;
  *v30 = v29;
  v196 = v30 + 1;
  v197 = v30 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v232, 8, &v213);
  MIL::IRParameter::Make(&v213, (uint64_t *)&v187);
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v14, "nonzero_data", (uint64_t *)&v187);
  v32 = v187;
  v187 = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  v33 = (std::__shared_weak_count *)v213.n128_u64[1];
  if (v213.n128_u64[1])
  {
    v34 = (unint64_t *)(v213.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (__p)
  {
    v196 = __p;
    operator delete(__p);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v229)
  {
    v230 = v229;
    operator delete(v229);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  v194 = 0;
  v36 = operator new();
  *(_QWORD *)v36 = 0;
  *(_QWORD *)(v36 + 8) = 0;
  *(_QWORD *)(v36 + 16) = 0;
  v232 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v194, (void **)v36);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v232, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v194, 1uLL);
  v37 = v194;
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v229 = v39;
  *v39 = v38;
  v230 = v39 + 1;
  v231 = v39 + 1;
  v232 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 13, (uint64_t)&v229);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v210 = v41;
  *v41 = v40;
  v212 = v41 + 1;
  v211 = v41 + 1;
  v233 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v210);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v207 = v43;
  *v43 = v42;
  v208 = v43 + 1;
  v209 = v43 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v207);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v204 = v45;
  *v45 = v44;
  v205 = v45 + 1;
  v206 = v45 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v204);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v201 = v47;
  *v47 = v46;
  v202 = v47 + 1;
  v203 = v47 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v201);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v198 = v49;
  *v49 = v48;
  v199 = v49 + 1;
  v200 = v49 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v198);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  __p = v51;
  *v51 = v50;
  v196 = v51 + 1;
  v197 = v51 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&__p);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  v187 = v53;
  *v53 = v52;
  v188 = v53 + 1;
  v189 = v53 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v187);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v232, 8, &v190);
  MIL::IRParameter::Make(&v190, &v191);
  v54 = v191;
  v192 = v191;
  if (v191)
  {
    v55 = (_QWORD *)operator new();
    v56 = v191;
    *v55 = &unk_1EA99F888;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v56;
  }
  else
  {
    v55 = 0;
  }
  v193 = v55;
  v191 = 0;
  v57 = v37[2];
  v58 = v37[1];
  if (v58 >= v57)
  {
    v60 = (v58 - *v37) >> 4;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v62 = v57 - *v37;
    if (v62 >> 3 > v61)
      v61 = v62 >> 3;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
      v63 = 0xFFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    v220 = v37 + 2;
    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v37 + 2), v63);
    v66 = (uint64_t *)&v64[16 * v60];
    *v66 = v54;
    v66[1] = (uint64_t)v55;
    v192 = 0;
    v193 = 0;
    v68 = *v37;
    v67 = v37[1];
    if (v67 == *v37)
    {
      v71 = v37[1];
      v69 = &v64[16 * v60];
    }
    else
    {
      v69 = &v64[16 * v60];
      do
      {
        v70 = *((_OWORD *)v67 - 1);
        v67 -= 16;
        *((_OWORD *)v69 - 1) = v70;
        v69 -= 16;
        *(_QWORD *)v67 = 0;
        *((_QWORD *)v67 + 1) = 0;
      }
      while (v67 != v68);
      v71 = *v37;
      v67 = v37[1];
    }
    v59 = (char *)(v66 + 2);
    *v37 = v69;
    v217 = v71;
    v37[1] = (char *)(v66 + 2);
    v218 = v67;
    v72 = v37[2];
    v37[2] = &v64[16 * v65];
    v219 = v72;
    v216 = v71;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v216);
  }
  else
  {
    *(_QWORD *)v58 = v54;
    *((_QWORD *)v58 + 1) = v55;
    v59 = v58 + 16;
    v192 = 0;
    v193 = 0;
  }
  v37[1] = v59;
  v73 = v191;
  v191 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = (std::__shared_weak_count *)v190.n128_u64[1];
  if (v190.n128_u64[1])
  {
    v75 = (unint64_t *)(v190.n128_u64[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (__p)
  {
    v196 = __p;
    operator delete(__p);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v229)
  {
    v230 = v229;
    operator delete(v229);
  }
  *(_OWORD *)v185 = *(_OWORD *)a2;
  v186 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v77 = (uint64_t)v215;
  *(_QWORD *)&v184 = v215;
  if (v215)
  {
    v78 = (_QWORD *)operator new();
    *v78 = &unk_1EA99F8E8;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v77;
  }
  else
  {
    v78 = 0;
  }
  *((_QWORD *)&v184 + 1) = v78;
  v215 = 0;
  *(_QWORD *)&v183 = v194;
  if (v194)
  {
    v79 = (_QWORD *)operator new();
    v80 = v194;
    *v79 = &unk_1EA99F948;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v80;
  }
  else
  {
    v79 = 0;
  }
  *((_QWORD *)&v183 + 1) = v79;
  v194 = 0;
  v227[0] = &unk_1EA99FAC8;
  v227[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateConstexprSparseToDense;
  v228 = v227;
  v226 = 0;
  MIL::IROperator::Make((__int128 *)v185, &v184, &v183, (uint64_t)v227, (uint64_t)v225, a3);
  v81 = v226;
  if (v226 == v225)
  {
    v82 = 4;
    v81 = v225;
  }
  else
  {
    if (!v226)
      goto LABEL_84;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_84:
  v83 = v228;
  if (v228 == v227)
  {
    v84 = 4;
    v83 = v227;
    goto LABEL_88;
  }
  if (v228)
  {
    v84 = 5;
LABEL_88:
    (*(void (**)(void))(*v83 + 8 * v84))();
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
  if (*((_QWORD *)&v183 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (SHIBYTE(v186) < 0)
    operator delete(v185[0]);
  v91 = *a3;
  v223[0] = &off_1EA99FBD8;
  v223[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceConstexprSparseToDense;
  v224 = v223;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v91 + 200))(v91, v223);
  v92 = v224;
  if (v224 == v223)
  {
    v93 = 4;
    v92 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_106;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_106:
  v94 = *a3;
  v221[0] = &off_1EA9A1E98;
  v221[1] = a1;
  v222 = v221;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v94 + 144))(v94, v221);
  v95 = v222;
  if (v222 == v221)
  {
    v96 = 4;
    v95 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_111;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_111:
  MIL::Validation::TensorDTypeConstraints::Make(&v232);
  v97 = v232;
  std::string::basic_string[abi:ne180100]<0>(v179, "nonzero_data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v179, 0, (uint64_t *)&v216);
  v181 = v216;
  if (v216)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = (std::__shared_weak_count_vtbl *)v216;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v182 = v98;
  v216 = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "T");
  (*((void (**)(void **, void **, void **))*v97 + 3))(v97, &v181, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v100 = v182;
  if (v182)
  {
    p_shared_owners = (unint64_t *)&v182->__shared_owners_;
    do
      v102 = __ldaxr(p_shared_owners);
    while (__stlxr(v102 - 1, p_shared_owners));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v216;
  v216 = 0;
  if (v103)
    (*(void (**)(void *))(*(_QWORD *)v103 + 8))(v103);
  if (v180 < 0)
    operator delete(v179[0]);
  v104 = v232;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v216);
  v175 = v216;
  if (v216)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = (std::__shared_weak_count_vtbl *)v216;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v176 = v105;
  v216 = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "T");
  (*((void (**)(void **, void **, void **))*v104 + 3))(v104, &v175, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v107 = v176;
  if (v176)
  {
    v108 = (unint64_t *)&v176->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v216;
  v216 = 0;
  if (v110)
    (*(void (**)(void *))(*(_QWORD *)v110 + 8))(v110);
  v111 = *a3;
  v171 = v232;
  if (v232)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v232;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = (std::__shared_weak_count_vtbl *)v113;
  }
  else
  {
    v112 = 0;
  }
  v172 = v112;
  v232 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v111 + 56))(v111, &v171);
  v114 = v172;
  if (v172)
  {
    v115 = (unint64_t *)&v172->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v232;
  v232 = 0;
  if (v117)
    (*((void (**)(void **))*v117 + 1))(v117);
  MIL::Validation::TensorRankValueConstraints::Make(&v232);
  v118 = v232;
  std::string::basic_string[abi:ne180100]<0>(v167, "mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&v216);
  v169 = v216;
  if (v216)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)v216;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v170 = v119;
  v216 = 0;
  (*((void (**)(void **, void **, uint64_t, uint64_t))*v118 + 4))(v118, &v169, 1, 0x7FFFFFFFFFFFFFFFLL);
  v121 = v170;
  if (v170)
  {
    v122 = (unint64_t *)&v170->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v216;
  v216 = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  if (v168 < 0)
    operator delete(v167[0]);
  v125 = v232;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v216);
  v165 = v216;
  if (v216)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)v216;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v166 = v126;
  v216 = 0;
  (*((void (**)(void **, void **, uint64_t, uint64_t))*v125 + 4))(v125, &v165, 1, 0x7FFFFFFFFFFFFFFFLL);
  v128 = v166;
  if (v166)
  {
    v129 = (unint64_t *)&v166->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v216;
  v216 = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  v132 = *a3;
  v163 = v232;
  if (v232)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v232;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v164 = v133;
  v232 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v163);
  v135 = v164;
  if (v164)
  {
    v136 = (unint64_t *)&v164->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v232;
  v232 = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v232);
  v139 = v232;
  std::string::basic_string[abi:ne180100]<0>(v159, "nonzero_data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v159, 0, (uint64_t *)&v216);
  v161 = v216;
  if (v216)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = (std::__shared_weak_count_vtbl *)v216;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v162 = v140;
  v216 = 0;
  std::string::basic_string[abi:ne180100]<0>(v157, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v139 + 3))(v139, &v161, 0, v157);
  if (v158 < 0)
    operator delete(v157[0]);
  v142 = v162;
  if (v162)
  {
    v143 = (unint64_t *)&v162->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v216;
  v216 = 0;
  if (v145)
    (*(void (**)(void *))(*(_QWORD *)v145 + 8))(v145);
  if (v160 < 0)
    operator delete(v159[0]);
  v146 = *a3;
  v155 = v232;
  if (v232)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = v232;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = (std::__shared_weak_count_vtbl *)v148;
  }
  else
  {
    v147 = 0;
  }
  v156 = v147;
  v232 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v146 + 56))(v146, &v155);
  v149 = v156;
  if (v156)
  {
    v150 = (unint64_t *)&v156->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v232;
  v232 = 0;
  if (v152)
    (*((void (**)(void **))*v152 + 1))(v152);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v194, 0);
  result = (uint64_t)v215;
  if (v215)
  {
    v154 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v215);
    return MEMORY[0x1E0C023A0](v154, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A2AC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 136);
  *(_QWORD *)(v59 - 136) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x240], 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A1D18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A1D18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(uint64_t a1, MIL::MILContext *a2, const MIL::IROperation *a3)
{
  return MIL::Operators::Prototype::prototype::CustomGetConstant::GetConstantConstexprBlockwiseShiftScale(*(MIL::Operators::Prototype::prototype::CustomGetConstant **)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A1D98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A1D98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(uint64_t a1, MIL::MILContext *a2, const MIL::IROperation *a3)
{
  return MIL::Operators::Prototype::prototype::CustomGetConstant::GetConstantConstexprCast(*(MIL::Operators::Prototype::prototype::CustomGetConstant **)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A1E18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A1E18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(uint64_t a1, MIL::MILContext *a2, const MIL::IROperation *a3)
{
  return MIL::Operators::Prototype::prototype::CustomGetConstant::GetConstantConstexprLutToDense(*(MIL::Operators::Prototype::prototype::CustomGetConstant **)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A1E98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A1E98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(uint64_t a1, MIL::MILContext *a2, const MIL::IROperation *a3)
{
  return MIL::Operators::Prototype::prototype::CustomGetConstant::GetConstantConstexprSparseToDense(*(MIL::Operators::Prototype::prototype::CustomGetConstant **)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Prototype::prototype::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceDequantize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDequantize(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0A2B564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceDynamicDequantize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDynamicDequantize(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0A2B5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceDynamicQuantize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDynamicQuantize(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0A2B68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceQuantize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceQuantize(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0A2B720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::Dequantize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  char **v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  char **v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  void **v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  void **v72;
  char *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  char **v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  void **v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  std::__shared_weak_count_vtbl *v101;
  void **v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  void **v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count_vtbl *v115;
  void **v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  void **v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void **v129;
  void **v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  void **v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  void **v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  void **v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count_vtbl *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  void **v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void **v164;
  uint64_t result;
  uint64_t v166;
  void **v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void **v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  void *v197[2];
  char v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  void *v203[2];
  char v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  __int128 v207;
  __int128 v208;
  void *v209[2];
  uint64_t v210;
  __n128 v211;
  void *v212;
  __n128 v213;
  __n128 v214;
  __n128 v215;
  void *__p;
  void *v217;
  _QWORD *v218;
  __n128 v219;
  char **v220;
  _QWORD *v221;
  _QWORD v222[3];
  _QWORD *v223;
  _BYTE v224[24];
  _BYTE *v225;
  _QWORD v226[3];
  _QWORD *v227;
  void *v228;
  uint64_t v229;
  _QWORD *v230;
  void *v231;
  uint64_t v232;
  _QWORD *v233;
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v235;
  void (__cdecl **v236)(std::__shared_weak_count *__hidden);
  void **v237;
  void **v238;
  uint64_t v239;
  uint64_t v240;
  char **v241;
  uint64_t v242;

  v242 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v221 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v235 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v236 = &v8->~__shared_weak_count_0;
  v237 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v231 = v10;
  *v10 = v9;
  v232 = (uint64_t)(v10 + 1);
  v233 = v10 + 1;
  v238 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v231);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v218 = v12 + 1;
  v217 = v12 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&__p);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v228 = v14;
  *v14 = v13;
  v229 = (uint64_t)(v14 + 1);
  v230 = v14 + 1;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v228);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v237, 4, &v219);
  MIL::IRParameter::Make(&v219, (uint64_t *)&v220);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", (uint64_t *)&v220);
  v15 = v220;
  v220 = 0;
  if (v15)
    (*((void (**)(char **))*v15 + 1))(v15);
  v16 = (std::__shared_weak_count *)v219.n128_u64[1];
  if (v219.n128_u64[1])
  {
    v17 = (unint64_t *)(v219.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v228)
  {
    v229 = (uint64_t)v228;
    operator delete(v228);
  }
  if (__p)
  {
    v217 = __p;
    operator delete(__p);
  }
  if (v231)
  {
    v232 = (uint64_t)v231;
    operator delete(v231);
  }
  if (Scalar)
  {
    v235 = Scalar;
    operator delete(Scalar);
  }
  v19 = v221;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (void **)operator new(8uLL);
  v237 = v21;
  *v21 = (void *)v20;
  v238 = v21 + 1;
  v239 = (uint64_t)(v21 + 1);
  v231 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v237);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  v235 = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v236 = &v23->~__shared_weak_count_0;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v231, 2, &v215);
  MIL::IRParameter::Make(&v215, (uint64_t *)&__p);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "scale", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v215.n128_u64[1];
  if (v215.n128_u64[1])
  {
    v27 = (unint64_t *)(v215.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (Scalar)
  {
    v235 = Scalar;
    operator delete(Scalar);
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v221;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v235 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v236 = &v31->~__shared_weak_count_0;
  v237 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  v231 = v33;
  *v33 = v32;
  v232 = (uint64_t)(v33 + 1);
  v233 = v33 + 1;
  v238 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v231);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  __p = v35;
  *v35 = v34;
  v218 = v35 + 1;
  v217 = v35 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&__p);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v228 = v37;
  *v37 = v36;
  v229 = (uint64_t)(v37 + 1);
  v230 = v37 + 1;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v228);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v237, 4, &v214);
  MIL::IRParameter::Make(&v214, (uint64_t *)&v220);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v29, "zero_point", (uint64_t *)&v220);
  v39 = v220;
  v220 = 0;
  if (v39)
    (*((void (**)(char **))*v39 + 1))(v39);
  v40 = (std::__shared_weak_count *)v214.n128_u64[1];
  if (v214.n128_u64[1])
  {
    v41 = (unint64_t *)(v214.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v228)
  {
    v229 = (uint64_t)v228;
    operator delete(v228);
  }
  if (__p)
  {
    v217 = __p;
    operator delete(__p);
  }
  if (v231)
  {
    v232 = (uint64_t)v231;
    operator delete(v231);
  }
  if (Scalar)
  {
    v235 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 48))(*((_QWORD *)v38 + 5), 1);
  v43 = v221;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v213);
  MIL::IRParameter::Make(&v213, (uint64_t *)&v237);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v43, "axis", (uint64_t *)&v237);
  v45 = v237;
  v237 = 0;
  if (v45)
    (*((void (**)(void **))*v45 + 1))(v45);
  v46 = (std::__shared_weak_count *)v213.n128_u64[1];
  if (v213.n128_u64[1])
  {
    v47 = (unint64_t *)(v213.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v220 = 0;
  v49 = operator new();
  *(_QWORD *)v49 = 0;
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = 0;
  v237 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v220, (void **)v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v237, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v220, 1uLL);
  v50 = v220;
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v52;
  v52->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v51;
  v235 = (std::__shared_weak_count_vtbl *)&v52->~__shared_weak_count_0;
  v236 = &v52->~__shared_weak_count_0;
  v228 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v231 = v54;
  *v54 = v53;
  v232 = (uint64_t)(v54 + 1);
  v233 = v54 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v231);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v228, 2, &v211);
  MIL::IRParameter::Make(&v211, (uint64_t *)&v212);
  v55 = v212;
  __p = v212;
  if (v212)
  {
    v56 = (_QWORD *)operator new();
    v57 = v212;
    *v56 = &unk_1EA99F888;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  v217 = v56;
  v212 = 0;
  v58 = v50[2];
  v59 = v50[1];
  if (v59 >= v58)
  {
    v61 = (v59 - *v50) >> 4;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v63 = v58 - *v50;
    if (v63 >> 3 > v62)
      v62 = v63 >> 3;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
      v64 = 0xFFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    v241 = v50 + 2;
    v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v50 + 2), v64);
    v67 = &v65[16 * v61];
    *(_QWORD *)v67 = v55;
    *((_QWORD *)v67 + 1) = v56;
    v217 = 0;
    __p = 0;
    v69 = *v50;
    v68 = v50[1];
    if (v68 == *v50)
    {
      v72 = (void **)v50[1];
      v70 = &v65[16 * v61];
    }
    else
    {
      v70 = &v65[16 * v61];
      do
      {
        v71 = *((_OWORD *)v68 - 1);
        v68 -= 16;
        *((_OWORD *)v70 - 1) = v71;
        v70 -= 16;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
      }
      while (v68 != v69);
      v72 = (void **)*v50;
      v68 = v50[1];
    }
    v60 = v67 + 16;
    *v50 = v70;
    v237 = v72;
    v238 = v72;
    v50[1] = v67 + 16;
    v239 = (uint64_t)v68;
    v73 = v50[2];
    v50[2] = &v65[16 * v66];
    v240 = (uint64_t)v73;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v237);
  }
  else
  {
    *(_QWORD *)v59 = v55;
    *((_QWORD *)v59 + 1) = v56;
    v60 = v59 + 16;
    v217 = 0;
    __p = 0;
  }
  v50[1] = v60;
  v74 = v212;
  v212 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v211.n128_u64[1];
  if (v211.n128_u64[1])
  {
    v76 = (unint64_t *)(v211.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v231)
  {
    v232 = (uint64_t)v231;
    operator delete(v231);
  }
  if (Scalar)
  {
    v235 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v209 = *(_OWORD *)a2;
  v210 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v78 = (uint64_t)v221;
  *(_QWORD *)&v208 = v221;
  if (v221)
  {
    v79 = (_QWORD *)operator new();
    *v79 = &unk_1EA99F8E8;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v78;
  }
  else
  {
    v79 = 0;
  }
  *((_QWORD *)&v208 + 1) = v79;
  v221 = 0;
  *(_QWORD *)&v207 = v220;
  if (v220)
  {
    v80 = (_QWORD *)operator new();
    v81 = v220;
    *v80 = &unk_1EA99F948;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v81;
  }
  else
  {
    v80 = 0;
  }
  *((_QWORD *)&v207 + 1) = v80;
  v220 = 0;
  v226[0] = &unk_1EA99FAC8;
  v226[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateDequantize;
  v227 = v226;
  v225 = 0;
  MIL::IROperator::Make((__int128 *)v209, &v208, &v207, (uint64_t)v226, (uint64_t)v224, a3);
  v82 = v225;
  if (v225 == v224)
  {
    v83 = 4;
    v82 = v224;
  }
  else
  {
    if (!v225)
      goto LABEL_88;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_88:
  v84 = v227;
  if (v227 == v226)
  {
    v85 = 4;
    v84 = v226;
    goto LABEL_92;
  }
  if (v227)
  {
    v85 = 5;
LABEL_92:
    (*(void (**)(void))(*v84 + 8 * v85))();
  }
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  if (*((_QWORD *)&v207 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
  if (*((_QWORD *)&v208 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (SHIBYTE(v210) < 0)
    operator delete(v209[0]);
  v92 = *a3;
  v222[0] = &off_1EA99FBD8;
  v222[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceDequantize;
  v223 = v222;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v92 + 200))(v92, v222);
  v93 = v223;
  if (v223 == v222)
  {
    v94 = 4;
    v93 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_110;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_110:
  MIL::Validation::TensorDTypeConstraints::Make(&v237);
  v95 = v237;
  std::string::basic_string[abi:ne180100]<0>(v203, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v203, 0, (uint64_t *)&Scalar);
  v205 = Scalar;
  if (Scalar)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = Scalar;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v97;
  }
  else
  {
    v96 = 0;
  }
  v206 = v96;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v201, "QT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v95 + 3))(v95, &v205, v201);
  if (v202 < 0)
    operator delete(v201[0]);
  v98 = v206;
  if (v206)
  {
    p_shared_owners = (unint64_t *)&v206->__shared_owners_;
    do
      v100 = __ldaxr(p_shared_owners);
    while (__stlxr(v100 - 1, p_shared_owners));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = Scalar;
  Scalar = 0;
  if (v101)
    (*((void (**)(std::__shared_weak_count_vtbl *))v101->~__shared_weak_count + 1))(v101);
  if (v204 < 0)
    operator delete(v203[0]);
  v102 = v237;
  std::string::basic_string[abi:ne180100]<0>(v197, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v197, 0, (uint64_t *)&Scalar);
  v199 = Scalar;
  if (Scalar)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = Scalar;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v200 = v103;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "FT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v102 + 3))(v102, &v199, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v105 = v200;
  if (v200)
  {
    v106 = (unint64_t *)&v200->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = Scalar;
  Scalar = 0;
  if (v108)
    (*((void (**)(std::__shared_weak_count_vtbl *))v108->~__shared_weak_count + 1))(v108);
  if (v198 < 0)
    operator delete(v197[0]);
  v109 = v237;
  std::string::basic_string[abi:ne180100]<0>(v191, "zero_point");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v191, 1, (uint64_t *)&Scalar);
  v193 = Scalar;
  if (Scalar)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = Scalar;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v194 = v110;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "QT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v109 + 3))(v109, &v193, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v112 = v194;
  if (v194)
  {
    v113 = (unint64_t *)&v194->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = Scalar;
  Scalar = 0;
  if (v115)
    (*((void (**)(std::__shared_weak_count_vtbl *))v115->~__shared_weak_count + 1))(v115);
  if (v192 < 0)
    operator delete(v191[0]);
  v116 = v237;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v187 = Scalar;
  if (Scalar)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = Scalar;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v188 = v117;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "FT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v116 + 3))(v116, &v187, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v119 = v188;
  if (v188)
  {
    v120 = (unint64_t *)&v188->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = Scalar;
  Scalar = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  v123 = *a3;
  v183 = v237;
  if (v237)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = v237;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = (std::__shared_weak_count_vtbl *)v125;
  }
  else
  {
    v124 = 0;
  }
  v184 = v124;
  v237 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v123 + 56))(v123, &v183);
  v126 = v184;
  if (v184)
  {
    v127 = (unint64_t *)&v184->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v237;
  v237 = 0;
  if (v129)
    (*((void (**)(void **))*v129 + 1))(v129);
  MIL::Validation::TensorRankValueConstraints::Make(&v237);
  v130 = v237;
  std::string::basic_string[abi:ne180100]<0>(v179, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v179, 0, (uint64_t *)&Scalar);
  v181 = Scalar;
  if (Scalar)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = Scalar;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v182 = v131;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v130 + 4))(v130, &v181, 1, 0x7FFFFFFFFFFFFFFFLL);
  v133 = v182;
  if (v182)
  {
    v134 = (unint64_t *)&v182->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = Scalar;
  Scalar = 0;
  if (v136)
    (*((void (**)(std::__shared_weak_count_vtbl *))v136->~__shared_weak_count + 1))(v136);
  if (v180 < 0)
    operator delete(v179[0]);
  v137 = v237;
  std::string::basic_string[abi:ne180100]<0>(v175, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v175, 0, (uint64_t *)&Scalar);
  v177 = Scalar;
  if (Scalar)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = Scalar;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v178 = v138;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))*v137 + 4))(v137, &v177, 0, 1);
  v140 = v178;
  if (v178)
  {
    v141 = (unint64_t *)&v178->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = Scalar;
  Scalar = 0;
  if (v143)
    (*((void (**)(std::__shared_weak_count_vtbl *))v143->~__shared_weak_count + 1))(v143);
  if (v176 < 0)
    operator delete(v175[0]);
  v144 = v237;
  std::string::basic_string[abi:ne180100]<0>(v171, "zero_point");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v171, 1, (uint64_t *)&Scalar);
  v173 = Scalar;
  if (Scalar)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = Scalar;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v174 = v145;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))*v144 + 4))(v144, &v173, 0, 1);
  v147 = v174;
  if (v174)
  {
    v148 = (unint64_t *)&v174->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = Scalar;
  Scalar = 0;
  if (v150)
    (*((void (**)(std::__shared_weak_count_vtbl *))v150->~__shared_weak_count + 1))(v150);
  if (v172 < 0)
    operator delete(v171[0]);
  v151 = v237;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v169 = Scalar;
  if (Scalar)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = Scalar;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v170 = v152;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v151 + 4))(v151, &v169, 1, 0x7FFFFFFFFFFFFFFFLL);
  v154 = v170;
  if (v170)
  {
    v155 = (unint64_t *)&v170->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = Scalar;
  Scalar = 0;
  if (v157)
    (*((void (**)(std::__shared_weak_count_vtbl *))v157->~__shared_weak_count + 1))(v157);
  v158 = *a3;
  v167 = v237;
  if (v237)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = v237;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = (std::__shared_weak_count_vtbl *)v160;
  }
  else
  {
    v159 = 0;
  }
  v168 = v159;
  v237 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v158 + 56))(v158, &v167);
  v161 = v168;
  if (v168)
  {
    v162 = (unint64_t *)&v168->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v237;
  v237 = 0;
  if (v164)
    (*((void (**)(void **))*v164 + 1))(v164);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v220, 0);
  result = (uint64_t)v221;
  if (v221)
  {
    v166 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v221);
    return MEMORY[0x1E0C023A0](v166, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A2CAF4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x238], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x240], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::DynamicDequantize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  char **v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  char **v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  void **v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  char **v49;
  uint64_t v50;
  std::__shared_weak_count_vtbl *v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  void **v71;
  char *v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char **v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  void **v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void **v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void **v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  void **v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count_vtbl *v142;
  void **v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  void **v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count_vtbl *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  void **v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  void **v163;
  uint64_t result;
  uint64_t v165;
  void **v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  void *v170[2];
  char v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  void *v174[2];
  char v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  void **v182;
  std::__shared_weak_count *v183;
  void *v184[2];
  char v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  void *v190[2];
  char v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  void *v194[2];
  char v195;
  void *v196[2];
  char v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202[2];
  char v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  __int128 v206;
  __int128 v207;
  void *v208[2];
  uint64_t v209;
  __n128 v210;
  void *v211;
  __n128 v212;
  __n128 v213;
  __n128 v214;
  void *__p;
  void *v216;
  _QWORD *v217;
  __n128 v218;
  char **v219;
  _QWORD *v220;
  _QWORD v221[3];
  _QWORD *v222;
  _BYTE v223[24];
  _BYTE *v224;
  _QWORD v225[3];
  _QWORD *v226;
  void *v227;
  uint64_t v228;
  _QWORD *v229;
  void *v230;
  uint64_t v231;
  _QWORD *v232;
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v234;
  void (__cdecl **v235)(std::__shared_weak_count *__hidden);
  void **v236;
  void **v237;
  uint64_t v238;
  uint64_t v239;
  char **v240;
  uint64_t v241;

  v241 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v220 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v234 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v235 = &v8->~__shared_weak_count_0;
  v236 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v230 = v10;
  *v10 = v9;
  v231 = (uint64_t)(v10 + 1);
  v232 = v10 + 1;
  v237 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v230);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v217 = v12 + 1;
  v216 = v12 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&__p);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v227 = v14;
  *v14 = v13;
  v228 = (uint64_t)(v14 + 1);
  v229 = v14 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v227);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v236, 4, &v218);
  MIL::IRParameter::Make(&v218, (uint64_t *)&v219);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", (uint64_t *)&v219);
  v15 = v219;
  v219 = 0;
  if (v15)
    (*((void (**)(char **))*v15 + 1))(v15);
  v16 = (std::__shared_weak_count *)v218.n128_u64[1];
  if (v218.n128_u64[1])
  {
    v17 = (unint64_t *)(v218.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v227)
  {
    v228 = (uint64_t)v227;
    operator delete(v227);
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  if (v230)
  {
    v231 = (uint64_t)v230;
    operator delete(v230);
  }
  if (Scalar)
  {
    v234 = Scalar;
    operator delete(Scalar);
  }
  v19 = v220;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (void **)operator new(8uLL);
  v236 = v21;
  *v21 = (void *)v20;
  v237 = v21 + 1;
  v238 = (uint64_t)(v21 + 1);
  v230 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v236);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  v234 = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v235 = &v23->~__shared_weak_count_0;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v230, 2, &v214);
  MIL::IRParameter::Make(&v214, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "scale", (uint64_t *)&__p);
  v24 = __p;
  __p = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v214.n128_u64[1];
  if (v214.n128_u64[1])
  {
    v26 = (unint64_t *)(v214.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (Scalar)
  {
    v234 = Scalar;
    operator delete(Scalar);
  }
  if (v236)
  {
    v237 = v236;
    operator delete(v236);
  }
  v28 = v220;
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v30;
  v30->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v234 = (std::__shared_weak_count_vtbl *)&v30->~__shared_weak_count_0;
  v235 = &v30->~__shared_weak_count_0;
  v236 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&Scalar);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v230 = v32;
  *v32 = v31;
  v231 = (uint64_t)(v32 + 1);
  v232 = v32 + 1;
  v237 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v230);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  __p = v34;
  *v34 = v33;
  v217 = v34 + 1;
  v216 = v34 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&__p);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v227 = v36;
  *v36 = v35;
  v228 = (uint64_t)(v36 + 1);
  v229 = v36 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v227);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v236, 4, &v213);
  MIL::IRParameter::Make(&v213, (uint64_t *)&v219);
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v28, "zero_point", (uint64_t *)&v219);
  v38 = v219;
  v219 = 0;
  if (v38)
    (*((void (**)(char **))*v38 + 1))(v38);
  v39 = (std::__shared_weak_count *)v213.n128_u64[1];
  if (v213.n128_u64[1])
  {
    v40 = (unint64_t *)(v213.n128_u64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v227)
  {
    v228 = (uint64_t)v227;
    operator delete(v227);
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  if (v230)
  {
    v231 = (uint64_t)v230;
    operator delete(v230);
  }
  if (Scalar)
  {
    v234 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 48))(*((_QWORD *)v37 + 5), 1);
  v42 = v220;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v212);
  MIL::IRParameter::Make(&v212, (uint64_t *)&v236);
  v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v42, "axis", (uint64_t *)&v236);
  v44 = v236;
  v236 = 0;
  if (v44)
    (*((void (**)(void **))*v44 + 1))(v44);
  v45 = (std::__shared_weak_count *)v212.n128_u64[1];
  if (v212.n128_u64[1])
  {
    v46 = (unint64_t *)(v212.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 32))(*((_QWORD *)v43 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 48))(*((_QWORD *)v43 + 5), 1);
  v219 = 0;
  v48 = operator new();
  *(_QWORD *)v48 = 0;
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v48 + 16) = 0;
  v236 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, (void **)v48);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v236, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v219, 1uLL);
  v49 = v219;
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v51;
  v51->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v50;
  v234 = (std::__shared_weak_count_vtbl *)&v51->~__shared_weak_count_0;
  v235 = &v51->~__shared_weak_count_0;
  v227 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  v230 = v53;
  *v53 = v52;
  v231 = (uint64_t)(v53 + 1);
  v232 = v53 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v230);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v227, 2, &v210);
  MIL::IRParameter::Make(&v210, (uint64_t *)&v211);
  v54 = v211;
  __p = v211;
  if (v211)
  {
    v55 = (_QWORD *)operator new();
    v56 = v211;
    *v55 = &unk_1EA99F888;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v56;
  }
  else
  {
    v55 = 0;
  }
  v216 = v55;
  v211 = 0;
  v57 = v49[2];
  v58 = v49[1];
  if (v58 >= v57)
  {
    v60 = (v58 - *v49) >> 4;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v62 = v57 - *v49;
    if (v62 >> 3 > v61)
      v61 = v62 >> 3;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
      v63 = 0xFFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    v240 = v49 + 2;
    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v49 + 2), v63);
    v66 = &v64[16 * v60];
    *(_QWORD *)v66 = v54;
    *((_QWORD *)v66 + 1) = v55;
    v216 = 0;
    __p = 0;
    v68 = *v49;
    v67 = v49[1];
    if (v67 == *v49)
    {
      v71 = (void **)v49[1];
      v69 = &v64[16 * v60];
    }
    else
    {
      v69 = &v64[16 * v60];
      do
      {
        v70 = *((_OWORD *)v67 - 1);
        v67 -= 16;
        *((_OWORD *)v69 - 1) = v70;
        v69 -= 16;
        *(_QWORD *)v67 = 0;
        *((_QWORD *)v67 + 1) = 0;
      }
      while (v67 != v68);
      v71 = (void **)*v49;
      v67 = v49[1];
    }
    v59 = v66 + 16;
    *v49 = v69;
    v236 = v71;
    v237 = v71;
    v49[1] = v66 + 16;
    v238 = (uint64_t)v67;
    v72 = v49[2];
    v49[2] = &v64[16 * v65];
    v239 = (uint64_t)v72;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v236);
  }
  else
  {
    *(_QWORD *)v58 = v54;
    *((_QWORD *)v58 + 1) = v55;
    v59 = v58 + 16;
    v216 = 0;
    __p = 0;
  }
  v49[1] = v59;
  v73 = v211;
  v211 = 0;
  if (v73)
    (*(void (**)(void *))(*(_QWORD *)v73 + 8))(v73);
  v74 = (std::__shared_weak_count *)v210.n128_u64[1];
  if (v210.n128_u64[1])
  {
    v75 = (unint64_t *)(v210.n128_u64[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v230)
  {
    v231 = (uint64_t)v230;
    operator delete(v230);
  }
  if (Scalar)
  {
    v234 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v208 = *(_OWORD *)a2;
  v209 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v77 = (uint64_t)v220;
  *(_QWORD *)&v207 = v220;
  if (v220)
  {
    v78 = (_QWORD *)operator new();
    *v78 = &unk_1EA99F8E8;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v77;
  }
  else
  {
    v78 = 0;
  }
  *((_QWORD *)&v207 + 1) = v78;
  v220 = 0;
  *(_QWORD *)&v206 = v219;
  if (v219)
  {
    v79 = (_QWORD *)operator new();
    v80 = v219;
    *v79 = &unk_1EA99F948;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v80;
  }
  else
  {
    v79 = 0;
  }
  *((_QWORD *)&v206 + 1) = v79;
  v219 = 0;
  v225[0] = &unk_1EA99FAC8;
  v225[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateDynamicDequantize;
  v226 = v225;
  v224 = 0;
  MIL::IROperator::Make((__int128 *)v208, &v207, &v206, (uint64_t)v225, (uint64_t)v223, a3);
  v81 = v224;
  if (v224 == v223)
  {
    v82 = 4;
    v81 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_88;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_88:
  v83 = v226;
  if (v226 == v225)
  {
    v84 = 4;
    v83 = v225;
    goto LABEL_92;
  }
  if (v226)
  {
    v84 = 5;
LABEL_92:
    (*(void (**)(void))(*v83 + 8 * v84))();
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
  if (*((_QWORD *)&v206 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  if (*((_QWORD *)&v207 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (SHIBYTE(v209) < 0)
    operator delete(v208[0]);
  v91 = *a3;
  v221[0] = &off_1EA99FBD8;
  v221[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceDynamicDequantize;
  v222 = v221;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v91 + 200))(v91, v221);
  v92 = v222;
  if (v222 == v221)
  {
    v93 = 4;
    v92 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_110;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_110:
  MIL::Validation::TensorDTypeConstraints::Make(&v236);
  v94 = v236;
  std::string::basic_string[abi:ne180100]<0>(v202, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v202, 0, (uint64_t *)&Scalar);
  v204 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v205 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "QT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v204, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v97 = v205;
  if (v205)
  {
    p_shared_owners = (unint64_t *)&v205->__shared_owners_;
    do
      v99 = __ldaxr(p_shared_owners);
    while (__stlxr(v99 - 1, p_shared_owners));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v203 < 0)
    operator delete(v202[0]);
  v101 = v236;
  std::string::basic_string[abi:ne180100]<0>(v196, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v196, 0, (uint64_t *)&Scalar);
  v198 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v199 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v194, "FT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v101 + 3))(v101, &v198, v194);
  if (v195 < 0)
    operator delete(v194[0]);
  v104 = v199;
  if (v199)
  {
    v105 = (unint64_t *)&v199->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v197 < 0)
    operator delete(v196[0]);
  v108 = v236;
  std::string::basic_string[abi:ne180100]<0>(v190, "zero_point");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v190, 1, (uint64_t *)&Scalar);
  v192 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v193 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v188, "QT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v108 + 3))(v108, &v192, v188);
  if (v189 < 0)
    operator delete(v188[0]);
  v111 = v193;
  if (v193)
  {
    v112 = (unint64_t *)&v193->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v191 < 0)
    operator delete(v190[0]);
  v115 = v236;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v186 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v187 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v184, "FT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v115 + 3))(v115, &v186, v184);
  if (v185 < 0)
    operator delete(v184[0]);
  v118 = v187;
  if (v187)
  {
    v119 = (unint64_t *)&v187->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  v122 = *a3;
  v182 = v236;
  if (v236)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v236;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  }
  else
  {
    v123 = 0;
  }
  v183 = v123;
  v236 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v122 + 56))(v122, &v182);
  v125 = v183;
  if (v183)
  {
    v126 = (unint64_t *)&v183->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v236;
  v236 = 0;
  if (v128)
    (*((void (**)(void **))*v128 + 1))(v128);
  MIL::Validation::TensorRankValueConstraints::Make(&v236);
  v129 = v236;
  std::string::basic_string[abi:ne180100]<0>(v178, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v178, 0, (uint64_t *)&Scalar);
  v180 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v181 = v130;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v129 + 4))(v129, &v180, 1, 0x7FFFFFFFFFFFFFFFLL);
  v132 = v181;
  if (v181)
  {
    v133 = (unint64_t *)&v181->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  if (v179 < 0)
    operator delete(v178[0]);
  v136 = v236;
  std::string::basic_string[abi:ne180100]<0>(v174, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v174, 0, (uint64_t *)&Scalar);
  v176 = Scalar;
  if (Scalar)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = Scalar;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v177 = v137;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))*v136 + 4))(v136, &v176, 0, 1);
  v139 = v177;
  if (v177)
  {
    v140 = (unint64_t *)&v177->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = Scalar;
  Scalar = 0;
  if (v142)
    (*((void (**)(std::__shared_weak_count_vtbl *))v142->~__shared_weak_count + 1))(v142);
  if (v175 < 0)
    operator delete(v174[0]);
  v143 = v236;
  std::string::basic_string[abi:ne180100]<0>(v170, "zero_point");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v170, 1, (uint64_t *)&Scalar);
  v172 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v173 = v144;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))*v143 + 4))(v143, &v172, 0, 1);
  v146 = v173;
  if (v173)
  {
    v147 = (unint64_t *)&v173->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*((void (**)(std::__shared_weak_count_vtbl *))v149->~__shared_weak_count + 1))(v149);
  if (v171 < 0)
    operator delete(v170[0]);
  v150 = v236;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v168 = Scalar;
  if (Scalar)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = Scalar;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v169 = v151;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v150 + 4))(v150, &v168, 1, 0x7FFFFFFFFFFFFFFFLL);
  v153 = v169;
  if (v169)
  {
    v154 = (unint64_t *)&v169->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = Scalar;
  Scalar = 0;
  if (v156)
    (*((void (**)(std::__shared_weak_count_vtbl *))v156->~__shared_weak_count + 1))(v156);
  v157 = *a3;
  v166 = v236;
  if (v236)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = v236;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = (std::__shared_weak_count_vtbl *)v159;
  }
  else
  {
    v158 = 0;
  }
  v167 = v158;
  v236 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v157 + 56))(v157, &v166);
  v160 = v167;
  if (v167)
  {
    v161 = (unint64_t *)&v167->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = v236;
  v236 = 0;
  if (v163)
    (*((void (**)(void **))*v163 + 1))(v163);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, 0);
  result = (uint64_t)v220;
  if (v220)
  {
    v165 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v220);
    return MEMORY[0x1E0C023A0](v165, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A2E450(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x238], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x240], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::DynamicQuantize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  void **v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count_vtbl *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count_vtbl *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  uint64_t i;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t result;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void *v97[2];
  char v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void *v102;
  std::__shared_weak_count *v103;
  void *v104[2];
  char v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  void *v108;
  std::__shared_weak_count *v109;
  void *v110[2];
  char v111;
  void *v112[2];
  char v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  void **v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  uint64_t v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  uint64_t v126;
  _QWORD *v127;
  void *__p;
  void *v129;
  _QWORD *v130;
  uint64_t v131[3];
  uint64_t v132[3];
  _QWORD v133[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v135;
  void (__cdecl **v136)(std::__shared_weak_count *__hidden);
  _QWORD v137[3];
  _QWORD *v138;
  _BYTE v139[24];
  _BYTE *v140;
  _QWORD v141[3];
  _QWORD *v142;
  void **v143[3];

  v143[2] = *(void ***)MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v127 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v129 = v8 + 1;
  v130 = v8 + 1;
  v143[0] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v135 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v136 = &v10->~__shared_weak_count_0;
  v143[1] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v143, 2, &v125);
  MIL::IRParameter::Make(&v125, &v126);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", &v126);
  v11 = v126;
  v126 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v125.n128_u64[1];
  if (v125.n128_u64[1])
  {
    v13 = (unint64_t *)(v125.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (Scalar)
  {
    v135 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v129 = __p;
    operator delete(__p);
  }
  v15 = v127;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v124);
  MIL::IRParameter::Make(&v124, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v15, "has_zero_point", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v124.n128_u64[1];
  if (v124.n128_u64[1])
  {
    v19 = (unint64_t *)(v124.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v21 = v127;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v123);
  MIL::IRParameter::Make(&v123, (uint64_t *)&__p);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v21, "axis", (uint64_t *)&__p);
  v23 = __p;
  __p = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v123.n128_u64[1];
  if (v123.n128_u64[1])
  {
    v25 = (unint64_t *)(v123.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 32))(*((_QWORD *)v22 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 48))(*((_QWORD *)v22 + 5), 1);
  v27 = v127;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v122);
  MIL::IRParameter::Make(&v122, (uint64_t *)&__p);
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v27, "output_dtype", (uint64_t *)&__p);
  v29 = __p;
  __p = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)v122.n128_u64[1];
  if (v122.n128_u64[1])
  {
    v31 = (unint64_t *)(v122.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v143[0] = 0;
  *(_OWORD *)v120 = *(_OWORD *)a2;
  v121 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v33 = (uint64_t)v127;
  v118 = (uint64_t)v127;
  if (v127)
  {
    v34 = (std::__shared_weak_count *)operator new();
    v34->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v34->__shared_owners_ = 0;
    v34->__shared_weak_owners_ = 0;
    v34[1].__vftable = (std::__shared_weak_count_vtbl *)v33;
    v119 = v34;
    v127 = 0;
    v116 = v143[0];
    if (v143[0])
    {
      v35 = (std::__shared_weak_count *)operator new();
      v36 = v143[0];
      v35->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F948;
      v35->__shared_owners_ = 0;
      v35->__shared_weak_owners_ = 0;
      v35[1].__vftable = (std::__shared_weak_count_vtbl *)v36;
    }
    else
    {
      v35 = 0;
    }
  }
  else
  {
    v35 = 0;
    v119 = 0;
    v127 = 0;
    v116 = 0;
  }
  v117 = v35;
  v143[0] = 0;
  v141[0] = &unk_1EA99FAC8;
  v141[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateDynamicQuantize;
  v142 = v141;
  v140 = 0;
  MIL::IROperator::Make((__int128 *)v120, 3, 4, 2, 3, (uint64_t)&v118, (uint64_t)&v116, (uint64_t)v141, a3, (uint64_t)v139);
  v37 = v140;
  if (v140 == v139)
  {
    v38 = 4;
    v37 = v139;
  }
  else
  {
    if (!v140)
      goto LABEL_43;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_43:
  v39 = v142;
  if (v142 == v141)
  {
    v40 = 4;
    v39 = v141;
    goto LABEL_47;
  }
  if (v142)
  {
    v40 = 5;
LABEL_47:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  v41 = v117;
  if (v117)
  {
    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v119;
  if (v119)
  {
    v45 = (unint64_t *)&v119->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (SHIBYTE(v121) < 0)
    operator delete(v120[0]);
  v47 = *a3;
  v137[0] = &off_1EA99FBD8;
  v137[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceDynamicQuantize;
  v138 = v137;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v47 + 200))(v47, v137);
  v48 = v138;
  if (v138 == v137)
  {
    v49 = 4;
    v48 = v137;
  }
  else
  {
    if (!v138)
      goto LABEL_65;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_65:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v50 = __p;
  std::string::basic_string[abi:ne180100]<0>(v112, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v112, 0, (uint64_t *)&Scalar);
  v114 = Scalar;
  if (Scalar)
  {
    v51 = (std::__shared_weak_count *)operator new();
    v52 = Scalar;
    v51->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v51->__shared_owners_ = 0;
    v51->__shared_weak_owners_ = 0;
    v51[1].__vftable = v52;
  }
  else
  {
    v51 = 0;
  }
  v115 = v51;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v110, "FT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v50 + 24))(v50, &v114, v110);
  if (v111 < 0)
    operator delete(v110[0]);
  v53 = v115;
  if (v115)
  {
    v54 = (unint64_t *)&v115->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = Scalar;
  Scalar = 0;
  if (v56)
    (*((void (**)(std::__shared_weak_count_vtbl *))v56->~__shared_weak_count + 1))(v56);
  if (v113 < 0)
    operator delete(v112[0]);
  v57 = *a3;
  v108 = __p;
  if (__p)
  {
    v58 = (std::__shared_weak_count *)operator new();
    v59 = (std::__shared_weak_count_vtbl *)__p;
    v58->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v58->__shared_owners_ = 0;
    v58->__shared_weak_owners_ = 0;
    v58[1].__vftable = v59;
  }
  else
  {
    v58 = 0;
  }
  v109 = v58;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v57 + 56))(v57, &v108);
  v60 = v109;
  if (v109)
  {
    v61 = (unint64_t *)&v109->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v64 = __p;
  std::string::basic_string[abi:ne180100]<0>(v104, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v104, 0, (uint64_t *)&Scalar);
  v106 = Scalar;
  if (Scalar)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = Scalar;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v107 = v65;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v64 + 32))(v64, &v106, 1, 0x7FFFFFFFFFFFFFFFLL);
  v67 = v107;
  if (v107)
  {
    v68 = (unint64_t *)&v107->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = Scalar;
  Scalar = 0;
  if (v70)
    (*((void (**)(std::__shared_weak_count_vtbl *))v70->~__shared_weak_count + 1))(v70);
  if (v105 < 0)
    operator delete(v104[0]);
  v71 = *a3;
  v102 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v103 = v72;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v71 + 56))(v71, &v102);
  v74 = v103;
  if (v103)
  {
    v75 = (unint64_t *)&v103->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v126);
  v78 = v126;
  std::string::basic_string[abi:ne180100]<0>(v97, "output_dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v97, 0, &v99);
  v100 = v99;
  if (v99)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = v99;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = (std::__shared_weak_count_vtbl *)v80;
  }
  else
  {
    v79 = 0;
  }
  v101 = v79;
  v99 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp8e4m3fn");
  std::string::basic_string[abi:ne180100]<0>(v131, "fp8e5m2");
  std::string::basic_string[abi:ne180100]<0>(v132, "int8");
  std::string::basic_string[abi:ne180100]<0>(v133, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 4);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v78 + 24))(v78, &v100, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v133[i + 2]) < 0)
      operator delete((void *)v133[i]);
  }
  v82 = v101;
  if (v101)
  {
    v83 = (unint64_t *)&v101->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v99;
  v99 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  if (v98 < 0)
    operator delete(v97[0]);
  v86 = *a3;
  v95 = v126;
  if (v126)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = v126;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = (std::__shared_weak_count_vtbl *)v88;
  }
  else
  {
    v87 = 0;
  }
  v96 = v87;
  v126 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v86 + 56))(v86, &v95);
  v89 = v96;
  if (v96)
  {
    v90 = (unint64_t *)&v96->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = v126;
  v126 = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](v143, 0);
  result = (uint64_t)v127;
  if (v127)
  {
    v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v127);
    return MEMORY[0x1E0C023A0](v94, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A2F5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (a44 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v55 - 72), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::Quantize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  unsigned __int8 *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char **v52;
  uint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  char *v78;
  char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  char **v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *p_shared_owners;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  void *v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  void *v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count_vtbl *v142;
  void *v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  void *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count_vtbl *v156;
  void *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  void *v170;
  std::__shared_weak_count_vtbl *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count_vtbl *v173;
  uint64_t i;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count_vtbl *v185;
  uint64_t result;
  uint64_t v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  void *v190[2];
  char v191;
  void *v192;
  std::__shared_weak_count *v193;
  void *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  void *v198[2];
  char v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  void *v202[2];
  char v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  void *v206[2];
  char v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  void *v210;
  std::__shared_weak_count *v211;
  void *v212[2];
  char v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218[2];
  char v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  void *v222[2];
  char v223;
  void *v224[2];
  char v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  void *v228[2];
  char v229;
  void *v230[2];
  char v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  __int128 v234;
  __int128 v235;
  void *v236[2];
  uint64_t v237;
  void *v238;
  void *v239;
  _QWORD *v240;
  __n128 v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  char **v245;
  __n128 v246;
  __n128 v247;
  void *v248;
  void *v249;
  _QWORD *v250;
  void *v251;
  void *v252;
  _QWORD *v253;
  __n128 v254;
  __n128 v255;
  __n128 v256;
  _QWORD *v257;
  void *__p;
  uint64_t v259;
  uint64_t v260;
  _QWORD v261[3];
  uint64_t v262[3];
  _QWORD v263[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD v268[3];
  _QWORD *v269;
  _BYTE v270[24];
  _BYTE *v271;
  _QWORD v272[3];
  _QWORD *v273;
  std::__shared_weak_count_vtbl *v274;
  uint64_t v275;
  void (__cdecl **v276)(std::__shared_weak_count *__hidden);
  uint64_t v277;

  v277 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v257 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v260 = (uint64_t)(v8 + 1);
  v259 = (uint64_t)(v8 + 1);
  v274 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v265 = (uint64_t)&v10->~__shared_weak_count_0;
  v266 = (uint64_t)&v10->~__shared_weak_count_0;
  v275 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v274, 2, &v256);
  MIL::IRParameter::Make(&v256, (uint64_t *)&v251);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", (uint64_t *)&v251);
  v11 = v251;
  v251 = 0;
  if (v11)
    (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v256.n128_u64[1];
  if (v256.n128_u64[1])
  {
    v13 = (unint64_t *)(v256.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (Scalar)
  {
    v265 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v259 = (uint64_t)__p;
    operator delete(__p);
  }
  v15 = v257;
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(8uLL);
  __p = v17;
  *v17 = v16;
  v260 = (uint64_t)(v17 + 1);
  v259 = (uint64_t)(v17 + 1);
  v274 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v265 = (uint64_t)&v19->~__shared_weak_count_0;
  v266 = (uint64_t)&v19->~__shared_weak_count_0;
  v275 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v274, 2, &v255);
  MIL::IRParameter::Make(&v255, (uint64_t *)&v251);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v15, "scale", (uint64_t *)&v251);
  v21 = v251;
  v251 = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v255.n128_u64[1];
  if (v255.n128_u64[1])
  {
    v23 = (unint64_t *)(v255.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (Scalar)
  {
    v265 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v259 = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v257;
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v27;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
  v265 = (uint64_t)&v27->~__shared_weak_count_0;
  v266 = (uint64_t)&v27->~__shared_weak_count_0;
  __p = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&Scalar);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v274 = v29;
  v29->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v275 = (uint64_t)&v29->~__shared_weak_count_0;
  v276 = &v29->~__shared_weak_count_0;
  v259 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v274);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v251 = v31;
  *v31 = v30;
  v253 = v31 + 1;
  v252 = v31 + 1;
  v260 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v251);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  v248 = v33;
  *v33 = v32;
  v250 = v33 + 1;
  v249 = v33 + 1;
  v261[0] = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v248);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 4, &v254);
  MIL::IRParameter::Make(&v254, (uint64_t *)&v238);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v25, "zero_point", (uint64_t *)&v238);
  v35 = v238;
  v238 = 0;
  if (v35)
    (*(void (**)(void *))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v254.n128_u64[1];
  if (v254.n128_u64[1])
  {
    v37 = (unint64_t *)(v254.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v248)
  {
    v249 = v248;
    operator delete(v248);
  }
  if (v251)
  {
    v252 = v251;
    operator delete(v251);
  }
  if (v274)
  {
    v275 = (uint64_t)v274;
    operator delete(v274);
  }
  if (Scalar)
  {
    v265 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 48))(*((_QWORD *)v34 + 5), 1);
  v39 = v257;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v247);
  MIL::IRParameter::Make(&v247, (uint64_t *)&__p);
  v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v39, "axis", (uint64_t *)&__p);
  v41 = __p;
  __p = 0;
  if (v41)
    (*(void (**)(void *))(*(_QWORD *)v41 + 8))(v41);
  v42 = (std::__shared_weak_count *)v247.n128_u64[1];
  if (v247.n128_u64[1])
  {
    v43 = (unint64_t *)(v247.n128_u64[1] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 32))(*((_QWORD *)v40 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 48))(*((_QWORD *)v40 + 5), 1);
  v45 = v257;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v246);
  MIL::IRParameter::Make(&v246, (uint64_t *)&__p);
  v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v45, "output_dtype", (uint64_t *)&__p);
  v47 = __p;
  __p = 0;
  if (v47)
    (*(void (**)(void *))(*(_QWORD *)v47 + 8))(v47);
  v48 = (std::__shared_weak_count *)v246.n128_u64[1];
  if (v246.n128_u64[1])
  {
    v49 = (unint64_t *)(v246.n128_u64[1] + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v46 + 5) + 32))(*((_QWORD *)v46 + 5), 1);
  v245 = 0;
  v51 = operator new();
  *(_QWORD *)v51 = 0;
  *(_QWORD *)(v51 + 8) = 0;
  *(_QWORD *)(v51 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v245, (void **)v51);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v245, 1uLL);
  v52 = v245;
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v274 = v54;
  v54->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v53;
  v275 = (uint64_t)&v54->~__shared_weak_count_0;
  v276 = &v54->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v274);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v251 = v56;
  *v56 = v55;
  v253 = v56 + 1;
  v252 = v56 + 1;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v251);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v248 = v58;
  *v58 = v57;
  v250 = v58 + 1;
  v249 = v58 + 1;
  v266 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v248);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v238 = v60;
  *v60 = v59;
  v240 = v60 + 1;
  v239 = v60 + 1;
  v267 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v238);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v241);
  MIL::IRParameter::Make(&v241, &v242);
  v61 = v242;
  v243 = v242;
  if (v242)
  {
    v62 = (_QWORD *)operator new();
    v63 = v242;
    *v62 = &unk_1EA99F888;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  v244 = v62;
  v242 = 0;
  v64 = v52[2];
  v65 = v52[1];
  if (v65 >= v64)
  {
    v67 = (v65 - *v52) >> 4;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v69 = v64 - *v52;
    if (v69 >> 3 > v68)
      v68 = v69 >> 3;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
      v70 = 0xFFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    v261[1] = v52 + 2;
    v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v52 + 2), v70);
    v73 = (uint64_t *)&v71[16 * v67];
    *v73 = v61;
    v73[1] = (uint64_t)v62;
    v244 = 0;
    v243 = 0;
    v75 = *v52;
    v74 = v52[1];
    if (v74 == *v52)
    {
      v78 = v52[1];
      v76 = &v71[16 * v67];
    }
    else
    {
      v76 = &v71[16 * v67];
      do
      {
        v77 = *((_OWORD *)v74 - 1);
        v74 -= 16;
        *((_OWORD *)v76 - 1) = v77;
        v76 -= 16;
        *(_QWORD *)v74 = 0;
        *((_QWORD *)v74 + 1) = 0;
      }
      while (v74 != v75);
      v78 = *v52;
      v74 = v52[1];
    }
    v66 = (char *)(v73 + 2);
    *v52 = v76;
    v259 = (uint64_t)v78;
    v52[1] = (char *)(v73 + 2);
    v260 = (uint64_t)v74;
    v79 = v52[2];
    v52[2] = &v71[16 * v72];
    v261[0] = v79;
    __p = v78;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v65 = v61;
    *((_QWORD *)v65 + 1) = v62;
    v66 = v65 + 16;
    v244 = 0;
    v243 = 0;
  }
  v52[1] = v66;
  v80 = v242;
  v242 = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = (std::__shared_weak_count *)v241.n128_u64[1];
  if (v241.n128_u64[1])
  {
    v82 = (unint64_t *)(v241.n128_u64[1] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  if (v248)
  {
    v249 = v248;
    operator delete(v248);
  }
  if (v251)
  {
    v252 = v251;
    operator delete(v251);
  }
  if (v274)
  {
    v275 = (uint64_t)v274;
    operator delete(v274);
  }
  *(_OWORD *)v236 = *(_OWORD *)a2;
  v237 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v84 = (uint64_t)v257;
  *(_QWORD *)&v235 = v257;
  if (v257)
  {
    v85 = (_QWORD *)operator new();
    *v85 = &unk_1EA99F8E8;
    v85[1] = 0;
    v85[2] = 0;
    v85[3] = v84;
  }
  else
  {
    v85 = 0;
  }
  *((_QWORD *)&v235 + 1) = v85;
  v257 = 0;
  *(_QWORD *)&v234 = v245;
  if (v245)
  {
    v86 = (_QWORD *)operator new();
    v87 = v245;
    *v86 = &unk_1EA99F948;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v87;
  }
  else
  {
    v86 = 0;
  }
  *((_QWORD *)&v234 + 1) = v86;
  v245 = 0;
  v272[0] = &unk_1EA99FAC8;
  v272[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateQuantize;
  v273 = v272;
  v271 = 0;
  MIL::IROperator::Make((__int128 *)v236, &v235, &v234, (uint64_t)v272, (uint64_t)v270, a3);
  v88 = v271;
  if (v271 == v270)
  {
    v89 = 4;
    v88 = v270;
  }
  else
  {
    if (!v271)
      goto LABEL_95;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_95:
  v90 = v273;
  if (v273 == v272)
  {
    v91 = 4;
    v90 = v272;
    goto LABEL_99;
  }
  if (v273)
  {
    v91 = 5;
LABEL_99:
    (*(void (**)(void))(*v90 + 8 * v91))();
  }
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (*((_QWORD *)&v234 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
  if (*((_QWORD *)&v235 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (SHIBYTE(v237) < 0)
    operator delete(v236[0]);
  v98 = *a3;
  v268[0] = &off_1EA99FBD8;
  v268[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceQuantize;
  v269 = v268;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v98 + 200))(v98, v268);
  v99 = v269;
  if (v269 == v268)
  {
    v100 = 4;
    v99 = v268;
  }
  else
  {
    if (!v269)
      goto LABEL_117;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_117:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v230, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v230, 0, (uint64_t *)&Scalar);
  v232 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v233 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v228, "FT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v101 + 24))(v101, &v232, v228);
  if (v229 < 0)
    operator delete(v228[0]);
  v104 = v233;
  if (v233)
  {
    p_shared_owners = (unint64_t *)&v233->__shared_owners_;
    do
      v106 = __ldaxr(p_shared_owners);
    while (__stlxr(v106 - 1, p_shared_owners));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v231 < 0)
    operator delete(v230[0]);
  v108 = __p;
  std::string::basic_string[abi:ne180100]<0>(v224, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v224, 0, (uint64_t *)&Scalar);
  v226 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v227 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v222, "FT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v108 + 24))(v108, &v226, v222);
  if (v223 < 0)
    operator delete(v222[0]);
  v111 = v227;
  if (v227)
  {
    v112 = (unint64_t *)&v227->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v225 < 0)
    operator delete(v224[0]);
  v115 = __p;
  std::string::basic_string[abi:ne180100]<0>(v218, "zero_point");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v218, 1, (uint64_t *)&Scalar);
  v220 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v221 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v216, "QT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v115 + 24))(v115, &v220, v216);
  if (v217 < 0)
    operator delete(v216[0]);
  v118 = v221;
  if (v221)
  {
    v119 = (unint64_t *)&v221->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  if (v219 < 0)
    operator delete(v218[0]);
  v122 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v214 = Scalar;
  if (Scalar)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = Scalar;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v215 = v123;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v212, "QT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v122 + 24))(v122, &v214, v212);
  if (v213 < 0)
    operator delete(v212[0]);
  v125 = v215;
  if (v215)
  {
    v126 = (unint64_t *)&v215->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = Scalar;
  Scalar = 0;
  if (v128)
    (*((void (**)(std::__shared_weak_count_vtbl *))v128->~__shared_weak_count + 1))(v128);
  v129 = *a3;
  v210 = __p;
  if (__p)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = (std::__shared_weak_count_vtbl *)__p;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v211 = v130;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v129 + 56))(v129, &v210);
  v132 = v211;
  if (v211)
  {
    v133 = (unint64_t *)&v211->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = __p;
  __p = 0;
  if (v135)
    (*(void (**)(void *))(*(_QWORD *)v135 + 8))(v135);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v136 = __p;
  std::string::basic_string[abi:ne180100]<0>(v206, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v206, 0, (uint64_t *)&Scalar);
  v208 = Scalar;
  if (Scalar)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = Scalar;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v209 = v137;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v136 + 32))(v136, &v208, 1, 0x7FFFFFFFFFFFFFFFLL);
  v139 = v209;
  if (v209)
  {
    v140 = (unint64_t *)&v209->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = Scalar;
  Scalar = 0;
  if (v142)
    (*((void (**)(std::__shared_weak_count_vtbl *))v142->~__shared_weak_count + 1))(v142);
  if (v207 < 0)
    operator delete(v206[0]);
  v143 = __p;
  std::string::basic_string[abi:ne180100]<0>(v202, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v202, 0, (uint64_t *)&Scalar);
  v204 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v205 = v144;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))(*(_QWORD *)v143 + 32))(v143, &v204, 0, 1);
  v146 = v205;
  if (v205)
  {
    v147 = (unint64_t *)&v205->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*((void (**)(std::__shared_weak_count_vtbl *))v149->~__shared_weak_count + 1))(v149);
  if (v203 < 0)
    operator delete(v202[0]);
  v150 = __p;
  std::string::basic_string[abi:ne180100]<0>(v198, "zero_point");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v198, 1, (uint64_t *)&Scalar);
  v200 = Scalar;
  if (Scalar)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = Scalar;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v201 = v151;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))(*(_QWORD *)v150 + 32))(v150, &v200, 0, 1);
  v153 = v201;
  if (v201)
  {
    v154 = (unint64_t *)&v201->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = Scalar;
  Scalar = 0;
  if (v156)
    (*((void (**)(std::__shared_weak_count_vtbl *))v156->~__shared_weak_count + 1))(v156);
  if (v199 < 0)
    operator delete(v198[0]);
  v157 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v196 = Scalar;
  if (Scalar)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = Scalar;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v197 = v158;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v157 + 32))(v157, &v196, 1, 0x7FFFFFFFFFFFFFFFLL);
  v160 = v197;
  if (v197)
  {
    v161 = (unint64_t *)&v197->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = Scalar;
  Scalar = 0;
  if (v163)
    (*((void (**)(std::__shared_weak_count_vtbl *))v163->~__shared_weak_count + 1))(v163);
  v164 = *a3;
  v194 = __p;
  if (__p)
  {
    v165 = (std::__shared_weak_count *)operator new();
    v166 = (std::__shared_weak_count_vtbl *)__p;
    v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v165->__shared_owners_ = 0;
    v165->__shared_weak_owners_ = 0;
    v165[1].__vftable = v166;
  }
  else
  {
    v165 = 0;
  }
  v195 = v165;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v164 + 56))(v164, &v194);
  v167 = v195;
  if (v195)
  {
    v168 = (unint64_t *)&v195->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = __p;
  __p = 0;
  if (v170)
    (*(void (**)(void *))(*(_QWORD *)v170 + 8))(v170);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v274);
  v171 = v274;
  std::string::basic_string[abi:ne180100]<0>(v190, "output_dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v190, 0, (uint64_t *)&v251);
  v192 = v251;
  if (v251)
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = (std::__shared_weak_count_vtbl *)v251;
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = v173;
  }
  else
  {
    v172 = 0;
  }
  v193 = v172;
  v251 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp8e4m3fn");
  std::string::basic_string[abi:ne180100]<0>(v261, "fp8e5m2");
  std::string::basic_string[abi:ne180100]<0>(v262, "int8");
  std::string::basic_string[abi:ne180100]<0>(v263, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, _QWORD))v171->~__shared_weak_count
   + 3))(v171, &v192, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v263[i + 2]) < 0)
      operator delete((void *)v263[i]);
  }
  v175 = v193;
  if (v193)
  {
    v176 = (unint64_t *)&v193->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = v251;
  v251 = 0;
  if (v178)
    (*(void (**)(void *))(*(_QWORD *)v178 + 8))(v178);
  if (v191 < 0)
    operator delete(v190[0]);
  v179 = *a3;
  v188 = v274;
  if (v274)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = v274;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v189 = v180;
  v274 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v179 + 56))(v179, &v188);
  v182 = v189;
  if (v189)
  {
    v183 = (unint64_t *)&v189->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = v274;
  v274 = 0;
  if (v185)
    (*((void (**)(std::__shared_weak_count_vtbl *))v185->~__shared_weak_count + 1))(v185);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v245, 0);
  result = (uint64_t)v257;
  if (v257)
  {
    v187 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v257);
    return MEMORY[0x1E0C023A0](v187, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A31060(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x248], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2D0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceExpandDims(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceExpandDims(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0A3180C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceSliceByIndex(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceByIndex(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0A318A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceSliceBySize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceBySize(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0A31934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceSlidingWindows(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSlidingWindows(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0A319C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceSplit(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, void **a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSplit(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0A31A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceSqueeze(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSqueeze(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0A31AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceTranspose(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceTranspose(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0A31B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceStack(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceStack(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0A31C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceReshapeLike(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceReshapeLike(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0A31CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceConcat(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceConcat(a1, (uint64_t)&v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0A31D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceReshape(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceReshape(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0A31DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::Concat::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  void **v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  void **v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  char *v67;
  char *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  char **v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  char *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void **v110;
  uint64_t result;
  uint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  void *v115[2];
  char v116;
  char *v117;
  std::__shared_weak_count *v118;
  void *v119[2];
  char v120;
  void *v121[2];
  char v122;
  char *v123;
  std::__shared_weak_count *v124;
  __int128 v125;
  __int128 v126;
  void *v127[2];
  uint64_t v128;
  void *v129;
  void *v130;
  _QWORD *v131;
  __n128 v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char **v136;
  __n128 v137;
  __n128 v138;
  void *__p;
  void *v140;
  _QWORD *v141;
  void *v142;
  void *v143;
  _QWORD *v144;
  void *v145;
  void *v146;
  _QWORD *v147;
  void *v148;
  void *v149;
  _QWORD *v150;
  void *v151;
  void *v152;
  _QWORD *v153;
  __n128 v154;
  _QWORD *v155;
  _QWORD v156[3];
  _QWORD *v157;
  _BYTE v158[24];
  _BYTE *v159;
  _QWORD v160[3];
  _QWORD *v161;
  void **v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *Scalar;
  char *v169;
  char *v170;
  char *v171;
  char **v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v155 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v169 = v8 + 8;
  v170 = v8 + 8;
  v162 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v151 = v10;
  *v10 = v9;
  v152 = v10 + 1;
  v153 = v10 + 1;
  v163 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v151);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v148 = v12;
  *v12 = v11;
  v149 = v12 + 1;
  v150 = v12 + 1;
  v164 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v148);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v145 = v14;
  *v14 = v13;
  v146 = v14 + 1;
  v147 = v14 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v145);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v142 = v16;
  *v16 = v15;
  v143 = v16 + 1;
  v144 = v16 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v142);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v140 = v18 + 1;
  v141 = v18 + 1;
  v167 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v162, 6, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v129);
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "values", (uint64_t *)&v129);
  v20 = v129;
  v129 = 0;
  if (v20)
    (*(void (**)(void *))(*(_QWORD *)v20 + 8))(v20);
  v21 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v22 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (__p)
  {
    v140 = __p;
    operator delete(__p);
  }
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (v145)
  {
    v146 = v145;
    operator delete(v145);
  }
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  if (v151)
  {
    v152 = v151;
    operator delete(v151);
  }
  if (Scalar)
  {
    v169 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 5) + 64))(*((_QWORD *)v19 + 5), 1);
  v24 = v155;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v138);
  MIL::IRParameter::Make(&v138, (uint64_t *)&v162);
  v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v24, "axis", (uint64_t *)&v162);
  v26 = v162;
  v162 = 0;
  if (v26)
    (*((void (**)(void **))*v26 + 1))(v26);
  v27 = (std::__shared_weak_count *)v138.n128_u64[1];
  if (v138.n128_u64[1])
  {
    v28 = (unint64_t *)(v138.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v25 + 5) + 32))(*((_QWORD *)v25 + 5), 1);
  v30 = v155;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v137);
  MIL::IRParameter::Make(&v137, (uint64_t *)&v162);
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v30, "interleave", (uint64_t *)&v162);
  v32 = v162;
  v162 = 0;
  if (v32)
    (*((void (**)(void **))*v32 + 1))(v32);
  v33 = (std::__shared_weak_count *)v137.n128_u64[1];
  if (v137.n128_u64[1])
  {
    v34 = (unint64_t *)(v137.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  v136 = 0;
  v36 = operator new();
  *(_QWORD *)v36 = 0;
  *(_QWORD *)(v36 + 8) = 0;
  *(_QWORD *)(v36 + 16) = 0;
  v162 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v136, (void **)v36);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v162, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v136, 1uLL);
  v37 = v136;
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v151 = v39;
  *v39 = v38;
  v152 = v39 + 1;
  v153 = v39 + 1;
  v162 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v151);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v148 = v41;
  *v41 = v40;
  v149 = v41 + 1;
  v150 = v41 + 1;
  v163 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v148);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v145 = v43;
  *v43 = v42;
  v146 = v43 + 1;
  v147 = v43 + 1;
  v164 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v145);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v142 = v45;
  *v45 = v44;
  v143 = v45 + 1;
  v144 = v45 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v142);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  __p = v47;
  *v47 = v46;
  v140 = v47 + 1;
  v141 = v47 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&__p);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v129 = v49;
  *v49 = v48;
  v130 = v49 + 1;
  v131 = v49 + 1;
  v167 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v129);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v162, 6, &v132);
  MIL::IRParameter::Make(&v132, &v133);
  v50 = v133;
  v134 = v133;
  if (v133)
  {
    v51 = (_QWORD *)operator new();
    v52 = v133;
    *v51 = &unk_1EA99F888;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v52;
  }
  else
  {
    v51 = 0;
  }
  v135 = v51;
  v133 = 0;
  v53 = v37[2];
  v54 = v37[1];
  if (v54 >= v53)
  {
    v56 = (v54 - *v37) >> 4;
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v58 = v53 - *v37;
    if (v58 >> 3 > v57)
      v57 = v58 >> 3;
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
      v59 = 0xFFFFFFFFFFFFFFFLL;
    else
      v59 = v57;
    v172 = v37 + 2;
    v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v37 + 2), v59);
    v62 = (uint64_t *)&v60[16 * v56];
    *v62 = v50;
    v62[1] = (uint64_t)v51;
    v134 = 0;
    v135 = 0;
    v64 = *v37;
    v63 = v37[1];
    if (v63 == *v37)
    {
      v67 = v37[1];
      v65 = &v60[16 * v56];
    }
    else
    {
      v65 = &v60[16 * v56];
      do
      {
        v66 = *((_OWORD *)v63 - 1);
        v63 -= 16;
        *((_OWORD *)v65 - 1) = v66;
        v65 -= 16;
        *(_QWORD *)v63 = 0;
        *((_QWORD *)v63 + 1) = 0;
      }
      while (v63 != v64);
      v67 = *v37;
      v63 = v37[1];
    }
    v55 = (char *)(v62 + 2);
    *v37 = v65;
    Scalar = v67;
    v169 = v67;
    v37[1] = (char *)(v62 + 2);
    v170 = v63;
    v68 = v37[2];
    v37[2] = &v60[16 * v61];
    v171 = v68;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v54 = v50;
    *((_QWORD *)v54 + 1) = v51;
    v55 = v54 + 16;
    v134 = 0;
    v135 = 0;
  }
  v37[1] = v55;
  v69 = v133;
  v133 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v132.n128_u64[1];
  if (v132.n128_u64[1])
  {
    v71 = (unint64_t *)(v132.n128_u64[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  if (__p)
  {
    v140 = __p;
    operator delete(__p);
  }
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (v145)
  {
    v146 = v145;
    operator delete(v145);
  }
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  if (v151)
  {
    v152 = v151;
    operator delete(v151);
  }
  *(_OWORD *)v127 = *(_OWORD *)a2;
  v128 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v73 = (uint64_t)v155;
  *(_QWORD *)&v126 = v155;
  if (v155)
  {
    v74 = (_QWORD *)operator new();
    *v74 = &unk_1EA99F8E8;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v73;
  }
  else
  {
    v74 = 0;
  }
  *((_QWORD *)&v126 + 1) = v74;
  v155 = 0;
  *(_QWORD *)&v125 = v136;
  if (v136)
  {
    v75 = (_QWORD *)operator new();
    v76 = v136;
    *v75 = &unk_1EA99F948;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = v76;
  }
  else
  {
    v75 = 0;
  }
  *((_QWORD *)&v125 + 1) = v75;
  v136 = 0;
  v160[0] = &unk_1EA99FAC8;
  v160[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateConcat;
  v161 = v160;
  v159 = 0;
  MIL::IROperator::Make((__int128 *)v127, &v126, &v125, (uint64_t)v160, (uint64_t)v158, a3);
  v77 = v159;
  if (v159 == v158)
  {
    v78 = 4;
    v77 = v158;
  }
  else
  {
    if (!v159)
      goto LABEL_81;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_81:
  v79 = v161;
  if (v161 == v160)
  {
    v80 = 4;
    v79 = v160;
    goto LABEL_85;
  }
  if (v161)
  {
    v80 = 5;
LABEL_85:
    (*(void (**)(void))(*v79 + 8 * v80))();
  }
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
  if (*((_QWORD *)&v125 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
  if (*((_QWORD *)&v126 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (SHIBYTE(v128) < 0)
    operator delete(v127[0]);
  v87 = *a3;
  v156[0] = &off_1EA99FBD8;
  v156[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceConcat;
  v157 = v156;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v87 + 200))(v87, v156);
  v88 = v157;
  if (v157 == v156)
  {
    v89 = 4;
    v88 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_103;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_103:
  MIL::Validation::TensorDTypeConstraints::Make(&v162);
  v90 = v162;
  std::string::basic_string[abi:ne180100]<0>(v121, "values");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v121, 0, (uint64_t *)&Scalar);
  v123 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v124 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v119, "T");
  (*((void (**)(void **, char **, void **))*v90 + 3))(v90, &v123, v119);
  if (v120 < 0)
    operator delete(v119[0]);
  v93 = v124;
  if (v124)
  {
    p_shared_owners = (unint64_t *)&v124->__shared_owners_;
    do
      v95 = __ldaxr(p_shared_owners);
    while (__stlxr(v95 - 1, p_shared_owners));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*(void (**)(char *))(*(_QWORD *)v96 + 8))(v96);
  if (v122 < 0)
    operator delete(v121[0]);
  v97 = v162;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v117 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = (std::__shared_weak_count_vtbl *)Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v118 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v115, "T");
  (*((void (**)(void **, char **, void **))*v97 + 3))(v97, &v117, v115);
  if (v116 < 0)
    operator delete(v115[0]);
  v100 = v118;
  if (v118)
  {
    v101 = (unint64_t *)&v118->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*(void (**)(char *))(*(_QWORD *)v103 + 8))(v103);
  v104 = *a3;
  v113 = v162;
  if (v162)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v162;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v114 = v105;
  v162 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v113);
  v107 = v114;
  if (v114)
  {
    v108 = (unint64_t *)&v114->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v162;
  v162 = 0;
  if (v110)
    (*((void (**)(void **))*v110 + 1))(v110);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v136, 0);
  result = (uint64_t)v155;
  if (v155)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    return MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A32ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;

  v65 = *(_QWORD *)(v63 - 160);
  *(_QWORD *)(v63 - 160) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *v62;
  *v62 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::ExpandDims::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  char *v76;
  char *v77;
  char *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  char **v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  void **v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void *v109;
  void **v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  void **v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void **v123;
  void **v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  void **v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void **v137;
  uint64_t result;
  uint64_t v139;
  void **v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  void *v144[2];
  char v145;
  void *v146;
  std::__shared_weak_count *v147;
  void **v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152;
  std::__shared_weak_count *v153;
  void *v154[2];
  char v155;
  void *v156[2];
  char v157;
  void *v158;
  std::__shared_weak_count *v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  void *v164;
  void *v165;
  _QWORD *v166;
  __n128 v167;
  uint64_t v168;
  __int128 v169;
  char **v170;
  __n128 v171;
  void *__p;
  void *v173;
  _QWORD *v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  void *v178;
  void *v179;
  _QWORD *v180;
  void *v181;
  void *v182;
  _QWORD *v183;
  void *v184;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *v190;
  void *v191;
  _QWORD *v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  __n128 v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  char *v200;
  char *v201;
  char **v202;
  _QWORD v203[3];
  _QWORD *v204;
  _BYTE v205[24];
  _BYTE *v206;
  _QWORD v207[3];
  _QWORD *v208;
  void *v209;
  void *v210;
  _QWORD *v211;
  void **v212;
  void **v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v197 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  v198 = v8;
  *(_QWORD *)v8 = v7;
  v200 = v8 + 8;
  v199 = v8 + 8;
  v212 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v198);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v209 = v10;
  *v10 = v9;
  v210 = v10 + 1;
  v211 = v10 + 1;
  v213 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v209);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v193 = v12;
  *v12 = v11;
  v195 = v12 + 1;
  v194 = v12 + 1;
  v214 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v193);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v190 = v14;
  *v14 = v13;
  v192 = v14 + 1;
  v191 = v14 + 1;
  v215 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v190);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v187 = v16;
  *v16 = v15;
  v188 = v16 + 1;
  v189 = v16 + 1;
  v216 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v187);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v184 = v18;
  *v18 = v17;
  v185 = v18 + 1;
  v186 = v18 + 1;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v184);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v181 = v20;
  *v20 = v19;
  v182 = v20 + 1;
  v183 = v20 + 1;
  v218 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v181);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v178 = v22;
  *v22 = v21;
  v179 = v22 + 1;
  v180 = v22 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v178);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v175 = v24;
  *v24 = v23;
  v176 = v24 + 1;
  v177 = v24 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v175);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v173 = v26 + 1;
  v174 = v26 + 1;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v212, 10, &v196);
  MIL::IRParameter::Make(&v196, (uint64_t *)&v164);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v164);
  v27 = v164;
  v164 = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v29 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (__p)
  {
    v173 = __p;
    operator delete(__p);
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v181)
  {
    v182 = v181;
    operator delete(v181);
  }
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  v31 = v197;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (void **)operator new(8uLL);
  v212 = v33;
  *v33 = (void *)v32;
  v213 = v33 + 1;
  v214 = (uint64_t)(v33 + 1);
  v209 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v212);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v209, 1, &v171);
  MIL::IRParameter::Make(&v171, (uint64_t *)&v198);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v31, "axes", (uint64_t *)&v198);
  v35 = v198;
  v198 = 0;
  if (v35)
    (*(void (**)(void *))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v171.n128_u64[1];
  if (v171.n128_u64[1])
  {
    v37 = (unint64_t *)(v171.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v170 = 0;
  v39 = operator new();
  *(_QWORD *)v39 = 0;
  *(_QWORD *)(v39 + 8) = 0;
  *(_QWORD *)(v39 + 16) = 0;
  v212 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v170, (void **)v39);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v212, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v170, 1uLL);
  v40 = v170;
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v209 = v42;
  *v42 = v41;
  v210 = v42 + 1;
  v211 = v42 + 1;
  v212 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v209);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v193 = v44;
  *v44 = v43;
  v195 = v44 + 1;
  v194 = v44 + 1;
  v213 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v193);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v190 = v46;
  *v46 = v45;
  v192 = v46 + 1;
  v191 = v46 + 1;
  v214 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v190);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v187 = v48;
  *v48 = v47;
  v188 = v48 + 1;
  v189 = v48 + 1;
  v215 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v184 = v50;
  *v50 = v49;
  v185 = v50 + 1;
  v186 = v50 + 1;
  v216 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v184);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v181 = v52;
  *v52 = v51;
  v182 = v52 + 1;
  v183 = v52 + 1;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v181);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v178 = v54;
  *v54 = v53;
  v179 = v54 + 1;
  v180 = v54 + 1;
  v218 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v178);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v175 = v56;
  *v56 = v55;
  v176 = v56 + 1;
  v177 = v56 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v175);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v173 = v58 + 1;
  v174 = v58 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v164 = v60;
  *v60 = v59;
  v165 = v60 + 1;
  v166 = v60 + 1;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v164);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v212, 10, &v167);
  MIL::IRParameter::Make(&v167, &v168);
  *(_QWORD *)&v169 = v168;
  if (v168)
  {
    v61 = (_QWORD *)operator new();
    v62 = v168;
    *v61 = &unk_1EA99F888;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v169 + 1) = v61;
  v168 = 0;
  v63 = v40[2];
  v64 = v40[1];
  if (v64 >= v63)
  {
    v65 = (v64 - *v40) >> 4;
    v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v67 = v63 - *v40;
    if (v67 >> 3 > v66)
      v66 = v67 >> 3;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
      v68 = 0xFFFFFFFFFFFFFFFLL;
    else
      v68 = v66;
    v202 = v40 + 2;
    v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v40 + 2), v68);
    v71 = &v69[16 * v65];
    *(_OWORD *)v71 = v169;
    v169 = 0uLL;
    v73 = *v40;
    v72 = v40[1];
    if (v72 == *v40)
    {
      v76 = v40[1];
      v74 = &v69[16 * v65];
    }
    else
    {
      v74 = &v69[16 * v65];
      do
      {
        v75 = *((_OWORD *)v72 - 1);
        v72 -= 16;
        *((_OWORD *)v74 - 1) = v75;
        v74 -= 16;
        *(_QWORD *)v72 = 0;
        *((_QWORD *)v72 + 1) = 0;
      }
      while (v72 != v73);
      v76 = *v40;
      v72 = v40[1];
    }
    v77 = v71 + 16;
    *v40 = v74;
    v199 = v76;
    v40[1] = v71 + 16;
    v200 = v72;
    v78 = v40[2];
    v40[2] = &v69[16 * v70];
    v201 = v78;
    v198 = v76;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v198);
    v79 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
    v40[1] = v77;
    if (v79)
    {
      p_shared_owners = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldaxr(p_shared_owners);
      while (__stlxr(v81 - 1, p_shared_owners));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
  }
  else
  {
    *(_QWORD *)v64 = v169;
    *((_QWORD *)v64 + 1) = v61;
    v169 = 0uLL;
    v40[1] = v64 + 16;
  }
  v82 = v168;
  v168 = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v84 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (__p)
  {
    v173 = __p;
    operator delete(__p);
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v181)
  {
    v182 = v181;
    operator delete(v181);
  }
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  v162 = *(_OWORD *)a2;
  v163 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v86 = (uint64_t)v197;
  *(_QWORD *)&v161 = v197;
  if (v197)
  {
    v87 = (_QWORD *)operator new();
    *v87 = &unk_1EA99F8E8;
    v87[1] = 0;
    v87[2] = 0;
    v87[3] = v86;
  }
  else
  {
    v87 = 0;
  }
  *((_QWORD *)&v161 + 1) = v87;
  v197 = 0;
  *(_QWORD *)&v160 = v170;
  if (v170)
  {
    v88 = (_QWORD *)operator new();
    v89 = v170;
    *v88 = &unk_1EA99F948;
    v88[1] = 0;
    v88[2] = 0;
    v88[3] = v89;
  }
  else
  {
    v88 = 0;
  }
  *((_QWORD *)&v160 + 1) = v88;
  v170 = 0;
  v207[0] = &unk_1EA99FAC8;
  v207[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateExpandDims;
  v208 = v207;
  v206 = 0;
  MIL::IROperator::Make(&v162, &v161, &v160, (uint64_t)v207, (uint64_t)v205, a3);
  v90 = v206;
  if (v206 == v205)
  {
    v91 = 4;
    v90 = v205;
  }
  else
  {
    if (!v206)
      goto LABEL_96;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_96:
  v92 = v208;
  if (v208 == v207)
  {
    v93 = 4;
    v92 = v207;
    goto LABEL_100;
  }
  if (v208)
  {
    v93 = 5;
LABEL_100:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
  if (*((_QWORD *)&v160 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (SHIBYTE(v163) < 0)
    operator delete((void *)v162);
  v100 = *a3;
  v203[0] = &off_1EA99FBD8;
  v203[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceExpandDims;
  v204 = v203;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v100 + 200))(v100, v203);
  v101 = v204;
  if (v204 == v203)
  {
    v102 = 4;
    v101 = v203;
  }
  else
  {
    if (!v204)
      goto LABEL_118;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_118:
  MIL::Validation::TensorDTypeConstraints::Make(&v212);
  v103 = v212;
  std::string::basic_string[abi:ne180100]<0>(v156, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v156, 0, (uint64_t *)&v198);
  v158 = v198;
  if (v198)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = (std::__shared_weak_count_vtbl *)v198;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v159 = v104;
  v198 = 0;
  std::string::basic_string[abi:ne180100]<0>(v154, "T");
  (*((void (**)(void **, void **, void **))*v103 + 3))(v103, &v158, v154);
  if (v155 < 0)
    operator delete(v154[0]);
  v106 = v159;
  if (v159)
  {
    v107 = (unint64_t *)&v159->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v198;
  v198 = 0;
  if (v109)
    (*(void (**)(void *))(*(_QWORD *)v109 + 8))(v109);
  if (v157 < 0)
    operator delete(v156[0]);
  v110 = v212;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v198);
  v152 = v198;
  if (v198)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)v198;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v153 = v111;
  v198 = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*((void (**)(void **, void **, void **))*v110 + 3))(v110, &v152, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v113 = v153;
  if (v153)
  {
    v114 = (unint64_t *)&v153->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v198;
  v198 = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  v117 = *a3;
  v148 = v212;
  if (v212)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v212;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = (std::__shared_weak_count_vtbl *)v119;
  }
  else
  {
    v118 = 0;
  }
  v149 = v118;
  v212 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v117 + 56))(v117, &v148);
  v120 = v149;
  if (v149)
  {
    v121 = (unint64_t *)&v149->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v212;
  v212 = 0;
  if (v123)
    (*((void (**)(void **))*v123 + 1))(v123);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v212);
  v124 = v212;
  std::string::basic_string[abi:ne180100]<0>(v144, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v144, 0, (uint64_t *)&v198);
  v146 = v198;
  if (v198)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)v198;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v147 = v125;
  v198 = 0;
  std::string::basic_string[abi:ne180100]<0>(v142, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v124 + 3))(v124, &v146, 0, v142);
  if (v143 < 0)
    operator delete(v142[0]);
  v127 = v147;
  if (v147)
  {
    v128 = (unint64_t *)&v147->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v198;
  v198 = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  if (v145 < 0)
    operator delete(v144[0]);
  v131 = *a3;
  v140 = v212;
  if (v212)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v212;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = (std::__shared_weak_count_vtbl *)v133;
  }
  else
  {
    v132 = 0;
  }
  v141 = v132;
  v212 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v131 + 56))(v131, &v140);
  v134 = v141;
  if (v141)
  {
    v135 = (unint64_t *)&v141->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v212;
  v212 = 0;
  if (v137)
    (*((void (**)(void **))*v137 + 1))(v137);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v170, 0);
  result = (uint64_t)v197;
  if (v197)
  {
    v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v197);
    return MEMORY[0x1E0C023A0](v139, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A33FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void **a52)
{
  uint64_t *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;

  v55 = *(_QWORD *)(v53 - 152);
  *(_QWORD *)(v53 - 152) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *v52;
  *v52 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x240], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::Reshape::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  char **v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  char *v79;
  char *v80;
  char *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  char **v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  void **v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void **v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void **v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  void **v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void **v147;
  uint64_t result;
  uint64_t v149;
  void **v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154[2];
  char v155;
  void *v156;
  std::__shared_weak_count *v157;
  void **v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  void *v162;
  std::__shared_weak_count *v163;
  void *v164[2];
  char v165;
  void *v166[2];
  char v167;
  void *v168;
  std::__shared_weak_count *v169;
  void *v170[2];
  char v171;
  void *v172[2];
  char v173;
  void *v174;
  std::__shared_weak_count *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  void *v180;
  void *v181;
  _QWORD *v182;
  __n128 v183;
  uint64_t v184;
  __int128 v185;
  char **v186;
  __n128 v187;
  void *__p;
  void *v189;
  _QWORD *v190;
  void *v191;
  void *v192;
  _QWORD *v193;
  void *v194;
  void *v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  void *v200;
  void *v201;
  _QWORD *v202;
  void *v203;
  void *v204;
  _QWORD *v205;
  void *v206;
  void *v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  _QWORD *v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  __n128 v215;
  _QWORD *v216;
  void *v217;
  void *v218;
  char *v219;
  char *v220;
  char **v221;
  _QWORD v222[3];
  _QWORD *v223;
  _BYTE v224[24];
  _BYTE *v225;
  _QWORD v226[3];
  _QWORD *v227;
  void **v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;

  v238 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v216 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  v217 = v8;
  *(_QWORD *)v8 = v7;
  v219 = v8 + 8;
  v218 = v8 + 8;
  v228 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v217);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v212 = v10;
  *v10 = v9;
  v214 = v10 + 1;
  v213 = v10 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v212);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v209 = v12;
  *v12 = v11;
  v211 = v12 + 1;
  v210 = v12 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v209);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v206 = v14;
  *v14 = v13;
  v208 = v14 + 1;
  v207 = v14 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v206);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v203 = v16;
  *v16 = v15;
  v205 = v16 + 1;
  v204 = v16 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v203);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v200 = v18;
  *v18 = v17;
  v202 = v18 + 1;
  v201 = v18 + 1;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v200);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v197 = v20;
  *v20 = v19;
  v199 = v20 + 1;
  v198 = v20 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v197);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v194 = v22;
  *v22 = v21;
  v195 = v22 + 1;
  v196 = v22 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v194);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v191 = v24;
  *v24 = v23;
  v192 = v24 + 1;
  v193 = v24 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v191);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v189 = v26 + 1;
  v190 = v26 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v228, 10, &v215);
  MIL::IRParameter::Make(&v215, (uint64_t *)&v180);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v180);
  v27 = v180;
  v180 = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v215.n128_u64[1];
  if (v215.n128_u64[1])
  {
    v29 = (unint64_t *)(v215.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (__p)
  {
    v189 = __p;
    operator delete(__p);
  }
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  v31 = v216;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (char *)operator new(8uLL);
  v217 = v33;
  *(_QWORD *)v33 = v32;
  v219 = v33 + 8;
  v218 = v33 + 8;
  v228 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v217);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(8uLL);
  v212 = v35;
  *v35 = v34;
  v214 = v35 + 1;
  v213 = v35 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v212);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = operator new(8uLL);
  v209 = v37;
  *v37 = v36;
  v211 = v37 + 1;
  v210 = v37 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v209);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v228, 3, &v187);
  MIL::IRParameter::Make(&v187, (uint64_t *)&v206);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v31, "shape", (uint64_t *)&v206);
  v38 = v206;
  v206 = 0;
  if (v38)
    (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
  v39 = (std::__shared_weak_count *)v187.n128_u64[1];
  if (v187.n128_u64[1])
  {
    v40 = (unint64_t *)(v187.n128_u64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  v186 = 0;
  v42 = operator new();
  *(_QWORD *)v42 = 0;
  *(_QWORD *)(v42 + 8) = 0;
  *(_QWORD *)(v42 + 16) = 0;
  v228 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, (void **)v42);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v228, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v186, 1uLL);
  v43 = v186;
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v212 = v45;
  *v45 = v44;
  v214 = v45 + 1;
  v213 = v45 + 1;
  v228 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v212);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v209 = v47;
  *v47 = v46;
  v211 = v47 + 1;
  v210 = v47 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v209);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v206 = v49;
  *v49 = v48;
  v208 = v49 + 1;
  v207 = v49 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v206);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  v203 = v51;
  *v51 = v50;
  v205 = v51 + 1;
  v204 = v51 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v203);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  v200 = v53;
  *v53 = v52;
  v202 = v53 + 1;
  v201 = v53 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v200);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(8uLL);
  v197 = v55;
  *v55 = v54;
  v199 = v55 + 1;
  v198 = v55 + 1;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v197);
  v56 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v57 = operator new(8uLL);
  v194 = v57;
  *v57 = v56;
  v195 = v57 + 1;
  v196 = v57 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v194);
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(8uLL);
  v191 = v59;
  *v59 = v58;
  v192 = v59 + 1;
  v193 = v59 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v191);
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  __p = v61;
  *v61 = v60;
  v189 = v61 + 1;
  v190 = v61 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  v180 = v63;
  *v63 = v62;
  v181 = v63 + 1;
  v182 = v63 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v180);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v228, 10, &v183);
  MIL::IRParameter::Make(&v183, &v184);
  *(_QWORD *)&v185 = v184;
  if (v184)
  {
    v64 = (_QWORD *)operator new();
    v65 = v184;
    *v64 = &unk_1EA99F888;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v185 + 1) = v64;
  v184 = 0;
  v66 = v43[2];
  v67 = v43[1];
  if (v67 >= v66)
  {
    v68 = (v67 - *v43) >> 4;
    v69 = v68 + 1;
    if ((unint64_t)(v68 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v70 = v66 - *v43;
    if (v70 >> 3 > v69)
      v69 = v70 >> 3;
    if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
      v71 = 0xFFFFFFFFFFFFFFFLL;
    else
      v71 = v69;
    v221 = v43 + 2;
    v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v43 + 2), v71);
    v74 = &v72[16 * v68];
    *(_OWORD *)v74 = v185;
    v185 = 0uLL;
    v76 = *v43;
    v75 = v43[1];
    if (v75 == *v43)
    {
      v79 = v43[1];
      v77 = &v72[16 * v68];
    }
    else
    {
      v77 = &v72[16 * v68];
      do
      {
        v78 = *((_OWORD *)v75 - 1);
        v75 -= 16;
        *((_OWORD *)v77 - 1) = v78;
        v77 -= 16;
        *(_QWORD *)v75 = 0;
        *((_QWORD *)v75 + 1) = 0;
      }
      while (v75 != v76);
      v79 = *v43;
      v75 = v43[1];
    }
    v80 = v74 + 16;
    *v43 = v77;
    v218 = v79;
    v43[1] = v74 + 16;
    v219 = v75;
    v81 = v43[2];
    v43[2] = &v72[16 * v73];
    v220 = v81;
    v217 = v79;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v217);
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
    v43[1] = v80;
    if (v82)
    {
      p_shared_owners = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(p_shared_owners);
      while (__stlxr(v84 - 1, p_shared_owners));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
  }
  else
  {
    *(_QWORD *)v67 = v185;
    *((_QWORD *)v67 + 1) = v64;
    v185 = 0uLL;
    v43[1] = v67 + 16;
  }
  v85 = v184;
  v184 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v87 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (__p)
  {
    v189 = __p;
    operator delete(__p);
  }
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  v178 = *(_OWORD *)a2;
  v179 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v89 = (uint64_t)v216;
  *(_QWORD *)&v177 = v216;
  if (v216)
  {
    v90 = (_QWORD *)operator new();
    *v90 = &unk_1EA99F8E8;
    v90[1] = 0;
    v90[2] = 0;
    v90[3] = v89;
  }
  else
  {
    v90 = 0;
  }
  *((_QWORD *)&v177 + 1) = v90;
  v216 = 0;
  *(_QWORD *)&v176 = v186;
  if (v186)
  {
    v91 = (_QWORD *)operator new();
    v92 = v186;
    *v91 = &unk_1EA99F948;
    v91[1] = 0;
    v91[2] = 0;
    v91[3] = v92;
  }
  else
  {
    v91 = 0;
  }
  *((_QWORD *)&v176 + 1) = v91;
  v186 = 0;
  v226[0] = &unk_1EA99FAC8;
  v226[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateReshape;
  v227 = v226;
  v225 = 0;
  MIL::IROperator::Make(&v178, &v177, &v176, (uint64_t)v226, (uint64_t)v224, a3);
  v93 = v225;
  if (v225 == v224)
  {
    v94 = 4;
    v93 = v224;
  }
  else
  {
    if (!v225)
      goto LABEL_100;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_100:
  v95 = v227;
  if (v227 == v226)
  {
    v96 = 4;
    v95 = v226;
    goto LABEL_104;
  }
  if (v227)
  {
    v96 = 5;
LABEL_104:
    (*(void (**)(void))(*v95 + 8 * v96))();
  }
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
  if (*((_QWORD *)&v177 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (SHIBYTE(v179) < 0)
    operator delete((void *)v178);
  v103 = *a3;
  v222[0] = &off_1EA99FBD8;
  v222[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceReshape;
  v223 = v222;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v103 + 200))(v103, v222);
  v104 = v223;
  if (v223 == v222)
  {
    v105 = 4;
    v104 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_122;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_122:
  MIL::Validation::TensorDTypeConstraints::Make(&v228);
  v106 = v228;
  std::string::basic_string[abi:ne180100]<0>(v172, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v172, 0, (uint64_t *)&v217);
  v174 = v217;
  if (v217)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)v217;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v175 = v107;
  v217 = 0;
  std::string::basic_string[abi:ne180100]<0>(v170, "T");
  (*((void (**)(void **, void **, void **))*v106 + 3))(v106, &v174, v170);
  if (v171 < 0)
    operator delete(v170[0]);
  v109 = v175;
  if (v175)
  {
    v110 = (unint64_t *)&v175->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v217;
  v217 = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  if (v173 < 0)
    operator delete(v172[0]);
  v113 = v228;
  std::string::basic_string[abi:ne180100]<0>(v166, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v166, 0, (uint64_t *)&v217);
  v168 = v217;
  if (v217)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v217;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v169 = v114;
  v217 = 0;
  std::string::basic_string[abi:ne180100]<0>(v164, "SHAPE_T");
  (*((void (**)(void **, void **, void **))*v113 + 3))(v113, &v168, v164);
  if (v165 < 0)
    operator delete(v164[0]);
  v116 = v169;
  if (v169)
  {
    v117 = (unint64_t *)&v169->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v217;
  v217 = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  if (v167 < 0)
    operator delete(v166[0]);
  v120 = v228;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v217);
  v162 = v217;
  if (v217)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v217;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v163 = v121;
  v217 = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "T");
  (*((void (**)(void **, void **, void **))*v120 + 3))(v120, &v162, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v123 = v163;
  if (v163)
  {
    v124 = (unint64_t *)&v163->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v217;
  v217 = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  v127 = *a3;
  v158 = v228;
  if (v228)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = v228;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = (std::__shared_weak_count_vtbl *)v129;
  }
  else
  {
    v128 = 0;
  }
  v159 = v128;
  v228 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v127 + 56))(v127, &v158);
  v130 = v159;
  if (v159)
  {
    v131 = (unint64_t *)&v159->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v228;
  v228 = 0;
  if (v133)
    (*((void (**)(void **))*v133 + 1))(v133);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v228);
  v134 = v228;
  std::string::basic_string[abi:ne180100]<0>(v154, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v154, 0, (uint64_t *)&v217);
  v156 = v217;
  if (v217)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)v217;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v157 = v135;
  v217 = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v134 + 3))(v134, &v156, 0, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v137 = v157;
  if (v157)
  {
    v138 = (unint64_t *)&v157->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v217;
  v217 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v155 < 0)
    operator delete(v154[0]);
  v141 = *a3;
  v150 = v228;
  if (v228)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = v228;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = (std::__shared_weak_count_vtbl *)v143;
  }
  else
  {
    v142 = 0;
  }
  v151 = v142;
  v228 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v141 + 56))(v141, &v150);
  v144 = v151;
  if (v151)
  {
    v145 = (unint64_t *)&v151->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v228;
  v228 = 0;
  if (v147)
    (*((void (**)(void **))*v147 + 1))(v147);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  result = (uint64_t)v216;
  if (v216)
  {
    v149 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v216);
    return MEMORY[0x1E0C023A0](v149, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A35798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 152);
  *(_QWORD *)(v61 - 152) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x298], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::ReshapeLike::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned __int8 *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  unsigned __int8 *v58;
  void **v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  unsigned __int8 *v64;
  void **v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  char **v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  char *v112;
  char *v113;
  char *v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  char **v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  char *v145;
  void **v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  char *v152;
  void **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void **v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void **v166;
  uint64_t result;
  uint64_t v168;
  void **v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  char *v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  void *v177[2];
  char v178;
  char *v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  void *v183[2];
  char v184;
  char *v185;
  std::__shared_weak_count *v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  void *v191;
  void *v192;
  _QWORD *v193;
  __n128 v194;
  uint64_t v195;
  __int128 v196;
  char **v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  void *__p;
  void *v203;
  _QWORD *v204;
  void *v205;
  void *v206;
  _QWORD *v207;
  void *v208;
  void *v209;
  _QWORD *v210;
  void *v211;
  void *v212;
  _QWORD *v213;
  void *v214;
  void *v215;
  _QWORD *v216;
  void *v217;
  void *v218;
  _QWORD *v219;
  void *v220;
  void *v221;
  _QWORD *v222;
  void *v223;
  void *v224;
  _QWORD *v225;
  void *v226;
  void *v227;
  _QWORD *v228;
  __n128 v229;
  _QWORD *v230;
  _QWORD v231[3];
  _QWORD *v232;
  _BYTE v233[24];
  _BYTE *v234;
  _QWORD v235[3];
  _QWORD *v236;
  void **v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *Scalar;
  char *v248;
  char *v249;
  char *v250;
  char **v251;
  uint64_t v252;

  v252 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v230 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v248 = v8 + 8;
  v249 = v8 + 8;
  v237 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v226 = v10;
  *v10 = v9;
  v228 = v10 + 1;
  v227 = v10 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v226);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v223 = v12;
  *v12 = v11;
  v225 = v12 + 1;
  v224 = v12 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v223);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v220 = v14;
  *v14 = v13;
  v222 = v14 + 1;
  v221 = v14 + 1;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v220);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v217 = v16;
  *v16 = v15;
  v219 = v16 + 1;
  v218 = v16 + 1;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v217);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v214 = v18;
  *v18 = v17;
  v215 = v18 + 1;
  v216 = v18 + 1;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v214);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v211 = v20;
  *v20 = v19;
  v212 = v20 + 1;
  v213 = v20 + 1;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v211);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v208 = v22;
  *v22 = v21;
  v209 = v22 + 1;
  v210 = v22 + 1;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v208);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v205 = v24;
  *v24 = v23;
  v206 = v24 + 1;
  v207 = v24 + 1;
  v245 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v205);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v203 = v26 + 1;
  v204 = v26 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v237, 10, &v229);
  MIL::IRParameter::Make(&v229, (uint64_t *)&v191);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v191);
  v27 = v191;
  v191 = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v229.n128_u64[1];
  if (v229.n128_u64[1])
  {
    v29 = (unint64_t *)(v229.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (__p)
  {
    v203 = __p;
    operator delete(__p);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  if (Scalar)
  {
    v248 = Scalar;
    operator delete(Scalar);
  }
  v31 = v230;
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = (char *)operator new(8uLL);
  Scalar = v33;
  *(_QWORD *)v33 = v32;
  v248 = v33 + 8;
  v249 = v33 + 8;
  v237 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v226 = v35;
  *v35 = v34;
  v228 = v35 + 1;
  v227 = v35 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v226);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v223 = v37;
  *v37 = v36;
  v225 = v37 + 1;
  v224 = v37 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v223);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v220 = v39;
  *v39 = v38;
  v222 = v39 + 1;
  v221 = v39 + 1;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v220);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v217 = v41;
  *v41 = v40;
  v219 = v41 + 1;
  v218 = v41 + 1;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v217);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v214 = v43;
  *v43 = v42;
  v215 = v43 + 1;
  v216 = v43 + 1;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v214);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v211 = v45;
  *v45 = v44;
  v212 = v45 + 1;
  v213 = v45 + 1;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v211);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v208 = v47;
  *v47 = v46;
  v209 = v47 + 1;
  v210 = v47 + 1;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v208);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v205 = v49;
  *v49 = v48;
  v206 = v49 + 1;
  v207 = v49 + 1;
  v245 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v205);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  __p = v51;
  *v51 = v50;
  v203 = v51 + 1;
  v204 = v51 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v237, 10, &v201);
  MIL::IRParameter::Make(&v201, (uint64_t *)&v191);
  v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v31, "ref_tensors", (uint64_t *)&v191);
  v53 = v191;
  v191 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = (std::__shared_weak_count *)v201.n128_u64[1];
  if (v201.n128_u64[1])
  {
    v55 = (unint64_t *)(v201.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (__p)
  {
    v203 = __p;
    operator delete(__p);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  if (Scalar)
  {
    v248 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v52 + 5) + 64))(*((_QWORD *)v52 + 5), 1);
  v57 = v230;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v200);
  MIL::IRParameter::Make(&v200, (uint64_t *)&v237);
  v58 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v57, "begins", (uint64_t *)&v237);
  v59 = v237;
  v237 = 0;
  if (v59)
    (*((void (**)(void **))*v59 + 1))(v59);
  v60 = (std::__shared_weak_count *)v200.n128_u64[1];
  if (v200.n128_u64[1])
  {
    v61 = (unint64_t *)(v200.n128_u64[1] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v58 + 5) + 32))(*((_QWORD *)v58 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v58 + 5) + 64))(*((_QWORD *)v58 + 5), 1);
  v63 = v230;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v199);
  MIL::IRParameter::Make(&v199, (uint64_t *)&v237);
  v64 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v63, "ends", (uint64_t *)&v237);
  v65 = v237;
  v237 = 0;
  if (v65)
    (*((void (**)(void **))*v65 + 1))(v65);
  v66 = (std::__shared_weak_count *)v199.n128_u64[1];
  if (v199.n128_u64[1])
  {
    v67 = (unint64_t *)(v199.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v64 + 5) + 32))(*((_QWORD *)v64 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v64 + 5) + 64))(*((_QWORD *)v64 + 5), 1);
  v69 = v230;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v198);
  MIL::IRParameter::Make(&v198, (uint64_t *)&v237);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v69, "end_masks", (uint64_t *)&v237);
  v71 = v237;
  v237 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v198.n128_u64[1];
  if (v198.n128_u64[1])
  {
    v73 = (unint64_t *)(v198.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 64))(*((_QWORD *)v70 + 5), 1);
  v197 = 0;
  v75 = operator new();
  *(_QWORD *)v75 = 0;
  *(_QWORD *)(v75 + 8) = 0;
  *(_QWORD *)(v75 + 16) = 0;
  v237 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v197, (void **)v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v237, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v197, 1uLL);
  v76 = v197;
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(8uLL);
  v226 = v78;
  *v78 = v77;
  v228 = v78 + 1;
  v227 = v78 + 1;
  v237 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v226);
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(8uLL);
  v223 = v80;
  *v80 = v79;
  v225 = v80 + 1;
  v224 = v80 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v223);
  v81 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v82 = operator new(8uLL);
  v220 = v82;
  *v82 = v81;
  v222 = v82 + 1;
  v221 = v82 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v220);
  v83 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v84 = operator new(8uLL);
  v217 = v84;
  *v84 = v83;
  v219 = v84 + 1;
  v218 = v84 + 1;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v217);
  v85 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v86 = operator new(8uLL);
  v214 = v86;
  *v86 = v85;
  v215 = v86 + 1;
  v216 = v86 + 1;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v214);
  v87 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v88 = operator new(8uLL);
  v211 = v88;
  *v88 = v87;
  v212 = v88 + 1;
  v213 = v88 + 1;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v211);
  v89 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v90 = operator new(8uLL);
  v208 = v90;
  *v90 = v89;
  v209 = v90 + 1;
  v210 = v90 + 1;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v208);
  v91 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v92 = operator new(8uLL);
  v205 = v92;
  *v92 = v91;
  v206 = v92 + 1;
  v207 = v92 + 1;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v205);
  v93 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v94 = operator new(8uLL);
  __p = v94;
  *v94 = v93;
  v203 = v94 + 1;
  v204 = v94 + 1;
  v245 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v95 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v96 = operator new(8uLL);
  v191 = v96;
  *v96 = v95;
  v192 = v96 + 1;
  v193 = v96 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v191);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v237, 10, &v194);
  MIL::IRParameter::Make(&v194, &v195);
  *(_QWORD *)&v196 = v195;
  if (v195)
  {
    v97 = (_QWORD *)operator new();
    v98 = v195;
    *v97 = &unk_1EA99F888;
    v97[1] = 0;
    v97[2] = 0;
    v97[3] = v98;
  }
  else
  {
    v97 = 0;
  }
  *((_QWORD *)&v196 + 1) = v97;
  v195 = 0;
  v99 = v76[2];
  v100 = v76[1];
  if (v100 >= v99)
  {
    v101 = (v100 - *v76) >> 4;
    v102 = v101 + 1;
    if ((unint64_t)(v101 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v103 = v99 - *v76;
    if (v103 >> 3 > v102)
      v102 = v103 >> 3;
    if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF0)
      v104 = 0xFFFFFFFFFFFFFFFLL;
    else
      v104 = v102;
    v251 = v76 + 2;
    v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v76 + 2), v104);
    v107 = &v105[16 * v101];
    *(_OWORD *)v107 = v196;
    v196 = 0uLL;
    v109 = *v76;
    v108 = v76[1];
    if (v108 == *v76)
    {
      v112 = v76[1];
      v110 = &v105[16 * v101];
    }
    else
    {
      v110 = &v105[16 * v101];
      do
      {
        v111 = *((_OWORD *)v108 - 1);
        v108 -= 16;
        *((_OWORD *)v110 - 1) = v111;
        v110 -= 16;
        *(_QWORD *)v108 = 0;
        *((_QWORD *)v108 + 1) = 0;
      }
      while (v108 != v109);
      v112 = *v76;
      v108 = v76[1];
    }
    v113 = v107 + 16;
    *v76 = v110;
    Scalar = v112;
    v248 = v112;
    v76[1] = v107 + 16;
    v249 = v108;
    v114 = v76[2];
    v76[2] = &v105[16 * v106];
    v250 = v114;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
    v115 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
    v76[1] = v113;
    if (v115)
    {
      p_shared_owners = (unint64_t *)&v115->__shared_owners_;
      do
        v117 = __ldaxr(p_shared_owners);
      while (__stlxr(v117 - 1, p_shared_owners));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
  }
  else
  {
    *(_QWORD *)v100 = v196;
    *((_QWORD *)v100 + 1) = v97;
    v196 = 0uLL;
    v76[1] = v100 + 16;
  }
  v118 = v195;
  v195 = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  v119 = (std::__shared_weak_count *)v194.n128_u64[1];
  if (v194.n128_u64[1])
  {
    v120 = (unint64_t *)(v194.n128_u64[1] + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  if (__p)
  {
    v203 = __p;
    operator delete(__p);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  v189 = *(_OWORD *)a2;
  v190 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v122 = (uint64_t)v230;
  *(_QWORD *)&v188 = v230;
  if (v230)
  {
    v123 = (_QWORD *)operator new();
    *v123 = &unk_1EA99F8E8;
    v123[1] = 0;
    v123[2] = 0;
    v123[3] = v122;
  }
  else
  {
    v123 = 0;
  }
  *((_QWORD *)&v188 + 1) = v123;
  v230 = 0;
  *(_QWORD *)&v187 = v197;
  if (v197)
  {
    v124 = (_QWORD *)operator new();
    v125 = v197;
    *v124 = &unk_1EA99F948;
    v124[1] = 0;
    v124[2] = 0;
    v124[3] = v125;
  }
  else
  {
    v124 = 0;
  }
  *((_QWORD *)&v187 + 1) = v124;
  v197 = 0;
  v235[0] = &unk_1EA99FAC8;
  v235[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateReshapeLike;
  v236 = v235;
  v234 = 0;
  MIL::IROperator::Make(&v189, &v188, &v187, (uint64_t)v235, (uint64_t)v233, a3);
  v126 = v234;
  if (v234 == v233)
  {
    v127 = 4;
    v126 = v233;
  }
  else
  {
    if (!v234)
      goto LABEL_135;
    v127 = 5;
  }
  (*(void (**)(void))(*v126 + 8 * v127))();
LABEL_135:
  v128 = v236;
  if (v236 == v235)
  {
    v129 = 4;
    v128 = v235;
    goto LABEL_139;
  }
  if (v236)
  {
    v129 = 5;
LABEL_139:
    (*(void (**)(void))(*v128 + 8 * v129))();
  }
  v130 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v131 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
  if (*((_QWORD *)&v188 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  if (SHIBYTE(v190) < 0)
    operator delete((void *)v189);
  v136 = *a3;
  v231[0] = &off_1EA99FBD8;
  v231[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceReshapeLike;
  v232 = v231;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v136 + 200))(v136, v231);
  v137 = v232;
  if (v232 == v231)
  {
    v138 = 4;
    v137 = v231;
  }
  else
  {
    if (!v232)
      goto LABEL_157;
    v138 = 5;
  }
  (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_157:
  MIL::Validation::TensorDTypeConstraints::Make(&v237);
  v139 = v237;
  std::string::basic_string[abi:ne180100]<0>(v183, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v183, 0, (uint64_t *)&Scalar);
  v185 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = (std::__shared_weak_count_vtbl *)Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v186 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v181, "T");
  (*((void (**)(void **, char **, void **))*v139 + 3))(v139, &v185, v181);
  if (v182 < 0)
    operator delete(v181[0]);
  v142 = v186;
  if (v186)
  {
    v143 = (unint64_t *)&v186->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*(void (**)(char *))(*(_QWORD *)v145 + 8))(v145);
  if (v184 < 0)
    operator delete(v183[0]);
  v146 = v237;
  std::string::basic_string[abi:ne180100]<0>(v177, "ref_tensors");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v177, 0, (uint64_t *)&Scalar);
  v179 = Scalar;
  if (Scalar)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)Scalar;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v180 = v147;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v175, "R");
  (*((void (**)(void **, char **, void **))*v146 + 3))(v146, &v179, v175);
  if (v176 < 0)
    operator delete(v175[0]);
  v149 = v180;
  if (v180)
  {
    v150 = (unint64_t *)&v180->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = Scalar;
  Scalar = 0;
  if (v152)
    (*(void (**)(char *))(*(_QWORD *)v152 + 8))(v152);
  if (v178 < 0)
    operator delete(v177[0]);
  v153 = v237;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v173 = Scalar;
  if (Scalar)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)Scalar;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v174 = v154;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "T");
  (*((void (**)(void **, char **, void **))*v153 + 3))(v153, &v173, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v156 = v174;
  if (v174)
  {
    v157 = (unint64_t *)&v174->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = Scalar;
  Scalar = 0;
  if (v159)
    (*(void (**)(char *))(*(_QWORD *)v159 + 8))(v159);
  v160 = *a3;
  v169 = v237;
  if (v237)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = v237;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = (std::__shared_weak_count_vtbl *)v162;
  }
  else
  {
    v161 = 0;
  }
  v170 = v161;
  v237 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v160 + 56))(v160, &v169);
  v163 = v170;
  if (v170)
  {
    v164 = (unint64_t *)&v170->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = v237;
  v237 = 0;
  if (v166)
    (*((void (**)(void **))*v166 + 1))(v166);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v197, 0);
  result = (uint64_t)v230;
  if (v230)
  {
    v168 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v230);
    return MEMORY[0x1E0C023A0](v168, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A37270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  v53 = *(_QWORD *)(v51 - 192);
  *(_QWORD *)(v51 - 192) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *v50;
  *v50 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x278], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::Reverse::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void **v43;
  unsigned __int8 *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  char *v96;
  char *v97;
  char *v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  char **v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  void **v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  void **v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  void **v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  void **v144;
  void **v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  void **v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  void **v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  void **v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  void **v172;
  uint64_t result;
  uint64_t v174;
  void **v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  void *v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  void *v183[2];
  char v184;
  void *v185;
  std::__shared_weak_count *v186;
  void *v187[2];
  char v188;
  void *v189[2];
  char v190;
  void *v191;
  std::__shared_weak_count *v192;
  void **v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  void *v197;
  std::__shared_weak_count *v198;
  void *v199[2];
  char v200;
  void *v201[2];
  char v202;
  void *v203;
  std::__shared_weak_count *v204;
  __int128 v205;
  __int128 v206;
  void *v207[2];
  uint64_t v208;
  void *v209;
  void *v210;
  _QWORD *v211;
  __n128 v212;
  uint64_t v213;
  __int128 v214;
  char **v215;
  __n128 v216;
  void *__p;
  void *v218;
  _QWORD *v219;
  void *v220;
  void *v221;
  _QWORD *v222;
  void *v223;
  void *v224;
  _QWORD *v225;
  void *v226;
  void *v227;
  _QWORD *v228;
  void *v229;
  void *v230;
  _QWORD *v231;
  void *v232;
  void *v233;
  _QWORD *v234;
  void *v235;
  void *v236;
  _QWORD *v237;
  void *v238;
  void *v239;
  _QWORD *v240;
  __n128 v241;
  _QWORD *v242;
  void *v243;
  void *v244;
  char *v245;
  char *v246;
  char **v247;
  _BYTE v248[24];
  _BYTE *v249;
  _BYTE v250[24];
  _BYTE *v251;
  _QWORD v252[3];
  _QWORD *v253;
  void *v254;
  void *v255;
  _QWORD *v256;
  void **v257;
  void **v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;

  v267 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v242 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v245 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v243 = v9;
  v244 = v9 + 16;
  v257 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v243);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v255 = v12 + 2;
  v256 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v254 = v12;
  v258 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v254);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v240 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v238 = v15;
  v239 = v15 + 2;
  v259 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v238);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v237 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v235 = v18;
  v236 = v18 + 2;
  v260 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v235);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v234 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v232 = v21;
  v233 = v21 + 2;
  v261 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v232);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v231 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v229 = v24;
  v230 = v24 + 2;
  v262 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v229);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v228 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v226 = v27;
  v227 = v27 + 2;
  v263 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v226);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v225 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v223 = v30;
  v224 = v30 + 2;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v223);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v221 = v33 + 2;
  v222 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  v220 = v33;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v220);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(0x10uLL);
  v218 = v36 + 2;
  v219 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  __p = v36;
  v266 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v257, 10, &v241);
  MIL::IRParameter::Make(&v241, (uint64_t *)&v209);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v209);
  v37 = v209;
  v209 = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v241.n128_u64[1];
  if (v241.n128_u64[1])
  {
    v39 = (unint64_t *)(v241.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v218 = __p;
    operator delete(__p);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  if (v229)
  {
    v230 = v229;
    operator delete(v229);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (v235)
  {
    v236 = v235;
    operator delete(v235);
  }
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  v41 = v242;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (void **)operator new(8uLL);
  v257 = v43;
  *v43 = (void *)v42;
  v258 = v43 + 1;
  v259 = (uint64_t)(v43 + 1);
  v254 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v257);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v254, 1, &v216);
  MIL::IRParameter::Make(&v216, (uint64_t *)&v243);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v41, "axes", (uint64_t *)&v243);
  v45 = v243;
  v243 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v216.n128_u64[1];
  if (v216.n128_u64[1])
  {
    v47 = (unint64_t *)(v216.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v257)
  {
    v258 = v257;
    operator delete(v257);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v215 = 0;
  v49 = operator new();
  *(_QWORD *)v49 = 0;
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = 0;
  v257 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v215, (void **)v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v257, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v215, 1uLL);
  v50 = v215;
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(0x10uLL);
  v255 = v53 + 2;
  v256 = v53 + 2;
  *v53 = v51;
  v53[1] = v52;
  v254 = v53;
  v257 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v254);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(0x10uLL);
  v240 = v56 + 2;
  *v56 = v54;
  v56[1] = v55;
  v238 = v56;
  v239 = v56 + 2;
  v258 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v238);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(0x10uLL);
  v237 = v59 + 2;
  *v59 = v57;
  v59[1] = v58;
  v235 = v59;
  v236 = v59 + 2;
  v259 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v235);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(0x10uLL);
  v234 = v62 + 2;
  *v62 = v60;
  v62[1] = v61;
  v232 = v62;
  v233 = v62 + 2;
  v260 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v232);
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(0x10uLL);
  v231 = v65 + 2;
  *v65 = v63;
  v65[1] = v64;
  v229 = v65;
  v230 = v65 + 2;
  v261 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v229);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(0x10uLL);
  v228 = v68 + 2;
  *v68 = v66;
  v68[1] = v67;
  v226 = v68;
  v227 = v68 + 2;
  v262 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v226);
  v69 = MIL::IRUnknownDimension::Make(a1, 0);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(0x10uLL);
  v225 = v71 + 2;
  *v71 = v69;
  v71[1] = v70;
  v223 = v71;
  v224 = v71 + 2;
  v263 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v223);
  v72 = MIL::IRUnknownDimension::Make(a1, 0);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(0x10uLL);
  v221 = v74 + 2;
  v222 = v74 + 2;
  *v74 = v72;
  v74[1] = v73;
  v220 = v74;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v220);
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(0x10uLL);
  v218 = v77 + 2;
  v219 = v77 + 2;
  *v77 = v75;
  v77[1] = v76;
  __p = v77;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(0x10uLL);
  v210 = v80 + 2;
  v211 = v80 + 2;
  *v80 = v78;
  v80[1] = v79;
  v209 = v80;
  v266 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v209);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v257, 10, &v212);
  MIL::IRParameter::Make(&v212, &v213);
  *(_QWORD *)&v214 = v213;
  if (v213)
  {
    v81 = (_QWORD *)operator new();
    v82 = v213;
    *v81 = &unk_1EA99F888;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v82;
  }
  else
  {
    v81 = 0;
  }
  *((_QWORD *)&v214 + 1) = v81;
  v213 = 0;
  v83 = v50[2];
  v84 = v50[1];
  if (v84 >= v83)
  {
    v85 = (v84 - *v50) >> 4;
    v86 = v85 + 1;
    if ((unint64_t)(v85 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v87 = v83 - *v50;
    if (v87 >> 3 > v86)
      v86 = v87 >> 3;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
      v88 = 0xFFFFFFFFFFFFFFFLL;
    else
      v88 = v86;
    v247 = v50 + 2;
    v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v50 + 2), v88);
    v91 = &v89[16 * v85];
    *(_OWORD *)v91 = v214;
    v214 = 0uLL;
    v93 = *v50;
    v92 = v50[1];
    if (v92 == *v50)
    {
      v96 = v50[1];
      v94 = &v89[16 * v85];
    }
    else
    {
      v94 = &v89[16 * v85];
      do
      {
        v95 = *((_OWORD *)v92 - 1);
        v92 -= 16;
        *((_OWORD *)v94 - 1) = v95;
        v94 -= 16;
        *(_QWORD *)v92 = 0;
        *((_QWORD *)v92 + 1) = 0;
      }
      while (v92 != v93);
      v96 = *v50;
      v92 = v50[1];
    }
    v97 = v91 + 16;
    *v50 = v94;
    v244 = v96;
    v50[1] = v91 + 16;
    v245 = v92;
    v98 = v50[2];
    v50[2] = &v89[16 * v90];
    v246 = v98;
    v243 = v96;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v243);
    v99 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
    v50[1] = v97;
    if (v99)
    {
      p_shared_owners = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldaxr(p_shared_owners);
      while (__stlxr(v101 - 1, p_shared_owners));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
  }
  else
  {
    *(_QWORD *)v84 = v214;
    *((_QWORD *)v84 + 1) = v81;
    v214 = 0uLL;
    v50[1] = v84 + 16;
  }
  v102 = v213;
  v213 = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  v103 = (std::__shared_weak_count *)v212.n128_u64[1];
  if (v212.n128_u64[1])
  {
    v104 = (unint64_t *)(v212.n128_u64[1] + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (__p)
  {
    v218 = __p;
    operator delete(__p);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  if (v229)
  {
    v230 = v229;
    operator delete(v229);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (v235)
  {
    v236 = v235;
    operator delete(v235);
  }
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  *(_OWORD *)v207 = *(_OWORD *)a2;
  v208 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v106 = (uint64_t)v242;
  *(_QWORD *)&v206 = v242;
  if (v242)
  {
    v107 = (_QWORD *)operator new();
    *v107 = &unk_1EA99F8E8;
    v107[1] = 0;
    v107[2] = 0;
    v107[3] = v106;
  }
  else
  {
    v107 = 0;
  }
  *((_QWORD *)&v206 + 1) = v107;
  v242 = 0;
  *(_QWORD *)&v205 = v215;
  if (v215)
  {
    v108 = (_QWORD *)operator new();
    v109 = v215;
    *v108 = &unk_1EA99F948;
    v108[1] = 0;
    v108[2] = 0;
    v108[3] = v109;
  }
  else
  {
    v108 = 0;
  }
  *((_QWORD *)&v205 + 1) = v108;
  v215 = 0;
  v252[0] = &unk_1EA99FAC8;
  v252[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateReverse;
  v253 = v252;
  v251 = 0;
  MIL::IROperator::Make((__int128 *)v207, &v206, &v205, (uint64_t)v252, (uint64_t)v250, a3);
  v110 = v251;
  if (v251 == v250)
  {
    v111 = 4;
    v110 = v250;
  }
  else
  {
    if (!v251)
      goto LABEL_96;
    v111 = 5;
  }
  (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_96:
  v112 = v253;
  if (v253 == v252)
  {
    v113 = 4;
    v112 = v252;
    goto LABEL_100;
  }
  if (v253)
  {
    v113 = 5;
LABEL_100:
    (*(void (**)(void))(*v112 + 8 * v113))();
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
  if (*((_QWORD *)&v205 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
  if (*((_QWORD *)&v206 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (SHIBYTE(v208) < 0)
    operator delete(v207[0]);
  v120 = *a3;
  v121 = std::string::basic_string[abi:ne180100]<0>(&v257, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v121, (uint64_t)v248);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v120 + 200))(v120, v248);
  v122 = v249;
  if (v249 == v248)
  {
    v123 = 4;
    v122 = v248;
  }
  else
  {
    if (!v249)
      goto LABEL_118;
    v123 = 5;
  }
  (*(void (**)(void))(*v122 + 8 * v123))();
LABEL_118:
  if (SHIBYTE(v259) < 0)
    operator delete(v257);
  MIL::Validation::TensorDTypeConstraints::Make(&v257);
  v124 = v257;
  std::string::basic_string[abi:ne180100]<0>(v201, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v201, 0, (uint64_t *)&v243);
  v203 = v243;
  if (v243)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)v243;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v204 = v125;
  v243 = 0;
  std::string::basic_string[abi:ne180100]<0>(v199, "T");
  (*((void (**)(void **, void **, void **))*v124 + 3))(v124, &v203, v199);
  if (v200 < 0)
    operator delete(v199[0]);
  v127 = v204;
  if (v204)
  {
    v128 = (unint64_t *)&v204->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v243;
  v243 = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  if (v202 < 0)
    operator delete(v201[0]);
  v131 = v257;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v243);
  v197 = v243;
  if (v243)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = (std::__shared_weak_count_vtbl *)v243;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v198 = v132;
  v243 = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "T");
  (*((void (**)(void **, void **, void **))*v131 + 3))(v131, &v197, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v134 = v198;
  if (v198)
  {
    v135 = (unint64_t *)&v198->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v243;
  v243 = 0;
  if (v137)
    (*(void (**)(void *))(*(_QWORD *)v137 + 8))(v137);
  v138 = *a3;
  v193 = v257;
  if (v257)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = v257;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = (std::__shared_weak_count_vtbl *)v140;
  }
  else
  {
    v139 = 0;
  }
  v194 = v139;
  v257 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v138 + 56))(v138, &v193);
  v141 = v194;
  if (v194)
  {
    v142 = (unint64_t *)&v194->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = v257;
  v257 = 0;
  if (v144)
    (*((void (**)(void **))*v144 + 1))(v144);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v257);
  v145 = v257;
  std::string::basic_string[abi:ne180100]<0>(v189, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v189, 0, (uint64_t *)&v243);
  v191 = v243;
  if (v243)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = (std::__shared_weak_count_vtbl *)v243;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v192 = v146;
  v243 = 0;
  std::string::basic_string[abi:ne180100]<0>(v187, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v145 + 3))(v145, &v191, 0, v187);
  if (v188 < 0)
    operator delete(v187[0]);
  v148 = v192;
  if (v192)
  {
    v149 = (unint64_t *)&v192->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v243;
  v243 = 0;
  if (v151)
    (*(void (**)(void *))(*(_QWORD *)v151 + 8))(v151);
  if (v190 < 0)
    operator delete(v189[0]);
  v152 = v257;
  std::string::basic_string[abi:ne180100]<0>(v183, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v183, 1, (uint64_t *)&v243);
  v185 = v243;
  if (v243)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = (std::__shared_weak_count_vtbl *)v243;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v186 = v153;
  v243 = 0;
  std::string::basic_string[abi:ne180100]<0>(v181, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v152 + 3))(v152, &v185, 0, v181);
  if (v182 < 0)
    operator delete(v181[0]);
  v155 = v186;
  if (v186)
  {
    v156 = (unint64_t *)&v186->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v243;
  v243 = 0;
  if (v158)
    (*(void (**)(void *))(*(_QWORD *)v158 + 8))(v158);
  if (v184 < 0)
    operator delete(v183[0]);
  v159 = v257;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v243);
  v179 = v243;
  if (v243)
  {
    v160 = (std::__shared_weak_count *)operator new();
    v161 = (std::__shared_weak_count_vtbl *)v243;
    v160->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v160->__shared_owners_ = 0;
    v160->__shared_weak_owners_ = 0;
    v160[1].__vftable = v161;
  }
  else
  {
    v160 = 0;
  }
  v180 = v160;
  v243 = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v159 + 3))(v159, &v179, 0, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v162 = v180;
  if (v180)
  {
    v163 = (unint64_t *)&v180->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = v243;
  v243 = 0;
  if (v165)
    (*(void (**)(void *))(*(_QWORD *)v165 + 8))(v165);
  v166 = *a3;
  v175 = v257;
  if (v257)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = v257;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = (std::__shared_weak_count_vtbl *)v168;
  }
  else
  {
    v167 = 0;
  }
  v176 = v167;
  v257 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v166 + 56))(v166, &v175);
  v169 = v176;
  if (v176)
  {
    v170 = (unint64_t *)&v176->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = v257;
  v257 = 0;
  if (v172)
    (*((void (**)(void **))*v172 + 1))(v172);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v215, 0);
  result = (uint64_t)v242;
  if (v242)
  {
    v174 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v242);
    return MEMORY[0x1E0C023A0](v174, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A38D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a64;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;

  v67 = *(_QWORD *)(v65 - 152);
  *(_QWORD *)(v65 - 152) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *v64;
  *v64 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2A0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::ReverseSequence::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  char **v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  __int128 v110;
  char *v111;
  char *v112;
  char *v113;
  std::__shared_weak_count *v114;
  unint64_t *p_shared_owners;
  unint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  char **v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  char *v145;
  void **v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  char *v152;
  void **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void **v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void **v166;
  void **v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  char *v173;
  void **v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  char *v180;
  void **v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  void **v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  void **v194;
  uint64_t result;
  uint64_t v196;
  void **v197;
  std::__shared_weak_count *v198;
  void *v199[2];
  char v200;
  char *v201;
  std::__shared_weak_count *v202;
  void *v203[2];
  char v204;
  void *v205[2];
  char v206;
  char *v207;
  std::__shared_weak_count *v208;
  void *v209[2];
  char v210;
  void *v211[2];
  char v212;
  char *v213;
  std::__shared_weak_count *v214;
  void **v215;
  std::__shared_weak_count *v216;
  void *v217[2];
  char v218;
  char *v219;
  std::__shared_weak_count *v220;
  void *v221[2];
  char v222;
  void *v223[2];
  char v224;
  char *v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  void *v229[2];
  char v230;
  char *v231;
  std::__shared_weak_count *v232;
  __int128 v233;
  __int128 v234;
  void *v235[2];
  uint64_t v236;
  void *v237;
  void *v238;
  _QWORD *v239;
  __n128 v240;
  uint64_t v241;
  __int128 v242;
  char **v243;
  __n128 v244;
  __n128 v245;
  __n128 v246;
  void *__p;
  void *v248;
  _QWORD *v249;
  void *v250;
  void *v251;
  _QWORD *v252;
  void *v253;
  void *v254;
  _QWORD *v255;
  void *v256;
  void *v257;
  _QWORD *v258;
  void *v259;
  void *v260;
  _QWORD *v261;
  void *v262;
  void *v263;
  _QWORD *v264;
  void *v265;
  void *v266;
  _QWORD *v267;
  void *v268;
  void *v269;
  _QWORD *v270;
  void *v271;
  void *v272;
  _QWORD *v273;
  __n128 v274;
  _QWORD *v275;
  _BYTE v276[24];
  _BYTE *v277;
  _BYTE v278[24];
  _BYTE *v279;
  _BYTE v280[24];
  _BYTE *v281;
  void **v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *Scalar;
  char *v293;
  char *v294;
  char *v295;
  char **v296;
  uint64_t v297;

  v297 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v275 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v293 = v9 + 16;
  v294 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = v9;
  v282 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v273 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v271 = v12;
  v272 = v12 + 2;
  v283 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v271);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v270 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v268 = v15;
  v269 = v15 + 2;
  v284 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v268);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v267 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v265 = v18;
  v266 = v18 + 2;
  v285 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v265);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v264 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v262 = v21;
  v263 = v21 + 2;
  v286 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v262);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v261 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v259 = v24;
  v260 = v24 + 2;
  v287 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v259);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v258 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v256 = v27;
  v257 = v27 + 2;
  v288 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v256);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v255 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v253 = v30;
  v254 = v30 + 2;
  v289 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v253);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v252 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  v250 = v33;
  v251 = v33 + 2;
  v290 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v250);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(0x10uLL);
  v249 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  __p = v36;
  v248 = v36 + 2;
  v291 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v282, 10, &v274);
  MIL::IRParameter::Make(&v274, (uint64_t *)&v237);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v237);
  v37 = v237;
  v237 = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v274.n128_u64[1];
  if (v274.n128_u64[1])
  {
    v39 = (unint64_t *)(v274.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v248 = __p;
    operator delete(__p);
  }
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  if (v259)
  {
    v260 = v259;
    operator delete(v259);
  }
  if (v262)
  {
    v263 = v262;
    operator delete(v262);
  }
  if (v265)
  {
    v266 = v265;
    operator delete(v265);
  }
  if (v268)
  {
    v269 = v268;
    operator delete(v268);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (Scalar)
  {
    v293 = Scalar;
    operator delete(Scalar);
  }
  v41 = v275;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (char *)operator new(8uLL);
  Scalar = v43;
  *(_QWORD *)v43 = v42;
  v293 = v43 + 8;
  v294 = v43 + 8;
  v282 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = operator new(8uLL);
  v271 = v45;
  *v45 = v44;
  v273 = v45 + 1;
  v272 = v45 + 1;
  v283 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v271);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = operator new(8uLL);
  v268 = v47;
  *v47 = v46;
  v270 = v47 + 1;
  v269 = v47 + 1;
  v284 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v268);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v282, 3, &v246);
  MIL::IRParameter::Make(&v246, (uint64_t *)&v265);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v41, "lengths", (uint64_t *)&v265);
  v48 = v265;
  v265 = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v246.n128_u64[1];
  if (v246.n128_u64[1])
  {
    v50 = (unint64_t *)(v246.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v268)
  {
    v269 = v268;
    operator delete(v268);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (Scalar)
  {
    v293 = Scalar;
    operator delete(Scalar);
  }
  v52 = v275;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v245);
  MIL::IRParameter::Make(&v245, (uint64_t *)&v282);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v52, "seq_axis", (uint64_t *)&v282);
  v54 = v282;
  v282 = 0;
  if (v54)
    (*((void (**)(void **))*v54 + 1))(v54);
  v55 = (std::__shared_weak_count *)v245.n128_u64[1];
  if (v245.n128_u64[1])
  {
    v56 = (unint64_t *)(v245.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v58 = v275;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v244);
  MIL::IRParameter::Make(&v244, (uint64_t *)&v282);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v58, "batch_axis", (uint64_t *)&v282);
  v60 = v282;
  v282 = 0;
  if (v60)
    (*((void (**)(void **))*v60 + 1))(v60);
  v61 = (std::__shared_weak_count *)v244.n128_u64[1];
  if (v244.n128_u64[1])
  {
    v62 = (unint64_t *)(v244.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v243 = 0;
  v64 = operator new();
  *(_QWORD *)v64 = 0;
  *(_QWORD *)(v64 + 8) = 0;
  *(_QWORD *)(v64 + 16) = 0;
  v282 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v243, (void **)v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v282, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v243, 1uLL);
  v65 = v243;
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(0x10uLL);
  v273 = v68 + 2;
  *v68 = v66;
  v68[1] = v67;
  v271 = v68;
  v272 = v68 + 2;
  v282 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v271);
  v69 = MIL::IRUnknownDimension::Make(a1, 0);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(0x10uLL);
  v270 = v71 + 2;
  *v71 = v69;
  v71[1] = v70;
  v268 = v71;
  v269 = v71 + 2;
  v283 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v268);
  v72 = MIL::IRUnknownDimension::Make(a1, 0);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(0x10uLL);
  v267 = v74 + 2;
  *v74 = v72;
  v74[1] = v73;
  v265 = v74;
  v266 = v74 + 2;
  v284 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v265);
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(0x10uLL);
  v264 = v77 + 2;
  *v77 = v75;
  v77[1] = v76;
  v262 = v77;
  v263 = v77 + 2;
  v285 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v262);
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(0x10uLL);
  v261 = v80 + 2;
  *v80 = v78;
  v80[1] = v79;
  v259 = v80;
  v260 = v80 + 2;
  v286 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v259);
  v81 = MIL::IRUnknownDimension::Make(a1, 0);
  v82 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v83 = operator new(0x10uLL);
  v258 = v83 + 2;
  *v83 = v81;
  v83[1] = v82;
  v256 = v83;
  v257 = v83 + 2;
  v287 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v256);
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v86 = operator new(0x10uLL);
  v255 = v86 + 2;
  *v86 = v84;
  v86[1] = v85;
  v253 = v86;
  v254 = v86 + 2;
  v288 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v253);
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v89 = operator new(0x10uLL);
  v252 = v89 + 2;
  *v89 = v87;
  v89[1] = v88;
  v250 = v89;
  v251 = v89 + 2;
  v289 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v250);
  v90 = MIL::IRUnknownDimension::Make(a1, 0);
  v91 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v92 = operator new(0x10uLL);
  v249 = v92 + 2;
  *v92 = v90;
  v92[1] = v91;
  __p = v92;
  v248 = v92 + 2;
  v290 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v93 = MIL::IRUnknownDimension::Make(a1, 0);
  v94 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v95 = operator new(0x10uLL);
  v238 = v95 + 2;
  v239 = v95 + 2;
  *v95 = v93;
  v95[1] = v94;
  v237 = v95;
  v291 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v237);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v282, 10, &v240);
  MIL::IRParameter::Make(&v240, &v241);
  *(_QWORD *)&v242 = v241;
  if (v241)
  {
    v96 = (_QWORD *)operator new();
    v97 = v241;
    *v96 = &unk_1EA99F888;
    v96[1] = 0;
    v96[2] = 0;
    v96[3] = v97;
  }
  else
  {
    v96 = 0;
  }
  *((_QWORD *)&v242 + 1) = v96;
  v241 = 0;
  v98 = v65[2];
  v99 = v65[1];
  if (v99 >= v98)
  {
    v100 = (v99 - *v65) >> 4;
    v101 = v100 + 1;
    if ((unint64_t)(v100 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v102 = v98 - *v65;
    if (v102 >> 3 > v101)
      v101 = v102 >> 3;
    if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0)
      v103 = 0xFFFFFFFFFFFFFFFLL;
    else
      v103 = v101;
    v296 = v65 + 2;
    v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v65 + 2), v103);
    v106 = &v104[16 * v100];
    *(_OWORD *)v106 = v242;
    v242 = 0uLL;
    v108 = *v65;
    v107 = v65[1];
    if (v107 == *v65)
    {
      v111 = v65[1];
      v109 = &v104[16 * v100];
    }
    else
    {
      v109 = &v104[16 * v100];
      do
      {
        v110 = *((_OWORD *)v107 - 1);
        v107 -= 16;
        *((_OWORD *)v109 - 1) = v110;
        v109 -= 16;
        *(_QWORD *)v107 = 0;
        *((_QWORD *)v107 + 1) = 0;
      }
      while (v107 != v108);
      v111 = *v65;
      v107 = v65[1];
    }
    v112 = v106 + 16;
    *v65 = v109;
    Scalar = v111;
    v293 = v111;
    v65[1] = v106 + 16;
    v294 = v107;
    v113 = v65[2];
    v65[2] = &v104[16 * v105];
    v295 = v113;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
    v114 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
    v65[1] = v112;
    if (v114)
    {
      p_shared_owners = (unint64_t *)&v114->__shared_owners_;
      do
        v116 = __ldaxr(p_shared_owners);
      while (__stlxr(v116 - 1, p_shared_owners));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
  }
  else
  {
    *(_QWORD *)v99 = v242;
    *((_QWORD *)v99 + 1) = v96;
    v242 = 0uLL;
    v65[1] = v99 + 16;
  }
  v117 = v241;
  v241 = 0;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = (std::__shared_weak_count *)v240.n128_u64[1];
  if (v240.n128_u64[1])
  {
    v119 = (unint64_t *)(v240.n128_u64[1] + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  if (__p)
  {
    v248 = __p;
    operator delete(__p);
  }
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  if (v259)
  {
    v260 = v259;
    operator delete(v259);
  }
  if (v262)
  {
    v263 = v262;
    operator delete(v262);
  }
  if (v265)
  {
    v266 = v265;
    operator delete(v265);
  }
  if (v268)
  {
    v269 = v268;
    operator delete(v268);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  *(_OWORD *)v235 = *(_OWORD *)a2;
  v236 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v121 = (uint64_t)v275;
  *(_QWORD *)&v234 = v275;
  if (v275)
  {
    v122 = (_QWORD *)operator new();
    *v122 = &unk_1EA99F8E8;
    v122[1] = 0;
    v122[2] = 0;
    v122[3] = v121;
  }
  else
  {
    v122 = 0;
  }
  *((_QWORD *)&v234 + 1) = v122;
  v275 = 0;
  *(_QWORD *)&v233 = v243;
  if (v243)
  {
    v123 = (_QWORD *)operator new();
    v124 = v243;
    *v123 = &unk_1EA99F948;
    v123[1] = 0;
    v123[2] = 0;
    v123[3] = v124;
  }
  else
  {
    v123 = 0;
  }
  *((_QWORD *)&v233 + 1) = v123;
  v243 = 0;
  v281 = 0;
  v279 = 0;
  MIL::IROperator::Make((__int128 *)v235, &v234, &v233, (uint64_t)v280, (uint64_t)v278, a3);
  v125 = v279;
  if (v279 == v278)
  {
    v126 = 4;
    v125 = v278;
  }
  else
  {
    if (!v279)
      goto LABEL_114;
    v126 = 5;
  }
  (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_114:
  v127 = v281;
  if (v281 == v280)
  {
    v128 = 4;
    v127 = v280;
    goto LABEL_118;
  }
  if (v281)
  {
    v128 = 5;
LABEL_118:
    (*(void (**)(void))(*v127 + 8 * v128))();
  }
  v129 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
  if (*((_QWORD *)&v233 + 1))
  {
    v130 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (*((_QWORD *)&v234 + 1))
  {
    v133 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (SHIBYTE(v236) < 0)
    operator delete(v235[0]);
  v135 = *a3;
  v136 = std::string::basic_string[abi:ne180100]<0>(&v282, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v136, (uint64_t)v276);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v135 + 200))(v135, v276);
  v137 = v277;
  if (v277 == v276)
  {
    v138 = 4;
    v137 = v276;
  }
  else
  {
    if (!v277)
      goto LABEL_136;
    v138 = 5;
  }
  (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_136:
  if (SHIBYTE(v284) < 0)
    operator delete(v282);
  MIL::Validation::TensorDTypeConstraints::Make(&v282);
  v139 = v282;
  std::string::basic_string[abi:ne180100]<0>(v229, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v229, 0, (uint64_t *)&Scalar);
  v231 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = (std::__shared_weak_count_vtbl *)Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v232 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v227, "T");
  (*((void (**)(void **, char **, void **))*v139 + 3))(v139, &v231, v227);
  if (v228 < 0)
    operator delete(v227[0]);
  v142 = v232;
  if (v232)
  {
    v143 = (unint64_t *)&v232->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*(void (**)(char *))(*(_QWORD *)v145 + 8))(v145);
  if (v230 < 0)
    operator delete(v229[0]);
  v146 = v282;
  std::string::basic_string[abi:ne180100]<0>(v223, "lengths");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v223, 0, (uint64_t *)&Scalar);
  v225 = Scalar;
  if (Scalar)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)Scalar;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v226 = v147;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v221, "LENGTHS_T");
  (*((void (**)(void **, char **, void **))*v146 + 3))(v146, &v225, v221);
  if (v222 < 0)
    operator delete(v221[0]);
  v149 = v226;
  if (v226)
  {
    v150 = (unint64_t *)&v226->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = Scalar;
  Scalar = 0;
  if (v152)
    (*(void (**)(char *))(*(_QWORD *)v152 + 8))(v152);
  if (v224 < 0)
    operator delete(v223[0]);
  v153 = v282;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v219 = Scalar;
  if (Scalar)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)Scalar;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v220 = v154;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v217, "T");
  (*((void (**)(void **, char **, void **))*v153 + 3))(v153, &v219, v217);
  if (v218 < 0)
    operator delete(v217[0]);
  v156 = v220;
  if (v220)
  {
    v157 = (unint64_t *)&v220->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = Scalar;
  Scalar = 0;
  if (v159)
    (*(void (**)(char *))(*(_QWORD *)v159 + 8))(v159);
  v160 = *a3;
  v215 = v282;
  if (v282)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = v282;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = (std::__shared_weak_count_vtbl *)v162;
  }
  else
  {
    v161 = 0;
  }
  v216 = v161;
  v282 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v160 + 56))(v160, &v215);
  v163 = v216;
  if (v216)
  {
    v164 = (unint64_t *)&v216->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = v282;
  v282 = 0;
  if (v166)
    (*((void (**)(void **))*v166 + 1))(v166);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v282);
  v167 = v282;
  std::string::basic_string[abi:ne180100]<0>(v211, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v211, 0, (uint64_t *)&Scalar);
  v213 = Scalar;
  if (Scalar)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = (std::__shared_weak_count_vtbl *)Scalar;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v214 = v168;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v209, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v167 + 3))(v167, &v213, 0, v209);
  if (v210 < 0)
    operator delete(v209[0]);
  v170 = v214;
  if (v214)
  {
    v171 = (unint64_t *)&v214->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = Scalar;
  Scalar = 0;
  if (v173)
    (*(void (**)(char *))(*(_QWORD *)v173 + 8))(v173);
  if (v212 < 0)
    operator delete(v211[0]);
  v174 = v282;
  std::string::basic_string[abi:ne180100]<0>(v205, "lengths");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v205, 0, (uint64_t *)&Scalar);
  v207 = Scalar;
  if (Scalar)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = (std::__shared_weak_count_vtbl *)Scalar;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v208 = v175;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v203, "K");
  (*((void (**)(void **, char **, _QWORD, void **))*v174 + 3))(v174, &v207, 0, v203);
  if (v204 < 0)
    operator delete(v203[0]);
  v177 = v208;
  if (v208)
  {
    v178 = (unint64_t *)&v208->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = Scalar;
  Scalar = 0;
  if (v180)
    (*(void (**)(char *))(*(_QWORD *)v180 + 8))(v180);
  if (v206 < 0)
    operator delete(v205[0]);
  v181 = v282;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v201 = Scalar;
  if (Scalar)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = (std::__shared_weak_count_vtbl *)Scalar;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v202 = v182;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v199, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v181 + 3))(v181, &v201, 0, v199);
  if (v200 < 0)
    operator delete(v199[0]);
  v184 = v202;
  if (v202)
  {
    v185 = (unint64_t *)&v202->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = Scalar;
  Scalar = 0;
  if (v187)
    (*(void (**)(char *))(*(_QWORD *)v187 + 8))(v187);
  v188 = *a3;
  v197 = v282;
  if (v282)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = v282;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = (std::__shared_weak_count_vtbl *)v190;
  }
  else
  {
    v189 = 0;
  }
  v198 = v189;
  v282 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v188 + 56))(v188, &v197);
  v191 = v198;
  if (v198)
  {
    v192 = (unint64_t *)&v198->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = v282;
  v282 = 0;
  if (v194)
    (*((void (**)(void **))*v194 + 1))(v194);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v243, 0);
  result = (uint64_t)v275;
  if (v275)
  {
    v196 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v275);
    return MEMORY[0x1E0C023A0](v196, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A3AAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void **a72;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;

  v75 = *(_QWORD *)(v73 - 192);
  *(_QWORD *)(v73 - 192) = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = *v72;
  *v72 = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x318], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::SliceByIndex::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  unsigned __int8 *v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void **v77;
  unsigned __int8 *v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void **v85;
  unsigned __int8 *v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  void **v93;
  unsigned __int8 *v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  char **v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  __int128 v135;
  char *v136;
  char *v137;
  char *v138;
  std::__shared_weak_count *v139;
  unint64_t *p_shared_owners;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  char **v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  void **v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  void **v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void *v176;
  void **v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count_vtbl *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  void *v183;
  void **v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  void *v190;
  void **v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  void **v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  void **v204;
  void **v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  void *v211;
  void **v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  void *v218;
  void **v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  void *v225;
  void **v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count_vtbl *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  void *v232;
  void **v233;
  std::__shared_weak_count *v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  void *v239;
  void **v240;
  std::__shared_weak_count *v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  void *v246;
  void **v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  void *v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  void **v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  void **v260;
  uint64_t result;
  uint64_t v262;
  void **v263;
  std::__shared_weak_count *v264;
  void *v265[2];
  char v266;
  void *v267[2];
  char v268;
  void *v269;
  std::__shared_weak_count *v270;
  void *v271[2];
  char v272;
  void *v273[2];
  char v274;
  void *v275;
  std::__shared_weak_count *v276;
  void *v277[2];
  char v278;
  void *v279[2];
  char v280;
  void *v281;
  std::__shared_weak_count *v282;
  void *v283[2];
  char v284;
  void *v285[2];
  char v286;
  void *v287;
  std::__shared_weak_count *v288;
  void *v289[2];
  char v290;
  void *v291[2];
  char v292;
  void *v293;
  std::__shared_weak_count *v294;
  void *v295[2];
  char v296;
  void *v297[2];
  char v298;
  void *v299;
  std::__shared_weak_count *v300;
  void *v301[2];
  char v302;
  void *v303[2];
  char v304;
  void *v305;
  std::__shared_weak_count *v306;
  void **v307;
  std::__shared_weak_count *v308;
  void *v309[2];
  char v310;
  void *v311;
  std::__shared_weak_count *v312;
  void *v313[2];
  char v314;
  void *v315[2];
  char v316;
  void *v317;
  std::__shared_weak_count *v318;
  void *v319[2];
  char v320;
  void *v321[2];
  char v322;
  void *v323;
  std::__shared_weak_count *v324;
  void *v325[2];
  char v326;
  void *v327[2];
  char v328;
  void *v329;
  std::__shared_weak_count *v330;
  void *v331[2];
  char v332;
  void *v333[2];
  char v334;
  void *v335;
  std::__shared_weak_count *v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  void *v341;
  void *v342;
  _QWORD *v343;
  __n128 v344;
  uint64_t v345;
  __int128 v346;
  char **v347;
  __n128 v348;
  __n128 v349;
  __n128 v350;
  __n128 v351;
  __n128 v352;
  __n128 v353;
  void *__p;
  void *v355;
  _QWORD *v356;
  void *v357;
  void *v358;
  _QWORD *v359;
  void *v360;
  void *v361;
  _QWORD *v362;
  void *v363;
  void *v364;
  _QWORD *v365;
  void *v366;
  void *v367;
  _QWORD *v368;
  void *v369;
  void *v370;
  _QWORD *v371;
  void *v372;
  void *v373;
  _QWORD *v374;
  void *v375;
  void *v376;
  _QWORD *v377;
  __n128 v378;
  _QWORD *v379;
  void *v380;
  void *v381;
  char *v382;
  char *v383;
  char **v384;
  _QWORD v385[3];
  _QWORD *v386;
  _BYTE v387[24];
  _BYTE *v388;
  _BYTE v389[24];
  _BYTE *v390;
  void *v391;
  void *v392;
  _QWORD *v393;
  void **v394;
  void **v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;

  v404 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v379 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v382 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v380 = v9;
  v381 = v9 + 16;
  v394 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v380);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v392 = v12 + 2;
  v393 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v391 = v12;
  v395 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v391);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v377 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v375 = v15;
  v376 = v15 + 2;
  v396 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v375);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v374 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v372 = v18;
  v373 = v18 + 2;
  v397 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v372);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v371 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v369 = v21;
  v370 = v21 + 2;
  v398 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v369);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v368 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v366 = v24;
  v367 = v24 + 2;
  v399 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v366);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v365 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v363 = v27;
  v364 = v27 + 2;
  v400 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v363);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v362 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v360 = v30;
  v361 = v30 + 2;
  v401 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v360);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v359 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  v357 = v33;
  v358 = v33 + 2;
  v402 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v357);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(0x10uLL);
  v356 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  __p = v36;
  v355 = v36 + 2;
  v403 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v394, 10, &v378);
  MIL::IRParameter::Make(&v378, (uint64_t *)&v341);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v341);
  v37 = v341;
  v341 = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v378.n128_u64[1];
  if (v378.n128_u64[1])
  {
    v39 = (unint64_t *)(v378.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v355 = __p;
    operator delete(__p);
  }
  if (v357)
  {
    v358 = v357;
    operator delete(v357);
  }
  if (v360)
  {
    v361 = v360;
    operator delete(v360);
  }
  if (v363)
  {
    v364 = v363;
    operator delete(v363);
  }
  if (v366)
  {
    v367 = v366;
    operator delete(v366);
  }
  if (v369)
  {
    v370 = v369;
    operator delete(v369);
  }
  if (v372)
  {
    v373 = v372;
    operator delete(v372);
  }
  if (v375)
  {
    v376 = v375;
    operator delete(v375);
  }
  if (v391)
  {
    v392 = v391;
    operator delete(v391);
  }
  if (v380)
  {
    v381 = v380;
    operator delete(v380);
  }
  v41 = v379;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (char *)operator new(8uLL);
  v380 = v43;
  *(_QWORD *)v43 = v42;
  v382 = v43 + 8;
  v381 = v43 + 8;
  v394 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v380);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = operator new(8uLL);
  v391 = v45;
  *v45 = v44;
  v392 = v45 + 1;
  v393 = v45 + 1;
  v395 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v391);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = operator new(8uLL);
  v375 = v47;
  *v47 = v46;
  v377 = v47 + 1;
  v376 = v47 + 1;
  v396 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v375);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v394, 3, &v353);
  MIL::IRParameter::Make(&v353, (uint64_t *)&v372);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v41, "begin", (uint64_t *)&v372);
  v48 = v372;
  v372 = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v353.n128_u64[1];
  if (v353.n128_u64[1])
  {
    v50 = (unint64_t *)(v353.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v375)
  {
    v376 = v375;
    operator delete(v375);
  }
  if (v391)
  {
    v392 = v391;
    operator delete(v391);
  }
  if (v380)
  {
    v381 = v380;
    operator delete(v380);
  }
  v52 = v379;
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = (char *)operator new(8uLL);
  v380 = v54;
  *(_QWORD *)v54 = v53;
  v382 = v54 + 8;
  v381 = v54 + 8;
  v394 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v380);
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v391 = v56;
  *v56 = v55;
  v392 = v56 + 1;
  v393 = v56 + 1;
  v395 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v391);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  v375 = v58;
  *v58 = v57;
  v377 = v58 + 1;
  v376 = v58 + 1;
  v396 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v375);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v394, 3, &v352);
  MIL::IRParameter::Make(&v352, (uint64_t *)&v372);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v52, "end", (uint64_t *)&v372);
  v59 = v372;
  v372 = 0;
  if (v59)
    (*(void (**)(void *))(*(_QWORD *)v59 + 8))(v59);
  v60 = (std::__shared_weak_count *)v352.n128_u64[1];
  if (v352.n128_u64[1])
  {
    v61 = (unint64_t *)(v352.n128_u64[1] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v375)
  {
    v376 = v375;
    operator delete(v375);
  }
  if (v391)
  {
    v392 = v391;
    operator delete(v391);
  }
  if (v380)
  {
    v381 = v380;
    operator delete(v380);
  }
  v63 = v379;
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = (char *)operator new(8uLL);
  v380 = v65;
  *(_QWORD *)v65 = v64;
  v382 = v65 + 8;
  v381 = v65 + 8;
  v394 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v380);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = operator new(8uLL);
  v391 = v67;
  *v67 = v66;
  v392 = v67 + 1;
  v393 = v67 + 1;
  v395 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v391);
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v69 = operator new(8uLL);
  v375 = v69;
  *v69 = v68;
  v377 = v69 + 1;
  v376 = v69 + 1;
  v396 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v375);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v394, 3, &v351);
  MIL::IRParameter::Make(&v351, (uint64_t *)&v372);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v63, "stride", (uint64_t *)&v372);
  v71 = v372;
  v372 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  v72 = (std::__shared_weak_count *)v351.n128_u64[1];
  if (v351.n128_u64[1])
  {
    v73 = (unint64_t *)(v351.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v375)
  {
    v376 = v375;
    operator delete(v375);
  }
  if (v391)
  {
    v392 = v391;
    operator delete(v391);
  }
  if (v380)
  {
    v381 = v380;
    operator delete(v380);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = v379;
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = (void **)operator new(8uLL);
  v394 = v77;
  *v77 = (void *)v76;
  v395 = v77 + 1;
  v396 = (uint64_t)(v77 + 1);
  v391 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v394);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v391, 1, &v350);
  MIL::IRParameter::Make(&v350, (uint64_t *)&v380);
  v78 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v75, "begin_mask", (uint64_t *)&v380);
  v79 = v380;
  v380 = 0;
  if (v79)
    (*(void (**)(void *))(*(_QWORD *)v79 + 8))(v79);
  v80 = (std::__shared_weak_count *)v350.n128_u64[1];
  if (v350.n128_u64[1])
  {
    v81 = (unint64_t *)(v350.n128_u64[1] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (v394)
  {
    v395 = v394;
    operator delete(v394);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 48))(*((_QWORD *)v78 + 5), 1);
  v83 = v379;
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = (void **)operator new(8uLL);
  v394 = v85;
  *v85 = (void *)v84;
  v395 = v85 + 1;
  v396 = (uint64_t)(v85 + 1);
  v391 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v394);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v391, 1, &v349);
  MIL::IRParameter::Make(&v349, (uint64_t *)&v380);
  v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v83, "end_mask", (uint64_t *)&v380);
  v87 = v380;
  v380 = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  v88 = (std::__shared_weak_count *)v349.n128_u64[1];
  if (v349.n128_u64[1])
  {
    v89 = (unint64_t *)(v349.n128_u64[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (v394)
  {
    v395 = v394;
    operator delete(v394);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v86 + 5) + 48))(*((_QWORD *)v86 + 5), 1);
  v91 = v379;
  v92 = MIL::IRUnknownDimension::Make(a1, 0);
  v93 = (void **)operator new(8uLL);
  v394 = v93;
  *v93 = (void *)v92;
  v395 = v93 + 1;
  v396 = (uint64_t)(v93 + 1);
  v391 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v394);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v391, 1, &v348);
  MIL::IRParameter::Make(&v348, (uint64_t *)&v380);
  v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v91, "squeeze_mask", (uint64_t *)&v380);
  v95 = v380;
  v380 = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  v96 = (std::__shared_weak_count *)v348.n128_u64[1];
  if (v348.n128_u64[1])
  {
    v97 = (unint64_t *)(v348.n128_u64[1] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (v394)
  {
    v395 = v394;
    operator delete(v394);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v94 + 5) + 48))(*((_QWORD *)v94 + 5), 1);
  v347 = 0;
  v99 = operator new();
  *(_QWORD *)v99 = 0;
  *(_QWORD *)(v99 + 8) = 0;
  *(_QWORD *)(v99 + 16) = 0;
  v394 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v347, (void **)v99);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v394, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v347, 1uLL);
  v100 = v347;
  v101 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v102 = operator new(8uLL);
  v391 = v102;
  *v102 = v101;
  v392 = v102 + 1;
  v393 = v102 + 1;
  v394 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v391);
  v103 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v104 = operator new(8uLL);
  v375 = v104;
  *v104 = v103;
  v377 = v104 + 1;
  v376 = v104 + 1;
  v395 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v375);
  v105 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v106 = operator new(8uLL);
  v372 = v106;
  *v106 = v105;
  v374 = v106 + 1;
  v373 = v106 + 1;
  v396 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v372);
  v107 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v108 = operator new(8uLL);
  v369 = v108;
  *v108 = v107;
  v371 = v108 + 1;
  v370 = v108 + 1;
  v397 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v369);
  v109 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v110 = operator new(8uLL);
  v366 = v110;
  *v110 = v109;
  v368 = v110 + 1;
  v367 = v110 + 1;
  v398 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v366);
  v111 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v112 = operator new(8uLL);
  v363 = v112;
  *v112 = v111;
  v365 = v112 + 1;
  v364 = v112 + 1;
  v399 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v363);
  v113 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v114 = operator new(8uLL);
  v360 = v114;
  *v114 = v113;
  v362 = v114 + 1;
  v361 = v114 + 1;
  v400 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v360);
  v115 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v116 = operator new(8uLL);
  v357 = v116;
  *v116 = v115;
  v359 = v116 + 1;
  v358 = v116 + 1;
  v401 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v357);
  v117 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v118 = operator new(8uLL);
  __p = v118;
  *v118 = v117;
  v356 = v118 + 1;
  v355 = v118 + 1;
  v402 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v119 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v120 = operator new(8uLL);
  v341 = v120;
  *v120 = v119;
  v343 = v120 + 1;
  v342 = v120 + 1;
  v403 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v341);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v394, 10, &v344);
  MIL::IRParameter::Make(&v344, &v345);
  *(_QWORD *)&v346 = v345;
  if (v345)
  {
    v121 = (_QWORD *)operator new();
    v122 = v345;
    *v121 = &unk_1EA99F888;
    v121[1] = 0;
    v121[2] = 0;
    v121[3] = v122;
  }
  else
  {
    v121 = 0;
  }
  *((_QWORD *)&v346 + 1) = v121;
  v345 = 0;
  v123 = v100[2];
  v124 = v100[1];
  if (v124 >= v123)
  {
    v125 = (v124 - *v100) >> 4;
    v126 = v125 + 1;
    if ((unint64_t)(v125 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v127 = v123 - *v100;
    if (v127 >> 3 > v126)
      v126 = v127 >> 3;
    if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0)
      v128 = 0xFFFFFFFFFFFFFFFLL;
    else
      v128 = v126;
    v384 = v100 + 2;
    v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v100 + 2), v128);
    v131 = &v129[16 * v125];
    *(_OWORD *)v131 = v346;
    v346 = 0uLL;
    v133 = *v100;
    v132 = v100[1];
    if (v132 == *v100)
    {
      v136 = v100[1];
      v134 = &v129[16 * v125];
    }
    else
    {
      v134 = &v129[16 * v125];
      do
      {
        v135 = *((_OWORD *)v132 - 1);
        v132 -= 16;
        *((_OWORD *)v134 - 1) = v135;
        v134 -= 16;
        *(_QWORD *)v132 = 0;
        *((_QWORD *)v132 + 1) = 0;
      }
      while (v132 != v133);
      v136 = *v100;
      v132 = v100[1];
    }
    v137 = v131 + 16;
    *v100 = v134;
    v381 = v136;
    v100[1] = v131 + 16;
    v382 = v132;
    v138 = v100[2];
    v100[2] = &v129[16 * v130];
    v383 = v138;
    v380 = v136;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v380);
    v139 = (std::__shared_weak_count *)*((_QWORD *)&v346 + 1);
    v100[1] = v137;
    if (v139)
    {
      p_shared_owners = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldaxr(p_shared_owners);
      while (__stlxr(v141 - 1, p_shared_owners));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
  }
  else
  {
    *(_QWORD *)v124 = v346;
    *((_QWORD *)v124 + 1) = v121;
    v346 = 0uLL;
    v100[1] = v124 + 16;
  }
  v142 = v345;
  v345 = 0;
  if (v142)
    (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
  v143 = (std::__shared_weak_count *)v344.n128_u64[1];
  if (v344.n128_u64[1])
  {
    v144 = (unint64_t *)(v344.n128_u64[1] + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  if (v341)
  {
    v342 = v341;
    operator delete(v341);
  }
  if (__p)
  {
    v355 = __p;
    operator delete(__p);
  }
  if (v357)
  {
    v358 = v357;
    operator delete(v357);
  }
  if (v360)
  {
    v361 = v360;
    operator delete(v360);
  }
  if (v363)
  {
    v364 = v363;
    operator delete(v363);
  }
  if (v366)
  {
    v367 = v366;
    operator delete(v366);
  }
  if (v369)
  {
    v370 = v369;
    operator delete(v369);
  }
  if (v372)
  {
    v373 = v372;
    operator delete(v372);
  }
  if (v375)
  {
    v376 = v375;
    operator delete(v375);
  }
  if (v391)
  {
    v392 = v391;
    operator delete(v391);
  }
  v339 = *(_OWORD *)a2;
  v340 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v146 = (uint64_t)v379;
  *(_QWORD *)&v338 = v379;
  if (v379)
  {
    v147 = (_QWORD *)operator new();
    *v147 = &unk_1EA99F8E8;
    v147[1] = 0;
    v147[2] = 0;
    v147[3] = v146;
  }
  else
  {
    v147 = 0;
  }
  *((_QWORD *)&v338 + 1) = v147;
  v379 = 0;
  *(_QWORD *)&v337 = v347;
  if (v347)
  {
    v148 = (_QWORD *)operator new();
    v149 = v347;
    *v148 = &unk_1EA99F948;
    v148[1] = 0;
    v148[2] = 0;
    v148[3] = v149;
  }
  else
  {
    v148 = 0;
  }
  *((_QWORD *)&v337 + 1) = v148;
  v347 = 0;
  v390 = 0;
  v388 = 0;
  MIL::IROperator::Make(&v339, &v338, &v337, (uint64_t)v389, (uint64_t)v387, a3);
  v150 = v388;
  if (v388 == v387)
  {
    v151 = 4;
    v150 = v387;
  }
  else
  {
    if (!v388)
      goto LABEL_153;
    v151 = 5;
  }
  (*(void (**)(void))(*v150 + 8 * v151))();
LABEL_153:
  v152 = v390;
  if (v390 == v389)
  {
    v153 = 4;
    v152 = v389;
    goto LABEL_157;
  }
  if (v390)
  {
    v153 = 5;
LABEL_157:
    (*(void (**)(void))(*v152 + 8 * v153))();
  }
  v154 = (std::__shared_weak_count *)*((_QWORD *)&v337 + 1);
  if (*((_QWORD *)&v337 + 1))
  {
    v155 = (unint64_t *)(*((_QWORD *)&v337 + 1) + 8);
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = (std::__shared_weak_count *)*((_QWORD *)&v338 + 1);
  if (*((_QWORD *)&v338 + 1))
  {
    v158 = (unint64_t *)(*((_QWORD *)&v338 + 1) + 8);
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  if (SHIBYTE(v340) < 0)
    operator delete((void *)v339);
  v160 = *a3;
  v385[0] = &off_1EA99FBD8;
  v385[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceSliceByIndex;
  v386 = v385;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v160 + 200))(v160, v385);
  v161 = v386;
  if (v386 == v385)
  {
    v162 = 4;
    v161 = v385;
  }
  else
  {
    if (!v386)
      goto LABEL_175;
    v162 = 5;
  }
  (*(void (**)(void))(*v161 + 8 * v162))();
LABEL_175:
  MIL::Validation::TensorDTypeConstraints::Make(&v394);
  v163 = v394;
  std::string::basic_string[abi:ne180100]<0>(v333, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v333, 0, (uint64_t *)&v380);
  v335 = v380;
  if (v380)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = (std::__shared_weak_count_vtbl *)v380;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v336 = v164;
  v380 = 0;
  std::string::basic_string[abi:ne180100]<0>(v331, "T");
  (*((void (**)(void **, void **, void **))*v163 + 3))(v163, &v335, v331);
  if (v332 < 0)
    operator delete(v331[0]);
  v166 = v336;
  if (v336)
  {
    v167 = (unint64_t *)&v336->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = v380;
  v380 = 0;
  if (v169)
    (*(void (**)(void *))(*(_QWORD *)v169 + 8))(v169);
  if (v334 < 0)
    operator delete(v333[0]);
  v170 = v394;
  std::string::basic_string[abi:ne180100]<0>(v327, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v327, 0, (uint64_t *)&v380);
  v329 = v380;
  if (v380)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = (std::__shared_weak_count_vtbl *)v380;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = v172;
  }
  else
  {
    v171 = 0;
  }
  v330 = v171;
  v380 = 0;
  std::string::basic_string[abi:ne180100]<0>(v325, "U");
  (*((void (**)(void **, void **, void **))*v170 + 3))(v170, &v329, v325);
  if (v326 < 0)
    operator delete(v325[0]);
  v173 = v330;
  if (v330)
  {
    v174 = (unint64_t *)&v330->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = v380;
  v380 = 0;
  if (v176)
    (*(void (**)(void *))(*(_QWORD *)v176 + 8))(v176);
  if (v328 < 0)
    operator delete(v327[0]);
  v177 = v394;
  std::string::basic_string[abi:ne180100]<0>(v321, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v321, 0, (uint64_t *)&v380);
  v323 = v380;
  if (v380)
  {
    v178 = (std::__shared_weak_count *)operator new();
    v179 = (std::__shared_weak_count_vtbl *)v380;
    v178->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v178->__shared_owners_ = 0;
    v178->__shared_weak_owners_ = 0;
    v178[1].__vftable = v179;
  }
  else
  {
    v178 = 0;
  }
  v324 = v178;
  v380 = 0;
  std::string::basic_string[abi:ne180100]<0>(v319, "U");
  (*((void (**)(void **, void **, void **))*v177 + 3))(v177, &v323, v319);
  if (v320 < 0)
    operator delete(v319[0]);
  v180 = v324;
  if (v324)
  {
    v181 = (unint64_t *)&v324->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = v380;
  v380 = 0;
  if (v183)
    (*(void (**)(void *))(*(_QWORD *)v183 + 8))(v183);
  if (v322 < 0)
    operator delete(v321[0]);
  v184 = v394;
  std::string::basic_string[abi:ne180100]<0>(v315, "stride");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v315, 1, (uint64_t *)&v380);
  v317 = v380;
  if (v380)
  {
    v185 = (std::__shared_weak_count *)operator new();
    v186 = (std::__shared_weak_count_vtbl *)v380;
    v185->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v185->__shared_owners_ = 0;
    v185->__shared_weak_owners_ = 0;
    v185[1].__vftable = v186;
  }
  else
  {
    v185 = 0;
  }
  v318 = v185;
  v380 = 0;
  std::string::basic_string[abi:ne180100]<0>(v313, "U");
  (*((void (**)(void **, void **, void **))*v184 + 3))(v184, &v317, v313);
  if (v314 < 0)
    operator delete(v313[0]);
  v187 = v318;
  if (v318)
  {
    v188 = (unint64_t *)&v318->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = v380;
  v380 = 0;
  if (v190)
    (*(void (**)(void *))(*(_QWORD *)v190 + 8))(v190);
  if (v316 < 0)
    operator delete(v315[0]);
  v191 = v394;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v380);
  v311 = v380;
  if (v380)
  {
    v192 = (std::__shared_weak_count *)operator new();
    v193 = (std::__shared_weak_count_vtbl *)v380;
    v192->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v192->__shared_owners_ = 0;
    v192->__shared_weak_owners_ = 0;
    v192[1].__vftable = v193;
  }
  else
  {
    v192 = 0;
  }
  v312 = v192;
  v380 = 0;
  std::string::basic_string[abi:ne180100]<0>(v309, "T");
  (*((void (**)(void **, void **, void **))*v191 + 3))(v191, &v311, v309);
  if (v310 < 0)
    operator delete(v309[0]);
  v194 = v312;
  if (v312)
  {
    v195 = (unint64_t *)&v312->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = v380;
  v380 = 0;
  if (v197)
    (*(void (**)(void *))(*(_QWORD *)v197 + 8))(v197);
  v198 = *a3;
  v307 = v394;
  if (v394)
  {
    v199 = (std::__shared_weak_count *)operator new();
    v200 = v394;
    v199->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v199->__shared_owners_ = 0;
    v199->__shared_weak_owners_ = 0;
    v199[1].__vftable = (std::__shared_weak_count_vtbl *)v200;
  }
  else
  {
    v199 = 0;
  }
  v308 = v199;
  v394 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v198 + 56))(v198, &v307);
  v201 = v308;
  if (v308)
  {
    v202 = (unint64_t *)&v308->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v204 = v394;
  v394 = 0;
  if (v204)
    (*((void (**)(void **))*v204 + 1))(v204);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v394);
  v205 = v394;
  std::string::basic_string[abi:ne180100]<0>(v303, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v303, 0, (uint64_t *)&v380);
  v305 = v380;
  if (v380)
  {
    v206 = (std::__shared_weak_count *)operator new();
    v207 = (std::__shared_weak_count_vtbl *)v380;
    v206->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v206->__shared_owners_ = 0;
    v206->__shared_weak_owners_ = 0;
    v206[1].__vftable = v207;
  }
  else
  {
    v206 = 0;
  }
  v306 = v206;
  v380 = 0;
  std::string::basic_string[abi:ne180100]<0>(v301, "D");
  (*((void (**)(void **, void **, void **))*v205 + 5))(v205, &v305, v301);
  if (v302 < 0)
    operator delete(v301[0]);
  v208 = v306;
  if (v306)
  {
    v209 = (unint64_t *)&v306->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = v380;
  v380 = 0;
  if (v211)
    (*(void (**)(void *))(*(_QWORD *)v211 + 8))(v211);
  if (v304 < 0)
    operator delete(v303[0]);
  v212 = v394;
  std::string::basic_string[abi:ne180100]<0>(v297, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v297, 0, (uint64_t *)&v380);
  v299 = v380;
  if (v380)
  {
    v213 = (std::__shared_weak_count *)operator new();
    v214 = (std::__shared_weak_count_vtbl *)v380;
    v213->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v213->__shared_owners_ = 0;
    v213->__shared_weak_owners_ = 0;
    v213[1].__vftable = v214;
  }
  else
  {
    v213 = 0;
  }
  v300 = v213;
  v380 = 0;
  std::string::basic_string[abi:ne180100]<0>(v295, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v212 + 3))(v212, &v299, 0, v295);
  if (v296 < 0)
    operator delete(v295[0]);
  v215 = v300;
  if (v300)
  {
    v216 = (unint64_t *)&v300->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = v380;
  v380 = 0;
  if (v218)
    (*(void (**)(void *))(*(_QWORD *)v218 + 8))(v218);
  if (v298 < 0)
    operator delete(v297[0]);
  v219 = v394;
  std::string::basic_string[abi:ne180100]<0>(v291, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v291, 0, (uint64_t *)&v380);
  v293 = v380;
  if (v380)
  {
    v220 = (std::__shared_weak_count *)operator new();
    v221 = (std::__shared_weak_count_vtbl *)v380;
    v220->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v220->__shared_owners_ = 0;
    v220->__shared_weak_owners_ = 0;
    v220[1].__vftable = v221;
  }
  else
  {
    v220 = 0;
  }
  v294 = v220;
  v380 = 0;
  std::string::basic_string[abi:ne180100]<0>(v289, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v219 + 3))(v219, &v293, 0, v289);
  if (v290 < 0)
    operator delete(v289[0]);
  v222 = v294;
  if (v294)
  {
    v223 = (unint64_t *)&v294->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = v380;
  v380 = 0;
  if (v225)
    (*(void (**)(void *))(*(_QWORD *)v225 + 8))(v225);
  if (v292 < 0)
    operator delete(v291[0]);
  v226 = v394;
  std::string::basic_string[abi:ne180100]<0>(v285, "stride");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v285, 1, (uint64_t *)&v380);
  v287 = v380;
  if (v380)
  {
    v227 = (std::__shared_weak_count *)operator new();
    v228 = (std::__shared_weak_count_vtbl *)v380;
    v227->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v227->__shared_owners_ = 0;
    v227->__shared_weak_owners_ = 0;
    v227[1].__vftable = v228;
  }
  else
  {
    v227 = 0;
  }
  v288 = v227;
  v380 = 0;
  std::string::basic_string[abi:ne180100]<0>(v283, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v226 + 3))(v226, &v287, 0, v283);
  if (v284 < 0)
    operator delete(v283[0]);
  v229 = v288;
  if (v288)
  {
    v230 = (unint64_t *)&v288->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  v232 = v380;
  v380 = 0;
  if (v232)
    (*(void (**)(void *))(*(_QWORD *)v232 + 8))(v232);
  if (v286 < 0)
    operator delete(v285[0]);
  v233 = v394;
  std::string::basic_string[abi:ne180100]<0>(v279, "begin_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v279, 1, (uint64_t *)&v380);
  v281 = v380;
  if (v380)
  {
    v234 = (std::__shared_weak_count *)operator new();
    v235 = (std::__shared_weak_count_vtbl *)v380;
    v234->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v234->__shared_owners_ = 0;
    v234->__shared_weak_owners_ = 0;
    v234[1].__vftable = v235;
  }
  else
  {
    v234 = 0;
  }
  v282 = v234;
  v380 = 0;
  std::string::basic_string[abi:ne180100]<0>(v277, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v233 + 3))(v233, &v281, 0, v277);
  if (v278 < 0)
    operator delete(v277[0]);
  v236 = v282;
  if (v282)
  {
    v237 = (unint64_t *)&v282->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v239 = v380;
  v380 = 0;
  if (v239)
    (*(void (**)(void *))(*(_QWORD *)v239 + 8))(v239);
  if (v280 < 0)
    operator delete(v279[0]);
  v240 = v394;
  std::string::basic_string[abi:ne180100]<0>(v273, "end_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v273, 1, (uint64_t *)&v380);
  v275 = v380;
  if (v380)
  {
    v241 = (std::__shared_weak_count *)operator new();
    v242 = (std::__shared_weak_count_vtbl *)v380;
    v241->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v241->__shared_owners_ = 0;
    v241->__shared_weak_owners_ = 0;
    v241[1].__vftable = v242;
  }
  else
  {
    v241 = 0;
  }
  v276 = v241;
  v380 = 0;
  std::string::basic_string[abi:ne180100]<0>(v271, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v240 + 3))(v240, &v275, 0, v271);
  if (v272 < 0)
    operator delete(v271[0]);
  v243 = v276;
  if (v276)
  {
    v244 = (unint64_t *)&v276->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  v246 = v380;
  v380 = 0;
  if (v246)
    (*(void (**)(void *))(*(_QWORD *)v246 + 8))(v246);
  if (v274 < 0)
    operator delete(v273[0]);
  v247 = v394;
  std::string::basic_string[abi:ne180100]<0>(v267, "squeeze_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v267, 1, (uint64_t *)&v380);
  v269 = v380;
  if (v380)
  {
    v248 = (std::__shared_weak_count *)operator new();
    v249 = (std::__shared_weak_count_vtbl *)v380;
    v248->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v248->__shared_owners_ = 0;
    v248->__shared_weak_owners_ = 0;
    v248[1].__vftable = v249;
  }
  else
  {
    v248 = 0;
  }
  v270 = v248;
  v380 = 0;
  std::string::basic_string[abi:ne180100]<0>(v265, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v247 + 3))(v247, &v269, 0, v265);
  if (v266 < 0)
    operator delete(v265[0]);
  v250 = v270;
  if (v270)
  {
    v251 = (unint64_t *)&v270->__shared_owners_;
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v253 = v380;
  v380 = 0;
  if (v253)
    (*(void (**)(void *))(*(_QWORD *)v253 + 8))(v253);
  if (v268 < 0)
    operator delete(v267[0]);
  v254 = *a3;
  v263 = v394;
  if (v394)
  {
    v255 = (std::__shared_weak_count *)operator new();
    v256 = v394;
    v255->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v255->__shared_owners_ = 0;
    v255->__shared_weak_owners_ = 0;
    v255[1].__vftable = (std::__shared_weak_count_vtbl *)v256;
  }
  else
  {
    v255 = 0;
  }
  v264 = v255;
  v394 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v254 + 56))(v254, &v263);
  v257 = v264;
  if (v264)
  {
    v258 = (unint64_t *)&v264->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = v394;
  v394 = 0;
  if (v260)
    (*((void (**)(void **))*v260 + 1))(v260);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v347, 0);
  result = (uint64_t)v379;
  if (v379)
  {
    v262 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v379);
    return MEMORY[0x1E0C023A0](v262, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A3D29C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 152);
  *(_QWORD *)(v2 - 152) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x398], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4D0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::SliceBySize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  __int128 v99;
  char *v100;
  char *v101;
  char *v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  char **v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  void **v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  void **v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  void **v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void **v161;
  void **v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void *v168;
  void **v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count_vtbl *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  void *v175;
  void **v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count_vtbl *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  void **v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  void **v189;
  uint64_t result;
  uint64_t v191;
  void **v192;
  std::__shared_weak_count *v193;
  void *v194[2];
  char v195;
  void *v196[2];
  char v197;
  void *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202[2];
  char v203;
  void *v204;
  std::__shared_weak_count *v205;
  void *v206[2];
  char v207;
  void *v208[2];
  char v209;
  void *v210;
  std::__shared_weak_count *v211;
  void **v212;
  std::__shared_weak_count *v213;
  void *v214[2];
  char v215;
  void *v216;
  std::__shared_weak_count *v217;
  void *v218[2];
  char v219;
  void *v220[2];
  char v221;
  void *v222;
  std::__shared_weak_count *v223;
  void *v224[2];
  char v225;
  void *v226[2];
  char v227;
  void *v228;
  std::__shared_weak_count *v229;
  void *v230[2];
  char v231;
  void *v232[2];
  char v233;
  void *v234;
  std::__shared_weak_count *v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  void *v240;
  void *v241;
  _QWORD *v242;
  __n128 v243;
  uint64_t v244;
  __int128 v245;
  char **v246;
  __n128 v247;
  __n128 v248;
  void *__p;
  void *v250;
  _QWORD *v251;
  void *v252;
  void *v253;
  _QWORD *v254;
  void *v255;
  void *v256;
  _QWORD *v257;
  void *v258;
  void *v259;
  _QWORD *v260;
  void *v261;
  void *v262;
  _QWORD *v263;
  void *v264;
  void *v265;
  _QWORD *v266;
  void *v267;
  void *v268;
  _QWORD *v269;
  void *v270;
  void *v271;
  _QWORD *v272;
  void *v273;
  void *v274;
  _QWORD *v275;
  __n128 v276;
  _QWORD *v277;
  void *v278;
  void *v279;
  char *v280;
  char *v281;
  char **v282;
  _QWORD v283[3];
  _QWORD *v284;
  _BYTE v285[24];
  _BYTE *v286;
  _BYTE v287[24];
  _BYTE *v288;
  void **v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;

  v299 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v277 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v280 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v278 = v9;
  v279 = v9 + 16;
  v289 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v278);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v275 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v273 = v12;
  v274 = v12 + 2;
  v290 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v273);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v272 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v270 = v15;
  v271 = v15 + 2;
  v291 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v270);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v269 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v267 = v18;
  v268 = v18 + 2;
  v292 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v267);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v266 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v264 = v21;
  v265 = v21 + 2;
  v293 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v264);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v263 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v261 = v24;
  v262 = v24 + 2;
  v294 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v261);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v260 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v258 = v27;
  v259 = v27 + 2;
  v295 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v258);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v257 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v255 = v30;
  v256 = v30 + 2;
  v296 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v255);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v254 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  v252 = v33;
  v253 = v33 + 2;
  v297 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v252);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(0x10uLL);
  v251 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  __p = v36;
  v250 = v36 + 2;
  v298 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v289, 10, &v276);
  MIL::IRParameter::Make(&v276, (uint64_t *)&v240);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v240);
  v37 = v240;
  v240 = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v276.n128_u64[1];
  if (v276.n128_u64[1])
  {
    v39 = (unint64_t *)(v276.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v250 = __p;
    operator delete(__p);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (v255)
  {
    v256 = v255;
    operator delete(v255);
  }
  if (v258)
  {
    v259 = v258;
    operator delete(v258);
  }
  if (v261)
  {
    v262 = v261;
    operator delete(v261);
  }
  if (v264)
  {
    v265 = v264;
    operator delete(v264);
  }
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  if (v278)
  {
    v279 = v278;
    operator delete(v278);
  }
  v41 = v277;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (char *)operator new(8uLL);
  v278 = v43;
  *(_QWORD *)v43 = v42;
  v280 = v43 + 8;
  v279 = v43 + 8;
  v289 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v278);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = operator new(8uLL);
  v273 = v45;
  *v45 = v44;
  v275 = v45 + 1;
  v274 = v45 + 1;
  v290 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v273);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = operator new(8uLL);
  v270 = v47;
  *v47 = v46;
  v272 = v47 + 1;
  v271 = v47 + 1;
  v291 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v270);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v289, 3, &v248);
  MIL::IRParameter::Make(&v248, (uint64_t *)&v267);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v41, "begin", (uint64_t *)&v267);
  v48 = v267;
  v267 = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v248.n128_u64[1];
  if (v248.n128_u64[1])
  {
    v50 = (unint64_t *)(v248.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  if (v278)
  {
    v279 = v278;
    operator delete(v278);
  }
  v52 = v277;
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = (char *)operator new(8uLL);
  v278 = v54;
  *(_QWORD *)v54 = v53;
  v280 = v54 + 8;
  v279 = v54 + 8;
  v289 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v278);
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v273 = v56;
  *v56 = v55;
  v275 = v56 + 1;
  v274 = v56 + 1;
  v290 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v273);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  v270 = v58;
  *v58 = v57;
  v272 = v58 + 1;
  v271 = v58 + 1;
  v291 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v270);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v289, 3, &v247);
  MIL::IRParameter::Make(&v247, (uint64_t *)&v267);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v52, "size", (uint64_t *)&v267);
  v59 = v267;
  v267 = 0;
  if (v59)
    (*(void (**)(void *))(*(_QWORD *)v59 + 8))(v59);
  v60 = (std::__shared_weak_count *)v247.n128_u64[1];
  if (v247.n128_u64[1])
  {
    v61 = (unint64_t *)(v247.n128_u64[1] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  if (v278)
  {
    v279 = v278;
    operator delete(v278);
  }
  v246 = 0;
  v63 = operator new();
  *(_QWORD *)v63 = 0;
  *(_QWORD *)(v63 + 8) = 0;
  *(_QWORD *)(v63 + 16) = 0;
  v289 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v246, (void **)v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v289, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v246, 1uLL);
  v64 = v246;
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v273 = v66;
  *v66 = v65;
  v275 = v66 + 1;
  v274 = v66 + 1;
  v289 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v273);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v270 = v68;
  *v68 = v67;
  v272 = v68 + 1;
  v271 = v68 + 1;
  v290 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v270);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v267 = v70;
  *v70 = v69;
  v269 = v70 + 1;
  v268 = v70 + 1;
  v291 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v267);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v264 = v72;
  *v72 = v71;
  v266 = v72 + 1;
  v265 = v72 + 1;
  v292 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v264);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v261 = v74;
  *v74 = v73;
  v263 = v74 + 1;
  v262 = v74 + 1;
  v293 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v261);
  v75 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v76 = operator new(8uLL);
  v258 = v76;
  *v76 = v75;
  v260 = v76 + 1;
  v259 = v76 + 1;
  v294 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v258);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(8uLL);
  v255 = v78;
  *v78 = v77;
  v257 = v78 + 1;
  v256 = v78 + 1;
  v295 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v255);
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(8uLL);
  v252 = v80;
  *v80 = v79;
  v254 = v80 + 1;
  v253 = v80 + 1;
  v296 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v252);
  v81 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v82 = operator new(8uLL);
  __p = v82;
  *v82 = v81;
  v251 = v82 + 1;
  v250 = v82 + 1;
  v297 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v83 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v84 = operator new(8uLL);
  v240 = v84;
  *v84 = v83;
  v242 = v84 + 1;
  v241 = v84 + 1;
  v298 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v240);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v289, 10, &v243);
  MIL::IRParameter::Make(&v243, &v244);
  *(_QWORD *)&v245 = v244;
  if (v244)
  {
    v85 = (_QWORD *)operator new();
    v86 = v244;
    *v85 = &unk_1EA99F888;
    v85[1] = 0;
    v85[2] = 0;
    v85[3] = v86;
  }
  else
  {
    v85 = 0;
  }
  *((_QWORD *)&v245 + 1) = v85;
  v244 = 0;
  v87 = v64[2];
  v88 = v64[1];
  if (v88 >= v87)
  {
    v89 = (v88 - *v64) >> 4;
    v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v91 = v87 - *v64;
    if (v91 >> 3 > v90)
      v90 = v91 >> 3;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0)
      v92 = 0xFFFFFFFFFFFFFFFLL;
    else
      v92 = v90;
    v282 = v64 + 2;
    v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v64 + 2), v92);
    v95 = &v93[16 * v89];
    *(_OWORD *)v95 = v245;
    v245 = 0uLL;
    v97 = *v64;
    v96 = v64[1];
    if (v96 == *v64)
    {
      v100 = v64[1];
      v98 = &v93[16 * v89];
    }
    else
    {
      v98 = &v93[16 * v89];
      do
      {
        v99 = *((_OWORD *)v96 - 1);
        v96 -= 16;
        *((_OWORD *)v98 - 1) = v99;
        v98 -= 16;
        *(_QWORD *)v96 = 0;
        *((_QWORD *)v96 + 1) = 0;
      }
      while (v96 != v97);
      v100 = *v64;
      v96 = v64[1];
    }
    v101 = v95 + 16;
    *v64 = v98;
    v279 = v100;
    v64[1] = v95 + 16;
    v280 = v96;
    v102 = v64[2];
    v64[2] = &v93[16 * v94];
    v281 = v102;
    v278 = v100;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v278);
    v103 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
    v64[1] = v101;
    if (v103)
    {
      p_shared_owners = (unint64_t *)&v103->__shared_owners_;
      do
        v105 = __ldaxr(p_shared_owners);
      while (__stlxr(v105 - 1, p_shared_owners));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
  }
  else
  {
    *(_QWORD *)v88 = v245;
    *((_QWORD *)v88 + 1) = v85;
    v245 = 0uLL;
    v64[1] = v88 + 16;
  }
  v106 = v244;
  v244 = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  v107 = (std::__shared_weak_count *)v243.n128_u64[1];
  if (v243.n128_u64[1])
  {
    v108 = (unint64_t *)(v243.n128_u64[1] + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (__p)
  {
    v250 = __p;
    operator delete(__p);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (v255)
  {
    v256 = v255;
    operator delete(v255);
  }
  if (v258)
  {
    v259 = v258;
    operator delete(v258);
  }
  if (v261)
  {
    v262 = v261;
    operator delete(v261);
  }
  if (v264)
  {
    v265 = v264;
    operator delete(v264);
  }
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  v238 = *(_OWORD *)a2;
  v239 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v110 = (uint64_t)v277;
  *(_QWORD *)&v237 = v277;
  if (v277)
  {
    v111 = (_QWORD *)operator new();
    *v111 = &unk_1EA99F8E8;
    v111[1] = 0;
    v111[2] = 0;
    v111[3] = v110;
  }
  else
  {
    v111 = 0;
  }
  *((_QWORD *)&v237 + 1) = v111;
  v277 = 0;
  *(_QWORD *)&v236 = v246;
  if (v246)
  {
    v112 = (_QWORD *)operator new();
    v113 = v246;
    *v112 = &unk_1EA99F948;
    v112[1] = 0;
    v112[2] = 0;
    v112[3] = v113;
  }
  else
  {
    v112 = 0;
  }
  *((_QWORD *)&v236 + 1) = v112;
  v246 = 0;
  v288 = 0;
  v286 = 0;
  MIL::IROperator::Make(&v238, &v237, &v236, (uint64_t)v287, (uint64_t)v285, a3);
  v114 = v286;
  if (v286 == v285)
  {
    v115 = 4;
    v114 = v285;
  }
  else
  {
    if (!v286)
      goto LABEL_113;
    v115 = 5;
  }
  (*(void (**)(void))(*v114 + 8 * v115))();
LABEL_113:
  v116 = v288;
  if (v288 == v287)
  {
    v117 = 4;
    v116 = v287;
    goto LABEL_117;
  }
  if (v288)
  {
    v117 = 5;
LABEL_117:
    (*(void (**)(void))(*v116 + 8 * v117))();
  }
  v118 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
  if (*((_QWORD *)&v236 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = (std::__shared_weak_count *)*((_QWORD *)&v237 + 1);
  if (*((_QWORD *)&v237 + 1))
  {
    v122 = (unint64_t *)(*((_QWORD *)&v237 + 1) + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  if (SHIBYTE(v239) < 0)
    operator delete((void *)v238);
  v124 = *a3;
  v283[0] = &off_1EA99FBD8;
  v283[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceSliceBySize;
  v284 = v283;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v124 + 200))(v124, v283);
  v125 = v284;
  if (v284 == v283)
  {
    v126 = 4;
    v125 = v283;
  }
  else
  {
    if (!v284)
      goto LABEL_135;
    v126 = 5;
  }
  (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_135:
  MIL::Validation::TensorDTypeConstraints::Make(&v289);
  v127 = v289;
  std::string::basic_string[abi:ne180100]<0>(v232, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v232, 0, (uint64_t *)&v278);
  v234 = v278;
  if (v278)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = (std::__shared_weak_count_vtbl *)v278;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v235 = v128;
  v278 = 0;
  std::string::basic_string[abi:ne180100]<0>(v230, "T");
  (*((void (**)(void **, void **, void **))*v127 + 3))(v127, &v234, v230);
  if (v231 < 0)
    operator delete(v230[0]);
  v130 = v235;
  if (v235)
  {
    v131 = (unint64_t *)&v235->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v278;
  v278 = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (v233 < 0)
    operator delete(v232[0]);
  v134 = v289;
  std::string::basic_string[abi:ne180100]<0>(v226, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v226, 0, (uint64_t *)&v278);
  v228 = v278;
  if (v278)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)v278;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v229 = v135;
  v278 = 0;
  std::string::basic_string[abi:ne180100]<0>(v224, "U");
  (*((void (**)(void **, void **, void **))*v134 + 3))(v134, &v228, v224);
  if (v225 < 0)
    operator delete(v224[0]);
  v137 = v229;
  if (v229)
  {
    v138 = (unint64_t *)&v229->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v278;
  v278 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v227 < 0)
    operator delete(v226[0]);
  v141 = v289;
  std::string::basic_string[abi:ne180100]<0>(v220, "size");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v220, 0, (uint64_t *)&v278);
  v222 = v278;
  if (v278)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)v278;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v223 = v142;
  v278 = 0;
  std::string::basic_string[abi:ne180100]<0>(v218, "U");
  (*((void (**)(void **, void **, void **))*v141 + 3))(v141, &v222, v218);
  if (v219 < 0)
    operator delete(v218[0]);
  v144 = v223;
  if (v223)
  {
    v145 = (unint64_t *)&v223->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v278;
  v278 = 0;
  if (v147)
    (*(void (**)(void *))(*(_QWORD *)v147 + 8))(v147);
  if (v221 < 0)
    operator delete(v220[0]);
  v148 = v289;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v278);
  v216 = v278;
  if (v278)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = (std::__shared_weak_count_vtbl *)v278;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v217 = v149;
  v278 = 0;
  std::string::basic_string[abi:ne180100]<0>(v214, "T");
  (*((void (**)(void **, void **, void **))*v148 + 3))(v148, &v216, v214);
  if (v215 < 0)
    operator delete(v214[0]);
  v151 = v217;
  if (v217)
  {
    v152 = (unint64_t *)&v217->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = v278;
  v278 = 0;
  if (v154)
    (*(void (**)(void *))(*(_QWORD *)v154 + 8))(v154);
  v155 = *a3;
  v212 = v289;
  if (v289)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = v289;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = (std::__shared_weak_count_vtbl *)v157;
  }
  else
  {
    v156 = 0;
  }
  v213 = v156;
  v289 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v155 + 56))(v155, &v212);
  v158 = v213;
  if (v213)
  {
    v159 = (unint64_t *)&v213->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = v289;
  v289 = 0;
  if (v161)
    (*((void (**)(void **))*v161 + 1))(v161);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v289);
  v162 = v289;
  std::string::basic_string[abi:ne180100]<0>(v208, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v208, 0, (uint64_t *)&v278);
  v210 = v278;
  if (v278)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = (std::__shared_weak_count_vtbl *)v278;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = v164;
  }
  else
  {
    v163 = 0;
  }
  v211 = v163;
  v278 = 0;
  std::string::basic_string[abi:ne180100]<0>(v206, "D");
  (*((void (**)(void **, void **, void **))*v162 + 5))(v162, &v210, v206);
  if (v207 < 0)
    operator delete(v206[0]);
  v165 = v211;
  if (v211)
  {
    v166 = (unint64_t *)&v211->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v278;
  v278 = 0;
  if (v168)
    (*(void (**)(void *))(*(_QWORD *)v168 + 8))(v168);
  if (v209 < 0)
    operator delete(v208[0]);
  v169 = v289;
  std::string::basic_string[abi:ne180100]<0>(v202, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v202, 0, (uint64_t *)&v278);
  v204 = v278;
  if (v278)
  {
    v170 = (std::__shared_weak_count *)operator new();
    v171 = (std::__shared_weak_count_vtbl *)v278;
    v170->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v170->__shared_owners_ = 0;
    v170->__shared_weak_owners_ = 0;
    v170[1].__vftable = v171;
  }
  else
  {
    v170 = 0;
  }
  v205 = v170;
  v278 = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v169 + 3))(v169, &v204, 0, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v172 = v205;
  if (v205)
  {
    v173 = (unint64_t *)&v205->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = v278;
  v278 = 0;
  if (v175)
    (*(void (**)(void *))(*(_QWORD *)v175 + 8))(v175);
  if (v203 < 0)
    operator delete(v202[0]);
  v176 = v289;
  std::string::basic_string[abi:ne180100]<0>(v196, "size");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v196, 0, (uint64_t *)&v278);
  v198 = v278;
  if (v278)
  {
    v177 = (std::__shared_weak_count *)operator new();
    v178 = (std::__shared_weak_count_vtbl *)v278;
    v177->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v177->__shared_owners_ = 0;
    v177->__shared_weak_owners_ = 0;
    v177[1].__vftable = v178;
  }
  else
  {
    v177 = 0;
  }
  v199 = v177;
  v278 = 0;
  std::string::basic_string[abi:ne180100]<0>(v194, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v176 + 3))(v176, &v198, 0, v194);
  if (v195 < 0)
    operator delete(v194[0]);
  v179 = v199;
  if (v199)
  {
    v180 = (unint64_t *)&v199->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v182 = v278;
  v278 = 0;
  if (v182)
    (*(void (**)(void *))(*(_QWORD *)v182 + 8))(v182);
  if (v197 < 0)
    operator delete(v196[0]);
  v183 = *a3;
  v192 = v289;
  if (v289)
  {
    v184 = (std::__shared_weak_count *)operator new();
    v185 = v289;
    v184->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v184->__shared_owners_ = 0;
    v184->__shared_weak_owners_ = 0;
    v184[1].__vftable = (std::__shared_weak_count_vtbl *)v185;
  }
  else
  {
    v184 = 0;
  }
  v193 = v184;
  v289 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v183 + 56))(v183, &v192);
  v186 = v193;
  if (v193)
  {
    v187 = (unint64_t *)&v193->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = v289;
  v289 = 0;
  if (v189)
    (*((void (**)(void **))*v189 + 1))(v189);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v246, 0);
  result = (uint64_t)v277;
  if (v277)
  {
    v191 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v277);
    return MEMORY[0x1E0C023A0](v191, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A3F48C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 152);
  *(_QWORD *)(v2 - 152) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x258], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x368], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::SliceUpdate::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  unsigned __int8 *v105;
  void *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  void **v112;
  unsigned __int8 *v113;
  void *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  void **v120;
  unsigned __int8 *v121;
  void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  void **v128;
  unsigned __int8 *v129;
  void *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  char **v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  __int128 v180;
  char *v181;
  char *v182;
  char *v183;
  std::__shared_weak_count *v184;
  unint64_t *p_shared_owners;
  unint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  char **v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  void **v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  void *v215;
  void **v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  void *v222;
  void **v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  void *v229;
  void **v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  void *v236;
  void **v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count_vtbl *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  void *v243;
  void **v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count_vtbl *v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  void *v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  void **v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  void **v257;
  void **v258;
  std::__shared_weak_count *v259;
  std::__shared_weak_count_vtbl *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  void *v264;
  void **v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count_vtbl *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  void *v271;
  void **v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count_vtbl *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  void *v278;
  void **v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count_vtbl *v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  void *v285;
  void **v286;
  std::__shared_weak_count *v287;
  std::__shared_weak_count_vtbl *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  void *v292;
  void **v293;
  std::__shared_weak_count *v294;
  std::__shared_weak_count_vtbl *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  void *v299;
  void **v300;
  std::__shared_weak_count *v301;
  std::__shared_weak_count_vtbl *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  void *v306;
  void **v307;
  std::__shared_weak_count *v308;
  std::__shared_weak_count_vtbl *v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  void *v313;
  void **v314;
  std::__shared_weak_count *v315;
  std::__shared_weak_count_vtbl *v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  void *v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  void **v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  void **v327;
  uint64_t result;
  uint64_t v329;
  void **v330;
  std::__shared_weak_count *v331;
  void *v332[2];
  char v333;
  void *v334;
  std::__shared_weak_count *v335;
  void *v336[2];
  char v337;
  void *v338[2];
  char v339;
  void *v340;
  std::__shared_weak_count *v341;
  void *v342[2];
  char v343;
  void *v344[2];
  char v345;
  void *v346;
  std::__shared_weak_count *v347;
  void *v348[2];
  char v349;
  void *v350[2];
  char v351;
  void *v352;
  std::__shared_weak_count *v353;
  void *v354[2];
  char v355;
  void *v356[2];
  char v357;
  void *v358;
  std::__shared_weak_count *v359;
  void *v360[2];
  char v361;
  void *v362[2];
  char v363;
  void *v364;
  std::__shared_weak_count *v365;
  void *v366[2];
  char v367;
  void *v368[2];
  char v369;
  void *v370;
  std::__shared_weak_count *v371;
  void *v372[2];
  char v373;
  void *v374[2];
  char v375;
  void *v376;
  std::__shared_weak_count *v377;
  void *v378[2];
  char v379;
  void *v380[2];
  char v381;
  void *v382;
  std::__shared_weak_count *v383;
  void **v384;
  std::__shared_weak_count *v385;
  void *v386[2];
  char v387;
  void *v388;
  std::__shared_weak_count *v389;
  void *v390[2];
  char v391;
  void *v392[2];
  char v393;
  void *v394;
  std::__shared_weak_count *v395;
  void *v396[2];
  char v397;
  void *v398[2];
  char v399;
  void *v400;
  std::__shared_weak_count *v401;
  void *v402[2];
  char v403;
  void *v404[2];
  char v405;
  void *v406;
  std::__shared_weak_count *v407;
  void *v408[2];
  char v409;
  void *v410[2];
  char v411;
  void *v412;
  std::__shared_weak_count *v413;
  void *v414[2];
  char v415;
  void *v416[2];
  char v417;
  void *v418;
  std::__shared_weak_count *v419;
  __int128 v420;
  __int128 v421;
  void *v422[2];
  uint64_t v423;
  void *v424;
  void *v425;
  _QWORD *v426;
  __n128 v427;
  uint64_t v428;
  __int128 v429;
  char **v430;
  __n128 v431;
  __n128 v432;
  __n128 v433;
  __n128 v434;
  __n128 v435;
  __n128 v436;
  __n128 v437;
  void *__p;
  void *v439;
  _QWORD *v440;
  void *v441;
  void *v442;
  _QWORD *v443;
  void *v444;
  void *v445;
  _QWORD *v446;
  void *v447;
  void *v448;
  _QWORD *v449;
  void *v450;
  void *v451;
  _QWORD *v452;
  void *v453;
  void *v454;
  _QWORD *v455;
  void *v456;
  void *v457;
  _QWORD *v458;
  void *v459;
  void *v460;
  _QWORD *v461;
  __n128 v462;
  _QWORD *v463;
  void *v464;
  void *v465;
  char *v466;
  char *v467;
  char **v468;
  _BYTE v469[24];
  _BYTE *v470;
  _BYTE v471[24];
  _BYTE *v472;
  _QWORD v473[3];
  _QWORD *v474;
  void *v475;
  void *v476;
  _QWORD *v477;
  void **v478;
  void **v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;

  v488 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v463 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v466 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v464 = v9;
  v465 = v9 + 16;
  v478 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v464);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v476 = v12 + 2;
  v477 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v475 = v12;
  v479 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v475);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v461 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v459 = v15;
  v460 = v15 + 2;
  v480 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v459);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v458 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v456 = v18;
  v457 = v18 + 2;
  v481 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v456);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v455 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v453 = v21;
  v454 = v21 + 2;
  v482 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v453);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v452 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v450 = v24;
  v451 = v24 + 2;
  v483 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v450);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v449 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v447 = v27;
  v448 = v27 + 2;
  v484 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v447);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v446 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v444 = v30;
  v445 = v30 + 2;
  v485 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v444);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v443 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  v441 = v33;
  v442 = v33 + 2;
  v486 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v441);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(0x10uLL);
  v440 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  __p = v36;
  v439 = v36 + 2;
  v487 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v478, 10, &v462);
  MIL::IRParameter::Make(&v462, (uint64_t *)&v424);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v424);
  v37 = v424;
  v424 = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v462.n128_u64[1];
  if (v462.n128_u64[1])
  {
    v39 = (unint64_t *)(v462.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v439 = __p;
    operator delete(__p);
  }
  if (v441)
  {
    v442 = v441;
    operator delete(v441);
  }
  if (v444)
  {
    v445 = v444;
    operator delete(v444);
  }
  if (v447)
  {
    v448 = v447;
    operator delete(v447);
  }
  if (v450)
  {
    v451 = v450;
    operator delete(v450);
  }
  if (v453)
  {
    v454 = v453;
    operator delete(v453);
  }
  if (v456)
  {
    v457 = v456;
    operator delete(v456);
  }
  if (v459)
  {
    v460 = v459;
    operator delete(v459);
  }
  if (v475)
  {
    v476 = v475;
    operator delete(v475);
  }
  if (v464)
  {
    v465 = v464;
    operator delete(v464);
  }
  v41 = v463;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = (char *)operator new(0x10uLL);
  v466 = v44 + 16;
  *(_QWORD *)v44 = v42;
  *((_QWORD *)v44 + 1) = v43;
  v464 = v44;
  v465 = v44 + 16;
  v478 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v464);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(0x10uLL);
  v476 = v47 + 2;
  v477 = v47 + 2;
  *v47 = v45;
  v47[1] = v46;
  v475 = v47;
  v479 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v475);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(0x10uLL);
  v461 = v50 + 2;
  *v50 = v48;
  v50[1] = v49;
  v459 = v50;
  v460 = v50 + 2;
  v480 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v459);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(0x10uLL);
  v458 = v53 + 2;
  *v53 = v51;
  v53[1] = v52;
  v456 = v53;
  v457 = v53 + 2;
  v481 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v456);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(0x10uLL);
  v455 = v56 + 2;
  *v56 = v54;
  v56[1] = v55;
  v453 = v56;
  v454 = v56 + 2;
  v482 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v453);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(0x10uLL);
  v452 = v59 + 2;
  *v59 = v57;
  v59[1] = v58;
  v450 = v59;
  v451 = v59 + 2;
  v483 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v450);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(0x10uLL);
  v449 = v62 + 2;
  *v62 = v60;
  v62[1] = v61;
  v447 = v62;
  v448 = v62 + 2;
  v484 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v447);
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(0x10uLL);
  v446 = v65 + 2;
  *v65 = v63;
  v65[1] = v64;
  v444 = v65;
  v445 = v65 + 2;
  v485 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v444);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(0x10uLL);
  v443 = v68 + 2;
  *v68 = v66;
  v68[1] = v67;
  v441 = v68;
  v442 = v68 + 2;
  v486 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v441);
  v69 = MIL::IRUnknownDimension::Make(a1, 0);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(0x10uLL);
  v440 = v71 + 2;
  *v71 = v69;
  v71[1] = v70;
  __p = v71;
  v439 = v71 + 2;
  v487 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v478, 10, &v437);
  MIL::IRParameter::Make(&v437, (uint64_t *)&v424);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v41, "update", (uint64_t *)&v424);
  v72 = v424;
  v424 = 0;
  if (v72)
    (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
  v73 = (std::__shared_weak_count *)v437.n128_u64[1];
  if (v437.n128_u64[1])
  {
    v74 = (unint64_t *)(v437.n128_u64[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (__p)
  {
    v439 = __p;
    operator delete(__p);
  }
  if (v441)
  {
    v442 = v441;
    operator delete(v441);
  }
  if (v444)
  {
    v445 = v444;
    operator delete(v444);
  }
  if (v447)
  {
    v448 = v447;
    operator delete(v447);
  }
  if (v450)
  {
    v451 = v450;
    operator delete(v450);
  }
  if (v453)
  {
    v454 = v453;
    operator delete(v453);
  }
  if (v456)
  {
    v457 = v456;
    operator delete(v456);
  }
  if (v459)
  {
    v460 = v459;
    operator delete(v459);
  }
  if (v475)
  {
    v476 = v475;
    operator delete(v475);
  }
  if (v464)
  {
    v465 = v464;
    operator delete(v464);
  }
  v76 = v463;
  v77 = MIL::IRUnknownDimension::Make(a1, 0);
  v78 = (char *)operator new(8uLL);
  v464 = v78;
  *(_QWORD *)v78 = v77;
  v466 = v78 + 8;
  v465 = v78 + 8;
  v478 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v464);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = operator new(8uLL);
  v475 = v80;
  *v80 = v79;
  v476 = v80 + 1;
  v477 = v80 + 1;
  v479 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v475);
  v81 = MIL::IRUnknownDimension::Make(a1, 0);
  v82 = operator new(8uLL);
  v459 = v82;
  *v82 = v81;
  v461 = v82 + 1;
  v460 = v82 + 1;
  v480 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v459);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v478, 3, &v436);
  MIL::IRParameter::Make(&v436, (uint64_t *)&v456);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v76, "begin", (uint64_t *)&v456);
  v83 = v456;
  v456 = 0;
  if (v83)
    (*(void (**)(void *))(*(_QWORD *)v83 + 8))(v83);
  v84 = (std::__shared_weak_count *)v436.n128_u64[1];
  if (v436.n128_u64[1])
  {
    v85 = (unint64_t *)(v436.n128_u64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (v459)
  {
    v460 = v459;
    operator delete(v459);
  }
  if (v475)
  {
    v476 = v475;
    operator delete(v475);
  }
  if (v464)
  {
    v465 = v464;
    operator delete(v464);
  }
  v87 = v463;
  v88 = MIL::IRUnknownDimension::Make(a1, 0);
  v89 = (char *)operator new(8uLL);
  v464 = v89;
  *(_QWORD *)v89 = v88;
  v466 = v89 + 8;
  v465 = v89 + 8;
  v478 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v464);
  v90 = MIL::IRUnknownDimension::Make(a1, 0);
  v91 = operator new(8uLL);
  v475 = v91;
  *v91 = v90;
  v476 = v91 + 1;
  v477 = v91 + 1;
  v479 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v475);
  v92 = MIL::IRUnknownDimension::Make(a1, 0);
  v93 = operator new(8uLL);
  v459 = v93;
  *v93 = v92;
  v461 = v93 + 1;
  v460 = v93 + 1;
  v480 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v459);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v478, 3, &v435);
  MIL::IRParameter::Make(&v435, (uint64_t *)&v456);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v87, "end", (uint64_t *)&v456);
  v94 = v456;
  v456 = 0;
  if (v94)
    (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
  v95 = (std::__shared_weak_count *)v435.n128_u64[1];
  if (v435.n128_u64[1])
  {
    v96 = (unint64_t *)(v435.n128_u64[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (v459)
  {
    v460 = v459;
    operator delete(v459);
  }
  if (v475)
  {
    v476 = v475;
    operator delete(v475);
  }
  if (v464)
  {
    v465 = v464;
    operator delete(v464);
  }
  v98 = v463;
  v99 = MIL::IRUnknownDimension::Make(a1, 0);
  v100 = (char *)operator new(8uLL);
  v464 = v100;
  *(_QWORD *)v100 = v99;
  v466 = v100 + 8;
  v465 = v100 + 8;
  v478 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v464);
  v101 = MIL::IRUnknownDimension::Make(a1, 0);
  v102 = operator new(8uLL);
  v475 = v102;
  *v102 = v101;
  v476 = v102 + 1;
  v477 = v102 + 1;
  v479 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v475);
  v103 = MIL::IRUnknownDimension::Make(a1, 0);
  v104 = operator new(8uLL);
  v459 = v104;
  *v104 = v103;
  v461 = v104 + 1;
  v460 = v104 + 1;
  v480 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v459);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v478, 3, &v434);
  MIL::IRParameter::Make(&v434, (uint64_t *)&v456);
  v105 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v98, "stride", (uint64_t *)&v456);
  v106 = v456;
  v456 = 0;
  if (v106)
    (*(void (**)(void *))(*(_QWORD *)v106 + 8))(v106);
  v107 = (std::__shared_weak_count *)v434.n128_u64[1];
  if (v434.n128_u64[1])
  {
    v108 = (unint64_t *)(v434.n128_u64[1] + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  if (v459)
  {
    v460 = v459;
    operator delete(v459);
  }
  if (v475)
  {
    v476 = v475;
    operator delete(v475);
  }
  if (v464)
  {
    v465 = v464;
    operator delete(v464);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v105 + 5) + 48))(*((_QWORD *)v105 + 5), 1);
  v110 = v463;
  v111 = MIL::IRUnknownDimension::Make(a1, 0);
  v112 = (void **)operator new(8uLL);
  v478 = v112;
  *v112 = (void *)v111;
  v479 = v112 + 1;
  v480 = (uint64_t)(v112 + 1);
  v475 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v478);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v475, 1, &v433);
  MIL::IRParameter::Make(&v433, (uint64_t *)&v464);
  v113 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v110, "begin_mask", (uint64_t *)&v464);
  v114 = v464;
  v464 = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  v115 = (std::__shared_weak_count *)v433.n128_u64[1];
  if (v433.n128_u64[1])
  {
    v116 = (unint64_t *)(v433.n128_u64[1] + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  if (v478)
  {
    v479 = v478;
    operator delete(v478);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v113 + 5) + 48))(*((_QWORD *)v113 + 5), 1);
  v118 = v463;
  v119 = MIL::IRUnknownDimension::Make(a1, 0);
  v120 = (void **)operator new(8uLL);
  v478 = v120;
  *v120 = (void *)v119;
  v479 = v120 + 1;
  v480 = (uint64_t)(v120 + 1);
  v475 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v478);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v475, 1, &v432);
  MIL::IRParameter::Make(&v432, (uint64_t *)&v464);
  v121 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v118, "end_mask", (uint64_t *)&v464);
  v122 = v464;
  v464 = 0;
  if (v122)
    (*(void (**)(void *))(*(_QWORD *)v122 + 8))(v122);
  v123 = (std::__shared_weak_count *)v432.n128_u64[1];
  if (v432.n128_u64[1])
  {
    v124 = (unint64_t *)(v432.n128_u64[1] + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  if (v478)
  {
    v479 = v478;
    operator delete(v478);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v121 + 5) + 48))(*((_QWORD *)v121 + 5), 1);
  v126 = v463;
  v127 = MIL::IRUnknownDimension::Make(a1, 0);
  v128 = (void **)operator new(8uLL);
  v478 = v128;
  *v128 = (void *)v127;
  v479 = v128 + 1;
  v480 = (uint64_t)(v128 + 1);
  v475 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v478);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v475, 1, &v431);
  MIL::IRParameter::Make(&v431, (uint64_t *)&v464);
  v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v126, "squeeze_mask", (uint64_t *)&v464);
  v130 = v464;
  v464 = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  v131 = (std::__shared_weak_count *)v431.n128_u64[1];
  if (v431.n128_u64[1])
  {
    v132 = (unint64_t *)(v431.n128_u64[1] + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  if (v478)
  {
    v479 = v478;
    operator delete(v478);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v129 + 5) + 48))(*((_QWORD *)v129 + 5), 1);
  v430 = 0;
  v134 = operator new();
  *(_QWORD *)v134 = 0;
  *(_QWORD *)(v134 + 8) = 0;
  *(_QWORD *)(v134 + 16) = 0;
  v478 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v430, (void **)v134);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v478, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v430, 1uLL);
  v135 = v430;
  v136 = MIL::IRUnknownDimension::Make(a1, 0);
  v137 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v138 = operator new(0x10uLL);
  v476 = v138 + 2;
  v477 = v138 + 2;
  *v138 = v136;
  v138[1] = v137;
  v475 = v138;
  v478 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v475);
  v139 = MIL::IRUnknownDimension::Make(a1, 0);
  v140 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v141 = operator new(0x10uLL);
  v461 = v141 + 2;
  *v141 = v139;
  v141[1] = v140;
  v459 = v141;
  v460 = v141 + 2;
  v479 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v459);
  v142 = MIL::IRUnknownDimension::Make(a1, 0);
  v143 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v144 = operator new(0x10uLL);
  v458 = v144 + 2;
  *v144 = v142;
  v144[1] = v143;
  v456 = v144;
  v457 = v144 + 2;
  v480 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v456);
  v145 = MIL::IRUnknownDimension::Make(a1, 0);
  v146 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v147 = operator new(0x10uLL);
  v455 = v147 + 2;
  *v147 = v145;
  v147[1] = v146;
  v453 = v147;
  v454 = v147 + 2;
  v481 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v453);
  v148 = MIL::IRUnknownDimension::Make(a1, 0);
  v149 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v150 = operator new(0x10uLL);
  v452 = v150 + 2;
  *v150 = v148;
  v150[1] = v149;
  v450 = v150;
  v451 = v150 + 2;
  v482 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v450);
  v151 = MIL::IRUnknownDimension::Make(a1, 0);
  v152 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v153 = operator new(0x10uLL);
  v449 = v153 + 2;
  *v153 = v151;
  v153[1] = v152;
  v447 = v153;
  v448 = v153 + 2;
  v483 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v447);
  v154 = MIL::IRUnknownDimension::Make(a1, 0);
  v155 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v156 = operator new(0x10uLL);
  v446 = v156 + 2;
  *v156 = v154;
  v156[1] = v155;
  v444 = v156;
  v445 = v156 + 2;
  v484 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v444);
  v157 = MIL::IRUnknownDimension::Make(a1, 0);
  v158 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v159 = operator new(0x10uLL);
  v443 = v159 + 2;
  *v159 = v157;
  v159[1] = v158;
  v441 = v159;
  v442 = v159 + 2;
  v485 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v441);
  v160 = MIL::IRUnknownDimension::Make(a1, 0);
  v161 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v162 = operator new(0x10uLL);
  v440 = v162 + 2;
  *v162 = v160;
  v162[1] = v161;
  __p = v162;
  v439 = v162 + 2;
  v486 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v163 = MIL::IRUnknownDimension::Make(a1, 0);
  v164 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v165 = operator new(0x10uLL);
  v426 = v165 + 2;
  *v165 = v163;
  v165[1] = v164;
  v424 = v165;
  v425 = v165 + 2;
  v487 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v424);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v478, 10, &v427);
  MIL::IRParameter::Make(&v427, &v428);
  *(_QWORD *)&v429 = v428;
  if (v428)
  {
    v166 = (_QWORD *)operator new();
    v167 = v428;
    *v166 = &unk_1EA99F888;
    v166[1] = 0;
    v166[2] = 0;
    v166[3] = v167;
  }
  else
  {
    v166 = 0;
  }
  *((_QWORD *)&v429 + 1) = v166;
  v428 = 0;
  v168 = v135[2];
  v169 = v135[1];
  if (v169 >= v168)
  {
    v170 = (v169 - *v135) >> 4;
    v171 = v170 + 1;
    if ((unint64_t)(v170 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v172 = v168 - *v135;
    if (v172 >> 3 > v171)
      v171 = v172 >> 3;
    if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF0)
      v173 = 0xFFFFFFFFFFFFFFFLL;
    else
      v173 = v171;
    v468 = v135 + 2;
    v174 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v135 + 2), v173);
    v176 = &v174[16 * v170];
    *(_OWORD *)v176 = v429;
    v429 = 0uLL;
    v178 = *v135;
    v177 = v135[1];
    if (v177 == *v135)
    {
      v181 = v135[1];
      v179 = &v174[16 * v170];
    }
    else
    {
      v179 = &v174[16 * v170];
      do
      {
        v180 = *((_OWORD *)v177 - 1);
        v177 -= 16;
        *((_OWORD *)v179 - 1) = v180;
        v179 -= 16;
        *(_QWORD *)v177 = 0;
        *((_QWORD *)v177 + 1) = 0;
      }
      while (v177 != v178);
      v181 = *v135;
      v177 = v135[1];
    }
    v182 = v176 + 16;
    *v135 = v179;
    v465 = v181;
    v135[1] = v176 + 16;
    v466 = v177;
    v183 = v135[2];
    v135[2] = &v174[16 * v175];
    v467 = v183;
    v464 = v181;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v464);
    v184 = (std::__shared_weak_count *)*((_QWORD *)&v429 + 1);
    v135[1] = v182;
    if (v184)
    {
      p_shared_owners = (unint64_t *)&v184->__shared_owners_;
      do
        v186 = __ldaxr(p_shared_owners);
      while (__stlxr(v186 - 1, p_shared_owners));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
  }
  else
  {
    *(_QWORD *)v169 = v429;
    *((_QWORD *)v169 + 1) = v166;
    v429 = 0uLL;
    v135[1] = v169 + 16;
  }
  v187 = v428;
  v428 = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  v188 = (std::__shared_weak_count *)v427.n128_u64[1];
  if (v427.n128_u64[1])
  {
    v189 = (unint64_t *)(v427.n128_u64[1] + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  if (v424)
  {
    v425 = v424;
    operator delete(v424);
  }
  if (__p)
  {
    v439 = __p;
    operator delete(__p);
  }
  if (v441)
  {
    v442 = v441;
    operator delete(v441);
  }
  if (v444)
  {
    v445 = v444;
    operator delete(v444);
  }
  if (v447)
  {
    v448 = v447;
    operator delete(v447);
  }
  if (v450)
  {
    v451 = v450;
    operator delete(v450);
  }
  if (v453)
  {
    v454 = v453;
    operator delete(v453);
  }
  if (v456)
  {
    v457 = v456;
    operator delete(v456);
  }
  if (v459)
  {
    v460 = v459;
    operator delete(v459);
  }
  if (v475)
  {
    v476 = v475;
    operator delete(v475);
  }
  *(_OWORD *)v422 = *(_OWORD *)a2;
  v423 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v191 = (uint64_t)v463;
  *(_QWORD *)&v421 = v463;
  if (v463)
  {
    v192 = (_QWORD *)operator new();
    *v192 = &unk_1EA99F8E8;
    v192[1] = 0;
    v192[2] = 0;
    v192[3] = v191;
  }
  else
  {
    v192 = 0;
  }
  *((_QWORD *)&v421 + 1) = v192;
  v463 = 0;
  *(_QWORD *)&v420 = v430;
  if (v430)
  {
    v193 = (_QWORD *)operator new();
    v194 = v430;
    *v193 = &unk_1EA99F948;
    v193[1] = 0;
    v193[2] = 0;
    v193[3] = v194;
  }
  else
  {
    v193 = 0;
  }
  *((_QWORD *)&v420 + 1) = v193;
  v430 = 0;
  v473[0] = &unk_1EA99FAC8;
  v473[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateSliceUpdate;
  v474 = v473;
  v472 = 0;
  MIL::IROperator::Make((__int128 *)v422, &v421, &v420, (uint64_t)v473, (uint64_t)v471, a3);
  v195 = v472;
  if (v472 == v471)
  {
    v196 = 4;
    v195 = v471;
  }
  else
  {
    if (!v472)
      goto LABEL_180;
    v196 = 5;
  }
  (*(void (**)(void))(*v195 + 8 * v196))();
LABEL_180:
  v197 = v474;
  if (v474 == v473)
  {
    v198 = 4;
    v197 = v473;
    goto LABEL_184;
  }
  if (v474)
  {
    v198 = 5;
LABEL_184:
    (*(void (**)(void))(*v197 + 8 * v198))();
  }
  v199 = (std::__shared_weak_count *)*((_QWORD *)&v420 + 1);
  if (*((_QWORD *)&v420 + 1))
  {
    v200 = (unint64_t *)(*((_QWORD *)&v420 + 1) + 8);
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = (std::__shared_weak_count *)*((_QWORD *)&v421 + 1);
  if (*((_QWORD *)&v421 + 1))
  {
    v203 = (unint64_t *)(*((_QWORD *)&v421 + 1) + 8);
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  if (SHIBYTE(v423) < 0)
    operator delete(v422[0]);
  v205 = *a3;
  v206 = std::string::basic_string[abi:ne180100]<0>(&v478, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v206, (uint64_t)v469);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v205 + 200))(v205, v469);
  v207 = v470;
  if (v470 == v469)
  {
    v208 = 4;
    v207 = v469;
  }
  else
  {
    if (!v470)
      goto LABEL_202;
    v208 = 5;
  }
  (*(void (**)(void))(*v207 + 8 * v208))();
LABEL_202:
  if (SHIBYTE(v480) < 0)
    operator delete(v478);
  MIL::Validation::TensorDTypeConstraints::Make(&v478);
  v209 = v478;
  std::string::basic_string[abi:ne180100]<0>(v416, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v416, 0, (uint64_t *)&v464);
  v418 = v464;
  if (v464)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = (std::__shared_weak_count_vtbl *)v464;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = v211;
  }
  else
  {
    v210 = 0;
  }
  v419 = v210;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v414, "T");
  (*((void (**)(void **, void **, void **))*v209 + 3))(v209, &v418, v414);
  if (v415 < 0)
    operator delete(v414[0]);
  v212 = v419;
  if (v419)
  {
    v213 = (unint64_t *)&v419->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = v464;
  v464 = 0;
  if (v215)
    (*(void (**)(void *))(*(_QWORD *)v215 + 8))(v215);
  if (v417 < 0)
    operator delete(v416[0]);
  v216 = v478;
  std::string::basic_string[abi:ne180100]<0>(v410, "update");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v410, 0, (uint64_t *)&v464);
  v412 = v464;
  if (v464)
  {
    v217 = (std::__shared_weak_count *)operator new();
    v218 = (std::__shared_weak_count_vtbl *)v464;
    v217->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v217->__shared_owners_ = 0;
    v217->__shared_weak_owners_ = 0;
    v217[1].__vftable = v218;
  }
  else
  {
    v217 = 0;
  }
  v413 = v217;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v408, "T");
  (*((void (**)(void **, void **, void **))*v216 + 3))(v216, &v412, v408);
  if (v409 < 0)
    operator delete(v408[0]);
  v219 = v413;
  if (v413)
  {
    v220 = (unint64_t *)&v413->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = v464;
  v464 = 0;
  if (v222)
    (*(void (**)(void *))(*(_QWORD *)v222 + 8))(v222);
  if (v411 < 0)
    operator delete(v410[0]);
  v223 = v478;
  std::string::basic_string[abi:ne180100]<0>(v404, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v404, 0, (uint64_t *)&v464);
  v406 = v464;
  if (v464)
  {
    v224 = (std::__shared_weak_count *)operator new();
    v225 = (std::__shared_weak_count_vtbl *)v464;
    v224->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v224->__shared_owners_ = 0;
    v224->__shared_weak_owners_ = 0;
    v224[1].__vftable = v225;
  }
  else
  {
    v224 = 0;
  }
  v407 = v224;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v402, "U");
  (*((void (**)(void **, void **, void **))*v223 + 3))(v223, &v406, v402);
  if (v403 < 0)
    operator delete(v402[0]);
  v226 = v407;
  if (v407)
  {
    v227 = (unint64_t *)&v407->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = v464;
  v464 = 0;
  if (v229)
    (*(void (**)(void *))(*(_QWORD *)v229 + 8))(v229);
  if (v405 < 0)
    operator delete(v404[0]);
  v230 = v478;
  std::string::basic_string[abi:ne180100]<0>(v398, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v398, 0, (uint64_t *)&v464);
  v400 = v464;
  if (v464)
  {
    v231 = (std::__shared_weak_count *)operator new();
    v232 = (std::__shared_weak_count_vtbl *)v464;
    v231->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v231->__shared_owners_ = 0;
    v231->__shared_weak_owners_ = 0;
    v231[1].__vftable = v232;
  }
  else
  {
    v231 = 0;
  }
  v401 = v231;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v396, "U");
  (*((void (**)(void **, void **, void **))*v230 + 3))(v230, &v400, v396);
  if (v397 < 0)
    operator delete(v396[0]);
  v233 = v401;
  if (v401)
  {
    v234 = (unint64_t *)&v401->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  v236 = v464;
  v464 = 0;
  if (v236)
    (*(void (**)(void *))(*(_QWORD *)v236 + 8))(v236);
  if (v399 < 0)
    operator delete(v398[0]);
  v237 = v478;
  std::string::basic_string[abi:ne180100]<0>(v392, "stride");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v392, 1, (uint64_t *)&v464);
  v394 = v464;
  if (v464)
  {
    v238 = (std::__shared_weak_count *)operator new();
    v239 = (std::__shared_weak_count_vtbl *)v464;
    v238->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v238->__shared_owners_ = 0;
    v238->__shared_weak_owners_ = 0;
    v238[1].__vftable = v239;
  }
  else
  {
    v238 = 0;
  }
  v395 = v238;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v390, "U");
  (*((void (**)(void **, void **, void **))*v237 + 3))(v237, &v394, v390);
  if (v391 < 0)
    operator delete(v390[0]);
  v240 = v395;
  if (v395)
  {
    v241 = (unint64_t *)&v395->__shared_owners_;
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = v464;
  v464 = 0;
  if (v243)
    (*(void (**)(void *))(*(_QWORD *)v243 + 8))(v243);
  if (v393 < 0)
    operator delete(v392[0]);
  v244 = v478;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v464);
  v388 = v464;
  if (v464)
  {
    v245 = (std::__shared_weak_count *)operator new();
    v246 = (std::__shared_weak_count_vtbl *)v464;
    v245->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v245->__shared_owners_ = 0;
    v245->__shared_weak_owners_ = 0;
    v245[1].__vftable = v246;
  }
  else
  {
    v245 = 0;
  }
  v389 = v245;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v386, "T");
  (*((void (**)(void **, void **, void **))*v244 + 3))(v244, &v388, v386);
  if (v387 < 0)
    operator delete(v386[0]);
  v247 = v389;
  if (v389)
  {
    v248 = (unint64_t *)&v389->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  v250 = v464;
  v464 = 0;
  if (v250)
    (*(void (**)(void *))(*(_QWORD *)v250 + 8))(v250);
  v251 = *a3;
  v384 = v478;
  if (v478)
  {
    v252 = (std::__shared_weak_count *)operator new();
    v253 = v478;
    v252->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v252->__shared_owners_ = 0;
    v252->__shared_weak_owners_ = 0;
    v252[1].__vftable = (std::__shared_weak_count_vtbl *)v253;
  }
  else
  {
    v252 = 0;
  }
  v385 = v252;
  v478 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v251 + 56))(v251, &v384);
  v254 = v385;
  if (v385)
  {
    v255 = (unint64_t *)&v385->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v257 = v478;
  v478 = 0;
  if (v257)
    (*((void (**)(void **))*v257 + 1))(v257);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v478);
  v258 = v478;
  std::string::basic_string[abi:ne180100]<0>(v380, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v380, 0, (uint64_t *)&v464);
  v382 = v464;
  if (v464)
  {
    v259 = (std::__shared_weak_count *)operator new();
    v260 = (std::__shared_weak_count_vtbl *)v464;
    v259->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v259->__shared_owners_ = 0;
    v259->__shared_weak_owners_ = 0;
    v259[1].__vftable = v260;
  }
  else
  {
    v259 = 0;
  }
  v383 = v259;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v378, "D");
  (*((void (**)(void **, void **, void **))*v258 + 5))(v258, &v382, v378);
  if (v379 < 0)
    operator delete(v378[0]);
  v261 = v383;
  if (v383)
  {
    v262 = (unint64_t *)&v383->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  v264 = v464;
  v464 = 0;
  if (v264)
    (*(void (**)(void *))(*(_QWORD *)v264 + 8))(v264);
  if (v381 < 0)
    operator delete(v380[0]);
  v265 = v478;
  std::string::basic_string[abi:ne180100]<0>(v374, "update");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v374, 0, (uint64_t *)&v464);
  v376 = v464;
  if (v464)
  {
    v266 = (std::__shared_weak_count *)operator new();
    v267 = (std::__shared_weak_count_vtbl *)v464;
    v266->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v266->__shared_owners_ = 0;
    v266->__shared_weak_owners_ = 0;
    v266[1].__vftable = v267;
  }
  else
  {
    v266 = 0;
  }
  v377 = v266;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v372, "K");
  (*((void (**)(void **, void **, void **))*v265 + 5))(v265, &v376, v372);
  if (v373 < 0)
    operator delete(v372[0]);
  v268 = v377;
  if (v377)
  {
    v269 = (unint64_t *)&v377->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v271 = v464;
  v464 = 0;
  if (v271)
    (*(void (**)(void *))(*(_QWORD *)v271 + 8))(v271);
  if (v375 < 0)
    operator delete(v374[0]);
  v272 = v478;
  std::string::basic_string[abi:ne180100]<0>(v368, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v368, 0, (uint64_t *)&v464);
  v370 = v464;
  if (v464)
  {
    v273 = (std::__shared_weak_count *)operator new();
    v274 = (std::__shared_weak_count_vtbl *)v464;
    v273->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v273->__shared_owners_ = 0;
    v273->__shared_weak_owners_ = 0;
    v273[1].__vftable = v274;
  }
  else
  {
    v273 = 0;
  }
  v371 = v273;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v366, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v272 + 3))(v272, &v370, 0, v366);
  if (v367 < 0)
    operator delete(v366[0]);
  v275 = v371;
  if (v371)
  {
    v276 = (unint64_t *)&v371->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v278 = v464;
  v464 = 0;
  if (v278)
    (*(void (**)(void *))(*(_QWORD *)v278 + 8))(v278);
  if (v369 < 0)
    operator delete(v368[0]);
  v279 = v478;
  std::string::basic_string[abi:ne180100]<0>(v362, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v362, 0, (uint64_t *)&v464);
  v364 = v464;
  if (v464)
  {
    v280 = (std::__shared_weak_count *)operator new();
    v281 = (std::__shared_weak_count_vtbl *)v464;
    v280->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v280->__shared_owners_ = 0;
    v280->__shared_weak_owners_ = 0;
    v280[1].__vftable = v281;
  }
  else
  {
    v280 = 0;
  }
  v365 = v280;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v360, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v279 + 3))(v279, &v364, 0, v360);
  if (v361 < 0)
    operator delete(v360[0]);
  v282 = v365;
  if (v365)
  {
    v283 = (unint64_t *)&v365->__shared_owners_;
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  v285 = v464;
  v464 = 0;
  if (v285)
    (*(void (**)(void *))(*(_QWORD *)v285 + 8))(v285);
  if (v363 < 0)
    operator delete(v362[0]);
  v286 = v478;
  std::string::basic_string[abi:ne180100]<0>(v356, "stride");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v356, 1, (uint64_t *)&v464);
  v358 = v464;
  if (v464)
  {
    v287 = (std::__shared_weak_count *)operator new();
    v288 = (std::__shared_weak_count_vtbl *)v464;
    v287->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v287->__shared_owners_ = 0;
    v287->__shared_weak_owners_ = 0;
    v287[1].__vftable = v288;
  }
  else
  {
    v287 = 0;
  }
  v359 = v287;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v354, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v286 + 3))(v286, &v358, 0, v354);
  if (v355 < 0)
    operator delete(v354[0]);
  v289 = v359;
  if (v359)
  {
    v290 = (unint64_t *)&v359->__shared_owners_;
    do
      v291 = __ldaxr(v290);
    while (__stlxr(v291 - 1, v290));
    if (!v291)
    {
      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
      std::__shared_weak_count::__release_weak(v289);
    }
  }
  v292 = v464;
  v464 = 0;
  if (v292)
    (*(void (**)(void *))(*(_QWORD *)v292 + 8))(v292);
  if (v357 < 0)
    operator delete(v356[0]);
  v293 = v478;
  std::string::basic_string[abi:ne180100]<0>(v350, "begin_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v350, 1, (uint64_t *)&v464);
  v352 = v464;
  if (v464)
  {
    v294 = (std::__shared_weak_count *)operator new();
    v295 = (std::__shared_weak_count_vtbl *)v464;
    v294->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v294->__shared_owners_ = 0;
    v294->__shared_weak_owners_ = 0;
    v294[1].__vftable = v295;
  }
  else
  {
    v294 = 0;
  }
  v353 = v294;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v348, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v293 + 3))(v293, &v352, 0, v348);
  if (v349 < 0)
    operator delete(v348[0]);
  v296 = v353;
  if (v353)
  {
    v297 = (unint64_t *)&v353->__shared_owners_;
    do
      v298 = __ldaxr(v297);
    while (__stlxr(v298 - 1, v297));
    if (!v298)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  v299 = v464;
  v464 = 0;
  if (v299)
    (*(void (**)(void *))(*(_QWORD *)v299 + 8))(v299);
  if (v351 < 0)
    operator delete(v350[0]);
  v300 = v478;
  std::string::basic_string[abi:ne180100]<0>(v344, "end_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v344, 1, (uint64_t *)&v464);
  v346 = v464;
  if (v464)
  {
    v301 = (std::__shared_weak_count *)operator new();
    v302 = (std::__shared_weak_count_vtbl *)v464;
    v301->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v301->__shared_owners_ = 0;
    v301->__shared_weak_owners_ = 0;
    v301[1].__vftable = v302;
  }
  else
  {
    v301 = 0;
  }
  v347 = v301;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v342, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v300 + 3))(v300, &v346, 0, v342);
  if (v343 < 0)
    operator delete(v342[0]);
  v303 = v347;
  if (v347)
  {
    v304 = (unint64_t *)&v347->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  v306 = v464;
  v464 = 0;
  if (v306)
    (*(void (**)(void *))(*(_QWORD *)v306 + 8))(v306);
  if (v345 < 0)
    operator delete(v344[0]);
  v307 = v478;
  std::string::basic_string[abi:ne180100]<0>(v338, "squeeze_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v338, 1, (uint64_t *)&v464);
  v340 = v464;
  if (v464)
  {
    v308 = (std::__shared_weak_count *)operator new();
    v309 = (std::__shared_weak_count_vtbl *)v464;
    v308->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v308->__shared_owners_ = 0;
    v308->__shared_weak_owners_ = 0;
    v308[1].__vftable = v309;
  }
  else
  {
    v308 = 0;
  }
  v341 = v308;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v336, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v307 + 3))(v307, &v340, 0, v336);
  if (v337 < 0)
    operator delete(v336[0]);
  v310 = v341;
  if (v341)
  {
    v311 = (unint64_t *)&v341->__shared_owners_;
    do
      v312 = __ldaxr(v311);
    while (__stlxr(v312 - 1, v311));
    if (!v312)
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v310);
    }
  }
  v313 = v464;
  v464 = 0;
  if (v313)
    (*(void (**)(void *))(*(_QWORD *)v313 + 8))(v313);
  if (v339 < 0)
    operator delete(v338[0]);
  v314 = v478;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v464);
  v334 = v464;
  if (v464)
  {
    v315 = (std::__shared_weak_count *)operator new();
    v316 = (std::__shared_weak_count_vtbl *)v464;
    v315->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v315->__shared_owners_ = 0;
    v315->__shared_weak_owners_ = 0;
    v315[1].__vftable = v316;
  }
  else
  {
    v315 = 0;
  }
  v335 = v315;
  v464 = 0;
  std::string::basic_string[abi:ne180100]<0>(v332, "D");
  (*((void (**)(void **, void **, void **))*v314 + 5))(v314, &v334, v332);
  if (v333 < 0)
    operator delete(v332[0]);
  v317 = v335;
  if (v335)
  {
    v318 = (unint64_t *)&v335->__shared_owners_;
    do
      v319 = __ldaxr(v318);
    while (__stlxr(v319 - 1, v318));
    if (!v319)
    {
      ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
      std::__shared_weak_count::__release_weak(v317);
    }
  }
  v320 = v464;
  v464 = 0;
  if (v320)
    (*(void (**)(void *))(*(_QWORD *)v320 + 8))(v320);
  v321 = *a3;
  v330 = v478;
  if (v478)
  {
    v322 = (std::__shared_weak_count *)operator new();
    v323 = v478;
    v322->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v322->__shared_owners_ = 0;
    v322->__shared_weak_owners_ = 0;
    v322[1].__vftable = (std::__shared_weak_count_vtbl *)v323;
  }
  else
  {
    v322 = 0;
  }
  v331 = v322;
  v478 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v321 + 56))(v321, &v330);
  v324 = v331;
  if (v331)
  {
    v325 = (unint64_t *)&v331->__shared_owners_;
    do
      v326 = __ldaxr(v325);
    while (__stlxr(v326 - 1, v325));
    if (!v326)
    {
      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
      std::__shared_weak_count::__release_weak(v324);
    }
  }
  v327 = v478;
  v478 = 0;
  if (v327)
    (*((void (**)(void **))*v327 + 1))(v327);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v430, 0);
  result = (uint64_t)v463;
  if (v463)
  {
    v329 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v463);
    return MEMORY[0x1E0C023A0](v329, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A424B8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 152);
  *(_QWORD *)(v2 - 152) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x438], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x580], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::SlidingWindows::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void **v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  char **v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  char *v96;
  char *v97;
  char *v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  char **v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  void **v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  char *v129;
  void **v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  void **v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void **v143;
  void **v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  void **v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  void **v157;
  uint64_t result;
  uint64_t v159;
  void **v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  char *v166;
  std::__shared_weak_count *v167;
  void **v168;
  std::__shared_weak_count *v169;
  void *v170[2];
  char v171;
  char *v172;
  std::__shared_weak_count *v173;
  void *v174[2];
  char v175;
  void *v176[2];
  char v177;
  char *v178;
  std::__shared_weak_count *v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  void *v184;
  void *v185;
  _QWORD *v186;
  __n128 v187;
  uint64_t v188;
  __int128 v189;
  char **v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  void *__p;
  void *v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  void *v200;
  void *v201;
  _QWORD *v202;
  void *v203;
  void *v204;
  _QWORD *v205;
  void *v206;
  void *v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  _QWORD *v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  void *v215;
  void *v216;
  _QWORD *v217;
  void *v218;
  void *v219;
  _QWORD *v220;
  __n128 v221;
  _QWORD *v222;
  _QWORD v223[3];
  _QWORD *v224;
  _BYTE v225[24];
  _BYTE *v226;
  _QWORD v227[3];
  _QWORD *v228;
  void **v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *Scalar;
  char *v240;
  char *v241;
  char *v242;
  char **v243;
  uint64_t v244;

  v244 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v222 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v240 = v9 + 16;
  v241 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = v9;
  v229 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v220 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v218 = v12;
  v219 = v12 + 2;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v218);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v217 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v215 = v15;
  v216 = v15 + 2;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v215);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v214 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v212 = v18;
  v213 = v18 + 2;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v212);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v211 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v209 = v21;
  v210 = v21 + 2;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v209);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v207 = v24 + 2;
  v208 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v206 = v24;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v206);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v204 = v27 + 2;
  v205 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v203 = v27;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v203);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v201 = v30 + 2;
  v202 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v200 = v30;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v200);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v198 = v33 + 2;
  v199 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  v197 = v33;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v197);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(0x10uLL);
  v195 = v36 + 2;
  v196 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  __p = v36;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v229, 10, &v221);
  MIL::IRParameter::Make(&v221, (uint64_t *)&v184);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v184);
  v37 = v184;
  v184 = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v221.n128_u64[1];
  if (v221.n128_u64[1])
  {
    v39 = (unint64_t *)(v221.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (Scalar)
  {
    v240 = Scalar;
    operator delete(Scalar);
  }
  v41 = v222;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v229);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v41, "axis", (uint64_t *)&v229);
  v43 = v229;
  v229 = 0;
  if (v43)
    (*((void (**)(void **))*v43 + 1))(v43);
  v44 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v45 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  v47 = v222;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v192);
  MIL::IRParameter::Make(&v192, (uint64_t *)&v229);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v47, "size", (uint64_t *)&v229);
  v49 = v229;
  v229 = 0;
  if (v49)
    (*((void (**)(void **))*v49 + 1))(v49);
  v50 = (std::__shared_weak_count *)v192.n128_u64[1];
  if (v192.n128_u64[1])
  {
    v51 = (unint64_t *)(v192.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v53 = v222;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v191);
  MIL::IRParameter::Make(&v191, (uint64_t *)&v229);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v53, "stride", (uint64_t *)&v229);
  v55 = v229;
  v229 = 0;
  if (v55)
    (*((void (**)(void **))*v55 + 1))(v55);
  v56 = (std::__shared_weak_count *)v191.n128_u64[1];
  if (v191.n128_u64[1])
  {
    v57 = (unint64_t *)(v191.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  v190 = 0;
  v59 = operator new();
  *(_QWORD *)v59 = 0;
  *(_QWORD *)(v59 + 8) = 0;
  *(_QWORD *)(v59 + 16) = 0;
  v229 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, (void **)v59);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v229, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v190, 1uLL);
  v60 = v190;
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v218 = v62;
  *v62 = v61;
  v220 = v62 + 1;
  v219 = v62 + 1;
  v229 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v218);
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v215 = v64;
  *v64 = v63;
  v217 = v64 + 1;
  v216 = v64 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v215);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v212 = v66;
  *v66 = v65;
  v214 = v66 + 1;
  v213 = v66 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v212);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v209 = v68;
  *v68 = v67;
  v211 = v68 + 1;
  v210 = v68 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v209);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v206 = v70;
  *v70 = v69;
  v207 = v70 + 1;
  v208 = v70 + 1;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v206);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v203 = v72;
  *v72 = v71;
  v204 = v72 + 1;
  v205 = v72 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v203);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v200 = v74;
  *v74 = v73;
  v201 = v74 + 1;
  v202 = v74 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v200);
  v75 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v76 = operator new(8uLL);
  v197 = v76;
  *v76 = v75;
  v198 = v76 + 1;
  v199 = v76 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v197);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(8uLL);
  __p = v78;
  *v78 = v77;
  v195 = v78 + 1;
  v196 = v78 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(8uLL);
  v184 = v80;
  *v80 = v79;
  v185 = v80 + 1;
  v186 = v80 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v184);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v229, 10, &v187);
  MIL::IRParameter::Make(&v187, &v188);
  *(_QWORD *)&v189 = v188;
  if (v188)
  {
    v81 = (_QWORD *)operator new();
    v82 = v188;
    *v81 = &unk_1EA99F888;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v82;
  }
  else
  {
    v81 = 0;
  }
  *((_QWORD *)&v189 + 1) = v81;
  v188 = 0;
  v83 = v60[2];
  v84 = v60[1];
  if (v84 >= v83)
  {
    v85 = (v84 - *v60) >> 4;
    v86 = v85 + 1;
    if ((unint64_t)(v85 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v87 = v83 - *v60;
    if (v87 >> 3 > v86)
      v86 = v87 >> 3;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
      v88 = 0xFFFFFFFFFFFFFFFLL;
    else
      v88 = v86;
    v243 = v60 + 2;
    v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v60 + 2), v88);
    v91 = &v89[16 * v85];
    *(_OWORD *)v91 = v189;
    v189 = 0uLL;
    v93 = *v60;
    v92 = v60[1];
    if (v92 == *v60)
    {
      v96 = v60[1];
      v94 = &v89[16 * v85];
    }
    else
    {
      v94 = &v89[16 * v85];
      do
      {
        v95 = *((_OWORD *)v92 - 1);
        v92 -= 16;
        *((_OWORD *)v94 - 1) = v95;
        v94 -= 16;
        *(_QWORD *)v92 = 0;
        *((_QWORD *)v92 + 1) = 0;
      }
      while (v92 != v93);
      v96 = *v60;
      v92 = v60[1];
    }
    v97 = v91 + 16;
    *v60 = v94;
    Scalar = v96;
    v240 = v96;
    v60[1] = v91 + 16;
    v241 = v92;
    v98 = v60[2];
    v60[2] = &v89[16 * v90];
    v242 = v98;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
    v99 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
    v60[1] = v97;
    if (v99)
    {
      p_shared_owners = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldaxr(p_shared_owners);
      while (__stlxr(v101 - 1, p_shared_owners));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
  }
  else
  {
    *(_QWORD *)v84 = v189;
    *((_QWORD *)v84 + 1) = v81;
    v189 = 0uLL;
    v60[1] = v84 + 16;
  }
  v102 = v188;
  v188 = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  v103 = (std::__shared_weak_count *)v187.n128_u64[1];
  if (v187.n128_u64[1])
  {
    v104 = (unint64_t *)(v187.n128_u64[1] + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  v182 = *(_OWORD *)a2;
  v183 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v106 = (uint64_t)v222;
  *(_QWORD *)&v181 = v222;
  if (v222)
  {
    v107 = (_QWORD *)operator new();
    *v107 = &unk_1EA99F8E8;
    v107[1] = 0;
    v107[2] = 0;
    v107[3] = v106;
  }
  else
  {
    v107 = 0;
  }
  *((_QWORD *)&v181 + 1) = v107;
  v222 = 0;
  *(_QWORD *)&v180 = v190;
  if (v190)
  {
    v108 = (_QWORD *)operator new();
    v109 = v190;
    *v108 = &unk_1EA99F948;
    v108[1] = 0;
    v108[2] = 0;
    v108[3] = v109;
  }
  else
  {
    v108 = 0;
  }
  *((_QWORD *)&v180 + 1) = v108;
  v190 = 0;
  v227[0] = &unk_1EA99FAC8;
  v227[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateSlidingWindows;
  v228 = v227;
  v226 = 0;
  MIL::IROperator::Make(&v182, &v181, &v180, (uint64_t)v227, (uint64_t)v225, a3);
  v110 = v226;
  if (v226 == v225)
  {
    v111 = 4;
    v110 = v225;
  }
  else
  {
    if (!v226)
      goto LABEL_108;
    v111 = 5;
  }
  (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_108:
  v112 = v228;
  if (v228 == v227)
  {
    v113 = 4;
    v112 = v227;
    goto LABEL_112;
  }
  if (v228)
  {
    v113 = 5;
LABEL_112:
    (*(void (**)(void))(*v112 + 8 * v113))();
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
  if (*((_QWORD *)&v180 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  if (*((_QWORD *)&v181 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (SHIBYTE(v183) < 0)
    operator delete((void *)v182);
  v120 = *a3;
  v223[0] = &off_1EA99FBD8;
  v223[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceSlidingWindows;
  v224 = v223;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v120 + 200))(v120, v223);
  v121 = v224;
  if (v224 == v223)
  {
    v122 = 4;
    v121 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_130;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_130:
  MIL::Validation::TensorDTypeConstraints::Make(&v229);
  v123 = v229;
  std::string::basic_string[abi:ne180100]<0>(v176, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v176, 0, (uint64_t *)&Scalar);
  v178 = Scalar;
  if (Scalar)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = (std::__shared_weak_count_vtbl *)Scalar;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v179 = v124;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v174, "T");
  (*((void (**)(void **, char **, void **))*v123 + 3))(v123, &v178, v174);
  if (v175 < 0)
    operator delete(v174[0]);
  v126 = v179;
  if (v179)
  {
    v127 = (unint64_t *)&v179->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = Scalar;
  Scalar = 0;
  if (v129)
    (*(void (**)(char *))(*(_QWORD *)v129 + 8))(v129);
  if (v177 < 0)
    operator delete(v176[0]);
  v130 = v229;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v172 = Scalar;
  if (Scalar)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = (std::__shared_weak_count_vtbl *)Scalar;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v173 = v131;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v170, "T");
  (*((void (**)(void **, char **, void **))*v130 + 3))(v130, &v172, v170);
  if (v171 < 0)
    operator delete(v170[0]);
  v133 = v173;
  if (v173)
  {
    v134 = (unint64_t *)&v173->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = Scalar;
  Scalar = 0;
  if (v136)
    (*(void (**)(char *))(*(_QWORD *)v136 + 8))(v136);
  v137 = *a3;
  v168 = v229;
  if (v229)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = v229;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = (std::__shared_weak_count_vtbl *)v139;
  }
  else
  {
    v138 = 0;
  }
  v169 = v138;
  v229 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v137 + 56))(v137, &v168);
  v140 = v169;
  if (v169)
  {
    v141 = (unint64_t *)&v169->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v229;
  v229 = 0;
  if (v143)
    (*((void (**)(void **))*v143 + 1))(v143);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v229);
  v144 = v229;
  std::string::basic_string[abi:ne180100]<0>(v164, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&Scalar);
  v166 = Scalar;
  if (Scalar)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = (std::__shared_weak_count_vtbl *)Scalar;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v167 = v145;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v144 + 3))(v144, &v166, 0, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v147 = v167;
  if (v167)
  {
    v148 = (unint64_t *)&v167->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = Scalar;
  Scalar = 0;
  if (v150)
    (*(void (**)(char *))(*(_QWORD *)v150 + 8))(v150);
  if (v165 < 0)
    operator delete(v164[0]);
  v151 = *a3;
  v160 = v229;
  if (v229)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = v229;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = (std::__shared_weak_count_vtbl *)v153;
  }
  else
  {
    v152 = 0;
  }
  v161 = v152;
  v229 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v151 + 56))(v151, &v160);
  v154 = v161;
  if (v161)
  {
    v155 = (unint64_t *)&v161->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = v229;
  v229 = 0;
  if (v157)
    (*((void (**)(void **))*v157 + 1))(v157);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, 0);
  result = (uint64_t)v222;
  if (v222)
  {
    v159 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v222);
    return MEMORY[0x1E0C023A0](v159, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A44368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void **a52)
{
  uint64_t *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;

  v55 = *(_QWORD *)(v53 - 192);
  *(_QWORD *)(v53 - 192) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *v52;
  *v52 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x278], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::Split::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void **v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  void **v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count_vtbl *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  uint64_t result;
  uint64_t v71;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  void **v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void *v84[2];
  uint64_t v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  void *__p;
  void *v90;
  _QWORD *v91;
  void *v92;
  void *v93;
  _QWORD *v94;
  __n128 v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD v98[3];
  _QWORD *v99;
  _BYTE v100[24];
  _BYTE *v101;
  _QWORD v102[3];
  _QWORD *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count_vtbl *v105;
  void (__cdecl **v106)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v108;
  void (__cdecl **v109)(std::__shared_weak_count *__hidden);
  void **v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v97 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v108 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v109 = &v8->~__shared_weak_count_0;
  v110 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v104 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v105 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v106 = &v10->~__shared_weak_count_0;
  v111 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v104);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v92 = v12;
  *v12 = v11;
  v93 = v12 + 1;
  v94 = v12 + 1;
  v112 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v92);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v90 = v14 + 1;
  v91 = v14 + 1;
  v113 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v110, 4, &v95);
  MIL::IRParameter::Make(&v95, &v96);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v96);
  v15 = v96;
  v96 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v95.n128_u64[1];
  if (v95.n128_u64[1])
  {
    v17 = (unint64_t *)(v95.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v90 = __p;
    operator delete(__p);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  if (Scalar)
  {
    v108 = Scalar;
    operator delete(Scalar);
  }
  v19 = v97;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v88);
  MIL::IRParameter::Make(&v88, (uint64_t *)&v110);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "axis", (uint64_t *)&v110);
  v21 = v110;
  v110 = 0;
  if (v21)
    (*((void (**)(void **))*v21 + 1))(v21);
  v22 = (std::__shared_weak_count *)v88.n128_u64[1];
  if (v88.n128_u64[1])
  {
    v23 = (unint64_t *)(v88.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v97;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v87);
  MIL::IRParameter::Make(&v87, (uint64_t *)&v110);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v25, "num_splits", (uint64_t *)&v110);
  v27 = v110;
  v110 = 0;
  if (v27)
    (*((void (**)(void **))*v27 + 1))(v27);
  v28 = (std::__shared_weak_count *)v87.n128_u64[1];
  if (v87.n128_u64[1])
  {
    v29 = (unint64_t *)(v87.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v31 = v97;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (void **)operator new(8uLL);
  v110 = v33;
  *v33 = (void *)v32;
  v111 = v33 + 1;
  v112 = (uint64_t)(v33 + 1);
  v104 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v110);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v104, 1, &v86);
  MIL::IRParameter::Make(&v86, (uint64_t *)&Scalar);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v31, "split_sizes", (uint64_t *)&Scalar);
  v35 = Scalar;
  Scalar = 0;
  if (v35)
    (*((void (**)(std::__shared_weak_count_vtbl *))v35->~__shared_weak_count + 1))(v35);
  v36 = (std::__shared_weak_count *)v86.n128_u64[1];
  if (v86.n128_u64[1])
  {
    v37 = (unint64_t *)(v86.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 48))(*((_QWORD *)v34 + 5), 1);
  v110 = 0;
  *(_OWORD *)v84 = *(_OWORD *)a2;
  v85 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v39 = (uint64_t)v97;
  v82 = (uint64_t)v97;
  if (v97)
  {
    v40 = (std::__shared_weak_count *)operator new();
    v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v40->__shared_owners_ = 0;
    v40->__shared_weak_owners_ = 0;
    v40[1].__vftable = (std::__shared_weak_count_vtbl *)v39;
    v83 = v40;
    v97 = 0;
    v80 = v110;
    if (v110)
    {
      v41 = (std::__shared_weak_count *)operator new();
      v42 = v110;
      v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F948;
      v41->__shared_owners_ = 0;
      v41->__shared_weak_owners_ = 0;
      v41[1].__vftable = (std::__shared_weak_count_vtbl *)v42;
    }
    else
    {
      v41 = 0;
    }
  }
  else
  {
    v41 = 0;
    v83 = 0;
    v97 = 0;
    v80 = 0;
  }
  v81 = v41;
  v110 = 0;
  v102[0] = &unk_1EA99FAC8;
  v102[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateSplit;
  v103 = v102;
  v101 = 0;
  MIL::IROperator::Make((__int128 *)v84, 2, 4, 2, -1, (uint64_t)&v82, (uint64_t)&v80, (uint64_t)v102, a3, (uint64_t)v100);
  v43 = v101;
  if (v101 == v100)
  {
    v44 = 4;
    v43 = v100;
  }
  else
  {
    if (!v101)
      goto LABEL_49;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_49:
  v45 = v103;
  if (v103 == v102)
  {
    v46 = 4;
    v45 = v102;
    goto LABEL_53;
  }
  if (v103)
  {
    v46 = 5;
LABEL_53:
    (*(void (**)(void))(*v45 + 8 * v46))();
  }
  v47 = v81;
  if (v81)
  {
    p_shared_owners = (unint64_t *)&v81->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v83;
  if (v83)
  {
    v51 = (unint64_t *)&v83->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (SHIBYTE(v85) < 0)
    operator delete(v84[0]);
  v53 = *a3;
  v98[0] = &off_1EA99FBD8;
  v98[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceSplit;
  v99 = v98;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v53 + 200))(v53, v98);
  v54 = v99;
  if (v99 == v98)
  {
    v55 = 4;
    v54 = v98;
  }
  else
  {
    if (!v99)
      goto LABEL_71;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_71:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v56 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v76, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v76, 0, (uint64_t *)&v104);
  v78 = v104;
  if (v104)
  {
    v57 = (std::__shared_weak_count *)operator new();
    v58 = v104;
    v57->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v57->__shared_owners_ = 0;
    v57->__shared_weak_owners_ = 0;
    v57[1].__vftable = v58;
  }
  else
  {
    v57 = 0;
  }
  v79 = v57;
  v104 = 0;
  std::string::basic_string[abi:ne180100]<0>(v74, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, std::__shared_weak_count_vtbl **, void **))v56->~__shared_weak_count
   + 3))(v56, &v78, v74);
  if (v75 < 0)
    operator delete(v74[0]);
  v59 = v79;
  if (v79)
  {
    v60 = (unint64_t *)&v79->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v104;
  v104 = 0;
  if (v62)
    (*((void (**)(std::__shared_weak_count_vtbl *))v62->~__shared_weak_count + 1))(v62);
  if (v77 < 0)
    operator delete(v76[0]);
  v63 = *a3;
  v72 = Scalar;
  if (Scalar)
  {
    v64 = (std::__shared_weak_count *)operator new();
    v65 = Scalar;
    v64->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v64->__shared_owners_ = 0;
    v64->__shared_weak_owners_ = 0;
    v64[1].__vftable = v65;
  }
  else
  {
    v64 = 0;
  }
  v73 = v64;
  Scalar = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v63 + 56))(v63, &v72);
  v66 = v73;
  if (v73)
  {
    v67 = (unint64_t *)&v73->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = Scalar;
  Scalar = 0;
  if (v69)
    (*((void (**)(std::__shared_weak_count_vtbl *))v69->~__shared_weak_count + 1))(v69);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v110, 0);
  result = (uint64_t)v97;
  if (v97)
  {
    v71 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v97);
    return MEMORY[0x1E0C023A0](v71, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A45218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (a36 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v49 - 88), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v49 - 240), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::Squeeze::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void **v43;
  unsigned __int8 *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  char *v86;
  char *v87;
  char *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  char **v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void **v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void **v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void **v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void **v154;
  uint64_t result;
  uint64_t v156;
  void **v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  void *v161[2];
  char v162;
  void *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  void *v169;
  std::__shared_weak_count *v170;
  void **v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  void *v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  void *v179[2];
  char v180;
  void *v181;
  std::__shared_weak_count *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  __n128 v190;
  uint64_t v191;
  __int128 v192;
  char **v193;
  __n128 v194;
  void *__p;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  void *v204;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  void *v210;
  void *v211;
  _QWORD *v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  void *v216;
  void *v217;
  _QWORD *v218;
  __n128 v219;
  _QWORD *v220;
  void *v221;
  void *v222;
  char *v223;
  char *v224;
  char **v225;
  _QWORD v226[3];
  _QWORD *v227;
  _BYTE v228[24];
  _BYTE *v229;
  _QWORD v230[3];
  _QWORD *v231;
  void *v232;
  void *v233;
  _QWORD *v234;
  void **v235;
  void **v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;

  v245 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v220 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v223 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v221 = v9;
  v222 = v9 + 16;
  v235 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v221);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v233 = v12 + 2;
  v234 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v232 = v12;
  v236 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v232);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v218 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v216 = v15;
  v217 = v15 + 2;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v216);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v215 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v213 = v18;
  v214 = v18 + 2;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v213);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v212 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v210 = v21;
  v211 = v21 + 2;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v210);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v209 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v207 = v24;
  v208 = v24 + 2;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v207);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v206 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v204 = v27;
  v205 = v27 + 2;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v204);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v202 = v30 + 2;
  v203 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v201 = v30;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v201);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v199 = v33 + 2;
  v200 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  v198 = v33;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v198);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(0x10uLL);
  v196 = v36 + 2;
  v197 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  __p = v36;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v235, 10, &v219);
  MIL::IRParameter::Make(&v219, (uint64_t *)&v187);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v187);
  v37 = v187;
  v187 = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v219.n128_u64[1];
  if (v219.n128_u64[1])
  {
    v39 = (unint64_t *)(v219.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v196 = __p;
    operator delete(__p);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (v221)
  {
    v222 = v221;
    operator delete(v221);
  }
  v41 = v220;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (void **)operator new(8uLL);
  v235 = v43;
  *v43 = (void *)v42;
  v236 = v43 + 1;
  v237 = (uint64_t)(v43 + 1);
  v232 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v235);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v232, 1, &v194);
  MIL::IRParameter::Make(&v194, (uint64_t *)&v221);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v41, "axes", (uint64_t *)&v221);
  v45 = v221;
  v221 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v194.n128_u64[1];
  if (v194.n128_u64[1])
  {
    v47 = (unint64_t *)(v194.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v235)
  {
    v236 = v235;
    operator delete(v235);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v193 = 0;
  v49 = operator new();
  *(_QWORD *)v49 = 0;
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = 0;
  v235 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v193, (void **)v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v235, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v193, 1uLL);
  v50 = v193;
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v232 = v52;
  *v52 = v51;
  v233 = v52 + 1;
  v234 = v52 + 1;
  v235 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v232);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v216 = v54;
  *v54 = v53;
  v218 = v54 + 1;
  v217 = v54 + 1;
  v236 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v216);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v213 = v56;
  *v56 = v55;
  v215 = v56 + 1;
  v214 = v56 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v213);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v210 = v58;
  *v58 = v57;
  v212 = v58 + 1;
  v211 = v58 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v210);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v207 = v60;
  *v60 = v59;
  v209 = v60 + 1;
  v208 = v60 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v207);
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v204 = v62;
  *v62 = v61;
  v206 = v62 + 1;
  v205 = v62 + 1;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v204);
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v201 = v64;
  *v64 = v63;
  v202 = v64 + 1;
  v203 = v64 + 1;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v201);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v198 = v66;
  *v66 = v65;
  v199 = v66 + 1;
  v200 = v66 + 1;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v198);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  __p = v68;
  *v68 = v67;
  v196 = v68 + 1;
  v197 = v68 + 1;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v187 = v70;
  *v70 = v69;
  v188 = v70 + 1;
  v189 = v70 + 1;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v187);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v235, 10, &v190);
  MIL::IRParameter::Make(&v190, &v191);
  *(_QWORD *)&v192 = v191;
  if (v191)
  {
    v71 = (_QWORD *)operator new();
    v72 = v191;
    *v71 = &unk_1EA99F888;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v192 + 1) = v71;
  v191 = 0;
  v73 = v50[2];
  v74 = v50[1];
  if (v74 >= v73)
  {
    v75 = (v74 - *v50) >> 4;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v77 = v73 - *v50;
    if (v77 >> 3 > v76)
      v76 = v77 >> 3;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
      v78 = 0xFFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    v225 = v50 + 2;
    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v50 + 2), v78);
    v81 = &v79[16 * v75];
    *(_OWORD *)v81 = v192;
    v192 = 0uLL;
    v83 = *v50;
    v82 = v50[1];
    if (v82 == *v50)
    {
      v86 = v50[1];
      v84 = &v79[16 * v75];
    }
    else
    {
      v84 = &v79[16 * v75];
      do
      {
        v85 = *((_OWORD *)v82 - 1);
        v82 -= 16;
        *((_OWORD *)v84 - 1) = v85;
        v84 -= 16;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = 0;
      }
      while (v82 != v83);
      v86 = *v50;
      v82 = v50[1];
    }
    v87 = v81 + 16;
    *v50 = v84;
    v222 = v86;
    v50[1] = v81 + 16;
    v223 = v82;
    v88 = v50[2];
    v50[2] = &v79[16 * v80];
    v224 = v88;
    v221 = v86;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v221);
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
    v50[1] = v87;
    if (v89)
    {
      p_shared_owners = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(p_shared_owners);
      while (__stlxr(v91 - 1, p_shared_owners));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
  }
  else
  {
    *(_QWORD *)v74 = v192;
    *((_QWORD *)v74 + 1) = v71;
    v192 = 0uLL;
    v50[1] = v74 + 16;
  }
  v92 = v191;
  v191 = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  v93 = (std::__shared_weak_count *)v190.n128_u64[1];
  if (v190.n128_u64[1])
  {
    v94 = (unint64_t *)(v190.n128_u64[1] + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (__p)
  {
    v196 = __p;
    operator delete(__p);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  v185 = *(_OWORD *)a2;
  v186 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v96 = (uint64_t)v220;
  *(_QWORD *)&v184 = v220;
  if (v220)
  {
    v97 = (_QWORD *)operator new();
    *v97 = &unk_1EA99F8E8;
    v97[1] = 0;
    v97[2] = 0;
    v97[3] = v96;
  }
  else
  {
    v97 = 0;
  }
  *((_QWORD *)&v184 + 1) = v97;
  v220 = 0;
  *(_QWORD *)&v183 = v193;
  if (v193)
  {
    v98 = (_QWORD *)operator new();
    v99 = v193;
    *v98 = &unk_1EA99F948;
    v98[1] = 0;
    v98[2] = 0;
    v98[3] = v99;
  }
  else
  {
    v98 = 0;
  }
  *((_QWORD *)&v183 + 1) = v98;
  v193 = 0;
  v230[0] = &unk_1EA99FAC8;
  v230[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateSqueeze;
  v231 = v230;
  v229 = 0;
  MIL::IROperator::Make(&v185, &v184, &v183, (uint64_t)v230, (uint64_t)v228, a3);
  v100 = v229;
  if (v229 == v228)
  {
    v101 = 4;
    v100 = v228;
  }
  else
  {
    if (!v229)
      goto LABEL_96;
    v101 = 5;
  }
  (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_96:
  v102 = v231;
  if (v231 == v230)
  {
    v103 = 4;
    v102 = v230;
    goto LABEL_100;
  }
  if (v231)
  {
    v103 = 5;
LABEL_100:
    (*(void (**)(void))(*v102 + 8 * v103))();
  }
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
  if (*((_QWORD *)&v183 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  if (SHIBYTE(v186) < 0)
    operator delete((void *)v185);
  v110 = *a3;
  v226[0] = &off_1EA99FBD8;
  v226[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceSqueeze;
  v227 = v226;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v110 + 200))(v110, v226);
  v111 = v227;
  if (v227 == v226)
  {
    v112 = 4;
    v111 = v226;
  }
  else
  {
    if (!v227)
      goto LABEL_118;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_118:
  MIL::Validation::TensorDTypeConstraints::Make(&v235);
  v113 = v235;
  std::string::basic_string[abi:ne180100]<0>(v179, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v179, 0, (uint64_t *)&v221);
  v181 = v221;
  if (v221)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v221;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v182 = v114;
  v221 = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "T");
  (*((void (**)(void **, void **, void **))*v113 + 3))(v113, &v181, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v116 = v182;
  if (v182)
  {
    v117 = (unint64_t *)&v182->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v221;
  v221 = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  if (v180 < 0)
    operator delete(v179[0]);
  v120 = v235;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v221);
  v175 = v221;
  if (v221)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v221;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v176 = v121;
  v221 = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "T");
  (*((void (**)(void **, void **, void **))*v120 + 3))(v120, &v175, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v123 = v176;
  if (v176)
  {
    v124 = (unint64_t *)&v176->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v221;
  v221 = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  v127 = *a3;
  v171 = v235;
  if (v235)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = v235;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = (std::__shared_weak_count_vtbl *)v129;
  }
  else
  {
    v128 = 0;
  }
  v172 = v128;
  v235 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v127 + 56))(v127, &v171);
  v130 = v172;
  if (v172)
  {
    v131 = (unint64_t *)&v172->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v235;
  v235 = 0;
  if (v133)
    (*((void (**)(void **))*v133 + 1))(v133);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v235);
  v134 = v235;
  std::string::basic_string[abi:ne180100]<0>(v167, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&v221);
  v169 = v221;
  if (v221)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)v221;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v170 = v135;
  v221 = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v134 + 3))(v134, &v169, 0, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v137 = v170;
  if (v170)
  {
    v138 = (unint64_t *)&v170->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v221;
  v221 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v168 < 0)
    operator delete(v167[0]);
  v141 = v235;
  std::string::basic_string[abi:ne180100]<0>(v161, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v161, 1, (uint64_t *)&v221);
  v163 = v221;
  if (v221)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)v221;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v164 = v142;
  v221 = 0;
  std::string::basic_string[abi:ne180100]<0>(v159, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v141 + 3))(v141, &v163, 0, v159);
  if (v160 < 0)
    operator delete(v159[0]);
  v144 = v164;
  if (v164)
  {
    v145 = (unint64_t *)&v164->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v221;
  v221 = 0;
  if (v147)
    (*(void (**)(void *))(*(_QWORD *)v147 + 8))(v147);
  if (v162 < 0)
    operator delete(v161[0]);
  v148 = *a3;
  v157 = v235;
  if (v235)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = v235;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = (std::__shared_weak_count_vtbl *)v150;
  }
  else
  {
    v149 = 0;
  }
  v158 = v149;
  v235 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v148 + 56))(v148, &v157);
  v151 = v158;
  if (v158)
  {
    v152 = (unint64_t *)&v158->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = v235;
  v235 = 0;
  if (v154)
    (*((void (**)(void **))*v154 + 1))(v154);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v193, 0);
  result = (uint64_t)v220;
  if (v220)
  {
    v156 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v220);
    return MEMORY[0x1E0C023A0](v156, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A467B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 152);
  *(_QWORD *)(v61 - 152) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::Stack::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  void **v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void **v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void **v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void **v96;
  uint64_t result;
  uint64_t v98;
  void **v99;
  std::__shared_weak_count *v100;
  void *v101[2];
  char v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  void *v105[2];
  char v106;
  void *v107[2];
  char v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  __int128 v111;
  __int128 v112;
  void *v113[2];
  uint64_t v114;
  void *v115;
  void *v116;
  _QWORD *v117;
  __n128 v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char **v122;
  __n128 v123;
  void *__p;
  void *v125;
  _QWORD *v126;
  void *v127;
  void *v128;
  _QWORD *v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  __n128 v133;
  _QWORD *v134;
  _QWORD v135[3];
  _QWORD *v136;
  _BYTE v137[24];
  _BYTE *v138;
  _QWORD v139[3];
  _QWORD *v140;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void **v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char **v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v134 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v142 = (uint64_t)&v8->~__shared_weak_count_0;
  v143 = (uint64_t)&v8->~__shared_weak_count_0;
  v145 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v130 = v10;
  *v10 = v9;
  v131 = v10 + 1;
  v132 = v10 + 1;
  v146 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v130);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v127 = v12;
  *v12 = v11;
  v128 = v12 + 1;
  v129 = v12 + 1;
  v147 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v127);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v125 = v14 + 1;
  v126 = v14 + 1;
  v148 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v145, 4, &v133);
  MIL::IRParameter::Make(&v133, (uint64_t *)&v115);
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "values", (uint64_t *)&v115);
  v16 = v115;
  v115 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v133.n128_u64[1];
  if (v133.n128_u64[1])
  {
    v18 = (unint64_t *)(v133.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v125 = __p;
    operator delete(__p);
  }
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  if (Scalar)
  {
    v142 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v15 + 5) + 64))(*((_QWORD *)v15 + 5), 1);
  v20 = v134;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v123);
  MIL::IRParameter::Make(&v123, (uint64_t *)&v145);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v20, "axis", (uint64_t *)&v145);
  v22 = v145;
  v145 = 0;
  if (v22)
    (*((void (**)(void **))*v22 + 1))(v22);
  v23 = (std::__shared_weak_count *)v123.n128_u64[1];
  if (v123.n128_u64[1])
  {
    v24 = (unint64_t *)(v123.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 32))(*((_QWORD *)v21 + 5), 1);
  v122 = 0;
  v26 = operator new();
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v145 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v122, (void **)v26);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v145, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v122, 1uLL);
  v27 = v122;
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v130 = v29;
  *v29 = v28;
  v131 = v29 + 1;
  v132 = v29 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v130);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v127 = v31;
  *v31 = v30;
  v128 = v31 + 1;
  v129 = v31 + 1;
  v142 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v127);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v125 = v33 + 1;
  v126 = v33 + 1;
  v143 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v115 = v35;
  *v35 = v34;
  v116 = v35 + 1;
  v117 = v35 + 1;
  v144 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v115);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v118);
  MIL::IRParameter::Make(&v118, &v119);
  v36 = v119;
  v120 = v119;
  if (v119)
  {
    v37 = (_QWORD *)operator new();
    v38 = v119;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v121 = v37;
  v119 = 0;
  v39 = v27[2];
  v40 = v27[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v27) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v27;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v149 = v27 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v27 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v120 = 0;
    v121 = 0;
    v50 = *v27;
    v49 = v27[1];
    if (v49 == *v27)
    {
      v53 = (void **)v27[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = (void **)*v27;
      v49 = v27[1];
    }
    v41 = (char *)(v48 + 2);
    *v27 = v51;
    v145 = v53;
    v146 = (uint64_t)v53;
    v27[1] = (char *)(v48 + 2);
    v147 = (uint64_t)v49;
    v54 = v27[2];
    v27[2] = &v46[16 * v47];
    v148 = (uint64_t)v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v145);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v120 = 0;
    v121 = 0;
  }
  v27[1] = v41;
  v55 = v119;
  v119 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v118.n128_u64[1];
  if (v118.n128_u64[1])
  {
    v57 = (unint64_t *)(v118.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
  if (__p)
  {
    v125 = __p;
    operator delete(__p);
  }
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  *(_OWORD *)v113 = *(_OWORD *)a2;
  v114 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v134;
  *(_QWORD *)&v112 = v134;
  if (v134)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v112 + 1) = v60;
  v134 = 0;
  *(_QWORD *)&v111 = v122;
  if (v122)
  {
    v61 = (_QWORD *)operator new();
    v62 = v122;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v111 + 1) = v61;
  v122 = 0;
  v139[0] = &unk_1EA99FAC8;
  v139[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateStack;
  v140 = v139;
  v138 = 0;
  MIL::IROperator::Make((__int128 *)v113, &v112, &v111, (uint64_t)v139, (uint64_t)v137, a3);
  v63 = v138;
  if (v138 == v137)
  {
    v64 = 4;
    v63 = v137;
  }
  else
  {
    if (!v138)
      goto LABEL_66;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_66:
  v65 = v140;
  if (v140 == v139)
  {
    v66 = 4;
    v65 = v139;
    goto LABEL_70;
  }
  if (v140)
  {
    v66 = 5;
LABEL_70:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
  if (*((_QWORD *)&v111 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v114) < 0)
    operator delete(v113[0]);
  v73 = *a3;
  v135[0] = &off_1EA99FBD8;
  v135[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceStack;
  v136 = v135;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v135);
  v74 = v136;
  if (v136 == v135)
  {
    v75 = 4;
    v74 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_88;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_88:
  MIL::Validation::TensorDTypeConstraints::Make(&v145);
  v76 = v145;
  std::string::basic_string[abi:ne180100]<0>(v107, "values");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v107, 0, (uint64_t *)&Scalar);
  v109 = Scalar;
  if (Scalar)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = Scalar;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v110 = v77;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v105, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v76 + 3))(v76, &v109, v105);
  if (v106 < 0)
    operator delete(v105[0]);
  v79 = v110;
  if (v110)
  {
    p_shared_owners = (unint64_t *)&v110->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = Scalar;
  Scalar = 0;
  if (v82)
    (*((void (**)(std::__shared_weak_count_vtbl *))v82->~__shared_weak_count + 1))(v82);
  if (v108 < 0)
    operator delete(v107[0]);
  v83 = v145;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v103 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v104 = v84;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v101, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v103, v101);
  if (v102 < 0)
    operator delete(v101[0]);
  v86 = v104;
  if (v104)
  {
    v87 = (unint64_t *)&v104->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  v90 = *a3;
  v99 = v145;
  if (v145)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v145;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v100 = v91;
  v145 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v90 + 56))(v90, &v99);
  v93 = v100;
  if (v100)
  {
    v94 = (unint64_t *)&v100->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v145;
  v145 = 0;
  if (v96)
    (*((void (**)(void **))*v96 + 1))(v96);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v122, 0);
  result = (uint64_t)v134;
  if (v134)
  {
    v98 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v134);
    return MEMORY[0x1E0C023A0](v98, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A478AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40)
{
  uint64_t *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;

  v43 = *(_QWORD *)(v41 - 112);
  *(_QWORD *)(v41 - 112) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *v40;
  *v40 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v41 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::Transpose::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void **v43;
  unsigned __int8 *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  char *v86;
  char *v87;
  char *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  char **v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void **v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void **v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void **v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void **v154;
  uint64_t result;
  uint64_t v156;
  void **v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  void *v161[2];
  char v162;
  void *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  void *v169;
  std::__shared_weak_count *v170;
  void **v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  void *v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  void *v179[2];
  char v180;
  void *v181;
  std::__shared_weak_count *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  __n128 v190;
  uint64_t v191;
  __int128 v192;
  char **v193;
  __n128 v194;
  void *__p;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  void *v204;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  void *v210;
  void *v211;
  _QWORD *v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  void *v216;
  void *v217;
  _QWORD *v218;
  __n128 v219;
  _QWORD *v220;
  void *v221;
  void *v222;
  char *v223;
  char *v224;
  char **v225;
  _QWORD v226[3];
  _QWORD *v227;
  _BYTE v228[24];
  _BYTE *v229;
  _QWORD v230[3];
  _QWORD *v231;
  void *v232;
  void *v233;
  _QWORD *v234;
  void **v235;
  void **v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;

  v245 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v220 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v223 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v221 = v9;
  v222 = v9 + 16;
  v235 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v221);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v233 = v12 + 2;
  v234 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v232 = v12;
  v236 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v232);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v218 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v216 = v15;
  v217 = v15 + 2;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v216);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v215 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v213 = v18;
  v214 = v18 + 2;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v213);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v212 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v210 = v21;
  v211 = v21 + 2;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v210);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v209 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v207 = v24;
  v208 = v24 + 2;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v207);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v206 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v204 = v27;
  v205 = v27 + 2;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v204);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v202 = v30 + 2;
  v203 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  v201 = v30;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v201);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v199 = v33 + 2;
  v200 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  v198 = v33;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v198);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(0x10uLL);
  v196 = v36 + 2;
  v197 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  __p = v36;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v235, 10, &v219);
  MIL::IRParameter::Make(&v219, (uint64_t *)&v187);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v187);
  v37 = v187;
  v187 = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v219.n128_u64[1];
  if (v219.n128_u64[1])
  {
    v39 = (unint64_t *)(v219.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v196 = __p;
    operator delete(__p);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (v221)
  {
    v222 = v221;
    operator delete(v221);
  }
  v41 = v220;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (void **)operator new(8uLL);
  v235 = v43;
  *v43 = (void *)v42;
  v236 = v43 + 1;
  v237 = (uint64_t)(v43 + 1);
  v232 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v235);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v232, 1, &v194);
  MIL::IRParameter::Make(&v194, (uint64_t *)&v221);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v41, "perm", (uint64_t *)&v221);
  v45 = v221;
  v221 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v194.n128_u64[1];
  if (v194.n128_u64[1])
  {
    v47 = (unint64_t *)(v194.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v235)
  {
    v236 = v235;
    operator delete(v235);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  v193 = 0;
  v49 = operator new();
  *(_QWORD *)v49 = 0;
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = 0;
  v235 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v193, (void **)v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v235, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v193, 1uLL);
  v50 = v193;
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v232 = v52;
  *v52 = v51;
  v233 = v52 + 1;
  v234 = v52 + 1;
  v235 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 25, (uint64_t)&v232);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v216 = v54;
  *v54 = v53;
  v218 = v54 + 1;
  v217 = v54 + 1;
  v236 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 24, (uint64_t)&v216);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v213 = v56;
  *v56 = v55;
  v215 = v56 + 1;
  v214 = v56 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v213);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v210 = v58;
  *v58 = v57;
  v212 = v58 + 1;
  v211 = v58 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v210);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v207 = v60;
  *v60 = v59;
  v209 = v60 + 1;
  v208 = v60 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v207);
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v204 = v62;
  *v62 = v61;
  v206 = v62 + 1;
  v205 = v62 + 1;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v204);
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v201 = v64;
  *v64 = v63;
  v202 = v64 + 1;
  v203 = v64 + 1;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v201);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v198 = v66;
  *v66 = v65;
  v199 = v66 + 1;
  v200 = v66 + 1;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v198);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  __p = v68;
  *v68 = v67;
  v196 = v68 + 1;
  v197 = v68 + 1;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v187 = v70;
  *v70 = v69;
  v188 = v70 + 1;
  v189 = v70 + 1;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v187);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v235, 10, &v190);
  MIL::IRParameter::Make(&v190, &v191);
  *(_QWORD *)&v192 = v191;
  if (v191)
  {
    v71 = (_QWORD *)operator new();
    v72 = v191;
    *v71 = &unk_1EA99F888;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v192 + 1) = v71;
  v191 = 0;
  v73 = v50[2];
  v74 = v50[1];
  if (v74 >= v73)
  {
    v75 = (v74 - *v50) >> 4;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v77 = v73 - *v50;
    if (v77 >> 3 > v76)
      v76 = v77 >> 3;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
      v78 = 0xFFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    v225 = v50 + 2;
    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v50 + 2), v78);
    v81 = &v79[16 * v75];
    *(_OWORD *)v81 = v192;
    v192 = 0uLL;
    v83 = *v50;
    v82 = v50[1];
    if (v82 == *v50)
    {
      v86 = v50[1];
      v84 = &v79[16 * v75];
    }
    else
    {
      v84 = &v79[16 * v75];
      do
      {
        v85 = *((_OWORD *)v82 - 1);
        v82 -= 16;
        *((_OWORD *)v84 - 1) = v85;
        v84 -= 16;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = 0;
      }
      while (v82 != v83);
      v86 = *v50;
      v82 = v50[1];
    }
    v87 = v81 + 16;
    *v50 = v84;
    v222 = v86;
    v50[1] = v81 + 16;
    v223 = v82;
    v88 = v50[2];
    v50[2] = &v79[16 * v80];
    v224 = v88;
    v221 = v86;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v221);
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
    v50[1] = v87;
    if (v89)
    {
      p_shared_owners = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(p_shared_owners);
      while (__stlxr(v91 - 1, p_shared_owners));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
  }
  else
  {
    *(_QWORD *)v74 = v192;
    *((_QWORD *)v74 + 1) = v71;
    v192 = 0uLL;
    v50[1] = v74 + 16;
  }
  v92 = v191;
  v191 = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  v93 = (std::__shared_weak_count *)v190.n128_u64[1];
  if (v190.n128_u64[1])
  {
    v94 = (unint64_t *)(v190.n128_u64[1] + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (__p)
  {
    v196 = __p;
    operator delete(__p);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  v185 = *(_OWORD *)a2;
  v186 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v96 = (uint64_t)v220;
  *(_QWORD *)&v184 = v220;
  if (v220)
  {
    v97 = (_QWORD *)operator new();
    *v97 = &unk_1EA99F8E8;
    v97[1] = 0;
    v97[2] = 0;
    v97[3] = v96;
  }
  else
  {
    v97 = 0;
  }
  *((_QWORD *)&v184 + 1) = v97;
  v220 = 0;
  *(_QWORD *)&v183 = v193;
  if (v193)
  {
    v98 = (_QWORD *)operator new();
    v99 = v193;
    *v98 = &unk_1EA99F948;
    v98[1] = 0;
    v98[2] = 0;
    v98[3] = v99;
  }
  else
  {
    v98 = 0;
  }
  *((_QWORD *)&v183 + 1) = v98;
  v193 = 0;
  v230[0] = &unk_1EA99FAC8;
  v230[1] = MIL::Operators::Prototype::prototype::CustomValidators::ValidateTranspose;
  v231 = v230;
  v229 = 0;
  MIL::IROperator::Make(&v185, &v184, &v183, (uint64_t)v230, (uint64_t)v228, a3);
  v100 = v229;
  if (v229 == v228)
  {
    v101 = 4;
    v100 = v228;
  }
  else
  {
    if (!v229)
      goto LABEL_96;
    v101 = 5;
  }
  (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_96:
  v102 = v231;
  if (v231 == v230)
  {
    v103 = 4;
    v102 = v230;
    goto LABEL_100;
  }
  if (v231)
  {
    v103 = 5;
LABEL_100:
    (*(void (**)(void))(*v102 + 8 * v103))();
  }
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
  if (*((_QWORD *)&v183 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  if (SHIBYTE(v186) < 0)
    operator delete((void *)v185);
  v110 = *a3;
  v226[0] = &off_1EA99FBD8;
  v226[1] = MIL::Operators::Prototype::prototype::CustomValueTypeInference::ValueTypeInferenceTranspose;
  v227 = v226;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v110 + 200))(v110, v226);
  v111 = v227;
  if (v227 == v226)
  {
    v112 = 4;
    v111 = v226;
  }
  else
  {
    if (!v227)
      goto LABEL_118;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_118:
  MIL::Validation::TensorDTypeConstraints::Make(&v235);
  v113 = v235;
  std::string::basic_string[abi:ne180100]<0>(v179, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v179, 0, (uint64_t *)&v221);
  v181 = v221;
  if (v221)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v221;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v182 = v114;
  v221 = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "T");
  (*((void (**)(void **, void **, void **))*v113 + 3))(v113, &v181, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v116 = v182;
  if (v182)
  {
    v117 = (unint64_t *)&v182->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v221;
  v221 = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  if (v180 < 0)
    operator delete(v179[0]);
  v120 = v235;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v221);
  v175 = v221;
  if (v221)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v221;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v176 = v121;
  v221 = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "T");
  (*((void (**)(void **, void **, void **))*v120 + 3))(v120, &v175, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v123 = v176;
  if (v176)
  {
    v124 = (unint64_t *)&v176->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v221;
  v221 = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  v127 = *a3;
  v171 = v235;
  if (v235)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = v235;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = (std::__shared_weak_count_vtbl *)v129;
  }
  else
  {
    v128 = 0;
  }
  v172 = v128;
  v235 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v127 + 56))(v127, &v171);
  v130 = v172;
  if (v172)
  {
    v131 = (unint64_t *)&v172->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v235;
  v235 = 0;
  if (v133)
    (*((void (**)(void **))*v133 + 1))(v133);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v235);
  v134 = v235;
  std::string::basic_string[abi:ne180100]<0>(v167, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&v221);
  v169 = v221;
  if (v221)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)v221;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v170 = v135;
  v221 = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v134 + 3))(v134, &v169, 0, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v137 = v170;
  if (v170)
  {
    v138 = (unint64_t *)&v170->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v221;
  v221 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v168 < 0)
    operator delete(v167[0]);
  v141 = v235;
  std::string::basic_string[abi:ne180100]<0>(v161, "perm");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v161, 0, (uint64_t *)&v221);
  v163 = v221;
  if (v221)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)v221;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v164 = v142;
  v221 = 0;
  std::string::basic_string[abi:ne180100]<0>(v159, "D_In");
  (*((void (**)(void **, void **, _QWORD, void **))*v141 + 3))(v141, &v163, 0, v159);
  if (v160 < 0)
    operator delete(v159[0]);
  v144 = v164;
  if (v164)
  {
    v145 = (unint64_t *)&v164->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v221;
  v221 = 0;
  if (v147)
    (*(void (**)(void *))(*(_QWORD *)v147 + 8))(v147);
  if (v162 < 0)
    operator delete(v161[0]);
  v148 = *a3;
  v157 = v235;
  if (v235)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = v235;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = (std::__shared_weak_count_vtbl *)v150;
  }
  else
  {
    v149 = 0;
  }
  v158 = v149;
  v235 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v148 + 56))(v148, &v157);
  v151 = v158;
  if (v158)
  {
    v152 = (unint64_t *)&v158->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = v235;
  v235 = 0;
  if (v154)
    (*((void (**)(void **))*v154 + 1))(v154);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v193, 0);
  result = (uint64_t)v220;
  if (v220)
  {
    v156 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v220);
    return MEMORY[0x1E0C023A0](v156, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A48EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 152);
  *(_QWORD *)(v61 - 152) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Prototype::prototype::Foo::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  __int128 v40;
  void *v41;
  void *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t result;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  void *v65[2];
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  __n128 v71;
  __n128 v72;
  _QWORD *v73;
  void *__p;
  void *v75;
  _QWORD *v76;
  void *v77;
  void **v78;
  _BYTE v79[24];
  _BYTE *v80;
  _BYTE v81[24];
  _BYTE *v82;
  uint64_t Scalar;
  void **v84[2];

  v84[1] = *(void ***)MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v73 = (_QWORD *)v6;
  v7 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v8 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v9 = operator new(0x10uLL);
  v75 = v9 + 2;
  v76 = v9 + 2;
  *v9 = v7;
  v9[1] = v8;
  __p = v9;
  v84[0] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)v84, 1, &v72);
  MIL::IRParameter::Make(&v72, &v69);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v69);
  v10 = v69;
  v69 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = (std::__shared_weak_count *)v72.n128_u64[1];
  if (v72.n128_u64[1])
  {
    v12 = (unint64_t *)(v72.n128_u64[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v75 = __p;
    operator delete(__p);
  }
  v14 = v73;
  v15 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)3);
  v16 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)3);
  v17 = operator new(0x10uLL);
  v75 = v17 + 2;
  v76 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v84[0] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)v84, 1, &v71);
  MIL::IRParameter::Make(&v71, &v69);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v14, "y", &v69);
  v18 = v69;
  v69 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v71.n128_u64[1];
  if (v71.n128_u64[1])
  {
    v20 = (unint64_t *)(v71.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v75 = __p;
    operator delete(__p);
  }
  v84[0] = 0;
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](v84, (void **)v22);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v84[0], 1uLL);
  v23 = v84[0];
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v67);
  MIL::IRParameter::Make(&v67, &v68);
  v24 = v68;
  v69 = v68;
  if (v68)
  {
    v25 = (_QWORD *)operator new();
    v26 = v68;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v70 = v25;
  v68 = 0;
  v27 = (uint64_t *)v23[2];
  v28 = (uint64_t *)v23[1];
  if (v28 >= v27)
  {
    v30 = ((char *)v28 - (_BYTE *)*v23) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = (char *)v27 - (_BYTE *)*v23;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v78 = v23 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v23 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v69 = 0;
    v70 = 0;
    v38 = *v23;
    v37 = v23[1];
    if (v37 == *v23)
    {
      v41 = v23[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 2;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *v37 = 0;
        v37[1] = 0;
      }
      while (v37 != v38);
      v41 = *v23;
      v37 = v23[1];
    }
    v29 = v36 + 2;
    *v23 = v39;
    __p = v41;
    v75 = v41;
    v23[1] = v36 + 2;
    v76 = v37;
    v42 = v23[2];
    v23[2] = &v34[16 * v35];
    v77 = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *v28 = v24;
    v28[1] = (uint64_t)v25;
    v29 = v28 + 2;
    v69 = 0;
    v70 = 0;
  }
  v23[1] = v29;
  v43 = v68;
  v68 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v67.n128_u64[1];
  if (v67.n128_u64[1])
  {
    v45 = (unint64_t *)(v67.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  *(_OWORD *)v65 = *(_OWORD *)a2;
  v66 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v73;
  *(_QWORD *)&v64 = v73;
  if (v73)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v64 + 1) = v48;
  v73 = 0;
  *(void ***)&v63 = v84[0];
  if (v84[0])
  {
    v49 = (_QWORD *)operator new();
    v50 = v84[0];
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v63 + 1) = v49;
  v84[0] = 0;
  v82 = 0;
  v80 = 0;
  MIL::IROperator::Make((__int128 *)v65, &v64, &v63, (uint64_t)v81, (uint64_t)v79, a3);
  v51 = v80;
  if (v80 == v79)
  {
    v52 = 4;
    v51 = v79;
  }
  else
  {
    if (!v80)
      goto LABEL_54;
    v52 = 5;
  }
  (*(void (**)(_QWORD *))(*v51 + 8 * v52))(v51);
LABEL_54:
  v53 = v82;
  if (v82 == v81)
  {
    v54 = 4;
    v53 = v81;
    goto LABEL_58;
  }
  if (v82)
  {
    v54 = 5;
LABEL_58:
    (*(void (**)(_QWORD *))(*v53 + 8 * v54))(v53);
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v66) < 0)
    operator delete(v65[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](v84, 0);
  result = (uint64_t)v73;
  if (v73)
  {
    v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v73);
    return MEMORY[0x1E0C023A0](v62, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A49AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v31 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a29, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Train::ios16Train::CustomValidators::ValidateBaseConvGrad(MIL::Operators::Train::ios16Train::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  const void *ParameterValue;
  unsigned int v6;
  const void *v7;
  unsigned int v8;
  const void *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  MIL::IRNamedValueType **v13;
  MIL::IRNamedValueType **v14;
  unint64_t v15;
  uint64_t Type;
  uint64_t ParameterType;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::value_type *v21;
  std::string::size_type v22;
  int v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type v37;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  MIL::IRValueType *v52;
  MIL::IRValueType *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD **v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  void *__p[2];
  char v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::string v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::string v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::string v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  _DWORD v87[2];
  std::string v88;

  std::string::basic_string[abi:ne180100]<0>(&v88, "has_input_grad");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v6 = MIL::IRValue::GetScalar<BOOL>(ParameterValue);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v88, "has_weight_grad");
  v7 = (const void *)MIL::IROperation::GetParameterValue(this);
  v8 = MIL::IRValue::GetScalar<BOOL>(v7);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v88, "has_bias_grad");
  v9 = (const void *)MIL::IROperation::GetParameterValue(this);
  v10 = MIL::IRValue::GetScalar<BOOL>(v9);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  v11 = v8 + (unint64_t)v6;
  v12 = (*(uint64_t (**)(MIL::Operators::Train::ios16Train::CustomValidators *))(*(_QWORD *)this + 176))(this);
  v13 = *(MIL::IRNamedValueType ***)v12;
  v14 = *(MIL::IRNamedValueType ***)(v12 + 8);
  v15 = ((uint64_t)v14 - *(_QWORD *)v12) >> 4;
  if (v15 != v11 + v10)
  {
    std::to_string(&v84, v15);
    v28 = std::string::insert(&v84, 0, "The length of outputs(");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v85, ") does not match the expected(");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v83, v11 + v10);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v83;
    else
      v32 = (std::string *)v83.__r_.__value_.__r.__words[0];
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    else
      size = v83.__r_.__value_.__l.__size_;
    v34 = std::string::append(&v86, (const std::string::value_type *)v32, size);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v88, ")");
    v21 = (std::string::value_type *)v36->__r_.__value_.__r.__words[0];
    v37 = v36->__r_.__value_.__l.__size_;
    v87[0] = v36->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v87 + 3) = *(_DWORD *)((char *)&v36->__r_.__value_.__r.__words[2] + 3);
    v23 = SHIBYTE(v36->__r_.__value_.__r.__words[2]);
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v39 = (std::__shared_weak_count *)LocationPtr[1];
    v81 = *LocationPtr;
    v82 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(p_shared_owners);
      while (__stxr(v41 + 1, p_shared_owners));
    }
    if (v23 < 0)
    {
      std::string::__init_copy_ctor_external(&v80, v21, v37);
    }
    else
    {
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      v80.__r_.__value_.__l.__size_ = v37;
      LODWORD(v80.__r_.__value_.__r.__words[2]) = v87[0];
      *(_DWORD *)((char *)&v80.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v87 + 3);
      *((_BYTE *)&v80.__r_.__value_.__s + 23) = v23;
    }
    MIL::ValidationResult::ValidationResult(a2, &v81, 310, &v80);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    v65 = v82;
    if (v82)
    {
      v66 = (unint64_t *)&v82->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      goto LABEL_94;
    }
    goto LABEL_95;
  }
  if (!v6)
    goto LABEL_43;
  if (v14 == v13)
    goto LABEL_100;
  Type = MIL::IRNamedValueType::GetType(*v13);
  std::string::basic_string[abi:ne180100]<0>(&v88, "x");
  ParameterType = MIL::IROperation::GetParameterType(this);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (Type == ParameterType)
  {
LABEL_43:
    if (v8)
    {
      if (v6 >= (unint64_t)((uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 4))
        goto LABEL_100;
      v42 = MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*(_QWORD *)v12 + 16 * v6));
      std::string::basic_string[abi:ne180100]<0>(&v88, "weight");
      v43 = MIL::IROperation::GetParameterType(this);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      if (v42 != v43)
      {
        std::to_string(&v86, v6);
        v44 = std::string::insert(&v86, 0, "The shape and data type of the output at index = ");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        v46 = std::string::append(&v88, " must match input 'weight'");
        v21 = (std::string::value_type *)v46->__r_.__value_.__r.__words[0];
        v47 = v46->__r_.__value_.__l.__size_;
        LODWORD(v85.__r_.__value_.__l.__data_) = v46->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v85.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v46->__r_.__value_.__r.__words[2]
                                                                           + 3);
        v23 = SHIBYTE(v46->__r_.__value_.__r.__words[2]);
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        v48 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v49 = (std::__shared_weak_count *)v48[1];
        v75 = *v48;
        v76 = v49;
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        if (v23 < 0)
        {
          std::string::__init_copy_ctor_external(&v74, v21, v47);
        }
        else
        {
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
          v74.__r_.__value_.__l.__size_ = v47;
          LODWORD(v74.__r_.__value_.__r.__words[2]) = v85.__r_.__value_.__l.__data_;
          *(_DWORD *)((char *)&v74.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v85.__r_.__value_.__r.__words
                                                                                 + 3);
          *((_BYTE *)&v74.__r_.__value_.__s + 23) = v23;
        }
        MIL::ValidationResult::ValidationResult(a2, &v75, 313, &v74);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        v65 = v76;
        if (v76)
        {
          v69 = (unint64_t *)&v76->__shared_owners_;
          do
            v67 = __ldaxr(v69);
          while (__stlxr(v67 - 1, v69));
          goto LABEL_94;
        }
LABEL_95:
        if ((v23 & 0x80000000) == 0)
          return;
        goto LABEL_96;
      }
    }
    if (!v10)
      goto LABEL_80;
    if (v11 < (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 4)
    {
      v52 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*(_QWORD *)v12 + 16 * v11));
      std::string::basic_string[abi:ne180100]<0>(&v88, "weight");
      v53 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      v54 = MIL::IRValueType::AsTensorType(v52);
      v55 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 96))(v54);
      v56 = MIL::IRValueType::AsTensorType(v53);
      v57 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 96))(v56);
      if (v55[1] - *v55 != 8 || *(_QWORD *)*v55 != **v57)
      {
        v58 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v59 = (std::__shared_weak_count *)v58[1];
        v72 = *v58;
        v73 = v59;
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "The shape of output 'db'([C_out]) must match the shape with the first dimension size of input 'weight'");
        MIL::ValidationResult::ValidationResult(a2, &v72, 313, __p);
        if (v71 < 0)
          operator delete(__p[0]);
        v62 = v73;
        if (v73)
        {
          v63 = (unint64_t *)&v73->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        return;
      }
LABEL_80:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
LABEL_100:
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  std::to_string(&v86, 0);
  v18 = std::string::insert(&v86, 0, "The shape and data type of the output at index = ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v88, " must match input 'x'");
  v21 = (std::string::value_type *)v20->__r_.__value_.__r.__words[0];
  v22 = v20->__r_.__value_.__l.__size_;
  LODWORD(v85.__r_.__value_.__l.__data_) = v20->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v85.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v20->__r_.__value_.__r.__words[2] + 3);
  v23 = SHIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  v24 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v25 = (std::__shared_weak_count *)v24[1];
  v78 = *v24;
  v79 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (v23 < 0)
  {
    std::string::__init_copy_ctor_external(&v77, v21, v22);
  }
  else
  {
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    v77.__r_.__value_.__l.__size_ = v22;
    LODWORD(v77.__r_.__value_.__r.__words[2]) = v85.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v77.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v85.__r_.__value_.__r.__words + 3);
    *((_BYTE *)&v77.__r_.__value_.__s + 23) = v23;
  }
  MIL::ValidationResult::ValidationResult(a2, &v78, 313, &v77);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  v65 = v79;
  if (!v79)
    goto LABEL_95;
  v68 = (unint64_t *)&v79->__shared_owners_;
  do
    v67 = __ldaxr(v68);
  while (__stlxr(v67 - 1, v68));
LABEL_94:
  if (v67)
    goto LABEL_95;
  ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
  std::__shared_weak_count::__release_weak(v65);
  if (v23 < 0)
LABEL_96:
    operator delete(v21);
}

void sub_1E0A4A3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  int v53;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (v53 < 0)
    operator delete(v52);
  _Unwind_Resume(a1);
}

void MIL::Operators::Train::ios16Train::CustomValidators::ValidateConvGrad(MIL::Operators::Train::ios16Train::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD v5[6];
  int v6;

  MIL::Operators::Train::ios16Train::CustomValidators::ValidateBaseConvGrad(this, (MIL::ValidationResult *)v5);
  if (((*(uint64_t (**)(_QWORD *))(v5[0] + 16))(v5) & 1) != 0)
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v5);
    MIL::Operators::Common::ios15::CustomValidators::ValidateConv(this, a2);
  }
  else
  {
    MIL::MILResult::MILResult((std::string *)a2, (uint64_t)v5);
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v6;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v5);
  }
}

void sub_1E0A4A5D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Train::ios16Train::BaseConvGrad::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void **v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  void **v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char **v64;
  uint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  void **v86;
  char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char **v92;
  uint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t *v109;
  char *v110;
  char *v111;
  char *v112;
  __int128 v113;
  void **v114;
  char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  char **v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *p_shared_owners;
  unint64_t v139;
  std::__shared_weak_count_vtbl *v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count_vtbl *v147;
  void **v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count_vtbl *v154;
  void **v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count_vtbl *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  void **v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void **v168;
  uint64_t result;
  uint64_t v170;
  void **v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  std::__shared_weak_count_vtbl *v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  void *v187[2];
  char v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  __int128 v191;
  __int128 v192;
  void *__p[2];
  uint64_t v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char **v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  _QWORD *v206;
  void **v207;
  void **v208;
  char *v209;
  char *v210;
  char **v211;
  _BYTE v212[24];
  _BYTE *v213;
  _QWORD v214[3];
  _QWORD *v215;
  void *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v222;
  void (__cdecl **v223)(std::__shared_weak_count *__hidden);
  uint64_t v224;

  v224 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v206 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (void **)operator new(8uLL);
  v207 = v10;
  *v10 = (void *)v9;
  v208 = v10 + 1;
  v209 = (char *)(v10 + 1);
  v216 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v207);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v12;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v222 = (std::__shared_weak_count_vtbl *)&v12->~__shared_weak_count_0;
  v223 = &v12->~__shared_weak_count_0;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v216, 2, &v205);
  MIL::IRParameter::Make(&v205, &v199);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "dy", &v199);
  v13 = v199;
  v199 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v205.n128_u64[1];
  if (v205.n128_u64[1])
  {
    v15 = (unint64_t *)(v205.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (Scalar)
  {
    v222 = Scalar;
    operator delete(Scalar);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  v17 = v206;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v204);
  MIL::IRParameter::Make(&v204, (uint64_t *)&v207);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v17, "has_input_grad", (uint64_t *)&v207);
  v19 = v207;
  v207 = 0;
  if (v19)
    (*((void (**)(void **))*v19 + 1))(v19);
  v20 = (std::__shared_weak_count *)v204.n128_u64[1];
  if (v204.n128_u64[1])
  {
    v21 = (unint64_t *)(v204.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v206;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v203);
  MIL::IRParameter::Make(&v203, (uint64_t *)&v207);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v23, "has_weight_grad", (uint64_t *)&v207);
  v25 = v207;
  v207 = 0;
  if (v25)
    (*((void (**)(void **))*v25 + 1))(v25);
  v26 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v27 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v206;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v202);
  MIL::IRParameter::Make(&v202, (uint64_t *)&v207);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v29, "has_bias_grad", (uint64_t *)&v207);
  v31 = v207;
  v207 = 0;
  if (v31)
    (*((void (**)(void **))*v31 + 1))(v31);
  v32 = (std::__shared_weak_count *)v202.n128_u64[1];
  if (v202.n128_u64[1])
  {
    v33 = (unint64_t *)(v202.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v201 = 0;
  v35 = operator new();
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  v207 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v201, (void **)v35);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v207, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v201, 3uLL);
  v36 = v201;
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v38;
  v38->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v37;
  v222 = (std::__shared_weak_count_vtbl *)&v38->~__shared_weak_count_0;
  v223 = &v38->~__shared_weak_count_0;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v216 = v40;
  *v40 = v39;
  v217 = (uint64_t)(v40 + 1);
  v218 = v40 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v216);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v219, 2, &v197);
  MIL::IRParameter::Make(&v197, &v198);
  v41 = v198;
  v199 = v198;
  if (v198)
  {
    v42 = (_QWORD *)operator new();
    v43 = v198;
    *v42 = &unk_1EA99F888;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  v200 = v42;
  v198 = 0;
  v44 = v36[2];
  v45 = v36[1];
  if (v45 >= v44)
  {
    v47 = (v45 - *v36) >> 4;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v49 = v44 - *v36;
    if (v49 >> 3 > v48)
      v48 = v49 >> 3;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
      v50 = 0xFFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    v211 = v36 + 2;
    v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v36 + 2), v50);
    v53 = (uint64_t *)&v51[16 * v47];
    *v53 = v41;
    v53[1] = (uint64_t)v42;
    v199 = 0;
    v200 = 0;
    v55 = *v36;
    v54 = v36[1];
    if (v54 == *v36)
    {
      v58 = (void **)v36[1];
      v56 = &v51[16 * v47];
    }
    else
    {
      v56 = &v51[16 * v47];
      do
      {
        v57 = *((_OWORD *)v54 - 1);
        v54 -= 16;
        *((_OWORD *)v56 - 1) = v57;
        v56 -= 16;
        *(_QWORD *)v54 = 0;
        *((_QWORD *)v54 + 1) = 0;
      }
      while (v54 != v55);
      v58 = (void **)*v36;
      v54 = v36[1];
    }
    v46 = (char *)(v53 + 2);
    *v36 = v56;
    v207 = v58;
    v208 = v58;
    v36[1] = (char *)(v53 + 2);
    v209 = v54;
    v59 = v36[2];
    v36[2] = &v51[16 * v52];
    v210 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v207);
  }
  else
  {
    *(_QWORD *)v45 = v41;
    *((_QWORD *)v45 + 1) = v42;
    v46 = v45 + 16;
    v199 = 0;
    v200 = 0;
  }
  v36[1] = v46;
  v60 = v198;
  v198 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v62 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v216)
  {
    v217 = (uint64_t)v216;
    operator delete(v216);
  }
  if (Scalar)
  {
    v222 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v201[1] - 2) + 48))(*((_QWORD *)v201[1] - 2), 1);
  v64 = v201;
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v66;
  v66->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v65;
  v222 = (std::__shared_weak_count_vtbl *)&v66->~__shared_weak_count_0;
  v223 = &v66->~__shared_weak_count_0;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v216 = v68;
  *v68 = v67;
  v217 = (uint64_t)(v68 + 1);
  v218 = v68 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v216);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v219, 2, &v196);
  MIL::IRParameter::Make(&v196, &v198);
  v69 = v198;
  v199 = v198;
  if (v198)
  {
    v70 = (_QWORD *)operator new();
    v71 = v198;
    *v70 = &unk_1EA99F888;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  v200 = v70;
  v198 = 0;
  v72 = v64[2];
  v73 = v64[1];
  if (v73 >= v72)
  {
    v75 = (v73 - *v64) >> 4;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v77 = v72 - *v64;
    if (v77 >> 3 > v76)
      v76 = v77 >> 3;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
      v78 = 0xFFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    v211 = v64 + 2;
    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v64 + 2), v78);
    v81 = (uint64_t *)&v79[16 * v75];
    *v81 = v69;
    v81[1] = (uint64_t)v70;
    v199 = 0;
    v200 = 0;
    v83 = *v64;
    v82 = v64[1];
    if (v82 == *v64)
    {
      v86 = (void **)v64[1];
      v84 = &v79[16 * v75];
    }
    else
    {
      v84 = &v79[16 * v75];
      do
      {
        v85 = *((_OWORD *)v82 - 1);
        v82 -= 16;
        *((_OWORD *)v84 - 1) = v85;
        v84 -= 16;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = 0;
      }
      while (v82 != v83);
      v86 = (void **)*v64;
      v82 = v64[1];
    }
    v74 = (char *)(v81 + 2);
    *v64 = v84;
    v207 = v86;
    v208 = v86;
    v64[1] = (char *)(v81 + 2);
    v209 = v82;
    v87 = v64[2];
    v64[2] = &v79[16 * v80];
    v210 = v87;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v207);
  }
  else
  {
    *(_QWORD *)v73 = v69;
    *((_QWORD *)v73 + 1) = v70;
    v74 = v73 + 16;
    v199 = 0;
    v200 = 0;
  }
  v64[1] = v74;
  v88 = v198;
  v198 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v90 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v216)
  {
    v217 = (uint64_t)v216;
    operator delete(v216);
  }
  if (Scalar)
  {
    v222 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v201[1] - 2) + 48))(*((_QWORD *)v201[1] - 2), 1);
  v92 = v201;
  v93 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v94 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v94;
  v94->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v93;
  v222 = (std::__shared_weak_count_vtbl *)&v94->~__shared_weak_count_0;
  v223 = &v94->~__shared_weak_count_0;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v95 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v96 = operator new(8uLL);
  v216 = v96;
  *v96 = v95;
  v217 = (uint64_t)(v96 + 1);
  v218 = v96 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v216);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v219, 2, &v195);
  MIL::IRParameter::Make(&v195, &v198);
  v97 = v198;
  v199 = v198;
  if (v198)
  {
    v98 = (_QWORD *)operator new();
    v99 = v198;
    *v98 = &unk_1EA99F888;
    v98[1] = 0;
    v98[2] = 0;
    v98[3] = v99;
  }
  else
  {
    v98 = 0;
  }
  v200 = v98;
  v198 = 0;
  v100 = v92[2];
  v101 = v92[1];
  if (v101 >= v100)
  {
    v103 = (v101 - *v92) >> 4;
    v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v105 = v100 - *v92;
    if (v105 >> 3 > v104)
      v104 = v105 >> 3;
    if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF0)
      v106 = 0xFFFFFFFFFFFFFFFLL;
    else
      v106 = v104;
    v211 = v92 + 2;
    v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v92 + 2), v106);
    v109 = (uint64_t *)&v107[16 * v103];
    *v109 = v97;
    v109[1] = (uint64_t)v98;
    v199 = 0;
    v200 = 0;
    v111 = *v92;
    v110 = v92[1];
    if (v110 == *v92)
    {
      v114 = (void **)v92[1];
      v112 = &v107[16 * v103];
    }
    else
    {
      v112 = &v107[16 * v103];
      do
      {
        v113 = *((_OWORD *)v110 - 1);
        v110 -= 16;
        *((_OWORD *)v112 - 1) = v113;
        v112 -= 16;
        *(_QWORD *)v110 = 0;
        *((_QWORD *)v110 + 1) = 0;
      }
      while (v110 != v111);
      v114 = (void **)*v92;
      v110 = v92[1];
    }
    v102 = (char *)(v109 + 2);
    *v92 = v112;
    v207 = v114;
    v208 = v114;
    v92[1] = (char *)(v109 + 2);
    v209 = v110;
    v115 = v92[2];
    v92[2] = &v107[16 * v108];
    v210 = v115;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v207);
  }
  else
  {
    *(_QWORD *)v101 = v97;
    *((_QWORD *)v101 + 1) = v98;
    v102 = v101 + 16;
    v199 = 0;
    v200 = 0;
  }
  v92[1] = v102;
  v116 = v198;
  v198 = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  v117 = (std::__shared_weak_count *)v195.n128_u64[1];
  if (v195.n128_u64[1])
  {
    v118 = (unint64_t *)(v195.n128_u64[1] + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (v216)
  {
    v217 = (uint64_t)v216;
    operator delete(v216);
  }
  if (Scalar)
  {
    v222 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v201[1] - 2) + 48))(*((_QWORD *)v201[1] - 2), 1);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v194 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v120 = (uint64_t)v206;
  *(_QWORD *)&v192 = v206;
  if (v206)
  {
    v121 = (_QWORD *)operator new();
    *v121 = &unk_1EA99F8E8;
    v121[1] = 0;
    v121[2] = 0;
    v121[3] = v120;
  }
  else
  {
    v121 = 0;
  }
  *((_QWORD *)&v192 + 1) = v121;
  v206 = 0;
  *(_QWORD *)&v191 = v201;
  if (v201)
  {
    v122 = (_QWORD *)operator new();
    v123 = v201;
    *v122 = &unk_1EA99F948;
    v122[1] = 0;
    v122[2] = 0;
    v122[3] = v123;
  }
  else
  {
    v122 = 0;
  }
  *((_QWORD *)&v191 + 1) = v122;
  v201 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v214, a3);
  }
  else
  {
    v214[0] = &unk_1EA99FAC8;
    v214[1] = MIL::Operators::Train::ios16Train::CustomValidators::ValidateBaseConvGrad;
    v215 = v214;
  }
  v213 = 0;
  MIL::IROperator::Make((__int128 *)__p, &v192, &v191, (uint64_t)v214, (uint64_t)v212, a4);
  v124 = v213;
  if (v213 == v212)
  {
    v125 = 4;
    v124 = v212;
  }
  else
  {
    if (!v213)
      goto LABEL_131;
    v125 = 5;
  }
  (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_131:
  v126 = v215;
  if (v215 == v214)
  {
    v127 = 4;
    v126 = v214;
    goto LABEL_135;
  }
  if (v215)
  {
    v127 = 5;
LABEL_135:
    (*(void (**)(void))(*v126 + 8 * v127))();
  }
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
  if (*((_QWORD *)&v191 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  if (SHIBYTE(v194) < 0)
    operator delete(__p[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&v207);
  v134 = v207;
  std::string::basic_string[abi:ne180100]<0>(v187, "dy");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v187, 0, (uint64_t *)&Scalar);
  v189 = Scalar;
  if (Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v190 = v135;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v134 + 3))(v134, &v189, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v137 = v190;
  if (v190)
  {
    p_shared_owners = (unint64_t *)&v190->__shared_owners_;
    do
      v139 = __ldaxr(p_shared_owners);
    while (__stlxr(v139 - 1, p_shared_owners));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = Scalar;
  Scalar = 0;
  if (v140)
    (*((void (**)(std::__shared_weak_count_vtbl *))v140->~__shared_weak_count + 1))(v140);
  if (v188 < 0)
    operator delete(v187[0]);
  v141 = v207;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 1, &Scalar);
  v183 = Scalar;
  if (Scalar)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = Scalar;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v184 = v142;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v181, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v141 + 3))(v141, &v183, v181);
  if (v182 < 0)
    operator delete(v181[0]);
  v144 = v184;
  if (v184)
  {
    v145 = (unint64_t *)&v184->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = Scalar;
  Scalar = 0;
  if (v147)
    (*((void (**)(std::__shared_weak_count_vtbl *))v147->~__shared_weak_count + 1))(v147);
  v148 = v207;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 1, &Scalar);
  v179 = Scalar;
  if (Scalar)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = Scalar;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v180 = v149;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v148 + 3))(v148, &v179, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v151 = v180;
  if (v180)
  {
    v152 = (unint64_t *)&v180->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = Scalar;
  Scalar = 0;
  if (v154)
    (*((void (**)(std::__shared_weak_count_vtbl *))v154->~__shared_weak_count + 1))(v154);
  v155 = v207;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 1, &Scalar);
  v175 = Scalar;
  if (Scalar)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = Scalar;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v176 = v156;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v155 + 3))(v155, &v175, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v158 = v176;
  if (v176)
  {
    v159 = (unint64_t *)&v176->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = Scalar;
  Scalar = 0;
  if (v161)
    (*((void (**)(std::__shared_weak_count_vtbl *))v161->~__shared_weak_count + 1))(v161);
  v162 = *a4;
  v171 = v207;
  if (v207)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = v207;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = (std::__shared_weak_count_vtbl *)v164;
  }
  else
  {
    v163 = 0;
  }
  v172 = v163;
  v207 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v162 + 56))(v162, &v171);
  v165 = v172;
  if (v172)
  {
    v166 = (unint64_t *)&v172->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v207;
  v207 = 0;
  if (v168)
    (*((void (**)(void **))*v168 + 1))(v168);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v201, 0);
  result = (uint64_t)v206;
  if (v206)
  {
    v170 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v206);
    return MEMORY[0x1E0C023A0](v170, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A4B744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 256);
  *(_QWORD *)(v61 - 256) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Train::ios16Train::ConvGrad::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count_vtbl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  unsigned __int8 *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  unsigned __int8 *v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  unsigned __int8 *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  unsigned __int8 *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  unsigned __int8 *v112;
  void *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  uint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  void *v123;
  _QWORD *v124;
  void *v125;
  unint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  _QWORD *v136;
  _QWORD *v137;
  char *v138;
  __int128 v139;
  _QWORD *v140;
  uint64_t v141;
  void *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  std::__shared_weak_count_vtbl *v148;
  uint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  void *v151;
  _QWORD *v152;
  void *v153;
  unint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  _QWORD *v164;
  _QWORD *v165;
  char *v166;
  __int128 v167;
  _QWORD *v168;
  uint64_t v169;
  void *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  std::__shared_weak_count_vtbl *v176;
  uint64_t v177;
  std::__shared_weak_count_vtbl *v178;
  void *v179;
  _QWORD *v180;
  void *v181;
  unint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  _QWORD *v192;
  _QWORD *v193;
  char *v194;
  __int128 v195;
  _QWORD *v196;
  uint64_t v197;
  void *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  void *v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  void *v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  unint64_t *p_shared_owners;
  unint64_t v221;
  std::__shared_weak_count_vtbl *v222;
  void *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count_vtbl *v229;
  void *v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count_vtbl *v236;
  void *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count_vtbl *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count_vtbl *v243;
  void *v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count_vtbl *v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count_vtbl *v250;
  void *v251;
  std::__shared_weak_count *v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count_vtbl *v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  std::__shared_weak_count_vtbl *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  void *v264;
  void *v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count_vtbl *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count_vtbl *v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count_vtbl *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  void *v278;
  void *v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count_vtbl *v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count_vtbl *v285;
  void *v286;
  std::__shared_weak_count *v287;
  std::__shared_weak_count_vtbl *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count_vtbl *v292;
  void *v293;
  std::__shared_weak_count *v294;
  std::__shared_weak_count_vtbl *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count_vtbl *v299;
  void *v300;
  std::__shared_weak_count *v301;
  std::__shared_weak_count_vtbl *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count_vtbl *v306;
  uint64_t v307;
  std::__shared_weak_count *v308;
  std::__shared_weak_count_vtbl *v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  void *v313;
  std::__shared_weak_count_vtbl *v314;
  std::__shared_weak_count *v315;
  std::__shared_weak_count_vtbl *v316;
  uint64_t i;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  void *v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  std::__shared_weak_count_vtbl *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count_vtbl *v328;
  uint64_t result;
  uint64_t v330;
  std::__shared_weak_count_vtbl *v331;
  std::__shared_weak_count *v332;
  void *v333[2];
  char v334;
  void *v335;
  std::__shared_weak_count *v336;
  void *v337;
  std::__shared_weak_count *v338;
  void *v339[2];
  char v340;
  void *v341[2];
  char v342;
  std::__shared_weak_count_vtbl *v343;
  std::__shared_weak_count *v344;
  void *v345[2];
  char v346;
  void *v347[2];
  char v348;
  std::__shared_weak_count_vtbl *v349;
  std::__shared_weak_count *v350;
  void *v351[2];
  char v352;
  void *v353[2];
  char v354;
  std::__shared_weak_count_vtbl *v355;
  std::__shared_weak_count *v356;
  void *v357[2];
  char v358;
  void *v359[2];
  char v360;
  std::__shared_weak_count_vtbl *v361;
  std::__shared_weak_count *v362;
  void *v363;
  std::__shared_weak_count *v364;
  void *v365[2];
  char v366;
  std::__shared_weak_count_vtbl *v367;
  std::__shared_weak_count *v368;
  void *v369;
  std::__shared_weak_count *v370;
  void *v371[2];
  char v372;
  std::__shared_weak_count_vtbl *v373;
  std::__shared_weak_count *v374;
  void *v375[2];
  char v376;
  std::__shared_weak_count_vtbl *v377;
  std::__shared_weak_count *v378;
  void *v379[2];
  char v380;
  std::__shared_weak_count_vtbl *v381;
  std::__shared_weak_count *v382;
  void *v383[2];
  char v384;
  void *v385[2];
  char v386;
  std::__shared_weak_count_vtbl *v387;
  std::__shared_weak_count *v388;
  void *v389[2];
  char v390;
  void *v391[2];
  char v392;
  std::__shared_weak_count_vtbl *v393;
  std::__shared_weak_count *v394;
  void *v395[2];
  char v396;
  void *v397[2];
  char v398;
  std::__shared_weak_count_vtbl *v399;
  std::__shared_weak_count *v400;
  __int128 v401;
  __int128 v402;
  void *v403[2];
  uint64_t v404;
  __n128 v405;
  __n128 v406;
  __n128 v407;
  __n128 v408;
  __n128 v409;
  __n128 v410;
  __n128 v411;
  __n128 v412;
  void *v413;
  void *v414;
  _QWORD *v415;
  void *v416;
  void *v417;
  _QWORD *v418;
  void *v419;
  void *v420;
  _QWORD *v421;
  __n128 v422;
  uint64_t v423;
  __n128 v424;
  __n128 v425;
  __n128 v426;
  __n128 v427;
  __n128 v428;
  _QWORD *v429;
  void *__p;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  _QWORD v436[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v439;
  _BYTE v440[24];
  _BYTE *v441;
  _QWORD v442[3];
  _QWORD *v443;
  void *v444;
  uint64_t v445;
  _QWORD *v446;
  std::__shared_weak_count_vtbl *v447;
  uint64_t v448;
  _QWORD *v449;
  uint64_t v450;

  v450 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v429 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v432 = (uint64_t)(v8 + 1);
  v431 = (uint64_t)(v8 + 1);
  v447 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v439 = &v10->~__shared_weak_count_0;
  v448 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v447, 2, &v428);
  MIL::IRParameter::Make(&v428, (uint64_t *)&v419);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "dy", (uint64_t *)&v419);
  v11 = v419;
  v419 = 0;
  if (v11)
    (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v428.n128_u64[1];
  if (v428.n128_u64[1])
  {
    v13 = (unint64_t *)(v428.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v431 = (uint64_t)__p;
    operator delete(__p);
  }
  v15 = v429;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v427);
  MIL::IRParameter::Make(&v427, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v15, "has_input_grad", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v427.n128_u64[1];
  if (v427.n128_u64[1])
  {
    v19 = (unint64_t *)(v427.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v21 = v429;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v426);
  MIL::IRParameter::Make(&v426, (uint64_t *)&__p);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v21, "has_weight_grad", (uint64_t *)&__p);
  v23 = __p;
  __p = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v426.n128_u64[1];
  if (v426.n128_u64[1])
  {
    v25 = (unint64_t *)(v426.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 32))(*((_QWORD *)v22 + 5), 1);
  v27 = v429;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v425);
  MIL::IRParameter::Make(&v425, (uint64_t *)&__p);
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v27, "has_bias_grad", (uint64_t *)&__p);
  v29 = __p;
  __p = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)v425.n128_u64[1];
  if (v425.n128_u64[1])
  {
    v31 = (unint64_t *)(v425.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v33 = v429;
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(0x18uLL);
  v432 = (uint64_t)(v37 + 3);
  *v37 = v34;
  v37[1] = v35;
  v37[2] = v36;
  __p = v37;
  v431 = (uint64_t)(v37 + 3);
  v447 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v41->__get_deleter;
  v439 = &v41->__get_deleter;
  v41->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
  v41->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  v41->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v40;
  Scalar = v41;
  v448 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v447, 2, &v424);
  MIL::IRParameter::Make(&v424, (uint64_t *)&v419);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v33, "x", (uint64_t *)&v419);
  v42 = v419;
  v419 = 0;
  if (v42)
    (*(void (**)(void *))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v424.n128_u64[1];
  if (v424.n128_u64[1])
  {
    v44 = (unint64_t *)(v424.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v431 = (uint64_t)__p;
    operator delete(__p);
  }
  v46 = v429;
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v50->__get_deleter;
  v439 = &v50->__get_deleter;
  v50->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v47;
  v50->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v48;
  v50->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v49;
  Scalar = v50;
  __p = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v448 = (uint64_t)&v54->__get_deleter;
  v449 = &v54->__get_deleter;
  v54->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v51;
  v54->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v52;
  v54->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v53;
  v447 = v54;
  v431 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v447);
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = MIL::IRUnknownDimension::Make(a1, 0);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = operator new(0x20uLL);
  v421 = v59 + 4;
  *v59 = v55;
  v59[1] = v56;
  v59[2] = v57;
  v59[3] = v58;
  v419 = v59;
  v420 = v59 + 4;
  v432 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v419);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = MIL::IRUnknownDimension::Make(a1, 0);
  v62 = MIL::IRUnknownDimension::Make(a1, 0);
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = operator new(0x20uLL);
  v445 = (uint64_t)(v64 + 4);
  v446 = v64 + 4;
  *v64 = v60;
  v64[1] = v61;
  v64[2] = v62;
  v64[3] = v63;
  v444 = v64;
  v433 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v444);
  v65 = MIL::IRUnknownDimension::Make(a1, 0);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v69 = MIL::IRUnknownDimension::Make(a1, 0);
  v70 = operator new(0x28uLL);
  v418 = v70 + 5;
  *v70 = v65;
  v70[1] = v66;
  v70[2] = v67;
  v70[3] = v68;
  v70[4] = v69;
  v416 = v70;
  v417 = v70 + 5;
  v434 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v416);
  v71 = MIL::IRUnknownDimension::Make(a1, 0);
  v72 = MIL::IRUnknownDimension::Make(a1, 0);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = MIL::IRUnknownDimension::Make(a1, 0);
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = operator new(0x28uLL);
  v415 = v76 + 5;
  *v76 = v71;
  v76[1] = v72;
  v76[2] = v73;
  v76[3] = v74;
  v76[4] = v75;
  v413 = v76;
  v414 = v76 + 5;
  v435 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v413);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 6, &v422);
  MIL::IRParameter::Make(&v422, &v423);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v46, "weight", &v423);
  v77 = v423;
  v423 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = (std::__shared_weak_count *)v422.n128_u64[1];
  if (v422.n128_u64[1])
  {
    v79 = (unint64_t *)(v422.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v416)
  {
    v417 = v416;
    operator delete(v416);
  }
  if (v444)
  {
    v445 = (uint64_t)v444;
    operator delete(v444);
  }
  if (v419)
  {
    v420 = v419;
    operator delete(v419);
  }
  if (v447)
  {
    v448 = (uint64_t)v447;
    operator delete(v447);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  v81 = v429;
  v82 = MIL::IRUnknownDimension::Make(a1, 0);
  v83 = operator new(8uLL);
  __p = v83;
  *v83 = v82;
  v432 = (uint64_t)(v83 + 1);
  v431 = (uint64_t)(v83 + 1);
  v447 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v447, 1, &v412);
  MIL::IRParameter::Make(&v412, (uint64_t *)&Scalar);
  v84 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v81, "strides", (uint64_t *)&Scalar);
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  v86 = (std::__shared_weak_count *)v412.n128_u64[1];
  if (v412.n128_u64[1])
  {
    v87 = (unint64_t *)(v412.n128_u64[1] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (__p)
  {
    v431 = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v84 + 5) + 32))(*((_QWORD *)v84 + 5), 1);
  v89 = v429;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v411);
  MIL::IRParameter::Make(&v411, (uint64_t *)&__p);
  v90 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v89, "pad_type", (uint64_t *)&__p);
  v91 = __p;
  __p = 0;
  if (v91)
    (*(void (**)(void *))(*(_QWORD *)v91 + 8))(v91);
  v92 = (std::__shared_weak_count *)v411.n128_u64[1];
  if (v411.n128_u64[1])
  {
    v93 = (unint64_t *)(v411.n128_u64[1] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v90 + 5) + 32))(*((_QWORD *)v90 + 5), 1);
  v95 = v429;
  v96 = MIL::IRUnknownDimension::Make(a1, 0);
  v97 = operator new(8uLL);
  __p = v97;
  *v97 = v96;
  v432 = (uint64_t)(v97 + 1);
  v431 = (uint64_t)(v97 + 1);
  v447 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v447, 1, &v410);
  MIL::IRParameter::Make(&v410, (uint64_t *)&Scalar);
  v98 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v95, "pad", (uint64_t *)&Scalar);
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*((void (**)(std::__shared_weak_count_vtbl *))v99->~__shared_weak_count + 1))(v99);
  v100 = (std::__shared_weak_count *)v410.n128_u64[1];
  if (v410.n128_u64[1])
  {
    v101 = (unint64_t *)(v410.n128_u64[1] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (__p)
  {
    v431 = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v98 + 5) + 32))(*((_QWORD *)v98 + 5), 1);
  v103 = v429;
  v104 = MIL::IRUnknownDimension::Make(a1, 0);
  v105 = operator new(8uLL);
  __p = v105;
  *v105 = v104;
  v432 = (uint64_t)(v105 + 1);
  v431 = (uint64_t)(v105 + 1);
  v447 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v447, 1, &v409);
  MIL::IRParameter::Make(&v409, (uint64_t *)&Scalar);
  v106 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v103, "dilations", (uint64_t *)&Scalar);
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  v108 = (std::__shared_weak_count *)v409.n128_u64[1];
  if (v409.n128_u64[1])
  {
    v109 = (unint64_t *)(v409.n128_u64[1] + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (__p)
  {
    v431 = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v106 + 5) + 32))(*((_QWORD *)v106 + 5), 1);
  v111 = v429;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v408);
  MIL::IRParameter::Make(&v408, (uint64_t *)&__p);
  v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v111, "groups", (uint64_t *)&__p);
  v113 = __p;
  __p = 0;
  if (v113)
    (*(void (**)(void *))(*(_QWORD *)v113 + 8))(v113);
  v114 = (std::__shared_weak_count *)v408.n128_u64[1];
  if (v408.n128_u64[1])
  {
    v115 = (unint64_t *)(v408.n128_u64[1] + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v112 + 5) + 32))(*((_QWORD *)v112 + 5), 1);
  v416 = 0;
  v117 = operator new();
  *(_QWORD *)v117 = 0;
  *(_QWORD *)(v117 + 8) = 0;
  *(_QWORD *)(v117 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v416, (void **)v117);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v416, 3uLL);
  v118 = v416;
  v119 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v120 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v120;
  v120->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v119;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v120->~__shared_weak_count_0;
  v439 = &v120->~__shared_weak_count_0;
  v444 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v121 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v122 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v447 = v122;
  v122->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v121;
  v448 = (uint64_t)&v122->~__shared_weak_count_0;
  v449 = &v122->~__shared_weak_count_0;
  v445 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v447);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v444, 2, &v407);
  MIL::IRParameter::Make(&v407, (uint64_t *)&v413);
  v123 = v413;
  v419 = v413;
  if (v413)
  {
    v124 = (_QWORD *)operator new();
    v125 = v413;
    *v124 = &unk_1EA99F888;
    v124[1] = 0;
    v124[2] = 0;
    v124[3] = v125;
  }
  else
  {
    v124 = 0;
  }
  v420 = v124;
  v413 = 0;
  v126 = v118[2];
  v127 = (_QWORD *)v118[1];
  if ((unint64_t)v127 >= v126)
  {
    v129 = ((uint64_t)v127 - *v118) >> 4;
    v130 = v129 + 1;
    if ((unint64_t)(v129 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v131 = v126 - *v118;
    if (v131 >> 3 > v130)
      v130 = v131 >> 3;
    if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF0)
      v132 = 0xFFFFFFFFFFFFFFFLL;
    else
      v132 = v130;
    v434 = (uint64_t)(v118 + 2);
    v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v118 + 2), v132);
    v135 = &v133[16 * v129];
    *(_QWORD *)v135 = v123;
    *((_QWORD *)v135 + 1) = v124;
    v420 = 0;
    v419 = 0;
    v137 = (_QWORD *)*v118;
    v136 = (_QWORD *)v118[1];
    if (v136 == (_QWORD *)*v118)
    {
      v140 = (_QWORD *)v118[1];
      v138 = &v133[16 * v129];
    }
    else
    {
      v138 = &v133[16 * v129];
      do
      {
        v139 = *((_OWORD *)v136 - 1);
        v136 -= 2;
        *((_OWORD *)v138 - 1) = v139;
        v138 -= 16;
        *v136 = 0;
        v136[1] = 0;
      }
      while (v136 != v137);
      v140 = (_QWORD *)*v118;
      v136 = (_QWORD *)v118[1];
    }
    v128 = v135 + 16;
    *v118 = v138;
    v431 = (uint64_t)v140;
    v118[1] = v135 + 16;
    v432 = (uint64_t)v136;
    v141 = v118[2];
    v118[2] = &v133[16 * v134];
    v433 = v141;
    __p = v140;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *v127 = v123;
    v127[1] = v124;
    v128 = v127 + 2;
    v420 = 0;
    v419 = 0;
  }
  v118[1] = v128;
  v142 = v413;
  v413 = 0;
  if (v142)
    (*(void (**)(void *))(*(_QWORD *)v142 + 8))(v142);
  v143 = (std::__shared_weak_count *)v407.n128_u64[1];
  if (v407.n128_u64[1])
  {
    v144 = (unint64_t *)(v407.n128_u64[1] + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  if (v447)
  {
    v448 = (uint64_t)v447;
    operator delete(v447);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)v416 + 1) - 16) + 48))(*(_QWORD *)(*((_QWORD *)v416 + 1) - 16), 1);
  v146 = v416;
  v147 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v148 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v148;
  v148->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v147;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v148->~__shared_weak_count_0;
  v439 = &v148->~__shared_weak_count_0;
  v444 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v149 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v150 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v447 = v150;
  v150->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v149;
  v448 = (uint64_t)&v150->~__shared_weak_count_0;
  v449 = &v150->~__shared_weak_count_0;
  v445 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v447);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v444, 2, &v406);
  MIL::IRParameter::Make(&v406, (uint64_t *)&v413);
  v151 = v413;
  v419 = v413;
  if (v413)
  {
    v152 = (_QWORD *)operator new();
    v153 = v413;
    *v152 = &unk_1EA99F888;
    v152[1] = 0;
    v152[2] = 0;
    v152[3] = v153;
  }
  else
  {
    v152 = 0;
  }
  v420 = v152;
  v413 = 0;
  v154 = v146[2];
  v155 = (_QWORD *)v146[1];
  if ((unint64_t)v155 >= v154)
  {
    v157 = ((uint64_t)v155 - *v146) >> 4;
    v158 = v157 + 1;
    if ((unint64_t)(v157 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v159 = v154 - *v146;
    if (v159 >> 3 > v158)
      v158 = v159 >> 3;
    if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF0)
      v160 = 0xFFFFFFFFFFFFFFFLL;
    else
      v160 = v158;
    v434 = (uint64_t)(v146 + 2);
    v161 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v146 + 2), v160);
    v163 = &v161[16 * v157];
    *(_QWORD *)v163 = v151;
    *((_QWORD *)v163 + 1) = v152;
    v420 = 0;
    v419 = 0;
    v165 = (_QWORD *)*v146;
    v164 = (_QWORD *)v146[1];
    if (v164 == (_QWORD *)*v146)
    {
      v168 = (_QWORD *)v146[1];
      v166 = &v161[16 * v157];
    }
    else
    {
      v166 = &v161[16 * v157];
      do
      {
        v167 = *((_OWORD *)v164 - 1);
        v164 -= 2;
        *((_OWORD *)v166 - 1) = v167;
        v166 -= 16;
        *v164 = 0;
        v164[1] = 0;
      }
      while (v164 != v165);
      v168 = (_QWORD *)*v146;
      v164 = (_QWORD *)v146[1];
    }
    v156 = v163 + 16;
    *v146 = v166;
    v431 = (uint64_t)v168;
    v146[1] = v163 + 16;
    v432 = (uint64_t)v164;
    v169 = v146[2];
    v146[2] = &v161[16 * v162];
    v433 = v169;
    __p = v168;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *v155 = v151;
    v155[1] = v152;
    v156 = v155 + 2;
    v420 = 0;
    v419 = 0;
  }
  v146[1] = v156;
  v170 = v413;
  v413 = 0;
  if (v170)
    (*(void (**)(void *))(*(_QWORD *)v170 + 8))(v170);
  v171 = (std::__shared_weak_count *)v406.n128_u64[1];
  if (v406.n128_u64[1])
  {
    v172 = (unint64_t *)(v406.n128_u64[1] + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  if (v447)
  {
    v448 = (uint64_t)v447;
    operator delete(v447);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)v416 + 1) - 16) + 48))(*(_QWORD *)(*((_QWORD *)v416 + 1) - 16), 1);
  v174 = v416;
  v175 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v176 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v176;
  v176->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v175;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v176->~__shared_weak_count_0;
  v439 = &v176->~__shared_weak_count_0;
  v444 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v177 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v178 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v447 = v178;
  v178->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v177;
  v448 = (uint64_t)&v178->~__shared_weak_count_0;
  v449 = &v178->~__shared_weak_count_0;
  v445 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v447);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v444, 2, &v405);
  MIL::IRParameter::Make(&v405, (uint64_t *)&v413);
  v179 = v413;
  v419 = v413;
  if (v413)
  {
    v180 = (_QWORD *)operator new();
    v181 = v413;
    *v180 = &unk_1EA99F888;
    v180[1] = 0;
    v180[2] = 0;
    v180[3] = v181;
  }
  else
  {
    v180 = 0;
  }
  v420 = v180;
  v413 = 0;
  v182 = v174[2];
  v183 = (_QWORD *)v174[1];
  if ((unint64_t)v183 >= v182)
  {
    v185 = ((uint64_t)v183 - *v174) >> 4;
    v186 = v185 + 1;
    if ((unint64_t)(v185 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v187 = v182 - *v174;
    if (v187 >> 3 > v186)
      v186 = v187 >> 3;
    if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFF0)
      v188 = 0xFFFFFFFFFFFFFFFLL;
    else
      v188 = v186;
    v434 = (uint64_t)(v174 + 2);
    v189 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v174 + 2), v188);
    v191 = &v189[16 * v185];
    *(_QWORD *)v191 = v179;
    *((_QWORD *)v191 + 1) = v180;
    v420 = 0;
    v419 = 0;
    v193 = (_QWORD *)*v174;
    v192 = (_QWORD *)v174[1];
    if (v192 == (_QWORD *)*v174)
    {
      v196 = (_QWORD *)v174[1];
      v194 = &v189[16 * v185];
    }
    else
    {
      v194 = &v189[16 * v185];
      do
      {
        v195 = *((_OWORD *)v192 - 1);
        v192 -= 2;
        *((_OWORD *)v194 - 1) = v195;
        v194 -= 16;
        *v192 = 0;
        v192[1] = 0;
      }
      while (v192 != v193);
      v196 = (_QWORD *)*v174;
      v192 = (_QWORD *)v174[1];
    }
    v184 = v191 + 16;
    *v174 = v194;
    v431 = (uint64_t)v196;
    v174[1] = v191 + 16;
    v432 = (uint64_t)v192;
    v197 = v174[2];
    v174[2] = &v189[16 * v190];
    v433 = v197;
    __p = v196;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *v183 = v179;
    v183[1] = v180;
    v184 = v183 + 2;
    v420 = 0;
    v419 = 0;
  }
  v174[1] = v184;
  v198 = v413;
  v413 = 0;
  if (v198)
    (*(void (**)(void *))(*(_QWORD *)v198 + 8))(v198);
  v199 = (std::__shared_weak_count *)v405.n128_u64[1];
  if (v405.n128_u64[1])
  {
    v200 = (unint64_t *)(v405.n128_u64[1] + 8);
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  if (v447)
  {
    v448 = (uint64_t)v447;
    operator delete(v447);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)v416 + 1) - 16) + 48))(*(_QWORD *)(*((_QWORD *)v416 + 1) - 16), 1);
  *(_OWORD *)v403 = *(_OWORD *)a2;
  v404 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v202 = (uint64_t)v429;
  *(_QWORD *)&v402 = v429;
  if (v429)
  {
    v203 = (_QWORD *)operator new();
    *v203 = &unk_1EA99F8E8;
    v203[1] = 0;
    v203[2] = 0;
    v203[3] = v202;
  }
  else
  {
    v203 = 0;
  }
  *((_QWORD *)&v402 + 1) = v203;
  v429 = 0;
  *(_QWORD *)&v401 = v416;
  if (v416)
  {
    v204 = (_QWORD *)operator new();
    v205 = v416;
    *v204 = &unk_1EA99F948;
    v204[1] = 0;
    v204[2] = 0;
    v204[3] = v205;
  }
  else
  {
    v204 = 0;
  }
  *((_QWORD *)&v401 + 1) = v204;
  v416 = 0;
  v442[0] = &unk_1EA99FAC8;
  v442[1] = MIL::Operators::Train::ios16Train::CustomValidators::ValidateConvGrad;
  v443 = v442;
  v441 = 0;
  MIL::IROperator::Make((__int128 *)v403, &v402, &v401, (uint64_t)v442, (uint64_t)v440, a3);
  v206 = v441;
  if (v441 == v440)
  {
    v207 = 4;
    v206 = v440;
  }
  else
  {
    if (!v441)
      goto LABEL_199;
    v207 = 5;
  }
  (*(void (**)(void))(*v206 + 8 * v207))();
LABEL_199:
  v208 = v443;
  if (v443 == v442)
  {
    v209 = 4;
    v208 = v442;
    goto LABEL_203;
  }
  if (v443)
  {
    v209 = 5;
LABEL_203:
    (*(void (**)(void))(*v208 + 8 * v209))();
  }
  v210 = (std::__shared_weak_count *)*((_QWORD *)&v401 + 1);
  if (*((_QWORD *)&v401 + 1))
  {
    v211 = (unint64_t *)(*((_QWORD *)&v401 + 1) + 8);
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = (std::__shared_weak_count *)*((_QWORD *)&v402 + 1);
  if (*((_QWORD *)&v402 + 1))
  {
    v214 = (unint64_t *)(*((_QWORD *)&v402 + 1) + 8);
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  if (SHIBYTE(v404) < 0)
    operator delete(v403[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v216 = __p;
  std::string::basic_string[abi:ne180100]<0>(v397, "dy");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v397, 0, (uint64_t *)&Scalar);
  v399 = Scalar;
  if (Scalar)
  {
    v217 = (std::__shared_weak_count *)operator new();
    v218 = Scalar;
    v217->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v217->__shared_owners_ = 0;
    v217->__shared_weak_owners_ = 0;
    v217[1].__vftable = v218;
  }
  else
  {
    v217 = 0;
  }
  v400 = v217;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v395, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v216 + 24))(v216, &v399, v395);
  if (v396 < 0)
    operator delete(v395[0]);
  v219 = v400;
  if (v400)
  {
    p_shared_owners = (unint64_t *)&v400->__shared_owners_;
    do
      v221 = __ldaxr(p_shared_owners);
    while (__stlxr(v221 - 1, p_shared_owners));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = Scalar;
  Scalar = 0;
  if (v222)
    (*((void (**)(std::__shared_weak_count_vtbl *))v222->~__shared_weak_count + 1))(v222);
  if (v398 < 0)
    operator delete(v397[0]);
  v223 = __p;
  std::string::basic_string[abi:ne180100]<0>(v391, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v391, 0, (uint64_t *)&Scalar);
  v393 = Scalar;
  if (Scalar)
  {
    v224 = (std::__shared_weak_count *)operator new();
    v225 = Scalar;
    v224->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v224->__shared_owners_ = 0;
    v224->__shared_weak_owners_ = 0;
    v224[1].__vftable = v225;
  }
  else
  {
    v224 = 0;
  }
  v394 = v224;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v389, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v223 + 24))(v223, &v393, v389);
  if (v390 < 0)
    operator delete(v389[0]);
  v226 = v394;
  if (v394)
  {
    v227 = (unint64_t *)&v394->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = Scalar;
  Scalar = 0;
  if (v229)
    (*((void (**)(std::__shared_weak_count_vtbl *))v229->~__shared_weak_count + 1))(v229);
  if (v392 < 0)
    operator delete(v391[0]);
  v230 = __p;
  std::string::basic_string[abi:ne180100]<0>(v385, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v385, 0, (uint64_t *)&Scalar);
  v387 = Scalar;
  if (Scalar)
  {
    v231 = (std::__shared_weak_count *)operator new();
    v232 = Scalar;
    v231->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v231->__shared_owners_ = 0;
    v231->__shared_weak_owners_ = 0;
    v231[1].__vftable = v232;
  }
  else
  {
    v231 = 0;
  }
  v388 = v231;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v383, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v230 + 24))(v230, &v387, v383);
  if (v384 < 0)
    operator delete(v383[0]);
  v233 = v388;
  if (v388)
  {
    v234 = (unint64_t *)&v388->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  v236 = Scalar;
  Scalar = 0;
  if (v236)
    (*((void (**)(std::__shared_weak_count_vtbl *))v236->~__shared_weak_count + 1))(v236);
  if (v386 < 0)
    operator delete(v385[0]);
  v237 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 1, &Scalar);
  v381 = Scalar;
  if (Scalar)
  {
    v238 = (std::__shared_weak_count *)operator new();
    v239 = Scalar;
    v238->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v238->__shared_owners_ = 0;
    v238->__shared_weak_owners_ = 0;
    v238[1].__vftable = v239;
  }
  else
  {
    v238 = 0;
  }
  v382 = v238;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v379, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v237 + 24))(v237, &v381, v379);
  if (v380 < 0)
    operator delete(v379[0]);
  v240 = v382;
  if (v382)
  {
    v241 = (unint64_t *)&v382->__shared_owners_;
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = Scalar;
  Scalar = 0;
  if (v243)
    (*((void (**)(std::__shared_weak_count_vtbl *))v243->~__shared_weak_count + 1))(v243);
  v244 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 1, &Scalar);
  v377 = Scalar;
  if (Scalar)
  {
    v245 = (std::__shared_weak_count *)operator new();
    v246 = Scalar;
    v245->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v245->__shared_owners_ = 0;
    v245->__shared_weak_owners_ = 0;
    v245[1].__vftable = v246;
  }
  else
  {
    v245 = 0;
  }
  v378 = v245;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v375, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v244 + 24))(v244, &v377, v375);
  if (v376 < 0)
    operator delete(v375[0]);
  v247 = v378;
  if (v378)
  {
    v248 = (unint64_t *)&v378->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  v250 = Scalar;
  Scalar = 0;
  if (v250)
    (*((void (**)(std::__shared_weak_count_vtbl *))v250->~__shared_weak_count + 1))(v250);
  v251 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 1, &Scalar);
  v373 = Scalar;
  if (Scalar)
  {
    v252 = (std::__shared_weak_count *)operator new();
    v253 = Scalar;
    v252->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v252->__shared_owners_ = 0;
    v252->__shared_weak_owners_ = 0;
    v252[1].__vftable = v253;
  }
  else
  {
    v252 = 0;
  }
  v374 = v252;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v371, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v251 + 24))(v251, &v373, v371);
  if (v372 < 0)
    operator delete(v371[0]);
  v254 = v374;
  if (v374)
  {
    v255 = (unint64_t *)&v374->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v257 = Scalar;
  Scalar = 0;
  if (v257)
    (*((void (**)(std::__shared_weak_count_vtbl *))v257->~__shared_weak_count + 1))(v257);
  v258 = *a3;
  v369 = __p;
  if (__p)
  {
    v259 = (std::__shared_weak_count *)operator new();
    v260 = (std::__shared_weak_count_vtbl *)__p;
    v259->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v259->__shared_owners_ = 0;
    v259->__shared_weak_owners_ = 0;
    v259[1].__vftable = v260;
  }
  else
  {
    v259 = 0;
  }
  v370 = v259;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v258 + 56))(v258, &v369);
  v261 = v370;
  if (v370)
  {
    v262 = (unint64_t *)&v370->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  v264 = __p;
  __p = 0;
  if (v264)
    (*(void (**)(void *))(*(_QWORD *)v264 + 8))(v264);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v265 = __p;
  std::string::basic_string[abi:ne180100]<0>(v365, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v365, 0, (uint64_t *)&Scalar);
  v367 = Scalar;
  if (Scalar)
  {
    v266 = (std::__shared_weak_count *)operator new();
    v267 = Scalar;
    v266->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v266->__shared_owners_ = 0;
    v266->__shared_weak_owners_ = 0;
    v266[1].__vftable = v267;
  }
  else
  {
    v266 = 0;
  }
  v368 = v266;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v265 + 32))(v265, &v367, 3, 5);
  v268 = v368;
  if (v368)
  {
    v269 = (unint64_t *)&v368->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v271 = Scalar;
  Scalar = 0;
  if (v271)
    (*((void (**)(std::__shared_weak_count_vtbl *))v271->~__shared_weak_count + 1))(v271);
  if (v366 < 0)
    operator delete(v365[0]);
  v272 = *a3;
  v363 = __p;
  if (__p)
  {
    v273 = (std::__shared_weak_count *)operator new();
    v274 = (std::__shared_weak_count_vtbl *)__p;
    v273->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v273->__shared_owners_ = 0;
    v273->__shared_weak_owners_ = 0;
    v273[1].__vftable = v274;
  }
  else
  {
    v273 = 0;
  }
  v364 = v273;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v272 + 56))(v272, &v363);
  v275 = v364;
  if (v364)
  {
    v276 = (unint64_t *)&v364->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v278 = __p;
  __p = 0;
  if (v278)
    (*(void (**)(void *))(*(_QWORD *)v278 + 8))(v278);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v279 = __p;
  std::string::basic_string[abi:ne180100]<0>(v359, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v359, 0, (uint64_t *)&Scalar);
  v361 = Scalar;
  if (Scalar)
  {
    v280 = (std::__shared_weak_count *)operator new();
    v281 = Scalar;
    v280->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v280->__shared_owners_ = 0;
    v280->__shared_weak_owners_ = 0;
    v280[1].__vftable = v281;
  }
  else
  {
    v280 = 0;
  }
  v362 = v280;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v357, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v279 + 24))(v279, &v361, 1, v357);
  if (v358 < 0)
    operator delete(v357[0]);
  v282 = v362;
  if (v362)
  {
    v283 = (unint64_t *)&v362->__shared_owners_;
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  v285 = Scalar;
  Scalar = 0;
  if (v285)
    (*((void (**)(std::__shared_weak_count_vtbl *))v285->~__shared_weak_count + 1))(v285);
  if (v360 < 0)
    operator delete(v359[0]);
  v286 = __p;
  std::string::basic_string[abi:ne180100]<0>(v353, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v353, 0, (uint64_t *)&Scalar);
  v355 = Scalar;
  if (Scalar)
  {
    v287 = (std::__shared_weak_count *)operator new();
    v288 = Scalar;
    v287->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v287->__shared_owners_ = 0;
    v287->__shared_weak_owners_ = 0;
    v287[1].__vftable = v288;
  }
  else
  {
    v287 = 0;
  }
  v356 = v287;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v351, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v286 + 24))(v286, &v355, 0, v351);
  if (v352 < 0)
    operator delete(v351[0]);
  v289 = v356;
  if (v356)
  {
    v290 = (unint64_t *)&v356->__shared_owners_;
    do
      v291 = __ldaxr(v290);
    while (__stlxr(v291 - 1, v290));
    if (!v291)
    {
      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
      std::__shared_weak_count::__release_weak(v289);
    }
  }
  v292 = Scalar;
  Scalar = 0;
  if (v292)
    (*((void (**)(std::__shared_weak_count_vtbl *))v292->~__shared_weak_count + 1))(v292);
  if (v354 < 0)
    operator delete(v353[0]);
  v293 = __p;
  std::string::basic_string[abi:ne180100]<0>(v347, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v347, 0, (uint64_t *)&Scalar);
  v349 = Scalar;
  if (Scalar)
  {
    v294 = (std::__shared_weak_count *)operator new();
    v295 = Scalar;
    v294->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v294->__shared_owners_ = 0;
    v294->__shared_weak_owners_ = 0;
    v294[1].__vftable = v295;
  }
  else
  {
    v294 = 0;
  }
  v350 = v294;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v345, "P");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v293 + 24))(v293, &v349, 0, v345);
  if (v346 < 0)
    operator delete(v345[0]);
  v296 = v350;
  if (v350)
  {
    v297 = (unint64_t *)&v350->__shared_owners_;
    do
      v298 = __ldaxr(v297);
    while (__stlxr(v298 - 1, v297));
    if (!v298)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  v299 = Scalar;
  Scalar = 0;
  if (v299)
    (*((void (**)(std::__shared_weak_count_vtbl *))v299->~__shared_weak_count + 1))(v299);
  if (v348 < 0)
    operator delete(v347[0]);
  v300 = __p;
  std::string::basic_string[abi:ne180100]<0>(v341, "dilations");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v341, 0, (uint64_t *)&Scalar);
  v343 = Scalar;
  if (Scalar)
  {
    v301 = (std::__shared_weak_count *)operator new();
    v302 = Scalar;
    v301->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v301->__shared_owners_ = 0;
    v301->__shared_weak_owners_ = 0;
    v301[1].__vftable = v302;
  }
  else
  {
    v301 = 0;
  }
  v344 = v301;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v339, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v300 + 24))(v300, &v343, 0, v339);
  if (v340 < 0)
    operator delete(v339[0]);
  v303 = v344;
  if (v344)
  {
    v304 = (unint64_t *)&v344->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  v306 = Scalar;
  Scalar = 0;
  if (v306)
    (*((void (**)(std::__shared_weak_count_vtbl *))v306->~__shared_weak_count + 1))(v306);
  if (v342 < 0)
    operator delete(v341[0]);
  v307 = *a3;
  v337 = __p;
  if (__p)
  {
    v308 = (std::__shared_weak_count *)operator new();
    v309 = (std::__shared_weak_count_vtbl *)__p;
    v308->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v308->__shared_owners_ = 0;
    v308->__shared_weak_owners_ = 0;
    v308[1].__vftable = v309;
  }
  else
  {
    v308 = 0;
  }
  v338 = v308;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v307 + 56))(v307, &v337);
  v310 = v338;
  if (v338)
  {
    v311 = (unint64_t *)&v338->__shared_owners_;
    do
      v312 = __ldaxr(v311);
    while (__stlxr(v312 - 1, v311));
    if (!v312)
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v310);
    }
  }
  v313 = __p;
  __p = 0;
  if (v313)
    (*(void (**)(void *))(*(_QWORD *)v313 + 8))(v313);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v447);
  v314 = v447;
  std::string::basic_string[abi:ne180100]<0>(v333, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v333, 0, (uint64_t *)&v419);
  v335 = v419;
  if (v419)
  {
    v315 = (std::__shared_weak_count *)operator new();
    v316 = (std::__shared_weak_count_vtbl *)v419;
    v315->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v315->__shared_owners_ = 0;
    v315->__shared_weak_owners_ = 0;
    v315[1].__vftable = v316;
  }
  else
  {
    v315 = 0;
  }
  v336 = v315;
  v419 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "custom");
  std::string::basic_string[abi:ne180100]<0>(&v433, "same");
  std::string::basic_string[abi:ne180100]<0>(v436, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 3);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, _QWORD))v314->~__shared_weak_count
   + 3))(v314, &v335, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v436[i + 2]) < 0)
      operator delete((void *)v436[i]);
  }
  v318 = v336;
  if (v336)
  {
    v319 = (unint64_t *)&v336->__shared_owners_;
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
      std::__shared_weak_count::__release_weak(v318);
    }
  }
  v321 = v419;
  v419 = 0;
  if (v321)
    (*(void (**)(void *))(*(_QWORD *)v321 + 8))(v321);
  if (v334 < 0)
    operator delete(v333[0]);
  v322 = *a3;
  v331 = v447;
  if (v447)
  {
    v323 = (std::__shared_weak_count *)operator new();
    v324 = v447;
    v323->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v323->__shared_owners_ = 0;
    v323->__shared_weak_owners_ = 0;
    v323[1].__vftable = v324;
  }
  else
  {
    v323 = 0;
  }
  v332 = v323;
  v447 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v322 + 56))(v322, &v331);
  v325 = v332;
  if (v332)
  {
    v326 = (unint64_t *)&v332->__shared_owners_;
    do
      v327 = __ldaxr(v326);
    while (__stlxr(v327 - 1, v326));
    if (!v327)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
  }
  v328 = v447;
  v447 = 0;
  if (v328)
    (*((void (**)(std::__shared_weak_count_vtbl *))v328->~__shared_weak_count + 1))(v328);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v416, 0);
  result = (uint64_t)v429;
  if (v429)
  {
    v330 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v429);
    return MEMORY[0x1E0C023A0](v330, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A4E084(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x440], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Train::ios16Train::CustomValidators::ValidateLinearGrad(MIL::Operators::Train::ios16Train::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  const void *ParameterValue;
  unsigned int v6;
  const void *v7;
  unsigned int v8;
  const void *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  MIL::IRNamedValueType **v13;
  MIL::IRNamedValueType **v14;
  unint64_t v15;
  uint64_t Type;
  uint64_t ParameterType;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::value_type *v21;
  std::string::size_type v22;
  int v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type v37;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  MIL::IRValueType *v52;
  MIL::IRValueType *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD **v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  void *__p[2];
  char v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::string v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::string v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::string v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  _DWORD v87[2];
  std::string v88;

  std::string::basic_string[abi:ne180100]<0>(&v88, "has_input_grad");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v6 = MIL::IRValue::GetScalar<BOOL>(ParameterValue);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v88, "has_weight_grad");
  v7 = (const void *)MIL::IROperation::GetParameterValue(this);
  v8 = MIL::IRValue::GetScalar<BOOL>(v7);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v88, "has_bias_grad");
  v9 = (const void *)MIL::IROperation::GetParameterValue(this);
  v10 = MIL::IRValue::GetScalar<BOOL>(v9);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  v11 = v8 + (unint64_t)v6;
  v12 = (*(uint64_t (**)(MIL::Operators::Train::ios16Train::CustomValidators *))(*(_QWORD *)this + 176))(this);
  v13 = *(MIL::IRNamedValueType ***)v12;
  v14 = *(MIL::IRNamedValueType ***)(v12 + 8);
  v15 = ((uint64_t)v14 - *(_QWORD *)v12) >> 4;
  if (v15 != v11 + v10)
  {
    std::to_string(&v84, v15);
    v28 = std::string::insert(&v84, 0, "The length of outputs(");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v85, ") does not match the expected(");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v83, v11 + v10);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v83;
    else
      v32 = (std::string *)v83.__r_.__value_.__r.__words[0];
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    else
      size = v83.__r_.__value_.__l.__size_;
    v34 = std::string::append(&v86, (const std::string::value_type *)v32, size);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v88, ")");
    v21 = (std::string::value_type *)v36->__r_.__value_.__r.__words[0];
    v37 = v36->__r_.__value_.__l.__size_;
    v87[0] = v36->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v87 + 3) = *(_DWORD *)((char *)&v36->__r_.__value_.__r.__words[2] + 3);
    v23 = SHIBYTE(v36->__r_.__value_.__r.__words[2]);
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v39 = (std::__shared_weak_count *)LocationPtr[1];
    v81 = *LocationPtr;
    v82 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(p_shared_owners);
      while (__stxr(v41 + 1, p_shared_owners));
    }
    if (v23 < 0)
    {
      std::string::__init_copy_ctor_external(&v80, v21, v37);
    }
    else
    {
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      v80.__r_.__value_.__l.__size_ = v37;
      LODWORD(v80.__r_.__value_.__r.__words[2]) = v87[0];
      *(_DWORD *)((char *)&v80.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v87 + 3);
      *((_BYTE *)&v80.__r_.__value_.__s + 23) = v23;
    }
    MIL::ValidationResult::ValidationResult(a2, &v81, 310, &v80);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    v65 = v82;
    if (v82)
    {
      v66 = (unint64_t *)&v82->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      goto LABEL_94;
    }
    goto LABEL_95;
  }
  if (!v6)
    goto LABEL_43;
  if (v14 == v13)
    goto LABEL_100;
  Type = MIL::IRNamedValueType::GetType(*v13);
  std::string::basic_string[abi:ne180100]<0>(&v88, "x");
  ParameterType = MIL::IROperation::GetParameterType(this);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (Type == ParameterType)
  {
LABEL_43:
    if (v8)
    {
      if (v6 >= (unint64_t)((uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 4))
        goto LABEL_100;
      v42 = MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*(_QWORD *)v12 + 16 * v6));
      std::string::basic_string[abi:ne180100]<0>(&v88, "weight");
      v43 = MIL::IROperation::GetParameterType(this);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      if (v42 != v43)
      {
        std::to_string(&v86, v6);
        v44 = std::string::insert(&v86, 0, "The shape and data type of the output at index = ");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        v46 = std::string::append(&v88, " must match input 'weight'");
        v21 = (std::string::value_type *)v46->__r_.__value_.__r.__words[0];
        v47 = v46->__r_.__value_.__l.__size_;
        LODWORD(v85.__r_.__value_.__l.__data_) = v46->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v85.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v46->__r_.__value_.__r.__words[2]
                                                                           + 3);
        v23 = SHIBYTE(v46->__r_.__value_.__r.__words[2]);
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        v48 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v49 = (std::__shared_weak_count *)v48[1];
        v75 = *v48;
        v76 = v49;
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        if (v23 < 0)
        {
          std::string::__init_copy_ctor_external(&v74, v21, v47);
        }
        else
        {
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
          v74.__r_.__value_.__l.__size_ = v47;
          LODWORD(v74.__r_.__value_.__r.__words[2]) = v85.__r_.__value_.__l.__data_;
          *(_DWORD *)((char *)&v74.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v85.__r_.__value_.__r.__words
                                                                                 + 3);
          *((_BYTE *)&v74.__r_.__value_.__s + 23) = v23;
        }
        MIL::ValidationResult::ValidationResult(a2, &v75, 313, &v74);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        v65 = v76;
        if (v76)
        {
          v69 = (unint64_t *)&v76->__shared_owners_;
          do
            v67 = __ldaxr(v69);
          while (__stlxr(v67 - 1, v69));
          goto LABEL_94;
        }
LABEL_95:
        if ((v23 & 0x80000000) == 0)
          return;
        goto LABEL_96;
      }
    }
    if (!v10)
      goto LABEL_80;
    if (v11 < (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 4)
    {
      v52 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*(_QWORD *)v12 + 16 * v11));
      std::string::basic_string[abi:ne180100]<0>(&v88, "weight");
      v53 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      v54 = MIL::IRValueType::AsTensorType(v52);
      v55 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 96))(v54);
      v56 = MIL::IRValueType::AsTensorType(v53);
      v57 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 96))(v56);
      if (v55[1] - *v55 != 8 || *(_QWORD *)*v55 != **v57)
      {
        v58 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v59 = (std::__shared_weak_count *)v58[1];
        v72 = *v58;
        v73 = v59;
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "The shape of output 'db'([D_out]) must match the shape with the first dimension size of input 'weight'");
        MIL::ValidationResult::ValidationResult(a2, &v72, 313, __p);
        if (v71 < 0)
          operator delete(__p[0]);
        v62 = v73;
        if (v73)
        {
          v63 = (unint64_t *)&v73->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        return;
      }
LABEL_80:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
LABEL_100:
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  std::to_string(&v86, 0);
  v18 = std::string::insert(&v86, 0, "The shape and data type of the output at index = ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v88, " must match input 'x'");
  v21 = (std::string::value_type *)v20->__r_.__value_.__r.__words[0];
  v22 = v20->__r_.__value_.__l.__size_;
  LODWORD(v85.__r_.__value_.__l.__data_) = v20->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v85.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v20->__r_.__value_.__r.__words[2] + 3);
  v23 = SHIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  v24 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v25 = (std::__shared_weak_count *)v24[1];
  v78 = *v24;
  v79 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (v23 < 0)
  {
    std::string::__init_copy_ctor_external(&v77, v21, v22);
  }
  else
  {
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    v77.__r_.__value_.__l.__size_ = v22;
    LODWORD(v77.__r_.__value_.__r.__words[2]) = v85.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v77.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v85.__r_.__value_.__r.__words + 3);
    *((_BYTE *)&v77.__r_.__value_.__s + 23) = v23;
  }
  MIL::ValidationResult::ValidationResult(a2, &v78, 313, &v77);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  v65 = v79;
  if (!v79)
    goto LABEL_95;
  v68 = (unint64_t *)&v79->__shared_owners_;
  do
    v67 = __ldaxr(v68);
  while (__stlxr(v67 - 1, v68));
LABEL_94:
  if (v67)
    goto LABEL_95;
  ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
  std::__shared_weak_count::__release_weak(v65);
  if (v23 < 0)
LABEL_96:
    operator delete(v21);
}

void sub_1E0A4F1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  int v53;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (v53 < 0)
    operator delete(v52);
  _Unwind_Resume(a1);
}

void MIL::Operators::Train::ios16Train::CustomValueTypeInference::ValueTypeInferenceLinearTrain(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceLinear(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0A4F400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Train::ios16Train::LinearTrain::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char **v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  void **v61;
  char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  char **v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void **v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  void *v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  void **v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void **v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  void **v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  void *v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  void **v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  void **v153;
  uint64_t result;
  uint64_t v155;
  void **v156;
  std::__shared_weak_count *v157;
  void *v158[2];
  char v159;
  void *v160[2];
  char v161;
  void *v162;
  std::__shared_weak_count *v163;
  void *v164[2];
  char v165;
  void *v166[2];
  char v167;
  void *v168;
  std::__shared_weak_count *v169;
  void *v170[2];
  char v171;
  void *v172[2];
  char v173;
  void *v174;
  std::__shared_weak_count *v175;
  void *v176[2];
  char v177;
  void *v178[2];
  char v179;
  void *v180;
  std::__shared_weak_count *v181;
  void **v182;
  std::__shared_weak_count *v183;
  void *v184[2];
  char v185;
  void *v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  void *v190[2];
  char v191;
  void *v192;
  std::__shared_weak_count *v193;
  void *v194[2];
  char v195;
  void *v196[2];
  char v197;
  void *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202[2];
  char v203;
  void *v204;
  std::__shared_weak_count *v205;
  __int128 v206;
  __int128 v207;
  void *v208[2];
  uint64_t v209;
  __n128 v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  char **v214;
  __n128 v215;
  __n128 v216;
  void *__p;
  void *v218;
  _QWORD *v219;
  __n128 v220;
  _QWORD *v221;
  void **v222;
  void **v223;
  void **v224;
  char *v225;
  char **v226;
  _QWORD v227[3];
  _QWORD *v228;
  _BYTE v229[24];
  _BYTE *v230;
  _BYTE v231[24];
  _BYTE *v232;
  void *v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD v236[3];

  v236[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v221 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = (char *)operator new(0x10uLL);
  v223 = (void **)(v9 + 16);
  v224 = (void **)(v9 + 16);
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v222 = (void **)v9;
  v233 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v222);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = operator new(0x10uLL);
  v219 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  __p = v12;
  v218 = v12 + 2;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v233, 2, &v220);
  MIL::IRParameter::Make(&v220, &v212);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v212);
  v13 = v212;
  v212 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v220.n128_u64[1];
  if (v220.n128_u64[1])
  {
    v15 = (unint64_t *)(v220.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v218 = __p;
    operator delete(__p);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  v17 = v221;
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = (char *)operator new(0x10uLL);
  v223 = (void **)(v20 + 16);
  v224 = (void **)(v20 + 16);
  *(_QWORD *)v20 = v18;
  *((_QWORD *)v20 + 1) = v19;
  v222 = (void **)v20;
  v233 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v222);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(0x10uLL);
  v219 = v23 + 2;
  *v23 = v21;
  v23[1] = v22;
  __p = v23;
  v218 = v23 + 2;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v233, 2, &v216);
  MIL::IRParameter::Make(&v216, &v212);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v17, "weight", &v212);
  v24 = v212;
  v212 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v216.n128_u64[1];
  if (v216.n128_u64[1])
  {
    v26 = (unint64_t *)(v216.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v218 = __p;
    operator delete(__p);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  v28 = v221;
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = (void **)operator new(8uLL);
  v222 = v30;
  *v30 = (void *)v29;
  v223 = v30 + 1;
  v224 = v30 + 1;
  v233 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v222);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(8uLL);
  __p = v32;
  *v32 = v31;
  v219 = v32 + 1;
  v218 = v32 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v233, 2, &v215);
  MIL::IRParameter::Make(&v215, &v212);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v28, "bias", &v212);
  v34 = v212;
  v212 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v215.n128_u64[1];
  if (v215.n128_u64[1])
  {
    v36 = (unint64_t *)(v215.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (__p)
  {
    v218 = __p;
    operator delete(__p);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 48))(*((_QWORD *)v33 + 5), 1);
  v214 = 0;
  v38 = operator new();
  *(_QWORD *)v38 = 0;
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)(v38 + 16) = 0;
  v222 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v214, (void **)v38);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v222, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v214, 1uLL);
  v39 = v214;
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  __p = v41;
  *v41 = v40;
  v219 = v41 + 1;
  v218 = v41 + 1;
  v236[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v233 = v43;
  *v43 = v42;
  v234 = (uint64_t)(v43 + 1);
  v235 = v43 + 1;
  v236[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v233);
  MIL::IRParameter::MakeTypeSet((uint64_t)v236, 2, &v210);
  MIL::IRParameter::Make(&v210, &v211);
  v44 = v211;
  v212 = v211;
  if (v211)
  {
    v45 = (_QWORD *)operator new();
    v46 = v211;
    *v45 = &unk_1EA99F888;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v46;
  }
  else
  {
    v45 = 0;
  }
  v213 = v45;
  v211 = 0;
  v47 = v39[2];
  v48 = v39[1];
  if (v48 >= v47)
  {
    v50 = (v48 - *v39) >> 4;
    v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v52 = v47 - *v39;
    if (v52 >> 3 > v51)
      v51 = v52 >> 3;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
      v53 = 0xFFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    v226 = v39 + 2;
    v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v39 + 2), v53);
    v56 = (uint64_t *)&v54[16 * v50];
    *v56 = v44;
    v56[1] = (uint64_t)v45;
    v213 = 0;
    v212 = 0;
    v58 = *v39;
    v57 = v39[1];
    if (v57 == *v39)
    {
      v61 = (void **)v39[1];
      v59 = &v54[16 * v50];
    }
    else
    {
      v59 = &v54[16 * v50];
      do
      {
        v60 = *((_OWORD *)v57 - 1);
        v57 -= 16;
        *((_OWORD *)v59 - 1) = v60;
        v59 -= 16;
        *(_QWORD *)v57 = 0;
        *((_QWORD *)v57 + 1) = 0;
      }
      while (v57 != v58);
      v61 = (void **)*v39;
      v57 = v39[1];
    }
    v49 = (char *)(v56 + 2);
    *v39 = v59;
    v222 = v61;
    v223 = v61;
    v39[1] = (char *)(v56 + 2);
    v224 = (void **)v57;
    v62 = v39[2];
    v39[2] = &v54[16 * v55];
    v225 = v62;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v222);
  }
  else
  {
    *(_QWORD *)v48 = v44;
    *((_QWORD *)v48 + 1) = v45;
    v49 = v48 + 16;
    v213 = 0;
    v212 = 0;
  }
  v39[1] = v49;
  v63 = v211;
  v211 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v210.n128_u64[1];
  if (v210.n128_u64[1])
  {
    v65 = (unint64_t *)(v210.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (v233)
  {
    v234 = (uint64_t)v233;
    operator delete(v233);
  }
  if (__p)
  {
    v218 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v208 = *(_OWORD *)a2;
  v209 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v67 = (uint64_t)v221;
  *(_QWORD *)&v207 = v221;
  if (v221)
  {
    v68 = (_QWORD *)operator new();
    *v68 = &unk_1EA99F8E8;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v67;
  }
  else
  {
    v68 = 0;
  }
  *((_QWORD *)&v207 + 1) = v68;
  v221 = 0;
  *(_QWORD *)&v206 = v214;
  if (v214)
  {
    v69 = (_QWORD *)operator new();
    v70 = v214;
    *v69 = &unk_1EA99F948;
    v69[1] = 0;
    v69[2] = 0;
    v69[3] = v70;
  }
  else
  {
    v69 = 0;
  }
  *((_QWORD *)&v206 + 1) = v69;
  v214 = 0;
  v232 = 0;
  v230 = 0;
  MIL::IROperator::Make((__int128 *)v208, &v207, &v206, (uint64_t)v231, (uint64_t)v229, a3);
  v71 = v230;
  if (v230 == v229)
  {
    v72 = 4;
    v71 = v229;
  }
  else
  {
    if (!v230)
      goto LABEL_73;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_73:
  v73 = v232;
  if (v232 == v231)
  {
    v74 = 4;
    v73 = v231;
    goto LABEL_77;
  }
  if (v232)
  {
    v74 = 5;
LABEL_77:
    (*(void (**)(void))(*v73 + 8 * v74))();
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
  if (*((_QWORD *)&v206 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  if (*((_QWORD *)&v207 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (SHIBYTE(v209) < 0)
    operator delete(v208[0]);
  v81 = *a3;
  v227[0] = &off_1EA99FBD8;
  v227[1] = MIL::Operators::Train::ios16Train::CustomValueTypeInference::ValueTypeInferenceLinearTrain;
  v228 = v227;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v227);
  v82 = v228;
  if (v228 == v227)
  {
    v83 = 4;
    v82 = v227;
  }
  else
  {
    if (!v228)
      goto LABEL_95;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v222);
  v84 = v222;
  std::string::basic_string[abi:ne180100]<0>(v202, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v202, 0, (uint64_t *)&__p);
  v204 = __p;
  if (__p)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = (std::__shared_weak_count_vtbl *)__p;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v205 = v85;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "T");
  (*((void (**)(void **, void **, void **))*v84 + 3))(v84, &v204, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v87 = v205;
  if (v205)
  {
    p_shared_owners = (unint64_t *)&v205->__shared_owners_;
    do
      v89 = __ldaxr(p_shared_owners);
    while (__stlxr(v89 - 1, p_shared_owners));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  if (v203 < 0)
    operator delete(v202[0]);
  v91 = v222;
  std::string::basic_string[abi:ne180100]<0>(v196, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v196, 0, (uint64_t *)&__p);
  v198 = __p;
  if (__p)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = (std::__shared_weak_count_vtbl *)__p;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v199 = v92;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v194, "T");
  (*((void (**)(void **, void **, void **))*v91 + 3))(v91, &v198, v194);
  if (v195 < 0)
    operator delete(v194[0]);
  v94 = v199;
  if (v199)
  {
    v95 = (unint64_t *)&v199->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = __p;
  __p = 0;
  if (v97)
    (*(void (**)(void *))(*(_QWORD *)v97 + 8))(v97);
  if (v197 < 0)
    operator delete(v196[0]);
  v98 = v222;
  std::string::basic_string[abi:ne180100]<0>(v190, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v190, 1, (uint64_t *)&__p);
  v192 = __p;
  if (__p)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = (std::__shared_weak_count_vtbl *)__p;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v193 = v99;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v188, "T");
  (*((void (**)(void **, void **, void **))*v98 + 3))(v98, &v192, v188);
  if (v189 < 0)
    operator delete(v188[0]);
  v101 = v193;
  if (v193)
  {
    v102 = (unint64_t *)&v193->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = __p;
  __p = 0;
  if (v104)
    (*(void (**)(void *))(*(_QWORD *)v104 + 8))(v104);
  if (v191 < 0)
    operator delete(v190[0]);
  v105 = v222;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v186 = __p;
  if (__p)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = (std::__shared_weak_count_vtbl *)__p;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v187 = v106;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v184, "T");
  (*((void (**)(void **, void **, void **))*v105 + 3))(v105, &v186, v184);
  if (v185 < 0)
    operator delete(v184[0]);
  v108 = v187;
  if (v187)
  {
    v109 = (unint64_t *)&v187->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = __p;
  __p = 0;
  if (v111)
    (*(void (**)(void *))(*(_QWORD *)v111 + 8))(v111);
  v112 = *a3;
  v182 = v222;
  if (v222)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v222;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v183 = v113;
  v222 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v112 + 56))(v112, &v182);
  v115 = v183;
  if (v183)
  {
    v116 = (unint64_t *)&v183->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v222;
  v222 = 0;
  if (v118)
    (*((void (**)(void **))*v118 + 1))(v118);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v222);
  v119 = v222;
  std::string::basic_string[abi:ne180100]<0>(v178, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v178, 0, (uint64_t *)&__p);
  v180 = __p;
  if (__p)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)__p;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v181 = v120;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v176, "D_in");
  (*((void (**)(void **, void **, uint64_t, void **))*v119 + 3))(v119, &v180, -1, v176);
  if (v177 < 0)
    operator delete(v176[0]);
  v122 = v181;
  if (v181)
  {
    v123 = (unint64_t *)&v181->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = __p;
  __p = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  if (v179 < 0)
    operator delete(v178[0]);
  v126 = v222;
  std::string::basic_string[abi:ne180100]<0>(v172, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v172, 0, (uint64_t *)&__p);
  v174 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v175 = v127;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v170, "D_out");
  (*((void (**)(void **, void **, _QWORD, void **))*v126 + 3))(v126, &v174, 0, v170);
  if (v171 < 0)
    operator delete(v170[0]);
  v129 = v175;
  if (v175)
  {
    v130 = (unint64_t *)&v175->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = __p;
  __p = 0;
  if (v132)
    (*(void (**)(void *))(*(_QWORD *)v132 + 8))(v132);
  if (v173 < 0)
    operator delete(v172[0]);
  v133 = v222;
  std::string::basic_string[abi:ne180100]<0>(v166, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v166, 0, (uint64_t *)&__p);
  v168 = __p;
  if (__p)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)__p;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v169 = v134;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v164, "D_in");
  (*((void (**)(void **, void **, uint64_t, void **))*v133 + 3))(v133, &v168, 1, v164);
  if (v165 < 0)
    operator delete(v164[0]);
  v136 = v169;
  if (v169)
  {
    v137 = (unint64_t *)&v169->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = __p;
  __p = 0;
  if (v139)
    (*(void (**)(void *))(*(_QWORD *)v139 + 8))(v139);
  if (v167 < 0)
    operator delete(v166[0]);
  v140 = v222;
  std::string::basic_string[abi:ne180100]<0>(v160, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v160, 1, (uint64_t *)&__p);
  v162 = __p;
  if (__p)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = (std::__shared_weak_count_vtbl *)__p;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v163 = v141;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v158, "D_out");
  (*((void (**)(void **, void **, _QWORD, void **))*v140 + 3))(v140, &v162, 0, v158);
  if (v159 < 0)
    operator delete(v158[0]);
  v143 = v163;
  if (v163)
  {
    v144 = (unint64_t *)&v163->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = __p;
  __p = 0;
  if (v146)
    (*(void (**)(void *))(*(_QWORD *)v146 + 8))(v146);
  if (v161 < 0)
    operator delete(v160[0]);
  v147 = *a3;
  v156 = v222;
  if (v222)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = v222;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = (std::__shared_weak_count_vtbl *)v149;
  }
  else
  {
    v148 = 0;
  }
  v157 = v148;
  v222 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v147 + 56))(v147, &v156);
  v150 = v157;
  if (v157)
  {
    v151 = (unint64_t *)&v157->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v222;
  v222 = 0;
  if (v153)
    (*((void (**)(void **))*v153 + 1))(v153);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v214, 0);
  result = (uint64_t)v221;
  if (v221)
  {
    v155 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v221);
    return MEMORY[0x1E0C023A0](v155, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A506A4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 248);
  *(_QWORD *)(v2 - 248) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x270], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 256), 0);
  _Unwind_Resume(a1);
}

void sub_1E0A50A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 184);
  if (v2 != v0 && !v2)
    JUMPOUT(0x1E0A509ECLL);
  JUMPOUT(0x1E0A509E8);
}

void sub_1E0A50A5C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v2 - 152);
  if (v3 == v1)
  {
    v4 = 4;
    v3 = (_QWORD *)(v2 - 176);
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      MIL::Operators::Common::ios15::Conv::Make(v0, (_QWORD *)(v2 - 144), (uint64_t)&STACK[0x210]);
      JUMPOUT(0x1E0A50A9CLL);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

void sub_1E0A50AB4()
{
  JUMPOUT(0x1E0A50A1CLL);
}

void sub_1E0A50ABC()
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  JUMPOUT(0x1E0A50AC8);
}

void sub_1E0A50AF4()
{
  JUMPOUT(0x1E0A50BE8);
}

void sub_1E0A50B04()
{
  JUMPOUT(0x1E0A50A04);
}

void sub_1E0A50B1C()
{
  unint64_t v0;
  void *v1;

  v0 = STACK[0x260];
  STACK[0x260] = 0;
  if (v0)
    (*(void (**)(unint64_t))(*(_QWORD *)v0 + 8))(v0);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x278]);
  v1 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v1;
    operator delete(v1);
  }
  JUMPOUT(0x1E0A50C28);
}

void sub_1E0A50BFC()
{
  JUMPOUT(0x1E0A50C10);
}

void sub_1E0A50C24()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 248);
  if (v1)
  {
    *(_QWORD *)(v0 - 240) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1E0A50A10);
}

void sub_1E0A50C3C()
{
  JUMPOUT(0x1E0A50A10);
}

uint64_t MIL::Operators::Train::ios16Train::LinearGrad::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  std::__shared_weak_count_vtbl *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  std::__shared_weak_count_vtbl *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  char *v88;
  char *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  char **v94;
  uint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t *v111;
  char *v112;
  char *v113;
  char *v114;
  __int128 v115;
  char *v116;
  char *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  char **v122;
  uint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t *v139;
  char *v140;
  char *v141;
  char *v142;
  __int128 v143;
  char *v144;
  char *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  char **v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  void *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *p_shared_owners;
  unint64_t v172;
  std::__shared_weak_count_vtbl *v173;
  void *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count_vtbl *v180;
  void *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count_vtbl *v187;
  void *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count_vtbl *v194;
  void *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count_vtbl *v201;
  void *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count_vtbl *v208;
  void *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count_vtbl *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  void *v222;
  void *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count_vtbl *v229;
  void *v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count_vtbl *v236;
  void *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count_vtbl *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count_vtbl *v243;
  void *v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count_vtbl *v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count_vtbl *v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  void *v257;
  uint64_t result;
  uint64_t v259;
  void *v260;
  std::__shared_weak_count *v261;
  void *v262[2];
  char v263;
  void *v264[2];
  char v265;
  std::__shared_weak_count_vtbl *v266;
  std::__shared_weak_count *v267;
  void *v268[2];
  char v269;
  void *v270[2];
  char v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  void *v274[2];
  char v275;
  void *v276[2];
  char v277;
  std::__shared_weak_count_vtbl *v278;
  std::__shared_weak_count *v279;
  void *v280[2];
  char v281;
  void *v282[2];
  char v283;
  std::__shared_weak_count_vtbl *v284;
  std::__shared_weak_count *v285;
  void *v286;
  std::__shared_weak_count *v287;
  void *v288[2];
  char v289;
  std::__shared_weak_count_vtbl *v290;
  std::__shared_weak_count *v291;
  void *v292[2];
  char v293;
  std::__shared_weak_count_vtbl *v294;
  std::__shared_weak_count *v295;
  void *v296[2];
  char v297;
  std::__shared_weak_count_vtbl *v298;
  std::__shared_weak_count *v299;
  void *v300[2];
  char v301;
  void *v302[2];
  char v303;
  std::__shared_weak_count_vtbl *v304;
  std::__shared_weak_count *v305;
  void *v306[2];
  char v307;
  void *v308[2];
  char v309;
  std::__shared_weak_count_vtbl *v310;
  std::__shared_weak_count *v311;
  void *v312[2];
  char v313;
  void *v314[2];
  char v315;
  std::__shared_weak_count_vtbl *v316;
  std::__shared_weak_count *v317;
  void *v318[2];
  char v319;
  void *v320[2];
  char v321;
  std::__shared_weak_count_vtbl *v322;
  std::__shared_weak_count *v323;
  __int128 v324;
  __int128 v325;
  void *v326[2];
  uint64_t v327;
  __n128 v328;
  __n128 v329;
  __n128 v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  char **v334;
  __n128 v335;
  __n128 v336;
  __n128 v337;
  __n128 v338;
  __n128 v339;
  __n128 v340;
  __n128 v341;
  _QWORD *v342;
  void *__p;
  void *v344;
  char *v345;
  char *v346;
  char **v347;
  _QWORD v348[3];
  _QWORD *v349;
  _BYTE v350[24];
  _BYTE *v351;
  _QWORD v352[3];
  _QWORD *v353;
  void *v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v361;
  uint64_t v362;

  v362 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v342 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = (char *)operator new(0x10uLL);
  v345 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  __p = v9;
  v344 = v9 + 16;
  v354 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v12->__on_zero_shared;
  v361 = &v12->__on_zero_shared;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  Scalar = v12;
  v355 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v354, 2, &v341);
  MIL::IRParameter::Make(&v341, &v332);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v332);
  v13 = v332;
  v332 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v341.n128_u64[1];
  if (v341.n128_u64[1])
  {
    v15 = (unint64_t *)(v341.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v344 = __p;
    operator delete(__p);
  }
  v17 = v342;
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = (char *)operator new(0x10uLL);
  v345 = v20 + 16;
  *(_QWORD *)v20 = v18;
  *((_QWORD *)v20 + 1) = v19;
  __p = v20;
  v344 = v20 + 16;
  v354 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v23->__on_zero_shared;
  v361 = &v23->__on_zero_shared;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  v23->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  Scalar = v23;
  v355 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v354, 2, &v340);
  MIL::IRParameter::Make(&v340, &v332);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v17, "weight", &v332);
  v24 = v332;
  v332 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v340.n128_u64[1];
  if (v340.n128_u64[1])
  {
    v26 = (unint64_t *)(v340.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v344 = __p;
    operator delete(__p);
  }
  v28 = v342;
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = (char *)operator new(8uLL);
  __p = v30;
  *(_QWORD *)v30 = v29;
  v345 = v30 + 8;
  v344 = v30 + 8;
  v354 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v32;
  v32->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v31;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v32->~__shared_weak_count_0;
  v361 = &v32->~__shared_weak_count_0;
  v355 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v354, 2, &v339);
  MIL::IRParameter::Make(&v339, &v332);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v28, "bias", &v332);
  v34 = v332;
  v332 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v339.n128_u64[1];
  if (v339.n128_u64[1])
  {
    v36 = (unint64_t *)(v339.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v344 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 48))(*((_QWORD *)v33 + 5), 1);
  v38 = v342;
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = (char *)operator new(8uLL);
  __p = v40;
  *(_QWORD *)v40 = v39;
  v345 = v40 + 8;
  v344 = v40 + 8;
  v354 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v42;
  v42->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v42->~__shared_weak_count_0;
  v361 = &v42->~__shared_weak_count_0;
  v355 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v354, 2, &v338);
  MIL::IRParameter::Make(&v338, &v332);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>(v38, "dy", &v332);
  v43 = v332;
  v332 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v338.n128_u64[1];
  if (v338.n128_u64[1])
  {
    v45 = (unint64_t *)(v338.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v344 = __p;
    operator delete(__p);
  }
  v47 = v342;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v337);
  MIL::IRParameter::Make(&v337, (uint64_t *)&__p);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v47, "has_input_grad", (uint64_t *)&__p);
  v49 = __p;
  __p = 0;
  if (v49)
    (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
  v50 = (std::__shared_weak_count *)v337.n128_u64[1];
  if (v337.n128_u64[1])
  {
    v51 = (unint64_t *)(v337.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v53 = v342;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v336);
  MIL::IRParameter::Make(&v336, (uint64_t *)&__p);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v53, "has_weight_grad", (uint64_t *)&__p);
  v55 = __p;
  __p = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v336.n128_u64[1];
  if (v336.n128_u64[1])
  {
    v57 = (unint64_t *)(v336.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  v59 = v342;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v335);
  MIL::IRParameter::Make(&v335, (uint64_t *)&__p);
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v59, "has_bias_grad", (uint64_t *)&__p);
  v61 = __p;
  __p = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v335.n128_u64[1];
  if (v335.n128_u64[1])
  {
    v63 = (unint64_t *)(v335.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  v334 = 0;
  v65 = operator new();
  *(_QWORD *)v65 = 0;
  *(_QWORD *)(v65 + 8) = 0;
  *(_QWORD *)(v65 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v334, (void **)v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v334, 3uLL);
  v66 = v334;
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v68;
  v68->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v67;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v68->~__shared_weak_count_0;
  v361 = &v68->~__shared_weak_count_0;
  v357 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v354 = v70;
  *v70 = v69;
  v355 = (uint64_t)(v70 + 1);
  v356 = v70 + 1;
  v358 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v354);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v357, 2, &v330);
  MIL::IRParameter::Make(&v330, &v331);
  v71 = v331;
  v332 = v331;
  if (v331)
  {
    v72 = (_QWORD *)operator new();
    v73 = v331;
    *v72 = &unk_1EA99F888;
    v72[1] = 0;
    v72[2] = 0;
    v72[3] = v73;
  }
  else
  {
    v72 = 0;
  }
  v333 = v72;
  v331 = 0;
  v74 = v66[2];
  v75 = v66[1];
  if (v75 >= v74)
  {
    v77 = (v75 - *v66) >> 4;
    v78 = v77 + 1;
    if ((unint64_t)(v77 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v79 = v74 - *v66;
    if (v79 >> 3 > v78)
      v78 = v79 >> 3;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
      v80 = 0xFFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    v347 = v66 + 2;
    v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v66 + 2), v80);
    v83 = (uint64_t *)&v81[16 * v77];
    *v83 = v71;
    v83[1] = (uint64_t)v72;
    v333 = 0;
    v332 = 0;
    v85 = *v66;
    v84 = v66[1];
    if (v84 == *v66)
    {
      v88 = v66[1];
      v86 = &v81[16 * v77];
    }
    else
    {
      v86 = &v81[16 * v77];
      do
      {
        v87 = *((_OWORD *)v84 - 1);
        v84 -= 16;
        *((_OWORD *)v86 - 1) = v87;
        v86 -= 16;
        *(_QWORD *)v84 = 0;
        *((_QWORD *)v84 + 1) = 0;
      }
      while (v84 != v85);
      v88 = *v66;
      v84 = v66[1];
    }
    v76 = (char *)(v83 + 2);
    *v66 = v86;
    v344 = v88;
    v66[1] = (char *)(v83 + 2);
    v345 = v84;
    v89 = v66[2];
    v66[2] = &v81[16 * v82];
    v346 = v89;
    __p = v88;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v75 = v71;
    *((_QWORD *)v75 + 1) = v72;
    v76 = v75 + 16;
    v333 = 0;
    v332 = 0;
  }
  v66[1] = v76;
  v90 = v331;
  v331 = 0;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v330.n128_u64[1];
  if (v330.n128_u64[1])
  {
    v92 = (unint64_t *)(v330.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v354)
  {
    v355 = (uint64_t)v354;
    operator delete(v354);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v334[1] - 2) + 48))(*((_QWORD *)v334[1] - 2), 1);
  v94 = v334;
  v95 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v96 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v96;
  v96->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v95;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v96->~__shared_weak_count_0;
  v361 = &v96->~__shared_weak_count_0;
  v357 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v97 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v98 = operator new(8uLL);
  v354 = v98;
  *v98 = v97;
  v355 = (uint64_t)(v98 + 1);
  v356 = v98 + 1;
  v358 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v354);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v357, 2, &v329);
  MIL::IRParameter::Make(&v329, &v331);
  v99 = v331;
  v332 = v331;
  if (v331)
  {
    v100 = (_QWORD *)operator new();
    v101 = v331;
    *v100 = &unk_1EA99F888;
    v100[1] = 0;
    v100[2] = 0;
    v100[3] = v101;
  }
  else
  {
    v100 = 0;
  }
  v333 = v100;
  v331 = 0;
  v102 = v94[2];
  v103 = v94[1];
  if (v103 >= v102)
  {
    v105 = (v103 - *v94) >> 4;
    v106 = v105 + 1;
    if ((unint64_t)(v105 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v107 = v102 - *v94;
    if (v107 >> 3 > v106)
      v106 = v107 >> 3;
    if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
      v108 = 0xFFFFFFFFFFFFFFFLL;
    else
      v108 = v106;
    v347 = v94 + 2;
    v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v94 + 2), v108);
    v111 = (uint64_t *)&v109[16 * v105];
    *v111 = v99;
    v111[1] = (uint64_t)v100;
    v333 = 0;
    v332 = 0;
    v113 = *v94;
    v112 = v94[1];
    if (v112 == *v94)
    {
      v116 = v94[1];
      v114 = &v109[16 * v105];
    }
    else
    {
      v114 = &v109[16 * v105];
      do
      {
        v115 = *((_OWORD *)v112 - 1);
        v112 -= 16;
        *((_OWORD *)v114 - 1) = v115;
        v114 -= 16;
        *(_QWORD *)v112 = 0;
        *((_QWORD *)v112 + 1) = 0;
      }
      while (v112 != v113);
      v116 = *v94;
      v112 = v94[1];
    }
    v104 = (char *)(v111 + 2);
    *v94 = v114;
    v344 = v116;
    v94[1] = (char *)(v111 + 2);
    v345 = v112;
    v117 = v94[2];
    v94[2] = &v109[16 * v110];
    v346 = v117;
    __p = v116;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v103 = v99;
    *((_QWORD *)v103 + 1) = v100;
    v104 = v103 + 16;
    v333 = 0;
    v332 = 0;
  }
  v94[1] = v104;
  v118 = v331;
  v331 = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  v119 = (std::__shared_weak_count *)v329.n128_u64[1];
  if (v329.n128_u64[1])
  {
    v120 = (unint64_t *)(v329.n128_u64[1] + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (v354)
  {
    v355 = (uint64_t)v354;
    operator delete(v354);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v334[1] - 2) + 48))(*((_QWORD *)v334[1] - 2), 1);
  v122 = v334;
  v123 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v124 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v124;
  v124->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v123;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v124->~__shared_weak_count_0;
  v361 = &v124->~__shared_weak_count_0;
  v357 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v125 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v126 = operator new(8uLL);
  v354 = v126;
  *v126 = v125;
  v355 = (uint64_t)(v126 + 1);
  v356 = v126 + 1;
  v358 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v354);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v357, 2, &v328);
  MIL::IRParameter::Make(&v328, &v331);
  v127 = v331;
  v332 = v331;
  if (v331)
  {
    v128 = (_QWORD *)operator new();
    v129 = v331;
    *v128 = &unk_1EA99F888;
    v128[1] = 0;
    v128[2] = 0;
    v128[3] = v129;
  }
  else
  {
    v128 = 0;
  }
  v333 = v128;
  v331 = 0;
  v130 = v122[2];
  v131 = v122[1];
  if (v131 >= v130)
  {
    v133 = (v131 - *v122) >> 4;
    v134 = v133 + 1;
    if ((unint64_t)(v133 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v135 = v130 - *v122;
    if (v135 >> 3 > v134)
      v134 = v135 >> 3;
    if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF0)
      v136 = 0xFFFFFFFFFFFFFFFLL;
    else
      v136 = v134;
    v347 = v122 + 2;
    v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v122 + 2), v136);
    v139 = (uint64_t *)&v137[16 * v133];
    *v139 = v127;
    v139[1] = (uint64_t)v128;
    v333 = 0;
    v332 = 0;
    v141 = *v122;
    v140 = v122[1];
    if (v140 == *v122)
    {
      v144 = v122[1];
      v142 = &v137[16 * v133];
    }
    else
    {
      v142 = &v137[16 * v133];
      do
      {
        v143 = *((_OWORD *)v140 - 1);
        v140 -= 16;
        *((_OWORD *)v142 - 1) = v143;
        v142 -= 16;
        *(_QWORD *)v140 = 0;
        *((_QWORD *)v140 + 1) = 0;
      }
      while (v140 != v141);
      v144 = *v122;
      v140 = v122[1];
    }
    v132 = (char *)(v139 + 2);
    *v122 = v142;
    v344 = v144;
    v122[1] = (char *)(v139 + 2);
    v345 = v140;
    v145 = v122[2];
    v122[2] = &v137[16 * v138];
    v346 = v145;
    __p = v144;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v131 = v127;
    *((_QWORD *)v131 + 1) = v128;
    v132 = v131 + 16;
    v333 = 0;
    v332 = 0;
  }
  v122[1] = v132;
  v146 = v331;
  v331 = 0;
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  v147 = (std::__shared_weak_count *)v328.n128_u64[1];
  if (v328.n128_u64[1])
  {
    v148 = (unint64_t *)(v328.n128_u64[1] + 8);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  if (v354)
  {
    v355 = (uint64_t)v354;
    operator delete(v354);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v334[1] - 2) + 48))(*((_QWORD *)v334[1] - 2), 1);
  *(_OWORD *)v326 = *(_OWORD *)a2;
  v327 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v150 = (uint64_t)v342;
  *(_QWORD *)&v325 = v342;
  if (v342)
  {
    v151 = (_QWORD *)operator new();
    *v151 = &unk_1EA99F8E8;
    v151[1] = 0;
    v151[2] = 0;
    v151[3] = v150;
  }
  else
  {
    v151 = 0;
  }
  *((_QWORD *)&v325 + 1) = v151;
  v342 = 0;
  *(_QWORD *)&v324 = v334;
  if (v334)
  {
    v152 = (_QWORD *)operator new();
    v153 = v334;
    *v152 = &unk_1EA99F948;
    v152[1] = 0;
    v152[2] = 0;
    v152[3] = v153;
  }
  else
  {
    v152 = 0;
  }
  *((_QWORD *)&v324 + 1) = v152;
  v334 = 0;
  v352[0] = &unk_1EA99FAC8;
  v352[1] = MIL::Operators::Train::ios16Train::CustomValidators::ValidateLinearGrad;
  v353 = v352;
  v351 = 0;
  MIL::IROperator::Make((__int128 *)v326, &v325, &v324, (uint64_t)v352, (uint64_t)v350, a3);
  v154 = v351;
  if (v351 == v350)
  {
    v155 = 4;
    v154 = v350;
  }
  else
  {
    if (!v351)
      goto LABEL_161;
    v155 = 5;
  }
  (*(void (**)(void))(*v154 + 8 * v155))();
LABEL_161:
  v156 = v353;
  if (v353 == v352)
  {
    v157 = 4;
    v156 = v352;
    goto LABEL_165;
  }
  if (v353)
  {
    v157 = 5;
LABEL_165:
    (*(void (**)(void))(*v156 + 8 * v157))();
  }
  v158 = (std::__shared_weak_count *)*((_QWORD *)&v324 + 1);
  if (*((_QWORD *)&v324 + 1))
  {
    v159 = (unint64_t *)(*((_QWORD *)&v324 + 1) + 8);
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = (std::__shared_weak_count *)*((_QWORD *)&v325 + 1);
  if (*((_QWORD *)&v325 + 1))
  {
    v162 = (unint64_t *)(*((_QWORD *)&v325 + 1) + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  if (SHIBYTE(v327) < 0)
    operator delete(v326[0]);
  v164 = *a3;
  v348[0] = &off_1EA99FBD8;
  v348[1] = MIL::Operators::Train::ios16Train::CustomValueTypeInference::ValueTypeInferenceLinearTrain;
  v349 = v348;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v164 + 200))(v164, v348);
  v165 = v349;
  if (v349 == v348)
  {
    v166 = 4;
    v165 = v348;
  }
  else
  {
    if (!v349)
      goto LABEL_183;
    v166 = 5;
  }
  (*(void (**)(void))(*v165 + 8 * v166))();
LABEL_183:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v167 = __p;
  std::string::basic_string[abi:ne180100]<0>(v320, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v320, 0, (uint64_t *)&Scalar);
  v322 = Scalar;
  if (Scalar)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = Scalar;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v323 = v168;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v318, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v167 + 24))(v167, &v322, v318);
  if (v319 < 0)
    operator delete(v318[0]);
  v170 = v323;
  if (v323)
  {
    p_shared_owners = (unint64_t *)&v323->__shared_owners_;
    do
      v172 = __ldaxr(p_shared_owners);
    while (__stlxr(v172 - 1, p_shared_owners));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = Scalar;
  Scalar = 0;
  if (v173)
    (*((void (**)(std::__shared_weak_count_vtbl *))v173->~__shared_weak_count + 1))(v173);
  if (v321 < 0)
    operator delete(v320[0]);
  v174 = __p;
  std::string::basic_string[abi:ne180100]<0>(v314, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v314, 0, (uint64_t *)&Scalar);
  v316 = Scalar;
  if (Scalar)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = Scalar;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v317 = v175;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v312, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v174 + 24))(v174, &v316, v312);
  if (v313 < 0)
    operator delete(v312[0]);
  v177 = v317;
  if (v317)
  {
    v178 = (unint64_t *)&v317->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = Scalar;
  Scalar = 0;
  if (v180)
    (*((void (**)(std::__shared_weak_count_vtbl *))v180->~__shared_weak_count + 1))(v180);
  if (v315 < 0)
    operator delete(v314[0]);
  v181 = __p;
  std::string::basic_string[abi:ne180100]<0>(v308, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v308, 1, (uint64_t *)&Scalar);
  v310 = Scalar;
  if (Scalar)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = Scalar;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v311 = v182;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v306, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v181 + 24))(v181, &v310, v306);
  if (v307 < 0)
    operator delete(v306[0]);
  v184 = v311;
  if (v311)
  {
    v185 = (unint64_t *)&v311->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = Scalar;
  Scalar = 0;
  if (v187)
    (*((void (**)(std::__shared_weak_count_vtbl *))v187->~__shared_weak_count + 1))(v187);
  if (v309 < 0)
    operator delete(v308[0]);
  v188 = __p;
  std::string::basic_string[abi:ne180100]<0>(v302, "dy");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v302, 0, (uint64_t *)&Scalar);
  v304 = Scalar;
  if (Scalar)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = Scalar;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v305 = v189;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v300, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v188 + 24))(v188, &v304, v300);
  if (v301 < 0)
    operator delete(v300[0]);
  v191 = v305;
  if (v305)
  {
    v192 = (unint64_t *)&v305->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = Scalar;
  Scalar = 0;
  if (v194)
    (*((void (**)(std::__shared_weak_count_vtbl *))v194->~__shared_weak_count + 1))(v194);
  if (v303 < 0)
    operator delete(v302[0]);
  v195 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 1, &Scalar);
  v298 = Scalar;
  if (Scalar)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = Scalar;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v299 = v196;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v296, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v195 + 24))(v195, &v298, v296);
  if (v297 < 0)
    operator delete(v296[0]);
  v198 = v299;
  if (v299)
  {
    v199 = (unint64_t *)&v299->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = Scalar;
  Scalar = 0;
  if (v201)
    (*((void (**)(std::__shared_weak_count_vtbl *))v201->~__shared_weak_count + 1))(v201);
  v202 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 1, &Scalar);
  v294 = Scalar;
  if (Scalar)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = Scalar;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v295 = v203;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v292, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v202 + 24))(v202, &v294, v292);
  if (v293 < 0)
    operator delete(v292[0]);
  v205 = v295;
  if (v295)
  {
    v206 = (unint64_t *)&v295->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = Scalar;
  Scalar = 0;
  if (v208)
    (*((void (**)(std::__shared_weak_count_vtbl *))v208->~__shared_weak_count + 1))(v208);
  v209 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 1, &Scalar);
  v290 = Scalar;
  if (Scalar)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = Scalar;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = v211;
  }
  else
  {
    v210 = 0;
  }
  v291 = v210;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v288, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v209 + 24))(v209, &v290, v288);
  if (v289 < 0)
    operator delete(v288[0]);
  v212 = v291;
  if (v291)
  {
    v213 = (unint64_t *)&v291->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = Scalar;
  Scalar = 0;
  if (v215)
    (*((void (**)(std::__shared_weak_count_vtbl *))v215->~__shared_weak_count + 1))(v215);
  v216 = *a3;
  v286 = __p;
  if (__p)
  {
    v217 = (std::__shared_weak_count *)operator new();
    v218 = (std::__shared_weak_count_vtbl *)__p;
    v217->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v217->__shared_owners_ = 0;
    v217->__shared_weak_owners_ = 0;
    v217[1].__vftable = v218;
  }
  else
  {
    v217 = 0;
  }
  v287 = v217;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v216 + 56))(v216, &v286);
  v219 = v287;
  if (v287)
  {
    v220 = (unint64_t *)&v287->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = __p;
  __p = 0;
  if (v222)
    (*(void (**)(void *))(*(_QWORD *)v222 + 8))(v222);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v223 = __p;
  std::string::basic_string[abi:ne180100]<0>(v282, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v282, 0, (uint64_t *)&Scalar);
  v284 = Scalar;
  if (Scalar)
  {
    v224 = (std::__shared_weak_count *)operator new();
    v225 = Scalar;
    v224->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v224->__shared_owners_ = 0;
    v224->__shared_weak_owners_ = 0;
    v224[1].__vftable = v225;
  }
  else
  {
    v224 = 0;
  }
  v285 = v224;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v280, "D_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v223 + 24))(v223, &v284, -1, v280);
  if (v281 < 0)
    operator delete(v280[0]);
  v226 = v285;
  if (v285)
  {
    v227 = (unint64_t *)&v285->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = Scalar;
  Scalar = 0;
  if (v229)
    (*((void (**)(std::__shared_weak_count_vtbl *))v229->~__shared_weak_count + 1))(v229);
  if (v283 < 0)
    operator delete(v282[0]);
  v230 = __p;
  std::string::basic_string[abi:ne180100]<0>(v276, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v276, 0, (uint64_t *)&Scalar);
  v278 = Scalar;
  if (Scalar)
  {
    v231 = (std::__shared_weak_count *)operator new();
    v232 = Scalar;
    v231->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v231->__shared_owners_ = 0;
    v231->__shared_weak_owners_ = 0;
    v231[1].__vftable = v232;
  }
  else
  {
    v231 = 0;
  }
  v279 = v231;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v274, "D_out");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v230 + 24))(v230, &v278, 0, v274);
  if (v275 < 0)
    operator delete(v274[0]);
  v233 = v279;
  if (v279)
  {
    v234 = (unint64_t *)&v279->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  v236 = Scalar;
  Scalar = 0;
  if (v236)
    (*((void (**)(std::__shared_weak_count_vtbl *))v236->~__shared_weak_count + 1))(v236);
  if (v277 < 0)
    operator delete(v276[0]);
  v237 = __p;
  std::string::basic_string[abi:ne180100]<0>(v270, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v270, 0, (uint64_t *)&Scalar);
  v272 = Scalar;
  if (Scalar)
  {
    v238 = (std::__shared_weak_count *)operator new();
    v239 = Scalar;
    v238->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v238->__shared_owners_ = 0;
    v238->__shared_weak_owners_ = 0;
    v238[1].__vftable = v239;
  }
  else
  {
    v238 = 0;
  }
  v273 = v238;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v268, "D_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v237 + 24))(v237, &v272, 1, v268);
  if (v269 < 0)
    operator delete(v268[0]);
  v240 = v273;
  if (v273)
  {
    v241 = (unint64_t *)&v273->__shared_owners_;
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = Scalar;
  Scalar = 0;
  if (v243)
    (*((void (**)(std::__shared_weak_count_vtbl *))v243->~__shared_weak_count + 1))(v243);
  if (v271 < 0)
    operator delete(v270[0]);
  v244 = __p;
  std::string::basic_string[abi:ne180100]<0>(v264, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v264, 1, (uint64_t *)&Scalar);
  v266 = Scalar;
  if (Scalar)
  {
    v245 = (std::__shared_weak_count *)operator new();
    v246 = Scalar;
    v245->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v245->__shared_owners_ = 0;
    v245->__shared_weak_owners_ = 0;
    v245[1].__vftable = v246;
  }
  else
  {
    v245 = 0;
  }
  v267 = v245;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v262, "D_out");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v244 + 24))(v244, &v266, 0, v262);
  if (v263 < 0)
    operator delete(v262[0]);
  v247 = v267;
  if (v267)
  {
    v248 = (unint64_t *)&v267->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  v250 = Scalar;
  Scalar = 0;
  if (v250)
    (*((void (**)(std::__shared_weak_count_vtbl *))v250->~__shared_weak_count + 1))(v250);
  if (v265 < 0)
    operator delete(v264[0]);
  v251 = *a3;
  v260 = __p;
  if (__p)
  {
    v252 = (std::__shared_weak_count *)operator new();
    v253 = (std::__shared_weak_count_vtbl *)__p;
    v252->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v252->__shared_owners_ = 0;
    v252->__shared_weak_owners_ = 0;
    v252[1].__vftable = v253;
  }
  else
  {
    v252 = 0;
  }
  v261 = v252;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v251 + 56))(v251, &v260);
  v254 = v261;
  if (v261)
  {
    v255 = (unint64_t *)&v261->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v257 = __p;
  __p = 0;
  if (v257)
    (*(void (**)(void *))(*(_QWORD *)v257 + 8))(v257);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v334, 0);
  result = (uint64_t)v342;
  if (v342)
  {
    v259 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v342);
    return MEMORY[0x1E0C023A0](v259, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A5298C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x3A0];
  STACK[0x3A0] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x320], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x398], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Train::ios16Train::LayerNormTrain::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void **v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  void **v76;
  char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  char **v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  void **v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  void *v106;
  void **v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  void **v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  void **v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  void **v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void **v141;
  void **v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  void **v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void **v155;
  uint64_t result;
  uint64_t v157;
  void **v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  void *v162[2];
  char v163;
  void *v164;
  std::__shared_weak_count *v165;
  void **v166;
  std::__shared_weak_count *v167;
  void *v168[2];
  char v169;
  void *v170;
  std::__shared_weak_count *v171;
  void *v172[2];
  char v173;
  void *v174[2];
  char v175;
  void *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  void *v180[2];
  char v181;
  void *v182;
  std::__shared_weak_count *v183;
  void *v184[2];
  char v185;
  void *v186[2];
  char v187;
  void *v188;
  std::__shared_weak_count *v189;
  void *v190[2];
  char v191;
  void *v192[2];
  char v193;
  void *v194;
  std::__shared_weak_count *v195;
  __int128 v196;
  __int128 v197;
  void *v198[2];
  uint64_t v199;
  __n128 v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  char **v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __n128 v208;
  void *__p;
  void *v210;
  _QWORD *v211;
  __n128 v212;
  _QWORD *v213;
  _BYTE v214[24];
  _BYTE *v215;
  _BYTE v216[24];
  _BYTE *v217;
  _BYTE v218[24];
  _BYTE *v219;
  void *v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD v223[2];
  void **Scalar;
  void **v225;
  void **v226;
  char *v227;
  char **v228;
  uint64_t v229;

  v229 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v213 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  Scalar = v8;
  *v8 = (void *)v7;
  v225 = v8 + 1;
  v226 = v8 + 1;
  v220 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v211 = v10 + 1;
  v210 = v10 + 1;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v220, 2, &v212);
  MIL::IRParameter::Make(&v212, &v202);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v202);
  v11 = v202;
  v202 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v212.n128_u64[1];
  if (v212.n128_u64[1])
  {
    v13 = (unint64_t *)(v212.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v210 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v225 = Scalar;
    operator delete(Scalar);
  }
  v15 = v213;
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = (void **)operator new(8uLL);
  Scalar = v17;
  *v17 = (void *)v16;
  v225 = v17 + 1;
  v226 = v17 + 1;
  v220 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v220, 1, &v208);
  MIL::IRParameter::Make(&v208, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v15, "axes", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v208.n128_u64[1];
  if (v208.n128_u64[1])
  {
    v21 = (unint64_t *)(v208.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (Scalar)
  {
    v225 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v213;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (char *)operator new(0x10uLL);
  v225 = (void **)(v26 + 16);
  v226 = (void **)(v26 + 16);
  *(_QWORD *)v26 = v24;
  *((_QWORD *)v26 + 1) = v25;
  Scalar = (void **)v26;
  v220 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v211 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  __p = v29;
  v210 = v29 + 2;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v220, 2, &v207);
  MIL::IRParameter::Make(&v207, &v202);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v23, "gamma", &v202);
  v31 = v202;
  v202 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v207.n128_u64[1];
  if (v207.n128_u64[1])
  {
    v33 = (unint64_t *)(v207.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v210 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v225 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 48))(*((_QWORD *)v30 + 5), 1);
  v35 = v213;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = (char *)operator new(0x10uLL);
  v225 = (void **)(v38 + 16);
  v226 = (void **)(v38 + 16);
  *(_QWORD *)v38 = v36;
  *((_QWORD *)v38 + 1) = v37;
  Scalar = (void **)v38;
  v220 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(0x10uLL);
  v211 = v41 + 2;
  *v41 = v39;
  v41[1] = v40;
  __p = v41;
  v210 = v41 + 2;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v220, 2, &v206);
  MIL::IRParameter::Make(&v206, &v202);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "beta", &v202);
  v43 = v202;
  v202 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v206.n128_u64[1];
  if (v206.n128_u64[1])
  {
    v45 = (unint64_t *)(v206.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (__p)
  {
    v210 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v225 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v47 = v213;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v225 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v205);
  MIL::IRParameter::Make(&v205, (uint64_t *)&__p);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v47, "epsilon", (uint64_t *)&__p);
  v49 = __p;
  __p = 0;
  if (v49)
    (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
  v50 = (std::__shared_weak_count *)v205.n128_u64[1];
  if (v205.n128_u64[1])
  {
    v51 = (unint64_t *)(v205.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v204 = 0;
  v53 = operator new();
  *(_QWORD *)v53 = 0;
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v53 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v204, (void **)v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v204, 1uLL);
  v54 = v204;
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  __p = v56;
  *v56 = v55;
  v211 = v56 + 1;
  v210 = v56 + 1;
  v223[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v220 = v58;
  *v58 = v57;
  v221 = (uint64_t)(v58 + 1);
  v222 = v58 + 1;
  v223[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v220);
  MIL::IRParameter::MakeTypeSet((uint64_t)v223, 2, &v200);
  MIL::IRParameter::Make(&v200, &v201);
  v59 = v201;
  v202 = v201;
  if (v201)
  {
    v60 = (_QWORD *)operator new();
    v61 = v201;
    *v60 = &unk_1EA99F888;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  v203 = v60;
  v201 = 0;
  v62 = v54[2];
  v63 = v54[1];
  if (v63 >= v62)
  {
    v65 = (v63 - *v54) >> 4;
    v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v67 = v62 - *v54;
    if (v67 >> 3 > v66)
      v66 = v67 >> 3;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
      v68 = 0xFFFFFFFFFFFFFFFLL;
    else
      v68 = v66;
    v228 = v54 + 2;
    v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v54 + 2), v68);
    v71 = (uint64_t *)&v69[16 * v65];
    *v71 = v59;
    v71[1] = (uint64_t)v60;
    v202 = 0;
    v203 = 0;
    v73 = *v54;
    v72 = v54[1];
    if (v72 == *v54)
    {
      v76 = (void **)v54[1];
      v74 = &v69[16 * v65];
    }
    else
    {
      v74 = &v69[16 * v65];
      do
      {
        v75 = *((_OWORD *)v72 - 1);
        v72 -= 16;
        *((_OWORD *)v74 - 1) = v75;
        v74 -= 16;
        *(_QWORD *)v72 = 0;
        *((_QWORD *)v72 + 1) = 0;
      }
      while (v72 != v73);
      v76 = (void **)*v54;
      v72 = v54[1];
    }
    v64 = (char *)(v71 + 2);
    *v54 = v74;
    Scalar = v76;
    v225 = v76;
    v54[1] = (char *)(v71 + 2);
    v226 = (void **)v72;
    v77 = v54[2];
    v54[2] = &v69[16 * v70];
    v227 = v77;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v63 = v59;
    *((_QWORD *)v63 + 1) = v60;
    v64 = v63 + 16;
    v202 = 0;
    v203 = 0;
  }
  v54[1] = v64;
  v78 = v201;
  v201 = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v200.n128_u64[1];
  if (v200.n128_u64[1])
  {
    v80 = (unint64_t *)(v200.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v220)
  {
    v221 = (uint64_t)v220;
    operator delete(v220);
  }
  if (__p)
  {
    v210 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v198 = *(_OWORD *)a2;
  v199 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v82 = (uint64_t)v213;
  *(_QWORD *)&v197 = v213;
  if (v213)
  {
    v83 = (_QWORD *)operator new();
    *v83 = &unk_1EA99F8E8;
    v83[1] = 0;
    v83[2] = 0;
    v83[3] = v82;
  }
  else
  {
    v83 = 0;
  }
  *((_QWORD *)&v197 + 1) = v83;
  v213 = 0;
  *(_QWORD *)&v196 = v204;
  if (v204)
  {
    v84 = (_QWORD *)operator new();
    v85 = v204;
    *v84 = &unk_1EA99F948;
    v84[1] = 0;
    v84[2] = 0;
    v84[3] = v85;
  }
  else
  {
    v84 = 0;
  }
  *((_QWORD *)&v196 + 1) = v84;
  v204 = 0;
  v219 = 0;
  v217 = 0;
  MIL::IROperator::Make((__int128 *)v198, &v197, &v196, (uint64_t)v218, (uint64_t)v216, a3);
  v86 = v217;
  if (v217 == v216)
  {
    v87 = 4;
    v86 = v216;
  }
  else
  {
    if (!v217)
      goto LABEL_89;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_89:
  v88 = v219;
  if (v219 == v218)
  {
    v89 = 4;
    v88 = v218;
    goto LABEL_93;
  }
  if (v219)
  {
    v89 = 5;
LABEL_93:
    (*(void (**)(void))(*v88 + 8 * v89))();
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
  if (*((_QWORD *)&v196 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
  if (*((_QWORD *)&v197 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (SHIBYTE(v199) < 0)
    operator delete(v198[0]);
  v96 = *a3;
  v97 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v97, (uint64_t)v214);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v96 + 200))(v96, v214);
  v98 = v215;
  if (v215 == v214)
  {
    v99 = 4;
    v98 = v214;
  }
  else
  {
    if (!v215)
      goto LABEL_111;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_111:
  if (SHIBYTE(v226) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v100 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v192, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v192, 0, (uint64_t *)&__p);
  v194 = __p;
  if (__p)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)__p;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v195 = v101;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v190, "T");
  (*((void (**)(void **, void **, void **))*v100 + 3))(v100, &v194, v190);
  if (v191 < 0)
    operator delete(v190[0]);
  v103 = v195;
  if (v195)
  {
    p_shared_owners = (unint64_t *)&v195->__shared_owners_;
    do
      v105 = __ldaxr(p_shared_owners);
    while (__stlxr(v105 - 1, p_shared_owners));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = __p;
  __p = 0;
  if (v106)
    (*(void (**)(void *))(*(_QWORD *)v106 + 8))(v106);
  if (v193 < 0)
    operator delete(v192[0]);
  v107 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v186, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v186, 1, (uint64_t *)&__p);
  v188 = __p;
  if (__p)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = (std::__shared_weak_count_vtbl *)__p;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v189 = v108;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v184, "T");
  (*((void (**)(void **, void **, void **))*v107 + 3))(v107, &v188, v184);
  if (v185 < 0)
    operator delete(v184[0]);
  v110 = v189;
  if (v189)
  {
    v111 = (unint64_t *)&v189->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = __p;
  __p = 0;
  if (v113)
    (*(void (**)(void *))(*(_QWORD *)v113 + 8))(v113);
  if (v187 < 0)
    operator delete(v186[0]);
  v114 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v180, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v180, 1, (uint64_t *)&__p);
  v182 = __p;
  if (__p)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)__p;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v183 = v115;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "T");
  (*((void (**)(void **, void **, void **))*v114 + 3))(v114, &v182, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v117 = v183;
  if (v183)
  {
    v118 = (unint64_t *)&v183->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = __p;
  __p = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  if (v181 < 0)
    operator delete(v180[0]);
  v121 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v174, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v174, 0, (uint64_t *)&__p);
  v176 = __p;
  if (__p)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)__p;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v177 = v122;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v172, "T");
  (*((void (**)(void **, void **, void **))*v121 + 3))(v121, &v176, v172);
  if (v173 < 0)
    operator delete(v172[0]);
  v124 = v177;
  if (v177)
  {
    v125 = (unint64_t *)&v177->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = __p;
  __p = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v175 < 0)
    operator delete(v174[0]);
  v128 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v170 = __p;
  if (__p)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)__p;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v171 = v129;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v168, "T");
  (*((void (**)(void **, void **, void **))*v128 + 3))(v128, &v170, v168);
  if (v169 < 0)
    operator delete(v168[0]);
  v131 = v171;
  if (v171)
  {
    v132 = (unint64_t *)&v171->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = __p;
  __p = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  v135 = *a3;
  v166 = Scalar;
  if (Scalar)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = Scalar;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = (std::__shared_weak_count_vtbl *)v137;
  }
  else
  {
    v136 = 0;
  }
  v167 = v136;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v135 + 56))(v135, &v166);
  v138 = v167;
  if (v167)
  {
    v139 = (unint64_t *)&v167->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = Scalar;
  Scalar = 0;
  if (v141)
    (*((void (**)(void **))*v141 + 1))(v141);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v142 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v162, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v162, 0, (uint64_t *)&__p);
  v164 = __p;
  if (__p)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = (std::__shared_weak_count_vtbl *)__p;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v165 = v143;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v142 + 3))(v142, &v164, 0, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v145 = v165;
  if (v165)
  {
    v146 = (unint64_t *)&v165->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = __p;
  __p = 0;
  if (v148)
    (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
  if (v163 < 0)
    operator delete(v162[0]);
  v149 = *a3;
  v158 = Scalar;
  if (Scalar)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = Scalar;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = (std::__shared_weak_count_vtbl *)v151;
  }
  else
  {
    v150 = 0;
  }
  v159 = v150;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v149 + 56))(v149, &v158);
  v152 = v159;
  if (v159)
  {
    v153 = (unint64_t *)&v159->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = Scalar;
  Scalar = 0;
  if (v155)
    (*((void (**)(void **))*v155 + 1))(v155);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v204, 0);
  result = (uint64_t)v213;
  if (v213)
  {
    v157 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v213);
    return MEMORY[0x1E0C023A0](v157, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A543B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void **a71;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;

  v74 = *(_QWORD *)(v72 - 112);
  *(_QWORD *)(v72 - 112) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = *v71;
  *v71 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v72 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Train::ios16Train::CustomValidators::ValidateBaseOptimizer(MIL::Operators::Train::ios16Train::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  unsigned int v5;
  int v6;
  int v7;
  MIL::Validation *ParameterType;
  const MIL::IRValueType *v9;
  const MIL::IRValueType *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  MIL::Validation *Type;
  const MIL::IRValueType *v27;
  const MIL::IRValueType *v28;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  void *v42[2];
  char v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::string v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void *v49[2];
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  void *__p[2];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  std::string v57;

  std::string::basic_string[abi:ne180100]<0>(&v57, "xs");
  v5 = (*(uint64_t (**)(MIL::Operators::Train::ios16Train::CustomValidators *, std::string *))(*(_QWORD *)this + 152))(this, &v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v57, "dxs");
  v6 = (*(uint64_t (**)(MIL::Operators::Train::ios16Train::CustomValidators *, std::string *))(*(_QWORD *)this + 152))(this, &v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (v5 == v6)
  {
    if (v5)
    {
      v7 = 0;
      while (1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v57, "xs");
        ParameterType = (MIL::Validation *)MIL::IROperation::GetParameterType(this);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v57, "dxs");
        v10 = (const MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        if (!MIL::Validation::TypeShapeAndDataTypeMatch(ParameterType, v10, v9))
          break;
        if (v5 == ++v7)
          goto LABEL_14;
      }
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v30 = (std::__shared_weak_count *)LocationPtr[1];
      v51 = *LocationPtr;
      v52 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v49, "The shape and data type of each argument of 'xs' and 'dxs' must be the same");
      MIL::ValidationResult::ValidationResult(a2, &v51, 315, v49);
      if (v50 < 0)
        operator delete(v49[0]);
      v21 = v52;
      if (v52)
      {
        v33 = (unint64_t *)&v52->__shared_owners_;
        do
          v23 = __ldaxr(v33);
        while (__stlxr(v23 - 1, v33));
        goto LABEL_64;
      }
    }
    else
    {
LABEL_14:
      v11 = (_QWORD *)(*(uint64_t (**)(MIL::Operators::Train::ios16Train::CustomValidators *))(*(_QWORD *)this + 176))(this);
      v12 = v5;
      if (v5 > (unint64_t)((uint64_t)(v11[1] - *v11) >> 4))
      {
        std::string::basic_string[abi:ne180100]<0>(&v57, "The length of outputs cannot be less than the length of input 'xs', i.e. the number of variables");
        v13 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v14 = (std::__shared_weak_count *)v13[1];
        v47 = *v13;
        v48 = v14;
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v46, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
        else
          v46 = v57;
        MIL::ValidationResult::ValidationResult(a2, &v47, 310, &v46);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        v34 = v48;
        if (v48)
        {
          v35 = (unint64_t *)&v48->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        return;
      }
      if (!v5)
      {
LABEL_36:
        MIL::ValidationResult::ValidationResult(a2);
        return;
      }
      v24 = v11;
      v25 = 0;
      while (1)
      {
        if (v25 >= (uint64_t)(v24[1] - *v24) >> 4)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        Type = (MIL::Validation *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v24 + 16 * v25));
        std::string::basic_string[abi:ne180100]<0>(&v57, "xs");
        v28 = (const MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        if (!MIL::Validation::TypeShapeAndDataTypeMatch(Type, v28, v27))
          break;
        if (++v25 == v12)
          goto LABEL_36;
      }
      v37 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v38 = (std::__shared_weak_count *)v37[1];
      v44 = *v37;
      v45 = v38;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      std::string::basic_string[abi:ne180100]<0>(v42, "The shape and data type of each updated xs must match each argument of input 'xs'");
      MIL::ValidationResult::ValidationResult(a2, &v44, 313, v42);
      if (v43 < 0)
        operator delete(v42[0]);
      v21 = v45;
      if (v45)
      {
        v41 = (unint64_t *)&v45->__shared_owners_;
        do
          v23 = __ldaxr(v41);
        while (__stlxr(v23 - 1, v41));
        goto LABEL_64;
      }
    }
  }
  else
  {
    v17 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v18 = (std::__shared_weak_count *)v17[1];
    v55 = *v17;
    v56 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "The length of inputs 'xs' and 'dxs' must be the same");
    MIL::ValidationResult::ValidationResult(a2, &v55, 315, __p);
    if (v54 < 0)
      operator delete(__p[0]);
    v21 = v56;
    if (v56)
    {
      v22 = (unint64_t *)&v56->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
LABEL_64:
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_1E0A54D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Train::ios16Train::CustomValidators::ValidateAdam(MIL::Operators::Train::ios16Train::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v5;
  unsigned int v6;
  int v7;
  int v8;
  MIL::Validation *ParameterType;
  const MIL::IRValueType *v10;
  const MIL::IRValueType *v11;
  int v12;
  int v13;
  MIL::Validation *v14;
  const MIL::IRValueType *v15;
  const MIL::IRValueType *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  const MIL::IRValueType *v22;
  MIL::Validation *Type;
  const MIL::IRValueType *v24;
  int v25;
  const MIL::IRValueType *v26;
  MIL::Validation *v27;
  const MIL::IRValueType *v28;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type size;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::value_type *v55;
  std::string::size_type v56;
  int v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  void *v80[2];
  char v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void *v84[2];
  char v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::string v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  _DWORD v95[2];
  void *v96[2];
  char v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void *__p[2];
  char v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void *v104[2];
  char v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void *v108[2];
  char v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::string v112;
  int v113;

  MIL::Operators::Train::ios16Train::CustomValidators::ValidateBaseOptimizer(this, (MIL::ValidationResult *)&v112);
  if (((*(uint64_t (**)(std::string *))(v112.__r_.__value_.__r.__words[0] + 16))(&v112) & 1) == 0)
  {
    MIL::MILResult::MILResult((std::string *)a2, (uint64_t)&v112);
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v113;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v112);
    return;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v112);
  std::string::basic_string[abi:ne180100]<0>(v5, "xs");
  v6 = (*(uint64_t (**)(MIL::Operators::Train::ios16Train::CustomValidators *, std::string *))(*(_QWORD *)this + 152))(this, &v112);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v112, "mean");
  v7 = (*(uint64_t (**)(MIL::Operators::Train::ios16Train::CustomValidators *, std::string *))(*(_QWORD *)this + 152))(this, &v112);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (v6 != v7)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v30 = (std::__shared_weak_count *)LocationPtr[1];
    v110 = *LocationPtr;
    v111 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v108, "The length of input 'xs' and 'm' must be the same");
    MIL::ValidationResult::ValidationResult(a2, &v110, 315, v108);
    if (v109 < 0)
      operator delete(v108[0]);
    v33 = v111;
    if (v111)
    {
      v34 = (unint64_t *)&v111->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      goto LABEL_124;
    }
    return;
  }
  if (v6)
  {
    v8 = 0;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v112, "xs");
      ParameterType = (MIL::Validation *)MIL::IROperation::GetParameterType(this);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v112, "mean");
      v11 = (const MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      if (!MIL::Validation::TypeShapeAndDataTypeMatch(ParameterType, v11, v10))
        break;
      if (v6 == ++v8)
        goto LABEL_15;
    }
    v41 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v42 = (std::__shared_weak_count *)v41[1];
    v106 = *v41;
    v107 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    std::string::basic_string[abi:ne180100]<0>(v104, "The shape and data type of each argument of 'xs' and 'm' must be the same");
    MIL::ValidationResult::ValidationResult(a2, &v106, 315, v104);
    if (v105 < 0)
      operator delete(v104[0]);
    v33 = v107;
    if (v107)
    {
      v45 = (unint64_t *)&v107->__shared_owners_;
      do
        v35 = __ldaxr(v45);
      while (__stlxr(v35 - 1, v45));
      goto LABEL_124;
    }
    return;
  }
LABEL_15:
  std::string::basic_string[abi:ne180100]<0>(&v112, "variance");
  v12 = (*(uint64_t (**)(MIL::Operators::Train::ios16Train::CustomValidators *, std::string *))(*(_QWORD *)this + 152))(this, &v112);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (v6 != v12)
  {
    v36 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v37 = (std::__shared_weak_count *)v36[1];
    v102 = *v36;
    v103 = v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "The length of input 'xs' and 'v' must be the same");
    MIL::ValidationResult::ValidationResult(a2, &v102, 315, __p);
    if (v101 < 0)
      operator delete(__p[0]);
    v33 = v103;
    if (!v103)
      return;
    v40 = (unint64_t *)&v103->__shared_owners_;
    do
      v35 = __ldaxr(v40);
    while (__stlxr(v35 - 1, v40));
LABEL_124:
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    return;
  }
  if (!v6)
  {
LABEL_26:
    v17 = 3 * v6;
    v18 = (_QWORD *)(*(uint64_t (**)(MIL::Operators::Train::ios16Train::CustomValidators *))(*(_QWORD *)this + 176))(this);
    v19 = (uint64_t)(v18[1] - *v18) >> 4;
    if (v19 == v17)
    {
      if (v6)
      {
        v20 = 0;
        v21 = 16 * v6;
        while (1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v112, "mean");
          v22 = (const MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v112.__r_.__value_.__l.__data_);
          Type = (MIL::Validation *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v18 + v21));
          if (!MIL::Validation::TypeShapeAndDataTypeMatch(Type, v22, v24))
            break;
          ++v20;
          v21 += 16;
          if (v6 == v20)
          {
            v25 = 0;
            while (1)
            {
              std::string::basic_string[abi:ne180100]<0>(&v112, "variance");
              v26 = (const MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v112.__r_.__value_.__l.__data_);
              v27 = (MIL::Validation *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v18 + v21));
              if (!MIL::Validation::TypeShapeAndDataTypeMatch(v27, v26, v28))
                break;
              ++v25;
              v21 += 16;
              if (v6 == v25)
                goto LABEL_38;
            }
            v75 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
            v76 = (std::__shared_weak_count *)v75[1];
            v82 = *v75;
            v83 = v76;
            if (v76)
            {
              v77 = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldxr(v77);
              while (__stxr(v78 + 1, v77));
            }
            std::string::basic_string[abi:ne180100]<0>(v80, "The shape and data type of each updated 'v' must match each argument of input 'v'");
            MIL::ValidationResult::ValidationResult(a2, &v82, 313, v80);
            if (v81 < 0)
              operator delete(v80[0]);
            v33 = v83;
            if (v83)
            {
              v79 = (unint64_t *)&v83->__shared_owners_;
              do
                v35 = __ldaxr(v79);
              while (__stlxr(v35 - 1, v79));
              goto LABEL_124;
            }
            return;
          }
        }
        v70 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v71 = (std::__shared_weak_count *)v70[1];
        v86 = *v70;
        v87 = v71;
        if (v71)
        {
          v72 = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
        }
        std::string::basic_string[abi:ne180100]<0>(v84, "The shape and data type of each updated 'm' must match each argument of input 'm'");
        MIL::ValidationResult::ValidationResult(a2, &v86, 313, v84);
        if (v85 < 0)
          operator delete(v84[0]);
        v33 = v87;
        if (v87)
        {
          v74 = (unint64_t *)&v87->__shared_owners_;
          do
            v35 = __ldaxr(v74);
          while (__stlxr(v35 - 1, v74));
          goto LABEL_124;
        }
      }
      else
      {
LABEL_38:
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
      }
    }
    else
    {
      std::to_string(&v92, v19);
      v46 = std::string::insert(&v92, 0, "The length of outputs(");
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      v48 = std::string::append(&v93, ") does not match the expected(");
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v91, v17);
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v91;
      else
        v50 = (std::string *)v91.__r_.__value_.__r.__words[0];
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v91.__r_.__value_.__r.__words[2]);
      else
        size = v91.__r_.__value_.__l.__size_;
      v52 = std::string::append(&v94, (const std::string::value_type *)v50, size);
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      v54 = std::string::append(&v112, ")");
      v55 = (std::string::value_type *)v54->__r_.__value_.__r.__words[0];
      v56 = v54->__r_.__value_.__l.__size_;
      v95[0] = v54->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v95 + 3) = *(_DWORD *)((char *)&v54->__r_.__value_.__r.__words[2] + 3);
      v57 = SHIBYTE(v54->__r_.__value_.__r.__words[2]);
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      v58 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v59 = (std::__shared_weak_count *)v58[1];
      v89 = *v58;
      v90 = v59;
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      if (v57 < 0)
      {
        std::string::__init_copy_ctor_external(&v88, v55, v56);
      }
      else
      {
        v88.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v88.__r_.__value_.__l.__size_ = v56;
        LODWORD(v88.__r_.__value_.__r.__words[2]) = v95[0];
        *(_DWORD *)((char *)&v88.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v95 + 3);
        *((_BYTE *)&v88.__r_.__value_.__s + 23) = v57;
      }
      MIL::ValidationResult::ValidationResult(a2, &v89, 310, &v88);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      v67 = v90;
      if (v90)
      {
        v68 = (unint64_t *)&v90->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      if (v57 < 0)
        operator delete(v55);
    }
    return;
  }
  v13 = 0;
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v112, "xs");
    v14 = (MIL::Validation *)MIL::IROperation::GetParameterType(this);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v112, "variance");
    v16 = (const MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    if (!MIL::Validation::TypeShapeAndDataTypeMatch(v14, v16, v15))
      break;
    if (v6 == ++v13)
      goto LABEL_26;
  }
  v62 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v63 = (std::__shared_weak_count *)v62[1];
  v98 = *v62;
  v99 = v63;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  std::string::basic_string[abi:ne180100]<0>(v96, "The shape and data type of each argument of 'xs' and 'v' must be the same");
  MIL::ValidationResult::ValidationResult(a2, &v98, 315, v96);
  if (v97 < 0)
    operator delete(v96[0]);
  v33 = v99;
  if (v99)
  {
    v66 = (unint64_t *)&v99->__shared_owners_;
    do
      v35 = __ldaxr(v66);
    while (__stlxr(v35 - 1, v66));
    goto LABEL_124;
  }
}

void sub_1E0A556D0(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, ...)
{
  va_list va;

  va_start(va, a8);
  if (a8 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Operators::Train::ios16Train::CustomValidators::ValidateSgd(MIL::Operators::Train::ios16Train::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unsigned int v5;
  int i;
  uint64_t ParameterType;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _BOOL4 IsParameterSet;
  _BOOL4 v19;
  unsigned int v20;
  int j;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  _BOOL4 v33;
  int v34;
  const void *ParameterValue;
  _BOOL8 v36;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  _QWORD *v44;
  unint64_t v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  MIL::Validation *Type;
  const MIL::IRValueType *v52;
  const MIL::IRValueType *v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type size;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  std::string::value_type *v63;
  std::string::size_type v64;
  int v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  void *v82[2];
  char v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  std::string v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string v89;
  std::string v90;
  std::string v91;
  _DWORD v92[2];
  std::string v93;
  uint64_t v94[2];
  void *__p[3];
  char v96;
  std::string v97;
  std::vector<unsigned int> v98;
  char v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  int v107;

  MIL::Operators::Train::ios16Train::CustomValidators::ValidateBaseOptimizer(this, (MIL::ValidationResult *)&v103);
  if ((((uint64_t (*)(uint64_t **))v103[2])(&v103) & 1) == 0)
  {
    MIL::MILResult::MILResult((std::string *)a2, (uint64_t)&v103);
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v107;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v103);
    return;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v103);
  std::string::basic_string[abi:ne180100]<0>(v4, "xs");
  v5 = (*(uint64_t (**)(MIL::Operators::Train::ios16Train::CustomValidators *, uint64_t **))(*(_QWORD *)this + 152))(this, &v103);
  if (SHIBYTE(v104) < 0)
    operator delete(v103);
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v80 = v5;
  std::vector<std::string const*>::reserve((void **)&v100, v5);
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      std::string::basic_string[abi:ne180100]<0>(&v103, "xs");
      ParameterType = MIL::IROperation::GetParameterType(this);
      if (SHIBYTE(v104) < 0)
        operator delete(v103);
      v8 = v101;
      if (v101 >= v102)
      {
        v10 = v101 - v100;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v11 = ((char *)v102 - (char *)v100) >> 2;
        if (v11 <= v10 + 1)
          v11 = v10 + 1;
        if ((unint64_t)((char *)v102 - (char *)v100) >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v102, v12);
        else
          v13 = 0;
        v14 = (uint64_t *)&v13[8 * v10];
        *v14 = ParameterType;
        v9 = v14 + 1;
        v16 = v100;
        v15 = v101;
        if (v101 != v100)
        {
          do
          {
            v17 = *--v15;
            *--v14 = v17;
          }
          while (v15 != v16);
          v15 = v100;
        }
        v100 = v14;
        v101 = v9;
        v102 = (uint64_t *)&v13[8 * v12];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v101 = ParameterType;
        v9 = v8 + 1;
      }
      v101 = v9;
    }
  }
  LOBYTE(v98.__begin_) = 0;
  v99 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v103, "momentum");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v103);
  v19 = IsParameterSet;
  if (SHIBYTE(v104) < 0)
  {
    operator delete(v103);
    if (!v19)
      goto LABEL_55;
  }
  else if (!IsParameterSet)
  {
    goto LABEL_55;
  }
  std::string::basic_string[abi:ne180100]<0>(&v103, "momentum");
  v20 = (*(uint64_t (**)(MIL::Operators::Train::ios16Train::CustomValidators *, uint64_t **))(*(_QWORD *)this + 152))(this, &v103);
  if (SHIBYTE(v104) < 0)
    operator delete(v103);
  v103 = 0;
  v104 = 0uLL;
  std::vector<std::string const*>::reserve((void **)&v103, v20);
  if (v20)
  {
    for (j = 0; j != v20; ++j)
    {
      std::string::basic_string[abi:ne180100]<0>(&v97, "momentum");
      v22 = MIL::IROperation::GetParameterType(this);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      v23 = v104;
      if ((unint64_t)v104 >= *((_QWORD *)&v104 + 1))
      {
        v25 = (uint64_t)(v104 - (_QWORD)v103) >> 3;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v26 = (uint64_t)(*((_QWORD *)&v104 + 1) - (_QWORD)v103) >> 2;
        if (v26 <= v25 + 1)
          v26 = v25 + 1;
        if (*((_QWORD *)&v104 + 1) - (_QWORD)v103 >= 0x7FFFFFFFFFFFFFF8uLL)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v104 + 8, v27);
        else
          v28 = 0;
        v29 = (uint64_t *)&v28[8 * v25];
        *v29 = v22;
        v24 = v29 + 1;
        v31 = v103;
        v30 = (uint64_t *)v104;
        if ((uint64_t *)v104 != v103)
        {
          do
          {
            v32 = *--v30;
            *--v29 = v32;
          }
          while (v30 != v31);
          v30 = v103;
        }
        v103 = v29;
        *(_QWORD *)&v104 = v24;
        *((_QWORD *)&v104 + 1) = &v28[8 * v27];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *(_QWORD *)v104 = v22;
        v24 = (_QWORD *)(v23 + 8);
      }
      *(_QWORD *)&v104 = v24;
    }
  }
  std::optional<std::vector<MIL::IRValueType const*>>::operator=[abi:ne180100]<std::vector<MIL::IRValueType const*>,void>(&v98, (__n128 *)&v103);
  if (v103)
  {
    *(_QWORD *)&v104 = v103;
    operator delete(v103);
  }
LABEL_55:
  std::string::basic_string[abi:ne180100]<0>(&v103, "nesterov");
  v33 = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v103);
  v34 = v33;
  if ((SHIBYTE(v104) & 0x80000000) == 0)
  {
    if (!v33)
      goto LABEL_61;
LABEL_59:
    std::string::basic_string[abi:ne180100]<0>(&v103, "nesterov");
    ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
    v34 = MIL::IRValue::GetScalar<BOOL>(ParameterValue);
    if (SHIBYTE(v104) < 0)
      operator delete(v103);
    goto LABEL_61;
  }
  operator delete(v103);
  if (v34)
    goto LABEL_59;
LABEL_61:
  std::__optional_copy_base<std::vector<MIL::IRValueType const*>,false>::__optional_copy_base[abi:ne180100]((uint64_t)__p, (uint64_t)&v98);
  std::string::basic_string[abi:ne180100]<0>(&v97, "momentum_val");
  v36 = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v97.__r_.__value_.__l.__data_);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v38 = (std::__shared_weak_count *)LocationPtr[1];
  v94[0] = *LocationPtr;
  v94[1] = (uint64_t)v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
  }
  if (v38)
  {
    v41 = (unint64_t *)&v38->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (v96 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v103))
  {
    std::string::basic_string[abi:ne180100]<0>(&v97, "momentum");
    if (MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v97.__r_.__value_.__l.__data_))
    {
      std::string::basic_string[abi:ne180100]<0>(&v93, "momentum_val");
      v43 = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
    }
    else
    {
      v43 = 0;
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    v44 = (_QWORD *)(*(uint64_t (**)(MIL::Operators::Train::ios16Train::CustomValidators *))(*(_QWORD *)this + 176))(this);
    v45 = (uint64_t)(v44[1] - *v44) >> 4;
    if (v45 == (unint64_t)v5 << v43)
    {
      if (v5)
        v46 = v43;
      else
        v46 = 0;
      v47 = v46 == 1;
      v48 = v5;
      if (v47)
      {
        v49 = 0;
        while (1)
        {
          v50 = v48 + v49;
          if (v50 >= (uint64_t)(v44[1] - *v44) >> 4)
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          Type = (MIL::Validation *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v44 + 16 * v50));
          std::string::basic_string[abi:ne180100]<0>(&v97, "momentum");
          v53 = (const MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
          if (!MIL::Validation::TypeShapeAndDataTypeMatch(Type, v53, v52))
            break;
          ++v49;
          v48 = v80;
          if (v80 == v49)
            goto LABEL_94;
        }
        v73 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v74 = (std::__shared_weak_count *)v73[1];
        v84 = *v73;
        v85 = v74;
        if (v74)
        {
          v75 = (unint64_t *)&v74->__shared_owners_;
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        std::string::basic_string[abi:ne180100]<0>(v82, "The shape and data type of each updated momentum must match each argument of input 'momentum'");
        MIL::ValidationResult::ValidationResult(a2, &v84, 313, v82);
        if (v83 < 0)
          operator delete(v82[0]);
        v77 = v85;
        if (v85)
        {
          v78 = (unint64_t *)&v85->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
      }
      else
      {
LABEL_94:
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
      }
    }
    else
    {
      std::to_string(&v90, v45);
      v54 = std::string::insert(&v90, 0, "The length of outputs(");
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      v56 = std::string::append(&v91, ") does not match the expected(");
      v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v89, (unint64_t)v5 << v43);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &v89;
      else
        v58 = (std::string *)v89.__r_.__value_.__r.__words[0];
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      else
        size = v89.__r_.__value_.__l.__size_;
      v60 = std::string::append(&v93, (const std::string::value_type *)v58, size);
      v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v97.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      v62 = std::string::append(&v97, ")");
      v63 = (std::string::value_type *)v62->__r_.__value_.__r.__words[0];
      v64 = v62->__r_.__value_.__l.__size_;
      v92[0] = v62->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v92 + 3) = *(_DWORD *)((char *)&v62->__r_.__value_.__r.__words[2] + 3);
      v65 = SHIBYTE(v62->__r_.__value_.__r.__words[2]);
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      v66 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v67 = (std::__shared_weak_count *)v66[1];
      v87 = *v66;
      v88 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      if (v65 < 0)
      {
        std::string::__init_copy_ctor_external(&v86, v63, v64);
      }
      else
      {
        v86.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
        v86.__r_.__value_.__l.__size_ = v64;
        LODWORD(v86.__r_.__value_.__r.__words[2]) = v92[0];
        *(_DWORD *)((char *)&v86.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v92 + 3);
        *((_BYTE *)&v86.__r_.__value_.__s + 23) = v65;
      }
      MIL::ValidationResult::ValidationResult(a2, &v87, 310, &v86);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      v70 = v88;
      if (v88)
      {
        v71 = (unint64_t *)&v88->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (v65 < 0)
        operator delete(v63);
    }
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v104;
    v104 = 0uLL;
    *(_OWORD *)(a2 + 24) = v105;
    *(_QWORD *)(a2 + 40) = v106;
    v105 = 0uLL;
    v106 = 0;
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v107;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v103);
  if (v99 && v98.__begin_)
  {
    v98.__end_ = v98.__begin_;
    operator delete(v98.__begin_);
  }
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
}

void sub_1E0A561D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;
  void *v60;
  void *v61;

  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v58 - 152));
  if (*(_BYTE *)(v58 - 184))
  {
    v60 = *(void **)(v58 - 208);
    if (v60)
    {
      *(_QWORD *)(v58 - 200) = v60;
      operator delete(v60);
    }
  }
  v61 = *(void **)(v58 - 176);
  if (v61)
  {
    *(_QWORD *)(v58 - 168) = v61;
    operator delete(v61);
  }
  _Unwind_Resume(a1);
}

std::vector<unsigned int> *std::optional<std::vector<MIL::IRValueType const*>>::operator=[abi:ne180100]<std::vector<MIL::IRValueType const*>,void>(std::vector<unsigned int> *this, __n128 *a2)
{
  if (LOBYTE(this[1].__begin_))
  {
    std::vector<float>::__move_assign((uint64_t)this, a2);
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    *this = *(std::vector<unsigned int> *)a2->n128_u8;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    LOBYTE(this[1].__begin_) = 1;
  }
  return this;
}

void MIL::Operators::Train::ios16Train::`anonymous namespace'::ValidateSgdInputs(_QWORD *a1@<X0>, uint64_t a2@<X1>, const MIL::IRValueType *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  BOOL v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34[2];
  char v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  char v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  void *v46[2];
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  if (*(_BYTE *)(a2 + 24))
    v10 = (_DWORD)a3 == 0;
  else
    v10 = 1;
  if (v10)
  {
    if ((*(_BYTE *)(a2 + 24) != 0) != (_DWORD)a3)
    {
      v11 = (std::__shared_weak_count *)a5[1];
      v48 = *a5;
      v49 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v46, "Inputs 'momentum' and 'momentum_val' must be either both specified or not specified");
      MIL::ValidationResult::ValidationResult(a6, &v48, 315, v46);
      if (v47 < 0)
        operator delete(v46[0]);
      v14 = v49;
      if (v49)
      {
        v15 = (unint64_t *)&v49->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        goto LABEL_51;
      }
      return;
    }
    if (a4)
    {
      v17 = (std::__shared_weak_count *)a5[1];
      v44 = *a5;
      v45 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Input 'nesterov' can be true only when both input 'momentum' and 'momentum_val' are specified(momentum is used) ");
      MIL::ValidationResult::ValidationResult(a6, &v44, 315, __p);
      if (v43 < 0)
        operator delete(__p[0]);
      v14 = v45;
      if (v45)
      {
        v20 = (unint64_t *)&v45->__shared_owners_;
        do
          v16 = __ldaxr(v20);
        while (__stlxr(v16 - 1, v20));
        goto LABEL_51;
      }
      return;
    }
    if (!*(_BYTE *)(a2 + 24))
      goto LABEL_33;
  }
  v21 = a1[1] - *a1;
  v22 = v21 >> 3;
  if (v21 >> 3 == (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)
  {
    if (v21)
    {
      v23 = 0;
      v24 = 1;
      while (1)
      {
        if (v23 >= (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        if (!MIL::Validation::TypeShapeAndDataTypeMatch(*(MIL::Validation **)(*a1 + 8 * v23), *(const MIL::IRValueType **)(*(_QWORD *)a2 + 8 * v23), a3))break;
        v23 = v24;
        if (v22 <= v24++)
          goto LABEL_33;
      }
      v30 = (std::__shared_weak_count *)a5[1];
      v36 = *a5;
      v37 = v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      std::string::basic_string[abi:ne180100]<0>(v34, "The shape and data type of each argument of 'xs' and 'momentum' must be the same");
      MIL::ValidationResult::ValidationResult(a6, &v36, 315, v34);
      if (v35 < 0)
        operator delete(v34[0]);
      v14 = v37;
      if (v37)
      {
        v33 = (unint64_t *)&v37->__shared_owners_;
        do
          v16 = __ldaxr(v33);
        while (__stlxr(v16 - 1, v33));
LABEL_51:
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        return;
      }
      return;
    }
LABEL_33:
    MIL::ValidationResult::ValidationResult(a6);
    return;
  }
  v26 = (std::__shared_weak_count *)a5[1];
  v40 = *a5;
  v41 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  std::string::basic_string[abi:ne180100]<0>(v38, "The length of inputs 'xs' and 'momentum' must be the same");
  MIL::ValidationResult::ValidationResult(a6, &v40, 315, v38);
  if (v39 < 0)
    operator delete(v38[0]);
  v14 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v16 = __ldaxr(v29);
    while (__stlxr(v16 - 1, v29));
    goto LABEL_51;
  }
}

void sub_1E0A56768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Train::ios16Train::CustomValueTypeInference::ValueTypeInferenceSgd(uint64_t *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  uint64_t ValueType;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  const void *SingleValue;
  unsigned __int8 *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unsigned __int8 *v55;
  void *exception;
  uint64_t *v57;
  void *v58[2];
  char v59;
  std::string v60[2];
  int v61;
  uint64_t v62[2];
  void *v63[3];
  char v64;
  void *__p;
  uint64_t *v66;
  uint64_t *v67;
  int v68;
  void *v69[2];
  uint64_t v70;
  char *v71;
  char *v72;
  char v73;

  std::string::basic_string[abi:ne180100]<0>(&__p, "xs");
  v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  v57 = a1;
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = *((_QWORD *)v6 + 5);
  v7 = *((_QWORD *)v6 + 6);
  v9 = (v7 - v8) >> 4;
  if (SHIBYTE(v67) < 0)
    operator delete(__p);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<std::string const*>::reserve((void **)a3, (v7 - v8) >> 4);
  if (v7 != v8)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "xs");
      v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
      if (!v12)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      ValueType = MIL::IRTypedArgument::GetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(*((_QWORD *)v12 + 5) + 16 * v10));
      if (SHIBYTE(v67) < 0)
        operator delete(__p);
      v15 = *(uint64_t **)(a3 + 8);
      v14 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v15 >= v14)
      {
        v17 = ((uint64_t)v15 - *(_QWORD *)a3) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v14 - *(_QWORD *)a3;
        v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1))
          v19 = v17 + 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a3 + 16, v20);
        else
          v21 = 0;
        v22 = (uint64_t *)&v21[8 * v17];
        *v22 = ValueType;
        v16 = v22 + 1;
        v24 = *(char **)a3;
        v23 = *(char **)(a3 + 8);
        if (v23 != *(char **)a3)
        {
          do
          {
            v25 = *((_QWORD *)v23 - 1);
            v23 -= 8;
            *--v22 = v25;
          }
          while (v23 != v24);
          v23 = *(char **)a3;
        }
        *(_QWORD *)a3 = v22;
        *(_QWORD *)(a3 + 8) = v16;
        *(_QWORD *)(a3 + 16) = &v21[8 * v20];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v15 = ValueType;
        v16 = v15 + 1;
      }
      *(_QWORD *)(a3 + 8) = v16;
      v10 = ++v11;
    }
    while (v9 > v11);
  }
  LOBYTE(v71) = 0;
  v73 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "momentum");
  v26 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  v27 = v26;
  if (SHIBYTE(v67) < 0)
  {
    operator delete(__p);
    if (!v27)
      goto LABEL_57;
  }
  else if (!v26)
  {
    goto LABEL_57;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "momentum");
  v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v28)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v30 = *((_QWORD *)v28 + 5);
  v29 = *((_QWORD *)v28 + 6);
  v31 = (v29 - v30) >> 4;
  if (SHIBYTE(v67) < 0)
    operator delete(__p);
  __p = 0;
  v66 = 0;
  v67 = 0;
  std::vector<std::string const*>::reserve(&__p, (v29 - v30) >> 4);
  if (v29 != v30)
  {
    v32 = 0;
    v33 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "momentum");
      v34 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v69);
      if (!v34)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v35 = MIL::IRTypedArgument::GetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(*((_QWORD *)v34 + 5)
                                                                                              + 16 * v32));
      if (SHIBYTE(v70) < 0)
        operator delete(v69[0]);
      v36 = v66;
      if (v66 >= v67)
      {
        v38 = ((char *)v66 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v38 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v39 = ((char *)v67 - (_BYTE *)__p) >> 2;
        if (v39 <= v38 + 1)
          v39 = v38 + 1;
        if ((unint64_t)((char *)v67 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        if (v40)
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v67, v40);
        else
          v41 = 0;
        v42 = (uint64_t *)&v41[8 * v38];
        *v42 = v35;
        v37 = v42 + 1;
        v44 = (char *)__p;
        v43 = (char *)v66;
        if (v66 != __p)
        {
          do
          {
            v45 = *((_QWORD *)v43 - 1);
            v43 -= 8;
            *--v42 = v45;
          }
          while (v43 != v44);
          v43 = (char *)__p;
        }
        __p = v42;
        v66 = v37;
        v67 = (uint64_t *)&v41[8 * v40];
        if (v43)
          operator delete(v43);
      }
      else
      {
        *v66 = v35;
        v37 = v36 + 1;
      }
      v66 = v37;
      v32 = ++v33;
    }
    while (v31 > v33);
  }
  std::optional<std::vector<MIL::IRValueType const*>>::operator=[abi:ne180100]<std::vector<MIL::IRValueType const*>&,void>((uint64_t)&v71, (uint64_t)&__p);
  if (__p)
  {
    v66 = (uint64_t *)__p;
    operator delete(__p);
  }
LABEL_57:
  std::string::basic_string[abi:ne180100]<0>(&__p, "nesterov");
  v46 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  v47 = v46;
  if (SHIBYTE(v67) < 0)
  {
    operator delete(__p);
    if (!v47)
      goto LABEL_63;
  }
  else if (!v46)
  {
    goto LABEL_63;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "nesterov");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a2, (uint64_t)&__p);
  LODWORD(v47) = MIL::IRValue::GetScalar<BOOL>(SingleValue);
  if (SHIBYTE(v67) < 0)
    operator delete(__p);
LABEL_63:
  std::__optional_copy_base<std::vector<MIL::IRValueType const*>,false>::__optional_copy_base[abi:ne180100]((uint64_t)v63, (uint64_t)&v71);
  std::string::basic_string[abi:ne180100]<0>(v69, "momentum_val");
  v49 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v69);
  v50 = (std::__shared_weak_count *)v57[1];
  v62[0] = *v57;
  v62[1] = (uint64_t)v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldxr(p_shared_owners);
    while (__stxr(v52 + 1, p_shared_owners));
  }
  if (v50)
  {
    v53 = (unint64_t *)&v50->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (SHIBYTE(v70) < 0)
    operator delete(v69[0]);
  if (v64 && v63[0])
  {
    v63[1] = v63[0];
    operator delete(v63[0]);
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v60, (uint64_t)&__p);
    v60[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v61 = v68;
    MIL::ValidationError::ValidationError(exception, v60);
  }
  std::string::basic_string[abi:ne180100]<0>(v58, "xs");
  v55 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v58);
  if (!v55)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v69[0] = 0;
  v69[1] = 0;
  v70 = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>((char *)v69, *((_QWORD **)v55 + 5), *((_QWORD **)v55 + 6), (uint64_t)(*((_QWORD *)v55 + 6) - *((_QWORD *)v55 + 5)) >> 4);
  if (v59 < 0)
    operator delete(v58[0]);
  if (v73)
    std::vector<MIL::IRValueType const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRValueType const**>,std::__wrap_iter<MIL::IRValueType const**>>(a3, *(_QWORD *)(a3 + 8), v71, v72, (v72 - v71) >> 3);
  v58[0] = v69;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
  if (v73)
  {
    if (v71)
    {
      v72 = v71;
      operator delete(v71);
    }
  }
}

void sub_1E0A56E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  void *v37;
  void *v38;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a16);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a29);
  if (*(_BYTE *)(v35 - 96))
  {
    v37 = *(void **)(v35 - 120);
    if (v37)
    {
      *(_QWORD *)(v35 - 112) = v37;
      operator delete(v37);
    }
  }
  v38 = *(void **)v34;
  if (*(_QWORD *)v34)
  {
    *(_QWORD *)(v34 + 8) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::vector<MIL::IRValueType const*>>::operator=[abi:ne180100]<std::vector<MIL::IRValueType const*>&,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (a1 != a2)
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<MIL::IRValueType const*>::__init_with_size[abi:ne180100]<MIL::IRValueType const**,MIL::IRValueType const**>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t std::__optional_copy_base<std::vector<MIL::IRValueType const*>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<MIL::IRValueType const*>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<MIL::IRValueType const*>,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_1E0A57058(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::vector<MIL::IRValueType const*>,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<std::vector<MIL::IRValueType const*>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<MIL::IRValueType const*>,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<MIL::IRValueType const*>::__init_with_size[abi:ne180100]<MIL::IRValueType const**,MIL::IRValueType const**>(result, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

char *std::vector<MIL::IRValueType const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRValueType const**>,std::__wrap_iter<MIL::IRValueType const**>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1E0A57290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Train::ios16Train::BaseOptimizer::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  void **v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count_vtbl *v101;
  uint64_t result;
  uint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  void *v114[2];
  char v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124[2];
  char v125;
  void *v126[2];
  char v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  __int128 v136;
  __int128 v137;
  void *__p[2];
  uint64_t v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count_vtbl *v145;
  void (__cdecl **v146)(std::__shared_weak_count *__hidden);
  __n128 v147;
  uint64_t v148;
  _QWORD *v149;
  _BYTE v150[24];
  _BYTE *v151;
  _QWORD v152[3];
  _QWORD *v153;
  void **Scalar;
  void **v155;
  void **v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v149 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (void **)operator new(8uLL);
  Scalar = v10;
  *v10 = (void *)v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v157 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v144 = v12;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v145 = (std::__shared_weak_count_vtbl *)&v12->~__shared_weak_count_0;
  v146 = &v12->~__shared_weak_count_0;
  v158 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v157, 2, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "xs", &v148);
  v14 = v148;
  v148 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v16 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (Scalar)
  {
    v155 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v13 + 5) + 64))(*((_QWORD *)v13 + 5), 1);
  v18 = v149;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (void **)operator new(8uLL);
  Scalar = v20;
  *v20 = (void *)v19;
  v155 = v20 + 1;
  v156 = v20 + 1;
  v157 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v144 = v22;
  v22->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  v145 = (std::__shared_weak_count_vtbl *)&v22->~__shared_weak_count_0;
  v146 = &v22->~__shared_weak_count_0;
  v158 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v157, 2, &v143);
  MIL::IRParameter::Make(&v143, &v148);
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v18, "dxs", &v148);
  v24 = v148;
  v148 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v143.n128_u64[1];
  if (v143.n128_u64[1])
  {
    v26 = (unint64_t *)(v143.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (Scalar)
  {
    v155 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v23 + 5) + 64))(*((_QWORD *)v23 + 5), 1);
  v28 = v149;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v155 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v142);
  MIL::IRParameter::Make(&v142, (uint64_t *)&v144);
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v28, "clip_norm", (uint64_t *)&v144);
  v30 = v144;
  v144 = 0;
  if (v30)
    (*((void (**)(std::__shared_weak_count_vtbl *))v30->~__shared_weak_count + 1))(v30);
  v31 = (std::__shared_weak_count *)v142.n128_u64[1];
  if (v142.n128_u64[1])
  {
    v32 = (unint64_t *)(v142.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v149;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v155 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v141);
  MIL::IRParameter::Make(&v141, (uint64_t *)&v144);
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v34, "clip_value", (uint64_t *)&v144);
  v36 = v144;
  v144 = 0;
  if (v36)
    (*((void (**)(std::__shared_weak_count_vtbl *))v36->~__shared_weak_count + 1))(v36);
  v37 = (std::__shared_weak_count *)v141.n128_u64[1];
  if (v141.n128_u64[1])
  {
    v38 = (unint64_t *)(v141.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v40 = v149;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v155 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v144);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v40, "weight_decay", (uint64_t *)&v144);
  v42 = v144;
  v144 = 0;
  if (v42)
    (*((void (**)(std::__shared_weak_count_vtbl *))v42->~__shared_weak_count + 1))(v42);
  v43 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v44 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 48))(*((_QWORD *)v41 + 5), 1);
  Scalar = 0;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v46 = (uint64_t)v149;
  *(_QWORD *)&v137 = v149;
  if (v149)
  {
    v47 = (_QWORD *)operator new();
    *v47 = &unk_1EA99F8E8;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v46;
    *((_QWORD *)&v137 + 1) = v47;
    v149 = 0;
    *(_QWORD *)&v136 = Scalar;
    if (Scalar)
    {
      v48 = (_QWORD *)operator new();
      v49 = Scalar;
      *v48 = &unk_1EA99F948;
      v48[1] = 0;
      v48[2] = 0;
      v48[3] = v49;
    }
    else
    {
      v48 = 0;
    }
  }
  else
  {
    v137 = 0uLL;
    v48 = 0;
    v149 = 0;
    *(_QWORD *)&v136 = 0;
  }
  *((_QWORD *)&v136 + 1) = v48;
  Scalar = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v152, a3);
  }
  else
  {
    v152[0] = &unk_1EA99FAC8;
    v152[1] = MIL::Operators::Train::ios16Train::CustomValidators::ValidateBaseOptimizer;
    v153 = v152;
  }
  v151 = 0;
  MIL::IROperator::Make((__int128 *)__p, &v137, &v136, (uint64_t)v152, (uint64_t)v150, a4);
  v50 = v151;
  if (v151 == v150)
  {
    v51 = 4;
    v50 = v150;
  }
  else
  {
    if (!v151)
      goto LABEL_57;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_57:
  v52 = v153;
  if (v153 == v152)
  {
    v53 = 4;
    v52 = v152;
    goto LABEL_61;
  }
  if (v153)
  {
    v53 = 5;
LABEL_61:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(__p[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&v144);
  v60 = v144;
  std::string::basic_string[abi:ne180100]<0>(v132, "xs");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v132, 0, &v157);
  v134 = v157;
  if (v157)
  {
    v61 = (std::__shared_weak_count *)operator new();
    v62 = v157;
    v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61[1].__vftable = (std::__shared_weak_count_vtbl *)v62;
  }
  else
  {
    v61 = 0;
  }
  v135 = v61;
  v157 = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v60->~__shared_weak_count + 3))(v60, &v134, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v63 = v135;
  if (v135)
  {
    p_shared_owners = (unint64_t *)&v135->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v157;
  v157 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  if (v133 < 0)
    operator delete(v132[0]);
  v67 = v144;
  std::string::basic_string[abi:ne180100]<0>(v126, "dxs");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v126, 0, &v157);
  v128 = v157;
  if (v157)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v69 = v157;
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = (std::__shared_weak_count_vtbl *)v69;
  }
  else
  {
    v68 = 0;
  }
  v129 = v68;
  v157 = 0;
  std::string::basic_string[abi:ne180100]<0>(v124, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v67->~__shared_weak_count + 3))(v67, &v128, v124);
  if (v125 < 0)
    operator delete(v124[0]);
  v70 = v129;
  if (v129)
  {
    v71 = (unint64_t *)&v129->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v157;
  v157 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  if (v127 < 0)
    operator delete(v126[0]);
  v74 = v144;
  std::string::basic_string[abi:ne180100]<0>(v120, "clip_norm");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v120, 1, &v157);
  v122 = v157;
  if (v157)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v76 = v157;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = (std::__shared_weak_count_vtbl *)v76;
  }
  else
  {
    v75 = 0;
  }
  v123 = v75;
  v157 = 0;
  std::string::basic_string[abi:ne180100]<0>(v118, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v74->~__shared_weak_count + 3))(v74, &v122, v118);
  if (v119 < 0)
    operator delete(v118[0]);
  v77 = v123;
  if (v123)
  {
    v78 = (unint64_t *)&v123->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v157;
  v157 = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  if (v121 < 0)
    operator delete(v120[0]);
  v81 = v144;
  std::string::basic_string[abi:ne180100]<0>(v114, "clip_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v114, 1, &v157);
  v116 = v157;
  if (v157)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v157;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = (std::__shared_weak_count_vtbl *)v83;
  }
  else
  {
    v82 = 0;
  }
  v117 = v82;
  v157 = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v81->~__shared_weak_count + 3))(v81, &v116, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v84 = v117;
  if (v117)
  {
    v85 = (unint64_t *)&v117->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v157;
  v157 = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  if (v115 < 0)
    operator delete(v114[0]);
  v88 = v144;
  std::string::basic_string[abi:ne180100]<0>(v108, "weight_decay");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v108, 1, &v157);
  v110 = v157;
  if (v157)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = v157;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = (std::__shared_weak_count_vtbl *)v90;
  }
  else
  {
    v89 = 0;
  }
  v111 = v89;
  v157 = 0;
  std::string::basic_string[abi:ne180100]<0>(v106, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v88->~__shared_weak_count + 3))(v88, &v110, v106);
  if (v107 < 0)
    operator delete(v106[0]);
  v91 = v111;
  if (v111)
  {
    v92 = (unint64_t *)&v111->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v157;
  v157 = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  if (v109 < 0)
    operator delete(v108[0]);
  v95 = *a4;
  v104 = v144;
  if (v144)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v144;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v97;
  }
  else
  {
    v96 = 0;
  }
  v105 = v96;
  v144 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v95 + 56))(v95, &v104);
  v98 = v105;
  if (v105)
  {
    v99 = (unint64_t *)&v105->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v144;
  v144 = 0;
  if (v101)
    (*((void (**)(std::__shared_weak_count_vtbl *))v101->~__shared_weak_count + 1))(v101);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  result = (uint64_t)v149;
  if (v149)
  {
    v103 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v149);
    return MEMORY[0x1E0C023A0](v103, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A58018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  if (a60 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v60 - 112), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v60 - 184), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Train::ios16Train::Adam::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  std::__shared_weak_count_vtbl *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  unsigned __int8 *v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  unsigned __int8 *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  unsigned __int8 *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  unsigned __int8 *v88;
  void **v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  void **v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  void **v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  uint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count_vtbl *v195;
  uint64_t result;
  uint64_t v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202[2];
  char v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  void *v206[2];
  char v207;
  void *v208[2];
  char v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  void *v212[2];
  char v213;
  void *v214[2];
  char v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  void *v218[2];
  char v219;
  void *v220[2];
  char v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  void *v224[2];
  char v225;
  void *v226[2];
  char v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  void *v230[2];
  char v231;
  void *v232[2];
  char v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  void *v236[2];
  char v237;
  void *v238[2];
  char v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  void *v242[2];
  char v243;
  void *v244[2];
  char v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  void *v248[2];
  char v249;
  void *v250[2];
  char v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  void *v254[2];
  char v255;
  void *v256[2];
  char v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  void *v260[2];
  char v261;
  void *v262[2];
  char v263;
  uint64_t v264;
  std::__shared_weak_count *v265;
  __int128 v266;
  __int128 v267;
  void *__p[2];
  uint64_t v269;
  __n128 v270;
  __n128 v271;
  __n128 v272;
  __n128 v273;
  __n128 v274;
  __n128 v275;
  __n128 v276;
  __n128 v277;
  __n128 v278;
  __n128 v279;
  __n128 v280;
  __n128 v281;
  __n128 v282;
  uint64_t v283;
  _QWORD *v284;
  _BYTE v285[24];
  _BYTE *v286;
  _QWORD v287[3];
  _QWORD *v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count_vtbl *v290;
  void (__cdecl **v291)(std::__shared_weak_count *__hidden);
  void **Scalar;
  void **v293;
  void **v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;

  v297 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v284 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  Scalar = v8;
  *v8 = (void *)v7;
  v293 = v8 + 1;
  v294 = v8 + 1;
  v295 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v289 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v290 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v291 = &v10->~__shared_weak_count_0;
  v296 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v289);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v295, 2, &v282);
  MIL::IRParameter::Make(&v282, &v283);
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "xs", &v283);
  v12 = v283;
  v283 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (std::__shared_weak_count *)v282.n128_u64[1];
  if (v282.n128_u64[1])
  {
    v14 = (unint64_t *)(v282.n128_u64[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v289)
  {
    v290 = v289;
    operator delete(v289);
  }
  if (Scalar)
  {
    v293 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 64))(*((_QWORD *)v11 + 5), 1);
  v16 = v284;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = (void **)operator new(8uLL);
  Scalar = v18;
  *v18 = (void *)v17;
  v293 = v18 + 1;
  v294 = v18 + 1;
  v295 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v289 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v290 = (std::__shared_weak_count_vtbl *)&v20->~__shared_weak_count_0;
  v291 = &v20->~__shared_weak_count_0;
  v296 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v289);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v295, 2, &v281);
  MIL::IRParameter::Make(&v281, &v283);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v16, "dxs", &v283);
  v22 = v283;
  v283 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)v281.n128_u64[1];
  if (v281.n128_u64[1])
  {
    v24 = (unint64_t *)(v281.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v289)
  {
    v290 = v289;
    operator delete(v289);
  }
  if (Scalar)
  {
    v293 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 64))(*((_QWORD *)v21 + 5), 1);
  v26 = v284;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v293 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v280);
  MIL::IRParameter::Make(&v280, (uint64_t *)&v289);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v26, "clip_norm", (uint64_t *)&v289);
  v28 = v289;
  v289 = 0;
  if (v28)
    (*((void (**)(std::__shared_weak_count_vtbl *))v28->~__shared_weak_count + 1))(v28);
  v29 = (std::__shared_weak_count *)v280.n128_u64[1];
  if (v280.n128_u64[1])
  {
    v30 = (unint64_t *)(v280.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 48))(*((_QWORD *)v27 + 5), 1);
  v32 = v284;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v293 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v279);
  MIL::IRParameter::Make(&v279, (uint64_t *)&v289);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v32, "clip_value", (uint64_t *)&v289);
  v34 = v289;
  v289 = 0;
  if (v34)
    (*((void (**)(std::__shared_weak_count_vtbl *))v34->~__shared_weak_count + 1))(v34);
  v35 = (std::__shared_weak_count *)v279.n128_u64[1];
  if (v279.n128_u64[1])
  {
    v36 = (unint64_t *)(v279.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 48))(*((_QWORD *)v33 + 5), 1);
  v38 = v284;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v293 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v278);
  MIL::IRParameter::Make(&v278, (uint64_t *)&v289);
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v38, "weight_decay", (uint64_t *)&v289);
  v40 = v289;
  v289 = 0;
  if (v40)
    (*((void (**)(std::__shared_weak_count_vtbl *))v40->~__shared_weak_count + 1))(v40);
  v41 = (std::__shared_weak_count *)v278.n128_u64[1];
  if (v278.n128_u64[1])
  {
    v42 = (unint64_t *)(v278.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 48))(*((_QWORD *)v39 + 5), 1);
  v44 = v284;
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = (void **)operator new(8uLL);
  Scalar = v46;
  *v46 = (void *)v45;
  v293 = v46 + 1;
  v294 = v46 + 1;
  v295 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v289 = v48;
  v48->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v47;
  v290 = (std::__shared_weak_count_vtbl *)&v48->~__shared_weak_count_0;
  v291 = &v48->~__shared_weak_count_0;
  v296 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v289);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v295, 2, &v277);
  MIL::IRParameter::Make(&v277, &v283);
  v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v44, "mean", &v283);
  v50 = v283;
  v283 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v277.n128_u64[1];
  if (v277.n128_u64[1])
  {
    v52 = (unint64_t *)(v277.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v289)
  {
    v290 = v289;
    operator delete(v289);
  }
  if (Scalar)
  {
    v293 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v49 + 5) + 64))(*((_QWORD *)v49 + 5), 1);
  v54 = v284;
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = (void **)operator new(8uLL);
  Scalar = v56;
  *v56 = (void *)v55;
  v293 = v56 + 1;
  v294 = v56 + 1;
  v295 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v289 = v58;
  v58->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v57;
  v290 = (std::__shared_weak_count_vtbl *)&v58->~__shared_weak_count_0;
  v291 = &v58->~__shared_weak_count_0;
  v296 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v289);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v295, 2, &v276);
  MIL::IRParameter::Make(&v276, &v283);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v54, "variance", &v283);
  v60 = v283;
  v283 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v276.n128_u64[1];
  if (v276.n128_u64[1])
  {
    v62 = (unint64_t *)(v276.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v289)
  {
    v290 = v289;
    operator delete(v289);
  }
  if (Scalar)
  {
    v293 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 64))(*((_QWORD *)v59 + 5), 1);
  v64 = v284;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v293 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v275);
  MIL::IRParameter::Make(&v275, (uint64_t *)&v289);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v64, "learning_rate", (uint64_t *)&v289);
  v65 = v289;
  v289 = 0;
  if (v65)
    (*((void (**)(std::__shared_weak_count_vtbl *))v65->~__shared_weak_count + 1))(v65);
  v66 = (std::__shared_weak_count *)v275.n128_u64[1];
  if (v275.n128_u64[1])
  {
    v67 = (unint64_t *)(v275.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v284;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v293 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v274);
  MIL::IRParameter::Make(&v274, (uint64_t *)&v289);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v69, "beta1", (uint64_t *)&v289);
  v71 = v289;
  v289 = 0;
  if (v71)
    (*((void (**)(std::__shared_weak_count_vtbl *))v71->~__shared_weak_count + 1))(v71);
  v72 = (std::__shared_weak_count *)v274.n128_u64[1];
  if (v274.n128_u64[1])
  {
    v73 = (unint64_t *)(v274.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  v75 = v284;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v293 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v273);
  MIL::IRParameter::Make(&v273, (uint64_t *)&v289);
  v76 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v75, "beta2", (uint64_t *)&v289);
  v77 = v289;
  v289 = 0;
  if (v77)
    (*((void (**)(std::__shared_weak_count_vtbl *))v77->~__shared_weak_count + 1))(v77);
  v78 = (std::__shared_weak_count *)v273.n128_u64[1];
  if (v273.n128_u64[1])
  {
    v79 = (unint64_t *)(v273.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 32))(*((_QWORD *)v76 + 5), 1);
  v81 = v284;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v293 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v272);
  MIL::IRParameter::Make(&v272, (uint64_t *)&v289);
  v82 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v81, "epsilon", (uint64_t *)&v289);
  v83 = v289;
  v289 = 0;
  if (v83)
    (*((void (**)(std::__shared_weak_count_vtbl *))v83->~__shared_weak_count + 1))(v83);
  v84 = (std::__shared_weak_count *)v272.n128_u64[1];
  if (v272.n128_u64[1])
  {
    v85 = (unint64_t *)(v272.n128_u64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v82 + 5) + 32))(*((_QWORD *)v82 + 5), 1);
  v87 = v284;
  v289 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v289, 1, &v271);
  MIL::IRParameter::Make(&v271, (uint64_t *)&Scalar);
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v87, "amsgrad", (uint64_t *)&Scalar);
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(void **))*v89 + 1))(v89);
  v90 = (std::__shared_weak_count *)v271.n128_u64[1];
  if (v271.n128_u64[1])
  {
    v91 = (unint64_t *)(v271.n128_u64[1] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v88 + 5) + 32))(*((_QWORD *)v88 + 5), 1);
  v93 = v284;
  v289 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v289, 1, &v270);
  MIL::IRParameter::Make(&v270, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v93, "step", (uint64_t *)&Scalar);
  v94 = Scalar;
  Scalar = 0;
  if (v94)
    (*((void (**)(void **))*v94 + 1))(v94);
  v95 = (std::__shared_weak_count *)v270.n128_u64[1];
  if (v270.n128_u64[1])
  {
    v96 = (unint64_t *)(v270.n128_u64[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  Scalar = 0;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v269 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v98 = (uint64_t)v284;
  *(_QWORD *)&v267 = v284;
  if (v284)
  {
    v99 = (_QWORD *)operator new();
    *v99 = &unk_1EA99F8E8;
    v99[1] = 0;
    v99[2] = 0;
    v99[3] = v98;
    *((_QWORD *)&v267 + 1) = v99;
    v284 = 0;
    *(_QWORD *)&v266 = Scalar;
    if (Scalar)
    {
      v100 = (_QWORD *)operator new();
      v101 = Scalar;
      *v100 = &unk_1EA99F948;
      v100[1] = 0;
      v100[2] = 0;
      v100[3] = v101;
    }
    else
    {
      v100 = 0;
    }
  }
  else
  {
    v267 = 0uLL;
    v100 = 0;
    v284 = 0;
    *(_QWORD *)&v266 = 0;
  }
  *((_QWORD *)&v266 + 1) = v100;
  Scalar = 0;
  v287[0] = &unk_1EA99FAC8;
  v287[1] = MIL::Operators::Train::ios16Train::CustomValidators::ValidateAdam;
  v288 = v287;
  v286 = 0;
  MIL::IROperator::Make((__int128 *)__p, &v267, &v266, (uint64_t)v287, (uint64_t)v285, a3);
  v102 = v286;
  if (v286 == v285)
  {
    v103 = 4;
    v102 = v285;
  }
  else
  {
    if (!v286)
      goto LABEL_118;
    v103 = 5;
  }
  (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_118:
  v104 = v288;
  if (v288 == v287)
  {
    v105 = 4;
    v104 = v287;
    goto LABEL_122;
  }
  if (v288)
  {
    v105 = 5;
LABEL_122:
    (*(void (**)(void))(*v104 + 8 * v105))();
  }
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v266 + 1);
  if (*((_QWORD *)&v266 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v266 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
  if (*((_QWORD *)&v267 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v267 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (SHIBYTE(v269) < 0)
    operator delete(__p[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&v289);
  v112 = v289;
  std::string::basic_string[abi:ne180100]<0>(v262, "xs");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v262, 0, &v295);
  v264 = v295;
  if (v295)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v295;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v265 = v113;
  v295 = 0;
  std::string::basic_string[abi:ne180100]<0>(v260, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v112->~__shared_weak_count + 3))(v112, &v264, v260);
  if (v261 < 0)
    operator delete(v260[0]);
  v115 = v265;
  if (v265)
  {
    p_shared_owners = (unint64_t *)&v265->__shared_owners_;
    do
      v117 = __ldaxr(p_shared_owners);
    while (__stlxr(v117 - 1, p_shared_owners));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v295;
  v295 = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  if (v263 < 0)
    operator delete(v262[0]);
  v119 = v289;
  std::string::basic_string[abi:ne180100]<0>(v256, "dxs");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v256, 0, &v295);
  v258 = v295;
  if (v295)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = v295;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = (std::__shared_weak_count_vtbl *)v121;
  }
  else
  {
    v120 = 0;
  }
  v259 = v120;
  v295 = 0;
  std::string::basic_string[abi:ne180100]<0>(v254, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v119->~__shared_weak_count + 3))(v119, &v258, v254);
  if (v255 < 0)
    operator delete(v254[0]);
  v122 = v259;
  if (v259)
  {
    v123 = (unint64_t *)&v259->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v295;
  v295 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  if (v257 < 0)
    operator delete(v256[0]);
  v126 = v289;
  std::string::basic_string[abi:ne180100]<0>(v250, "clip_norm");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v250, 1, &v295);
  v252 = v295;
  if (v295)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v295;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  }
  else
  {
    v127 = 0;
  }
  v253 = v127;
  v295 = 0;
  std::string::basic_string[abi:ne180100]<0>(v248, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v126->~__shared_weak_count + 3))(v126, &v252, v248);
  if (v249 < 0)
    operator delete(v248[0]);
  v129 = v253;
  if (v253)
  {
    v130 = (unint64_t *)&v253->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v295;
  v295 = 0;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  if (v251 < 0)
    operator delete(v250[0]);
  v133 = v289;
  std::string::basic_string[abi:ne180100]<0>(v244, "clip_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v244, 1, &v295);
  v246 = v295;
  if (v295)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = v295;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = (std::__shared_weak_count_vtbl *)v135;
  }
  else
  {
    v134 = 0;
  }
  v247 = v134;
  v295 = 0;
  std::string::basic_string[abi:ne180100]<0>(v242, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v133->~__shared_weak_count + 3))(v133, &v246, v242);
  if (v243 < 0)
    operator delete(v242[0]);
  v136 = v247;
  if (v247)
  {
    v137 = (unint64_t *)&v247->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v295;
  v295 = 0;
  if (v139)
    (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
  if (v245 < 0)
    operator delete(v244[0]);
  v140 = v289;
  std::string::basic_string[abi:ne180100]<0>(v238, "weight_decay");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v238, 1, &v295);
  v240 = v295;
  if (v295)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = v295;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = (std::__shared_weak_count_vtbl *)v142;
  }
  else
  {
    v141 = 0;
  }
  v241 = v141;
  v295 = 0;
  std::string::basic_string[abi:ne180100]<0>(v236, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v140->~__shared_weak_count + 3))(v140, &v240, v236);
  if (v237 < 0)
    operator delete(v236[0]);
  v143 = v241;
  if (v241)
  {
    v144 = (unint64_t *)&v241->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v295;
  v295 = 0;
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  if (v239 < 0)
    operator delete(v238[0]);
  v147 = v289;
  std::string::basic_string[abi:ne180100]<0>(v232, "mean");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v232, 0, &v295);
  v234 = v295;
  if (v295)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = v295;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = (std::__shared_weak_count_vtbl *)v149;
  }
  else
  {
    v148 = 0;
  }
  v235 = v148;
  v295 = 0;
  std::string::basic_string[abi:ne180100]<0>(v230, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v147->~__shared_weak_count + 3))(v147, &v234, v230);
  if (v231 < 0)
    operator delete(v230[0]);
  v150 = v235;
  if (v235)
  {
    v151 = (unint64_t *)&v235->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v295;
  v295 = 0;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  if (v233 < 0)
    operator delete(v232[0]);
  v154 = v289;
  std::string::basic_string[abi:ne180100]<0>(v226, "variance");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v226, 0, &v295);
  v228 = v295;
  if (v295)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = v295;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = (std::__shared_weak_count_vtbl *)v156;
  }
  else
  {
    v155 = 0;
  }
  v229 = v155;
  v295 = 0;
  std::string::basic_string[abi:ne180100]<0>(v224, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v154->~__shared_weak_count + 3))(v154, &v228, v224);
  if (v225 < 0)
    operator delete(v224[0]);
  v157 = v229;
  if (v229)
  {
    v158 = (unint64_t *)&v229->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = v295;
  v295 = 0;
  if (v160)
    (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
  if (v227 < 0)
    operator delete(v226[0]);
  v161 = v289;
  std::string::basic_string[abi:ne180100]<0>(v220, "learning_rate");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v220, 0, &v295);
  v222 = v295;
  if (v295)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = v295;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = (std::__shared_weak_count_vtbl *)v163;
  }
  else
  {
    v162 = 0;
  }
  v223 = v162;
  v295 = 0;
  std::string::basic_string[abi:ne180100]<0>(v218, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v161->~__shared_weak_count + 3))(v161, &v222, v218);
  if (v219 < 0)
    operator delete(v218[0]);
  v164 = v223;
  if (v223)
  {
    v165 = (unint64_t *)&v223->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v295;
  v295 = 0;
  if (v167)
    (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
  if (v221 < 0)
    operator delete(v220[0]);
  v168 = v289;
  std::string::basic_string[abi:ne180100]<0>(v214, "beta1");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v214, 0, &v295);
  v216 = v295;
  if (v295)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = v295;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = (std::__shared_weak_count_vtbl *)v170;
  }
  else
  {
    v169 = 0;
  }
  v217 = v169;
  v295 = 0;
  std::string::basic_string[abi:ne180100]<0>(v212, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v168->~__shared_weak_count + 3))(v168, &v216, v212);
  if (v213 < 0)
    operator delete(v212[0]);
  v171 = v217;
  if (v217)
  {
    v172 = (unint64_t *)&v217->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = v295;
  v295 = 0;
  if (v174)
    (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
  if (v215 < 0)
    operator delete(v214[0]);
  v175 = v289;
  std::string::basic_string[abi:ne180100]<0>(v208, "beta2");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v208, 0, &v295);
  v210 = v295;
  if (v295)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = v295;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = (std::__shared_weak_count_vtbl *)v177;
  }
  else
  {
    v176 = 0;
  }
  v211 = v176;
  v295 = 0;
  std::string::basic_string[abi:ne180100]<0>(v206, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v175->~__shared_weak_count + 3))(v175, &v210, v206);
  if (v207 < 0)
    operator delete(v206[0]);
  v178 = v211;
  if (v211)
  {
    v179 = (unint64_t *)&v211->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = v295;
  v295 = 0;
  if (v181)
    (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
  if (v209 < 0)
    operator delete(v208[0]);
  v182 = v289;
  std::string::basic_string[abi:ne180100]<0>(v202, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v202, 0, &v295);
  v204 = v295;
  if (v295)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = v295;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = (std::__shared_weak_count_vtbl *)v184;
  }
  else
  {
    v183 = 0;
  }
  v205 = v183;
  v295 = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v182->~__shared_weak_count + 3))(v182, &v204, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v185 = v205;
  if (v205)
  {
    v186 = (unint64_t *)&v205->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = v295;
  v295 = 0;
  if (v188)
    (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
  if (v203 < 0)
    operator delete(v202[0]);
  v189 = *a3;
  v198 = v289;
  if (v289)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = v289;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v191;
  }
  else
  {
    v190 = 0;
  }
  v199 = v190;
  v289 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v189 + 56))(v189, &v198);
  v192 = v199;
  if (v199)
  {
    v193 = (unint64_t *)&v199->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = v289;
  v289 = 0;
  if (v195)
    (*((void (**)(std::__shared_weak_count_vtbl *))v195->~__shared_weak_count + 1))(v195);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  result = (uint64_t)v284;
  if (v284)
  {
    v197 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v284);
    return MEMORY[0x1E0C023A0](v197, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A59DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2E0]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v1 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 192), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Train::ios16Train::Sgd::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  std::__shared_weak_count_vtbl *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  unsigned __int8 *v66;
  void **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void **v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  uint64_t result;
  uint64_t v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  void *v163[2];
  char v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  void *v167[2];
  char v168;
  void *v169[2];
  char v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  void *v175[2];
  char v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  void *v181[2];
  char v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  void *v187[2];
  char v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  void *v191[2];
  char v192;
  void *v193[2];
  char v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  void *v197[2];
  char v198;
  void *v199[2];
  char v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  __int128 v203;
  __int128 v204;
  void *__p[2];
  uint64_t v206;
  __n128 v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __n128 v211;
  __n128 v212;
  __n128 v213;
  __n128 v214;
  __n128 v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD v218[3];
  _QWORD *v219;
  _BYTE v220[24];
  _BYTE *v221;
  _QWORD v222[3];
  _QWORD *v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count_vtbl *v225;
  void (__cdecl **v226)(std::__shared_weak_count *__hidden);
  void **Scalar;
  void **v228;
  void **v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;

  v232 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v217 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  Scalar = v8;
  *v8 = (void *)v7;
  v228 = v8 + 1;
  v229 = v8 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v224 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v225 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v226 = &v10->~__shared_weak_count_0;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v224);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v230, 2, &v215);
  MIL::IRParameter::Make(&v215, &v216);
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "xs", &v216);
  v12 = v216;
  v216 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (std::__shared_weak_count *)v215.n128_u64[1];
  if (v215.n128_u64[1])
  {
    v14 = (unint64_t *)(v215.n128_u64[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (Scalar)
  {
    v228 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 64))(*((_QWORD *)v11 + 5), 1);
  v16 = v217;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = (void **)operator new(8uLL);
  Scalar = v18;
  *v18 = (void *)v17;
  v228 = v18 + 1;
  v229 = v18 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v224 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v225 = (std::__shared_weak_count_vtbl *)&v20->~__shared_weak_count_0;
  v226 = &v20->~__shared_weak_count_0;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v224);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v230, 2, &v214);
  MIL::IRParameter::Make(&v214, &v216);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v16, "dxs", &v216);
  v22 = v216;
  v216 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)v214.n128_u64[1];
  if (v214.n128_u64[1])
  {
    v24 = (unint64_t *)(v214.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (Scalar)
  {
    v228 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 64))(*((_QWORD *)v21 + 5), 1);
  v26 = v217;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v228 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v213);
  MIL::IRParameter::Make(&v213, (uint64_t *)&v224);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v26, "clip_norm", (uint64_t *)&v224);
  v28 = v224;
  v224 = 0;
  if (v28)
    (*((void (**)(std::__shared_weak_count_vtbl *))v28->~__shared_weak_count + 1))(v28);
  v29 = (std::__shared_weak_count *)v213.n128_u64[1];
  if (v213.n128_u64[1])
  {
    v30 = (unint64_t *)(v213.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 48))(*((_QWORD *)v27 + 5), 1);
  v32 = v217;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v228 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v212);
  MIL::IRParameter::Make(&v212, (uint64_t *)&v224);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v32, "clip_value", (uint64_t *)&v224);
  v34 = v224;
  v224 = 0;
  if (v34)
    (*((void (**)(std::__shared_weak_count_vtbl *))v34->~__shared_weak_count + 1))(v34);
  v35 = (std::__shared_weak_count *)v212.n128_u64[1];
  if (v212.n128_u64[1])
  {
    v36 = (unint64_t *)(v212.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 48))(*((_QWORD *)v33 + 5), 1);
  v38 = v217;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v228 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v211);
  MIL::IRParameter::Make(&v211, (uint64_t *)&v224);
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v38, "weight_decay", (uint64_t *)&v224);
  v40 = v224;
  v224 = 0;
  if (v40)
    (*((void (**)(std::__shared_weak_count_vtbl *))v40->~__shared_weak_count + 1))(v40);
  v41 = (std::__shared_weak_count *)v211.n128_u64[1];
  if (v211.n128_u64[1])
  {
    v42 = (unint64_t *)(v211.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 48))(*((_QWORD *)v39 + 5), 1);
  v44 = v217;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v228 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v210);
  MIL::IRParameter::Make(&v210, (uint64_t *)&v224);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v44, "learning_rate", (uint64_t *)&v224);
  v45 = v224;
  v224 = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = (std::__shared_weak_count *)v210.n128_u64[1];
  if (v210.n128_u64[1])
  {
    v47 = (unint64_t *)(v210.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v217;
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = (void **)operator new(8uLL);
  Scalar = v51;
  *v51 = (void *)v50;
  v228 = v51 + 1;
  v229 = v51 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v224 = v53;
  v53->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v52;
  v225 = (std::__shared_weak_count_vtbl *)&v53->~__shared_weak_count_0;
  v226 = &v53->~__shared_weak_count_0;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v224);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v230, 2, &v209);
  MIL::IRParameter::Make(&v209, &v216);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v49, "momentum", &v216);
  v55 = v216;
  v216 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v209.n128_u64[1];
  if (v209.n128_u64[1])
  {
    v57 = (unint64_t *)(v209.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (Scalar)
  {
    v228 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 48))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 64))(*((_QWORD *)v54 + 5), 1);
  v59 = v217;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v228 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v208);
  MIL::IRParameter::Make(&v208, (uint64_t *)&v224);
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v59, "momentum_val", (uint64_t *)&v224);
  v61 = v224;
  v224 = 0;
  if (v61)
    (*((void (**)(std::__shared_weak_count_vtbl *))v61->~__shared_weak_count + 1))(v61);
  v62 = (std::__shared_weak_count *)v208.n128_u64[1];
  if (v208.n128_u64[1])
  {
    v63 = (unint64_t *)(v208.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 48))(*((_QWORD *)v60 + 5), 1);
  v65 = v217;
  v224 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v224, 1, &v207);
  MIL::IRParameter::Make(&v207, (uint64_t *)&Scalar);
  v66 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v65, "nesterov", (uint64_t *)&Scalar);
  v67 = Scalar;
  Scalar = 0;
  if (v67)
    (*((void (**)(void **))*v67 + 1))(v67);
  v68 = (std::__shared_weak_count *)v207.n128_u64[1];
  if (v207.n128_u64[1])
  {
    v69 = (unint64_t *)(v207.n128_u64[1] + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 32))(*((_QWORD *)v66 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 48))(*((_QWORD *)v66 + 5), 1);
  Scalar = 0;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v206 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v71 = (uint64_t)v217;
  *(_QWORD *)&v204 = v217;
  if (v217)
  {
    v72 = (_QWORD *)operator new();
    *v72 = &unk_1EA99F8E8;
    v72[1] = 0;
    v72[2] = 0;
    v72[3] = v71;
    *((_QWORD *)&v204 + 1) = v72;
    v217 = 0;
    *(_QWORD *)&v203 = Scalar;
    if (Scalar)
    {
      v73 = (_QWORD *)operator new();
      v74 = Scalar;
      *v73 = &unk_1EA99F948;
      v73[1] = 0;
      v73[2] = 0;
      v73[3] = v74;
    }
    else
    {
      v73 = 0;
    }
  }
  else
  {
    v204 = 0uLL;
    v73 = 0;
    v217 = 0;
    *(_QWORD *)&v203 = 0;
  }
  *((_QWORD *)&v203 + 1) = v73;
  Scalar = 0;
  v222[0] = &unk_1EA99FAC8;
  v222[1] = MIL::Operators::Train::ios16Train::CustomValidators::ValidateSgd;
  v223 = v222;
  v221 = 0;
  MIL::IROperator::Make((__int128 *)__p, &v204, &v203, (uint64_t)v222, (uint64_t)v220, a3);
  v75 = v221;
  if (v221 == v220)
  {
    v76 = 4;
    v75 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_86;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_86:
  v77 = v223;
  if (v223 == v222)
  {
    v78 = 4;
    v77 = v222;
    goto LABEL_90;
  }
  if (v223)
  {
    v78 = 5;
LABEL_90:
    (*(void (**)(void))(*v77 + 8 * v78))();
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
  if (*((_QWORD *)&v203 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (SHIBYTE(v206) < 0)
    operator delete(__p[0]);
  v85 = *a3;
  v218[0] = &off_1EA99FBD8;
  v218[1] = MIL::Operators::Train::ios16Train::CustomValueTypeInference::ValueTypeInferenceSgd;
  v219 = v218;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v85 + 200))(v85, v218);
  v86 = v219;
  if (v219 == v218)
  {
    v87 = 4;
    v86 = v218;
  }
  else
  {
    if (!v219)
      goto LABEL_108;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_108:
  MIL::Validation::TensorDTypeConstraints::Make(&v224);
  v88 = v224;
  std::string::basic_string[abi:ne180100]<0>(v199, "xs");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v199, 0, &v230);
  v201 = v230;
  if (v230)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = v230;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = (std::__shared_weak_count_vtbl *)v90;
  }
  else
  {
    v89 = 0;
  }
  v202 = v89;
  v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v197, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v88->~__shared_weak_count + 3))(v88, &v201, v197);
  if (v198 < 0)
    operator delete(v197[0]);
  v91 = v202;
  if (v202)
  {
    p_shared_owners = (unint64_t *)&v202->__shared_owners_;
    do
      v93 = __ldaxr(p_shared_owners);
    while (__stlxr(v93 - 1, p_shared_owners));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v230;
  v230 = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  if (v200 < 0)
    operator delete(v199[0]);
  v95 = v224;
  std::string::basic_string[abi:ne180100]<0>(v193, "dxs");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v193, 0, &v230);
  v195 = v230;
  if (v230)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v230;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = (std::__shared_weak_count_vtbl *)v97;
  }
  else
  {
    v96 = 0;
  }
  v196 = v96;
  v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v191, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v95->~__shared_weak_count + 3))(v95, &v195, v191);
  if (v192 < 0)
    operator delete(v191[0]);
  v98 = v196;
  if (v196)
  {
    v99 = (unint64_t *)&v196->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v230;
  v230 = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  if (v194 < 0)
    operator delete(v193[0]);
  v102 = v224;
  std::string::basic_string[abi:ne180100]<0>(v187, "clip_norm");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v187, 1, &v230);
  v189 = v230;
  if (v230)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = v230;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = (std::__shared_weak_count_vtbl *)v104;
  }
  else
  {
    v103 = 0;
  }
  v190 = v103;
  v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v102->~__shared_weak_count + 3))(v102, &v189, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v105 = v190;
  if (v190)
  {
    v106 = (unint64_t *)&v190->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v230;
  v230 = 0;
  if (v108)
    (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
  if (v188 < 0)
    operator delete(v187[0]);
  v109 = v224;
  std::string::basic_string[abi:ne180100]<0>(v181, "clip_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v181, 1, &v230);
  v183 = v230;
  if (v230)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = v230;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = (std::__shared_weak_count_vtbl *)v111;
  }
  else
  {
    v110 = 0;
  }
  v184 = v110;
  v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v109->~__shared_weak_count + 3))(v109, &v183, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v112 = v184;
  if (v184)
  {
    v113 = (unint64_t *)&v184->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v230;
  v230 = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v182 < 0)
    operator delete(v181[0]);
  v116 = v224;
  std::string::basic_string[abi:ne180100]<0>(v175, "weight_decay");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v175, 1, &v230);
  v177 = v230;
  if (v230)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v230;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = (std::__shared_weak_count_vtbl *)v118;
  }
  else
  {
    v117 = 0;
  }
  v178 = v117;
  v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v116->~__shared_weak_count + 3))(v116, &v177, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v119 = v178;
  if (v178)
  {
    v120 = (unint64_t *)&v178->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v230;
  v230 = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  if (v176 < 0)
    operator delete(v175[0]);
  v123 = v224;
  std::string::basic_string[abi:ne180100]<0>(v169, "learning_rate");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v169, 0, &v230);
  v171 = v230;
  if (v230)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = v230;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = (std::__shared_weak_count_vtbl *)v125;
  }
  else
  {
    v124 = 0;
  }
  v172 = v124;
  v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v167, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v123->~__shared_weak_count + 3))(v123, &v171, v167);
  if (v168 < 0)
    operator delete(v167[0]);
  v126 = v172;
  if (v172)
  {
    v127 = (unint64_t *)&v172->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v230;
  v230 = 0;
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  if (v170 < 0)
    operator delete(v169[0]);
  v130 = v224;
  std::string::basic_string[abi:ne180100]<0>(v163, "momentum");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v163, 1, &v230);
  v165 = v230;
  if (v230)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = v230;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = (std::__shared_weak_count_vtbl *)v132;
  }
  else
  {
    v131 = 0;
  }
  v166 = v131;
  v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v130->~__shared_weak_count + 3))(v130, &v165, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v133 = v166;
  if (v166)
  {
    v134 = (unint64_t *)&v166->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v230;
  v230 = 0;
  if (v136)
    (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
  if (v164 < 0)
    operator delete(v163[0]);
  v137 = v224;
  std::string::basic_string[abi:ne180100]<0>(v157, "momentum_val");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v157, 1, &v230);
  v159 = v230;
  if (v230)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = v230;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = (std::__shared_weak_count_vtbl *)v139;
  }
  else
  {
    v138 = 0;
  }
  v160 = v138;
  v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v155, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v137->~__shared_weak_count + 3))(v137, &v159, v155);
  if (v156 < 0)
    operator delete(v155[0]);
  v140 = v160;
  if (v160)
  {
    v141 = (unint64_t *)&v160->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v230;
  v230 = 0;
  if (v143)
    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  if (v158 < 0)
    operator delete(v157[0]);
  v144 = *a3;
  v153 = v224;
  if (v224)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = v224;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v154 = v145;
  v224 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v144 + 56))(v144, &v153);
  v147 = v154;
  if (v154)
  {
    v148 = (unint64_t *)&v154->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v224;
  v224 = 0;
  if (v150)
    (*((void (**)(std::__shared_weak_count_vtbl *))v150->~__shared_weak_count + 1))(v150);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  result = (uint64_t)v217;
  if (v217)
  {
    v152 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v217);
    return MEMORY[0x1E0C023A0](v152, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A5B9F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v1 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 224), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Train::ios16Train::BasePoolGrad::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unsigned __int8 *v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  unsigned __int8 *v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unsigned __int8 *v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count_vtbl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  char *v94;
  char *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  char **v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  void *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  void *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void *v141;
  void *v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count_vtbl *v148;
  void *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count_vtbl *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  void *v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count_vtbl *v169;
  void *v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count_vtbl *v176;
  void *v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count_vtbl *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count_vtbl *v183;
  void *v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count_vtbl *v190;
  void *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count_vtbl *v197;
  void *v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count_vtbl *v204;
  void *v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count_vtbl *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  void *v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  uint64_t v221;
  uint64_t i;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count_vtbl *v233;
  uint64_t result;
  uint64_t v235;
  std::__shared_weak_count_vtbl *v236;
  std::__shared_weak_count *v237;
  void *v238[2];
  char v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  void *v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  std::__shared_weak_count_vtbl *v246;
  std::__shared_weak_count *v247;
  void *v248[2];
  char v249;
  std::__shared_weak_count_vtbl *v250;
  std::__shared_weak_count *v251;
  void *v252[2];
  char v253;
  void *v254[2];
  char v255;
  std::__shared_weak_count_vtbl *v256;
  std::__shared_weak_count *v257;
  void *v258[2];
  char v259;
  void *v260[2];
  char v261;
  std::__shared_weak_count_vtbl *v262;
  std::__shared_weak_count *v263;
  void *v264[2];
  char v265;
  void *v266[2];
  char v267;
  std::__shared_weak_count_vtbl *v268;
  std::__shared_weak_count *v269;
  void *v270[2];
  char v271;
  void *v272[2];
  char v273;
  std::__shared_weak_count_vtbl *v274;
  std::__shared_weak_count *v275;
  void *v276[2];
  char v277;
  void *v278[2];
  char v279;
  std::__shared_weak_count_vtbl *v280;
  std::__shared_weak_count *v281;
  void *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count_vtbl *v284;
  std::__shared_weak_count *v285;
  void *v286[2];
  char v287;
  std::__shared_weak_count_vtbl *v288;
  std::__shared_weak_count *v289;
  void *v290;
  std::__shared_weak_count *v291;
  void *v292[2];
  char v293;
  std::__shared_weak_count_vtbl *v294;
  std::__shared_weak_count *v295;
  void *v296[2];
  char v297;
  void *v298[2];
  char v299;
  std::__shared_weak_count_vtbl *v300;
  std::__shared_weak_count *v301;
  void *v302[2];
  char v303;
  void *v304[2];
  char v305;
  std::__shared_weak_count_vtbl *v306;
  std::__shared_weak_count *v307;
  __int128 v308;
  __int128 v309;
  void *v310[2];
  uint64_t v311;
  __n128 v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  char **v316;
  __n128 v317;
  __n128 v318;
  __n128 v319;
  __n128 v320;
  __n128 v321;
  __n128 v322;
  __n128 v323;
  _QWORD *v324;
  void *__p;
  void *v326;
  char *v327;
  _QWORD v328[3];
  _QWORD v329[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v332;
  _BYTE v333[24];
  _BYTE *v334;
  _QWORD v335[3];
  _QWORD *v336;
  std::__shared_weak_count_vtbl *v337;
  uint64_t v338;
  const void *(__cdecl **v339)(const std::__shared_weak_count *__hidden, const std::type_info *);
  _QWORD v340[3];

  v340[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v324 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(8uLL);
  __p = v10;
  *(_QWORD *)v10 = v9;
  v327 = v10 + 8;
  v326 = v10 + 8;
  v337 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v12;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v12->~__shared_weak_count_0;
  v332 = &v12->~__shared_weak_count_0;
  v338 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v337, 2, &v323);
  MIL::IRParameter::Make(&v323, &v314);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "dy", &v314);
  v13 = v314;
  v314 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v323.n128_u64[1];
  if (v323.n128_u64[1])
  {
    v15 = (unint64_t *)(v323.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v326 = __p;
    operator delete(__p);
  }
  v17 = v324;
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (char *)operator new(0x18uLL);
  v327 = v21 + 24;
  *(_QWORD *)v21 = v18;
  *((_QWORD *)v21 + 1) = v19;
  *((_QWORD *)v21 + 2) = v20;
  __p = v21;
  v326 = v21 + 24;
  v337 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v25->__get_deleter;
  v332 = &v25->__get_deleter;
  v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  v25->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v23;
  v25->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v24;
  Scalar = v25;
  v338 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v337, 2, &v322);
  MIL::IRParameter::Make(&v322, &v314);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "x", &v314);
  v26 = v314;
  v314 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = (std::__shared_weak_count *)v322.n128_u64[1];
  if (v322.n128_u64[1])
  {
    v28 = (unint64_t *)(v322.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v326 = __p;
    operator delete(__p);
  }
  v30 = v324;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = (char *)operator new(8uLL);
  __p = v32;
  *(_QWORD *)v32 = v31;
  v327 = v32 + 8;
  v326 = v32 + 8;
  v337 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v337, 1, &v321);
  MIL::IRParameter::Make(&v321, (uint64_t *)&Scalar);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v30, "kernel_sizes", (uint64_t *)&Scalar);
  v34 = Scalar;
  Scalar = 0;
  if (v34)
    (*((void (**)(std::__shared_weak_count_vtbl *))v34->~__shared_weak_count + 1))(v34);
  v35 = (std::__shared_weak_count *)v321.n128_u64[1];
  if (v321.n128_u64[1])
  {
    v36 = (unint64_t *)(v321.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (__p)
  {
    v326 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v38 = v324;
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (char *)operator new(8uLL);
  __p = v40;
  *(_QWORD *)v40 = v39;
  v327 = v40 + 8;
  v326 = v40 + 8;
  v337 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v337, 1, &v320);
  MIL::IRParameter::Make(&v320, (uint64_t *)&Scalar);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v38, "strides", (uint64_t *)&Scalar);
  v42 = Scalar;
  Scalar = 0;
  if (v42)
    (*((void (**)(std::__shared_weak_count_vtbl *))v42->~__shared_weak_count + 1))(v42);
  v43 = (std::__shared_weak_count *)v320.n128_u64[1];
  if (v320.n128_u64[1])
  {
    v44 = (unint64_t *)(v320.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (__p)
  {
    v326 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  v46 = v324;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v319);
  MIL::IRParameter::Make(&v319, (uint64_t *)&__p);
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v46, "pad_type", (uint64_t *)&__p);
  v48 = __p;
  __p = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v319.n128_u64[1];
  if (v319.n128_u64[1])
  {
    v50 = (unint64_t *)(v319.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v324;
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = (char *)operator new(0x10uLL);
  v327 = v55 + 16;
  *(_QWORD *)v55 = v53;
  *((_QWORD *)v55 + 1) = v54;
  __p = v55;
  v326 = v55 + 16;
  v337 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v337, 1, &v318);
  MIL::IRParameter::Make(&v318, (uint64_t *)&Scalar);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v52, "pad", (uint64_t *)&Scalar);
  v57 = Scalar;
  Scalar = 0;
  if (v57)
    (*((void (**)(std::__shared_weak_count_vtbl *))v57->~__shared_weak_count + 1))(v57);
  v58 = (std::__shared_weak_count *)v318.n128_u64[1];
  if (v318.n128_u64[1])
  {
    v59 = (unint64_t *)(v318.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (__p)
  {
    v326 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  v61 = v324;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v317);
  MIL::IRParameter::Make(&v317, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v61, "ceil_mode", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v317.n128_u64[1];
  if (v317.n128_u64[1])
  {
    v65 = (unint64_t *)(v317.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  v316 = 0;
  v67 = operator new();
  *(_QWORD *)v67 = 0;
  *(_QWORD *)(v67 + 8) = 0;
  *(_QWORD *)(v67 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v316, (void **)v67);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v316, 1uLL);
  v68 = v316;
  v69 = MIL::IRUnknownDimension::Make(a1, 0);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v72->__get_deleter;
  v332 = &v72->__get_deleter;
  v72->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v69;
  v72->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v70;
  v72->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v71;
  Scalar = v72;
  v340[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = MIL::IRUnknownDimension::Make(a1, 0);
  v75 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v76 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v338 = (uint64_t)&v76->__get_deleter;
  v339 = &v76->__get_deleter;
  v76->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v73;
  v76->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v74;
  v76->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v75;
  v337 = v76;
  v340[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v337);
  MIL::IRParameter::MakeTypeSet((uint64_t)v340, 2, &v312);
  MIL::IRParameter::Make(&v312, &v313);
  v77 = v313;
  v314 = v313;
  if (v313)
  {
    v78 = (_QWORD *)operator new();
    v79 = v313;
    *v78 = &unk_1EA99F888;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v79;
  }
  else
  {
    v78 = 0;
  }
  v315 = v78;
  v313 = 0;
  v80 = v68[2];
  v81 = v68[1];
  if (v81 >= v80)
  {
    v83 = (v81 - *v68) >> 4;
    v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v85 = v80 - *v68;
    if (v85 >> 3 > v84)
      v84 = v85 >> 3;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
      v86 = 0xFFFFFFFFFFFFFFFLL;
    else
      v86 = v84;
    v328[1] = v68 + 2;
    v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v68 + 2), v86);
    v89 = (uint64_t *)&v87[16 * v83];
    *v89 = v77;
    v89[1] = (uint64_t)v78;
    v315 = 0;
    v314 = 0;
    v91 = *v68;
    v90 = v68[1];
    if (v90 == *v68)
    {
      v94 = v68[1];
      v92 = &v87[16 * v83];
    }
    else
    {
      v92 = &v87[16 * v83];
      do
      {
        v93 = *((_OWORD *)v90 - 1);
        v90 -= 16;
        *((_OWORD *)v92 - 1) = v93;
        v92 -= 16;
        *(_QWORD *)v90 = 0;
        *((_QWORD *)v90 + 1) = 0;
      }
      while (v90 != v91);
      v94 = *v68;
      v90 = v68[1];
    }
    v82 = (char *)(v89 + 2);
    *v68 = v92;
    v326 = v94;
    v68[1] = (char *)(v89 + 2);
    v327 = v90;
    v95 = v68[2];
    v68[2] = &v87[16 * v88];
    v328[0] = v95;
    __p = v94;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v81 = v77;
    *((_QWORD *)v81 + 1) = v78;
    v82 = v81 + 16;
    v315 = 0;
    v314 = 0;
  }
  v68[1] = v82;
  v96 = v313;
  v313 = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = (std::__shared_weak_count *)v312.n128_u64[1];
  if (v312.n128_u64[1])
  {
    v98 = (unint64_t *)(v312.n128_u64[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (v337)
  {
    v338 = (uint64_t)v337;
    operator delete(v337);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v310 = *(_OWORD *)a2;
  v311 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v100 = (uint64_t)v324;
  *(_QWORD *)&v309 = v324;
  if (v324)
  {
    v101 = (_QWORD *)operator new();
    *v101 = &unk_1EA99F8E8;
    v101[1] = 0;
    v101[2] = 0;
    v101[3] = v100;
  }
  else
  {
    v101 = 0;
  }
  *((_QWORD *)&v309 + 1) = v101;
  v324 = 0;
  *(_QWORD *)&v308 = v316;
  if (v316)
  {
    v102 = (_QWORD *)operator new();
    v103 = v316;
    *v102 = &unk_1EA99F948;
    v102[1] = 0;
    v102[2] = 0;
    v102[3] = v103;
  }
  else
  {
    v102 = 0;
  }
  *((_QWORD *)&v308 + 1) = v102;
  v316 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v335, a3);
  }
  else
  {
    v335[0] = &unk_1EA99FAC8;
    v335[1] = MIL::Operators::Train::ios16Train::CustomValidators::ValidateBasePoolGrad;
    v336 = v335;
  }
  v334 = 0;
  MIL::IROperator::Make((__int128 *)v310, &v309, &v308, (uint64_t)v335, (uint64_t)v333, a4);
  v104 = v334;
  if (v334 == v333)
  {
    v105 = 4;
    v104 = v333;
  }
  else
  {
    if (!v334)
      goto LABEL_106;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_106:
  v106 = v336;
  if (v336 == v335)
  {
    v107 = 4;
    v106 = v335;
    goto LABEL_110;
  }
  if (v336)
  {
    v107 = 5;
LABEL_110:
    (*(void (**)(void))(*v106 + 8 * v107))();
  }
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
  if (*((_QWORD *)&v308 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v308 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v309 + 1);
  if (*((_QWORD *)&v309 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v309 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (SHIBYTE(v311) < 0)
    operator delete(v310[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v114 = __p;
  std::string::basic_string[abi:ne180100]<0>(v304, "dy");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v304, 0, (uint64_t *)&Scalar);
  v306 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v307 = v115;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v302, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v114 + 24))(v114, &v306, v302);
  if (v303 < 0)
    operator delete(v302[0]);
  v117 = v307;
  if (v307)
  {
    p_shared_owners = (unint64_t *)&v307->__shared_owners_;
    do
      v119 = __ldaxr(p_shared_owners);
    while (__stlxr(v119 - 1, p_shared_owners));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*((void (**)(std::__shared_weak_count_vtbl *))v120->~__shared_weak_count + 1))(v120);
  if (v305 < 0)
    operator delete(v304[0]);
  v121 = __p;
  std::string::basic_string[abi:ne180100]<0>(v298, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v298, 0, (uint64_t *)&Scalar);
  v300 = Scalar;
  if (Scalar)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = Scalar;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v301 = v122;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v296, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v121 + 24))(v121, &v300, v296);
  if (v297 < 0)
    operator delete(v296[0]);
  v124 = v301;
  if (v301)
  {
    v125 = (unint64_t *)&v301->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = Scalar;
  Scalar = 0;
  if (v127)
    (*((void (**)(std::__shared_weak_count_vtbl *))v127->~__shared_weak_count + 1))(v127);
  if (v299 < 0)
    operator delete(v298[0]);
  v128 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v294 = Scalar;
  if (Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v295 = v129;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v292, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v128 + 24))(v128, &v294, v292);
  if (v293 < 0)
    operator delete(v292[0]);
  v131 = v295;
  if (v295)
  {
    v132 = (unint64_t *)&v295->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = Scalar;
  Scalar = 0;
  if (v134)
    (*((void (**)(std::__shared_weak_count_vtbl *))v134->~__shared_weak_count + 1))(v134);
  v135 = *a4;
  v290 = __p;
  if (__p)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = (std::__shared_weak_count_vtbl *)__p;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v291 = v136;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v135 + 56))(v135, &v290);
  v138 = v291;
  if (v291)
  {
    v139 = (unint64_t *)&v291->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = __p;
  __p = 0;
  if (v141)
    (*(void (**)(void *))(*(_QWORD *)v141 + 8))(v141);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v142 = __p;
  std::string::basic_string[abi:ne180100]<0>(v286, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v286, 0, (uint64_t *)&Scalar);
  v288 = Scalar;
  if (Scalar)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = Scalar;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v289 = v143;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v142 + 32))(v142, &v288, 3, 5);
  v145 = v289;
  if (v289)
  {
    v146 = (unint64_t *)&v289->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = Scalar;
  Scalar = 0;
  if (v148)
    (*((void (**)(std::__shared_weak_count_vtbl *))v148->~__shared_weak_count + 1))(v148);
  if (v287 < 0)
    operator delete(v286[0]);
  v149 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v284 = Scalar;
  if (Scalar)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = Scalar;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v285 = v150;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v149 + 32))(v149, &v284, 3, 5);
  v152 = v285;
  if (v285)
  {
    v153 = (unint64_t *)&v285->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = Scalar;
  Scalar = 0;
  if (v155)
    (*((void (**)(std::__shared_weak_count_vtbl *))v155->~__shared_weak_count + 1))(v155);
  v156 = *a4;
  v282 = __p;
  if (__p)
  {
    v157 = (std::__shared_weak_count *)operator new();
    v158 = (std::__shared_weak_count_vtbl *)__p;
    v157->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v157->__shared_owners_ = 0;
    v157->__shared_weak_owners_ = 0;
    v157[1].__vftable = v158;
  }
  else
  {
    v157 = 0;
  }
  v283 = v157;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v156 + 56))(v156, &v282);
  v159 = v283;
  if (v283)
  {
    v160 = (unint64_t *)&v283->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = __p;
  __p = 0;
  if (v162)
    (*(void (**)(void *))(*(_QWORD *)v162 + 8))(v162);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v163 = __p;
  std::string::basic_string[abi:ne180100]<0>(v278, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v278, 0, (uint64_t *)&Scalar);
  v280 = Scalar;
  if (Scalar)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = Scalar;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v281 = v164;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v276, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v163 + 24))(v163, &v280, 1, v276);
  if (v277 < 0)
    operator delete(v276[0]);
  v166 = v281;
  if (v281)
  {
    v167 = (unint64_t *)&v281->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = Scalar;
  Scalar = 0;
  if (v169)
    (*((void (**)(std::__shared_weak_count_vtbl *))v169->~__shared_weak_count + 1))(v169);
  if (v279 < 0)
    operator delete(v278[0]);
  v170 = __p;
  std::string::basic_string[abi:ne180100]<0>(v272, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v272, 0, (uint64_t *)&Scalar);
  v274 = Scalar;
  if (Scalar)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = Scalar;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = v172;
  }
  else
  {
    v171 = 0;
  }
  v275 = v171;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v270, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))(*(_QWORD *)v170 + 32))(v170, &v274, 2, -1, v270);
  if (v271 < 0)
    operator delete(v270[0]);
  v173 = v275;
  if (v275)
  {
    v174 = (unint64_t *)&v275->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = Scalar;
  Scalar = 0;
  if (v176)
    (*((void (**)(std::__shared_weak_count_vtbl *))v176->~__shared_weak_count + 1))(v176);
  if (v273 < 0)
    operator delete(v272[0]);
  v177 = __p;
  std::string::basic_string[abi:ne180100]<0>(v266, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v266, 0, (uint64_t *)&Scalar);
  v268 = Scalar;
  if (Scalar)
  {
    v178 = (std::__shared_weak_count *)operator new();
    v179 = Scalar;
    v178->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v178->__shared_owners_ = 0;
    v178->__shared_weak_owners_ = 0;
    v178[1].__vftable = v179;
  }
  else
  {
    v178 = 0;
  }
  v269 = v178;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v264, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v177 + 24))(v177, &v268, 0, v264);
  if (v265 < 0)
    operator delete(v264[0]);
  v180 = v269;
  if (v269)
  {
    v181 = (unint64_t *)&v269->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = Scalar;
  Scalar = 0;
  if (v183)
    (*((void (**)(std::__shared_weak_count_vtbl *))v183->~__shared_weak_count + 1))(v183);
  if (v267 < 0)
    operator delete(v266[0]);
  v184 = __p;
  std::string::basic_string[abi:ne180100]<0>(v260, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v260, 0, (uint64_t *)&Scalar);
  v262 = Scalar;
  if (Scalar)
  {
    v185 = (std::__shared_weak_count *)operator new();
    v186 = Scalar;
    v185->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v185->__shared_owners_ = 0;
    v185->__shared_weak_owners_ = 0;
    v185[1].__vftable = v186;
  }
  else
  {
    v185 = 0;
  }
  v263 = v185;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v258, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v184 + 24))(v184, &v262, 0, v258);
  if (v259 < 0)
    operator delete(v258[0]);
  v187 = v263;
  if (v263)
  {
    v188 = (unint64_t *)&v263->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = Scalar;
  Scalar = 0;
  if (v190)
    (*((void (**)(std::__shared_weak_count_vtbl *))v190->~__shared_weak_count + 1))(v190);
  if (v261 < 0)
    operator delete(v260[0]);
  v191 = __p;
  std::string::basic_string[abi:ne180100]<0>(v254, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v254, 0, (uint64_t *)&Scalar);
  v256 = Scalar;
  if (Scalar)
  {
    v192 = (std::__shared_weak_count *)operator new();
    v193 = Scalar;
    v192->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v192->__shared_owners_ = 0;
    v192->__shared_weak_owners_ = 0;
    v192[1].__vftable = v193;
  }
  else
  {
    v192 = 0;
  }
  v257 = v192;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v252, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v191 + 24))(v191, &v256, 0, v252);
  if (v253 < 0)
    operator delete(v252[0]);
  v194 = v257;
  if (v257)
  {
    v195 = (unint64_t *)&v257->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = Scalar;
  Scalar = 0;
  if (v197)
    (*((void (**)(std::__shared_weak_count_vtbl *))v197->~__shared_weak_count + 1))(v197);
  if (v255 < 0)
    operator delete(v254[0]);
  v198 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v250 = Scalar;
  if (Scalar)
  {
    v199 = (std::__shared_weak_count *)operator new();
    v200 = Scalar;
    v199->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v199->__shared_owners_ = 0;
    v199->__shared_weak_owners_ = 0;
    v199[1].__vftable = v200;
  }
  else
  {
    v199 = 0;
  }
  v251 = v199;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v248, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v198 + 24))(v198, &v250, 1, v248);
  if (v249 < 0)
    operator delete(v248[0]);
  v201 = v251;
  if (v251)
  {
    v202 = (unint64_t *)&v251->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v204 = Scalar;
  Scalar = 0;
  if (v204)
    (*((void (**)(std::__shared_weak_count_vtbl *))v204->~__shared_weak_count + 1))(v204);
  v205 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v246 = Scalar;
  if (Scalar)
  {
    v206 = (std::__shared_weak_count *)operator new();
    v207 = Scalar;
    v206->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v206->__shared_owners_ = 0;
    v206->__shared_weak_owners_ = 0;
    v206[1].__vftable = v207;
  }
  else
  {
    v206 = 0;
  }
  v247 = v206;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v244, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))(*(_QWORD *)v205 + 32))(v205, &v246, 2, -1, v244);
  if (v245 < 0)
    operator delete(v244[0]);
  v208 = v247;
  if (v247)
  {
    v209 = (unint64_t *)&v247->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = Scalar;
  Scalar = 0;
  if (v211)
    (*((void (**)(std::__shared_weak_count_vtbl *))v211->~__shared_weak_count + 1))(v211);
  v212 = *a4;
  v242 = __p;
  if (__p)
  {
    v213 = (std::__shared_weak_count *)operator new();
    v214 = (std::__shared_weak_count_vtbl *)__p;
    v213->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v213->__shared_owners_ = 0;
    v213->__shared_weak_owners_ = 0;
    v213[1].__vftable = v214;
  }
  else
  {
    v213 = 0;
  }
  v243 = v213;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v212 + 56))(v212, &v242);
  v215 = v243;
  if (v243)
  {
    v216 = (unint64_t *)&v243->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = __p;
  __p = 0;
  if (v218)
    (*(void (**)(void *))(*(_QWORD *)v218 + 8))(v218);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v337);
  v219 = v337;
  std::string::basic_string[abi:ne180100]<0>(v238, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v238, 0, &v314);
  v240 = v314;
  if (v314)
  {
    v220 = (std::__shared_weak_count *)operator new();
    v221 = v314;
    v220->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v220->__shared_owners_ = 0;
    v220->__shared_weak_owners_ = 0;
    v220[1].__vftable = (std::__shared_weak_count_vtbl *)v221;
  }
  else
  {
    v220 = 0;
  }
  v241 = v220;
  v314 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "custom");
  std::string::basic_string[abi:ne180100]<0>(v328, "same");
  std::string::basic_string[abi:ne180100]<0>(v329, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 3);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v219->~__shared_weak_count
   + 3))(v219, &v240, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v329[i + 2]) < 0)
      operator delete((void *)v329[i]);
  }
  v223 = v241;
  if (v241)
  {
    v224 = (unint64_t *)&v241->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = v314;
  v314 = 0;
  if (v226)
    (*(void (**)(uint64_t))(*(_QWORD *)v226 + 8))(v226);
  if (v239 < 0)
    operator delete(v238[0]);
  v227 = *a4;
  v236 = v337;
  if (v337)
  {
    v228 = (std::__shared_weak_count *)operator new();
    v229 = v337;
    v228->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v228->__shared_owners_ = 0;
    v228->__shared_weak_owners_ = 0;
    v228[1].__vftable = v229;
  }
  else
  {
    v228 = 0;
  }
  v237 = v228;
  v337 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v227 + 56))(v227, &v236);
  v230 = v237;
  if (v237)
  {
    v231 = (unint64_t *)&v237->__shared_owners_;
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
    }
  }
  v233 = v337;
  v337 = 0;
  if (v233)
    (*((void (**)(std::__shared_weak_count_vtbl *))v233->~__shared_weak_count + 1))(v233);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v316, 0);
  result = (uint64_t)v324;
  if (v324)
  {
    v235 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v324);
    return MEMORY[0x1E0C023A0](v235, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A5DC5C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x340], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3B8], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Train::ios16Train::BaseAvgPoolGrad::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unsigned __int8 *v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  unsigned __int8 *v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unsigned __int8 *v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  unsigned __int8 *v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  char **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t *v95;
  char *v96;
  char *v97;
  char *v98;
  __int128 v99;
  char *v100;
  char *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  char **v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *p_shared_owners;
  unint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  void *v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count_vtbl *v133;
  void *v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count_vtbl *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  void *v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count_vtbl *v154;
  void *v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count_vtbl *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void *v168;
  void *v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count_vtbl *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count_vtbl *v175;
  void *v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count_vtbl *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count_vtbl *v182;
  void *v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count_vtbl *v189;
  void *v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count_vtbl *v196;
  void *v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count_vtbl *v203;
  void *v204;
  std::__shared_weak_count *v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count_vtbl *v210;
  void *v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count_vtbl *v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  void *v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  uint64_t v227;
  uint64_t i;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count_vtbl *v239;
  uint64_t result;
  uint64_t v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  void *v248;
  std::__shared_weak_count *v249;
  void *v250[2];
  char v251;
  std::__shared_weak_count_vtbl *v252;
  std::__shared_weak_count *v253;
  void *v254[2];
  char v255;
  std::__shared_weak_count_vtbl *v256;
  std::__shared_weak_count *v257;
  void *v258[2];
  char v259;
  void *v260[2];
  char v261;
  std::__shared_weak_count_vtbl *v262;
  std::__shared_weak_count *v263;
  void *v264[2];
  char v265;
  void *v266[2];
  char v267;
  std::__shared_weak_count_vtbl *v268;
  std::__shared_weak_count *v269;
  void *v270[2];
  char v271;
  void *v272[2];
  char v273;
  std::__shared_weak_count_vtbl *v274;
  std::__shared_weak_count *v275;
  void *v276[2];
  char v277;
  void *v278[2];
  char v279;
  std::__shared_weak_count_vtbl *v280;
  std::__shared_weak_count *v281;
  void *v282[2];
  char v283;
  void *v284[2];
  char v285;
  std::__shared_weak_count_vtbl *v286;
  std::__shared_weak_count *v287;
  void *v288;
  std::__shared_weak_count *v289;
  std::__shared_weak_count_vtbl *v290;
  std::__shared_weak_count *v291;
  void *v292[2];
  char v293;
  std::__shared_weak_count_vtbl *v294;
  std::__shared_weak_count *v295;
  void *v296;
  std::__shared_weak_count *v297;
  void *v298[2];
  char v299;
  std::__shared_weak_count_vtbl *v300;
  std::__shared_weak_count *v301;
  void *v302[2];
  char v303;
  void *v304[2];
  char v305;
  std::__shared_weak_count_vtbl *v306;
  std::__shared_weak_count *v307;
  void *v308[2];
  char v309;
  void *v310[2];
  char v311;
  std::__shared_weak_count_vtbl *v312;
  std::__shared_weak_count *v313;
  __int128 v314;
  __int128 v315;
  void *v316[2];
  uint64_t v317;
  __n128 v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  char **v322;
  __n128 v323;
  __n128 v324;
  __n128 v325;
  __n128 v326;
  __n128 v327;
  __n128 v328;
  __n128 v329;
  __n128 v330;
  _QWORD *v331;
  void *__p;
  void *v333;
  char *v334;
  _QWORD v335[3];
  _QWORD v336[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v339;
  _BYTE v340[24];
  _BYTE *v341;
  _QWORD v342[3];
  _QWORD *v343;
  std::__shared_weak_count_vtbl *v344;
  uint64_t v345;
  const void *(__cdecl **v346)(const std::__shared_weak_count *__hidden, const std::type_info *);
  _QWORD v347[3];

  v347[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v331 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(8uLL);
  __p = v10;
  *(_QWORD *)v10 = v9;
  v334 = v10 + 8;
  v333 = v10 + 8;
  v344 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v12;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v12->~__shared_weak_count_0;
  v339 = &v12->~__shared_weak_count_0;
  v345 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v344, 2, &v330);
  MIL::IRParameter::Make(&v330, &v320);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "dy", &v320);
  v13 = v320;
  v320 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v330.n128_u64[1];
  if (v330.n128_u64[1])
  {
    v15 = (unint64_t *)(v330.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v333 = __p;
    operator delete(__p);
  }
  v17 = v331;
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (char *)operator new(0x18uLL);
  v334 = v21 + 24;
  *(_QWORD *)v21 = v18;
  *((_QWORD *)v21 + 1) = v19;
  *((_QWORD *)v21 + 2) = v20;
  __p = v21;
  v333 = v21 + 24;
  v344 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v25->__get_deleter;
  v339 = &v25->__get_deleter;
  v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  v25->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v23;
  v25->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v24;
  Scalar = v25;
  v345 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v344, 2, &v329);
  MIL::IRParameter::Make(&v329, &v320);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "x", &v320);
  v26 = v320;
  v320 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = (std::__shared_weak_count *)v329.n128_u64[1];
  if (v329.n128_u64[1])
  {
    v28 = (unint64_t *)(v329.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v333 = __p;
    operator delete(__p);
  }
  v30 = v331;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = (char *)operator new(8uLL);
  __p = v32;
  *(_QWORD *)v32 = v31;
  v334 = v32 + 8;
  v333 = v32 + 8;
  v344 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v344, 1, &v328);
  MIL::IRParameter::Make(&v328, (uint64_t *)&Scalar);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v30, "kernel_sizes", (uint64_t *)&Scalar);
  v34 = Scalar;
  Scalar = 0;
  if (v34)
    (*((void (**)(std::__shared_weak_count_vtbl *))v34->~__shared_weak_count + 1))(v34);
  v35 = (std::__shared_weak_count *)v328.n128_u64[1];
  if (v328.n128_u64[1])
  {
    v36 = (unint64_t *)(v328.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (__p)
  {
    v333 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v38 = v331;
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (char *)operator new(8uLL);
  __p = v40;
  *(_QWORD *)v40 = v39;
  v334 = v40 + 8;
  v333 = v40 + 8;
  v344 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v344, 1, &v327);
  MIL::IRParameter::Make(&v327, (uint64_t *)&Scalar);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v38, "strides", (uint64_t *)&Scalar);
  v42 = Scalar;
  Scalar = 0;
  if (v42)
    (*((void (**)(std::__shared_weak_count_vtbl *))v42->~__shared_weak_count + 1))(v42);
  v43 = (std::__shared_weak_count *)v327.n128_u64[1];
  if (v327.n128_u64[1])
  {
    v44 = (unint64_t *)(v327.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (__p)
  {
    v333 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  v46 = v331;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v326);
  MIL::IRParameter::Make(&v326, (uint64_t *)&__p);
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v46, "pad_type", (uint64_t *)&__p);
  v48 = __p;
  __p = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v326.n128_u64[1];
  if (v326.n128_u64[1])
  {
    v50 = (unint64_t *)(v326.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v331;
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = (char *)operator new(0x10uLL);
  v334 = v55 + 16;
  *(_QWORD *)v55 = v53;
  *((_QWORD *)v55 + 1) = v54;
  __p = v55;
  v333 = v55 + 16;
  v344 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v344, 1, &v325);
  MIL::IRParameter::Make(&v325, (uint64_t *)&Scalar);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v52, "pad", (uint64_t *)&Scalar);
  v57 = Scalar;
  Scalar = 0;
  if (v57)
    (*((void (**)(std::__shared_weak_count_vtbl *))v57->~__shared_weak_count + 1))(v57);
  v58 = (std::__shared_weak_count *)v325.n128_u64[1];
  if (v325.n128_u64[1])
  {
    v59 = (unint64_t *)(v325.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (__p)
  {
    v333 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  v61 = v331;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v324);
  MIL::IRParameter::Make(&v324, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v61, "ceil_mode", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v324.n128_u64[1];
  if (v324.n128_u64[1])
  {
    v65 = (unint64_t *)(v324.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  v67 = v331;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v323);
  MIL::IRParameter::Make(&v323, (uint64_t *)&__p);
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[29],std::unique_ptr<MIL::IRParameter>>(v67, "exclude_padding_from_average", (uint64_t *)&__p);
  v69 = __p;
  __p = 0;
  if (v69)
    (*(void (**)(void *))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v323.n128_u64[1];
  if (v323.n128_u64[1])
  {
    v71 = (unint64_t *)(v323.n128_u64[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v68 + 5) + 32))(*((_QWORD *)v68 + 5), 1);
  v322 = 0;
  v73 = operator new();
  *(_QWORD *)v73 = 0;
  *(_QWORD *)(v73 + 8) = 0;
  *(_QWORD *)(v73 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v322, (void **)v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v322, 1uLL);
  v74 = v322;
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v78->__get_deleter;
  v339 = &v78->__get_deleter;
  v78->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v75;
  v78->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v76;
  v78->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v77;
  Scalar = v78;
  v347[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = MIL::IRUnknownDimension::Make(a1, 0);
  v81 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v82 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v345 = (uint64_t)&v82->__get_deleter;
  v346 = &v82->__get_deleter;
  v82->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v79;
  v82->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v80;
  v82->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v81;
  v344 = v82;
  v347[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v344);
  MIL::IRParameter::MakeTypeSet((uint64_t)v347, 2, &v318);
  MIL::IRParameter::Make(&v318, &v319);
  v83 = v319;
  v320 = v319;
  if (v319)
  {
    v84 = (_QWORD *)operator new();
    v85 = v319;
    *v84 = &unk_1EA99F888;
    v84[1] = 0;
    v84[2] = 0;
    v84[3] = v85;
  }
  else
  {
    v84 = 0;
  }
  v321 = v84;
  v319 = 0;
  v86 = v74[2];
  v87 = v74[1];
  if (v87 >= v86)
  {
    v89 = (v87 - *v74) >> 4;
    v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v91 = v86 - *v74;
    if (v91 >> 3 > v90)
      v90 = v91 >> 3;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0)
      v92 = 0xFFFFFFFFFFFFFFFLL;
    else
      v92 = v90;
    v335[1] = v74 + 2;
    v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v74 + 2), v92);
    v95 = (uint64_t *)&v93[16 * v89];
    *v95 = v83;
    v95[1] = (uint64_t)v84;
    v321 = 0;
    v320 = 0;
    v97 = *v74;
    v96 = v74[1];
    if (v96 == *v74)
    {
      v100 = v74[1];
      v98 = &v93[16 * v89];
    }
    else
    {
      v98 = &v93[16 * v89];
      do
      {
        v99 = *((_OWORD *)v96 - 1);
        v96 -= 16;
        *((_OWORD *)v98 - 1) = v99;
        v98 -= 16;
        *(_QWORD *)v96 = 0;
        *((_QWORD *)v96 + 1) = 0;
      }
      while (v96 != v97);
      v100 = *v74;
      v96 = v74[1];
    }
    v88 = (char *)(v95 + 2);
    *v74 = v98;
    v333 = v100;
    v74[1] = (char *)(v95 + 2);
    v334 = v96;
    v101 = v74[2];
    v74[2] = &v93[16 * v94];
    v335[0] = v101;
    __p = v100;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v87 = v83;
    *((_QWORD *)v87 + 1) = v84;
    v88 = v87 + 16;
    v321 = 0;
    v320 = 0;
  }
  v74[1] = v88;
  v102 = v319;
  v319 = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  v103 = (std::__shared_weak_count *)v318.n128_u64[1];
  if (v318.n128_u64[1])
  {
    v104 = (unint64_t *)(v318.n128_u64[1] + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (v344)
  {
    v345 = (uint64_t)v344;
    operator delete(v344);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v316 = *(_OWORD *)a2;
  v317 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v106 = (uint64_t)v331;
  *(_QWORD *)&v315 = v331;
  if (v331)
  {
    v107 = (_QWORD *)operator new();
    *v107 = &unk_1EA99F8E8;
    v107[1] = 0;
    v107[2] = 0;
    v107[3] = v106;
  }
  else
  {
    v107 = 0;
  }
  *((_QWORD *)&v315 + 1) = v107;
  v331 = 0;
  *(_QWORD *)&v314 = v322;
  if (v322)
  {
    v108 = (_QWORD *)operator new();
    v109 = v322;
    *v108 = &unk_1EA99F948;
    v108[1] = 0;
    v108[2] = 0;
    v108[3] = v109;
  }
  else
  {
    v108 = 0;
  }
  *((_QWORD *)&v314 + 1) = v108;
  v322 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v342, a3);
  }
  else
  {
    v342[0] = &unk_1EA99FAC8;
    v342[1] = MIL::Operators::Train::ios16Train::CustomValidators::ValidateBasePoolGrad;
    v343 = v342;
  }
  v341 = 0;
  MIL::IROperator::Make((__int128 *)v316, &v315, &v314, (uint64_t)v342, (uint64_t)v340, a4);
  v110 = v341;
  if (v341 == v340)
  {
    v111 = 4;
    v110 = v340;
  }
  else
  {
    if (!v341)
      goto LABEL_113;
    v111 = 5;
  }
  (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_113:
  v112 = v343;
  if (v343 == v342)
  {
    v113 = 4;
    v112 = v342;
    goto LABEL_117;
  }
  if (v343)
  {
    v113 = 5;
LABEL_117:
    (*(void (**)(void))(*v112 + 8 * v113))();
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v314 + 1);
  if (*((_QWORD *)&v314 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v314 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v315 + 1);
  if (*((_QWORD *)&v315 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v315 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (SHIBYTE(v317) < 0)
    operator delete(v316[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v120 = __p;
  std::string::basic_string[abi:ne180100]<0>(v310, "dy");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v310, 0, (uint64_t *)&Scalar);
  v312 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v313 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v308, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v120 + 24))(v120, &v312, v308);
  if (v309 < 0)
    operator delete(v308[0]);
  v123 = v313;
  if (v313)
  {
    p_shared_owners = (unint64_t *)&v313->__shared_owners_;
    do
      v125 = __ldaxr(p_shared_owners);
    while (__stlxr(v125 - 1, p_shared_owners));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*((void (**)(std::__shared_weak_count_vtbl *))v126->~__shared_weak_count + 1))(v126);
  if (v311 < 0)
    operator delete(v310[0]);
  v127 = __p;
  std::string::basic_string[abi:ne180100]<0>(v304, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v304, 0, (uint64_t *)&Scalar);
  v306 = Scalar;
  if (Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v307 = v128;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v302, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v127 + 24))(v127, &v306, v302);
  if (v303 < 0)
    operator delete(v302[0]);
  v130 = v307;
  if (v307)
  {
    v131 = (unint64_t *)&v307->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = Scalar;
  Scalar = 0;
  if (v133)
    (*((void (**)(std::__shared_weak_count_vtbl *))v133->~__shared_weak_count + 1))(v133);
  if (v305 < 0)
    operator delete(v304[0]);
  v134 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v300 = Scalar;
  if (Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v301 = v135;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v298, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v134 + 24))(v134, &v300, v298);
  if (v299 < 0)
    operator delete(v298[0]);
  v137 = v301;
  if (v301)
  {
    v138 = (unint64_t *)&v301->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = Scalar;
  Scalar = 0;
  if (v140)
    (*((void (**)(std::__shared_weak_count_vtbl *))v140->~__shared_weak_count + 1))(v140);
  v141 = *a4;
  v296 = __p;
  if (__p)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)__p;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v297 = v142;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v141 + 56))(v141, &v296);
  v144 = v297;
  if (v297)
  {
    v145 = (unint64_t *)&v297->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = __p;
  __p = 0;
  if (v147)
    (*(void (**)(void *))(*(_QWORD *)v147 + 8))(v147);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v148 = __p;
  std::string::basic_string[abi:ne180100]<0>(v292, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v292, 0, (uint64_t *)&Scalar);
  v294 = Scalar;
  if (Scalar)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = Scalar;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v295 = v149;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v148 + 32))(v148, &v294, 3, 5);
  v151 = v295;
  if (v295)
  {
    v152 = (unint64_t *)&v295->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = Scalar;
  Scalar = 0;
  if (v154)
    (*((void (**)(std::__shared_weak_count_vtbl *))v154->~__shared_weak_count + 1))(v154);
  if (v293 < 0)
    operator delete(v292[0]);
  v155 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v290 = Scalar;
  if (Scalar)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = Scalar;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v291 = v156;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v155 + 32))(v155, &v290, 3, 5);
  v158 = v291;
  if (v291)
  {
    v159 = (unint64_t *)&v291->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = Scalar;
  Scalar = 0;
  if (v161)
    (*((void (**)(std::__shared_weak_count_vtbl *))v161->~__shared_weak_count + 1))(v161);
  v162 = *a4;
  v288 = __p;
  if (__p)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = (std::__shared_weak_count_vtbl *)__p;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = v164;
  }
  else
  {
    v163 = 0;
  }
  v289 = v163;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v162 + 56))(v162, &v288);
  v165 = v289;
  if (v289)
  {
    v166 = (unint64_t *)&v289->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = __p;
  __p = 0;
  if (v168)
    (*(void (**)(void *))(*(_QWORD *)v168 + 8))(v168);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v169 = __p;
  std::string::basic_string[abi:ne180100]<0>(v284, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v284, 0, (uint64_t *)&Scalar);
  v286 = Scalar;
  if (Scalar)
  {
    v170 = (std::__shared_weak_count *)operator new();
    v171 = Scalar;
    v170->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v170->__shared_owners_ = 0;
    v170->__shared_weak_owners_ = 0;
    v170[1].__vftable = v171;
  }
  else
  {
    v170 = 0;
  }
  v287 = v170;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v282, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v169 + 24))(v169, &v286, 1, v282);
  if (v283 < 0)
    operator delete(v282[0]);
  v172 = v287;
  if (v287)
  {
    v173 = (unint64_t *)&v287->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = Scalar;
  Scalar = 0;
  if (v175)
    (*((void (**)(std::__shared_weak_count_vtbl *))v175->~__shared_weak_count + 1))(v175);
  if (v285 < 0)
    operator delete(v284[0]);
  v176 = __p;
  std::string::basic_string[abi:ne180100]<0>(v278, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v278, 0, (uint64_t *)&Scalar);
  v280 = Scalar;
  if (Scalar)
  {
    v177 = (std::__shared_weak_count *)operator new();
    v178 = Scalar;
    v177->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v177->__shared_owners_ = 0;
    v177->__shared_weak_owners_ = 0;
    v177[1].__vftable = v178;
  }
  else
  {
    v177 = 0;
  }
  v281 = v177;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v276, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))(*(_QWORD *)v176 + 32))(v176, &v280, 2, -1, v276);
  if (v277 < 0)
    operator delete(v276[0]);
  v179 = v281;
  if (v281)
  {
    v180 = (unint64_t *)&v281->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v182 = Scalar;
  Scalar = 0;
  if (v182)
    (*((void (**)(std::__shared_weak_count_vtbl *))v182->~__shared_weak_count + 1))(v182);
  if (v279 < 0)
    operator delete(v278[0]);
  v183 = __p;
  std::string::basic_string[abi:ne180100]<0>(v272, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v272, 0, (uint64_t *)&Scalar);
  v274 = Scalar;
  if (Scalar)
  {
    v184 = (std::__shared_weak_count *)operator new();
    v185 = Scalar;
    v184->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v184->__shared_owners_ = 0;
    v184->__shared_weak_owners_ = 0;
    v184[1].__vftable = v185;
  }
  else
  {
    v184 = 0;
  }
  v275 = v184;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v270, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v183 + 24))(v183, &v274, 0, v270);
  if (v271 < 0)
    operator delete(v270[0]);
  v186 = v275;
  if (v275)
  {
    v187 = (unint64_t *)&v275->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = Scalar;
  Scalar = 0;
  if (v189)
    (*((void (**)(std::__shared_weak_count_vtbl *))v189->~__shared_weak_count + 1))(v189);
  if (v273 < 0)
    operator delete(v272[0]);
  v190 = __p;
  std::string::basic_string[abi:ne180100]<0>(v266, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v266, 0, (uint64_t *)&Scalar);
  v268 = Scalar;
  if (Scalar)
  {
    v191 = (std::__shared_weak_count *)operator new();
    v192 = Scalar;
    v191->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v191->__shared_owners_ = 0;
    v191->__shared_weak_owners_ = 0;
    v191[1].__vftable = v192;
  }
  else
  {
    v191 = 0;
  }
  v269 = v191;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v264, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v190 + 24))(v190, &v268, 0, v264);
  if (v265 < 0)
    operator delete(v264[0]);
  v193 = v269;
  if (v269)
  {
    v194 = (unint64_t *)&v269->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = Scalar;
  Scalar = 0;
  if (v196)
    (*((void (**)(std::__shared_weak_count_vtbl *))v196->~__shared_weak_count + 1))(v196);
  if (v267 < 0)
    operator delete(v266[0]);
  v197 = __p;
  std::string::basic_string[abi:ne180100]<0>(v260, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v260, 0, (uint64_t *)&Scalar);
  v262 = Scalar;
  if (Scalar)
  {
    v198 = (std::__shared_weak_count *)operator new();
    v199 = Scalar;
    v198->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v198->__shared_owners_ = 0;
    v198->__shared_weak_owners_ = 0;
    v198[1].__vftable = v199;
  }
  else
  {
    v198 = 0;
  }
  v263 = v198;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v258, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v197 + 24))(v197, &v262, 0, v258);
  if (v259 < 0)
    operator delete(v258[0]);
  v200 = v263;
  if (v263)
  {
    v201 = (unint64_t *)&v263->__shared_owners_;
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  v203 = Scalar;
  Scalar = 0;
  if (v203)
    (*((void (**)(std::__shared_weak_count_vtbl *))v203->~__shared_weak_count + 1))(v203);
  if (v261 < 0)
    operator delete(v260[0]);
  v204 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v256 = Scalar;
  if (Scalar)
  {
    v205 = (std::__shared_weak_count *)operator new();
    v206 = Scalar;
    v205->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v205->__shared_owners_ = 0;
    v205->__shared_weak_owners_ = 0;
    v205[1].__vftable = v206;
  }
  else
  {
    v205 = 0;
  }
  v257 = v205;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v254, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v204 + 24))(v204, &v256, 1, v254);
  if (v255 < 0)
    operator delete(v254[0]);
  v207 = v257;
  if (v257)
  {
    v208 = (unint64_t *)&v257->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = Scalar;
  Scalar = 0;
  if (v210)
    (*((void (**)(std::__shared_weak_count_vtbl *))v210->~__shared_weak_count + 1))(v210);
  v211 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v252 = Scalar;
  if (Scalar)
  {
    v212 = (std::__shared_weak_count *)operator new();
    v213 = Scalar;
    v212->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v212->__shared_owners_ = 0;
    v212->__shared_weak_owners_ = 0;
    v212[1].__vftable = v213;
  }
  else
  {
    v212 = 0;
  }
  v253 = v212;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v250, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))(*(_QWORD *)v211 + 32))(v211, &v252, 2, -1, v250);
  if (v251 < 0)
    operator delete(v250[0]);
  v214 = v253;
  if (v253)
  {
    v215 = (unint64_t *)&v253->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = Scalar;
  Scalar = 0;
  if (v217)
    (*((void (**)(std::__shared_weak_count_vtbl *))v217->~__shared_weak_count + 1))(v217);
  v218 = *a4;
  v248 = __p;
  if (__p)
  {
    v219 = (std::__shared_weak_count *)operator new();
    v220 = (std::__shared_weak_count_vtbl *)__p;
    v219->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v219->__shared_owners_ = 0;
    v219->__shared_weak_owners_ = 0;
    v219[1].__vftable = v220;
  }
  else
  {
    v219 = 0;
  }
  v249 = v219;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v218 + 56))(v218, &v248);
  v221 = v249;
  if (v249)
  {
    v222 = (unint64_t *)&v249->__shared_owners_;
    do
      v223 = __ldaxr(v222);
    while (__stlxr(v223 - 1, v222));
    if (!v223)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  v224 = __p;
  __p = 0;
  if (v224)
    (*(void (**)(void *))(*(_QWORD *)v224 + 8))(v224);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v344);
  v225 = v344;
  std::string::basic_string[abi:ne180100]<0>(v244, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v244, 0, &v320);
  v246 = v320;
  if (v320)
  {
    v226 = (std::__shared_weak_count *)operator new();
    v227 = v320;
    v226->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v226->__shared_owners_ = 0;
    v226->__shared_weak_owners_ = 0;
    v226[1].__vftable = (std::__shared_weak_count_vtbl *)v227;
  }
  else
  {
    v226 = 0;
  }
  v247 = v226;
  v320 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "custom");
  std::string::basic_string[abi:ne180100]<0>(v335, "same");
  std::string::basic_string[abi:ne180100]<0>(v336, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 3);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v225->~__shared_weak_count
   + 3))(v225, &v246, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v336[i + 2]) < 0)
      operator delete((void *)v336[i]);
  }
  v229 = v247;
  if (v247)
  {
    v230 = (unint64_t *)&v247->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  v232 = v320;
  v320 = 0;
  if (v232)
    (*(void (**)(uint64_t))(*(_QWORD *)v232 + 8))(v232);
  if (v245 < 0)
    operator delete(v244[0]);
  v233 = *a4;
  v242 = v344;
  if (v344)
  {
    v234 = (std::__shared_weak_count *)operator new();
    v235 = v344;
    v234->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v234->__shared_owners_ = 0;
    v234->__shared_weak_owners_ = 0;
    v234[1].__vftable = v235;
  }
  else
  {
    v234 = 0;
  }
  v243 = v234;
  v344 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v233 + 56))(v233, &v242);
  v236 = v243;
  if (v243)
  {
    v237 = (unint64_t *)&v243->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v239 = v344;
  v344 = 0;
  if (v239)
    (*((void (**)(std::__shared_weak_count_vtbl *))v239->~__shared_weak_count + 1))(v239);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v322, 0);
  result = (uint64_t)v331;
  if (v331)
  {
    v241 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v331);
    return MEMORY[0x1E0C023A0](v241, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0A60104(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x340], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3C8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Train::ios16Train::AvgPoolGrad::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Train::ios16Train::BaseAvgPoolGrad::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0A609E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::Builder::OperationBuilder::AddInput((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Train::ios16Train::SliceByIndexGrad::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void **v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void **v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void **v42;
  unsigned __int8 *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void **v50;
  unsigned __int8 *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void **v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  void **v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  char **v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  char *v93;
  char *v94;
  char *v95;
  __int128 v96;
  void **v97;
  char *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  char **v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void **v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *p_shared_owners;
  unint64_t v122;
  void *v123;
  void **v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  void **v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  void **v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  void **v144;
  void **v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  void **v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  void **v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  void **v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  void *v172;
  void **v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  void *v179;
  void **v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  void **v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  void **v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  void **v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  void **v207;
  uint64_t result;
  uint64_t v209;
  void **v210;
  std::__shared_weak_count *v211;
  void *v212[2];
  char v213;
  void *v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218[2];
  char v219;
  void *v220;
  std::__shared_weak_count *v221;
  void *v222[2];
  char v223;
  void *v224[2];
  char v225;
  void *v226;
  std::__shared_weak_count *v227;
  void *v228[2];
  char v229;
  void *v230[2];
  char v231;
  void *v232;
  std::__shared_weak_count *v233;
  void *v234[2];
  char v235;
  void *v236[2];
  char v237;
  void *v238;
  std::__shared_weak_count *v239;
  void *v240[2];
  char v241;
  void *v242[2];
  char v243;
  void *v244;
  std::__shared_weak_count *v245;
  void *v246[2];
  char v247;
  void *v248[2];
  char v249;
  void *v250;
  std::__shared_weak_count *v251;
  void *v252[2];
  char v253;
  void *v254[2];
  char v255;
  void *v256;
  std::__shared_weak_count *v257;
  void **v258;
  std::__shared_weak_count *v259;
  void *v260[2];
  char v261;
  void *v262;
  std::__shared_weak_count *v263;
  void *v264[2];
  char v265;
  void *v266[2];
  char v267;
  void *v268;
  std::__shared_weak_count *v269;
  void *v270[2];
  char v271;
  void *v272[2];
  char v273;
  void *v274;
  std::__shared_weak_count *v275;
  __int128 v276;
  __int128 v277;
  void *v278[2];
  uint64_t v279;
  __n128 v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  char **v284;
  __n128 v285;
  __n128 v286;
  __n128 v287;
  __n128 v288;
  __n128 v289;
  __n128 v290;
  __n128 v291;
  void *__p;
  void *v293;
  _QWORD *v294;
  __n128 v295;
  _QWORD *v296;
  void **v297;
  void **v298;
  void **v299;
  char *v300;
  char **v301;
  _BYTE v302[24];
  _BYTE *v303;
  _BYTE v304[24];
  _BYTE *v305;
  void *v306;
  uint64_t v307;
  _QWORD *v308;
  _QWORD v309[3];

  v309[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v296 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  v297 = v8;
  *v8 = (void *)v7;
  v298 = v8 + 1;
  v299 = v8 + 1;
  v306 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v297);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v294 = v10 + 1;
  v293 = v10 + 1;
  v307 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v306, 2, &v295);
  MIL::IRParameter::Make(&v295, &v282);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "dy", &v282);
  v11 = v282;
  v282 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v295.n128_u64[1];
  if (v295.n128_u64[1])
  {
    v13 = (unint64_t *)(v295.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v293 = __p;
    operator delete(__p);
  }
  if (v297)
  {
    v298 = v297;
    operator delete(v297);
  }
  v15 = v296;
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = (char *)operator new(0x10uLL);
  v298 = (void **)(v18 + 16);
  v299 = (void **)(v18 + 16);
  *(_QWORD *)v18 = v16;
  *((_QWORD *)v18 + 1) = v17;
  v297 = (void **)v18;
  v306 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v297);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v294 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  __p = v21;
  v293 = v21 + 2;
  v307 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v306, 2, &v291);
  MIL::IRParameter::Make(&v291, &v282);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v15, "x", &v282);
  v22 = v282;
  v282 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)v291.n128_u64[1];
  if (v291.n128_u64[1])
  {
    v24 = (unint64_t *)(v291.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p)
  {
    v293 = __p;
    operator delete(__p);
  }
  if (v297)
  {
    v298 = v297;
    operator delete(v297);
  }
  v26 = v296;
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = (void **)operator new(8uLL);
  v297 = v28;
  *v28 = (void *)v27;
  v298 = v28 + 1;
  v299 = v28 + 1;
  v306 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v297);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v306, 1, &v290);
  MIL::IRParameter::Make(&v290, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v26, "begin", (uint64_t *)&__p);
  v29 = __p;
  __p = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)v290.n128_u64[1];
  if (v290.n128_u64[1])
  {
    v31 = (unint64_t *)(v290.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v297)
  {
    v298 = v297;
    operator delete(v297);
  }
  v33 = v296;
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = (void **)operator new(8uLL);
  v297 = v35;
  *v35 = (void *)v34;
  v298 = v35 + 1;
  v299 = v35 + 1;
  v306 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v297);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v306, 1, &v289);
  MIL::IRParameter::Make(&v289, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v33, "end", (uint64_t *)&__p);
  v36 = __p;
  __p = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)v289.n128_u64[1];
  if (v289.n128_u64[1])
  {
    v38 = (unint64_t *)(v289.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v297)
  {
    v298 = v297;
    operator delete(v297);
  }
  v40 = v296;
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = (void **)operator new(8uLL);
  v297 = v42;
  *v42 = (void *)v41;
  v298 = v42 + 1;
  v299 = v42 + 1;
  v306 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v297);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v306, 1, &v288);
  MIL::IRParameter::Make(&v288, (uint64_t *)&__p);
  v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v40, "stride", (uint64_t *)&__p);
  v44 = __p;
  __p = 0;
  if (v44)
    (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v288.n128_u64[1];
  if (v288.n128_u64[1])
  {
    v46 = (unint64_t *)(v288.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v297)
  {
    v298 = v297;
    operator delete(v297);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 48))(*((_QWORD *)v43 + 5), 1);
  v48 = v296;
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = (void **)operator new(8uLL);
  v297 = v50;
  *v50 = (void *)v49;
  v298 = v50 + 1;
  v299 = v50 + 1;
  v306 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v297);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v306, 1, &v287);
  MIL::IRParameter::Make(&v287, (uint64_t *)&__p);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v48, "begin_mask", (uint64_t *)&__p);
  v52 = __p;
  __p = 0;
  if (v52)
    (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
  v53 = (std::__shared_weak_count *)v287.n128_u64[1];
  if (v287.n128_u64[1])
  {
    v54 = (unint64_t *)(v287.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v297)
  {
    v298 = v297;
    operator delete(v297);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 48))(*((_QWORD *)v51 + 5), 1);
  v56 = v296;
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = (void **)operator new(8uLL);
  v297 = v58;
  *v58 = (void *)v57;
  v298 = v58 + 1;
  v299 = v58 + 1;
  v306 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v297);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v306, 1, &v286);
  MIL::IRParameter::Make(&v286, (uint64_t *)&__p);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v56, "end_mask", (uint64_t *)&__p);
  v60 = __p;
  __p = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v286.n128_u64[1];
  if (v286.n128_u64[1])
  {
    v62 = (unint64_t *)(v286.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v297)
  {
    v298 = v297;
    operator delete(v297);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v296;
  v65 = MIL::IRUnknownDimension::Make(a1, 0);
  v66 = (void **)operator new(8uLL);
  v297 = v66;
  *v66 = (void *)v65;
  v298 = v66 + 1;
  v299 = v66 + 1;
  v306 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v297);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v306, 1, &v285);
  MIL::IRParameter::Make(&v285, (uint64_t *)&__p);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v64, "squeeze_mask", (uint64_t *)&__p);
  v68 = __p;
  __p = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v285.n128_u64[1];
  if (v285.n128_u64[1])
  {
    v70 = (unint64_t *)(v285.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v297)
  {
    v298 = v297;
    operator delete(v297);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 48))(*((_QWORD *)v67 + 5), 1);
  v284 = 0;
  v72 = operator new();
  *(_QWORD *)v72 = 0;
  *(_QWORD *)(v72 + 8) = 0;
  *(_QWORD *)(v72 + 16) = 0;
  v297 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v284, (void **)v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v297, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v284, 1uLL);
  v73 = v284;
  v74 = MIL::IRUnknownDimension::Make(a1, 0);
  v75 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v76 = operator new(0x10uLL);
  v294 = v76 + 2;
  *v76 = v74;
  v76[1] = v75;
  __p = v76;
  v293 = v76 + 2;
  v309[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v77 = MIL::IRUnknownDimension::Make(a1, 0);
  v78 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v79 = operator new(0x10uLL);
  v307 = (uint64_t)(v79 + 2);
  v308 = v79 + 2;
  *v79 = v77;
  v79[1] = v78;
  v306 = v79;
  v309[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v306);
  MIL::IRParameter::MakeTypeSet((uint64_t)v309, 2, &v280);
  MIL::IRParameter::Make(&v280, &v281);
  v80 = v281;
  v282 = v281;
  if (v281)
  {
    v81 = (_QWORD *)operator new();
    v82 = v281;
    *v81 = &unk_1EA99F888;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v82;
  }
  else
  {
    v81 = 0;
  }
  v283 = v81;
  v281 = 0;
  v83 = v73[2];
  v84 = v73[1];
  if (v84 >= v83)
  {
    v86 = (v84 - *v73) >> 4;
    v87 = v86 + 1;
    if ((unint64_t)(v86 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v88 = v83 - *v73;
    if (v88 >> 3 > v87)
      v87 = v88 >> 3;
    if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
      v89 = 0xFFFFFFFFFFFFFFFLL;
    else
      v89 = v87;
    v301 = v73 + 2;
    v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v73 + 2), v89);
    v92 = (uint64_t *)&v90[16 * v86];
    *v92 = v80;
    v92[1] = (uint64_t)v81;
    v283 = 0;
    v282 = 0;
    v94 = *v73;
    v93 = v73[1];
    if (v93 == *v73)
    {
      v97 = (void **)v73[1];
      v95 = &v90[16 * v86];
    }
    else
    {
      v95 = &v90[16 * v86];
      do
      {
        v96 = *((_OWORD *)v93 - 1);
        v93 -= 16;
        *((_OWORD *)v95 - 1) = v96;
        v95 -= 16;
        *(_QWORD *)v93 = 0;
        *((_QWORD *)v93 + 1) = 0;
      }
      while (v93 != v94);
      v97 = (void **)*v73;
      v93 = v73[1];
    }
    v85 = (char *)(v92 + 2);
    *v73 = v95;
    v297 = v97;
    v298 = v97;
    v73[1] = (char *)(v92 + 2);
    v299 = (void **)v93;
    v98 = v73[2];
    v73[2] = &v90[16 * v91];
    v300 = v98;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v297);
  }
  else
  {
    *(_QWORD *)v84 = v80;
    *((_QWORD *)v84 + 1) = v81;
    v85 = v84 + 16;
    v283 = 0;
    v282 = 0;
  }
  v73[1] = v85;
  v99 = v281;
  v281 = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = (std::__shared_weak_count *)v280.n128_u64[1];
  if (v280.n128_u64[1])
  {
    v101 = (unint64_t *)(v280.n128_u64[1] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (v306)
  {
    v307 = (uint64_t)v306;
    operator delete(v306);
  }
  if (__p)
  {
    v293 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v278 = *(_OWORD *)a2;
  v279 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v103 = (uint64_t)v296;
  *(_QWORD *)&v277 = v296;
  if (v296)
  {
    v104 = (_QWORD *)operator new();
    *v104 = &unk_1EA99F8E8;
    v104[1] = 0;
    v104[2] = 0;
    v104[3] = v103;
  }
  else
  {
    v104 = 0;
  }
  *((_QWORD *)&v277 + 1) = v104;
  v296 = 0;
  *(_QWORD *)&v276 = v284;
  if (v284)
  {
    v105 = (_QWORD *)operator new();
    v106 = v284;
    *v105 = &unk_1EA99F948;
    v105[1] = 0;
    v105[2] = 0;
    v105[3] = v106;
  }
  else
  {
    v105 = 0;
  }
  *((_QWORD *)&v276 + 1) = v105;
  v284 = 0;
  v305 = 0;
  v303 = 0;
  MIL::IROperator::Make((__int128 *)v278, &v277, &v276, (uint64_t)v304, (uint64_t)v302, a3);
  v107 = v303;
  if (v303 == v302)
  {
    v108 = 4;
    v107 = v302;
  }
  else
  {
    if (!v303)
      goto LABEL_116;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_116:
  v109 = v305;
  if (v305 == v304)
  {
    v110 = 4;
    v109 = v304;
    goto LABEL_120;
  }
  if (v305)
  {
    v110 = 5;
LABEL_120:
    (*(void (**)(void))(*v109 + 8 * v110))();
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
  if (*((_QWORD *)&v276 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
  if (*((_QWORD *)&v277 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  if (SHIBYTE(v279) < 0)
    operator delete(v278[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&v297);
  v117 = v297;
  std::string::basic_string[abi:ne180100]<0>(v272, "dy");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v272, 0, (uint64_t *)&__p);
  v274 = __p;
  if (__p)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = (std::__shared_weak_count_vtbl *)__p;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v275 = v118;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v270, "T");
  (*((void (**)(void **, void **, void **))*v117 + 3))(v117, &v274, v270);
  if (v271 < 0)
    operator delete(v270[0]);
  v120 = v275;
  if (v275)
  {
    p_shared_owners = (unint64_t *)&v275->__shared_owners_;
    do
      v122 = __ldaxr(p_shared_owners);
    while (__stlxr(v122 - 1, p_shared_owners));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = __p;
  __p = 0;
  if (v123)
    (*(void (**)(void *))(*(_QWORD *)v123 + 8))(v123);
  if (v273 < 0)
    operator delete(v272[0]);
  v124 = v297;
  std::string::basic_string[abi:ne180100]<0>(v266, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v266, 0, (uint64_t *)&__p);
  v268 = __p;
  if (__p)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)__p;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v269 = v125;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v264, "T");
  (*((void (**)(void **, void **, void **))*v124 + 3))(v124, &v268, v264);
  if (v265 < 0)
    operator delete(v264[0]);
  v127 = v269;
  if (v269)
  {
    v128 = (unint64_t *)&v269->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = __p;
  __p = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  if (v267 < 0)
    operator delete(v266[0]);
  v131 = v297;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v262 = __p;
  if (__p)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = (std::__shared_weak_count_vtbl *)__p;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v263 = v132;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v260, "T");
  (*((void (**)(void **, void **, void **))*v131 + 3))(v131, &v262, v260);
  if (v261 < 0)
    operator delete(v260[0]);
  v134 = v263;
  if (v263)
  {
    v135 = (unint64_t *)&v263->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = __p;
  __p = 0;
  if (v137)
    (*(void (**)(void *))(*(_QWORD *)v137 + 8))(v137);
  v138 = *a3;
  v258 = v297;
  if (v297)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = v297;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = (std::__shared_weak_count_vtbl *)v140;
  }
  else
  {
    v139 = 0;
  }
  v259 = v139;
  v297 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v138 + 56))(v138, &v258);
  v141 = v259;
  if (v259)
  {
    v142 = (unint64_t *)&v259->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = v297;
  v297 = 0;
  if (v144)
    (*((void (**)(void **))*v144 + 1))(v144);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v297);
  v145 = v297;
  std::string::basic_string[abi:ne180100]<0>(v254, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v254, 0, (uint64_t *)&__p);
  v256 = __p;
  if (__p)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = (std::__shared_weak_count_vtbl *)__p;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v257 = v146;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v252, "D");
  (*((void (**)(void **, void **, void **))*v145 + 5))(v145, &v256, v252);
  if (v253 < 0)
    operator delete(v252[0]);
  v148 = v257;
  if (v257)
  {
    v149 = (unint64_t *)&v257->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = __p;
  __p = 0;
  if (v151)
    (*(void (**)(void *))(*(_QWORD *)v151 + 8))(v151);
  if (v255 < 0)
    operator delete(v254[0]);
  v152 = v297;
  std::string::basic_string[abi:ne180100]<0>(v248, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v248, 0, (uint64_t *)&__p);
  v250 = __p;
  if (__p)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = (std::__shared_weak_count_vtbl *)__p;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v251 = v153;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v246, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v152 + 3))(v152, &v250, 0, v246);
  if (v247 < 0)
    operator delete(v246[0]);
  v155 = v251;
  if (v251)
  {
    v156 = (unint64_t *)&v251->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = __p;
  __p = 0;
  if (v158)
    (*(void (**)(void *))(*(_QWORD *)v158 + 8))(v158);
  if (v249 < 0)
    operator delete(v248[0]);
  v159 = v297;
  std::string::basic_string[abi:ne180100]<0>(v242, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v242, 0, (uint64_t *)&__p);
  v244 = __p;
  if (__p)
  {
    v160 = (std::__shared_weak_count *)operator new();
    v161 = (std::__shared_weak_count_vtbl *)__p;
    v160->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v160->__shared_owners_ = 0;
    v160->__shared_weak_owners_ = 0;
    v160[1].__vftable = v161;
  }
  else
  {
    v160 = 0;
  }
  v245 = v160;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v240, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v159 + 3))(v159, &v244, 0, v240);
  if (v241 < 0)
    operator delete(v240[0]);
  v162 = v245;
  if (v245)
  {
    v163 = (unint64_t *)&v245->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = __p;
  __p = 0;
  if (v165)
    (*(void (**)(void *))(*(_QWORD *)v165 + 8))(v165);
  if (v243 < 0)
    operator delete(v242[0]);
  v166 = v297;
  std::string::basic_string[abi:ne180100]<0>(v236, "stride");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v236, 1, (uint64_t *)&__p);
  v238 = __p;
  if (__p)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = (std::__shared_weak_count_vtbl *)__p;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v239 = v167;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v234, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v166 + 3))(v166, &v238, 0, v234);
  if (v235 < 0)
    operator delete(v234[0]);
  v169 = v239;
  if (v239)
  {
    v170 = (unint64_t *)&v239->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = __p;
  __p = 0;
  if (v172)
    (*(void (**)(void *))(*(_QWORD *)v172 + 8))(v172);
  if (v237 < 0)
    operator delete(v236[0]);
  v173 = v297;
  std::string::basic_string[abi:ne180100]<0>(v230, "begin_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v230, 1, (uint64_t *)&__p);
  v232 = __p;
  if (__p)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v175 = (std::__shared_weak_count_vtbl *)__p;
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v175;
  }
  else
  {
    v174 = 0;
  }
  v233 = v174;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v228, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v173 + 3))(v173, &v232, 0, v228);
  if (v229 < 0)
    operator delete(v228[0]);
  v176 = v233;
  if (v233)
  {
    v177 = (unint64_t *)&v233->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = __p;
  __p = 0;
  if (v179)
    (*(void (**)(void *))(*(_QWORD *)v179 + 8))(v179);
  if (v231 < 0)
    operator delete(v230[0]);
  v180 = v297;
  std::string::basic_string[abi:ne180100]<0>(v224, "end_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v224, 1, (uint64_t *)&__p);
  v226 = __p;
  if (__p)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = (std::__shared_weak_count_vtbl *)__p;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = v182;
  }
  else
  {
    v181 = 0;
  }
  v227 = v181;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v222, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v180 + 3))(v180, &v226, 0, v222);
  if (v223 < 0)
    operator delete(v222[0]);
  v183 = v227;
  if (v227)
  {
    v184 = (unint64_t *)&v227->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = __p;
  __p = 0;
  if (v186)
    (*(void (**)(void *))(*(_QWORD *)v186 + 8))(v186);
  if (v225 < 0)
    operator delete(v224[0]);
  v187 = v297;
  std::string::basic_string[abi:ne180100]<0>(v218, "squeeze_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v218, 1, (uint64_t *)&__p);
  v220 = __p;
  if (__p)
  {
    v188 = (std::__shared_weak_count *)operator new();
    v189 = (std::__shared_weak_count_vtbl *)__p;
    v188->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v188->__shared_owners_ = 0;
    v188->__shared_weak_owners_ = 0;
    v188[1].__vftable = v189;
  }
  else
  {
    v188 = 0;
  }
  v221 = v188;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v216, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v187 + 3))(v187, &v220, 0, v216);
  if (v217 < 0)
    operator delete(v216[0]);
  v190 = v221;
  if (v221)
  {
    v191 = (unint64_t *)&v221->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = __p;
  __p = 0;
  if (v193)
    (*(void (**)(void *))(*(_QWORD *)v193 + 8))(v193);
  if (v219 < 0)
    operator delete(v218[0]);
  v194 = v297;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v214 = __p;
  if (__p)
  {
    v195 = (std::__shared_weak_count *)operator new();
    v196 = (std::__shared_weak_count_vtbl *)__p;
    v195->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v195->__shared_owners_ = 0;
    v195->__shared_weak_owners_ = 0;
    v195[1].__vftable = v196;
  }
  else
  {
    v195 = 0;
  }
  v215 = v195;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v212, "D");
  (*((void (**)(void **, void **, void **))*v194 + 5))(v194, &v214, v212);
  if (v213 < 0)
    operator delete(v212[0]);
  v197 = v215;
  if (v215)
  {
    v198 = (unint64_t *)&v215->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = __p;
  __p = 0;
  if (v200)
    (*(void (**)(void *))(*(_QWORD *)v200 + 8))(v200);
  v201 = *a3;
  v210 = v297;
  if (v297)
  {
    v202 = (std::__shared_weak_count *)operator new();
    v203 = v297;
    v202->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v202->__shared_owners_ = 0;
    v202->__shared_weak_owners_ = 0;
    v202[1].__vftable = (std::__shared_weak_count_vtbl *)v203;
  }
  else
  {
    v202 = 0;
  }
  v211 = v202;
  v297 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v201 + 56))(v201, &v210);
  v204 = v211;
  if (v211)
  {
    v205 = (unint64_t *)&v211->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = v297;
  v297 = 0;
  if (v207)
    (*((void (**)(void **))*v207 + 1))(v207);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v284, 0);
  result = (uint64_t)v296;
  if (v296)
  {
    v209 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v296);
    return MEMORY[0x1E0C023A0](v209, 0x10A0C408EF24B1CLL);
  }
  return result;
}

