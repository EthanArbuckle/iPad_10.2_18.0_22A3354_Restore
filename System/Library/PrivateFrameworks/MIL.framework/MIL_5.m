void sub_1E07857A4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x220], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x278], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateBasePool(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  uint64_t v7;
  MIL::IRValue *ParameterValue;
  MIL::IRValue *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t Data;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  const void *v19;
  std::string *v20;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  const std::string::value_type *v31;
  std::string::size_type size;
  int v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _BOOL4 IsParameterSet;
  _BOOL4 v41;
  const void *v42;
  int v43;
  int v44;
  _DWORD *v45;
  unint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::string::value_type *v58;
  uint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::string v72;
  _QWORD v73[2];
  void *__p[2];
  char v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void *v78[2];
  char v79;
  _QWORD v80[2];
  void *v81[2];
  char v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  std::string v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::string v88;
  _DWORD v89[2];
  void *v90[2];
  char v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string v94;

  std::string::basic_string[abi:ne180100]<0>(&v94, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 104))(v6) & 1) == 0)
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  v7 = MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(&v94, "pad");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  v9 = (MIL::IRValue *)MIL::IRValue::AsTensor(ParameterValue);
  v10 = v7 - 2;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  v11 = (*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v9 + 32))(v9);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) != 2 * v10)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v22 = (std::__shared_weak_count *)LocationPtr[1];
    v92 = *LocationPtr;
    v93 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v90, "Attribute 'pad' invalid: should be length of 2 * spatial rank");
    MIL::ValidationResult::ValidationResult(a2, &v92, 315, v90);
    if (v91 < 0)
      operator delete(v90[0]);
    v25 = v93;
    if (v93)
    {
      v26 = (unint64_t *)&v93->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    return;
  }
  v12 = (uint64_t *)MIL::IRValue::AsTensor(v9);
  Data = MIL::IRTensorValue::GetDataView<int>(v12);
  v15 = (_DWORD *)Data;
  v16 = v14;
  if (v14)
  {
    v17 = 4 * v14;
    v18 = (int *)Data;
    while (*v18 < 0x8000)
    {
      ++v18;
      v17 -= 4;
      if (!v17)
        goto LABEL_11;
    }
    std::to_string(&v88, 0x7FFF);
    v28 = std::string::insert(&v88, 0, "At least one of pad values exceed maximum allowed values (");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v94, ").");
    v31 = (const std::string::value_type *)v30->__r_.__value_.__r.__words[0];
    size = v30->__r_.__value_.__l.__size_;
    v89[0] = v30->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v89 + 3) = *(_DWORD *)((char *)&v30->__r_.__value_.__r.__words[2] + 3);
    v33 = SHIBYTE(v30->__r_.__value_.__r.__words[2]);
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    v34 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v35 = (std::__shared_weak_count *)v34[1];
    v86 = *v34;
    v87 = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    if (v33 < 0)
    {
      std::string::__init_copy_ctor_external(&v85, v31, size);
    }
    else
    {
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      v85.__r_.__value_.__l.__size_ = size;
      LODWORD(v85.__r_.__value_.__r.__words[2]) = v89[0];
      *(_DWORD *)((char *)&v85.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v89 + 3);
      *((_BYTE *)&v85.__r_.__value_.__s + 23) = v33;
    }
    MIL::ValidationResult::ValidationResult(a2, &v86, 315, &v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    v55 = v87;
    if (v87)
    {
      v56 = (unint64_t *)&v87->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v33 < 0)
    {
      v58 = (std::string::value_type *)v31;
LABEL_109:
      operator delete(v58);
      return;
    }
    return;
  }
LABEL_11:
  std::string::basic_string[abi:ne180100]<0>(&v88, "pad_type");
  v19 = (const void *)MIL::IROperation::GetParameterValue(this);
  MIL::IRValue::GetScalar<std::string>(v19, &v94);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v94.__r_.__value_.__l.__size_ != 5 || (v20 = (std::string *)v94.__r_.__value_.__r.__words[0], !v16))
    {
LABEL_44:
      std::string::basic_string[abi:ne180100]<0>(&v88, "ceil_mode");
      IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v88.__r_.__value_.__l.__data_);
      v41 = IsParameterSet;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v88.__r_.__value_.__l.__data_);
        if (!v41)
          goto LABEL_106;
      }
      else if (!IsParameterSet)
      {
        goto LABEL_106;
      }
      std::string::basic_string[abi:ne180100]<0>(&v88, "ceil_mode");
      v42 = (const void *)MIL::IROperation::GetParameterValue(this);
      v43 = MIL::IRValue::GetScalar<BOOL>(v42);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      if (v10)
        v44 = v43;
      else
        v44 = 0;
      if (v44 == 1)
      {
        v45 = v15 + 1;
        v46 = v10;
        do
        {
          if (*(v45 - 1) != *v45)
          {
            v64 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
            v65 = v64[1];
            v80[0] = *v64;
            v80[1] = v65;
            if (v65)
            {
              v66 = (unint64_t *)(v65 + 8);
              do
                v67 = __ldxr(v66);
              while (__stxr(v67 + 1, v66));
            }
            std::string::basic_string[abi:ne180100]<0>(v78, "Padding must be symmetric if ceil_mode is True");
            MIL::ValidationResult::ValidationResult(a2, v80, 315, v78);
            if (v79 < 0)
              operator delete(v78[0]);
            std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v80);
            goto LABEL_107;
          }
          v45 += 2;
          --v46;
        }
        while (v46);
        if (v10 < 3)
          goto LABEL_67;
        v47 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v48 = (std::__shared_weak_count *)v47[1];
        v76 = *v47;
        v77 = v48;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "ceil_mode must be False when there are 3 spatial dimensions (3D pool)");
        MIL::ValidationResult::ValidationResult(a2, &v76, 315, __p);
        if (v75 < 0)
          operator delete(__p[0]);
        v51 = v77;
        if (v77)
        {
          v52 = (unint64_t *)&v77->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          goto LABEL_88;
        }
        goto LABEL_107;
      }
LABEL_67:
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v94.__r_.__value_.__l.__size_ != 4)
          goto LABEL_99;
        v54 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) != 4)
          goto LABEL_99;
        v54 = &v94;
      }
      if (LODWORD(v54->__r_.__value_.__l.__data_) == 1701667187)
      {
        if (v43)
          goto LABEL_100;
        goto LABEL_106;
      }
LABEL_99:
      if ((std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v94, "same_lower") & v43 & 1) != 0)
      {
LABEL_100:
        std::operator+<char>();
        v68 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
        v69 = v68[1];
        v73[0] = *v68;
        v73[1] = v69;
        if (v69)
        {
          v70 = (unint64_t *)(v69 + 8);
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v72, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
        else
          v72 = v88;
        MIL::ValidationResult::ValidationResult(a2, v73, 315, &v72);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v73);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        goto LABEL_107;
      }
LABEL_106:
      MIL::ValidationResult::ValidationResult(a2);
      goto LABEL_107;
    }
  }
  else
  {
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) != 5)
      goto LABEL_44;
    v20 = &v94;
    if (!v16)
      goto LABEL_44;
  }
  if (LODWORD(v20->__r_.__value_.__l.__data_) ^ 0x696C6176 | v20->__r_.__value_.__s.__data_[4] ^ 0x64)
    goto LABEL_44;
  v38 = 4 * v16;
  v39 = v15;
  while (!*v39)
  {
    ++v39;
    v38 -= 4;
    if (!v38)
      goto LABEL_44;
  }
  v59 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v60 = (std::__shared_weak_count *)v59[1];
  v83 = *v59;
  v84 = v60;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  std::string::basic_string[abi:ne180100]<0>(v81, "Pad values must be 0s for 'valid' pad type.");
  MIL::ValidationResult::ValidationResult(a2, &v83, 315, v81);
  if (v82 < 0)
    operator delete(v81[0]);
  v51 = v84;
  if (v84)
  {
    v63 = (unint64_t *)&v84->__shared_owners_;
    do
      v53 = __ldaxr(v63);
    while (__stlxr(v53 - 1, v63));
LABEL_88:
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
LABEL_107:
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    v58 = (std::string::value_type *)v94.__r_.__value_.__r.__words[0];
    goto LABEL_109;
  }
}

void sub_1E078644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  uint64_t v47;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (*(char *)(v47 - 145) < 0)
    operator delete(*(void **)(v47 - 168));
  if (*(char *)(v47 - 73) < 0)
    operator delete(*(void **)(v47 - 96));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateL2Pool(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14[2];
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v19 < 0)
    operator delete(__p);
  if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 104))(v6)
    && MIL::IRTensorValueType::Rank(v6) == 5)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v8 = (std::__shared_weak_count *)LocationPtr[1];
    v16 = *LocationPtr;
    v17 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "Unsupported 3D Pooling type.");
    MIL::ValidationResult::ValidationResult(a2, &v16, 315, v14);
    if (v15 < 0)
      operator delete(v14[0]);
    v11 = v17;
    if (v17)
    {
      v12 = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    MIL::Operators::Common::ios15::CustomValidators::ValidateBasePool(this, a2);
  }
}

void sub_1E0786700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBasePool(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  MIL::IRValue *SingleValue;
  uint64_t *v10;
  const void *v11;
  const void *v12;
  int v13;
  MIL::IRValue *v14;
  uint64_t *v15;
  MIL::IRValue *v16;
  uint64_t *v17;
  int *Data;
  unint64_t v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  void (***v38)(MIL::MILContextImpl *__hidden);
  unint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  int v44;
  uint64_t *v45;
  __int128 v46;
  std::vector<int>::value_type __x;
  std::vector<int> v48;
  void *__p;
  void *v50;
  _OWORD *v51;
  void *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  std::string v63;

  std::string::basic_string[abi:ne180100]<0>(&v63, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&v63);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v45 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  std::string::basic_string[abi:ne180100]<0>(&v63, "pad");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v63);
  v10 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v60, "pad_type");
  v11 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v60);
  MIL::IRValue::GetScalar<std::string>(v11, &v63);
  if (SHIBYTE(v62) < 0)
    operator delete(v60);
  std::string::basic_string[abi:ne180100]<0>(&v60, "ceil_mode");
  v12 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v60);
  v13 = MIL::IRValue::GetScalar<BOOL>(v12);
  if (SHIBYTE(v62) < 0)
    operator delete(v60);
  std::string::basic_string[abi:ne180100]<0>(&v60, "strides");
  v14 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v60);
  v15 = (uint64_t *)MIL::IRValue::AsTensor(v14);
  if (SHIBYTE(v62) < 0)
    operator delete(v60);
  std::string::basic_string[abi:ne180100]<0>(&v60, "kernel_sizes");
  v16 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v60);
  v17 = (uint64_t *)MIL::IRValue::AsTensor(v16);
  Data = (int *)MIL::IRTensorValue::GetDataView<int>(v17);
  v20 = v19;
  if (SHIBYTE(v62) < 0)
    operator delete(v60);
  v43 = v13;
  v44 = v8;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  std::vector<std::string const*>::reserve((void **)&v60, v20);
  if (v20)
  {
    v21 = &Data[v20];
    do
    {
      v22 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)*Data);
      v23 = v22;
      v24 = v61;
      if (v61 >= v62)
      {
        v26 = v61 - v60;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v27 = ((char *)v62 - (char *)v60) >> 2;
        if (v27 <= v26 + 1)
          v27 = v26 + 1;
        if ((unint64_t)((char *)v62 - (char *)v60) >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v62, v28);
        else
          v29 = 0;
        v30 = (uint64_t *)&v29[8 * v26];
        *v30 = v23;
        v25 = v30 + 1;
        v31 = v61;
        v32 = (char *)v60;
        if (v61 != v60)
        {
          do
          {
            v33 = *--v31;
            *--v30 = v33;
          }
          while (v31 != (uint64_t *)v32);
          v31 = v60;
        }
        v60 = v30;
        v61 = v25;
        v62 = (uint64_t *)&v29[8 * v28];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *v61 = v22;
        v25 = v24 + 1;
      }
      v61 = v25;
      ++Data;
    }
    while (Data != v21);
  }
  v34 = (const void *)MIL::IRTensorValue::GetDataView<int>(v15);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v57, v34, (uint64_t)v34 + 4 * v35, (4 * v35) >> 2);
  v36 = (const void *)MIL::IRTensorValue::GetDataView<int>(v10);
  v54 = 0;
  v55 = 0;
  v56 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v54, v36, (uint64_t)v36 + 4 * v37, (4 * v37) >> 2);
  v38 = *a1;
  v39 = (v45[1] - *v45) >> 3;
  MIL::ValueTypeInferenceUtils::SliceShape(v45, 2uLL, v39, &__p);
  __x = 1;
  std::vector<int>::vector(&v48, v39 - 2, &__x);
  MIL::ValueTypeInferenceUtils::GetSpatialDimensionsOutShape(v38, &__p, (uint64_t *)&v60, &v57, &v48, (int **)&v63, (uint64_t)&v54, v43, &v52);
  if (v48.__begin_)
  {
    v48.__end_ = v48.__begin_;
    operator delete(v48.__begin_);
  }
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
  v46 = *(_OWORD *)*v45;
  v40 = operator new(0x10uLL);
  __p = v40;
  *v40 = v46;
  v50 = v40 + 1;
  v51 = v40 + 1;
  std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)&__p, (uint64_t)(v40 + 1), (char *)v52, v53, (v53 - (_BYTE *)v52) >> 3);
  v41 = MIL::IRTensorValueType::MakeWithShape(*a1, v44, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v42 = (uint64_t *)operator new(8uLL);
  *a3 = v42;
  *v42++ = v41;
  a3[1] = v42;
  a3[2] = v42;
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
  if (v52)
  {
    v53 = (char *)v52;
    operator delete(v52);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
}

void sub_1E0786BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  void *v33;

  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  v33 = *(void **)(v31 - 136);
  if (v33)
  {
    *(_QWORD *)(v30 + 8) = v33;
    operator delete(v33);
  }
  if (*(char *)(v31 - 89) < 0)
    operator delete(*(void **)(v30 + 24));
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::ios15::BasePool::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  unsigned __int8 *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unsigned __int8 *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char **v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count_vtbl *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  char *v81;
  char *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  char **v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  void *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *p_shared_owners;
  unint64_t v109;
  void *v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  void *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void *v138;
  void *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void *v145;
  void *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  void *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  void *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void *v166;
  void *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  void *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  uint64_t i;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count_vtbl *v195;
  uint64_t result;
  uint64_t v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  void *v204;
  std::__shared_weak_count *v205;
  void *v206[2];
  char v207;
  void *v208[2];
  char v209;
  void *v210;
  std::__shared_weak_count *v211;
  void *v212[2];
  char v213;
  void *v214[2];
  char v215;
  void *v216;
  std::__shared_weak_count *v217;
  void *v218[2];
  char v219;
  void *v220[2];
  char v221;
  void *v222;
  std::__shared_weak_count *v223;
  void *v224[2];
  char v225;
  void *v226[2];
  char v227;
  void *v228;
  std::__shared_weak_count *v229;
  void *v230[2];
  char v231;
  void *v232[2];
  char v233;
  void *v234;
  std::__shared_weak_count *v235;
  void *v236;
  std::__shared_weak_count *v237;
  void *v238[2];
  char v239;
  void *v240;
  std::__shared_weak_count *v241;
  void *v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  void *v246;
  std::__shared_weak_count *v247;
  void *v248[2];
  char v249;
  void *v250[2];
  char v251;
  void *v252;
  std::__shared_weak_count *v253;
  __int128 v254;
  __int128 v255;
  void *v256[2];
  uint64_t v257;
  __n128 v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  char **v262;
  __n128 v263;
  __n128 v264;
  __n128 v265;
  __n128 v266;
  __n128 v267;
  __n128 v268;
  _QWORD *v269;
  void *v270;
  void *v271;
  char *v272;
  _QWORD v273[3];
  void *v274[3];
  void *__p;
  void *v276;
  _QWORD *v277;
  _QWORD v278[3];
  _QWORD *v279;
  _BYTE v280[24];
  _BYTE *v281;
  _QWORD v282[3];
  _QWORD *v283;
  std::__shared_weak_count_vtbl *v284;
  uint64_t v285;
  void (__cdecl **v286)(std::__shared_weak_count *__hidden);
  _QWORD v287[3];

  v287[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v269 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (char *)operator new(0x18uLL);
  v272 = v12 + 24;
  *(_QWORD *)v12 = v9;
  *((_QWORD *)v12 + 1) = v10;
  *((_QWORD *)v12 + 2) = v11;
  v270 = v12;
  v271 = v12 + 24;
  v284 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v270);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(0x18uLL);
  v277 = v16 + 3;
  *v16 = v13;
  v16[1] = v14;
  v16[2] = v15;
  __p = v16;
  v276 = v16 + 3;
  v285 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v284, 2, &v268);
  MIL::IRParameter::Make(&v268, &v260);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v260);
  v17 = v260;
  v260 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v268.n128_u64[1];
  if (v268.n128_u64[1])
  {
    v19 = (unint64_t *)(v268.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v276 = __p;
    operator delete(__p);
  }
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  v21 = v269;
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (char *)operator new(8uLL);
  v270 = v23;
  *(_QWORD *)v23 = v22;
  v272 = v23 + 8;
  v271 = v23 + 8;
  v284 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v270);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v284, 1, &v267);
  MIL::IRParameter::Make(&v267, (uint64_t *)&__p);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v21, "kernel_sizes", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v267.n128_u64[1];
  if (v267.n128_u64[1])
  {
    v27 = (unint64_t *)(v267.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v269;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (char *)operator new(8uLL);
  v270 = v31;
  *(_QWORD *)v31 = v30;
  v272 = v31 + 8;
  v271 = v31 + 8;
  v284 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v270);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v284, 1, &v266);
  MIL::IRParameter::Make(&v266, (uint64_t *)&__p);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v29, "strides", (uint64_t *)&__p);
  v33 = __p;
  __p = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v266.n128_u64[1];
  if (v266.n128_u64[1])
  {
    v35 = (unint64_t *)(v266.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v37 = v269;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v265);
  MIL::IRParameter::Make(&v265, (uint64_t *)&v270);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v37, "pad_type", (uint64_t *)&v270);
  v39 = v270;
  v270 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = (std::__shared_weak_count *)v265.n128_u64[1];
  if (v265.n128_u64[1])
  {
    v41 = (unint64_t *)(v265.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  v43 = v269;
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = (char *)operator new(0x10uLL);
  v272 = v46 + 16;
  *(_QWORD *)v46 = v44;
  *((_QWORD *)v46 + 1) = v45;
  v270 = v46;
  v271 = v46 + 16;
  v284 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v270);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v284, 1, &v264);
  MIL::IRParameter::Make(&v264, (uint64_t *)&__p);
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v43, "pad", (uint64_t *)&__p);
  v48 = __p;
  __p = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v264.n128_u64[1];
  if (v264.n128_u64[1])
  {
    v50 = (unint64_t *)(v264.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v269;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v263);
  MIL::IRParameter::Make(&v263, (uint64_t *)&v270);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v52, "ceil_mode", (uint64_t *)&v270);
  v54 = v270;
  v270 = 0;
  if (v54)
    (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v263.n128_u64[1];
  if (v263.n128_u64[1])
  {
    v56 = (unint64_t *)(v263.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  v262 = 0;
  v58 = operator new();
  *(_QWORD *)v58 = 0;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  v270 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v262, (void **)v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v270, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v262, 1uLL);
  v59 = v262;
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  __p = v61;
  *v61 = v60;
  v277 = v61 + 1;
  v276 = v61 + 1;
  v287[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v284 = v63;
  v63->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v62;
  v285 = (uint64_t)&v63->~__shared_weak_count_0;
  v286 = &v63->~__shared_weak_count_0;
  v287[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v284);
  MIL::IRParameter::MakeTypeSet((uint64_t)v287, 2, &v258);
  MIL::IRParameter::Make(&v258, &v259);
  v64 = v259;
  v260 = v259;
  if (v259)
  {
    v65 = (_QWORD *)operator new();
    v66 = v259;
    *v65 = &unk_1EA99F888;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v66;
  }
  else
  {
    v65 = 0;
  }
  v261 = v65;
  v259 = 0;
  v67 = v59[2];
  v68 = v59[1];
  if (v68 >= v67)
  {
    v70 = (v68 - *v59) >> 4;
    v71 = v70 + 1;
    if ((unint64_t)(v70 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v72 = v67 - *v59;
    if (v72 >> 3 > v71)
      v71 = v72 >> 3;
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
      v73 = 0xFFFFFFFFFFFFFFFLL;
    else
      v73 = v71;
    v273[1] = v59 + 2;
    v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v59 + 2), v73);
    v76 = (uint64_t *)&v74[16 * v70];
    *v76 = v64;
    v76[1] = (uint64_t)v65;
    v261 = 0;
    v260 = 0;
    v78 = *v59;
    v77 = v59[1];
    if (v77 == *v59)
    {
      v81 = v59[1];
      v79 = &v74[16 * v70];
    }
    else
    {
      v79 = &v74[16 * v70];
      do
      {
        v80 = *((_OWORD *)v77 - 1);
        v77 -= 16;
        *((_OWORD *)v79 - 1) = v80;
        v79 -= 16;
        *(_QWORD *)v77 = 0;
        *((_QWORD *)v77 + 1) = 0;
      }
      while (v77 != v78);
      v81 = *v59;
      v77 = v59[1];
    }
    v69 = (char *)(v76 + 2);
    *v59 = v79;
    v271 = v81;
    v59[1] = (char *)(v76 + 2);
    v272 = v77;
    v82 = v59[2];
    v59[2] = &v74[16 * v75];
    v273[0] = v82;
    v270 = v81;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v270);
  }
  else
  {
    *(_QWORD *)v68 = v64;
    *((_QWORD *)v68 + 1) = v65;
    v69 = v68 + 16;
    v261 = 0;
    v260 = 0;
  }
  v59[1] = v69;
  v83 = v259;
  v259 = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = (std::__shared_weak_count *)v258.n128_u64[1];
  if (v258.n128_u64[1])
  {
    v85 = (unint64_t *)(v258.n128_u64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (v284)
  {
    v285 = (uint64_t)v284;
    operator delete(v284);
  }
  if (__p)
  {
    v276 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v256 = *(_OWORD *)a2;
  v257 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v87 = (uint64_t)v269;
  *(_QWORD *)&v255 = v269;
  if (v269)
  {
    v88 = (_QWORD *)operator new();
    *v88 = &unk_1EA99F8E8;
    v88[1] = 0;
    v88[2] = 0;
    v88[3] = v87;
  }
  else
  {
    v88 = 0;
  }
  *((_QWORD *)&v255 + 1) = v88;
  v269 = 0;
  *(_QWORD *)&v254 = v262;
  if (v262)
  {
    v89 = (_QWORD *)operator new();
    v90 = v262;
    *v89 = &unk_1EA99F948;
    v89[1] = 0;
    v89[2] = 0;
    v89[3] = v90;
  }
  else
  {
    v89 = 0;
  }
  *((_QWORD *)&v254 + 1) = v89;
  v262 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v282, a3);
  }
  else
  {
    v282[0] = &unk_1EA99FAC8;
    v282[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateBasePool;
    v283 = v282;
  }
  v281 = 0;
  MIL::IROperator::Make((__int128 *)v256, &v255, &v254, (uint64_t)v282, (uint64_t)v280, a4);
  v91 = v281;
  if (v281 == v280)
  {
    v92 = 4;
    v91 = v280;
  }
  else
  {
    if (!v281)
      goto LABEL_95;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_95:
  v93 = v283;
  if (v283 == v282)
  {
    v94 = 4;
    v93 = v282;
    goto LABEL_99;
  }
  if (v283)
  {
    v94 = 5;
LABEL_99:
    (*(void (**)(void))(*v93 + 8 * v94))();
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
  if (*((_QWORD *)&v254 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
  if (*((_QWORD *)&v255 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v255 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (SHIBYTE(v257) < 0)
    operator delete(v256[0]);
  v101 = *a4;
  v278[0] = &off_1EA99FBD8;
  v278[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBasePool;
  v279 = v278;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v101 + 200))(v101, v278);
  v102 = v279;
  if (v279 == v278)
  {
    v103 = 4;
    v102 = v278;
  }
  else
  {
    if (!v279)
      goto LABEL_117;
    v103 = 5;
  }
  (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_117:
  MIL::Validation::TensorDTypeConstraints::Make(&v270);
  v104 = v270;
  std::string::basic_string[abi:ne180100]<0>(v250, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v250, 0, (uint64_t *)&__p);
  v252 = __p;
  if (__p)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = (std::__shared_weak_count_vtbl *)__p;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v253 = v105;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v248, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v104 + 24))(v104, &v252, v248);
  if (v249 < 0)
    operator delete(v248[0]);
  v107 = v253;
  if (v253)
  {
    p_shared_owners = (unint64_t *)&v253->__shared_owners_;
    do
      v109 = __ldaxr(p_shared_owners);
    while (__stlxr(v109 - 1, p_shared_owners));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = __p;
  __p = 0;
  if (v110)
    (*(void (**)(void *))(*(_QWORD *)v110 + 8))(v110);
  if (v251 < 0)
    operator delete(v250[0]);
  v111 = v270;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v246 = __p;
  if (__p)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = (std::__shared_weak_count_vtbl *)__p;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v247 = v112;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v244, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v111 + 24))(v111, &v246, v244);
  if (v245 < 0)
    operator delete(v244[0]);
  v114 = v247;
  if (v247)
  {
    v115 = (unint64_t *)&v247->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = __p;
  __p = 0;
  if (v117)
    (*(void (**)(void *))(*(_QWORD *)v117 + 8))(v117);
  v118 = *a4;
  v242 = v270;
  if (v270)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)v270;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v243 = v119;
  v270 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v118 + 56))(v118, &v242);
  v121 = v243;
  if (v243)
  {
    v122 = (unint64_t *)&v243->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v270;
  v270 = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  MIL::Validation::TensorRankValueConstraints::Make(&v270);
  v125 = v270;
  std::string::basic_string[abi:ne180100]<0>(v238, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v238, 0, (uint64_t *)&__p);
  v240 = __p;
  if (__p)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)__p;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v241 = v126;
  __p = 0;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v125 + 32))(v125, &v240, 3, 5);
  v128 = v241;
  if (v241)
  {
    v129 = (unint64_t *)&v241->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = __p;
  __p = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  if (v239 < 0)
    operator delete(v238[0]);
  v132 = *a4;
  v236 = v270;
  if (v270)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = (std::__shared_weak_count_vtbl *)v270;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v237 = v133;
  v270 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v132 + 56))(v132, &v236);
  v135 = v237;
  if (v237)
  {
    v136 = (unint64_t *)&v237->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v270;
  v270 = 0;
  if (v138)
    (*(void (**)(void *))(*(_QWORD *)v138 + 8))(v138);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v270);
  v139 = v270;
  std::string::basic_string[abi:ne180100]<0>(v232, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v232, 0, (uint64_t *)&__p);
  v234 = __p;
  if (__p)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = (std::__shared_weak_count_vtbl *)__p;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v235 = v140;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v230, "C_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v139 + 24))(v139, &v234, 1, v230);
  if (v231 < 0)
    operator delete(v230[0]);
  v142 = v235;
  if (v235)
  {
    v143 = (unint64_t *)&v235->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = __p;
  __p = 0;
  if (v145)
    (*(void (**)(void *))(*(_QWORD *)v145 + 8))(v145);
  if (v233 < 0)
    operator delete(v232[0]);
  v146 = v270;
  std::string::basic_string[abi:ne180100]<0>(v226, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v226, 0, (uint64_t *)&__p);
  v228 = __p;
  if (__p)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)__p;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v229 = v147;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v224, "S");
  (*(void (**)(void *, void **, uint64_t, uint64_t, void **))(*(_QWORD *)v146 + 32))(v146, &v228, 2, -1, v224);
  if (v225 < 0)
    operator delete(v224[0]);
  v149 = v229;
  if (v229)
  {
    v150 = (unint64_t *)&v229->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = __p;
  __p = 0;
  if (v152)
    (*(void (**)(void *))(*(_QWORD *)v152 + 8))(v152);
  if (v227 < 0)
    operator delete(v226[0]);
  v153 = v270;
  std::string::basic_string[abi:ne180100]<0>(v220, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v220, 0, (uint64_t *)&__p);
  v222 = __p;
  if (__p)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)__p;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v223 = v154;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v218, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v153 + 24))(v153, &v222, 0, v218);
  if (v219 < 0)
    operator delete(v218[0]);
  v156 = v223;
  if (v223)
  {
    v157 = (unint64_t *)&v223->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = __p;
  __p = 0;
  if (v159)
    (*(void (**)(void *))(*(_QWORD *)v159 + 8))(v159);
  if (v221 < 0)
    operator delete(v220[0]);
  v160 = v270;
  std::string::basic_string[abi:ne180100]<0>(v214, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v214, 0, (uint64_t *)&__p);
  v216 = __p;
  if (__p)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = (std::__shared_weak_count_vtbl *)__p;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v217 = v161;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v212, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v160 + 24))(v160, &v216, 0, v212);
  if (v213 < 0)
    operator delete(v212[0]);
  v163 = v217;
  if (v217)
  {
    v164 = (unint64_t *)&v217->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = __p;
  __p = 0;
  if (v166)
    (*(void (**)(void *))(*(_QWORD *)v166 + 8))(v166);
  if (v215 < 0)
    operator delete(v214[0]);
  v167 = v270;
  std::string::basic_string[abi:ne180100]<0>(v208, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v208, 0, (uint64_t *)&__p);
  v210 = __p;
  if (__p)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = (std::__shared_weak_count_vtbl *)__p;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v211 = v168;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v206, "D");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v167 + 24))(v167, &v210, 0, v206);
  if (v207 < 0)
    operator delete(v206[0]);
  v170 = v211;
  if (v211)
  {
    v171 = (unint64_t *)&v211->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = __p;
  __p = 0;
  if (v173)
    (*(void (**)(void *))(*(_QWORD *)v173 + 8))(v173);
  if (v209 < 0)
    operator delete(v208[0]);
  v174 = *a4;
  v204 = v270;
  if (v270)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = (std::__shared_weak_count_vtbl *)v270;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v205 = v175;
  v270 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v174 + 56))(v174, &v204);
  v177 = v205;
  if (v205)
  {
    v178 = (unint64_t *)&v205->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = v270;
  v270 = 0;
  if (v180)
    (*(void (**)(void *))(*(_QWORD *)v180 + 8))(v180);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v284);
  v181 = v284;
  std::string::basic_string[abi:ne180100]<0>(v200, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v200, 0, &v260);
  v202 = v260;
  if (v260)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = v260;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = (std::__shared_weak_count_vtbl *)v183;
  }
  else
  {
    v182 = 0;
  }
  v203 = v182;
  v260 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v270, "custom");
  std::string::basic_string[abi:ne180100]<0>(v273, "same");
  std::string::basic_string[abi:ne180100]<0>(v274, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v270, 3);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **, uint64_t))v181->~__shared_weak_count + 3))(v181, &v202, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v274[i + 2]) < 0)
      operator delete(v274[i]);
  }
  v185 = v203;
  if (v203)
  {
    v186 = (unint64_t *)&v203->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = v260;
  v260 = 0;
  if (v188)
    (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
  if (v201 < 0)
    operator delete(v200[0]);
  v189 = *a4;
  v198 = v284;
  if (v284)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = v284;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v191;
  }
  else
  {
    v190 = 0;
  }
  v199 = v190;
  v284 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v189 + 56))(v189, &v198);
  v192 = v199;
  if (v199)
  {
    v193 = (unint64_t *)&v199->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = v284;
  v284 = 0;
  if (v195)
    (*((void (**)(std::__shared_weak_count_vtbl *))v195->~__shared_weak_count + 1))(v195);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v262, 0);
  result = (uint64_t)v269;
  if (v269)
  {
    v197 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v269);
    return MEMORY[0x1E0C023A0](v197, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0788434(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x308], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BaseAvgPool::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  unsigned __int8 *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unsigned __int8 *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  char **v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  char *v83;
  char *v84;
  char *v85;
  __int128 v86;
  char *v87;
  char *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  char **v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  void *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  void *v116;
  void *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  void *v144;
  void *v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  void *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  void *v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  void *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  void *v172;
  void *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  uint64_t v189;
  uint64_t i;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count_vtbl *v201;
  uint64_t result;
  uint64_t v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  void *v206[2];
  char v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  void *v210;
  std::__shared_weak_count *v211;
  void *v212[2];
  char v213;
  void *v214[2];
  char v215;
  void *v216;
  std::__shared_weak_count *v217;
  void *v218[2];
  char v219;
  void *v220[2];
  char v221;
  void *v222;
  std::__shared_weak_count *v223;
  void *v224[2];
  char v225;
  void *v226[2];
  char v227;
  void *v228;
  std::__shared_weak_count *v229;
  void *v230[2];
  char v231;
  void *v232[2];
  char v233;
  void *v234;
  std::__shared_weak_count *v235;
  void *v236[2];
  char v237;
  void *v238[2];
  char v239;
  void *v240;
  std::__shared_weak_count *v241;
  void *v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  void *v246;
  std::__shared_weak_count *v247;
  void *v248;
  std::__shared_weak_count *v249;
  void *v250[2];
  char v251;
  void *v252;
  std::__shared_weak_count *v253;
  void *v254[2];
  char v255;
  void *v256[2];
  char v257;
  void *v258;
  std::__shared_weak_count *v259;
  __int128 v260;
  __int128 v261;
  void *v262[2];
  uint64_t v263;
  __n128 v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  char **v268;
  __n128 v269;
  __n128 v270;
  __n128 v271;
  __n128 v272;
  __n128 v273;
  __n128 v274;
  __n128 v275;
  _QWORD *v276;
  void *v277;
  void *v278;
  char *v279;
  _QWORD v280[3];
  void *v281[3];
  void *__p;
  void *v283;
  _QWORD *v284;
  _QWORD v285[3];
  _QWORD *v286;
  _BYTE v287[24];
  _BYTE *v288;
  _QWORD v289[3];
  _QWORD *v290;
  std::__shared_weak_count_vtbl *v291;
  uint64_t v292;
  void (__cdecl **v293)(std::__shared_weak_count *__hidden);
  _QWORD v294[3];

  v294[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v276 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (char *)operator new(0x18uLL);
  v279 = v12 + 24;
  *(_QWORD *)v12 = v9;
  *((_QWORD *)v12 + 1) = v10;
  *((_QWORD *)v12 + 2) = v11;
  v277 = v12;
  v278 = v12 + 24;
  v291 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v277);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(0x18uLL);
  v284 = v16 + 3;
  *v16 = v13;
  v16[1] = v14;
  v16[2] = v15;
  __p = v16;
  v283 = v16 + 3;
  v292 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v291, 2, &v275);
  MIL::IRParameter::Make(&v275, &v266);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v266);
  v17 = v266;
  v266 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v275.n128_u64[1];
  if (v275.n128_u64[1])
  {
    v19 = (unint64_t *)(v275.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v283 = __p;
    operator delete(__p);
  }
  if (v277)
  {
    v278 = v277;
    operator delete(v277);
  }
  v21 = v276;
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (char *)operator new(8uLL);
  v277 = v23;
  *(_QWORD *)v23 = v22;
  v279 = v23 + 8;
  v278 = v23 + 8;
  v291 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v277);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v291, 1, &v274);
  MIL::IRParameter::Make(&v274, (uint64_t *)&__p);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v21, "kernel_sizes", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v274.n128_u64[1];
  if (v274.n128_u64[1])
  {
    v27 = (unint64_t *)(v274.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v277)
  {
    v278 = v277;
    operator delete(v277);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v276;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (char *)operator new(8uLL);
  v277 = v31;
  *(_QWORD *)v31 = v30;
  v279 = v31 + 8;
  v278 = v31 + 8;
  v291 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v277);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v291, 1, &v273);
  MIL::IRParameter::Make(&v273, (uint64_t *)&__p);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v29, "strides", (uint64_t *)&__p);
  v33 = __p;
  __p = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v273.n128_u64[1];
  if (v273.n128_u64[1])
  {
    v35 = (unint64_t *)(v273.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v277)
  {
    v278 = v277;
    operator delete(v277);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v37 = v276;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v272);
  MIL::IRParameter::Make(&v272, (uint64_t *)&v277);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v37, "pad_type", (uint64_t *)&v277);
  v39 = v277;
  v277 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = (std::__shared_weak_count *)v272.n128_u64[1];
  if (v272.n128_u64[1])
  {
    v41 = (unint64_t *)(v272.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  v43 = v276;
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = (char *)operator new(0x10uLL);
  v279 = v46 + 16;
  *(_QWORD *)v46 = v44;
  *((_QWORD *)v46 + 1) = v45;
  v277 = v46;
  v278 = v46 + 16;
  v291 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v277);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v291, 1, &v271);
  MIL::IRParameter::Make(&v271, (uint64_t *)&__p);
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v43, "pad", (uint64_t *)&__p);
  v48 = __p;
  __p = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v271.n128_u64[1];
  if (v271.n128_u64[1])
  {
    v50 = (unint64_t *)(v271.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v277)
  {
    v278 = v277;
    operator delete(v277);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v276;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v270);
  MIL::IRParameter::Make(&v270, (uint64_t *)&v277);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v52, "ceil_mode", (uint64_t *)&v277);
  v54 = v277;
  v277 = 0;
  if (v54)
    (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v270.n128_u64[1];
  if (v270.n128_u64[1])
  {
    v56 = (unint64_t *)(v270.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  v58 = v276;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v269);
  MIL::IRParameter::Make(&v269, (uint64_t *)&v277);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[29],std::unique_ptr<MIL::IRParameter>>(v58, "exclude_padding_from_average", (uint64_t *)&v277);
  v60 = v277;
  v277 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v269.n128_u64[1];
  if (v269.n128_u64[1])
  {
    v62 = (unint64_t *)(v269.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  v268 = 0;
  v64 = operator new();
  *(_QWORD *)v64 = 0;
  *(_QWORD *)(v64 + 8) = 0;
  *(_QWORD *)(v64 + 16) = 0;
  v277 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v268, (void **)v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v277, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v268, 1uLL);
  v65 = v268;
  v66 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v67 = operator new(8uLL);
  __p = v67;
  *v67 = v66;
  v284 = v67 + 1;
  v283 = v67 + 1;
  v294[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v291 = v69;
  v69->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v68;
  v292 = (uint64_t)&v69->~__shared_weak_count_0;
  v293 = &v69->~__shared_weak_count_0;
  v294[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v291);
  MIL::IRParameter::MakeTypeSet((uint64_t)v294, 2, &v264);
  MIL::IRParameter::Make(&v264, &v265);
  v70 = v265;
  v266 = v265;
  if (v265)
  {
    v71 = (_QWORD *)operator new();
    v72 = v265;
    *v71 = &unk_1EA99F888;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  v267 = v71;
  v265 = 0;
  v73 = v65[2];
  v74 = v65[1];
  if (v74 >= v73)
  {
    v76 = (v74 - *v65) >> 4;
    v77 = v76 + 1;
    if ((unint64_t)(v76 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v78 = v73 - *v65;
    if (v78 >> 3 > v77)
      v77 = v78 >> 3;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0)
      v79 = 0xFFFFFFFFFFFFFFFLL;
    else
      v79 = v77;
    v280[1] = v65 + 2;
    v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v65 + 2), v79);
    v82 = (uint64_t *)&v80[16 * v76];
    *v82 = v70;
    v82[1] = (uint64_t)v71;
    v267 = 0;
    v266 = 0;
    v84 = *v65;
    v83 = v65[1];
    if (v83 == *v65)
    {
      v87 = v65[1];
      v85 = &v80[16 * v76];
    }
    else
    {
      v85 = &v80[16 * v76];
      do
      {
        v86 = *((_OWORD *)v83 - 1);
        v83 -= 16;
        *((_OWORD *)v85 - 1) = v86;
        v85 -= 16;
        *(_QWORD *)v83 = 0;
        *((_QWORD *)v83 + 1) = 0;
      }
      while (v83 != v84);
      v87 = *v65;
      v83 = v65[1];
    }
    v75 = (char *)(v82 + 2);
    *v65 = v85;
    v278 = v87;
    v65[1] = (char *)(v82 + 2);
    v279 = v83;
    v88 = v65[2];
    v65[2] = &v80[16 * v81];
    v280[0] = v88;
    v277 = v87;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v277);
  }
  else
  {
    *(_QWORD *)v74 = v70;
    *((_QWORD *)v74 + 1) = v71;
    v75 = v74 + 16;
    v267 = 0;
    v266 = 0;
  }
  v65[1] = v75;
  v89 = v265;
  v265 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  v90 = (std::__shared_weak_count *)v264.n128_u64[1];
  if (v264.n128_u64[1])
  {
    v91 = (unint64_t *)(v264.n128_u64[1] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v291)
  {
    v292 = (uint64_t)v291;
    operator delete(v291);
  }
  if (__p)
  {
    v283 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v262 = *(_OWORD *)a2;
  v263 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v93 = (uint64_t)v276;
  *(_QWORD *)&v261 = v276;
  if (v276)
  {
    v94 = (_QWORD *)operator new();
    *v94 = &unk_1EA99F8E8;
    v94[1] = 0;
    v94[2] = 0;
    v94[3] = v93;
  }
  else
  {
    v94 = 0;
  }
  *((_QWORD *)&v261 + 1) = v94;
  v276 = 0;
  *(_QWORD *)&v260 = v268;
  if (v268)
  {
    v95 = (_QWORD *)operator new();
    v96 = v268;
    *v95 = &unk_1EA99F948;
    v95[1] = 0;
    v95[2] = 0;
    v95[3] = v96;
  }
  else
  {
    v95 = 0;
  }
  *((_QWORD *)&v260 + 1) = v95;
  v268 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v289, a3);
  }
  else
  {
    v289[0] = &unk_1EA99FAC8;
    v289[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateBasePool;
    v290 = v289;
  }
  v288 = 0;
  MIL::IROperator::Make((__int128 *)v262, &v261, &v260, (uint64_t)v289, (uint64_t)v287, a4);
  v97 = v288;
  if (v288 == v287)
  {
    v98 = 4;
    v97 = v287;
  }
  else
  {
    if (!v288)
      goto LABEL_102;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_102:
  v99 = v290;
  if (v290 == v289)
  {
    v100 = 4;
    v99 = v289;
    goto LABEL_106;
  }
  if (v290)
  {
    v100 = 5;
LABEL_106:
    (*(void (**)(void))(*v99 + 8 * v100))();
  }
  v101 = (std::__shared_weak_count *)*((_QWORD *)&v260 + 1);
  if (*((_QWORD *)&v260 + 1))
  {
    v102 = (unint64_t *)(*((_QWORD *)&v260 + 1) + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v261 + 1);
  if (*((_QWORD *)&v261 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  if (SHIBYTE(v263) < 0)
    operator delete(v262[0]);
  v107 = *a4;
  v285[0] = &off_1EA99FBD8;
  v285[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBasePool;
  v286 = v285;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v107 + 200))(v107, v285);
  v108 = v286;
  if (v286 == v285)
  {
    v109 = 4;
    v108 = v285;
  }
  else
  {
    if (!v286)
      goto LABEL_124;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_124:
  MIL::Validation::TensorDTypeConstraints::Make(&v277);
  v110 = v277;
  std::string::basic_string[abi:ne180100]<0>(v256, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v256, 0, (uint64_t *)&__p);
  v258 = __p;
  if (__p)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)__p;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v259 = v111;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v254, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v110 + 24))(v110, &v258, v254);
  if (v255 < 0)
    operator delete(v254[0]);
  v113 = v259;
  if (v259)
  {
    p_shared_owners = (unint64_t *)&v259->__shared_owners_;
    do
      v115 = __ldaxr(p_shared_owners);
    while (__stlxr(v115 - 1, p_shared_owners));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = __p;
  __p = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  if (v257 < 0)
    operator delete(v256[0]);
  v117 = v277;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v252 = __p;
  if (__p)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = (std::__shared_weak_count_vtbl *)__p;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v253 = v118;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v250, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v117 + 24))(v117, &v252, v250);
  if (v251 < 0)
    operator delete(v250[0]);
  v120 = v253;
  if (v253)
  {
    v121 = (unint64_t *)&v253->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = __p;
  __p = 0;
  if (v123)
    (*(void (**)(void *))(*(_QWORD *)v123 + 8))(v123);
  v124 = *a4;
  v248 = v277;
  if (v277)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)v277;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v249 = v125;
  v277 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v124 + 56))(v124, &v248);
  v127 = v249;
  if (v249)
  {
    v128 = (unint64_t *)&v249->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v277;
  v277 = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  MIL::Validation::TensorRankValueConstraints::Make(&v277);
  v131 = v277;
  std::string::basic_string[abi:ne180100]<0>(v244, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v244, 0, (uint64_t *)&__p);
  v246 = __p;
  if (__p)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = (std::__shared_weak_count_vtbl *)__p;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v247 = v132;
  __p = 0;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v131 + 32))(v131, &v246, 3, 5);
  v134 = v247;
  if (v247)
  {
    v135 = (unint64_t *)&v247->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = __p;
  __p = 0;
  if (v137)
    (*(void (**)(void *))(*(_QWORD *)v137 + 8))(v137);
  if (v245 < 0)
    operator delete(v244[0]);
  v138 = *a4;
  v242 = v277;
  if (v277)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = (std::__shared_weak_count_vtbl *)v277;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v243 = v139;
  v277 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v138 + 56))(v138, &v242);
  v141 = v243;
  if (v243)
  {
    v142 = (unint64_t *)&v243->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = v277;
  v277 = 0;
  if (v144)
    (*(void (**)(void *))(*(_QWORD *)v144 + 8))(v144);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v277);
  v145 = v277;
  std::string::basic_string[abi:ne180100]<0>(v238, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v238, 0, (uint64_t *)&__p);
  v240 = __p;
  if (__p)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = (std::__shared_weak_count_vtbl *)__p;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v241 = v146;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v236, "C_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v145 + 24))(v145, &v240, 1, v236);
  if (v237 < 0)
    operator delete(v236[0]);
  v148 = v241;
  if (v241)
  {
    v149 = (unint64_t *)&v241->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = __p;
  __p = 0;
  if (v151)
    (*(void (**)(void *))(*(_QWORD *)v151 + 8))(v151);
  if (v239 < 0)
    operator delete(v238[0]);
  v152 = v277;
  std::string::basic_string[abi:ne180100]<0>(v232, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v232, 0, (uint64_t *)&__p);
  v234 = __p;
  if (__p)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = (std::__shared_weak_count_vtbl *)__p;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v235 = v153;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v230, "S");
  (*(void (**)(void *, void **, uint64_t, uint64_t, void **))(*(_QWORD *)v152 + 32))(v152, &v234, 2, -1, v230);
  if (v231 < 0)
    operator delete(v230[0]);
  v155 = v235;
  if (v235)
  {
    v156 = (unint64_t *)&v235->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = __p;
  __p = 0;
  if (v158)
    (*(void (**)(void *))(*(_QWORD *)v158 + 8))(v158);
  if (v233 < 0)
    operator delete(v232[0]);
  v159 = v277;
  std::string::basic_string[abi:ne180100]<0>(v226, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v226, 0, (uint64_t *)&__p);
  v228 = __p;
  if (__p)
  {
    v160 = (std::__shared_weak_count *)operator new();
    v161 = (std::__shared_weak_count_vtbl *)__p;
    v160->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v160->__shared_owners_ = 0;
    v160->__shared_weak_owners_ = 0;
    v160[1].__vftable = v161;
  }
  else
  {
    v160 = 0;
  }
  v229 = v160;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v224, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v159 + 24))(v159, &v228, 0, v224);
  if (v225 < 0)
    operator delete(v224[0]);
  v162 = v229;
  if (v229)
  {
    v163 = (unint64_t *)&v229->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = __p;
  __p = 0;
  if (v165)
    (*(void (**)(void *))(*(_QWORD *)v165 + 8))(v165);
  if (v227 < 0)
    operator delete(v226[0]);
  v166 = v277;
  std::string::basic_string[abi:ne180100]<0>(v220, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v220, 0, (uint64_t *)&__p);
  v222 = __p;
  if (__p)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = (std::__shared_weak_count_vtbl *)__p;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v223 = v167;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v218, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v166 + 24))(v166, &v222, 0, v218);
  if (v219 < 0)
    operator delete(v218[0]);
  v169 = v223;
  if (v223)
  {
    v170 = (unint64_t *)&v223->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = __p;
  __p = 0;
  if (v172)
    (*(void (**)(void *))(*(_QWORD *)v172 + 8))(v172);
  if (v221 < 0)
    operator delete(v220[0]);
  v173 = v277;
  std::string::basic_string[abi:ne180100]<0>(v214, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v214, 0, (uint64_t *)&__p);
  v216 = __p;
  if (__p)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v175 = (std::__shared_weak_count_vtbl *)__p;
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v175;
  }
  else
  {
    v174 = 0;
  }
  v217 = v174;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v212, "D");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v173 + 24))(v173, &v216, 0, v212);
  if (v213 < 0)
    operator delete(v212[0]);
  v176 = v217;
  if (v217)
  {
    v177 = (unint64_t *)&v217->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = __p;
  __p = 0;
  if (v179)
    (*(void (**)(void *))(*(_QWORD *)v179 + 8))(v179);
  if (v215 < 0)
    operator delete(v214[0]);
  v180 = *a4;
  v210 = v277;
  if (v277)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = (std::__shared_weak_count_vtbl *)v277;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = v182;
  }
  else
  {
    v181 = 0;
  }
  v211 = v181;
  v277 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v180 + 56))(v180, &v210);
  v183 = v211;
  if (v211)
  {
    v184 = (unint64_t *)&v211->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = v277;
  v277 = 0;
  if (v186)
    (*(void (**)(void *))(*(_QWORD *)v186 + 8))(v186);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v291);
  v187 = v291;
  std::string::basic_string[abi:ne180100]<0>(v206, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v206, 0, &v266);
  v208 = v266;
  if (v266)
  {
    v188 = (std::__shared_weak_count *)operator new();
    v189 = v266;
    v188->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v188->__shared_owners_ = 0;
    v188->__shared_weak_owners_ = 0;
    v188[1].__vftable = (std::__shared_weak_count_vtbl *)v189;
  }
  else
  {
    v188 = 0;
  }
  v209 = v188;
  v266 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v277, "custom");
  std::string::basic_string[abi:ne180100]<0>(v280, "same");
  std::string::basic_string[abi:ne180100]<0>(v281, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v277, 3);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **, uint64_t))v187->~__shared_weak_count + 3))(v187, &v208, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v281[i + 2]) < 0)
      operator delete(v281[i]);
  }
  v191 = v209;
  if (v209)
  {
    v192 = (unint64_t *)&v209->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = v266;
  v266 = 0;
  if (v194)
    (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  if (v207 < 0)
    operator delete(v206[0]);
  v195 = *a4;
  v204 = v291;
  if (v291)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = v291;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v205 = v196;
  v291 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v195 + 56))(v195, &v204);
  v198 = v205;
  if (v205)
  {
    v199 = (unint64_t *)&v205->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = v291;
  v291 = 0;
  if (v201)
    (*((void (**)(std::__shared_weak_count_vtbl *))v201->~__shared_weak_count + 1))(v201);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v268, 0);
  result = (uint64_t)v276;
  if (v276)
  {
    v203 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v276);
    return MEMORY[0x1E0C023A0](v203, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E078A368(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x318], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::AvgPool::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseAvgPool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E078AB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::L2Pool::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_1EA99FAC8;
  v7[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateL2Pool;
  v8 = v7;
  MIL::Operators::Common::ios15::BasePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E078AC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::MaxPool::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BasePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E078AD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[29],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[29],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E078AE24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[29],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[29],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E078AEBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[29],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E078AF08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateRandomBernoulli(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *LocationPtr;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p[2];
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;

  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v20, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  if (v19 < 0)
    operator delete(__p[0]);
  v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v10 = LocationPtr[1];
  v16 = *LocationPtr;
  v17 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)&v20, v8, &v16, a2);
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v19 < 0)
    operator delete(__p[0]);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_1E078B06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateRandomCategorical(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *LocationPtr;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p[2];
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v20, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  if (v19 < 0)
    operator delete(__p[0]);
  v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v10 = LocationPtr[1];
  v16 = *LocationPtr;
  v17 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)&v20, v8, &v16, a2);
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v19 < 0)
    operator delete(__p[0]);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_1E078B210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateRandomNormal(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *LocationPtr;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p[2];
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;

  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v20, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  if (v19 < 0)
    operator delete(__p[0]);
  v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v10 = LocationPtr[1];
  v16 = *LocationPtr;
  v17 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)&v20, v8, &v16, a2);
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v19 < 0)
    operator delete(__p[0]);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_1E078B3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateRandomUniform(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *LocationPtr;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p[2];
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;

  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v20, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  if (v19 < 0)
    operator delete(__p[0]);
  v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v10 = LocationPtr[1];
  v16 = *LocationPtr;
  v17 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)&v20, v8, &v16, a2);
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v19 < 0)
    operator delete(__p[0]);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_1E078B558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRandomBernoulli(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  uint64_t v16[2];

  v7 = (std::__shared_weak_count *)a2[1];
  v16[0] = *a2;
  v16[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "random_bernoulli");
  std::string::basic_string[abi:ne180100]<0>(__p, "prob");
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E078B698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::`anonymous namespace'::ValueTypeInferenceRandomOpHelper(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v12;
  int v13;
  MIL::IRValueType *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  MIL::IRValue *SingleValue;
  void (***v24)(MIL::MILContextImpl *__hidden);
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *exception;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string v36[2];
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  int v44;
  MIL::IRDimension **v45;
  MIL::IRDimension **v46;
  uint64_t v47;

  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, a5);
  v12 = MIL::IRValueType::AsTensorType(SingleValueType);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  v14 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v15 = MIL::IRValueType::AsTensorType(v14);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v45, *(const void **)v16, *(_QWORD *)(v16 + 8), (uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 3);
  if (v43 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v40, "shape");
  v17 = a2[1];
  v38 = *a2;
  v39 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)&v45, a4, &v38, (MIL::ValidationResult *)__p);
  v20 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v41 < 0)
    operator delete(v40[0]);
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v36, (uint64_t)__p);
    v36[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v37 = v44;
    MIL::ValidationError::ValidationError(exception, v36);
  }
  std::string::basic_string[abi:ne180100]<0>(v40, "shape");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)v40);
  if (v41 < 0)
    operator delete(v40[0]);
  v24 = *a1;
  v25 = a2[1];
  v34 = *a2;
  v35 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  MIL::ValueTypeInferenceUtils::GetRandomOpOutShape(SingleValue, a1, &v45, &v34, v40);
  v28 = MIL::IRTensorValueType::MakeWithShape(v24, v13, (uint64_t)v40);
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v29 = (uint64_t *)operator new(8uLL);
  *a6 = v29;
  *v29++ = v28;
  a6[1] = v29;
  a6[2] = v29;
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  v30 = v35;
  if (v35)
  {
    v31 = (unint64_t *)&v35->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
}

void sub_1E078B990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  void *v33;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a11);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a26);
  v33 = *(void **)(v31 - 88);
  if (v33)
  {
    *(_QWORD *)(v31 - 80) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRandomCategorical(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  MIL::IRValue *SingleValue;
  const void *v19;
  MIL::MILContext *v20;
  void (***v21)(MIL::MILContextImpl *__hidden);
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *exception;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::string v37[2];
  int v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  void *v41;
  char v42;
  void *v43[2];
  char v44;
  void *__p[2];
  char v46;
  int v47;
  _QWORD v48[3];
  __int128 v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v46 < 0)
    operator delete(__p[0]);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v51 = 0;
  v52 = 0;
  v50 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v50, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3);
  if ((unint64_t)(v51 - v50) <= 0xF)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v31 = a2[1];
    *(_QWORD *)&v49 = *a2;
    *((_QWORD *)&v49 + 1) = v31;
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    std::string::basic_string[abi:ne180100]<0>(v48, "Parameter x must have a minimum rank of 2. The last dimension represents vector of probabilities and remaining dimensions represent specific distributions.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v49, (uint64_t)v48, 315);
  }
  std::string::basic_string[abi:ne180100]<0>(v43, "random_categorical");
  std::string::basic_string[abi:ne180100]<0>(&v41, "x");
  v12 = (std::__shared_weak_count *)a2[1];
  v39 = *a2;
  v40 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)&v50, (uint64_t)v43, &v39, (MIL::ValidationResult *)__p);
  v15 = v40;
  if (v40)
  {
    v16 = (unint64_t *)&v40->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v42 < 0)
    operator delete(v41);
  if (v44 < 0)
    operator delete(v43[0]);
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    v34 = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v37, (uint64_t)__p);
    v37[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v38 = v47;
    MIL::ValidationError::ValidationError(v34, v37);
  }
  std::string::basic_string[abi:ne180100]<0>(v43, "size");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v43);
  v19 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  v20 = (MIL::MILContext *)MIL::IRValue::GetScalar<int>(v19);
  if (v44 < 0)
    operator delete(v43[0]);
  v21 = *a1;
  v22 = (std::__shared_weak_count *)a2[1];
  v35 = *a2;
  v36 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  MIL::ValueTypeInferenceUtils::GetRandomCategoricalOutShape(v20, a1, &v35, (uint64_t *)&v50, v43);
  v25 = MIL::IRTensorValueType::MakeWithShape(v21, v10, (uint64_t)v43);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v26 = (uint64_t *)operator new(8uLL);
  *a4 = v26;
  *v26++ = v25;
  a4[1] = v26;
  a4[2] = v26;
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
}

void sub_1E078BDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v39;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a11);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a32);
  v39 = *(void **)(v37 - 88);
  if (v39)
  {
    *(_QWORD *)(v37 - 80) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRandomNormal(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  uint64_t v16[2];

  v7 = (std::__shared_weak_count *)a2[1];
  v16[0] = *a2;
  v16[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "random_normal");
  std::string::basic_string[abi:ne180100]<0>(__p, "mean");
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E078BFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRandomUniform(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  uint64_t v16[2];

  v7 = (std::__shared_weak_count *)a2[1];
  v16[0] = *a2;
  v16[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "random_uniform");
  std::string::basic_string[abi:ne180100]<0>(__p, "low");
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E078C108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::RandomBernoulli::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  void **v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char **v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void **v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  std::__shared_weak_count_vtbl *v77;
  void **v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count_vtbl *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  void **v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void **v91;
  void **v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  void **v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void **v105;
  uint64_t result;
  uint64_t v107;
  void **v108;
  std::__shared_weak_count *v109;
  void *v110[2];
  char v111;
  void *v112[2];
  char v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  void **v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  __int128 v129;
  void *__p[2];
  uint64_t v131;
  __n128 v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char **v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  _QWORD *v140;
  _QWORD v141[3];
  _QWORD *v142;
  _BYTE v143[24];
  _BYTE *v144;
  _QWORD v145[3];
  _QWORD *v146;
  void *v147;
  void *v148;
  _QWORD *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count_vtbl *v151;
  void (__cdecl **v152)(std::__shared_weak_count *__hidden);
  _QWORD v153[2];
  void **Scalar;
  void **v155;
  void **v156;
  char *v157;
  char **v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v140 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = (void **)operator new(8uLL);
  Scalar = v8;
  *v8 = (void *)v7;
  v155 = v8 + 1;
  v156 = v8 + 1;
  v147 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v147, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v150);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "shape", (uint64_t *)&v150);
  v9 = v150;
  v150 = 0;
  if (v9)
    (*((void (**)(std::__shared_weak_count_vtbl *))v9->~__shared_weak_count + 1))(v9);
  v10 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v11 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (Scalar)
  {
    v155 = Scalar;
    operator delete(Scalar);
  }
  v13 = v140;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v155 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v138);
  MIL::IRParameter::Make(&v138, (uint64_t *)&v150);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v13, "prob", (uint64_t *)&v150);
  v15 = v150;
  v150 = 0;
  if (v15)
    (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 1))(v15);
  v16 = (std::__shared_weak_count *)v138.n128_u64[1];
  if (v138.n128_u64[1])
  {
    v17 = (unint64_t *)(v138.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  v19 = v140;
  v150 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v150, 1, &v137);
  MIL::IRParameter::Make(&v137, (uint64_t *)&Scalar);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "seed", (uint64_t *)&Scalar);
  v21 = Scalar;
  Scalar = 0;
  if (v21)
    (*((void (**)(void **))*v21 + 1))(v21);
  v22 = (std::__shared_weak_count *)v137.n128_u64[1];
  if (v137.n128_u64[1])
  {
    v23 = (unint64_t *)(v137.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v136 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v136, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v136, 1uLL);
  v26 = v136;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v150 = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v151 = (std::__shared_weak_count_vtbl *)&v28->~__shared_weak_count_0;
  v152 = &v28->~__shared_weak_count_0;
  v153[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v150);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v147 = v30;
  *v30 = v29;
  v148 = v30 + 1;
  v149 = v30 + 1;
  v153[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v147);
  MIL::IRParameter::MakeTypeSet((uint64_t)v153, 2, &v132);
  MIL::IRParameter::Make(&v132, &v133);
  v31 = v133;
  v134 = v133;
  if (v133)
  {
    v32 = (_QWORD *)operator new();
    v33 = v133;
    *v32 = &unk_1EA99F888;
    v32[1] = 0;
    v32[2] = 0;
    v32[3] = v33;
  }
  else
  {
    v32 = 0;
  }
  v135 = v32;
  v133 = 0;
  v34 = v26[2];
  v35 = v26[1];
  if (v35 >= v34)
  {
    v37 = (v35 - *v26) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v39 = v34 - *v26;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    v158 = v26 + 2;
    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v40);
    v43 = (uint64_t *)&v41[16 * v37];
    *v43 = v31;
    v43[1] = (uint64_t)v32;
    v134 = 0;
    v135 = 0;
    v45 = *v26;
    v44 = v26[1];
    if (v44 == *v26)
    {
      v48 = (void **)v26[1];
      v46 = &v41[16 * v37];
    }
    else
    {
      v46 = &v41[16 * v37];
      do
      {
        v47 = *((_OWORD *)v44 - 1);
        v44 -= 16;
        *((_OWORD *)v46 - 1) = v47;
        v46 -= 16;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
      }
      while (v44 != v45);
      v48 = (void **)*v26;
      v44 = v26[1];
    }
    v36 = (char *)(v43 + 2);
    *v26 = v46;
    Scalar = v48;
    v155 = v48;
    v26[1] = (char *)(v43 + 2);
    v156 = (void **)v44;
    v49 = v26[2];
    v26[2] = &v41[16 * v42];
    v157 = v49;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = v32;
    v36 = v35 + 16;
    v134 = 0;
    v135 = 0;
  }
  v26[1] = v36;
  v50 = v133;
  v133 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v132.n128_u64[1];
  if (v132.n128_u64[1])
  {
    v52 = (unint64_t *)(v132.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v131 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v54 = (uint64_t)v140;
  *(_QWORD *)&v129 = v140;
  if (v140)
  {
    v55 = (_QWORD *)operator new();
    *v55 = &unk_1EA99F8E8;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v54;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v129 + 1) = v55;
  v140 = 0;
  *(_QWORD *)&v128 = v136;
  if (v136)
  {
    v56 = (_QWORD *)operator new();
    v57 = v136;
    *v56 = &unk_1EA99F948;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v128 + 1) = v56;
  v136 = 0;
  v145[0] = &unk_1EA99FAC8;
  v145[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateRandomBernoulli;
  v146 = v145;
  v144 = 0;
  MIL::IROperator::Make((__int128 *)__p, &v129, &v128, (uint64_t)v145, (uint64_t)v143, a3);
  v58 = v144;
  if (v144 == v143)
  {
    v59 = 4;
    v58 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_63;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_63:
  v60 = v146;
  if (v146 == v145)
  {
    v61 = 4;
    v60 = v145;
    goto LABEL_67;
  }
  if (v146)
  {
    v61 = 5;
LABEL_67:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v131) < 0)
    operator delete(__p[0]);
  v68 = *a3;
  v141[0] = &off_1EA99FBD8;
  v141[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRandomBernoulli;
  v142 = v141;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v68 + 200))(v68, v141);
  v69 = v142;
  if (v142 == v141)
  {
    v70 = 4;
    v69 = v141;
  }
  else
  {
    if (!v142)
      goto LABEL_85;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_85:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v71 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v124, "prob");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v124, 0, (uint64_t *)&v150);
  v126 = v150;
  if (v150)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = v150;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v127 = v72;
  v150 = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v71 + 3))(v71, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v74 = v127;
  if (v127)
  {
    p_shared_owners = (unint64_t *)&v127->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v150;
  v150 = 0;
  if (v77)
    (*((void (**)(std::__shared_weak_count_vtbl *))v77->~__shared_weak_count + 1))(v77);
  if (v125 < 0)
    operator delete(v124[0]);
  v78 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v150);
  v120 = v150;
  if (v150)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = v150;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v121 = v79;
  v150 = 0;
  std::string::basic_string[abi:ne180100]<0>(v118, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v78 + 3))(v78, &v120, v118);
  if (v119 < 0)
    operator delete(v118[0]);
  v81 = v121;
  if (v121)
  {
    v82 = (unint64_t *)&v121->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v150;
  v150 = 0;
  if (v84)
    (*((void (**)(std::__shared_weak_count_vtbl *))v84->~__shared_weak_count + 1))(v84);
  v85 = *a3;
  v116 = Scalar;
  if (Scalar)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = Scalar;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = (std::__shared_weak_count_vtbl *)v87;
  }
  else
  {
    v86 = 0;
  }
  v117 = v86;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v85 + 56))(v85, &v116);
  v88 = v117;
  if (v117)
  {
    v89 = (unint64_t *)&v117->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = Scalar;
  Scalar = 0;
  if (v91)
    (*((void (**)(void **))*v91 + 1))(v91);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v92 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v112, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v112, 0, (uint64_t *)&v150);
  v114 = v150;
  if (v150)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = v150;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v115 = v93;
  v150 = 0;
  std::string::basic_string[abi:ne180100]<0>(v110, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v92 + 3))(v92, &v114, 0, v110);
  if (v111 < 0)
    operator delete(v110[0]);
  v95 = v115;
  if (v115)
  {
    v96 = (unint64_t *)&v115->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v150;
  v150 = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  if (v113 < 0)
    operator delete(v112[0]);
  v99 = *a3;
  v108 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v109 = v100;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v99 + 56))(v99, &v108);
  v102 = v109;
  if (v109)
  {
    v103 = (unint64_t *)&v109->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*((void (**)(void **))*v105 + 1))(v105);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v136, 0);
  result = (uint64_t)v140;
  if (v140)
  {
    v107 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v140);
    return MEMORY[0x1E0C023A0](v107, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E078CD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;

  v57 = *(_QWORD *)(v55 - 112);
  *(_QWORD *)(v55 - 112) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *v54;
  *v54 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::RandomCategorical::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char **v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t result;
  uint64_t v101;
  void *v102;
  std::__shared_weak_count *v103;
  void *v104[2];
  char v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  void *v108[2];
  char v109;
  void *v110[2];
  char v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  __int128 v114;
  __int128 v115;
  void *v116[2];
  uint64_t v117;
  __n128 v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char **v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  _QWORD *v127;
  void *__p;
  void *v129;
  char *v130;
  char *v131;
  char **v132;
  _QWORD v133[3];
  _QWORD *v134;
  _BYTE v135[24];
  _BYTE *v136;
  _QWORD v137[3];
  _QWORD *v138;
  void *v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD v142[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v144;
  void (__cdecl **v145)(std::__shared_weak_count *__hidden);
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v127 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v129 = v8 + 1;
  v130 = (char *)(v8 + 1);
  v139 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v144 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v145 = &v10->~__shared_weak_count_0;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 2, &v126);
  MIL::IRParameter::Make(&v126, &v120);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v120);
  v11 = v120;
  v120 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v126.n128_u64[1];
  if (v126.n128_u64[1])
  {
    v13 = (unint64_t *)(v126.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (Scalar)
  {
    v144 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v129 = __p;
    operator delete(__p);
  }
  v15 = v127;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v125);
  MIL::IRParameter::Make(&v125, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v15, "mode", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v125.n128_u64[1];
  if (v125.n128_u64[1])
  {
    v19 = (unint64_t *)(v125.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v21 = v127;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v124);
  MIL::IRParameter::Make(&v124, (uint64_t *)&__p);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v21, "size", (uint64_t *)&__p);
  v23 = __p;
  __p = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v124.n128_u64[1];
  if (v124.n128_u64[1])
  {
    v25 = (unint64_t *)(v124.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 32))(*((_QWORD *)v22 + 5), 1);
  v27 = v127;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v123);
  MIL::IRParameter::Make(&v123, (uint64_t *)&__p);
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v27, "seed", (uint64_t *)&__p);
  v29 = __p;
  __p = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)v123.n128_u64[1];
  if (v123.n128_u64[1])
  {
    v31 = (unint64_t *)(v123.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v122 = 0;
  v33 = operator new();
  *(_QWORD *)v33 = 0;
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v122, (void **)v33);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v122, 1uLL);
  v34 = v122;
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v36;
  v36->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v35;
  v144 = (std::__shared_weak_count_vtbl *)&v36->~__shared_weak_count_0;
  v145 = &v36->~__shared_weak_count_0;
  v142[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v139 = v38;
  *v38 = v37;
  v140 = (uint64_t)(v38 + 1);
  v141 = v38 + 1;
  v142[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v139);
  MIL::IRParameter::MakeTypeSet((uint64_t)v142, 2, &v118);
  MIL::IRParameter::Make(&v118, &v119);
  v39 = v119;
  v120 = v119;
  if (v119)
  {
    v40 = (_QWORD *)operator new();
    v41 = v119;
    *v40 = &unk_1EA99F888;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  v121 = v40;
  v119 = 0;
  v42 = v34[2];
  v43 = v34[1];
  if (v43 >= v42)
  {
    v45 = (v43 - *v34) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v47 = v42 - *v34;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v132 = v34 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v34 + 2), v48);
    v51 = (uint64_t *)&v49[16 * v45];
    *v51 = v39;
    v51[1] = (uint64_t)v40;
    v120 = 0;
    v121 = 0;
    v53 = *v34;
    v52 = v34[1];
    if (v52 == *v34)
    {
      v56 = v34[1];
      v54 = &v49[16 * v45];
    }
    else
    {
      v54 = &v49[16 * v45];
      do
      {
        v55 = *((_OWORD *)v52 - 1);
        v52 -= 16;
        *((_OWORD *)v54 - 1) = v55;
        v54 -= 16;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
      }
      while (v52 != v53);
      v56 = *v34;
      v52 = v34[1];
    }
    v44 = (char *)(v51 + 2);
    *v34 = v54;
    __p = v56;
    v129 = v56;
    v34[1] = (char *)(v51 + 2);
    v130 = v52;
    v57 = v34[2];
    v34[2] = &v49[16 * v50];
    v131 = v57;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v40;
    v44 = v43 + 16;
    v120 = 0;
    v121 = 0;
  }
  v34[1] = v44;
  v58 = v119;
  v119 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v118.n128_u64[1];
  if (v118.n128_u64[1])
  {
    v60 = (unint64_t *)(v118.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v139)
  {
    v140 = (uint64_t)v139;
    operator delete(v139);
  }
  if (Scalar)
  {
    v144 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v116 = *(_OWORD *)a2;
  v117 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v62 = (uint64_t)v127;
  *(_QWORD *)&v115 = v127;
  if (v127)
  {
    v63 = (_QWORD *)operator new();
    *v63 = &unk_1EA99F8E8;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v115 + 1) = v63;
  v127 = 0;
  *(_QWORD *)&v114 = v122;
  if (v122)
  {
    v64 = (_QWORD *)operator new();
    v65 = v122;
    *v64 = &unk_1EA99F948;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v114 + 1) = v64;
  v122 = 0;
  v137[0] = &unk_1EA99FAC8;
  v137[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateRandomCategorical;
  v138 = v137;
  v136 = 0;
  MIL::IROperator::Make((__int128 *)v116, &v115, &v114, (uint64_t)v137, (uint64_t)v135, a3);
  v66 = v136;
  if (v136 == v135)
  {
    v67 = 4;
    v66 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_72;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_72:
  v68 = v138;
  if (v138 == v137)
  {
    v69 = 4;
    v68 = v137;
    goto LABEL_76;
  }
  if (v138)
  {
    v69 = 5;
LABEL_76:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
  if (*((_QWORD *)&v115 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v117) < 0)
    operator delete(v116[0]);
  v76 = *a3;
  v133[0] = &off_1EA99FBD8;
  v133[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRandomCategorical;
  v134 = v133;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 200))(v76, v133);
  v77 = v134;
  if (v134 == v133)
  {
    v78 = 4;
    v77 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_94;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_94:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v110, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v110, 0, (uint64_t *)&Scalar);
  v112 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v113 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v108, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v79 + 24))(v79, &v112, v108);
  if (v109 < 0)
    operator delete(v108[0]);
  v82 = v113;
  if (v113)
  {
    p_shared_owners = (unint64_t *)&v113->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  if (v111 < 0)
    operator delete(v110[0]);
  v86 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v106 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v107 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v104, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v86 + 24))(v86, &v106, v104);
  if (v105 < 0)
    operator delete(v104[0]);
  v89 = v107;
  if (v107)
  {
    v90 = (unint64_t *)&v107->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  v93 = *a3;
  v102 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v103 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v102);
  v96 = v103;
  if (v103)
  {
    v97 = (unint64_t *)&v103->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v122, 0);
  result = (uint64_t)v127;
  if (v127)
  {
    v101 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v127);
    return MEMORY[0x1E0C023A0](v101, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E078DC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,__int16 a50,char a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62)
{
  uint64_t *v62;
  void *v64;
  uint64_t v65;

  v64 = a61;
  a61 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = *v62;
  *v62 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::RandomNormal::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void **v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  void **v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  char **v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void **v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  void **v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void **v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void **v104;
  void **v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void **v118;
  uint64_t result;
  uint64_t v120;
  void **v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125[2];
  char v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  void **v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  void *v137[2];
  char v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  void *v141[2];
  char v142;
  void *v143[2];
  char v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  __int128 v147;
  __int128 v148;
  void *__p[2];
  uint64_t v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char **v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  _QWORD *v160;
  _QWORD v161[3];
  _QWORD *v162;
  _BYTE v163[24];
  _BYTE *v164;
  _QWORD v165[3];
  _QWORD *v166;
  void *v167;
  void *v168;
  _QWORD *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count_vtbl *v171;
  void (__cdecl **v172)(std::__shared_weak_count *__hidden);
  _QWORD v173[2];
  void **Scalar;
  void **v175;
  void **v176;
  char *v177;
  char **v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v160 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = (void **)operator new(8uLL);
  Scalar = v8;
  *v8 = (void *)v7;
  v175 = v8 + 1;
  v176 = v8 + 1;
  v167 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 1, &v159);
  MIL::IRParameter::Make(&v159, (uint64_t *)&v170);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "shape", (uint64_t *)&v170);
  v9 = v170;
  v170 = 0;
  if (v9)
    (*((void (**)(std::__shared_weak_count_vtbl *))v9->~__shared_weak_count + 1))(v9);
  v10 = (std::__shared_weak_count *)v159.n128_u64[1];
  if (v159.n128_u64[1])
  {
    v11 = (unint64_t *)(v159.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (Scalar)
  {
    v175 = Scalar;
    operator delete(Scalar);
  }
  v13 = v160;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v175 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v170);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v13, "mean", (uint64_t *)&v170);
  v15 = v170;
  v170 = 0;
  if (v15)
    (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 1))(v15);
  v16 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v17 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  v19 = v160;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v175 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&v170);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v19, "stddev", (uint64_t *)&v170);
  v21 = v170;
  v170 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v23 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v160;
  v170 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v156);
  MIL::IRParameter::Make(&v156, (uint64_t *)&Scalar);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v25, "seed", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(void **))*v27 + 1))(v27);
  v28 = (std::__shared_weak_count *)v156.n128_u64[1];
  if (v156.n128_u64[1])
  {
    v29 = (unint64_t *)(v156.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v155 = 0;
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, (void **)v31);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v155, 1uLL);
  v32 = v155;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v170 = v34;
  v34->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v171 = (std::__shared_weak_count_vtbl *)&v34->~__shared_weak_count_0;
  v172 = &v34->~__shared_weak_count_0;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v170);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v167 = v36;
  *v36 = v35;
  v168 = v36 + 1;
  v169 = v36 + 1;
  v173[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v167);
  MIL::IRParameter::MakeTypeSet((uint64_t)v173, 2, &v151);
  MIL::IRParameter::Make(&v151, &v152);
  v37 = v152;
  v153 = v152;
  if (v152)
  {
    v38 = (_QWORD *)operator new();
    v39 = v152;
    *v38 = &unk_1EA99F888;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v154 = v38;
  v152 = 0;
  v40 = v32[2];
  v41 = v32[1];
  if (v41 >= v40)
  {
    v43 = (v41 - *v32) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v45 = v40 - *v32;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v178 = v32 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v32 + 2), v46);
    v49 = (uint64_t *)&v47[16 * v43];
    *v49 = v37;
    v49[1] = (uint64_t)v38;
    v153 = 0;
    v154 = 0;
    v51 = *v32;
    v50 = v32[1];
    if (v50 == *v32)
    {
      v54 = (void **)v32[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 16;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
      while (v50 != v51);
      v54 = (void **)*v32;
      v50 = v32[1];
    }
    v42 = (char *)(v49 + 2);
    *v32 = v52;
    Scalar = v54;
    v175 = v54;
    v32[1] = (char *)(v49 + 2);
    v176 = (void **)v50;
    v55 = v32[2];
    v32[2] = &v47[16 * v48];
    v177 = v55;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v41 = v37;
    *((_QWORD *)v41 + 1) = v38;
    v42 = v41 + 16;
    v153 = 0;
    v154 = 0;
  }
  v32[1] = v42;
  v56 = v152;
  v152 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v151.n128_u64[1];
  if (v151.n128_u64[1])
  {
    v58 = (unint64_t *)(v151.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v170)
  {
    v171 = v170;
    operator delete(v170);
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v150 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = (uint64_t)v160;
  *(_QWORD *)&v148 = v160;
  if (v160)
  {
    v61 = (_QWORD *)operator new();
    *v61 = &unk_1EA99F8E8;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v60;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v148 + 1) = v61;
  v160 = 0;
  *(_QWORD *)&v147 = v155;
  if (v155)
  {
    v62 = (_QWORD *)operator new();
    v63 = v155;
    *v62 = &unk_1EA99F948;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v147 + 1) = v62;
  v155 = 0;
  v165[0] = &unk_1EA99FAC8;
  v165[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateRandomNormal;
  v166 = v165;
  v164 = 0;
  MIL::IROperator::Make((__int128 *)__p, &v148, &v147, (uint64_t)v165, (uint64_t)v163, a3);
  v64 = v164;
  if (v164 == v163)
  {
    v65 = 4;
    v64 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_70;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_70:
  v66 = v166;
  if (v166 == v165)
  {
    v67 = 4;
    v66 = v165;
    goto LABEL_74;
  }
  if (v166)
  {
    v67 = 5;
LABEL_74:
    (*(void (**)(void))(*v66 + 8 * v67))();
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
  if (*((_QWORD *)&v148 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SHIBYTE(v150) < 0)
    operator delete(__p[0]);
  v74 = *a3;
  v161[0] = &off_1EA99FBD8;
  v161[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRandomNormal;
  v162 = v161;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v74 + 200))(v74, v161);
  v75 = v162;
  if (v162 == v161)
  {
    v76 = 4;
    v75 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v77 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v143, "mean");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v143, 0, (uint64_t *)&v170);
  v145 = v170;
  if (v170)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v79 = v170;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v79;
  }
  else
  {
    v78 = 0;
  }
  v146 = v78;
  v170 = 0;
  std::string::basic_string[abi:ne180100]<0>(v141, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v77 + 3))(v77, &v145, v141);
  if (v142 < 0)
    operator delete(v141[0]);
  v80 = v146;
  if (v146)
  {
    p_shared_owners = (unint64_t *)&v146->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v170;
  v170 = 0;
  if (v83)
    (*((void (**)(std::__shared_weak_count_vtbl *))v83->~__shared_weak_count + 1))(v83);
  if (v144 < 0)
    operator delete(v143[0]);
  v84 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v137, "stddev");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v137, 0, (uint64_t *)&v170);
  v139 = v170;
  if (v170)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = v170;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v140 = v85;
  v170 = 0;
  std::string::basic_string[abi:ne180100]<0>(v135, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v84 + 3))(v84, &v139, v135);
  if (v136 < 0)
    operator delete(v135[0]);
  v87 = v140;
  if (v140)
  {
    v88 = (unint64_t *)&v140->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v170;
  v170 = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  if (v138 < 0)
    operator delete(v137[0]);
  v91 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v170);
  v133 = v170;
  if (v170)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = v170;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v134 = v92;
  v170 = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v91 + 3))(v91, &v133, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v94 = v134;
  if (v134)
  {
    v95 = (unint64_t *)&v134->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v170;
  v170 = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  v98 = *a3;
  v129 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v130 = v99;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v98 + 56))(v98, &v129);
  v101 = v130;
  if (v130)
  {
    v102 = (unint64_t *)&v130->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(void **))*v104 + 1))(v104);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v105 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v125, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v125, 0, (uint64_t *)&v170);
  v127 = v170;
  if (v170)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v170;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v128 = v106;
  v170 = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v105 + 3))(v105, &v127, 0, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v108 = v128;
  if (v128)
  {
    v109 = (unint64_t *)&v128->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v170;
  v170 = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  if (v126 < 0)
    operator delete(v125[0]);
  v112 = *a3;
  v121 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v122 = v113;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v112 + 56))(v112, &v121);
  v115 = v122;
  if (v122)
  {
    v116 = (unint64_t *)&v122->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(void **))*v118 + 1))(v118);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, 0);
  result = (uint64_t)v160;
  if (v160)
  {
    v120 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v160);
    return MEMORY[0x1E0C023A0](v120, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E078ED48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;

  v67 = *(_QWORD *)(v65 - 112);
  *(_QWORD *)(v65 - 112) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *v64;
  *v64 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::RandomUniform::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void **v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  void **v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  char **v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void **v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  void **v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void **v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void **v104;
  void **v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void **v118;
  uint64_t result;
  uint64_t v120;
  void **v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125[2];
  char v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  void **v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  void *v137[2];
  char v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  void *v141[2];
  char v142;
  void *v143[2];
  char v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  __int128 v147;
  __int128 v148;
  void *__p[2];
  uint64_t v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char **v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  _QWORD *v160;
  _QWORD v161[3];
  _QWORD *v162;
  _BYTE v163[24];
  _BYTE *v164;
  _QWORD v165[3];
  _QWORD *v166;
  void *v167;
  void *v168;
  _QWORD *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count_vtbl *v171;
  void (__cdecl **v172)(std::__shared_weak_count *__hidden);
  _QWORD v173[2];
  void **Scalar;
  void **v175;
  void **v176;
  char *v177;
  char **v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v160 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = (void **)operator new(8uLL);
  Scalar = v8;
  *v8 = (void *)v7;
  v175 = v8 + 1;
  v176 = v8 + 1;
  v167 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 1, &v159);
  MIL::IRParameter::Make(&v159, (uint64_t *)&v170);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "shape", (uint64_t *)&v170);
  v9 = v170;
  v170 = 0;
  if (v9)
    (*((void (**)(std::__shared_weak_count_vtbl *))v9->~__shared_weak_count + 1))(v9);
  v10 = (std::__shared_weak_count *)v159.n128_u64[1];
  if (v159.n128_u64[1])
  {
    v11 = (unint64_t *)(v159.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (Scalar)
  {
    v175 = Scalar;
    operator delete(Scalar);
  }
  v13 = v160;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v175 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v170);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v13, "low", (uint64_t *)&v170);
  v15 = v170;
  v170 = 0;
  if (v15)
    (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 1))(v15);
  v16 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v17 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  v19 = v160;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v175 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&v170);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "high", (uint64_t *)&v170);
  v21 = v170;
  v170 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v23 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v160;
  v170 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v156);
  MIL::IRParameter::Make(&v156, (uint64_t *)&Scalar);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v25, "seed", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(void **))*v27 + 1))(v27);
  v28 = (std::__shared_weak_count *)v156.n128_u64[1];
  if (v156.n128_u64[1])
  {
    v29 = (unint64_t *)(v156.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v155 = 0;
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, (void **)v31);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v155, 1uLL);
  v32 = v155;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v170 = v34;
  v34->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v171 = (std::__shared_weak_count_vtbl *)&v34->~__shared_weak_count_0;
  v172 = &v34->~__shared_weak_count_0;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v170);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v167 = v36;
  *v36 = v35;
  v168 = v36 + 1;
  v169 = v36 + 1;
  v173[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v167);
  MIL::IRParameter::MakeTypeSet((uint64_t)v173, 2, &v151);
  MIL::IRParameter::Make(&v151, &v152);
  v37 = v152;
  v153 = v152;
  if (v152)
  {
    v38 = (_QWORD *)operator new();
    v39 = v152;
    *v38 = &unk_1EA99F888;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v154 = v38;
  v152 = 0;
  v40 = v32[2];
  v41 = v32[1];
  if (v41 >= v40)
  {
    v43 = (v41 - *v32) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v45 = v40 - *v32;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v178 = v32 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v32 + 2), v46);
    v49 = (uint64_t *)&v47[16 * v43];
    *v49 = v37;
    v49[1] = (uint64_t)v38;
    v153 = 0;
    v154 = 0;
    v51 = *v32;
    v50 = v32[1];
    if (v50 == *v32)
    {
      v54 = (void **)v32[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 16;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
      while (v50 != v51);
      v54 = (void **)*v32;
      v50 = v32[1];
    }
    v42 = (char *)(v49 + 2);
    *v32 = v52;
    Scalar = v54;
    v175 = v54;
    v32[1] = (char *)(v49 + 2);
    v176 = (void **)v50;
    v55 = v32[2];
    v32[2] = &v47[16 * v48];
    v177 = v55;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v41 = v37;
    *((_QWORD *)v41 + 1) = v38;
    v42 = v41 + 16;
    v153 = 0;
    v154 = 0;
  }
  v32[1] = v42;
  v56 = v152;
  v152 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v151.n128_u64[1];
  if (v151.n128_u64[1])
  {
    v58 = (unint64_t *)(v151.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v170)
  {
    v171 = v170;
    operator delete(v170);
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v150 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = (uint64_t)v160;
  *(_QWORD *)&v148 = v160;
  if (v160)
  {
    v61 = (_QWORD *)operator new();
    *v61 = &unk_1EA99F8E8;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v60;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v148 + 1) = v61;
  v160 = 0;
  *(_QWORD *)&v147 = v155;
  if (v155)
  {
    v62 = (_QWORD *)operator new();
    v63 = v155;
    *v62 = &unk_1EA99F948;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v147 + 1) = v62;
  v155 = 0;
  v165[0] = &unk_1EA99FAC8;
  v165[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateRandomUniform;
  v166 = v165;
  v164 = 0;
  MIL::IROperator::Make((__int128 *)__p, &v148, &v147, (uint64_t)v165, (uint64_t)v163, a3);
  v64 = v164;
  if (v164 == v163)
  {
    v65 = 4;
    v64 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_70;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_70:
  v66 = v166;
  if (v166 == v165)
  {
    v67 = 4;
    v66 = v165;
    goto LABEL_74;
  }
  if (v166)
  {
    v67 = 5;
LABEL_74:
    (*(void (**)(void))(*v66 + 8 * v67))();
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
  if (*((_QWORD *)&v148 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SHIBYTE(v150) < 0)
    operator delete(__p[0]);
  v74 = *a3;
  v161[0] = &off_1EA99FBD8;
  v161[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRandomUniform;
  v162 = v161;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v74 + 200))(v74, v161);
  v75 = v162;
  if (v162 == v161)
  {
    v76 = 4;
    v75 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v77 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v143, "low");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v143, 0, (uint64_t *)&v170);
  v145 = v170;
  if (v170)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v79 = v170;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v79;
  }
  else
  {
    v78 = 0;
  }
  v146 = v78;
  v170 = 0;
  std::string::basic_string[abi:ne180100]<0>(v141, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v77 + 3))(v77, &v145, v141);
  if (v142 < 0)
    operator delete(v141[0]);
  v80 = v146;
  if (v146)
  {
    p_shared_owners = (unint64_t *)&v146->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v170;
  v170 = 0;
  if (v83)
    (*((void (**)(std::__shared_weak_count_vtbl *))v83->~__shared_weak_count + 1))(v83);
  if (v144 < 0)
    operator delete(v143[0]);
  v84 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v137, "high");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v137, 0, (uint64_t *)&v170);
  v139 = v170;
  if (v170)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = v170;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v140 = v85;
  v170 = 0;
  std::string::basic_string[abi:ne180100]<0>(v135, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v84 + 3))(v84, &v139, v135);
  if (v136 < 0)
    operator delete(v135[0]);
  v87 = v140;
  if (v140)
  {
    v88 = (unint64_t *)&v140->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v170;
  v170 = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  if (v138 < 0)
    operator delete(v137[0]);
  v91 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v170);
  v133 = v170;
  if (v170)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = v170;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v134 = v92;
  v170 = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v91 + 3))(v91, &v133, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v94 = v134;
  if (v134)
  {
    v95 = (unint64_t *)&v134->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v170;
  v170 = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  v98 = *a3;
  v129 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v130 = v99;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v98 + 56))(v98, &v129);
  v101 = v130;
  if (v130)
  {
    v102 = (unint64_t *)&v130->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(void **))*v104 + 1))(v104);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v105 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v125, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v125, 0, (uint64_t *)&v170);
  v127 = v170;
  if (v170)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v170;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v128 = v106;
  v170 = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v105 + 3))(v105, &v127, 0, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v108 = v128;
  if (v128)
  {
    v109 = (unint64_t *)&v128->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v170;
  v170 = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  if (v126 < 0)
    operator delete(v125[0]);
  v112 = *a3;
  v121 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v122 = v113;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v112 + 56))(v112, &v121);
  v115 = v122;
  if (v122)
  {
    v116 = (unint64_t *)&v122->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(void **))*v118 + 1))(v118);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, 0);
  result = (uint64_t)v160;
  if (v160)
  {
    v120 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v160);
    return MEMORY[0x1E0C023A0](v120, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E078FF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;

  v67 = *(_QWORD *)(v65 - 112);
  *(_QWORD *)(v65 - 112) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *v64;
  *v64 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateGru(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  MIL::IRValueType *v7;
  uint64_t v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  MIL::IRValueType *v11;
  uint64_t v12;
  MIL::IRValueType *v13;
  MIL::IRValueType *v14;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21[2];
  char v22;
  uint64_t v23[2];
  void *__p[2];
  char v25;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "initial_h");
  v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = MIL::IRValueType::AsTensorType(v7);
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_ih");
  v9 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v10 = MIL::IRValueType::AsTensorType(v9);
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_hh");
  v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v12 = MIL::IRValueType::AsTensorType(v11);
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  v13 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  v14 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v25 < 0)
    operator delete(__p[0]);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v16 = (std::__shared_weak_count *)LocationPtr[1];
  v23[0] = *LocationPtr;
  v23[1] = (uint64_t)v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "GRU");
  if (v22 < 0)
    operator delete(v21[0]);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1E079056C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::`anonymous namespace'::ValidateGruRnnHelper(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, MIL::IRValueType *a6@<X5>, MIL::IRValueType *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  MIL::IRDimension ***v17;
  MIL::IRDimension ***v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  int v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  int v74;
  const std::string::value_type *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  char v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  std::string::size_type v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  __int128 v99;
  int v100;
  const std::string::value_type *v101;
  std::string::size_type v102;
  std::string *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  char v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  std::string::size_type v121;
  std::string *v122;
  __int128 v123;
  std::string *v124;
  __int128 v125;
  int v126;
  const std::string::value_type *v127;
  std::string::size_type v128;
  std::string *v129;
  __int128 v130;
  void *v133[2];
  std::string::size_type v134;
  _QWORD v135[2];
  uint64_t v136[2];
  std::string v137;
  void *v138[2];
  std::string::size_type v139;
  _QWORD v140[2];
  uint64_t v141[2];
  std::string v142;
  std::string v143;
  std::string v144;
  void *__p[2];
  std::string::size_type v146;
  _QWORD v147[2];
  void *v148;
  char v149;
  _QWORD v150[2];
  std::string v151;
  void *v152[2];
  std::string::size_type v153;
  _QWORD v154[2];
  uint64_t v155;
  std::__shared_weak_count *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  std::string v159;
  std::string v160;
  int v161;
  void *v162;
  char v163;
  uint64_t v164;
  std::__shared_weak_count *v165;

  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v17 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 96))(a4);
  v18 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 96))(a5);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2)
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3)
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 104))(a4)
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 104))(a5) & 1) == 0)
  {
    v58 = (std::__shared_weak_count *)a1[1];
    v164 = *a1;
    v165 = v58;
    if (v58)
    {
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(p_shared_owners);
      while (__stxr(v60 + 1, p_shared_owners));
    }
    std::operator+<char>();
    MIL::ValidationResult::ValidationResult(a9, &v164, 315, &v162);
    if (v163 < 0)
      operator delete(v162);
    v61 = v165;
    if (v165)
    {
      v62 = (unint64_t *)&v165->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v159, "weight_ih");
  v19 = (std::__shared_weak_count *)a1[1];
  v157 = *a1;
  v158 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)v17, a8, &v157, (MIL::ValidationResult *)&v160);
  v22 = v158;
  if (v158)
  {
    v23 = (unint64_t *)&v158->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(std::string *))(v160.__r_.__value_.__r.__words[0] + 16))(&v160) & 1) == 0)
  {
    MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v160);
LABEL_75:
    *(_QWORD *)a9 = &off_1EA99F170;
    *(_DWORD *)(a9 + 48) = v161;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v160);
    return;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v160);
  std::string::basic_string[abi:ne180100]<0>(&v159, "weight_hh");
  v25 = (std::__shared_weak_count *)a1[1];
  v155 = *a1;
  v156 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)v18, a8, &v155, (MIL::ValidationResult *)&v160);
  v28 = v156;
  if (v156)
  {
    v29 = (unint64_t *)&v156->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(std::string *))(v160.__r_.__value_.__r.__words[0] + 16))(&v160) & 1) == 0)
  {
    MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v160);
    goto LABEL_75;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v160);
  v31 = MIL::IRDimension::AsConstant((*v17)[1]);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 48))(v31);
  v33 = MIL::IRDimension::AsConstant((*v18)[1]);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33);
  v35 = MIL::IRDimension::AsConstant(**v18);
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v16 + 16) + 16))(*(_QWORD *)(*(_QWORD *)v16 + 16)))
  {
    v37 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*(_QWORD *)v16 + 16));
    if (v32 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 48))(v37))
    {
      v67 = a1[1];
      v154[0] = *a1;
      v154[1] = v67;
      if (v67)
      {
        v68 = (unint64_t *)(v67 + 8);
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      std::to_string(&v151, v32);
      v70 = std::string::insert(&v151, 0, "Input size from weight_ih: ");
      v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      v159.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      v72 = std::string::append(&v159, " does not match with input shape for op: ");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v160.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = *(char *)(a8 + 23);
      if (v74 >= 0)
        v75 = (const std::string::value_type *)a8;
      else
        v75 = *(const std::string::value_type **)a8;
      if (v74 >= 0)
        v76 = *(unsigned __int8 *)(a8 + 23);
      else
        v76 = *(_QWORD *)(a8 + 8);
      v77 = std::string::append(&v160, v75, v76);
      v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v153 = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)v152 = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a9, v154, 315, v152);
      if (SHIBYTE(v153) < 0)
        operator delete(v152[0]);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v160.__r_.__value_.__l.__data_);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      v57 = v154;
      goto LABEL_100;
    }
  }
  v38 = MIL::IRDimension::AsConstant(**v17);
  if (v36 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38))
  {
    v64 = a1[1];
    v150[0] = *a1;
    v150[1] = v64;
    if (v64)
    {
      v65 = (unint64_t *)(v64 + 8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    std::operator+<char>();
    MIL::ValidationResult::ValidationResult(a9, v150, 315, &v148);
    if (v149 < 0)
      operator delete(v148);
    v57 = v150;
    goto LABEL_100;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a8, "GRU")
    && 3 * v34 != v36)
  {
    v39 = a1[1];
    v147[0] = *a1;
    v147[1] = v39;
    if (v39)
    {
      v40 = (unint64_t *)(v39 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    std::to_string(&v143, v34);
    v42 = std::string::insert(&v143, 0, "Hidden dimension must be of shape 3*HiddenSize. Provided hiddenSize: ");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append(&v144, "hiddenDim: ");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v142, v36);
    if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v142;
    else
      v46 = (std::string *)v142.__r_.__value_.__r.__words[0];
    if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v142.__r_.__value_.__r.__words[2]);
    else
      size = v142.__r_.__value_.__l.__size_;
    v48 = std::string::append(&v151, (const std::string::value_type *)v46, size);
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v159.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = std::string::append(&v159, "for op: ");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v160.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = *(char *)(a8 + 23);
    if (v52 >= 0)
      v53 = (const std::string::value_type *)a8;
    else
      v53 = *(const std::string::value_type **)a8;
    if (v52 >= 0)
      v54 = *(unsigned __int8 *)(a8 + 23);
    else
      v54 = *(_QWORD *)(a8 + 8);
    v55 = std::string::append(&v160, v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v146 = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a9, v147, 315, __p);
    if (SHIBYTE(v146) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v160.__r_.__value_.__l.__data_);
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v159.__r_.__value_.__l.__data_);
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v142.__r_.__value_.__l.__data_);
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v151.__r_.__value_.__l.__data_);
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    v57 = v147;
LABEL_100:
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v57);
    return;
  }
  if (!a6)
    goto LABEL_145;
  v79 = MIL::IRValueType::AsTensorType(a6);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 96))(v79);
  memset(&v159, 0, sizeof(v159));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v159, *(const void **)v80, *(_QWORD *)(v80 + 8), (uint64_t)(*(_QWORD *)(v80 + 8) - *(_QWORD *)v80) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v151, "bias");
  v81 = a1[1];
  v141[0] = *a1;
  v141[1] = v81;
  if (v81)
  {
    v82 = (unint64_t *)(v81 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)&v159, a8, v141, (MIL::ValidationResult *)&v160);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v141);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(std::string *))(v160.__r_.__value_.__r.__words[0] + 16))(&v160) & 1) != 0)
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v160);
    v84 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)v159.__r_.__value_.__l.__data_);
    v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 48))(v84);
    if (v85 == v36)
    {
      v86 = 1;
      goto LABEL_142;
    }
    v87 = a1[1];
    v140[0] = *a1;
    v140[1] = v87;
    if (v87)
    {
      v88 = (unint64_t *)(v87 + 8);
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }
    std::to_string(&v142, v85);
    v90 = std::string::insert(&v142, 0, "Incorrect bias shape (");
    v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    v92 = std::string::append(&v143, ") but expecting: ");
    v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v137, v36);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = &v137;
    else
      v94 = (std::string *)v137.__r_.__value_.__r.__words[0];
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v95 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      v95 = v137.__r_.__value_.__l.__size_;
    v96 = std::string::append(&v144, (const std::string::value_type *)v94, v95);
    v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    v98 = std::string::append(&v151, " for op: ");
    v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    v160.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    v100 = *(char *)(a8 + 23);
    if (v100 >= 0)
      v101 = (const std::string::value_type *)a8;
    else
      v101 = *(const std::string::value_type **)a8;
    if (v100 >= 0)
      v102 = *(unsigned __int8 *)(a8 + 23);
    else
      v102 = *(_QWORD *)(a8 + 8);
    v103 = std::string::append(&v160, v101, v102);
    v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
    v139 = v103->__r_.__value_.__r.__words[2];
    *(_OWORD *)v138 = v104;
    v103->__r_.__value_.__l.__size_ = 0;
    v103->__r_.__value_.__r.__words[2] = 0;
    v103->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a9, v140, 315, v138);
    if (SHIBYTE(v139) < 0)
      operator delete(v138[0]);
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v160.__r_.__value_.__l.__data_);
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v151.__r_.__value_.__l.__data_);
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v137.__r_.__value_.__l.__data_);
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v142.__r_.__value_.__l.__data_);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v140);
  }
  else
  {
    MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v160);
    *(_QWORD *)a9 = &off_1EA99F170;
    *(_DWORD *)(a9 + 48) = v161;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v160);
  }
  v86 = 0;
LABEL_142:
  if (v159.__r_.__value_.__r.__words[0])
  {
    v159.__r_.__value_.__l.__size_ = v159.__r_.__value_.__r.__words[0];
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  if ((v86 & 1) == 0)
    return;
LABEL_145:
  if (!a7)
  {
LABEL_189:
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a9);
    return;
  }
  v105 = MIL::IRValueType::AsTensorType(a7);
  v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 96))(v105);
  memset(&v159, 0, sizeof(v159));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v159, *(const void **)v106, *(_QWORD *)(v106 + 8), (uint64_t)(*(_QWORD *)(v106 + 8) - *(_QWORD *)v106) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v151, "input_bias");
  v107 = a1[1];
  v136[0] = *a1;
  v136[1] = v107;
  if (v107)
  {
    v108 = (unint64_t *)(v107 + 8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)&v159, a8, v136, (MIL::ValidationResult *)&v160);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v136);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(std::string *))(v160.__r_.__value_.__r.__words[0] + 16))(&v160) & 1) != 0)
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v160);
    v110 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)v159.__r_.__value_.__l.__data_);
    v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 48))(v110);
    if (v111 == v36)
    {
      v112 = 1;
      goto LABEL_186;
    }
    v113 = a1[1];
    v135[0] = *a1;
    v135[1] = v113;
    if (v113)
    {
      v114 = (unint64_t *)(v113 + 8);
      do
        v115 = __ldxr(v114);
      while (__stxr(v115 + 1, v114));
    }
    std::to_string(&v142, v111);
    v116 = std::string::insert(&v142, 0, "Incorrect input_bias shape (");
    v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v117;
    v116->__r_.__value_.__l.__size_ = 0;
    v116->__r_.__value_.__r.__words[2] = 0;
    v116->__r_.__value_.__r.__words[0] = 0;
    v118 = std::string::append(&v143, ") but expecting: ");
    v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v119;
    v118->__r_.__value_.__l.__size_ = 0;
    v118->__r_.__value_.__r.__words[2] = 0;
    v118->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v137, v36);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v120 = &v137;
    else
      v120 = (std::string *)v137.__r_.__value_.__r.__words[0];
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v121 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      v121 = v137.__r_.__value_.__l.__size_;
    v122 = std::string::append(&v144, (const std::string::value_type *)v120, v121);
    v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v123;
    v122->__r_.__value_.__l.__size_ = 0;
    v122->__r_.__value_.__r.__words[2] = 0;
    v122->__r_.__value_.__r.__words[0] = 0;
    v124 = std::string::append(&v151, " for op: ");
    v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
    v160.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v125;
    v124->__r_.__value_.__l.__size_ = 0;
    v124->__r_.__value_.__r.__words[2] = 0;
    v124->__r_.__value_.__r.__words[0] = 0;
    v126 = *(char *)(a8 + 23);
    if (v126 >= 0)
      v127 = (const std::string::value_type *)a8;
    else
      v127 = *(const std::string::value_type **)a8;
    if (v126 >= 0)
      v128 = *(unsigned __int8 *)(a8 + 23);
    else
      v128 = *(_QWORD *)(a8 + 8);
    v129 = std::string::append(&v160, v127, v128);
    v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
    v134 = v129->__r_.__value_.__r.__words[2];
    *(_OWORD *)v133 = v130;
    v129->__r_.__value_.__l.__size_ = 0;
    v129->__r_.__value_.__r.__words[2] = 0;
    v129->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a9, v135, 315, v133);
    if (SHIBYTE(v134) < 0)
      operator delete(v133[0]);
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v160.__r_.__value_.__l.__data_);
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v151.__r_.__value_.__l.__data_);
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v137.__r_.__value_.__l.__data_);
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v142.__r_.__value_.__l.__data_);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v135);
  }
  else
  {
    MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v160);
    *(_QWORD *)a9 = &off_1EA99F170;
    *(_DWORD *)(a9 + 48) = v161;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v160);
  }
  v112 = 0;
LABEL_186:
  if (v159.__r_.__value_.__r.__words[0])
  {
    v159.__r_.__value_.__l.__size_ = v159.__r_.__value_.__r.__words[0];
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  if ((v112 & 1) != 0)
    goto LABEL_189;
}

void sub_1E07912A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  uint64_t v69;
  void *v71;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v69 - 169) < 0)
    operator delete(*(void **)(v69 - 192));
  if (a69 < 0)
    operator delete(a64);
  if (a26 < 0)
    operator delete(a21);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  v71 = *(void **)(v69 - 224);
  if (v71)
  {
    *(_QWORD *)(v69 - 216) = v71;
    operator delete(v71);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateLstm(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  MIL::IRValueType *v7;
  uint64_t v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  MIL::IRValueType *v11;
  uint64_t v12;
  MIL::IRValueType *v13;
  const void *ParameterValue;
  MIL::IRValueType *v15;
  MIL::IRValueType *v16;
  MIL::IRValueType *v17;
  MIL::IRValueType *v18;
  uint64_t *LocationPtr;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  MIL::IRValueType *v26;
  uint64_t v27;
  std::string v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  char v32;
  std::string v33;

  std::string::basic_string[abi:ne180100]<0>(&v33, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v33, "initial_h");
  v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v33, "weight_ih");
  v9 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v10 = MIL::IRValueType::AsTensorType(v9);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v33, "weight_hh");
  v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v12 = MIL::IRValueType::AsTensorType(v11);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v33, "weight_ih_back");
  v26 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)&v33, 0);
  v27 = v12;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v33, "weight_hh_back");
  v13 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)&v33, 0);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "direction");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  MIL::IRValue::GetScalar<std::string>(ParameterValue, &v33);
  if (v32 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  v15 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v32 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "bias_back");
  v16 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v32 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "peephole");
  v17 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v32 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "peephole_back");
  v18 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v32 < 0)
    operator delete(__p[0]);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v20 = LocationPtr[1];
  v29 = *LocationPtr;
  v30 = (std::__shared_weak_count *)v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v28, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    v28 = v33;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v23 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_1E079198C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (*(char *)(v29 - 81) < 0)
    operator delete(*(void **)(v29 - 104));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::`anonymous namespace'::ValidateLSTMHelper(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, MIL::IRValueType *a6@<X5>, MIL::IRValueType *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, MIL::IRValueType *a10, MIL::IRValueType *a11, MIL::IRValueType *a12, MIL::IRValueType *a13)
{
  uint64_t *v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  std::string::size_type size;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89[2];
  char v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  std::string::size_type v94;
  _QWORD v95[2];
  void *v96[2];
  std::string::size_type v97;
  _QWORD v98[2];
  std::string v99;
  std::string v100;
  __int128 v101;
  std::string::size_type v102;
  _QWORD v103[2];
  std::string v104;
  std::string v105;
  std::vector<unsigned int> __p;
  std::vector<unsigned int> v107;
  std::string v108;
  int v109;
  std::vector<unsigned int> v110;
  std::vector<unsigned int> v111;
  uint64_t *v112[2];
  void *v113[2];
  char v114;
  uint64_t v115;
  std::__shared_weak_count *v116;

  v22 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3) & 1) != 0)
  {
    v112[0] = a1;
    v112[1] = v22;
    memset(&v111, 0, sizeof(v111));
    memset(&v110, 0, sizeof(v110));
    std::string::basic_string[abi:ne180100]<0>(&v107, "weight_ih");
    std::string::basic_string[abi:ne180100]<0>(&__p, "weight_hh");
    if (SHIBYTE(__p.__end_cap_.__value_) < 0)
      operator delete(__p.__begin_);
    if (SHIBYTE(v107.__end_cap_.__value_) < 0)
      operator delete(v107.__begin_);
    if (((*(uint64_t (**)(std::string *))(v108.__r_.__value_.__r.__words[0] + 16))(&v108) & 1) == 0)
    {
      MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v108);
LABEL_147:
      *(_QWORD *)a9 = &off_1EA99F170;
      *(_DWORD *)(a9 + 48) = v109;
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v108);
      goto LABEL_148;
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v108);
    v23 = v111.__begin_[1];
    v25 = *v110.__begin_;
    v24 = v110.__begin_[1];
    v26 = *((char *)a8 + 23);
    if (v26 < 0)
    {
      if (a8[1] != 13)
        goto LABEL_125;
      a8 = (uint64_t *)*a8;
    }
    else if (v26 != 13)
    {
      goto LABEL_125;
    }
    if (*a8 != 0x7463657269646962 || *(uint64_t *)((char *)a8 + 5) != 0x6C616E6F69746365)
    {
LABEL_125:
      __p.__begin_ = (std::vector<unsigned int>::pointer)a1;
      if (a10)
      {
        v85 = MIL::IRValueType::AsTensorType(a10);
        std::string::basic_string[abi:ne180100]<0>(&v107, "bias");
        if (SHIBYTE(v107.__end_cap_.__value_) < 0)
          operator delete(v107.__begin_);
        if (((*(uint64_t (**)(std::string *))(v108.__r_.__value_.__r.__words[0] + 16))(&v108) & 1) == 0)
          goto LABEL_146;
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v108);
      }
      if (a11)
      {
        v86 = MIL::IRValueType::AsTensorType(a11);
        std::string::basic_string[abi:ne180100]<0>(&v107, "bias_back");
        if (SHIBYTE(v107.__end_cap_.__value_) < 0)
          operator delete(v107.__begin_);
        if (((*(uint64_t (**)(std::string *))(v108.__r_.__value_.__r.__words[0] + 16))(&v108) & 1) == 0)
          goto LABEL_146;
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v108);
      }
      if (!a12)
      {
LABEL_140:
        if (!a13)
        {
LABEL_145:
          MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a9);
LABEL_148:
          if (v110.__begin_)
          {
            v110.__end_ = v110.__begin_;
            operator delete(v110.__begin_);
          }
          if (v111.__begin_)
          {
            v111.__end_ = v111.__begin_;
            operator delete(v111.__begin_);
          }
          return;
        }
        v88 = MIL::IRValueType::AsTensorType(a13);
        std::string::basic_string[abi:ne180100]<0>(&v107, "peephole_back");
        if (SHIBYTE(v107.__end_cap_.__value_) < 0)
          operator delete(v107.__begin_);
        if (((*(uint64_t (**)(std::string *))(v108.__r_.__value_.__r.__words[0] + 16))(&v108) & 1) != 0)
        {
          MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v108);
          goto LABEL_145;
        }
        goto LABEL_146;
      }
      v87 = MIL::IRValueType::AsTensorType(a12);
      std::string::basic_string[abi:ne180100]<0>(&v107, "peephole");
      if (SHIBYTE(v107.__end_cap_.__value_) < 0)
        operator delete(v107.__begin_);
      if (((*(uint64_t (**)(std::string *))(v108.__r_.__value_.__r.__words[0] + 16))(&v108) & 1) != 0)
      {
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v108);
        goto LABEL_140;
      }
LABEL_146:
      MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v108);
      goto LABEL_147;
    }
    memset(&v107, 0, sizeof(v107));
    memset(&__p, 0, sizeof(__p));
    if (a6 && a7)
    {
      v34 = MIL::IRValueType::AsTensorType(a6);
      v35 = MIL::IRValueType::AsTensorType(a7);
      std::string::basic_string[abi:ne180100]<0>(&v105, "weight_ih_back");
      std::string::basic_string[abi:ne180100]<0>(&v104, "weight_hh_back");
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      if (((*(uint64_t (**)(std::string *))(v108.__r_.__value_.__r.__words[0] + 16))(&v108) & 1) != 0)
      {
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v108);
        v36 = v107.__begin_[1];
        if (v36 == v23)
        {
          v37 = __p.__begin_[1];
          if (v37 == v24)
          {
            v38 = *v107.__begin_;
            if (*v107.__begin_ == v25)
            {
              LOBYTE(v39) = 1;
              goto LABEL_120;
            }
            v72 = a1[1];
            v95[0] = *a1;
            v95[1] = v72;
            if (v72)
            {
              v73 = (unint64_t *)(v72 + 8);
              do
                v74 = __ldxr(v73);
              while (__stxr(v74 + 1, v73));
            }
            std::to_string(&v100, v25);
            v75 = std::string::insert(&v100, 0, "Hidden dimensions for forward and reverse weight differs. forward hidden dim: ");
            v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
            v104.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v76;
            v75->__r_.__value_.__l.__size_ = 0;
            v75->__r_.__value_.__r.__words[2] = 0;
            v75->__r_.__value_.__r.__words[0] = 0;
            v77 = std::string::append(&v104, " reverse hidden dim: ");
            v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
            v105.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v78;
            v77->__r_.__value_.__l.__size_ = 0;
            v77->__r_.__value_.__r.__words[2] = 0;
            v77->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v99, v38);
            if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v79 = &v99;
            else
              v79 = (std::string *)v99.__r_.__value_.__r.__words[0];
            if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v99.__r_.__value_.__r.__words[2]);
            else
              size = v99.__r_.__value_.__l.__size_;
            v81 = std::string::append(&v105, (const std::string::value_type *)v79, size);
            v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
            v108.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v82;
            v81->__r_.__value_.__l.__size_ = 0;
            v81->__r_.__value_.__r.__words[2] = 0;
            v81->__r_.__value_.__r.__words[0] = 0;
            v83 = std::string::append(&v108, " for LSTM op.");
            v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
            v94 = v83->__r_.__value_.__r.__words[2];
            *(_OWORD *)v93 = v84;
            v83->__r_.__value_.__l.__size_ = 0;
            v83->__r_.__value_.__r.__words[2] = 0;
            v83->__r_.__value_.__r.__words[0] = 0;
            MIL::ValidationResult::ValidationResult(a9, v95, 315, v93);
            if (SHIBYTE(v94) < 0)
              operator delete(v93[0]);
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v108.__r_.__value_.__l.__data_);
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v99.__r_.__value_.__l.__data_);
            if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v105.__r_.__value_.__l.__data_);
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v104.__r_.__value_.__l.__data_);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v100.__r_.__value_.__l.__data_);
            v58 = v95;
          }
          else
          {
            v59 = a1[1];
            v98[0] = *a1;
            v98[1] = v59;
            if (v59)
            {
              v60 = (unint64_t *)(v59 + 8);
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            std::to_string(&v100, v24);
            v62 = std::string::insert(&v100, 0, "Hidden size for forward and reverse weight differs. forward hidden size: ");
            v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
            v104.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v63;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            v62->__r_.__value_.__r.__words[0] = 0;
            v64 = std::string::append(&v104, " reverse hidden size: ");
            v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
            v105.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v65;
            v64->__r_.__value_.__l.__size_ = 0;
            v64->__r_.__value_.__r.__words[2] = 0;
            v64->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v99, v37);
            if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v66 = &v99;
            else
              v66 = (std::string *)v99.__r_.__value_.__r.__words[0];
            if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v67 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
            else
              v67 = v99.__r_.__value_.__l.__size_;
            v68 = std::string::append(&v105, (const std::string::value_type *)v66, v67);
            v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
            v108.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v69;
            v68->__r_.__value_.__l.__size_ = 0;
            v68->__r_.__value_.__r.__words[2] = 0;
            v68->__r_.__value_.__r.__words[0] = 0;
            v70 = std::string::append(&v108, " for LSTM op.");
            v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            v97 = v70->__r_.__value_.__r.__words[2];
            *(_OWORD *)v96 = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            MIL::ValidationResult::ValidationResult(a9, v98, 315, v96);
            if (SHIBYTE(v97) < 0)
              operator delete(v96[0]);
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v108.__r_.__value_.__l.__data_);
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v99.__r_.__value_.__l.__data_);
            if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v105.__r_.__value_.__l.__data_);
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v104.__r_.__value_.__l.__data_);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v100.__r_.__value_.__l.__data_);
            v58 = v98;
          }
        }
        else
        {
          v45 = a1[1];
          v103[0] = *a1;
          v103[1] = v45;
          if (v45)
          {
            v46 = (unint64_t *)(v45 + 8);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          std::to_string(&v100, v23);
          v48 = std::string::insert(&v100, 0, "Input size for forward and reverse weight differs. forward input size: ");
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v104.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          v50 = std::string::append(&v104, " reverse input size: ");
          v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v105.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v99, v36);
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = &v99;
          else
            v52 = (std::string *)v99.__r_.__value_.__r.__words[0];
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
          else
            v53 = v99.__r_.__value_.__l.__size_;
          v54 = std::string::append(&v105, (const std::string::value_type *)v52, v53);
          v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
          v108.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v55;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          v56 = std::string::append(&v108, " for LSTM op.");
          v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          v102 = v56->__r_.__value_.__r.__words[2];
          v101 = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          MIL::ValidationResult::ValidationResult(a9, v103, 315, &v101);
          if (SHIBYTE(v102) < 0)
            operator delete((void *)v101);
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v108.__r_.__value_.__l.__data_);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v104.__r_.__value_.__l.__data_);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          v58 = v103;
        }
        std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v58);
      }
      else
      {
        MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v108);
        *(_QWORD *)a9 = &off_1EA99F170;
        *(_DWORD *)(a9 + 48) = v109;
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v108);
      }
    }
    else
    {
      v40 = a1[1];
      v91 = *a1;
      v92 = (std::__shared_weak_count *)v40;
      if (v40)
      {
        v41 = (unint64_t *)(v40 + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      std::string::basic_string[abi:ne180100]<0>(v89, "Parameter weight_ih_back and weight_hh_back must be provided when direction is bidirectional for LSTM op.");
      MIL::ValidationResult::ValidationResult(a9, &v91, 316, v89);
      if (v90 < 0)
        operator delete(v89[0]);
      v39 = v92;
      if (!v92)
      {
LABEL_120:
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        if (v107.__begin_)
        {
          v107.__end_ = v107.__begin_;
          operator delete(v107.__begin_);
        }
        if ((v39 & 1) == 0)
          goto LABEL_148;
        goto LABEL_125;
      }
      p_shared_owners = (unint64_t *)&v92->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    LOBYTE(v39) = 0;
    goto LABEL_120;
  }
  v27 = a1[1];
  v115 = *a1;
  v116 = (std::__shared_weak_count *)v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  std::string::basic_string[abi:ne180100]<0>(v113, "Variadic input / initial_h / initial_c not supported for LSTM op.");
  MIL::ValidationResult::ValidationResult(a9, &v115, 315, v113);
  if (v114 < 0)
    operator delete(v113[0]);
  v30 = v116;
  if (v116)
  {
    v31 = (unint64_t *)&v116->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1E07924B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  uint64_t a66;
  uint64_t v66;
  void *v68;
  void *v69;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v66 - 233) < 0)
    operator delete(*(void **)(v66 - 256));
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  if (a53 < 0)
    operator delete(a48);
  if (a41 < 0)
    operator delete(a36);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  v68 = *(void **)(v66 - 200);
  if (v68)
  {
    *(_QWORD *)(v66 - 192) = v68;
    operator delete(v68);
  }
  v69 = *(void **)(v66 - 176);
  if (v69)
  {
    *(_QWORD *)(v66 - 168) = v69;
    operator delete(v69);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateRnn(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  MIL::IRValueType *v7;
  uint64_t v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  MIL::IRValueType *v11;
  uint64_t v12;
  MIL::IRValueType *v13;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20[2];
  char v21;
  uint64_t v22[2];
  void *__p[2];
  char v24;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "initial_h");
  v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = MIL::IRValueType::AsTensorType(v7);
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_ih");
  v9 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v10 = MIL::IRValueType::AsTensorType(v9);
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_hh");
  v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v12 = MIL::IRValueType::AsTensorType(v11);
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  v13 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v24 < 0)
    operator delete(__p[0]);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v15 = (std::__shared_weak_count *)LocationPtr[1];
  v22[0] = *LocationPtr;
  v22[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "RNN");
  if (v21 < 0)
    operator delete(v20[0]);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1E07929E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGru(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14[2];

  v7 = (std::__shared_weak_count *)a2[1];
  v14[0] = *a2;
  v14[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU");
  if (v13 < 0)
    operator delete(__p[0]);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0792AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::`anonymous namespace'::ValueTypeInferenceGruRnnHelper(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int8 *v10;
  MIL::IRValueType *ValueType;
  uint64_t v12;
  unsigned __int8 *v13;
  MIL::IRValueType *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  MIL::IRValueType *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  MIL::IRValueType *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  MIL::IRValueType *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  const void *SingleValue;
  char v32;
  void *v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void *exception;
  void *v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  void *__p[2];
  uint64_t v49;
  int v50;
  std::string v51[2];
  int v52;
  std::string v53;
  uint64_t v54[2];
  void *v55[2];
  char v56;
  int v57;

  std::string::basic_string[abi:ne180100]<0>(v55, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v55);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v10
                                                                      + 5));
  v12 = MIL::IRValueType::AsTensorType(ValueType);
  if (v56 < 0)
    operator delete(v55[0]);
  std::string::basic_string[abi:ne180100]<0>(v55, "initial_h");
  v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v55);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v14 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v13 + 5));
  v15 = MIL::IRValueType::AsTensorType(v14);
  if (v56 < 0)
    operator delete(v55[0]);
  std::string::basic_string[abi:ne180100]<0>(v55, "weight_ih");
  v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v55);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v17 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v16 + 5));
  v18 = MIL::IRValueType::AsTensorType(v17);
  if (v56 < 0)
    operator delete(v55[0]);
  std::string::basic_string[abi:ne180100]<0>(v55, "weight_hh");
  v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v55);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v20 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v19 + 5));
  v21 = MIL::IRValueType::AsTensorType(v20);
  if (v56 < 0)
    operator delete(v55[0]);
  std::string::basic_string[abi:ne180100]<0>(v55, "bias");
  v22 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v55);
  v23 = (MIL::IRValueType *)v22;
  if (v56 < 0)
  {
    operator delete(v55[0]);
    if (!v23)
      goto LABEL_20;
  }
  else if (!v22)
  {
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(v55, "bias");
  v24 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v55);
  if (!v24)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v23 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v24 + 5));
  if (v56 < 0)
    operator delete(v55[0]);
LABEL_20:
  v25 = *a2;
  v26 = (std::__shared_weak_count *)a2[1];
  v54[0] = v25;
  v54[1] = (uint64_t)v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v53 = *(std::string *)a4;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v55))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v51, (uint64_t)v55);
    v51[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v52 = v57;
    MIL::ValidationError::ValidationError(exception, v51);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output_sequence");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  v32 = MIL::IRValue::GetScalar<BOOL>(SingleValue);
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
  v33 = __p[1];
  v34 = v49;
  v35 = __p[0];
  v36 = operator new(0x18uLL);
  v46 = v36 + 3;
  v47 = v36 + 3;
  *v36 = v34;
  v36[1] = v35;
  v36[2] = v33;
  v45 = v36;
  v37 = operator new(0x10uLL);
  v43 = v37 + 2;
  v44 = v37 + 2;
  *v37 = v35;
  v37[1] = v33;
  v42 = v37;
  LODWORD(v33) = v50;
  v38 = MIL::IRTensorValueType::MakeWithShape(*a1, v50, (uint64_t)&v45);
  v39 = MIL::IRTensorValueType::MakeWithShape(*a1, (int)v33, (uint64_t)&v42);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v40 = operator new(0x10uLL);
  a5[1] = v40 + 2;
  a5[2] = v40 + 2;
  *v40 = v38;
  v40[1] = v39;
  *a5 = v40;
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v55);
}

void sub_1E0792F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a23);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v35 - 144));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRnn(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14[2];

  v7 = (std::__shared_weak_count *)a2[1];
  v14[0] = *a2;
  v14[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RNN");
  if (v13 < 0)
    operator delete(__p[0]);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0793114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceLstm(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  MIL::IRValueType *ValueType;
  uint64_t v10;
  unsigned __int8 *v11;
  MIL::IRValueType *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  MIL::IRValueType *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  MIL::IRValueType *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  const void *SingleValue;
  unsigned __int8 *v28;
  uint64_t *v29;
  unsigned __int8 *v30;
  MIL::IRValueType *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  MIL::IRValueType *v36;
  unsigned __int8 *v37;
  MIL::IRValueType *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  MIL::IRValueType *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  const void *v49;
  char v50;
  std::string *v51;
  std::string::size_type v52;
  uint64_t v53;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  void *exception;
  uint64_t v69;
  uint64_t v70;
  MIL::IRValueType *v71;
  MIL::IRValueType *v72;
  void *v73;
  void *v74;
  _QWORD *v75;
  void *v76;
  void *v77;
  _QWORD *v78;
  void *v79;
  void *v80;
  _QWORD *v81;
  void *__p[2];
  uint64_t v83;
  int v84;
  std::string v85[2];
  int v86;
  std::string v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  void *v90[2];
  char v91;
  int v92;
  std::string v93;

  std::string::basic_string[abi:ne180100]<0>(v90, "x");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v8
                                                                      + 5));
  v10 = MIL::IRValueType::AsTensorType(ValueType);
  if (v91 < 0)
    operator delete(v90[0]);
  std::string::basic_string[abi:ne180100]<0>(v90, "initial_h");
  v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v12 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v11 + 5));
  v13 = MIL::IRValueType::AsTensorType(v12);
  if (v91 < 0)
    operator delete(v90[0]);
  std::string::basic_string[abi:ne180100]<0>(v90, "weight_ih");
  v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v14 + 5));
  v16 = MIL::IRValueType::AsTensorType(v15);
  if (v91 < 0)
    operator delete(v90[0]);
  std::string::basic_string[abi:ne180100]<0>(v90, "weight_hh");
  v17 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  if (!v17)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v18 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v17 + 5));
  v19 = MIL::IRValueType::AsTensorType(v18);
  if (v91 < 0)
    operator delete(v90[0]);
  std::string::basic_string[abi:ne180100]<0>(v90, "weight_ih_back");
  v20 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  v21 = v20;
  if (v91 < 0)
  {
    operator delete(v90[0]);
    if (v21)
      goto LABEL_15;
LABEL_20:
    v72 = 0;
    goto LABEL_21;
  }
  if (!v20)
    goto LABEL_20;
LABEL_15:
  std::string::basic_string[abi:ne180100]<0>(v90, "weight_ih_back");
  v22 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  if (!v22)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v23 = MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v22 + 5));
  if (v91 < 0)
    operator delete(v90[0]);
  v72 = (MIL::IRValueType *)v23;
LABEL_21:
  std::string::basic_string[abi:ne180100]<0>(v90, "weight_hh_back");
  v24 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  v25 = v24;
  if (v91 < 0)
  {
    operator delete(v90[0]);
    if (v25)
      goto LABEL_23;
LABEL_27:
    v71 = 0;
    goto LABEL_28;
  }
  if (!v24)
    goto LABEL_27;
LABEL_23:
  std::string::basic_string[abi:ne180100]<0>(v90, "weight_hh_back");
  v26 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  if (!v26)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v71 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v26 + 5));
  if (v91 < 0)
    operator delete(v90[0]);
LABEL_28:
  std::string::basic_string[abi:ne180100]<0>(v90, "direction");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v90);
  MIL::IRValue::GetScalar<std::string>(SingleValue, &v93);
  if (v91 < 0)
    operator delete(v90[0]);
  std::string::basic_string[abi:ne180100]<0>(v90, "bias");
  v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  if (v91 < 0)
    operator delete(v90[0]);
  v69 = v16;
  v70 = v19;
  if (v28)
  {
    v29 = a2;
    std::string::basic_string[abi:ne180100]<0>(v90, "bias");
    v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
    if (!v30)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v31 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v30
                                                                  + 5));
    if (v91 < 0)
      operator delete(v90[0]);
  }
  else
  {
    v29 = a2;
    v31 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v90, "bias_back");
  v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  v33 = v32;
  if (v91 < 0)
  {
    operator delete(v90[0]);
    if (v33)
      goto LABEL_39;
LABEL_43:
    v34 = v10;
    v36 = 0;
    goto LABEL_44;
  }
  if (!v32)
    goto LABEL_43;
LABEL_39:
  v34 = v10;
  std::string::basic_string[abi:ne180100]<0>(v90, "bias_back");
  v35 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  if (!v35)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v36 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v35 + 5));
  if (v91 < 0)
    operator delete(v90[0]);
LABEL_44:
  std::string::basic_string[abi:ne180100]<0>(v90, "peephole");
  v37 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  v38 = (MIL::IRValueType *)v37;
  if (v91 < 0)
  {
    operator delete(v90[0]);
    if (!v38)
      goto LABEL_51;
  }
  else if (!v37)
  {
    goto LABEL_51;
  }
  std::string::basic_string[abi:ne180100]<0>(v90, "peephole");
  v39 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  if (!v39)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v38 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v39 + 5));
  if (v91 < 0)
    operator delete(v90[0]);
LABEL_51:
  std::string::basic_string[abi:ne180100]<0>(v90, "peephole_back");
  v40 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  v41 = (MIL::IRValueType *)v40;
  if (v91 < 0)
  {
    operator delete(v90[0]);
    if (!v41)
      goto LABEL_58;
  }
  else if (!v40)
  {
    goto LABEL_58;
  }
  std::string::basic_string[abi:ne180100]<0>(v90, "peephole_back");
  v42 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v90);
  if (!v42)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v41 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v42 + 5));
  if (v91 < 0)
    operator delete(v90[0]);
LABEL_58:
  v43 = v29[1];
  v88 = *v29;
  v89 = (std::__shared_weak_count *)v43;
  if (v43)
  {
    v44 = (unint64_t *)(v43 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v87, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  else
    v87 = v93;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  v46 = v89;
  if (v89)
  {
    p_shared_owners = (unint64_t *)&v89->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v90))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v85, (uint64_t)v90);
    v85[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v86 = v92;
    MIL::ValidationError::ValidationError(exception, v85);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output_sequence");
  v49 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  v50 = MIL::IRValue::GetScalar<BOOL>(v49);
  if (SHIBYTE(v83) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v93.__r_.__value_.__l.__size_ == 13)
    {
      v51 = (std::string *)v93.__r_.__value_.__r.__words[0];
      goto LABEL_79;
    }
LABEL_85:
    v55 = 0;
    goto LABEL_86;
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) != 13)
    goto LABEL_85;
  v51 = &v93;
LABEL_79:
  v52 = v51->__r_.__value_.__r.__words[0];
  v53 = *(std::string::size_type *)((char *)v51->__r_.__value_.__r.__words + 5);
  v55 = v52 == 0x7463657269646962 && v53 == 0x6C616E6F69746365;
LABEL_86:
  v56 = MIL::IRDimension::AsConstant((MIL::IRDimension *)__p[1]);
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 48))(v56);
  v58 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v57 << v55));
  v59 = v83;
  v60 = __p[0];
  v61 = operator new(0x18uLL);
  v80 = v61 + 3;
  v81 = v61 + 3;
  *v61 = v59;
  v61[1] = v60;
  v61[2] = v58;
  v79 = v61;
  v62 = operator new(0x10uLL);
  v77 = v62 + 2;
  v78 = v62 + 2;
  *v62 = v60;
  v62[1] = v58;
  v76 = v62;
  v63 = operator new(0x10uLL);
  v74 = v63 + 2;
  v75 = v63 + 2;
  *v63 = v60;
  v63[1] = v58;
  v73 = v63;
  LODWORD(v59) = v84;
  v64 = MIL::IRTensorValueType::MakeWithShape(*a1, v84, (uint64_t)&v79);
  v65 = MIL::IRTensorValueType::MakeWithShape(*a1, v59, (uint64_t)&v76);
  v66 = MIL::IRTensorValueType::MakeWithShape(*a1, v59, (uint64_t)&v73);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v67 = operator new(0x18uLL);
  a4[1] = v67 + 3;
  a4[2] = v67 + 3;
  *v67 = v64;
  v67[1] = v65;
  v67[2] = v66;
  *a4 = v67;
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v90);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
}

void sub_1E0793974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  uint64_t v33;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a33);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v33 - 168));
  if (*(char *)(v33 - 89) < 0)
    operator delete(*(void **)(v33 - 112));
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::`anonymous namespace'::GetRecurrentOpOutputDimensions@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  v11 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v12 = **v11;
  v13 = (*v11)[1];
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 96))(a3);
  v15 = *(_QWORD *)(*(_QWORD *)result + 8);
  if ((a4 & 1) == 0)
  {
    result = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)1);
    v12 = result;
  }
  *(_QWORD *)a5 = v13;
  *(_QWORD *)(a5 + 8) = v15;
  *(_QWORD *)(a5 + 16) = v12;
  *(_DWORD *)(a5 + 24) = v10;
  return result;
}

void MIL::Operators::Common::ios15::`anonymous namespace'::ValidateLSTMHelper(std::shared_ptr<MIL::Location const>,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRValueType const*,MIL::IRValueType const*,std::string,MIL::IRValueType const*,MIL::IRValueType const*,MIL::IRValueType const*,MIL::IRValueType const*)::$_0::operator()(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::vector<unsigned int> *a5@<X5>, std::vector<unsigned int> *a6@<X6>, uint64_t a7@<X8>)
{
  MIL::IRDimension ***v14;
  MIL::IRDimension ***v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  MIL::IRDimension **v28;
  MIL::IRDimension **v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v35;
  std::vector<unsigned int>::pointer begin;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unsigned int *v42;
  unsigned int v43;
  MIL::IRDimension **v44;
  MIL::IRDimension **v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  std::vector<unsigned int>::pointer v50;
  unsigned int *v51;
  std::vector<unsigned int>::pointer v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  std::string::size_type size;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  int v90;
  const std::string::value_type *v91;
  std::string::size_type v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  __int128 v96;
  unint64_t *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  __int128 v110;
  unint64_t *v111;
  uint64_t v112;
  void *v113[2];
  std::string::size_type v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *__p[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string v121;
  std::string v122;
  std::string v123;
  std::string v124;
  std::string v125;
  void *v126[2];
  std::string::size_type v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  std::string v134;
  std::string v135;
  int v136;
  void *v137[2];
  char v138;
  uint64_t v139;
  std::__shared_weak_count *v140;

  v14 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v15 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 96))(a3);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2)
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3) & 1) == 0)
  {
    v65 = (*a1)[1];
    v139 = **a1;
    v140 = (std::__shared_weak_count *)v65;
    if (v65)
    {
      v66 = (unint64_t *)(v65 + 8);
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    std::string::basic_string[abi:ne180100]<0>(v137, "Variadic weights not supported for LSTM op.");
    MIL::ValidationResult::ValidationResult(a7, &v139, 315, v137);
    if (v138 < 0)
      operator delete(v137[0]);
    v68 = v140;
    if (v140)
    {
      p_shared_owners = (unint64_t *)&v140->__shared_owners_;
      do
        v70 = __ldaxr(p_shared_owners);
      while (__stlxr(v70 - 1, p_shared_owners));
      goto LABEL_74;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v134, "LSTM");
  v16 = (*a1)[1];
  v132 = **a1;
  v133 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)v14, (uint64_t)&v134, &v132, (MIL::ValidationResult *)&v135);
  v19 = v133;
  if (v133)
  {
    v20 = (unint64_t *)&v133->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(std::string *))(v135.__r_.__value_.__r.__words[0] + 16))(&v135) & 1) == 0)
  {
    MIL::MILResult::MILResult((std::string *)a7, (uint64_t)&v135);
LABEL_78:
    *(_QWORD *)a7 = &off_1EA99F170;
    *(_DWORD *)(a7 + 48) = v136;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v135);
    return;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v135);
  std::string::basic_string[abi:ne180100]<0>(&v134, "LSTM");
  v22 = (*a1)[1];
  v130 = **a1;
  v131 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)v15, (uint64_t)&v134, &v130, (MIL::ValidationResult *)&v135);
  v25 = v131;
  if (v131)
  {
    v26 = (unint64_t *)&v131->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(std::string *))(v135.__r_.__value_.__r.__words[0] + 16))(&v135) & 1) == 0)
  {
    MIL::MILResult::MILResult((std::string *)a7, (uint64_t)&v135);
    goto LABEL_78;
  }
  v112 = a4;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v135);
  std::vector<int>::reserve(a5, 2uLL);
  v28 = *v14;
  v29 = v14[1];
  if (*v14 != v29)
  {
    do
    {
      v30 = MIL::IRDimension::AsConstant(*v28);
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30);
      v32 = v31;
      end = a5->__end_;
      value = a5->__end_cap_.__value_;
      if (end >= value)
      {
        begin = a5->__begin_;
        v37 = end - a5->__begin_;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v39 = (char *)value - (char *)begin;
        if (v39 >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&a5->__end_cap_, v40);
          begin = a5->__begin_;
          end = a5->__end_;
        }
        else
        {
          v41 = 0;
        }
        v42 = (unsigned int *)&v41[4 * v37];
        *v42 = v32;
        v35 = v42 + 1;
        while (end != begin)
        {
          v43 = *--end;
          *--v42 = v43;
        }
        a5->__begin_ = v42;
        a5->__end_ = v35;
        a5->__end_cap_.__value_ = (unsigned int *)&v41[4 * v40];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v31;
        v35 = end + 1;
      }
      a5->__end_ = v35;
      ++v28;
    }
    while (v28 != v29);
  }
  std::vector<int>::reserve(a6, 2uLL);
  v44 = *v15;
  v45 = v15[1];
  if (*v15 != v45)
  {
    do
    {
      v46 = MIL::IRDimension::AsConstant(*v44);
      v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 48))(v46);
      v48 = v47;
      v50 = a6->__end_;
      v49 = a6->__end_cap_.__value_;
      if (v50 >= v49)
      {
        v52 = a6->__begin_;
        v53 = v50 - a6->__begin_;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 62)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v55 = (char *)v49 - (char *)v52;
        if (v55 >> 1 > v54)
          v54 = v55 >> 1;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
          v56 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&a6->__end_cap_, v56);
          v52 = a6->__begin_;
          v50 = a6->__end_;
        }
        else
        {
          v57 = 0;
        }
        v58 = (unsigned int *)&v57[4 * v53];
        *v58 = v48;
        v51 = v58 + 1;
        while (v50 != v52)
        {
          v59 = *--v50;
          *--v58 = v59;
        }
        a6->__begin_ = v58;
        a6->__end_ = v51;
        a6->__end_cap_.__value_ = (unsigned int *)&v57[4 * v56];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *v50 = v47;
        v51 = v50 + 1;
      }
      a6->__end_ = v51;
      ++v44;
    }
    while (v44 != v45);
  }
  v60 = *(_QWORD *)(*a1[1] + 16);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60)
    && (v61 = a5->__begin_[1],
        v62 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a1[1] + 16)),
        v61 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 48))(v62)))
  {
    v75 = (*a1)[1];
    v128 = **a1;
    v129 = (std::__shared_weak_count *)v75;
    if (v75)
    {
      v76 = (unint64_t *)(v75 + 8);
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v78 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a1[1] + 16));
    v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 48))(v78);
    std::to_string(&v122, v79);
    v80 = std::string::insert(&v122, 0, "Different input size for input: ");
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v123.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    v82 = std::string::append(&v123, " and input weight: ");
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v121, a5->__begin_[1]);
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = &v121;
    else
      v84 = (std::string *)v121.__r_.__value_.__r.__words[0];
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
    else
      size = v121.__r_.__value_.__l.__size_;
    v86 = std::string::append(&v124, (const std::string::value_type *)v84, size);
    v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    v88 = std::string::append(&v125, " for ");
    v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    v90 = *(char *)(v112 + 23);
    if (v90 >= 0)
      v91 = (const std::string::value_type *)v112;
    else
      v91 = *(const std::string::value_type **)v112;
    if (v90 >= 0)
      v92 = *(unsigned __int8 *)(v112 + 23);
    else
      v92 = *(_QWORD *)(v112 + 8);
    v93 = std::string::append(&v134, v91, v92);
    v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    v135.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    v95 = std::string::append(&v135, " parameter of LSTM op.");
    v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    v127 = v95->__r_.__value_.__r.__words[2];
    *(_OWORD *)v126 = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a7, &v128, 315, v126);
    if (SHIBYTE(v127) < 0)
      operator delete(v126[0]);
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v135.__r_.__value_.__l.__data_);
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v134.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v123.__r_.__value_.__l.__data_);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v122.__r_.__value_.__l.__data_);
    v68 = v129;
    if (v129)
    {
      v97 = (unint64_t *)&v129->__shared_owners_;
      do
        v70 = __ldaxr(v97);
      while (__stlxr(v70 - 1, v97));
      goto LABEL_74;
    }
  }
  else
  {
    v63 = *a6->__begin_;
    if (v63 == *a5->__begin_)
    {
      v64 = a6->__begin_[1];
      if (v63 == 4 * v64)
      {
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a7);
        return;
      }
      v98 = (*a1)[1];
      v115 = **a1;
      v116 = (std::__shared_weak_count *)v98;
      if (v98)
      {
        v99 = (unint64_t *)(v98 + 8);
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
        v64 = a6->__begin_[1];
      }
      std::to_string(&v124, v64);
      v101 = std::string::insert(&v124, 0, "Hidden dimension must be of shape 4*HiddenSize. Provided hiddenSize: ");
      v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
      v125.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v102;
      v101->__r_.__value_.__l.__size_ = 0;
      v101->__r_.__value_.__r.__words[2] = 0;
      v101->__r_.__value_.__r.__words[0] = 0;
      v103 = std::string::append(&v125, " hiddenDim: ");
      v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
      v134.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v104;
      v103->__r_.__value_.__l.__size_ = 0;
      v103->__r_.__value_.__r.__words[2] = 0;
      v103->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v123, *a6->__begin_);
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v105 = &v123;
      else
        v105 = (std::string *)v123.__r_.__value_.__r.__words[0];
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v106 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      else
        v106 = v123.__r_.__value_.__l.__size_;
      v107 = std::string::append(&v134, (const std::string::value_type *)v105, v106);
      v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
      v135.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v108;
      v107->__r_.__value_.__l.__size_ = 0;
      v107->__r_.__value_.__r.__words[2] = 0;
      v107->__r_.__value_.__r.__words[0] = 0;
      v109 = std::string::append(&v135, "for LSTM op.");
      v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
      v114 = v109->__r_.__value_.__r.__words[2];
      *(_OWORD *)v113 = v110;
      v109->__r_.__value_.__l.__size_ = 0;
      v109->__r_.__value_.__r.__words[2] = 0;
      v109->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a7, &v115, 315, v113);
      if (SHIBYTE(v114) < 0)
        operator delete(v113[0]);
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v135.__r_.__value_.__l.__data_);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v123.__r_.__value_.__l.__data_);
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v134.__r_.__value_.__l.__data_);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      v68 = v116;
      if (v116)
      {
        v111 = (unint64_t *)&v116->__shared_owners_;
        do
          v70 = __ldaxr(v111);
        while (__stlxr(v70 - 1, v111));
LABEL_74:
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
    }
    else
    {
      v71 = (*a1)[1];
      v119 = **a1;
      v120 = (std::__shared_weak_count *)v71;
      if (v71)
      {
        v72 = (unint64_t *)(v71 + 8);
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Input and Hidden weights hidden dimensions mismatch for LSTM op.");
      MIL::ValidationResult::ValidationResult(a7, &v119, 315, __p);
      if (v118 < 0)
        operator delete(__p[0]);
      v68 = v120;
      if (v120)
      {
        v74 = (unint64_t *)&v120->__shared_owners_;
        do
          v70 = __ldaxr(v74);
        while (__stlxr(v70 - 1, v74));
        goto LABEL_74;
      }
    }
  }
}

void sub_1E07944FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v49 - 169) < 0)
    operator delete(*(void **)(v49 - 192));
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v49 - 201) < 0)
    operator delete(*(void **)(v49 - 224));
  if (a49 < 0)
    operator delete(a44);
  if (a42 < 0)
    operator delete(a37);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::`anonymous namespace'::ValidateLSTMHelper(std::shared_ptr<MIL::Location const>,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRValueType const*,MIL::IRValueType const*,std::string,MIL::IRValueType const*,MIL::IRValueType const*,MIL::IRValueType const*,MIL::IRValueType const*)::$_1::operator()(uint64_t **a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  __int128 __p;
  std::string::size_type v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::string v47;
  std::string v48;
  int v49;
  MIL::IRDimension **v50;
  MIL::IRDimension **v51;
  uint64_t v52;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v51 = 0;
  v52 = 0;
  v50 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v50, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v47, "LSTM");
  v8 = (*a1)[1];
  v45 = **a1;
  v46 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t)&v50, (uint64_t)&v47, &v45, (MIL::ValidationResult *)&v48);
  v11 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(std::string *))(v48.__r_.__value_.__r.__words[0] + 16))(&v48) & 1) != 0)
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v48);
    v14 = MIL::IRDimension::AsConstant(*v50);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
    if (v15 == a3)
    {
      MIL::ValidationResult::ValidationResult(a4);
    }
    else
    {
      v16 = (*a1)[1];
      v43 = **a1;
      v44 = (std::__shared_weak_count *)v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      std::operator+<char>();
      v19 = std::string::append(&v38, " elements: ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v37, v15);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v37;
      else
        v21 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      else
        size = v37.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v39, (const std::string::value_type *)v21, size);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v40, ".");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v27 = std::string::append(&v47, " Expecting ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v36, a3);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v36;
      else
        v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        v30 = v36.__r_.__value_.__l.__size_;
      v31 = std::string::append(&v48, (const std::string::value_type *)v29, v30);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v42 = v31->__r_.__value_.__r.__words[2];
      __p = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v43, 315, &__p);
      if (SHIBYTE(v42) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      v33 = v44;
      if (v44)
      {
        v34 = (unint64_t *)&v44->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
  }
  else
  {
    MIL::MILResult::MILResult((std::string *)a4, (uint64_t)&v48);
    *(_QWORD *)a4 = &off_1EA99F170;
    *((_DWORD *)a4 + 12) = v49;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v48);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
}

void sub_1E0794A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49)
{
  uint64_t v49;
  void *v51;

  if (a47 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v49 - 105) < 0)
    operator delete(*(void **)(v49 - 128));
  if (*(char *)(v49 - 137) < 0)
    operator delete(*(void **)(v49 - 160));
  if (a40 < 0)
    operator delete(a35);
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  v51 = *(void **)(v49 - 72);
  if (v51)
  {
    *(_QWORD *)(v49 - 64) = v51;
    operator delete(v51);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Gru::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  unsigned __int8 *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  unsigned __int8 *v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  char **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  char *v96;
  char *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  char **v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 v122;
  char *v123;
  char *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  char **v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  void *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *p_shared_owners;
  unint64_t v151;
  std::__shared_weak_count_vtbl *v152;
  void *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count_vtbl *v159;
  void *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count_vtbl *v166;
  void *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count_vtbl *v173;
  void *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count_vtbl *v180;
  void *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count_vtbl *v187;
  void *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count_vtbl *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  void *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count_vtbl *v208;
  void *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count_vtbl *v215;
  void *v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count_vtbl *v222;
  void *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count_vtbl *v229;
  void *v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count_vtbl *v236;
  void *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count_vtbl *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count_vtbl *v243;
  void *v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count_vtbl *v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count_vtbl *v250;
  void *v251;
  std::__shared_weak_count *v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count_vtbl *v257;
  void *v258;
  std::__shared_weak_count *v259;
  std::__shared_weak_count_vtbl *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count_vtbl *v264;
  void *v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count_vtbl *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count_vtbl *v271;
  void *v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count_vtbl *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count_vtbl *v278;
  void *v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count_vtbl *v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count_vtbl *v285;
  void *v286;
  std::__shared_weak_count *v287;
  std::__shared_weak_count_vtbl *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count_vtbl *v292;
  void *v293;
  std::__shared_weak_count *v294;
  std::__shared_weak_count_vtbl *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count_vtbl *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  std::__shared_weak_count_vtbl *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  void *v306;
  uint64_t v307;
  std::__shared_weak_count *v308;
  uint64_t v309;
  uint64_t i;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  uint64_t v317;
  uint64_t j;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  uint64_t v325;
  uint64_t k;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  std::__shared_weak_count *v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t result;
  uint64_t v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  void *v342[2];
  char v343;
  uint64_t v344;
  std::__shared_weak_count *v345;
  void *v346[2];
  char v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  void *v350[2];
  char v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  void *v354;
  std::__shared_weak_count *v355;
  void *v356[2];
  char v357;
  std::__shared_weak_count_vtbl *v358;
  std::__shared_weak_count *v359;
  void *v360[2];
  char v361;
  std::__shared_weak_count_vtbl *v362;
  std::__shared_weak_count *v363;
  void *v364[2];
  char v365;
  std::__shared_weak_count_vtbl *v366;
  std::__shared_weak_count *v367;
  void *v368[2];
  char v369;
  std::__shared_weak_count_vtbl *v370;
  std::__shared_weak_count *v371;
  void *v372[2];
  char v373;
  void *v374[2];
  char v375;
  std::__shared_weak_count_vtbl *v376;
  std::__shared_weak_count *v377;
  void *v378[2];
  char v379;
  void *v380[2];
  char v381;
  std::__shared_weak_count_vtbl *v382;
  std::__shared_weak_count *v383;
  void *v384[2];
  char v385;
  void *v386[2];
  char v387;
  std::__shared_weak_count_vtbl *v388;
  std::__shared_weak_count *v389;
  void *v390[2];
  char v391;
  void *v392[2];
  char v393;
  std::__shared_weak_count_vtbl *v394;
  std::__shared_weak_count *v395;
  void *v396[2];
  char v397;
  void *v398[2];
  char v399;
  std::__shared_weak_count_vtbl *v400;
  std::__shared_weak_count *v401;
  void *v402[2];
  char v403;
  void *v404[2];
  char v405;
  std::__shared_weak_count_vtbl *v406;
  std::__shared_weak_count *v407;
  void *v408[2];
  char v409;
  void *v410[2];
  char v411;
  std::__shared_weak_count_vtbl *v412;
  std::__shared_weak_count *v413;
  void *v414[2];
  char v415;
  void *v416[2];
  char v417;
  std::__shared_weak_count_vtbl *v418;
  std::__shared_weak_count *v419;
  void *v420[2];
  char v421;
  void *v422[2];
  char v423;
  std::__shared_weak_count_vtbl *v424;
  std::__shared_weak_count *v425;
  void *v426[2];
  char v427;
  void *v428[2];
  char v429;
  std::__shared_weak_count_vtbl *v430;
  std::__shared_weak_count *v431;
  void *v432;
  std::__shared_weak_count *v433;
  void *v434[2];
  char v435;
  std::__shared_weak_count_vtbl *v436;
  std::__shared_weak_count *v437;
  void *v438[2];
  char v439;
  std::__shared_weak_count_vtbl *v440;
  std::__shared_weak_count *v441;
  void *v442[2];
  char v443;
  void *v444[2];
  char v445;
  std::__shared_weak_count_vtbl *v446;
  std::__shared_weak_count *v447;
  void *v448[2];
  char v449;
  void *v450[2];
  char v451;
  std::__shared_weak_count_vtbl *v452;
  std::__shared_weak_count *v453;
  void *v454[2];
  char v455;
  void *v456[2];
  char v457;
  std::__shared_weak_count_vtbl *v458;
  std::__shared_weak_count *v459;
  void *v460[2];
  char v461;
  void *v462[2];
  char v463;
  std::__shared_weak_count_vtbl *v464;
  std::__shared_weak_count *v465;
  void *v466[2];
  char v467;
  void *v468[2];
  char v469;
  std::__shared_weak_count_vtbl *v470;
  std::__shared_weak_count *v471;
  __int128 v472;
  __int128 v473;
  void *v474[2];
  uint64_t v475;
  __n128 v476;
  __n128 v477;
  uint64_t v478;
  char **v479;
  __n128 v480;
  __n128 v481;
  __n128 v482;
  __n128 v483;
  __n128 v484;
  __n128 v485;
  __n128 v486;
  __n128 v487;
  __n128 v488;
  _QWORD *v489;
  void *__p;
  void *v491;
  char *v492;
  char *v493;
  char **v494;
  char v495;
  _QWORD v496[3];
  _QWORD v497[3];
  _QWORD v498[3];
  _QWORD v499[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *p_on_zero_shared;
  _QWORD v503[3];
  _QWORD *v504;
  _BYTE v505[24];
  _BYTE *v506;
  _QWORD v507[3];
  _QWORD *v508;
  uint64_t v509;
  uint64_t v510;
  _QWORD *v511;
  uint64_t v512;

  v512 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v489 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (char *)operator new(0x18uLL);
  v492 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  v491 = v10 + 24;
  v510 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v510, 1, &v488);
  MIL::IRParameter::Make(&v488, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v11 = Scalar;
  Scalar = 0;
  if (v11)
    (*((void (**)(std::__shared_weak_count_vtbl *))v11->~__shared_weak_count + 1))(v11);
  v12 = (std::__shared_weak_count *)v488.n128_u64[1];
  if (v488.n128_u64[1])
  {
    v13 = (unint64_t *)(v488.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v491 = __p;
    operator delete(__p);
  }
  v15 = v489;
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = (char *)operator new(0x10uLL);
  v492 = v18 + 16;
  *(_QWORD *)v18 = v16;
  *((_QWORD *)v18 + 1) = v17;
  __p = v18;
  v491 = v18 + 16;
  v510 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v510, 1, &v487);
  MIL::IRParameter::Make(&v487, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v15, "initial_h", (uint64_t *)&Scalar);
  v19 = Scalar;
  Scalar = 0;
  if (v19)
    (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  v20 = (std::__shared_weak_count *)v487.n128_u64[1];
  if (v487.n128_u64[1])
  {
    v21 = (unint64_t *)(v487.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v491 = __p;
    operator delete(__p);
  }
  v23 = v489;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (char *)operator new(0x10uLL);
  v492 = v26 + 16;
  *(_QWORD *)v26 = v24;
  *((_QWORD *)v26 + 1) = v25;
  __p = v26;
  v491 = v26 + 16;
  v510 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v510, 1, &v486);
  MIL::IRParameter::Make(&v486, (uint64_t *)&Scalar);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v23, "weight_ih", (uint64_t *)&Scalar);
  v28 = Scalar;
  Scalar = 0;
  if (v28)
    (*((void (**)(std::__shared_weak_count_vtbl *))v28->~__shared_weak_count + 1))(v28);
  v29 = (std::__shared_weak_count *)v486.n128_u64[1];
  if (v486.n128_u64[1])
  {
    v30 = (unint64_t *)(v486.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v491 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  v32 = v489;
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = (char *)operator new(0x10uLL);
  v492 = v35 + 16;
  *(_QWORD *)v35 = v33;
  *((_QWORD *)v35 + 1) = v34;
  __p = v35;
  v491 = v35 + 16;
  v510 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v510, 1, &v485);
  MIL::IRParameter::Make(&v485, (uint64_t *)&Scalar);
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v32, "weight_hh", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = (std::__shared_weak_count *)v485.n128_u64[1];
  if (v485.n128_u64[1])
  {
    v39 = (unint64_t *)(v485.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v491 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v489;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (char *)operator new(8uLL);
  __p = v43;
  *(_QWORD *)v43 = v42;
  v492 = v43 + 8;
  v491 = v43 + 8;
  v510 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v510, 1, &v484);
  MIL::IRParameter::Make(&v484, (uint64_t *)&Scalar);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v41, "bias", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = (std::__shared_weak_count *)v484.n128_u64[1];
  if (v484.n128_u64[1])
  {
    v47 = (unint64_t *)(v484.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (__p)
  {
    v491 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v489;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v483);
  MIL::IRParameter::Make(&v483, (uint64_t *)&__p);
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v49, "direction", (uint64_t *)&__p);
  v51 = __p;
  __p = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v483.n128_u64[1];
  if (v483.n128_u64[1])
  {
    v53 = (unint64_t *)(v483.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  v55 = v489;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v482);
  MIL::IRParameter::Make(&v482, (uint64_t *)&__p);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v55, "output_sequence", (uint64_t *)&__p);
  v57 = __p;
  __p = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v482.n128_u64[1];
  if (v482.n128_u64[1])
  {
    v59 = (unint64_t *)(v482.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  v61 = v489;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v481);
  MIL::IRParameter::Make(&v481, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v61, "recurrent_activation", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v481.n128_u64[1];
  if (v481.n128_u64[1])
  {
    v65 = (unint64_t *)(v481.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  v67 = v489;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v480);
  MIL::IRParameter::Make(&v480, (uint64_t *)&__p);
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v67, "activation", (uint64_t *)&__p);
  v69 = __p;
  __p = 0;
  if (v69)
    (*(void (**)(void *))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v480.n128_u64[1];
  if (v480.n128_u64[1])
  {
    v71 = (unint64_t *)(v480.n128_u64[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v68 + 5) + 32))(*((_QWORD *)v68 + 5), 1);
  v479 = 0;
  v73 = operator new();
  *(_QWORD *)v73 = 0;
  *(_QWORD *)(v73 + 8) = 0;
  *(_QWORD *)(v73 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v479, (void **)v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v479, 2uLL);
  v74 = v479;
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = MIL::IRUnknownDimension::Make(a1, 0);
  v78 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v78->__get_deleter;
  p_on_zero_shared = &v78->__get_deleter;
  v78->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v75;
  v78->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v76;
  v78->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v77;
  Scalar = v78;
  v509 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v509, 1, &v477);
  MIL::IRParameter::Make(&v477, &v478);
  v79 = v478;
  v510 = v478;
  if (v478)
  {
    v80 = (_QWORD *)operator new();
    v81 = v478;
    *v80 = &unk_1EA99F888;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v81;
  }
  else
  {
    v80 = 0;
  }
  v511 = v80;
  v478 = 0;
  v82 = v74[2];
  v83 = v74[1];
  if (v83 >= v82)
  {
    v85 = (v83 - *v74) >> 4;
    v86 = v85 + 1;
    if ((unint64_t)(v85 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v87 = v82 - *v74;
    if (v87 >> 3 > v86)
      v86 = v87 >> 3;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
      v88 = 0xFFFFFFFFFFFFFFFLL;
    else
      v88 = v86;
    v494 = v74 + 2;
    v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v74 + 2), v88);
    v91 = (uint64_t *)&v89[16 * v85];
    *v91 = v79;
    v91[1] = (uint64_t)v80;
    v510 = 0;
    v511 = 0;
    v93 = *v74;
    v92 = v74[1];
    if (v92 == *v74)
    {
      v96 = v74[1];
      v94 = &v89[16 * v85];
    }
    else
    {
      v94 = &v89[16 * v85];
      do
      {
        v95 = *((_OWORD *)v92 - 1);
        v92 -= 16;
        *((_OWORD *)v94 - 1) = v95;
        v94 -= 16;
        *(_QWORD *)v92 = 0;
        *((_QWORD *)v92 + 1) = 0;
      }
      while (v92 != v93);
      v96 = *v74;
      v92 = v74[1];
    }
    v84 = (char *)(v91 + 2);
    *v74 = v94;
    v491 = v96;
    v74[1] = (char *)(v91 + 2);
    v492 = v92;
    v97 = v74[2];
    v74[2] = &v89[16 * v90];
    v493 = v97;
    __p = v96;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v83 = v79;
    *((_QWORD *)v83 + 1) = v80;
    v84 = v83 + 16;
    v510 = 0;
    v511 = 0;
  }
  v74[1] = v84;
  v98 = v478;
  v478 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  v99 = (std::__shared_weak_count *)v477.n128_u64[1];
  if (v477.n128_u64[1])
  {
    v100 = (unint64_t *)(v477.n128_u64[1] + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  v102 = v479;
  v103 = MIL::IRUnknownDimension::Make(a1, 0);
  v104 = MIL::IRUnknownDimension::Make(a1, 0);
  v105 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v105->__on_zero_shared;
  p_on_zero_shared = &v105->__on_zero_shared;
  v105->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v103;
  v105->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v104;
  Scalar = v105;
  v509 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v509, 1, &v476);
  MIL::IRParameter::Make(&v476, &v478);
  v106 = v478;
  v510 = v478;
  if (v478)
  {
    v107 = (_QWORD *)operator new();
    v108 = v478;
    *v107 = &unk_1EA99F888;
    v107[1] = 0;
    v107[2] = 0;
    v107[3] = v108;
  }
  else
  {
    v107 = 0;
  }
  v511 = v107;
  v478 = 0;
  v109 = v102[2];
  v110 = v102[1];
  if (v110 >= v109)
  {
    v112 = (v110 - *v102) >> 4;
    v113 = v112 + 1;
    if ((unint64_t)(v112 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v114 = v109 - *v102;
    if (v114 >> 3 > v113)
      v113 = v114 >> 3;
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0)
      v115 = 0xFFFFFFFFFFFFFFFLL;
    else
      v115 = v113;
    v494 = v102 + 2;
    v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v102 + 2), v115);
    v118 = (uint64_t *)&v116[16 * v112];
    *v118 = v106;
    v118[1] = (uint64_t)v107;
    v510 = 0;
    v511 = 0;
    v120 = *v102;
    v119 = v102[1];
    if (v119 == *v102)
    {
      v123 = v102[1];
      v121 = &v116[16 * v112];
    }
    else
    {
      v121 = &v116[16 * v112];
      do
      {
        v122 = *((_OWORD *)v119 - 1);
        v119 -= 16;
        *((_OWORD *)v121 - 1) = v122;
        v121 -= 16;
        *(_QWORD *)v119 = 0;
        *((_QWORD *)v119 + 1) = 0;
      }
      while (v119 != v120);
      v123 = *v102;
      v119 = v102[1];
    }
    v111 = (char *)(v118 + 2);
    *v102 = v121;
    v491 = v123;
    v102[1] = (char *)(v118 + 2);
    v492 = v119;
    v124 = v102[2];
    v102[2] = &v116[16 * v117];
    v493 = v124;
    __p = v123;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v110 = v106;
    *((_QWORD *)v110 + 1) = v107;
    v111 = v110 + 16;
    v510 = 0;
    v511 = 0;
  }
  v102[1] = v111;
  v125 = v478;
  v478 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = (std::__shared_weak_count *)v476.n128_u64[1];
  if (v476.n128_u64[1])
  {
    v127 = (unint64_t *)(v476.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v474 = *(_OWORD *)a2;
  v475 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v129 = (uint64_t)v489;
  *(_QWORD *)&v473 = v489;
  if (v489)
  {
    v130 = (_QWORD *)operator new();
    *v130 = &unk_1EA99F8E8;
    v130[1] = 0;
    v130[2] = 0;
    v130[3] = v129;
  }
  else
  {
    v130 = 0;
  }
  *((_QWORD *)&v473 + 1) = v130;
  v489 = 0;
  *(_QWORD *)&v472 = v479;
  if (v479)
  {
    v131 = (_QWORD *)operator new();
    v132 = v479;
    *v131 = &unk_1EA99F948;
    v131[1] = 0;
    v131[2] = 0;
    v131[3] = v132;
  }
  else
  {
    v131 = 0;
  }
  *((_QWORD *)&v472 + 1) = v131;
  v479 = 0;
  v507[0] = &unk_1EA99FAC8;
  v507[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateGru;
  v508 = v507;
  v506 = 0;
  MIL::IROperator::Make((__int128 *)v474, &v473, &v472, (uint64_t)v507, (uint64_t)v505, a3);
  v133 = v506;
  if (v506 == v505)
  {
    v134 = 4;
    v133 = v505;
  }
  else
  {
    if (!v506)
      goto LABEL_137;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_137:
  v135 = v508;
  if (v508 == v507)
  {
    v136 = 4;
    v135 = v507;
    goto LABEL_141;
  }
  if (v508)
  {
    v136 = 5;
LABEL_141:
    (*(void (**)(void))(*v135 + 8 * v136))();
  }
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v472 + 1);
  if (*((_QWORD *)&v472 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v472 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (std::__shared_weak_count *)*((_QWORD *)&v473 + 1);
  if (*((_QWORD *)&v473 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v473 + 1) + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  if (SHIBYTE(v475) < 0)
    operator delete(v474[0]);
  v143 = *a3;
  v503[0] = &off_1EA99FBD8;
  v503[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGru;
  v504 = v503;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v143 + 200))(v143, v503);
  v144 = v504;
  if (v504 == v503)
  {
    v145 = 4;
    v144 = v503;
  }
  else
  {
    if (!v504)
      goto LABEL_159;
    v145 = 5;
  }
  (*(void (**)(void))(*v144 + 8 * v145))();
LABEL_159:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v146 = __p;
  std::string::basic_string[abi:ne180100]<0>(v468, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v468, 0, (uint64_t *)&Scalar);
  v470 = Scalar;
  if (Scalar)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = Scalar;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v471 = v147;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v466, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v146 + 24))(v146, &v470, v466);
  if (v467 < 0)
    operator delete(v466[0]);
  v149 = v471;
  if (v471)
  {
    p_shared_owners = (unint64_t *)&v471->__shared_owners_;
    do
      v151 = __ldaxr(p_shared_owners);
    while (__stlxr(v151 - 1, p_shared_owners));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = Scalar;
  Scalar = 0;
  if (v152)
    (*((void (**)(std::__shared_weak_count_vtbl *))v152->~__shared_weak_count + 1))(v152);
  if (v469 < 0)
    operator delete(v468[0]);
  v153 = __p;
  std::string::basic_string[abi:ne180100]<0>(v462, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v462, 0, (uint64_t *)&Scalar);
  v464 = Scalar;
  if (Scalar)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = Scalar;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v465 = v154;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v460, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v153 + 24))(v153, &v464, v460);
  if (v461 < 0)
    operator delete(v460[0]);
  v156 = v465;
  if (v465)
  {
    v157 = (unint64_t *)&v465->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = Scalar;
  Scalar = 0;
  if (v159)
    (*((void (**)(std::__shared_weak_count_vtbl *))v159->~__shared_weak_count + 1))(v159);
  if (v463 < 0)
    operator delete(v462[0]);
  v160 = __p;
  std::string::basic_string[abi:ne180100]<0>(v456, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v456, 0, (uint64_t *)&Scalar);
  v458 = Scalar;
  if (Scalar)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = Scalar;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v459 = v161;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v454, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v160 + 24))(v160, &v458, v454);
  if (v455 < 0)
    operator delete(v454[0]);
  v163 = v459;
  if (v459)
  {
    v164 = (unint64_t *)&v459->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = Scalar;
  Scalar = 0;
  if (v166)
    (*((void (**)(std::__shared_weak_count_vtbl *))v166->~__shared_weak_count + 1))(v166);
  if (v457 < 0)
    operator delete(v456[0]);
  v167 = __p;
  std::string::basic_string[abi:ne180100]<0>(v450, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v450, 0, (uint64_t *)&Scalar);
  v452 = Scalar;
  if (Scalar)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = Scalar;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v453 = v168;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v448, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v167 + 24))(v167, &v452, v448);
  if (v449 < 0)
    operator delete(v448[0]);
  v170 = v453;
  if (v453)
  {
    v171 = (unint64_t *)&v453->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = Scalar;
  Scalar = 0;
  if (v173)
    (*((void (**)(std::__shared_weak_count_vtbl *))v173->~__shared_weak_count + 1))(v173);
  if (v451 < 0)
    operator delete(v450[0]);
  v174 = __p;
  std::string::basic_string[abi:ne180100]<0>(v444, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v444, 1, (uint64_t *)&Scalar);
  v446 = Scalar;
  if (Scalar)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = Scalar;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v447 = v175;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v442, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v174 + 24))(v174, &v446, v442);
  if (v443 < 0)
    operator delete(v442[0]);
  v177 = v447;
  if (v447)
  {
    v178 = (unint64_t *)&v447->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = Scalar;
  Scalar = 0;
  if (v180)
    (*((void (**)(std::__shared_weak_count_vtbl *))v180->~__shared_weak_count + 1))(v180);
  if (v445 < 0)
    operator delete(v444[0]);
  v181 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v440 = Scalar;
  if (Scalar)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = Scalar;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v441 = v182;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v438, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v181 + 24))(v181, &v440, v438);
  if (v439 < 0)
    operator delete(v438[0]);
  v184 = v441;
  if (v441)
  {
    v185 = (unint64_t *)&v441->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = Scalar;
  Scalar = 0;
  if (v187)
    (*((void (**)(std::__shared_weak_count_vtbl *))v187->~__shared_weak_count + 1))(v187);
  v188 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v436 = Scalar;
  if (Scalar)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = Scalar;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v437 = v189;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v434, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v188 + 24))(v188, &v436, v434);
  if (v435 < 0)
    operator delete(v434[0]);
  v191 = v437;
  if (v437)
  {
    v192 = (unint64_t *)&v437->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = Scalar;
  Scalar = 0;
  if (v194)
    (*((void (**)(std::__shared_weak_count_vtbl *))v194->~__shared_weak_count + 1))(v194);
  v195 = *a3;
  v432 = __p;
  if (__p)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = (std::__shared_weak_count_vtbl *)__p;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v433 = v196;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v195 + 56))(v195, &v432);
  v198 = v433;
  if (v433)
  {
    v199 = (unint64_t *)&v433->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = __p;
  __p = 0;
  if (v201)
    (*(void (**)(void *))(*(_QWORD *)v201 + 8))(v201);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v202 = __p;
  std::string::basic_string[abi:ne180100]<0>(v428, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v428, 0, (uint64_t *)&Scalar);
  v430 = Scalar;
  if (Scalar)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = Scalar;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v431 = v203;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v426, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v202 + 24))(v202, &v430, 0, v426);
  if (v427 < 0)
    operator delete(v426[0]);
  v205 = v431;
  if (v431)
  {
    v206 = (unint64_t *)&v431->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = Scalar;
  Scalar = 0;
  if (v208)
    (*((void (**)(std::__shared_weak_count_vtbl *))v208->~__shared_weak_count + 1))(v208);
  if (v429 < 0)
    operator delete(v428[0]);
  v209 = __p;
  std::string::basic_string[abi:ne180100]<0>(v422, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v422, 0, (uint64_t *)&Scalar);
  v424 = Scalar;
  if (Scalar)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = Scalar;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = v211;
  }
  else
  {
    v210 = 0;
  }
  v425 = v210;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v420, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v209 + 24))(v209, &v424, 1, v420);
  if (v421 < 0)
    operator delete(v420[0]);
  v212 = v425;
  if (v425)
  {
    v213 = (unint64_t *)&v425->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = Scalar;
  Scalar = 0;
  if (v215)
    (*((void (**)(std::__shared_weak_count_vtbl *))v215->~__shared_weak_count + 1))(v215);
  if (v423 < 0)
    operator delete(v422[0]);
  v216 = __p;
  std::string::basic_string[abi:ne180100]<0>(v416, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v416, 0, (uint64_t *)&Scalar);
  v418 = Scalar;
  if (Scalar)
  {
    v217 = (std::__shared_weak_count *)operator new();
    v218 = Scalar;
    v217->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v217->__shared_owners_ = 0;
    v217->__shared_weak_owners_ = 0;
    v217[1].__vftable = v218;
  }
  else
  {
    v217 = 0;
  }
  v419 = v217;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v414, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v216 + 24))(v216, &v418, 2, v414);
  if (v415 < 0)
    operator delete(v414[0]);
  v219 = v419;
  if (v419)
  {
    v220 = (unint64_t *)&v419->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = Scalar;
  Scalar = 0;
  if (v222)
    (*((void (**)(std::__shared_weak_count_vtbl *))v222->~__shared_weak_count + 1))(v222);
  if (v417 < 0)
    operator delete(v416[0]);
  v223 = __p;
  std::string::basic_string[abi:ne180100]<0>(v410, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v410, 0, (uint64_t *)&Scalar);
  v412 = Scalar;
  if (Scalar)
  {
    v224 = (std::__shared_weak_count *)operator new();
    v225 = Scalar;
    v224->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v224->__shared_owners_ = 0;
    v224->__shared_weak_owners_ = 0;
    v224[1].__vftable = v225;
  }
  else
  {
    v224 = 0;
  }
  v413 = v224;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v408, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v223 + 24))(v223, &v412, 0, v408);
  if (v409 < 0)
    operator delete(v408[0]);
  v226 = v413;
  if (v413)
  {
    v227 = (unint64_t *)&v413->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = Scalar;
  Scalar = 0;
  if (v229)
    (*((void (**)(std::__shared_weak_count_vtbl *))v229->~__shared_weak_count + 1))(v229);
  if (v411 < 0)
    operator delete(v410[0]);
  v230 = __p;
  std::string::basic_string[abi:ne180100]<0>(v404, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v404, 0, (uint64_t *)&Scalar);
  v406 = Scalar;
  if (Scalar)
  {
    v231 = (std::__shared_weak_count *)operator new();
    v232 = Scalar;
    v231->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v231->__shared_owners_ = 0;
    v231->__shared_weak_owners_ = 0;
    v231[1].__vftable = v232;
  }
  else
  {
    v231 = 0;
  }
  v407 = v231;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v402, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v230 + 24))(v230, &v406, 1, v402);
  if (v403 < 0)
    operator delete(v402[0]);
  v233 = v407;
  if (v407)
  {
    v234 = (unint64_t *)&v407->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  v236 = Scalar;
  Scalar = 0;
  if (v236)
    (*((void (**)(std::__shared_weak_count_vtbl *))v236->~__shared_weak_count + 1))(v236);
  if (v405 < 0)
    operator delete(v404[0]);
  v237 = __p;
  std::string::basic_string[abi:ne180100]<0>(v398, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v398, 0, (uint64_t *)&Scalar);
  v400 = Scalar;
  if (Scalar)
  {
    v238 = (std::__shared_weak_count *)operator new();
    v239 = Scalar;
    v238->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v238->__shared_owners_ = 0;
    v238->__shared_weak_owners_ = 0;
    v238[1].__vftable = v239;
  }
  else
  {
    v238 = 0;
  }
  v401 = v238;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v396, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v237 + 24))(v237, &v400, 0, v396);
  if (v397 < 0)
    operator delete(v396[0]);
  v240 = v401;
  if (v401)
  {
    v241 = (unint64_t *)&v401->__shared_owners_;
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = Scalar;
  Scalar = 0;
  if (v243)
    (*((void (**)(std::__shared_weak_count_vtbl *))v243->~__shared_weak_count + 1))(v243);
  if (v399 < 0)
    operator delete(v398[0]);
  v244 = __p;
  std::string::basic_string[abi:ne180100]<0>(v392, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v392, 0, (uint64_t *)&Scalar);
  v394 = Scalar;
  if (Scalar)
  {
    v245 = (std::__shared_weak_count *)operator new();
    v246 = Scalar;
    v245->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v245->__shared_owners_ = 0;
    v245->__shared_weak_owners_ = 0;
    v245[1].__vftable = v246;
  }
  else
  {
    v245 = 0;
  }
  v395 = v245;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v390, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v244 + 24))(v244, &v394, 1, v390);
  if (v391 < 0)
    operator delete(v390[0]);
  v247 = v395;
  if (v395)
  {
    v248 = (unint64_t *)&v395->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  v250 = Scalar;
  Scalar = 0;
  if (v250)
    (*((void (**)(std::__shared_weak_count_vtbl *))v250->~__shared_weak_count + 1))(v250);
  if (v393 < 0)
    operator delete(v392[0]);
  v251 = __p;
  std::string::basic_string[abi:ne180100]<0>(v386, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v386, 0, (uint64_t *)&Scalar);
  v388 = Scalar;
  if (Scalar)
  {
    v252 = (std::__shared_weak_count *)operator new();
    v253 = Scalar;
    v252->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v252->__shared_owners_ = 0;
    v252->__shared_weak_owners_ = 0;
    v252[1].__vftable = v253;
  }
  else
  {
    v252 = 0;
  }
  v389 = v252;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v384, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v251 + 24))(v251, &v388, 0, v384);
  if (v385 < 0)
    operator delete(v384[0]);
  v254 = v389;
  if (v389)
  {
    v255 = (unint64_t *)&v389->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v257 = Scalar;
  Scalar = 0;
  if (v257)
    (*((void (**)(std::__shared_weak_count_vtbl *))v257->~__shared_weak_count + 1))(v257);
  if (v387 < 0)
    operator delete(v386[0]);
  v258 = __p;
  std::string::basic_string[abi:ne180100]<0>(v380, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v380, 0, (uint64_t *)&Scalar);
  v382 = Scalar;
  if (Scalar)
  {
    v259 = (std::__shared_weak_count *)operator new();
    v260 = Scalar;
    v259->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v259->__shared_owners_ = 0;
    v259->__shared_weak_owners_ = 0;
    v259[1].__vftable = v260;
  }
  else
  {
    v259 = 0;
  }
  v383 = v259;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v378, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v258 + 24))(v258, &v382, 1, v378);
  if (v379 < 0)
    operator delete(v378[0]);
  v261 = v383;
  if (v383)
  {
    v262 = (unint64_t *)&v383->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  v264 = Scalar;
  Scalar = 0;
  if (v264)
    (*((void (**)(std::__shared_weak_count_vtbl *))v264->~__shared_weak_count + 1))(v264);
  if (v381 < 0)
    operator delete(v380[0]);
  v265 = __p;
  std::string::basic_string[abi:ne180100]<0>(v374, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v374, 1, (uint64_t *)&Scalar);
  v376 = Scalar;
  if (Scalar)
  {
    v266 = (std::__shared_weak_count *)operator new();
    v267 = Scalar;
    v266->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v266->__shared_owners_ = 0;
    v266->__shared_weak_owners_ = 0;
    v266[1].__vftable = v267;
  }
  else
  {
    v266 = 0;
  }
  v377 = v266;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v372, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v265 + 24))(v265, &v376, 0, v372);
  if (v373 < 0)
    operator delete(v372[0]);
  v268 = v377;
  if (v377)
  {
    v269 = (unint64_t *)&v377->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v271 = Scalar;
  Scalar = 0;
  if (v271)
    (*((void (**)(std::__shared_weak_count_vtbl *))v271->~__shared_weak_count + 1))(v271);
  if (v375 < 0)
    operator delete(v374[0]);
  v272 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v370 = Scalar;
  if (Scalar)
  {
    v273 = (std::__shared_weak_count *)operator new();
    v274 = Scalar;
    v273->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v273->__shared_owners_ = 0;
    v273->__shared_weak_owners_ = 0;
    v273[1].__vftable = v274;
  }
  else
  {
    v273 = 0;
  }
  v371 = v273;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v368, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v272 + 24))(v272, &v370, 1, v368);
  if (v369 < 0)
    operator delete(v368[0]);
  v275 = v371;
  if (v371)
  {
    v276 = (unint64_t *)&v371->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v278 = Scalar;
  Scalar = 0;
  if (v278)
    (*((void (**)(std::__shared_weak_count_vtbl *))v278->~__shared_weak_count + 1))(v278);
  v279 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v366 = Scalar;
  if (Scalar)
  {
    v280 = (std::__shared_weak_count *)operator new();
    v281 = Scalar;
    v280->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v280->__shared_owners_ = 0;
    v280->__shared_weak_owners_ = 0;
    v280[1].__vftable = v281;
  }
  else
  {
    v280 = 0;
  }
  v367 = v280;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v364, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v279 + 24))(v279, &v366, 2, v364);
  if (v365 < 0)
    operator delete(v364[0]);
  v282 = v367;
  if (v367)
  {
    v283 = (unint64_t *)&v367->__shared_owners_;
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  v285 = Scalar;
  Scalar = 0;
  if (v285)
    (*((void (**)(std::__shared_weak_count_vtbl *))v285->~__shared_weak_count + 1))(v285);
  v286 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v362 = Scalar;
  if (Scalar)
  {
    v287 = (std::__shared_weak_count *)operator new();
    v288 = Scalar;
    v287->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v287->__shared_owners_ = 0;
    v287->__shared_weak_owners_ = 0;
    v287[1].__vftable = v288;
  }
  else
  {
    v287 = 0;
  }
  v363 = v287;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v360, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v286 + 24))(v286, &v362, 0, v360);
  if (v361 < 0)
    operator delete(v360[0]);
  v289 = v363;
  if (v363)
  {
    v290 = (unint64_t *)&v363->__shared_owners_;
    do
      v291 = __ldaxr(v290);
    while (__stlxr(v291 - 1, v290));
    if (!v291)
    {
      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
      std::__shared_weak_count::__release_weak(v289);
    }
  }
  v292 = Scalar;
  Scalar = 0;
  if (v292)
    (*((void (**)(std::__shared_weak_count_vtbl *))v292->~__shared_weak_count + 1))(v292);
  v293 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v358 = Scalar;
  if (Scalar)
  {
    v294 = (std::__shared_weak_count *)operator new();
    v295 = Scalar;
    v294->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v294->__shared_owners_ = 0;
    v294->__shared_weak_owners_ = 0;
    v294[1].__vftable = v295;
  }
  else
  {
    v294 = 0;
  }
  v359 = v294;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v356, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v293 + 24))(v293, &v358, 1, v356);
  if (v357 < 0)
    operator delete(v356[0]);
  v296 = v359;
  if (v359)
  {
    v297 = (unint64_t *)&v359->__shared_owners_;
    do
      v298 = __ldaxr(v297);
    while (__stlxr(v298 - 1, v297));
    if (!v298)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  v299 = Scalar;
  Scalar = 0;
  if (v299)
    (*((void (**)(std::__shared_weak_count_vtbl *))v299->~__shared_weak_count + 1))(v299);
  v300 = *a3;
  v354 = __p;
  if (__p)
  {
    v301 = (std::__shared_weak_count *)operator new();
    v302 = (std::__shared_weak_count_vtbl *)__p;
    v301->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v301->__shared_owners_ = 0;
    v301->__shared_weak_owners_ = 0;
    v301[1].__vftable = v302;
  }
  else
  {
    v301 = 0;
  }
  v355 = v301;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v300 + 56))(v300, &v354);
  v303 = v355;
  if (v355)
  {
    v304 = (unint64_t *)&v355->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  v306 = __p;
  __p = 0;
  if (v306)
    (*(void (**)(void *))(*(_QWORD *)v306 + 8))(v306);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v510);
  v307 = v510;
  std::string::basic_string[abi:ne180100]<0>(v350, "direction");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v350, 0, &v478);
  v352 = v478;
  if (v478)
  {
    v308 = (std::__shared_weak_count *)operator new();
    v309 = v478;
    v308->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v308->__shared_owners_ = 0;
    v308->__shared_weak_owners_ = 0;
    v308[1].__vftable = (std::__shared_weak_count_vtbl *)v309;
  }
  else
  {
    v308 = 0;
  }
  v353 = v308;
  v478 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "forward");
  std::string::basic_string[abi:ne180100]<0>(&v493, "reverse");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 2);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v307 + 24))(v307, &v352, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (*(&v495 + i * 8) < 0)
      operator delete((&v493)[i]);
  }
  v311 = v353;
  if (v353)
  {
    v312 = (unint64_t *)&v353->__shared_owners_;
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
  v314 = v478;
  v478 = 0;
  if (v314)
    (*(void (**)(uint64_t))(*(_QWORD *)v314 + 8))(v314);
  if (v351 < 0)
    operator delete(v350[0]);
  v315 = v510;
  std::string::basic_string[abi:ne180100]<0>(v346, "recurrent_activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v346, 0, &v478);
  v348 = v478;
  if (v478)
  {
    v316 = (std::__shared_weak_count *)operator new();
    v317 = v478;
    v316->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v316->__shared_owners_ = 0;
    v316->__shared_weak_owners_ = 0;
    v316[1].__vftable = (std::__shared_weak_count_vtbl *)v317;
  }
  else
  {
    v316 = 0;
  }
  v349 = v316;
  v478 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v493, "linear");
  std::string::basic_string[abi:ne180100]<0>(v496, "relu");
  std::string::basic_string[abi:ne180100]<0>(v497, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v498, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v499, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v315 + 24))(v315, &v348, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v499[j + 2]) < 0)
      operator delete((void *)v499[j]);
  }
  v319 = v349;
  if (v349)
  {
    v320 = (unint64_t *)&v349->__shared_owners_;
    do
      v321 = __ldaxr(v320);
    while (__stlxr(v321 - 1, v320));
    if (!v321)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v319);
    }
  }
  v322 = v478;
  v478 = 0;
  if (v322)
    (*(void (**)(uint64_t))(*(_QWORD *)v322 + 8))(v322);
  if (v347 < 0)
    operator delete(v346[0]);
  v323 = v510;
  std::string::basic_string[abi:ne180100]<0>(v342, "activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v342, 0, &v478);
  v344 = v478;
  if (v478)
  {
    v324 = (std::__shared_weak_count *)operator new();
    v325 = v478;
    v324->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v324->__shared_owners_ = 0;
    v324->__shared_weak_owners_ = 0;
    v324[1].__vftable = (std::__shared_weak_count_vtbl *)v325;
  }
  else
  {
    v324 = 0;
  }
  v345 = v324;
  v478 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v493, "linear");
  std::string::basic_string[abi:ne180100]<0>(v496, "relu");
  std::string::basic_string[abi:ne180100]<0>(v497, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v498, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v499, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v323 + 24))(v323, &v344, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -18; k -= 3)
  {
    if (SHIBYTE(v499[k + 2]) < 0)
      operator delete((void *)v499[k]);
  }
  v327 = v345;
  if (v345)
  {
    v328 = (unint64_t *)&v345->__shared_owners_;
    do
      v329 = __ldaxr(v328);
    while (__stlxr(v329 - 1, v328));
    if (!v329)
    {
      ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
      std::__shared_weak_count::__release_weak(v327);
    }
  }
  v330 = v478;
  v478 = 0;
  if (v330)
    (*(void (**)(uint64_t))(*(_QWORD *)v330 + 8))(v330);
  if (v343 < 0)
    operator delete(v342[0]);
  v331 = *a3;
  v340 = v510;
  if (v510)
  {
    v332 = (std::__shared_weak_count *)operator new();
    v333 = v510;
    v332->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v332->__shared_owners_ = 0;
    v332->__shared_weak_owners_ = 0;
    v332[1].__vftable = (std::__shared_weak_count_vtbl *)v333;
  }
  else
  {
    v332 = 0;
  }
  v341 = v332;
  v510 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v331 + 56))(v331, &v340);
  v334 = v341;
  if (v341)
  {
    v335 = (unint64_t *)&v341->__shared_owners_;
    do
      v336 = __ldaxr(v335);
    while (__stlxr(v336 - 1, v335));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
    }
  }
  v337 = v510;
  v510 = 0;
  if (v337)
    (*(void (**)(uint64_t))(*(_QWORD *)v337 + 8))(v337);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v479, 0);
  result = (uint64_t)v489;
  if (v489)
  {
    v339 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v489);
    return MEMORY[0x1E0C023A0](v339, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07975D4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 104);
  *(_QWORD *)(v2 - 104) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x5C8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x660], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Lstm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned __int8 *v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unsigned __int8 *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  unsigned __int8 *v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  unsigned __int8 *v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unsigned __int8 *v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unsigned __int8 *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  unsigned __int8 *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  unsigned __int8 *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  unsigned __int8 *v100;
  void *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  unsigned __int8 *v106;
  void *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  unsigned __int8 *v112;
  void *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  unsigned __int8 *v118;
  void *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  unsigned __int8 *v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  unsigned __int8 *v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  char **v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count_vtbl *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t *v153;
  char *v154;
  char *v155;
  char *v156;
  __int128 v157;
  char *v158;
  char *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  char **v164;
  uint64_t v165;
  uint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t *v180;
  char *v181;
  char *v182;
  char *v183;
  __int128 v184;
  char *v185;
  char *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  char **v191;
  uint64_t v192;
  uint64_t v193;
  std::__shared_weak_count_vtbl *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t *v207;
  char *v208;
  char *v209;
  char *v210;
  __int128 v211;
  char *v212;
  char *v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  char **v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  void *v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  unint64_t *p_shared_owners;
  unint64_t v240;
  std::__shared_weak_count_vtbl *v241;
  void *v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count_vtbl *v248;
  void *v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count_vtbl *v255;
  void *v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count_vtbl *v262;
  void *v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count_vtbl *v269;
  void *v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count_vtbl *v276;
  void *v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count_vtbl *v283;
  void *v284;
  std::__shared_weak_count *v285;
  std::__shared_weak_count_vtbl *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count_vtbl *v290;
  void *v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count_vtbl *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count_vtbl *v297;
  void *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count_vtbl *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count_vtbl *v304;
  void *v305;
  std::__shared_weak_count *v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count_vtbl *v311;
  void *v312;
  std::__shared_weak_count *v313;
  std::__shared_weak_count_vtbl *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count_vtbl *v318;
  void *v319;
  std::__shared_weak_count *v320;
  std::__shared_weak_count_vtbl *v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count_vtbl *v325;
  void *v326;
  std::__shared_weak_count *v327;
  std::__shared_weak_count_vtbl *v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count_vtbl *v332;
  void *v333;
  std::__shared_weak_count *v334;
  std::__shared_weak_count_vtbl *v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count_vtbl *v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  std::__shared_weak_count_vtbl *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  void *v346;
  void *v347;
  std::__shared_weak_count *v348;
  std::__shared_weak_count_vtbl *v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count_vtbl *v353;
  void *v354;
  std::__shared_weak_count *v355;
  std::__shared_weak_count_vtbl *v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count_vtbl *v360;
  void *v361;
  std::__shared_weak_count *v362;
  std::__shared_weak_count_vtbl *v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count_vtbl *v367;
  void *v368;
  std::__shared_weak_count *v369;
  std::__shared_weak_count_vtbl *v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count_vtbl *v374;
  void *v375;
  std::__shared_weak_count *v376;
  std::__shared_weak_count_vtbl *v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count_vtbl *v381;
  void *v382;
  std::__shared_weak_count *v383;
  std::__shared_weak_count_vtbl *v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  std::__shared_weak_count_vtbl *v388;
  void *v389;
  std::__shared_weak_count *v390;
  std::__shared_weak_count_vtbl *v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count_vtbl *v395;
  void *v396;
  std::__shared_weak_count *v397;
  std::__shared_weak_count_vtbl *v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count_vtbl *v402;
  void *v403;
  std::__shared_weak_count *v404;
  std::__shared_weak_count_vtbl *v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  std::__shared_weak_count_vtbl *v409;
  void *v410;
  std::__shared_weak_count *v411;
  std::__shared_weak_count_vtbl *v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  std::__shared_weak_count_vtbl *v416;
  void *v417;
  std::__shared_weak_count *v418;
  std::__shared_weak_count_vtbl *v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  std::__shared_weak_count_vtbl *v423;
  void *v424;
  std::__shared_weak_count *v425;
  std::__shared_weak_count_vtbl *v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  std::__shared_weak_count_vtbl *v430;
  void *v431;
  std::__shared_weak_count *v432;
  std::__shared_weak_count_vtbl *v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  std::__shared_weak_count_vtbl *v437;
  void *v438;
  std::__shared_weak_count *v439;
  std::__shared_weak_count_vtbl *v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  std::__shared_weak_count_vtbl *v444;
  void *v445;
  std::__shared_weak_count *v446;
  std::__shared_weak_count_vtbl *v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  std::__shared_weak_count_vtbl *v451;
  void *v452;
  std::__shared_weak_count *v453;
  std::__shared_weak_count_vtbl *v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count_vtbl *v458;
  void *v459;
  std::__shared_weak_count *v460;
  std::__shared_weak_count_vtbl *v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  std::__shared_weak_count_vtbl *v465;
  void *v466;
  std::__shared_weak_count *v467;
  std::__shared_weak_count_vtbl *v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  std::__shared_weak_count_vtbl *v472;
  void *v473;
  std::__shared_weak_count *v474;
  std::__shared_weak_count_vtbl *v475;
  std::__shared_weak_count *v476;
  unint64_t *v477;
  unint64_t v478;
  std::__shared_weak_count_vtbl *v479;
  void *v480;
  std::__shared_weak_count *v481;
  std::__shared_weak_count_vtbl *v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  std::__shared_weak_count_vtbl *v486;
  void *v487;
  std::__shared_weak_count *v488;
  std::__shared_weak_count_vtbl *v489;
  std::__shared_weak_count *v490;
  unint64_t *v491;
  unint64_t v492;
  std::__shared_weak_count_vtbl *v493;
  void *v494;
  std::__shared_weak_count *v495;
  std::__shared_weak_count_vtbl *v496;
  std::__shared_weak_count *v497;
  unint64_t *v498;
  unint64_t v499;
  std::__shared_weak_count_vtbl *v500;
  void *v501;
  std::__shared_weak_count *v502;
  std::__shared_weak_count_vtbl *v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  std::__shared_weak_count_vtbl *v507;
  void *v508;
  std::__shared_weak_count *v509;
  std::__shared_weak_count_vtbl *v510;
  std::__shared_weak_count *v511;
  unint64_t *v512;
  unint64_t v513;
  std::__shared_weak_count_vtbl *v514;
  void *v515;
  std::__shared_weak_count *v516;
  std::__shared_weak_count_vtbl *v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  std::__shared_weak_count_vtbl *v521;
  uint64_t v522;
  std::__shared_weak_count *v523;
  std::__shared_weak_count_vtbl *v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  void *v528;
  uint64_t v529;
  std::__shared_weak_count *v530;
  uint64_t v531;
  uint64_t i;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  std::__shared_weak_count *v538;
  uint64_t v539;
  uint64_t j;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t v545;
  std::__shared_weak_count *v546;
  uint64_t v547;
  uint64_t k;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  std::__shared_weak_count *v554;
  uint64_t v555;
  uint64_t m;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  std::__shared_weak_count *v562;
  uint64_t v563;
  std::__shared_weak_count *v564;
  unint64_t *v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t result;
  uint64_t v569;
  uint64_t v570;
  std::__shared_weak_count *v571;
  void *v572[2];
  char v573;
  uint64_t v574;
  std::__shared_weak_count *v575;
  void *v576[2];
  char v577;
  uint64_t v578;
  std::__shared_weak_count *v579;
  void *v580[2];
  char v581;
  uint64_t v582;
  std::__shared_weak_count *v583;
  void *v584[2];
  char v585;
  uint64_t v586;
  std::__shared_weak_count *v587;
  void *v588;
  std::__shared_weak_count *v589;
  void *v590[2];
  char v591;
  std::__shared_weak_count_vtbl *v592;
  std::__shared_weak_count *v593;
  void *v594[2];
  char v595;
  std::__shared_weak_count_vtbl *v596;
  std::__shared_weak_count *v597;
  void *v598[2];
  char v599;
  std::__shared_weak_count_vtbl *v600;
  std::__shared_weak_count *v601;
  void *v602[2];
  char v603;
  std::__shared_weak_count_vtbl *v604;
  std::__shared_weak_count *v605;
  void *v606[2];
  char v607;
  std::__shared_weak_count_vtbl *v608;
  std::__shared_weak_count *v609;
  void *v610[2];
  char v611;
  std::__shared_weak_count_vtbl *v612;
  std::__shared_weak_count *v613;
  void *v614[2];
  char v615;
  void *v616[2];
  char v617;
  std::__shared_weak_count_vtbl *v618;
  std::__shared_weak_count *v619;
  void *v620[2];
  char v621;
  void *v622[2];
  char v623;
  std::__shared_weak_count_vtbl *v624;
  std::__shared_weak_count *v625;
  void *v626[2];
  char v627;
  void *v628[2];
  char v629;
  std::__shared_weak_count_vtbl *v630;
  std::__shared_weak_count *v631;
  void *v632[2];
  char v633;
  void *v634[2];
  char v635;
  std::__shared_weak_count_vtbl *v636;
  std::__shared_weak_count *v637;
  void *v638[2];
  char v639;
  void *v640[2];
  char v641;
  std::__shared_weak_count_vtbl *v642;
  std::__shared_weak_count *v643;
  void *v644[2];
  char v645;
  void *v646[2];
  char v647;
  std::__shared_weak_count_vtbl *v648;
  std::__shared_weak_count *v649;
  void *v650[2];
  char v651;
  void *v652[2];
  char v653;
  std::__shared_weak_count_vtbl *v654;
  std::__shared_weak_count *v655;
  void *v656[2];
  char v657;
  void *v658[2];
  char v659;
  std::__shared_weak_count_vtbl *v660;
  std::__shared_weak_count *v661;
  void *v662[2];
  char v663;
  void *v664[2];
  char v665;
  std::__shared_weak_count_vtbl *v666;
  std::__shared_weak_count *v667;
  void *v668[2];
  char v669;
  void *v670[2];
  char v671;
  std::__shared_weak_count_vtbl *v672;
  std::__shared_weak_count *v673;
  void *v674[2];
  char v675;
  void *v676[2];
  char v677;
  std::__shared_weak_count_vtbl *v678;
  std::__shared_weak_count *v679;
  void *v680[2];
  char v681;
  void *v682[2];
  char v683;
  std::__shared_weak_count_vtbl *v684;
  std::__shared_weak_count *v685;
  void *v686[2];
  char v687;
  void *v688[2];
  char v689;
  std::__shared_weak_count_vtbl *v690;
  std::__shared_weak_count *v691;
  void *v692[2];
  char v693;
  void *v694[2];
  char v695;
  std::__shared_weak_count_vtbl *v696;
  std::__shared_weak_count *v697;
  void *v698[2];
  char v699;
  void *v700[2];
  char v701;
  std::__shared_weak_count_vtbl *v702;
  std::__shared_weak_count *v703;
  void *v704[2];
  char v705;
  void *v706[2];
  char v707;
  std::__shared_weak_count_vtbl *v708;
  std::__shared_weak_count *v709;
  void *v710[2];
  char v711;
  void *v712[2];
  char v713;
  std::__shared_weak_count_vtbl *v714;
  std::__shared_weak_count *v715;
  void *v716[2];
  char v717;
  void *v718[2];
  char v719;
  std::__shared_weak_count_vtbl *v720;
  std::__shared_weak_count *v721;
  void *v722[2];
  char v723;
  void *v724[2];
  char v725;
  std::__shared_weak_count_vtbl *v726;
  std::__shared_weak_count *v727;
  void *v728;
  std::__shared_weak_count *v729;
  void *v730[2];
  char v731;
  std::__shared_weak_count_vtbl *v732;
  std::__shared_weak_count *v733;
  void *v734[2];
  char v735;
  std::__shared_weak_count_vtbl *v736;
  std::__shared_weak_count *v737;
  void *v738[2];
  char v739;
  std::__shared_weak_count_vtbl *v740;
  std::__shared_weak_count *v741;
  void *v742[2];
  char v743;
  void *v744[2];
  char v745;
  std::__shared_weak_count_vtbl *v746;
  std::__shared_weak_count *v747;
  void *v748[2];
  char v749;
  void *v750[2];
  char v751;
  std::__shared_weak_count_vtbl *v752;
  std::__shared_weak_count *v753;
  void *v754[2];
  char v755;
  void *v756[2];
  char v757;
  std::__shared_weak_count_vtbl *v758;
  std::__shared_weak_count *v759;
  void *v760[2];
  char v761;
  void *v762[2];
  char v763;
  std::__shared_weak_count_vtbl *v764;
  std::__shared_weak_count *v765;
  void *v766[2];
  char v767;
  void *v768[2];
  char v769;
  std::__shared_weak_count_vtbl *v770;
  std::__shared_weak_count *v771;
  void *v772[2];
  char v773;
  void *v774[2];
  char v775;
  std::__shared_weak_count_vtbl *v776;
  std::__shared_weak_count *v777;
  void *v778[2];
  char v779;
  void *v780[2];
  char v781;
  std::__shared_weak_count_vtbl *v782;
  std::__shared_weak_count *v783;
  void *v784[2];
  char v785;
  void *v786[2];
  char v787;
  std::__shared_weak_count_vtbl *v788;
  std::__shared_weak_count *v789;
  void *v790[2];
  char v791;
  void *v792[2];
  char v793;
  std::__shared_weak_count_vtbl *v794;
  std::__shared_weak_count *v795;
  void *v796[2];
  char v797;
  void *v798[2];
  char v799;
  std::__shared_weak_count_vtbl *v800;
  std::__shared_weak_count *v801;
  void *v802[2];
  char v803;
  void *v804[2];
  char v805;
  std::__shared_weak_count_vtbl *v806;
  std::__shared_weak_count *v807;
  void *v808[2];
  char v809;
  void *v810[2];
  char v811;
  std::__shared_weak_count_vtbl *v812;
  std::__shared_weak_count *v813;
  __int128 v814;
  __int128 v815;
  void *v816[2];
  uint64_t v817;
  __n128 v818;
  __n128 v819;
  __n128 v820;
  uint64_t v821;
  char **v822;
  __n128 v823;
  __n128 v824;
  __n128 v825;
  __n128 v826;
  __n128 v827;
  __n128 v828;
  __n128 v829;
  __n128 v830;
  __n128 v831;
  __n128 v832;
  __n128 v833;
  __n128 v834;
  __n128 v835;
  __n128 v836;
  __n128 v837;
  __n128 v838;
  __n128 v839;
  _QWORD *v840;
  void *__p;
  void *v842;
  char *v843;
  char *v844;
  char **v845;
  _QWORD v846[3];
  _QWORD v847[3];
  _QWORD v848[3];
  _QWORD v849[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *p_on_zero_shared;
  _QWORD v853[3];
  _QWORD *v854;
  _BYTE v855[24];
  _BYTE *v856;
  _QWORD v857[3];
  _QWORD *v858;
  uint64_t v859;
  uint64_t v860;
  _QWORD *v861;
  uint64_t v862;

  v862 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v840 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (char *)operator new(0x18uLL);
  v843 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  v842 = v10 + 24;
  v860 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v860, 1, &v839);
  MIL::IRParameter::Make(&v839, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v11 = Scalar;
  Scalar = 0;
  if (v11)
    (*((void (**)(std::__shared_weak_count_vtbl *))v11->~__shared_weak_count + 1))(v11);
  v12 = (std::__shared_weak_count *)v839.n128_u64[1];
  if (v839.n128_u64[1])
  {
    v13 = (unint64_t *)(v839.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v842 = __p;
    operator delete(__p);
  }
  v15 = v840;
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = (char *)operator new(0x10uLL);
  v843 = v18 + 16;
  *(_QWORD *)v18 = v16;
  *((_QWORD *)v18 + 1) = v17;
  __p = v18;
  v842 = v18 + 16;
  v860 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v860, 1, &v838);
  MIL::IRParameter::Make(&v838, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v15, "initial_h", (uint64_t *)&Scalar);
  v19 = Scalar;
  Scalar = 0;
  if (v19)
    (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  v20 = (std::__shared_weak_count *)v838.n128_u64[1];
  if (v838.n128_u64[1])
  {
    v21 = (unint64_t *)(v838.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v842 = __p;
    operator delete(__p);
  }
  v23 = v840;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (char *)operator new(0x10uLL);
  v843 = v26 + 16;
  *(_QWORD *)v26 = v24;
  *((_QWORD *)v26 + 1) = v25;
  __p = v26;
  v842 = v26 + 16;
  v860 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v860, 1, &v837);
  MIL::IRParameter::Make(&v837, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v23, "initial_c", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = (std::__shared_weak_count *)v837.n128_u64[1];
  if (v837.n128_u64[1])
  {
    v29 = (unint64_t *)(v837.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (__p)
  {
    v842 = __p;
    operator delete(__p);
  }
  v31 = v840;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = (char *)operator new(0x10uLL);
  v843 = v34 + 16;
  *(_QWORD *)v34 = v32;
  *((_QWORD *)v34 + 1) = v33;
  __p = v34;
  v842 = v34 + 16;
  v860 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v860, 1, &v836);
  MIL::IRParameter::Make(&v836, (uint64_t *)&Scalar);
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v31, "weight_ih", (uint64_t *)&Scalar);
  v36 = Scalar;
  Scalar = 0;
  if (v36)
    (*((void (**)(std::__shared_weak_count_vtbl *))v36->~__shared_weak_count + 1))(v36);
  v37 = (std::__shared_weak_count *)v836.n128_u64[1];
  if (v836.n128_u64[1])
  {
    v38 = (unint64_t *)(v836.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (__p)
  {
    v842 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  v40 = v840;
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (char *)operator new(0x10uLL);
  v843 = v43 + 16;
  *(_QWORD *)v43 = v41;
  *((_QWORD *)v43 + 1) = v42;
  __p = v43;
  v842 = v43 + 16;
  v860 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v860, 1, &v835);
  MIL::IRParameter::Make(&v835, (uint64_t *)&Scalar);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v40, "weight_hh", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = (std::__shared_weak_count *)v835.n128_u64[1];
  if (v835.n128_u64[1])
  {
    v47 = (unint64_t *)(v835.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (__p)
  {
    v842 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  v49 = v840;
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = (char *)operator new(8uLL);
  __p = v51;
  *(_QWORD *)v51 = v50;
  v843 = v51 + 8;
  v842 = v51 + 8;
  v860 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v860, 1, &v834);
  MIL::IRParameter::Make(&v834, (uint64_t *)&Scalar);
  v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v49, "bias", (uint64_t *)&Scalar);
  v53 = Scalar;
  Scalar = 0;
  if (v53)
    (*((void (**)(std::__shared_weak_count_vtbl *))v53->~__shared_weak_count + 1))(v53);
  v54 = (std::__shared_weak_count *)v834.n128_u64[1];
  if (v834.n128_u64[1])
  {
    v55 = (unint64_t *)(v834.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (__p)
  {
    v842 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v52 + 5) + 32))(*((_QWORD *)v52 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v52 + 5) + 48))(*((_QWORD *)v52 + 5), 1);
  v57 = v840;
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = (char *)operator new(8uLL);
  __p = v59;
  *(_QWORD *)v59 = v58;
  v843 = v59 + 8;
  v842 = v59 + 8;
  v860 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v860, 1, &v833);
  MIL::IRParameter::Make(&v833, (uint64_t *)&Scalar);
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v57, "peephole", (uint64_t *)&Scalar);
  v61 = Scalar;
  Scalar = 0;
  if (v61)
    (*((void (**)(std::__shared_weak_count_vtbl *))v61->~__shared_weak_count + 1))(v61);
  v62 = (std::__shared_weak_count *)v833.n128_u64[1];
  if (v833.n128_u64[1])
  {
    v63 = (unint64_t *)(v833.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (__p)
  {
    v842 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 48))(*((_QWORD *)v60 + 5), 1);
  v65 = v840;
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = (char *)operator new(0x10uLL);
  v843 = v68 + 16;
  *(_QWORD *)v68 = v66;
  *((_QWORD *)v68 + 1) = v67;
  __p = v68;
  v842 = v68 + 16;
  v860 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v860, 1, &v832);
  MIL::IRParameter::Make(&v832, (uint64_t *)&Scalar);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v65, "weight_ih_back", (uint64_t *)&Scalar);
  v70 = Scalar;
  Scalar = 0;
  if (v70)
    (*((void (**)(std::__shared_weak_count_vtbl *))v70->~__shared_weak_count + 1))(v70);
  v71 = (std::__shared_weak_count *)v832.n128_u64[1];
  if (v832.n128_u64[1])
  {
    v72 = (unint64_t *)(v832.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (__p)
  {
    v842 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = v840;
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = (char *)operator new(0x10uLL);
  v843 = v77 + 16;
  *(_QWORD *)v77 = v75;
  *((_QWORD *)v77 + 1) = v76;
  __p = v77;
  v842 = v77 + 16;
  v860 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v860, 1, &v831);
  MIL::IRParameter::Make(&v831, (uint64_t *)&Scalar);
  v78 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v74, "weight_hh_back", (uint64_t *)&Scalar);
  v79 = Scalar;
  Scalar = 0;
  if (v79)
    (*((void (**)(std::__shared_weak_count_vtbl *))v79->~__shared_weak_count + 1))(v79);
  v80 = (std::__shared_weak_count *)v831.n128_u64[1];
  if (v831.n128_u64[1])
  {
    v81 = (unint64_t *)(v831.n128_u64[1] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (__p)
  {
    v842 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 32))(*((_QWORD *)v78 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 48))(*((_QWORD *)v78 + 5), 1);
  v83 = v840;
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = (char *)operator new(8uLL);
  __p = v85;
  *(_QWORD *)v85 = v84;
  v843 = v85 + 8;
  v842 = v85 + 8;
  v860 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v860, 1, &v830);
  MIL::IRParameter::Make(&v830, (uint64_t *)&Scalar);
  v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v83, "bias_back", (uint64_t *)&Scalar);
  v87 = Scalar;
  Scalar = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  v88 = (std::__shared_weak_count *)v830.n128_u64[1];
  if (v830.n128_u64[1])
  {
    v89 = (unint64_t *)(v830.n128_u64[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (__p)
  {
    v842 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v86 + 5) + 32))(*((_QWORD *)v86 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v86 + 5) + 48))(*((_QWORD *)v86 + 5), 1);
  v91 = v840;
  v92 = MIL::IRUnknownDimension::Make(a1, 0);
  v93 = (char *)operator new(8uLL);
  __p = v93;
  *(_QWORD *)v93 = v92;
  v843 = v93 + 8;
  v842 = v93 + 8;
  v860 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v860, 1, &v829);
  MIL::IRParameter::Make(&v829, (uint64_t *)&Scalar);
  v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v91, "peephole_back", (uint64_t *)&Scalar);
  v95 = Scalar;
  Scalar = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  v96 = (std::__shared_weak_count *)v829.n128_u64[1];
  if (v829.n128_u64[1])
  {
    v97 = (unint64_t *)(v829.n128_u64[1] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (__p)
  {
    v842 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v94 + 5) + 32))(*((_QWORD *)v94 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v94 + 5) + 48))(*((_QWORD *)v94 + 5), 1);
  v99 = v840;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v828);
  MIL::IRParameter::Make(&v828, (uint64_t *)&__p);
  v100 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v99, "direction", (uint64_t *)&__p);
  v101 = __p;
  __p = 0;
  if (v101)
    (*(void (**)(void *))(*(_QWORD *)v101 + 8))(v101);
  v102 = (std::__shared_weak_count *)v828.n128_u64[1];
  if (v828.n128_u64[1])
  {
    v103 = (unint64_t *)(v828.n128_u64[1] + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v100 + 5) + 32))(*((_QWORD *)v100 + 5), 1);
  v105 = v840;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v827);
  MIL::IRParameter::Make(&v827, (uint64_t *)&__p);
  v106 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v105, "output_sequence", (uint64_t *)&__p);
  v107 = __p;
  __p = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  v108 = (std::__shared_weak_count *)v827.n128_u64[1];
  if (v827.n128_u64[1])
  {
    v109 = (unint64_t *)(v827.n128_u64[1] + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v106 + 5) + 32))(*((_QWORD *)v106 + 5), 1);
  v111 = v840;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v826);
  MIL::IRParameter::Make(&v826, (uint64_t *)&__p);
  v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v111, "recurrent_activation", (uint64_t *)&__p);
  v113 = __p;
  __p = 0;
  if (v113)
    (*(void (**)(void *))(*(_QWORD *)v113 + 8))(v113);
  v114 = (std::__shared_weak_count *)v826.n128_u64[1];
  if (v826.n128_u64[1])
  {
    v115 = (unint64_t *)(v826.n128_u64[1] + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v112 + 5) + 32))(*((_QWORD *)v112 + 5), 1);
  v117 = v840;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v825);
  MIL::IRParameter::Make(&v825, (uint64_t *)&__p);
  v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v117, "cell_activation", (uint64_t *)&__p);
  v119 = __p;
  __p = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  v120 = (std::__shared_weak_count *)v825.n128_u64[1];
  if (v825.n128_u64[1])
  {
    v121 = (unint64_t *)(v825.n128_u64[1] + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v118 + 5) + 32))(*((_QWORD *)v118 + 5), 1);
  v123 = v840;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v824);
  MIL::IRParameter::Make(&v824, (uint64_t *)&__p);
  v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v123, "activation", (uint64_t *)&__p);
  v125 = __p;
  __p = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  v126 = (std::__shared_weak_count *)v824.n128_u64[1];
  if (v824.n128_u64[1])
  {
    v127 = (unint64_t *)(v824.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v124 + 5) + 32))(*((_QWORD *)v124 + 5), 1);
  v129 = v840;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v823);
  MIL::IRParameter::Make(&v823, (uint64_t *)&__p);
  v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v129, "clip", (uint64_t *)&__p);
  v131 = __p;
  __p = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  v132 = (std::__shared_weak_count *)v823.n128_u64[1];
  if (v823.n128_u64[1])
  {
    v133 = (unint64_t *)(v823.n128_u64[1] + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v130 + 5) + 32))(*((_QWORD *)v130 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v130 + 5) + 48))(*((_QWORD *)v130 + 5), 1);
  v822 = 0;
  v135 = operator new();
  *(_QWORD *)v135 = 0;
  *(_QWORD *)(v135 + 8) = 0;
  *(_QWORD *)(v135 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v822, (void **)v135);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v822, 3uLL);
  v136 = v822;
  v137 = MIL::IRUnknownDimension::Make(a1, 0);
  v138 = MIL::IRUnknownDimension::Make(a1, 0);
  v139 = MIL::IRUnknownDimension::Make(a1, 0);
  v140 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v140->__get_deleter;
  p_on_zero_shared = &v140->__get_deleter;
  v140->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v137;
  v140->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v138;
  v140->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v139;
  Scalar = v140;
  v859 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v859, 1, &v820);
  MIL::IRParameter::Make(&v820, &v821);
  v141 = v821;
  v860 = v821;
  if (v821)
  {
    v142 = (_QWORD *)operator new();
    v143 = v821;
    *v142 = &unk_1EA99F888;
    v142[1] = 0;
    v142[2] = 0;
    v142[3] = v143;
  }
  else
  {
    v142 = 0;
  }
  v861 = v142;
  v821 = 0;
  v144 = v136[2];
  v145 = v136[1];
  if (v145 >= v144)
  {
    v147 = (v145 - *v136) >> 4;
    v148 = v147 + 1;
    if ((unint64_t)(v147 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v149 = v144 - *v136;
    if (v149 >> 3 > v148)
      v148 = v149 >> 3;
    if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF0)
      v150 = 0xFFFFFFFFFFFFFFFLL;
    else
      v150 = v148;
    v845 = v136 + 2;
    v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v136 + 2), v150);
    v153 = (uint64_t *)&v151[16 * v147];
    *v153 = v141;
    v153[1] = (uint64_t)v142;
    v860 = 0;
    v861 = 0;
    v155 = *v136;
    v154 = v136[1];
    if (v154 == *v136)
    {
      v158 = v136[1];
      v156 = &v151[16 * v147];
    }
    else
    {
      v156 = &v151[16 * v147];
      do
      {
        v157 = *((_OWORD *)v154 - 1);
        v154 -= 16;
        *((_OWORD *)v156 - 1) = v157;
        v156 -= 16;
        *(_QWORD *)v154 = 0;
        *((_QWORD *)v154 + 1) = 0;
      }
      while (v154 != v155);
      v158 = *v136;
      v154 = v136[1];
    }
    v146 = (char *)(v153 + 2);
    *v136 = v156;
    v842 = v158;
    v136[1] = (char *)(v153 + 2);
    v843 = v154;
    v159 = v136[2];
    v136[2] = &v151[16 * v152];
    v844 = v159;
    __p = v158;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v145 = v141;
    *((_QWORD *)v145 + 1) = v142;
    v146 = v145 + 16;
    v860 = 0;
    v861 = 0;
  }
  v136[1] = v146;
  v160 = v821;
  v821 = 0;
  if (v160)
    (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
  v161 = (std::__shared_weak_count *)v820.n128_u64[1];
  if (v820.n128_u64[1])
  {
    v162 = (unint64_t *)(v820.n128_u64[1] + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  v164 = v822;
  v165 = MIL::IRUnknownDimension::Make(a1, 0);
  v166 = MIL::IRUnknownDimension::Make(a1, 0);
  v167 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v167->__on_zero_shared;
  p_on_zero_shared = &v167->__on_zero_shared;
  v167->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v165;
  v167->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v166;
  Scalar = v167;
  v859 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v859, 1, &v819);
  MIL::IRParameter::Make(&v819, &v821);
  v168 = v821;
  v860 = v821;
  if (v821)
  {
    v169 = (_QWORD *)operator new();
    v170 = v821;
    *v169 = &unk_1EA99F888;
    v169[1] = 0;
    v169[2] = 0;
    v169[3] = v170;
  }
  else
  {
    v169 = 0;
  }
  v861 = v169;
  v821 = 0;
  v171 = v164[2];
  v172 = v164[1];
  if (v172 >= v171)
  {
    v174 = (v172 - *v164) >> 4;
    v175 = v174 + 1;
    if ((unint64_t)(v174 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v176 = v171 - *v164;
    if (v176 >> 3 > v175)
      v175 = v176 >> 3;
    if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF0)
      v177 = 0xFFFFFFFFFFFFFFFLL;
    else
      v177 = v175;
    v845 = v164 + 2;
    v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v164 + 2), v177);
    v180 = (uint64_t *)&v178[16 * v174];
    *v180 = v168;
    v180[1] = (uint64_t)v169;
    v860 = 0;
    v861 = 0;
    v182 = *v164;
    v181 = v164[1];
    if (v181 == *v164)
    {
      v185 = v164[1];
      v183 = &v178[16 * v174];
    }
    else
    {
      v183 = &v178[16 * v174];
      do
      {
        v184 = *((_OWORD *)v181 - 1);
        v181 -= 16;
        *((_OWORD *)v183 - 1) = v184;
        v183 -= 16;
        *(_QWORD *)v181 = 0;
        *((_QWORD *)v181 + 1) = 0;
      }
      while (v181 != v182);
      v185 = *v164;
      v181 = v164[1];
    }
    v173 = (char *)(v180 + 2);
    *v164 = v183;
    v842 = v185;
    v164[1] = (char *)(v180 + 2);
    v843 = v181;
    v186 = v164[2];
    v164[2] = &v178[16 * v179];
    v844 = v186;
    __p = v185;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v172 = v168;
    *((_QWORD *)v172 + 1) = v169;
    v173 = v172 + 16;
    v860 = 0;
    v861 = 0;
  }
  v164[1] = v173;
  v187 = v821;
  v821 = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  v188 = (std::__shared_weak_count *)v819.n128_u64[1];
  if (v819.n128_u64[1])
  {
    v189 = (unint64_t *)(v819.n128_u64[1] + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  v191 = v822;
  v192 = MIL::IRUnknownDimension::Make(a1, 0);
  v193 = MIL::IRUnknownDimension::Make(a1, 0);
  v194 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v194->__on_zero_shared;
  p_on_zero_shared = &v194->__on_zero_shared;
  v194->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v192;
  v194->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v193;
  Scalar = v194;
  v859 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v859, 1, &v818);
  MIL::IRParameter::Make(&v818, &v821);
  v195 = v821;
  v860 = v821;
  if (v821)
  {
    v196 = (_QWORD *)operator new();
    v197 = v821;
    *v196 = &unk_1EA99F888;
    v196[1] = 0;
    v196[2] = 0;
    v196[3] = v197;
  }
  else
  {
    v196 = 0;
  }
  v861 = v196;
  v821 = 0;
  v198 = v191[2];
  v199 = v191[1];
  if (v199 >= v198)
  {
    v201 = (v199 - *v191) >> 4;
    v202 = v201 + 1;
    if ((unint64_t)(v201 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v203 = v198 - *v191;
    if (v203 >> 3 > v202)
      v202 = v203 >> 3;
    if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFF0)
      v204 = 0xFFFFFFFFFFFFFFFLL;
    else
      v204 = v202;
    v845 = v191 + 2;
    v205 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v191 + 2), v204);
    v207 = (uint64_t *)&v205[16 * v201];
    *v207 = v195;
    v207[1] = (uint64_t)v196;
    v860 = 0;
    v861 = 0;
    v209 = *v191;
    v208 = v191[1];
    if (v208 == *v191)
    {
      v212 = v191[1];
      v210 = &v205[16 * v201];
    }
    else
    {
      v210 = &v205[16 * v201];
      do
      {
        v211 = *((_OWORD *)v208 - 1);
        v208 -= 16;
        *((_OWORD *)v210 - 1) = v211;
        v210 -= 16;
        *(_QWORD *)v208 = 0;
        *((_QWORD *)v208 + 1) = 0;
      }
      while (v208 != v209);
      v212 = *v191;
      v208 = v191[1];
    }
    v200 = (char *)(v207 + 2);
    *v191 = v210;
    v842 = v212;
    v191[1] = (char *)(v207 + 2);
    v843 = v208;
    v213 = v191[2];
    v191[2] = &v205[16 * v206];
    v844 = v213;
    __p = v212;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v199 = v195;
    *((_QWORD *)v199 + 1) = v196;
    v200 = v199 + 16;
    v860 = 0;
    v861 = 0;
  }
  v191[1] = v200;
  v214 = v821;
  v821 = 0;
  if (v214)
    (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
  v215 = (std::__shared_weak_count *)v818.n128_u64[1];
  if (v818.n128_u64[1])
  {
    v216 = (unint64_t *)(v818.n128_u64[1] + 8);
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v816 = *(_OWORD *)a2;
  v817 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v218 = (uint64_t)v840;
  *(_QWORD *)&v815 = v840;
  if (v840)
  {
    v219 = (_QWORD *)operator new();
    *v219 = &unk_1EA99F8E8;
    v219[1] = 0;
    v219[2] = 0;
    v219[3] = v218;
  }
  else
  {
    v219 = 0;
  }
  *((_QWORD *)&v815 + 1) = v219;
  v840 = 0;
  *(_QWORD *)&v814 = v822;
  if (v822)
  {
    v220 = (_QWORD *)operator new();
    v221 = v822;
    *v220 = &unk_1EA99F948;
    v220[1] = 0;
    v220[2] = 0;
    v220[3] = v221;
  }
  else
  {
    v220 = 0;
  }
  *((_QWORD *)&v814 + 1) = v220;
  v822 = 0;
  v857[0] = &unk_1EA99FAC8;
  v857[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateLstm;
  v858 = v857;
  v856 = 0;
  MIL::IROperator::Make((__int128 *)v816, &v815, &v814, (uint64_t)v857, (uint64_t)v855, a3);
  v222 = v856;
  if (v856 == v855)
  {
    v223 = 4;
    v222 = v855;
  }
  else
  {
    if (!v856)
      goto LABEL_231;
    v223 = 5;
  }
  (*(void (**)(void))(*v222 + 8 * v223))();
LABEL_231:
  v224 = v858;
  if (v858 == v857)
  {
    v225 = 4;
    v224 = v857;
    goto LABEL_235;
  }
  if (v858)
  {
    v225 = 5;
LABEL_235:
    (*(void (**)(void))(*v224 + 8 * v225))();
  }
  v226 = (std::__shared_weak_count *)*((_QWORD *)&v814 + 1);
  if (*((_QWORD *)&v814 + 1))
  {
    v227 = (unint64_t *)(*((_QWORD *)&v814 + 1) + 8);
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = (std::__shared_weak_count *)*((_QWORD *)&v815 + 1);
  if (*((_QWORD *)&v815 + 1))
  {
    v230 = (unint64_t *)(*((_QWORD *)&v815 + 1) + 8);
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  if (SHIBYTE(v817) < 0)
    operator delete(v816[0]);
  v232 = *a3;
  v853[0] = &off_1EA99FBD8;
  v853[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceLstm;
  v854 = v853;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v232 + 200))(v232, v853);
  v233 = v854;
  if (v854 == v853)
  {
    v234 = 4;
    v233 = v853;
  }
  else
  {
    if (!v854)
      goto LABEL_253;
    v234 = 5;
  }
  (*(void (**)(void))(*v233 + 8 * v234))();
LABEL_253:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v235 = __p;
  std::string::basic_string[abi:ne180100]<0>(v810, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v810, 0, (uint64_t *)&Scalar);
  v812 = Scalar;
  if (Scalar)
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = Scalar;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = v237;
  }
  else
  {
    v236 = 0;
  }
  v813 = v236;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v808, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v235 + 24))(v235, &v812, v808);
  if (v809 < 0)
    operator delete(v808[0]);
  v238 = v813;
  if (v813)
  {
    p_shared_owners = (unint64_t *)&v813->__shared_owners_;
    do
      v240 = __ldaxr(p_shared_owners);
    while (__stlxr(v240 - 1, p_shared_owners));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = Scalar;
  Scalar = 0;
  if (v241)
    (*((void (**)(std::__shared_weak_count_vtbl *))v241->~__shared_weak_count + 1))(v241);
  if (v811 < 0)
    operator delete(v810[0]);
  v242 = __p;
  std::string::basic_string[abi:ne180100]<0>(v804, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v804, 0, (uint64_t *)&Scalar);
  v806 = Scalar;
  if (Scalar)
  {
    v243 = (std::__shared_weak_count *)operator new();
    v244 = Scalar;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v243->__shared_owners_ = 0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = v244;
  }
  else
  {
    v243 = 0;
  }
  v807 = v243;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v802, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v242 + 24))(v242, &v806, v802);
  if (v803 < 0)
    operator delete(v802[0]);
  v245 = v807;
  if (v807)
  {
    v246 = (unint64_t *)&v807->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = Scalar;
  Scalar = 0;
  if (v248)
    (*((void (**)(std::__shared_weak_count_vtbl *))v248->~__shared_weak_count + 1))(v248);
  if (v805 < 0)
    operator delete(v804[0]);
  v249 = __p;
  std::string::basic_string[abi:ne180100]<0>(v798, "initial_c");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v798, 0, (uint64_t *)&Scalar);
  v800 = Scalar;
  if (Scalar)
  {
    v250 = (std::__shared_weak_count *)operator new();
    v251 = Scalar;
    v250->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v250->__shared_owners_ = 0;
    v250->__shared_weak_owners_ = 0;
    v250[1].__vftable = v251;
  }
  else
  {
    v250 = 0;
  }
  v801 = v250;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v796, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v249 + 24))(v249, &v800, v796);
  if (v797 < 0)
    operator delete(v796[0]);
  v252 = v801;
  if (v801)
  {
    v253 = (unint64_t *)&v801->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = Scalar;
  Scalar = 0;
  if (v255)
    (*((void (**)(std::__shared_weak_count_vtbl *))v255->~__shared_weak_count + 1))(v255);
  if (v799 < 0)
    operator delete(v798[0]);
  v256 = __p;
  std::string::basic_string[abi:ne180100]<0>(v792, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v792, 0, (uint64_t *)&Scalar);
  v794 = Scalar;
  if (Scalar)
  {
    v257 = (std::__shared_weak_count *)operator new();
    v258 = Scalar;
    v257->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v257->__shared_owners_ = 0;
    v257->__shared_weak_owners_ = 0;
    v257[1].__vftable = v258;
  }
  else
  {
    v257 = 0;
  }
  v795 = v257;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v790, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v256 + 24))(v256, &v794, v790);
  if (v791 < 0)
    operator delete(v790[0]);
  v259 = v795;
  if (v795)
  {
    v260 = (unint64_t *)&v795->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v262 = Scalar;
  Scalar = 0;
  if (v262)
    (*((void (**)(std::__shared_weak_count_vtbl *))v262->~__shared_weak_count + 1))(v262);
  if (v793 < 0)
    operator delete(v792[0]);
  v263 = __p;
  std::string::basic_string[abi:ne180100]<0>(v786, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v786, 0, (uint64_t *)&Scalar);
  v788 = Scalar;
  if (Scalar)
  {
    v264 = (std::__shared_weak_count *)operator new();
    v265 = Scalar;
    v264->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v264->__shared_owners_ = 0;
    v264->__shared_weak_owners_ = 0;
    v264[1].__vftable = v265;
  }
  else
  {
    v264 = 0;
  }
  v789 = v264;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v784, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v263 + 24))(v263, &v788, v784);
  if (v785 < 0)
    operator delete(v784[0]);
  v266 = v789;
  if (v789)
  {
    v267 = (unint64_t *)&v789->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v269 = Scalar;
  Scalar = 0;
  if (v269)
    (*((void (**)(std::__shared_weak_count_vtbl *))v269->~__shared_weak_count + 1))(v269);
  if (v787 < 0)
    operator delete(v786[0]);
  v270 = __p;
  std::string::basic_string[abi:ne180100]<0>(v780, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v780, 1, (uint64_t *)&Scalar);
  v782 = Scalar;
  if (Scalar)
  {
    v271 = (std::__shared_weak_count *)operator new();
    v272 = Scalar;
    v271->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v271->__shared_owners_ = 0;
    v271->__shared_weak_owners_ = 0;
    v271[1].__vftable = v272;
  }
  else
  {
    v271 = 0;
  }
  v783 = v271;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v778, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v270 + 24))(v270, &v782, v778);
  if (v779 < 0)
    operator delete(v778[0]);
  v273 = v783;
  if (v783)
  {
    v274 = (unint64_t *)&v783->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  v276 = Scalar;
  Scalar = 0;
  if (v276)
    (*((void (**)(std::__shared_weak_count_vtbl *))v276->~__shared_weak_count + 1))(v276);
  if (v781 < 0)
    operator delete(v780[0]);
  v277 = __p;
  std::string::basic_string[abi:ne180100]<0>(v774, "peephole");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v774, 1, (uint64_t *)&Scalar);
  v776 = Scalar;
  if (Scalar)
  {
    v278 = (std::__shared_weak_count *)operator new();
    v279 = Scalar;
    v278->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v278->__shared_owners_ = 0;
    v278->__shared_weak_owners_ = 0;
    v278[1].__vftable = v279;
  }
  else
  {
    v278 = 0;
  }
  v777 = v278;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v772, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v277 + 24))(v277, &v776, v772);
  if (v773 < 0)
    operator delete(v772[0]);
  v280 = v777;
  if (v777)
  {
    v281 = (unint64_t *)&v777->__shared_owners_;
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  v283 = Scalar;
  Scalar = 0;
  if (v283)
    (*((void (**)(std::__shared_weak_count_vtbl *))v283->~__shared_weak_count + 1))(v283);
  if (v775 < 0)
    operator delete(v774[0]);
  v284 = __p;
  std::string::basic_string[abi:ne180100]<0>(v768, "weight_ih_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v768, 1, (uint64_t *)&Scalar);
  v770 = Scalar;
  if (Scalar)
  {
    v285 = (std::__shared_weak_count *)operator new();
    v286 = Scalar;
    v285->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v285->__shared_owners_ = 0;
    v285->__shared_weak_owners_ = 0;
    v285[1].__vftable = v286;
  }
  else
  {
    v285 = 0;
  }
  v771 = v285;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v766, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v284 + 24))(v284, &v770, v766);
  if (v767 < 0)
    operator delete(v766[0]);
  v287 = v771;
  if (v771)
  {
    v288 = (unint64_t *)&v771->__shared_owners_;
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }
  v290 = Scalar;
  Scalar = 0;
  if (v290)
    (*((void (**)(std::__shared_weak_count_vtbl *))v290->~__shared_weak_count + 1))(v290);
  if (v769 < 0)
    operator delete(v768[0]);
  v291 = __p;
  std::string::basic_string[abi:ne180100]<0>(v762, "weight_hh_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v762, 1, (uint64_t *)&Scalar);
  v764 = Scalar;
  if (Scalar)
  {
    v292 = (std::__shared_weak_count *)operator new();
    v293 = Scalar;
    v292->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v292->__shared_owners_ = 0;
    v292->__shared_weak_owners_ = 0;
    v292[1].__vftable = v293;
  }
  else
  {
    v292 = 0;
  }
  v765 = v292;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v760, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v291 + 24))(v291, &v764, v760);
  if (v761 < 0)
    operator delete(v760[0]);
  v294 = v765;
  if (v765)
  {
    v295 = (unint64_t *)&v765->__shared_owners_;
    do
      v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }
  v297 = Scalar;
  Scalar = 0;
  if (v297)
    (*((void (**)(std::__shared_weak_count_vtbl *))v297->~__shared_weak_count + 1))(v297);
  if (v763 < 0)
    operator delete(v762[0]);
  v298 = __p;
  std::string::basic_string[abi:ne180100]<0>(v756, "bias_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v756, 1, (uint64_t *)&Scalar);
  v758 = Scalar;
  if (Scalar)
  {
    v299 = (std::__shared_weak_count *)operator new();
    v300 = Scalar;
    v299->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v299->__shared_owners_ = 0;
    v299->__shared_weak_owners_ = 0;
    v299[1].__vftable = v300;
  }
  else
  {
    v299 = 0;
  }
  v759 = v299;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v754, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v298 + 24))(v298, &v758, v754);
  if (v755 < 0)
    operator delete(v754[0]);
  v301 = v759;
  if (v759)
  {
    v302 = (unint64_t *)&v759->__shared_owners_;
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  v304 = Scalar;
  Scalar = 0;
  if (v304)
    (*((void (**)(std::__shared_weak_count_vtbl *))v304->~__shared_weak_count + 1))(v304);
  if (v757 < 0)
    operator delete(v756[0]);
  v305 = __p;
  std::string::basic_string[abi:ne180100]<0>(v750, "peephole_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v750, 1, (uint64_t *)&Scalar);
  v752 = Scalar;
  if (Scalar)
  {
    v306 = (std::__shared_weak_count *)operator new();
    v307 = Scalar;
    v306->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v306->__shared_owners_ = 0;
    v306->__shared_weak_owners_ = 0;
    v306[1].__vftable = v307;
  }
  else
  {
    v306 = 0;
  }
  v753 = v306;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v748, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v305 + 24))(v305, &v752, v748);
  if (v749 < 0)
    operator delete(v748[0]);
  v308 = v753;
  if (v753)
  {
    v309 = (unint64_t *)&v753->__shared_owners_;
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  v311 = Scalar;
  Scalar = 0;
  if (v311)
    (*((void (**)(std::__shared_weak_count_vtbl *))v311->~__shared_weak_count + 1))(v311);
  if (v751 < 0)
    operator delete(v750[0]);
  v312 = __p;
  std::string::basic_string[abi:ne180100]<0>(v744, "clip");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v744, 1, (uint64_t *)&Scalar);
  v746 = Scalar;
  if (Scalar)
  {
    v313 = (std::__shared_weak_count *)operator new();
    v314 = Scalar;
    v313->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v313->__shared_owners_ = 0;
    v313->__shared_weak_owners_ = 0;
    v313[1].__vftable = v314;
  }
  else
  {
    v313 = 0;
  }
  v747 = v313;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v742, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v312 + 24))(v312, &v746, v742);
  if (v743 < 0)
    operator delete(v742[0]);
  v315 = v747;
  if (v747)
  {
    v316 = (unint64_t *)&v747->__shared_owners_;
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  v318 = Scalar;
  Scalar = 0;
  if (v318)
    (*((void (**)(std::__shared_weak_count_vtbl *))v318->~__shared_weak_count + 1))(v318);
  if (v745 < 0)
    operator delete(v744[0]);
  v319 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v740 = Scalar;
  if (Scalar)
  {
    v320 = (std::__shared_weak_count *)operator new();
    v321 = Scalar;
    v320->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v320->__shared_owners_ = 0;
    v320->__shared_weak_owners_ = 0;
    v320[1].__vftable = v321;
  }
  else
  {
    v320 = 0;
  }
  v741 = v320;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v738, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v319 + 24))(v319, &v740, v738);
  if (v739 < 0)
    operator delete(v738[0]);
  v322 = v741;
  if (v741)
  {
    v323 = (unint64_t *)&v741->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  v325 = Scalar;
  Scalar = 0;
  if (v325)
    (*((void (**)(std::__shared_weak_count_vtbl *))v325->~__shared_weak_count + 1))(v325);
  v326 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v736 = Scalar;
  if (Scalar)
  {
    v327 = (std::__shared_weak_count *)operator new();
    v328 = Scalar;
    v327->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v327->__shared_owners_ = 0;
    v327->__shared_weak_owners_ = 0;
    v327[1].__vftable = v328;
  }
  else
  {
    v327 = 0;
  }
  v737 = v327;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v734, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v326 + 24))(v326, &v736, v734);
  if (v735 < 0)
    operator delete(v734[0]);
  v329 = v737;
  if (v737)
  {
    v330 = (unint64_t *)&v737->__shared_owners_;
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  v332 = Scalar;
  Scalar = 0;
  if (v332)
    (*((void (**)(std::__shared_weak_count_vtbl *))v332->~__shared_weak_count + 1))(v332);
  v333 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &Scalar);
  v732 = Scalar;
  if (Scalar)
  {
    v334 = (std::__shared_weak_count *)operator new();
    v335 = Scalar;
    v334->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v334->__shared_owners_ = 0;
    v334->__shared_weak_owners_ = 0;
    v334[1].__vftable = v335;
  }
  else
  {
    v334 = 0;
  }
  v733 = v334;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v730, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v333 + 24))(v333, &v732, v730);
  if (v731 < 0)
    operator delete(v730[0]);
  v336 = v733;
  if (v733)
  {
    v337 = (unint64_t *)&v733->__shared_owners_;
    do
      v338 = __ldaxr(v337);
    while (__stlxr(v338 - 1, v337));
    if (!v338)
    {
      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
      std::__shared_weak_count::__release_weak(v336);
    }
  }
  v339 = Scalar;
  Scalar = 0;
  if (v339)
    (*((void (**)(std::__shared_weak_count_vtbl *))v339->~__shared_weak_count + 1))(v339);
  v340 = *a3;
  v728 = __p;
  if (__p)
  {
    v341 = (std::__shared_weak_count *)operator new();
    v342 = (std::__shared_weak_count_vtbl *)__p;
    v341->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v341->__shared_owners_ = 0;
    v341->__shared_weak_owners_ = 0;
    v341[1].__vftable = v342;
  }
  else
  {
    v341 = 0;
  }
  v729 = v341;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v340 + 56))(v340, &v728);
  v343 = v729;
  if (v729)
  {
    v344 = (unint64_t *)&v729->__shared_owners_;
    do
      v345 = __ldaxr(v344);
    while (__stlxr(v345 - 1, v344));
    if (!v345)
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
  }
  v346 = __p;
  __p = 0;
  if (v346)
    (*(void (**)(void *))(*(_QWORD *)v346 + 8))(v346);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v347 = __p;
  std::string::basic_string[abi:ne180100]<0>(v724, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v724, 0, (uint64_t *)&Scalar);
  v726 = Scalar;
  if (Scalar)
  {
    v348 = (std::__shared_weak_count *)operator new();
    v349 = Scalar;
    v348->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v348->__shared_owners_ = 0;
    v348->__shared_weak_owners_ = 0;
    v348[1].__vftable = v349;
  }
  else
  {
    v348 = 0;
  }
  v727 = v348;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v722, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v347 + 24))(v347, &v726, 0, v722);
  if (v723 < 0)
    operator delete(v722[0]);
  v350 = v727;
  if (v727)
  {
    v351 = (unint64_t *)&v727->__shared_owners_;
    do
      v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
      std::__shared_weak_count::__release_weak(v350);
    }
  }
  v353 = Scalar;
  Scalar = 0;
  if (v353)
    (*((void (**)(std::__shared_weak_count_vtbl *))v353->~__shared_weak_count + 1))(v353);
  if (v725 < 0)
    operator delete(v724[0]);
  v354 = __p;
  std::string::basic_string[abi:ne180100]<0>(v718, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v718, 0, (uint64_t *)&Scalar);
  v720 = Scalar;
  if (Scalar)
  {
    v355 = (std::__shared_weak_count *)operator new();
    v356 = Scalar;
    v355->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v355->__shared_owners_ = 0;
    v355->__shared_weak_owners_ = 0;
    v355[1].__vftable = v356;
  }
  else
  {
    v355 = 0;
  }
  v721 = v355;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v716, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v354 + 24))(v354, &v720, 1, v716);
  if (v717 < 0)
    operator delete(v716[0]);
  v357 = v721;
  if (v721)
  {
    v358 = (unint64_t *)&v721->__shared_owners_;
    do
      v359 = __ldaxr(v358);
    while (__stlxr(v359 - 1, v358));
    if (!v359)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  v360 = Scalar;
  Scalar = 0;
  if (v360)
    (*((void (**)(std::__shared_weak_count_vtbl *))v360->~__shared_weak_count + 1))(v360);
  if (v719 < 0)
    operator delete(v718[0]);
  v361 = __p;
  std::string::basic_string[abi:ne180100]<0>(v712, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v712, 0, (uint64_t *)&Scalar);
  v714 = Scalar;
  if (Scalar)
  {
    v362 = (std::__shared_weak_count *)operator new();
    v363 = Scalar;
    v362->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v362->__shared_owners_ = 0;
    v362->__shared_weak_owners_ = 0;
    v362[1].__vftable = v363;
  }
  else
  {
    v362 = 0;
  }
  v715 = v362;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v710, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v361 + 24))(v361, &v714, 2, v710);
  if (v711 < 0)
    operator delete(v710[0]);
  v364 = v715;
  if (v715)
  {
    v365 = (unint64_t *)&v715->__shared_owners_;
    do
      v366 = __ldaxr(v365);
    while (__stlxr(v366 - 1, v365));
    if (!v366)
    {
      ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
      std::__shared_weak_count::__release_weak(v364);
    }
  }
  v367 = Scalar;
  Scalar = 0;
  if (v367)
    (*((void (**)(std::__shared_weak_count_vtbl *))v367->~__shared_weak_count + 1))(v367);
  if (v713 < 0)
    operator delete(v712[0]);
  v368 = __p;
  std::string::basic_string[abi:ne180100]<0>(v706, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v706, 0, (uint64_t *)&Scalar);
  v708 = Scalar;
  if (Scalar)
  {
    v369 = (std::__shared_weak_count *)operator new();
    v370 = Scalar;
    v369->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v369->__shared_owners_ = 0;
    v369->__shared_weak_owners_ = 0;
    v369[1].__vftable = v370;
  }
  else
  {
    v369 = 0;
  }
  v709 = v369;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v704, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v368 + 24))(v368, &v708, 0, v704);
  if (v705 < 0)
    operator delete(v704[0]);
  v371 = v709;
  if (v709)
  {
    v372 = (unint64_t *)&v709->__shared_owners_;
    do
      v373 = __ldaxr(v372);
    while (__stlxr(v373 - 1, v372));
    if (!v373)
    {
      ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
      std::__shared_weak_count::__release_weak(v371);
    }
  }
  v374 = Scalar;
  Scalar = 0;
  if (v374)
    (*((void (**)(std::__shared_weak_count_vtbl *))v374->~__shared_weak_count + 1))(v374);
  if (v707 < 0)
    operator delete(v706[0]);
  v375 = __p;
  std::string::basic_string[abi:ne180100]<0>(v700, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v700, 0, (uint64_t *)&Scalar);
  v702 = Scalar;
  if (Scalar)
  {
    v376 = (std::__shared_weak_count *)operator new();
    v377 = Scalar;
    v376->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v376->__shared_owners_ = 0;
    v376->__shared_weak_owners_ = 0;
    v376[1].__vftable = v377;
  }
  else
  {
    v376 = 0;
  }
  v703 = v376;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v698, "H_dir");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v375 + 24))(v375, &v702, 1, v698);
  if (v699 < 0)
    operator delete(v698[0]);
  v378 = v703;
  if (v703)
  {
    v379 = (unint64_t *)&v703->__shared_owners_;
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
  v381 = Scalar;
  Scalar = 0;
  if (v381)
    (*((void (**)(std::__shared_weak_count_vtbl *))v381->~__shared_weak_count + 1))(v381);
  if (v701 < 0)
    operator delete(v700[0]);
  v382 = __p;
  std::string::basic_string[abi:ne180100]<0>(v694, "initial_c");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v694, 0, (uint64_t *)&Scalar);
  v696 = Scalar;
  if (Scalar)
  {
    v383 = (std::__shared_weak_count *)operator new();
    v384 = Scalar;
    v383->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v383->__shared_owners_ = 0;
    v383->__shared_weak_owners_ = 0;
    v383[1].__vftable = v384;
  }
  else
  {
    v383 = 0;
  }
  v697 = v383;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v692, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v382 + 24))(v382, &v696, 0, v692);
  if (v693 < 0)
    operator delete(v692[0]);
  v385 = v697;
  if (v697)
  {
    v386 = (unint64_t *)&v697->__shared_owners_;
    do
      v387 = __ldaxr(v386);
    while (__stlxr(v387 - 1, v386));
    if (!v387)
    {
      ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
      std::__shared_weak_count::__release_weak(v385);
    }
  }
  v388 = Scalar;
  Scalar = 0;
  if (v388)
    (*((void (**)(std::__shared_weak_count_vtbl *))v388->~__shared_weak_count + 1))(v388);
  if (v695 < 0)
    operator delete(v694[0]);
  v389 = __p;
  std::string::basic_string[abi:ne180100]<0>(v688, "initial_c");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v688, 0, (uint64_t *)&Scalar);
  v690 = Scalar;
  if (Scalar)
  {
    v390 = (std::__shared_weak_count *)operator new();
    v391 = Scalar;
    v390->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v390->__shared_owners_ = 0;
    v390->__shared_weak_owners_ = 0;
    v390[1].__vftable = v391;
  }
  else
  {
    v390 = 0;
  }
  v691 = v390;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v686, "H_dir");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v389 + 24))(v389, &v690, 1, v686);
  if (v687 < 0)
    operator delete(v686[0]);
  v392 = v691;
  if (v691)
  {
    v393 = (unint64_t *)&v691->__shared_owners_;
    do
      v394 = __ldaxr(v393);
    while (__stlxr(v394 - 1, v393));
    if (!v394)
    {
      ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
      std::__shared_weak_count::__release_weak(v392);
    }
  }
  v395 = Scalar;
  Scalar = 0;
  if (v395)
    (*((void (**)(std::__shared_weak_count_vtbl *))v395->~__shared_weak_count + 1))(v395);
  if (v689 < 0)
    operator delete(v688[0]);
  v396 = __p;
  std::string::basic_string[abi:ne180100]<0>(v682, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v682, 0, (uint64_t *)&Scalar);
  v684 = Scalar;
  if (Scalar)
  {
    v397 = (std::__shared_weak_count *)operator new();
    v398 = Scalar;
    v397->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v397->__shared_owners_ = 0;
    v397->__shared_weak_owners_ = 0;
    v397[1].__vftable = v398;
  }
  else
  {
    v397 = 0;
  }
  v685 = v397;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v680, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v396 + 24))(v396, &v684, 0, v680);
  if (v681 < 0)
    operator delete(v680[0]);
  v399 = v685;
  if (v685)
  {
    v400 = (unint64_t *)&v685->__shared_owners_;
    do
      v401 = __ldaxr(v400);
    while (__stlxr(v401 - 1, v400));
    if (!v401)
    {
      ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
      std::__shared_weak_count::__release_weak(v399);
    }
  }
  v402 = Scalar;
  Scalar = 0;
  if (v402)
    (*((void (**)(std::__shared_weak_count_vtbl *))v402->~__shared_weak_count + 1))(v402);
  if (v683 < 0)
    operator delete(v682[0]);
  v403 = __p;
  std::string::basic_string[abi:ne180100]<0>(v676, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v676, 0, (uint64_t *)&Scalar);
  v678 = Scalar;
  if (Scalar)
  {
    v404 = (std::__shared_weak_count *)operator new();
    v405 = Scalar;
    v404->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v404->__shared_owners_ = 0;
    v404->__shared_weak_owners_ = 0;
    v404[1].__vftable = v405;
  }
  else
  {
    v404 = 0;
  }
  v679 = v404;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v674, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v403 + 24))(v403, &v678, 1, v674);
  if (v675 < 0)
    operator delete(v674[0]);
  v406 = v679;
  if (v679)
  {
    v407 = (unint64_t *)&v679->__shared_owners_;
    do
      v408 = __ldaxr(v407);
    while (__stlxr(v408 - 1, v407));
    if (!v408)
    {
      ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
      std::__shared_weak_count::__release_weak(v406);
    }
  }
  v409 = Scalar;
  Scalar = 0;
  if (v409)
    (*((void (**)(std::__shared_weak_count_vtbl *))v409->~__shared_weak_count + 1))(v409);
  if (v677 < 0)
    operator delete(v676[0]);
  v410 = __p;
  std::string::basic_string[abi:ne180100]<0>(v670, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v670, 0, (uint64_t *)&Scalar);
  v672 = Scalar;
  if (Scalar)
  {
    v411 = (std::__shared_weak_count *)operator new();
    v412 = Scalar;
    v411->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v411->__shared_owners_ = 0;
    v411->__shared_weak_owners_ = 0;
    v411[1].__vftable = v412;
  }
  else
  {
    v411 = 0;
  }
  v673 = v411;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v668, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v410 + 24))(v410, &v672, 0, v668);
  if (v669 < 0)
    operator delete(v668[0]);
  v413 = v673;
  if (v673)
  {
    v414 = (unint64_t *)&v673->__shared_owners_;
    do
      v415 = __ldaxr(v414);
    while (__stlxr(v415 - 1, v414));
    if (!v415)
    {
      ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
      std::__shared_weak_count::__release_weak(v413);
    }
  }
  v416 = Scalar;
  Scalar = 0;
  if (v416)
    (*((void (**)(std::__shared_weak_count_vtbl *))v416->~__shared_weak_count + 1))(v416);
  if (v671 < 0)
    operator delete(v670[0]);
  v417 = __p;
  std::string::basic_string[abi:ne180100]<0>(v664, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v664, 0, (uint64_t *)&Scalar);
  v666 = Scalar;
  if (Scalar)
  {
    v418 = (std::__shared_weak_count *)operator new();
    v419 = Scalar;
    v418->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v418->__shared_owners_ = 0;
    v418->__shared_weak_owners_ = 0;
    v418[1].__vftable = v419;
  }
  else
  {
    v418 = 0;
  }
  v667 = v418;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v662, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v417 + 24))(v417, &v666, 1, v662);
  if (v663 < 0)
    operator delete(v662[0]);
  v420 = v667;
  if (v667)
  {
    v421 = (unint64_t *)&v667->__shared_owners_;
    do
      v422 = __ldaxr(v421);
    while (__stlxr(v422 - 1, v421));
    if (!v422)
    {
      ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
      std::__shared_weak_count::__release_weak(v420);
    }
  }
  v423 = Scalar;
  Scalar = 0;
  if (v423)
    (*((void (**)(std::__shared_weak_count_vtbl *))v423->~__shared_weak_count + 1))(v423);
  if (v665 < 0)
    operator delete(v664[0]);
  v424 = __p;
  std::string::basic_string[abi:ne180100]<0>(v658, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v658, 1, (uint64_t *)&Scalar);
  v660 = Scalar;
  if (Scalar)
  {
    v425 = (std::__shared_weak_count *)operator new();
    v426 = Scalar;
    v425->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v425->__shared_owners_ = 0;
    v425->__shared_weak_owners_ = 0;
    v425[1].__vftable = v426;
  }
  else
  {
    v425 = 0;
  }
  v661 = v425;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v656, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v424 + 24))(v424, &v660, 0, v656);
  if (v657 < 0)
    operator delete(v656[0]);
  v427 = v661;
  if (v661)
  {
    v428 = (unint64_t *)&v661->__shared_owners_;
    do
      v429 = __ldaxr(v428);
    while (__stlxr(v429 - 1, v428));
    if (!v429)
    {
      ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
      std::__shared_weak_count::__release_weak(v427);
    }
  }
  v430 = Scalar;
  Scalar = 0;
  if (v430)
    (*((void (**)(std::__shared_weak_count_vtbl *))v430->~__shared_weak_count + 1))(v430);
  if (v659 < 0)
    operator delete(v658[0]);
  v431 = __p;
  std::string::basic_string[abi:ne180100]<0>(v652, "peephole");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v652, 1, (uint64_t *)&Scalar);
  v654 = Scalar;
  if (Scalar)
  {
    v432 = (std::__shared_weak_count *)operator new();
    v433 = Scalar;
    v432->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v432->__shared_owners_ = 0;
    v432->__shared_weak_owners_ = 0;
    v432[1].__vftable = v433;
  }
  else
  {
    v432 = 0;
  }
  v655 = v432;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v650, "P_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v431 + 24))(v431, &v654, 0, v650);
  if (v651 < 0)
    operator delete(v650[0]);
  v434 = v655;
  if (v655)
  {
    v435 = (unint64_t *)&v655->__shared_owners_;
    do
      v436 = __ldaxr(v435);
    while (__stlxr(v436 - 1, v435));
    if (!v436)
    {
      ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
      std::__shared_weak_count::__release_weak(v434);
    }
  }
  v437 = Scalar;
  Scalar = 0;
  if (v437)
    (*((void (**)(std::__shared_weak_count_vtbl *))v437->~__shared_weak_count + 1))(v437);
  if (v653 < 0)
    operator delete(v652[0]);
  v438 = __p;
  std::string::basic_string[abi:ne180100]<0>(v646, "weight_ih_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v646, 1, (uint64_t *)&Scalar);
  v648 = Scalar;
  if (Scalar)
  {
    v439 = (std::__shared_weak_count *)operator new();
    v440 = Scalar;
    v439->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v439->__shared_owners_ = 0;
    v439->__shared_weak_owners_ = 0;
    v439[1].__vftable = v440;
  }
  else
  {
    v439 = 0;
  }
  v649 = v439;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v644, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v438 + 24))(v438, &v648, 0, v644);
  if (v645 < 0)
    operator delete(v644[0]);
  v441 = v649;
  if (v649)
  {
    v442 = (unint64_t *)&v649->__shared_owners_;
    do
      v443 = __ldaxr(v442);
    while (__stlxr(v443 - 1, v442));
    if (!v443)
    {
      ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
      std::__shared_weak_count::__release_weak(v441);
    }
  }
  v444 = Scalar;
  Scalar = 0;
  if (v444)
    (*((void (**)(std::__shared_weak_count_vtbl *))v444->~__shared_weak_count + 1))(v444);
  if (v647 < 0)
    operator delete(v646[0]);
  v445 = __p;
  std::string::basic_string[abi:ne180100]<0>(v640, "weight_ih_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v640, 1, (uint64_t *)&Scalar);
  v642 = Scalar;
  if (Scalar)
  {
    v446 = (std::__shared_weak_count *)operator new();
    v447 = Scalar;
    v446->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v446->__shared_owners_ = 0;
    v446->__shared_weak_owners_ = 0;
    v446[1].__vftable = v447;
  }
  else
  {
    v446 = 0;
  }
  v643 = v446;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v638, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v445 + 24))(v445, &v642, 1, v638);
  if (v639 < 0)
    operator delete(v638[0]);
  v448 = v643;
  if (v643)
  {
    v449 = (unint64_t *)&v643->__shared_owners_;
    do
      v450 = __ldaxr(v449);
    while (__stlxr(v450 - 1, v449));
    if (!v450)
    {
      ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
      std::__shared_weak_count::__release_weak(v448);
    }
  }
  v451 = Scalar;
  Scalar = 0;
  if (v451)
    (*((void (**)(std::__shared_weak_count_vtbl *))v451->~__shared_weak_count + 1))(v451);
  if (v641 < 0)
    operator delete(v640[0]);
  v452 = __p;
  std::string::basic_string[abi:ne180100]<0>(v634, "weight_hh_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v634, 1, (uint64_t *)&Scalar);
  v636 = Scalar;
  if (Scalar)
  {
    v453 = (std::__shared_weak_count *)operator new();
    v454 = Scalar;
    v453->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v453->__shared_owners_ = 0;
    v453->__shared_weak_owners_ = 0;
    v453[1].__vftable = v454;
  }
  else
  {
    v453 = 0;
  }
  v637 = v453;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v632, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v452 + 24))(v452, &v636, 0, v632);
  if (v633 < 0)
    operator delete(v632[0]);
  v455 = v637;
  if (v637)
  {
    v456 = (unint64_t *)&v637->__shared_owners_;
    do
      v457 = __ldaxr(v456);
    while (__stlxr(v457 - 1, v456));
    if (!v457)
    {
      ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
      std::__shared_weak_count::__release_weak(v455);
    }
  }
  v458 = Scalar;
  Scalar = 0;
  if (v458)
    (*((void (**)(std::__shared_weak_count_vtbl *))v458->~__shared_weak_count + 1))(v458);
  if (v635 < 0)
    operator delete(v634[0]);
  v459 = __p;
  std::string::basic_string[abi:ne180100]<0>(v628, "weight_hh_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v628, 1, (uint64_t *)&Scalar);
  v630 = Scalar;
  if (Scalar)
  {
    v460 = (std::__shared_weak_count *)operator new();
    v461 = Scalar;
    v460->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v460->__shared_owners_ = 0;
    v460->__shared_weak_owners_ = 0;
    v460[1].__vftable = v461;
  }
  else
  {
    v460 = 0;
  }
  v631 = v460;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v626, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v459 + 24))(v459, &v630, 1, v626);
  if (v627 < 0)
    operator delete(v626[0]);
  v462 = v631;
  if (v631)
  {
    v463 = (unint64_t *)&v631->__shared_owners_;
    do
      v464 = __ldaxr(v463);
    while (__stlxr(v464 - 1, v463));
    if (!v464)
    {
      ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
      std::__shared_weak_count::__release_weak(v462);
    }
  }
  v465 = Scalar;
  Scalar = 0;
  if (v465)
    (*((void (**)(std::__shared_weak_count_vtbl *))v465->~__shared_weak_count + 1))(v465);
  if (v629 < 0)
    operator delete(v628[0]);
  v466 = __p;
  std::string::basic_string[abi:ne180100]<0>(v622, "bias_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v622, 1, (uint64_t *)&Scalar);
  v624 = Scalar;
  if (Scalar)
  {
    v467 = (std::__shared_weak_count *)operator new();
    v468 = Scalar;
    v467->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v467->__shared_owners_ = 0;
    v467->__shared_weak_owners_ = 0;
    v467[1].__vftable = v468;
  }
  else
  {
    v467 = 0;
  }
  v625 = v467;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v620, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v466 + 24))(v466, &v624, 0, v620);
  if (v621 < 0)
    operator delete(v620[0]);
  v469 = v625;
  if (v625)
  {
    v470 = (unint64_t *)&v625->__shared_owners_;
    do
      v471 = __ldaxr(v470);
    while (__stlxr(v471 - 1, v470));
    if (!v471)
    {
      ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
      std::__shared_weak_count::__release_weak(v469);
    }
  }
  v472 = Scalar;
  Scalar = 0;
  if (v472)
    (*((void (**)(std::__shared_weak_count_vtbl *))v472->~__shared_weak_count + 1))(v472);
  if (v623 < 0)
    operator delete(v622[0]);
  v473 = __p;
  std::string::basic_string[abi:ne180100]<0>(v616, "peephole_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v616, 1, (uint64_t *)&Scalar);
  v618 = Scalar;
  if (Scalar)
  {
    v474 = (std::__shared_weak_count *)operator new();
    v475 = Scalar;
    v474->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v474->__shared_owners_ = 0;
    v474->__shared_weak_owners_ = 0;
    v474[1].__vftable = v475;
  }
  else
  {
    v474 = 0;
  }
  v619 = v474;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v614, "P_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v473 + 24))(v473, &v618, 0, v614);
  if (v615 < 0)
    operator delete(v614[0]);
  v476 = v619;
  if (v619)
  {
    v477 = (unint64_t *)&v619->__shared_owners_;
    do
      v478 = __ldaxr(v477);
    while (__stlxr(v478 - 1, v477));
    if (!v478)
    {
      ((void (*)(std::__shared_weak_count *))v476->__on_zero_shared)(v476);
      std::__shared_weak_count::__release_weak(v476);
    }
  }
  v479 = Scalar;
  Scalar = 0;
  if (v479)
    (*((void (**)(std::__shared_weak_count_vtbl *))v479->~__shared_weak_count + 1))(v479);
  if (v617 < 0)
    operator delete(v616[0]);
  v480 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v612 = Scalar;
  if (Scalar)
  {
    v481 = (std::__shared_weak_count *)operator new();
    v482 = Scalar;
    v481->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v481->__shared_owners_ = 0;
    v481->__shared_weak_owners_ = 0;
    v481[1].__vftable = v482;
  }
  else
  {
    v481 = 0;
  }
  v613 = v481;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v610, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v480 + 24))(v480, &v612, 1, v610);
  if (v611 < 0)
    operator delete(v610[0]);
  v483 = v613;
  if (v613)
  {
    v484 = (unint64_t *)&v613->__shared_owners_;
    do
      v485 = __ldaxr(v484);
    while (__stlxr(v485 - 1, v484));
    if (!v485)
    {
      ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
      std::__shared_weak_count::__release_weak(v483);
    }
  }
  v486 = Scalar;
  Scalar = 0;
  if (v486)
    (*((void (**)(std::__shared_weak_count_vtbl *))v486->~__shared_weak_count + 1))(v486);
  v487 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v608 = Scalar;
  if (Scalar)
  {
    v488 = (std::__shared_weak_count *)operator new();
    v489 = Scalar;
    v488->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v488->__shared_owners_ = 0;
    v488->__shared_weak_owners_ = 0;
    v488[1].__vftable = v489;
  }
  else
  {
    v488 = 0;
  }
  v609 = v488;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v606, "H_dir");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v487 + 24))(v487, &v608, 2, v606);
  if (v607 < 0)
    operator delete(v606[0]);
  v490 = v609;
  if (v609)
  {
    v491 = (unint64_t *)&v609->__shared_owners_;
    do
      v492 = __ldaxr(v491);
    while (__stlxr(v492 - 1, v491));
    if (!v492)
    {
      ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
      std::__shared_weak_count::__release_weak(v490);
    }
  }
  v493 = Scalar;
  Scalar = 0;
  if (v493)
    (*((void (**)(std::__shared_weak_count_vtbl *))v493->~__shared_weak_count + 1))(v493);
  v494 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v604 = Scalar;
  if (Scalar)
  {
    v495 = (std::__shared_weak_count *)operator new();
    v496 = Scalar;
    v495->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v495->__shared_owners_ = 0;
    v495->__shared_weak_owners_ = 0;
    v495[1].__vftable = v496;
  }
  else
  {
    v495 = 0;
  }
  v605 = v495;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v602, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v494 + 24))(v494, &v604, 0, v602);
  if (v603 < 0)
    operator delete(v602[0]);
  v497 = v605;
  if (v605)
  {
    v498 = (unint64_t *)&v605->__shared_owners_;
    do
      v499 = __ldaxr(v498);
    while (__stlxr(v499 - 1, v498));
    if (!v499)
    {
      ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
      std::__shared_weak_count::__release_weak(v497);
    }
  }
  v500 = Scalar;
  Scalar = 0;
  if (v500)
    (*((void (**)(std::__shared_weak_count_vtbl *))v500->~__shared_weak_count + 1))(v500);
  v501 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v600 = Scalar;
  if (Scalar)
  {
    v502 = (std::__shared_weak_count *)operator new();
    v503 = Scalar;
    v502->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v502->__shared_owners_ = 0;
    v502->__shared_weak_owners_ = 0;
    v502[1].__vftable = v503;
  }
  else
  {
    v502 = 0;
  }
  v601 = v502;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v598, "H_dir");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v501 + 24))(v501, &v600, 1, v598);
  if (v599 < 0)
    operator delete(v598[0]);
  v504 = v601;
  if (v601)
  {
    v505 = (unint64_t *)&v601->__shared_owners_;
    do
      v506 = __ldaxr(v505);
    while (__stlxr(v506 - 1, v505));
    if (!v506)
    {
      ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
      std::__shared_weak_count::__release_weak(v504);
    }
  }
  v507 = Scalar;
  Scalar = 0;
  if (v507)
    (*((void (**)(std::__shared_weak_count_vtbl *))v507->~__shared_weak_count + 1))(v507);
  v508 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &Scalar);
  v596 = Scalar;
  if (Scalar)
  {
    v509 = (std::__shared_weak_count *)operator new();
    v510 = Scalar;
    v509->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v509->__shared_owners_ = 0;
    v509->__shared_weak_owners_ = 0;
    v509[1].__vftable = v510;
  }
  else
  {
    v509 = 0;
  }
  v597 = v509;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v594, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v508 + 24))(v508, &v596, 0, v594);
  if (v595 < 0)
    operator delete(v594[0]);
  v511 = v597;
  if (v597)
  {
    v512 = (unint64_t *)&v597->__shared_owners_;
    do
      v513 = __ldaxr(v512);
    while (__stlxr(v513 - 1, v512));
    if (!v513)
    {
      ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
      std::__shared_weak_count::__release_weak(v511);
    }
  }
  v514 = Scalar;
  Scalar = 0;
  if (v514)
    (*((void (**)(std::__shared_weak_count_vtbl *))v514->~__shared_weak_count + 1))(v514);
  v515 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &Scalar);
  v592 = Scalar;
  if (Scalar)
  {
    v516 = (std::__shared_weak_count *)operator new();
    v517 = Scalar;
    v516->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v516->__shared_owners_ = 0;
    v516->__shared_weak_owners_ = 0;
    v516[1].__vftable = v517;
  }
  else
  {
    v516 = 0;
  }
  v593 = v516;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v590, "H_dir");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v515 + 24))(v515, &v592, 1, v590);
  if (v591 < 0)
    operator delete(v590[0]);
  v518 = v593;
  if (v593)
  {
    v519 = (unint64_t *)&v593->__shared_owners_;
    do
      v520 = __ldaxr(v519);
    while (__stlxr(v520 - 1, v519));
    if (!v520)
    {
      ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
      std::__shared_weak_count::__release_weak(v518);
    }
  }
  v521 = Scalar;
  Scalar = 0;
  if (v521)
    (*((void (**)(std::__shared_weak_count_vtbl *))v521->~__shared_weak_count + 1))(v521);
  v522 = *a3;
  v588 = __p;
  if (__p)
  {
    v523 = (std::__shared_weak_count *)operator new();
    v524 = (std::__shared_weak_count_vtbl *)__p;
    v523->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v523->__shared_owners_ = 0;
    v523->__shared_weak_owners_ = 0;
    v523[1].__vftable = v524;
  }
  else
  {
    v523 = 0;
  }
  v589 = v523;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v522 + 56))(v522, &v588);
  v525 = v589;
  if (v589)
  {
    v526 = (unint64_t *)&v589->__shared_owners_;
    do
      v527 = __ldaxr(v526);
    while (__stlxr(v527 - 1, v526));
    if (!v527)
    {
      ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
      std::__shared_weak_count::__release_weak(v525);
    }
  }
  v528 = __p;
  __p = 0;
  if (v528)
    (*(void (**)(void *))(*(_QWORD *)v528 + 8))(v528);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v860);
  v529 = v860;
  std::string::basic_string[abi:ne180100]<0>(v584, "direction");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v584, 0, &v821);
  v586 = v821;
  if (v821)
  {
    v530 = (std::__shared_weak_count *)operator new();
    v531 = v821;
    v530->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v530->__shared_owners_ = 0;
    v530->__shared_weak_owners_ = 0;
    v530[1].__vftable = (std::__shared_weak_count_vtbl *)v531;
  }
  else
  {
    v530 = 0;
  }
  v587 = v530;
  v821 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bidirectional");
  std::string::basic_string[abi:ne180100]<0>(&v844, "forward");
  std::string::basic_string[abi:ne180100]<0>(v846, "reverse");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 3);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v529 + 24))(v529, &v586, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v846[i + 2]) < 0)
      operator delete((void *)v846[i]);
  }
  v533 = v587;
  if (v587)
  {
    v534 = (unint64_t *)&v587->__shared_owners_;
    do
      v535 = __ldaxr(v534);
    while (__stlxr(v535 - 1, v534));
    if (!v535)
    {
      ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
      std::__shared_weak_count::__release_weak(v533);
    }
  }
  v536 = v821;
  v821 = 0;
  if (v536)
    (*(void (**)(uint64_t))(*(_QWORD *)v536 + 8))(v536);
  if (v585 < 0)
    operator delete(v584[0]);
  v537 = v860;
  std::string::basic_string[abi:ne180100]<0>(v580, "recurrent_activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v580, 0, &v821);
  v582 = v821;
  if (v821)
  {
    v538 = (std::__shared_weak_count *)operator new();
    v539 = v821;
    v538->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v538->__shared_owners_ = 0;
    v538->__shared_weak_owners_ = 0;
    v538[1].__vftable = (std::__shared_weak_count_vtbl *)v539;
  }
  else
  {
    v538 = 0;
  }
  v583 = v538;
  v821 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v844, "linear");
  std::string::basic_string[abi:ne180100]<0>(v846, "relu");
  std::string::basic_string[abi:ne180100]<0>(v847, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v848, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v849, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v537 + 24))(v537, &v582, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v849[j + 2]) < 0)
      operator delete((void *)v849[j]);
  }
  v541 = v583;
  if (v583)
  {
    v542 = (unint64_t *)&v583->__shared_owners_;
    do
      v543 = __ldaxr(v542);
    while (__stlxr(v543 - 1, v542));
    if (!v543)
    {
      ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
      std::__shared_weak_count::__release_weak(v541);
    }
  }
  v544 = v821;
  v821 = 0;
  if (v544)
    (*(void (**)(uint64_t))(*(_QWORD *)v544 + 8))(v544);
  if (v581 < 0)
    operator delete(v580[0]);
  v545 = v860;
  std::string::basic_string[abi:ne180100]<0>(v576, "cell_activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v576, 0, &v821);
  v578 = v821;
  if (v821)
  {
    v546 = (std::__shared_weak_count *)operator new();
    v547 = v821;
    v546->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v546->__shared_owners_ = 0;
    v546->__shared_weak_owners_ = 0;
    v546[1].__vftable = (std::__shared_weak_count_vtbl *)v547;
  }
  else
  {
    v546 = 0;
  }
  v579 = v546;
  v821 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v844, "linear");
  std::string::basic_string[abi:ne180100]<0>(v846, "relu");
  std::string::basic_string[abi:ne180100]<0>(v847, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v848, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v849, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v545 + 24))(v545, &v578, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -18; k -= 3)
  {
    if (SHIBYTE(v849[k + 2]) < 0)
      operator delete((void *)v849[k]);
  }
  v549 = v579;
  if (v579)
  {
    v550 = (unint64_t *)&v579->__shared_owners_;
    do
      v551 = __ldaxr(v550);
    while (__stlxr(v551 - 1, v550));
    if (!v551)
    {
      ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
      std::__shared_weak_count::__release_weak(v549);
    }
  }
  v552 = v821;
  v821 = 0;
  if (v552)
    (*(void (**)(uint64_t))(*(_QWORD *)v552 + 8))(v552);
  if (v577 < 0)
    operator delete(v576[0]);
  v553 = v860;
  std::string::basic_string[abi:ne180100]<0>(v572, "activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v572, 0, &v821);
  v574 = v821;
  if (v821)
  {
    v554 = (std::__shared_weak_count *)operator new();
    v555 = v821;
    v554->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v554->__shared_owners_ = 0;
    v554->__shared_weak_owners_ = 0;
    v554[1].__vftable = (std::__shared_weak_count_vtbl *)v555;
  }
  else
  {
    v554 = 0;
  }
  v575 = v554;
  v821 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v844, "linear");
  std::string::basic_string[abi:ne180100]<0>(v846, "relu");
  std::string::basic_string[abi:ne180100]<0>(v847, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v848, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v849, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v553 + 24))(v553, &v574, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (m = 0; m != -18; m -= 3)
  {
    if (SHIBYTE(v849[m + 2]) < 0)
      operator delete((void *)v849[m]);
  }
  v557 = v575;
  if (v575)
  {
    v558 = (unint64_t *)&v575->__shared_owners_;
    do
      v559 = __ldaxr(v558);
    while (__stlxr(v559 - 1, v558));
    if (!v559)
    {
      ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
      std::__shared_weak_count::__release_weak(v557);
    }
  }
  v560 = v821;
  v821 = 0;
  if (v560)
    (*(void (**)(uint64_t))(*(_QWORD *)v560 + 8))(v560);
  if (v573 < 0)
    operator delete(v572[0]);
  v561 = *a3;
  v570 = v860;
  if (v860)
  {
    v562 = (std::__shared_weak_count *)operator new();
    v563 = v860;
    v562->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v562->__shared_owners_ = 0;
    v562->__shared_weak_owners_ = 0;
    v562[1].__vftable = (std::__shared_weak_count_vtbl *)v563;
  }
  else
  {
    v562 = 0;
  }
  v571 = v562;
  v860 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v561 + 56))(v561, &v570);
  v564 = v571;
  if (v571)
  {
    v565 = (unint64_t *)&v571->__shared_owners_;
    do
      v566 = __ldaxr(v565);
    while (__stlxr(v566 - 1, v565));
    if (!v566)
    {
      ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
      std::__shared_weak_count::__release_weak(v564);
    }
  }
  v567 = v860;
  v860 = 0;
  if (v567)
    (*(void (**)(uint64_t))(*(_QWORD *)v567 + 8))(v567);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v822, 0);
  result = (uint64_t)v840;
  if (v840)
  {
    v569 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v840);
    return MEMORY[0x1E0C023A0](v569, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E079CAC4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 - 104);
  *(_QWORD *)(v2 - 104) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0xA78], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0xB90], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Rnn::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  unsigned __int8 *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count_vtbl *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  char *v90;
  char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  char **v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t *v112;
  char *v113;
  char *v114;
  char *v115;
  __int128 v116;
  char *v117;
  char *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  char **v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  void *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *p_shared_owners;
  unint64_t v145;
  std::__shared_weak_count_vtbl *v146;
  void *v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count_vtbl *v153;
  void *v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count_vtbl *v160;
  void *v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  void *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count_vtbl *v174;
  void *v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count_vtbl *v181;
  void *v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count_vtbl *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  void *v195;
  void *v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count_vtbl *v202;
  void *v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count_vtbl *v209;
  void *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count_vtbl *v216;
  void *v217;
  std::__shared_weak_count *v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count_vtbl *v223;
  void *v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count_vtbl *v230;
  void *v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count_vtbl *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count_vtbl *v237;
  void *v238;
  std::__shared_weak_count *v239;
  std::__shared_weak_count_vtbl *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count_vtbl *v244;
  void *v245;
  std::__shared_weak_count *v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count_vtbl *v251;
  void *v252;
  std::__shared_weak_count *v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count_vtbl *v258;
  void *v259;
  std::__shared_weak_count *v260;
  std::__shared_weak_count_vtbl *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count_vtbl *v265;
  void *v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count_vtbl *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count_vtbl *v272;
  void *v273;
  std::__shared_weak_count *v274;
  std::__shared_weak_count_vtbl *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count_vtbl *v279;
  void *v280;
  std::__shared_weak_count *v281;
  std::__shared_weak_count_vtbl *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count_vtbl *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  uint64_t v296;
  uint64_t i;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  uint64_t v304;
  uint64_t j;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t result;
  uint64_t v318;
  uint64_t v319;
  std::__shared_weak_count *v320;
  void *v321[2];
  char v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  void *v325[2];
  char v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  void *v329;
  std::__shared_weak_count *v330;
  void *v331[2];
  char v332;
  std::__shared_weak_count_vtbl *v333;
  std::__shared_weak_count *v334;
  void *v335[2];
  char v336;
  std::__shared_weak_count_vtbl *v337;
  std::__shared_weak_count *v338;
  void *v339[2];
  char v340;
  std::__shared_weak_count_vtbl *v341;
  std::__shared_weak_count *v342;
  void *v343[2];
  char v344;
  std::__shared_weak_count_vtbl *v345;
  std::__shared_weak_count *v346;
  void *v347[2];
  char v348;
  void *v349[2];
  char v350;
  std::__shared_weak_count_vtbl *v351;
  std::__shared_weak_count *v352;
  void *v353[2];
  char v354;
  void *v355[2];
  char v356;
  std::__shared_weak_count_vtbl *v357;
  std::__shared_weak_count *v358;
  void *v359[2];
  char v360;
  void *v361[2];
  char v362;
  std::__shared_weak_count_vtbl *v363;
  std::__shared_weak_count *v364;
  void *v365[2];
  char v366;
  void *v367[2];
  char v368;
  std::__shared_weak_count_vtbl *v369;
  std::__shared_weak_count *v370;
  void *v371[2];
  char v372;
  void *v373[2];
  char v374;
  std::__shared_weak_count_vtbl *v375;
  std::__shared_weak_count *v376;
  void *v377[2];
  char v378;
  void *v379[2];
  char v380;
  std::__shared_weak_count_vtbl *v381;
  std::__shared_weak_count *v382;
  void *v383[2];
  char v384;
  void *v385[2];
  char v386;
  std::__shared_weak_count_vtbl *v387;
  std::__shared_weak_count *v388;
  void *v389[2];
  char v390;
  void *v391[2];
  char v392;
  std::__shared_weak_count_vtbl *v393;
  std::__shared_weak_count *v394;
  void *v395[2];
  char v396;
  void *v397[2];
  char v398;
  std::__shared_weak_count_vtbl *v399;
  std::__shared_weak_count *v400;
  void *v401;
  std::__shared_weak_count *v402;
  void *v403[2];
  char v404;
  std::__shared_weak_count_vtbl *v405;
  std::__shared_weak_count *v406;
  void *v407[2];
  char v408;
  std::__shared_weak_count_vtbl *v409;
  std::__shared_weak_count *v410;
  void *v411[2];
  char v412;
  void *v413[2];
  char v414;
  std::__shared_weak_count_vtbl *v415;
  std::__shared_weak_count *v416;
  void *v417[2];
  char v418;
  void *v419[2];
  char v420;
  std::__shared_weak_count_vtbl *v421;
  std::__shared_weak_count *v422;
  void *v423[2];
  char v424;
  void *v425[2];
  char v426;
  std::__shared_weak_count_vtbl *v427;
  std::__shared_weak_count *v428;
  void *v429[2];
  char v430;
  void *v431[2];
  char v432;
  std::__shared_weak_count_vtbl *v433;
  std::__shared_weak_count *v434;
  void *v435[2];
  char v436;
  void *v437[2];
  char v438;
  std::__shared_weak_count_vtbl *v439;
  std::__shared_weak_count *v440;
  __int128 v441;
  __int128 v442;
  void *v443[2];
  uint64_t v444;
  __n128 v445;
  __n128 v446;
  uint64_t v447;
  char **v448;
  __n128 v449;
  __n128 v450;
  __n128 v451;
  __n128 v452;
  __n128 v453;
  __n128 v454;
  __n128 v455;
  __n128 v456;
  _QWORD *v457;
  void *__p;
  void *v459;
  char *v460;
  char *v461;
  char **v462;
  char v463;
  uint64_t v464[3];
  uint64_t v465[3];
  uint64_t v466[3];
  _QWORD v467[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *p_on_zero_shared;
  _QWORD v471[3];
  _QWORD *v472;
  _BYTE v473[24];
  _BYTE *v474;
  _QWORD v475[3];
  _QWORD *v476;
  uint64_t v477;
  uint64_t v478;
  _QWORD *v479;
  uint64_t v480;

  v480 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v457 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (char *)operator new(0x18uLL);
  v460 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  v459 = v10 + 24;
  v478 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v478, 1, &v456);
  MIL::IRParameter::Make(&v456, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v11 = Scalar;
  Scalar = 0;
  if (v11)
    (*((void (**)(std::__shared_weak_count_vtbl *))v11->~__shared_weak_count + 1))(v11);
  v12 = (std::__shared_weak_count *)v456.n128_u64[1];
  if (v456.n128_u64[1])
  {
    v13 = (unint64_t *)(v456.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v459 = __p;
    operator delete(__p);
  }
  v15 = v457;
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = (char *)operator new(0x10uLL);
  v460 = v18 + 16;
  *(_QWORD *)v18 = v16;
  *((_QWORD *)v18 + 1) = v17;
  __p = v18;
  v459 = v18 + 16;
  v478 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v478, 1, &v455);
  MIL::IRParameter::Make(&v455, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v15, "initial_h", (uint64_t *)&Scalar);
  v19 = Scalar;
  Scalar = 0;
  if (v19)
    (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  v20 = (std::__shared_weak_count *)v455.n128_u64[1];
  if (v455.n128_u64[1])
  {
    v21 = (unint64_t *)(v455.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v459 = __p;
    operator delete(__p);
  }
  v23 = v457;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (char *)operator new(0x10uLL);
  v460 = v26 + 16;
  *(_QWORD *)v26 = v24;
  *((_QWORD *)v26 + 1) = v25;
  __p = v26;
  v459 = v26 + 16;
  v478 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v478, 1, &v454);
  MIL::IRParameter::Make(&v454, (uint64_t *)&Scalar);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v23, "weight_ih", (uint64_t *)&Scalar);
  v28 = Scalar;
  Scalar = 0;
  if (v28)
    (*((void (**)(std::__shared_weak_count_vtbl *))v28->~__shared_weak_count + 1))(v28);
  v29 = (std::__shared_weak_count *)v454.n128_u64[1];
  if (v454.n128_u64[1])
  {
    v30 = (unint64_t *)(v454.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v459 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  v32 = v457;
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = (char *)operator new(0x10uLL);
  v460 = v35 + 16;
  *(_QWORD *)v35 = v33;
  *((_QWORD *)v35 + 1) = v34;
  __p = v35;
  v459 = v35 + 16;
  v478 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v478, 1, &v453);
  MIL::IRParameter::Make(&v453, (uint64_t *)&Scalar);
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v32, "weight_hh", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = (std::__shared_weak_count *)v453.n128_u64[1];
  if (v453.n128_u64[1])
  {
    v39 = (unint64_t *)(v453.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v459 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v457;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (char *)operator new(8uLL);
  __p = v43;
  *(_QWORD *)v43 = v42;
  v460 = v43 + 8;
  v459 = v43 + 8;
  v478 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v478, 1, &v452);
  MIL::IRParameter::Make(&v452, (uint64_t *)&Scalar);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v41, "bias", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = (std::__shared_weak_count *)v452.n128_u64[1];
  if (v452.n128_u64[1])
  {
    v47 = (unint64_t *)(v452.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (__p)
  {
    v459 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v457;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v451);
  MIL::IRParameter::Make(&v451, (uint64_t *)&__p);
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v49, "direction", (uint64_t *)&__p);
  v51 = __p;
  __p = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v451.n128_u64[1];
  if (v451.n128_u64[1])
  {
    v53 = (unint64_t *)(v451.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  v55 = v457;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v450);
  MIL::IRParameter::Make(&v450, (uint64_t *)&__p);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v55, "output_sequence", (uint64_t *)&__p);
  v57 = __p;
  __p = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v450.n128_u64[1];
  if (v450.n128_u64[1])
  {
    v59 = (unint64_t *)(v450.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  v61 = v457;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v449);
  MIL::IRParameter::Make(&v449, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v61, "activation", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v449.n128_u64[1];
  if (v449.n128_u64[1])
  {
    v65 = (unint64_t *)(v449.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  v448 = 0;
  v67 = operator new();
  *(_QWORD *)v67 = 0;
  *(_QWORD *)(v67 + 8) = 0;
  *(_QWORD *)(v67 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v448, (void **)v67);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v448, 2uLL);
  v68 = v448;
  v69 = MIL::IRUnknownDimension::Make(a1, 0);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = MIL::IRUnknownDimension::Make(a1, 0);
  v72 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v72->__get_deleter;
  p_on_zero_shared = &v72->__get_deleter;
  v72->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v69;
  v72->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v70;
  v72->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v71;
  Scalar = v72;
  v477 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v477, 1, &v446);
  MIL::IRParameter::Make(&v446, &v447);
  v73 = v447;
  v478 = v447;
  if (v447)
  {
    v74 = (_QWORD *)operator new();
    v75 = v447;
    *v74 = &unk_1EA99F888;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  v479 = v74;
  v447 = 0;
  v76 = v68[2];
  v77 = v68[1];
  if (v77 >= v76)
  {
    v79 = (v77 - *v68) >> 4;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v81 = v76 - *v68;
    if (v81 >> 3 > v80)
      v80 = v81 >> 3;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
      v82 = 0xFFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    v462 = v68 + 2;
    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v68 + 2), v82);
    v85 = (uint64_t *)&v83[16 * v79];
    *v85 = v73;
    v85[1] = (uint64_t)v74;
    v478 = 0;
    v479 = 0;
    v87 = *v68;
    v86 = v68[1];
    if (v86 == *v68)
    {
      v90 = v68[1];
      v88 = &v83[16 * v79];
    }
    else
    {
      v88 = &v83[16 * v79];
      do
      {
        v89 = *((_OWORD *)v86 - 1);
        v86 -= 16;
        *((_OWORD *)v88 - 1) = v89;
        v88 -= 16;
        *(_QWORD *)v86 = 0;
        *((_QWORD *)v86 + 1) = 0;
      }
      while (v86 != v87);
      v90 = *v68;
      v86 = v68[1];
    }
    v78 = (char *)(v85 + 2);
    *v68 = v88;
    v459 = v90;
    v68[1] = (char *)(v85 + 2);
    v460 = v86;
    v91 = v68[2];
    v68[2] = &v83[16 * v84];
    v461 = v91;
    __p = v90;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v77 = v73;
    *((_QWORD *)v77 + 1) = v74;
    v78 = v77 + 16;
    v478 = 0;
    v479 = 0;
  }
  v68[1] = v78;
  v92 = v447;
  v447 = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  v93 = (std::__shared_weak_count *)v446.n128_u64[1];
  if (v446.n128_u64[1])
  {
    v94 = (unint64_t *)(v446.n128_u64[1] + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  v96 = v448;
  v97 = MIL::IRUnknownDimension::Make(a1, 0);
  v98 = MIL::IRUnknownDimension::Make(a1, 0);
  v99 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v99->__on_zero_shared;
  p_on_zero_shared = &v99->__on_zero_shared;
  v99->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v97;
  v99->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v98;
  Scalar = v99;
  v477 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v477, 1, &v445);
  MIL::IRParameter::Make(&v445, &v447);
  v100 = v447;
  v478 = v447;
  if (v447)
  {
    v101 = (_QWORD *)operator new();
    v102 = v447;
    *v101 = &unk_1EA99F888;
    v101[1] = 0;
    v101[2] = 0;
    v101[3] = v102;
  }
  else
  {
    v101 = 0;
  }
  v479 = v101;
  v447 = 0;
  v103 = v96[2];
  v104 = v96[1];
  if (v104 >= v103)
  {
    v106 = (v104 - *v96) >> 4;
    v107 = v106 + 1;
    if ((unint64_t)(v106 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v108 = v103 - *v96;
    if (v108 >> 3 > v107)
      v107 = v108 >> 3;
    if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
      v109 = 0xFFFFFFFFFFFFFFFLL;
    else
      v109 = v107;
    v462 = v96 + 2;
    v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v96 + 2), v109);
    v112 = (uint64_t *)&v110[16 * v106];
    *v112 = v100;
    v112[1] = (uint64_t)v101;
    v478 = 0;
    v479 = 0;
    v114 = *v96;
    v113 = v96[1];
    if (v113 == *v96)
    {
      v117 = v96[1];
      v115 = &v110[16 * v106];
    }
    else
    {
      v115 = &v110[16 * v106];
      do
      {
        v116 = *((_OWORD *)v113 - 1);
        v113 -= 16;
        *((_OWORD *)v115 - 1) = v116;
        v115 -= 16;
        *(_QWORD *)v113 = 0;
        *((_QWORD *)v113 + 1) = 0;
      }
      while (v113 != v114);
      v117 = *v96;
      v113 = v96[1];
    }
    v105 = (char *)(v112 + 2);
    *v96 = v115;
    v459 = v117;
    v96[1] = (char *)(v112 + 2);
    v460 = v113;
    v118 = v96[2];
    v96[2] = &v110[16 * v111];
    v461 = v118;
    __p = v117;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v104 = v100;
    *((_QWORD *)v104 + 1) = v101;
    v105 = v104 + 16;
    v478 = 0;
    v479 = 0;
  }
  v96[1] = v105;
  v119 = v447;
  v447 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  v120 = (std::__shared_weak_count *)v445.n128_u64[1];
  if (v445.n128_u64[1])
  {
    v121 = (unint64_t *)(v445.n128_u64[1] + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v443 = *(_OWORD *)a2;
  v444 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v123 = (uint64_t)v457;
  *(_QWORD *)&v442 = v457;
  if (v457)
  {
    v124 = (_QWORD *)operator new();
    *v124 = &unk_1EA99F8E8;
    v124[1] = 0;
    v124[2] = 0;
    v124[3] = v123;
  }
  else
  {
    v124 = 0;
  }
  *((_QWORD *)&v442 + 1) = v124;
  v457 = 0;
  *(_QWORD *)&v441 = v448;
  if (v448)
  {
    v125 = (_QWORD *)operator new();
    v126 = v448;
    *v125 = &unk_1EA99F948;
    v125[1] = 0;
    v125[2] = 0;
    v125[3] = v126;
  }
  else
  {
    v125 = 0;
  }
  *((_QWORD *)&v441 + 1) = v125;
  v448 = 0;
  v475[0] = &unk_1EA99FAC8;
  v475[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateRnn;
  v476 = v475;
  v474 = 0;
  MIL::IROperator::Make((__int128 *)v443, &v442, &v441, (uint64_t)v475, (uint64_t)v473, a3);
  v127 = v474;
  if (v474 == v473)
  {
    v128 = 4;
    v127 = v473;
  }
  else
  {
    if (!v474)
      goto LABEL_130;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_130:
  v129 = v476;
  if (v476 == v475)
  {
    v130 = 4;
    v129 = v475;
    goto LABEL_134;
  }
  if (v476)
  {
    v130 = 5;
LABEL_134:
    (*(void (**)(void))(*v129 + 8 * v130))();
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
  if (*((_QWORD *)&v441 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
  if (*((_QWORD *)&v442 + 1))
  {
    v135 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  if (SHIBYTE(v444) < 0)
    operator delete(v443[0]);
  v137 = *a3;
  v471[0] = &off_1EA99FBD8;
  v471[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRnn;
  v472 = v471;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v137 + 200))(v137, v471);
  v138 = v472;
  if (v472 == v471)
  {
    v139 = 4;
    v138 = v471;
  }
  else
  {
    if (!v472)
      goto LABEL_152;
    v139 = 5;
  }
  (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_152:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v140 = __p;
  std::string::basic_string[abi:ne180100]<0>(v437, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v437, 0, (uint64_t *)&Scalar);
  v439 = Scalar;
  if (Scalar)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = Scalar;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v440 = v141;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v435, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v140 + 24))(v140, &v439, v435);
  if (v436 < 0)
    operator delete(v435[0]);
  v143 = v440;
  if (v440)
  {
    p_shared_owners = (unint64_t *)&v440->__shared_owners_;
    do
      v145 = __ldaxr(p_shared_owners);
    while (__stlxr(v145 - 1, p_shared_owners));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = Scalar;
  Scalar = 0;
  if (v146)
    (*((void (**)(std::__shared_weak_count_vtbl *))v146->~__shared_weak_count + 1))(v146);
  if (v438 < 0)
    operator delete(v437[0]);
  v147 = __p;
  std::string::basic_string[abi:ne180100]<0>(v431, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v431, 0, (uint64_t *)&Scalar);
  v433 = Scalar;
  if (Scalar)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = Scalar;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v434 = v148;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v429, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v147 + 24))(v147, &v433, v429);
  if (v430 < 0)
    operator delete(v429[0]);
  v150 = v434;
  if (v434)
  {
    v151 = (unint64_t *)&v434->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = Scalar;
  Scalar = 0;
  if (v153)
    (*((void (**)(std::__shared_weak_count_vtbl *))v153->~__shared_weak_count + 1))(v153);
  if (v432 < 0)
    operator delete(v431[0]);
  v154 = __p;
  std::string::basic_string[abi:ne180100]<0>(v425, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v425, 0, (uint64_t *)&Scalar);
  v427 = Scalar;
  if (Scalar)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = Scalar;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v428 = v155;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v423, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v154 + 24))(v154, &v427, v423);
  if (v424 < 0)
    operator delete(v423[0]);
  v157 = v428;
  if (v428)
  {
    v158 = (unint64_t *)&v428->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = Scalar;
  Scalar = 0;
  if (v160)
    (*((void (**)(std::__shared_weak_count_vtbl *))v160->~__shared_weak_count + 1))(v160);
  if (v426 < 0)
    operator delete(v425[0]);
  v161 = __p;
  std::string::basic_string[abi:ne180100]<0>(v419, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v419, 0, (uint64_t *)&Scalar);
  v421 = Scalar;
  if (Scalar)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = Scalar;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v422 = v162;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v417, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v161 + 24))(v161, &v421, v417);
  if (v418 < 0)
    operator delete(v417[0]);
  v164 = v422;
  if (v422)
  {
    v165 = (unint64_t *)&v422->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = Scalar;
  Scalar = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  if (v420 < 0)
    operator delete(v419[0]);
  v168 = __p;
  std::string::basic_string[abi:ne180100]<0>(v413, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v413, 1, (uint64_t *)&Scalar);
  v415 = Scalar;
  if (Scalar)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = Scalar;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v170;
  }
  else
  {
    v169 = 0;
  }
  v416 = v169;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v411, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v168 + 24))(v168, &v415, v411);
  if (v412 < 0)
    operator delete(v411[0]);
  v171 = v416;
  if (v416)
  {
    v172 = (unint64_t *)&v416->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = Scalar;
  Scalar = 0;
  if (v174)
    (*((void (**)(std::__shared_weak_count_vtbl *))v174->~__shared_weak_count + 1))(v174);
  if (v414 < 0)
    operator delete(v413[0]);
  v175 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v409 = Scalar;
  if (Scalar)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = Scalar;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = v177;
  }
  else
  {
    v176 = 0;
  }
  v410 = v176;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v407, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v175 + 24))(v175, &v409, v407);
  if (v408 < 0)
    operator delete(v407[0]);
  v178 = v410;
  if (v410)
  {
    v179 = (unint64_t *)&v410->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = Scalar;
  Scalar = 0;
  if (v181)
    (*((void (**)(std::__shared_weak_count_vtbl *))v181->~__shared_weak_count + 1))(v181);
  v182 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v405 = Scalar;
  if (Scalar)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = Scalar;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = v184;
  }
  else
  {
    v183 = 0;
  }
  v406 = v183;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v403, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v182 + 24))(v182, &v405, v403);
  if (v404 < 0)
    operator delete(v403[0]);
  v185 = v406;
  if (v406)
  {
    v186 = (unint64_t *)&v406->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = Scalar;
  Scalar = 0;
  if (v188)
    (*((void (**)(std::__shared_weak_count_vtbl *))v188->~__shared_weak_count + 1))(v188);
  v189 = *a3;
  v401 = __p;
  if (__p)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = (std::__shared_weak_count_vtbl *)__p;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v191;
  }
  else
  {
    v190 = 0;
  }
  v402 = v190;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v189 + 56))(v189, &v401);
  v192 = v402;
  if (v402)
  {
    v193 = (unint64_t *)&v402->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = __p;
  __p = 0;
  if (v195)
    (*(void (**)(void *))(*(_QWORD *)v195 + 8))(v195);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v196 = __p;
  std::string::basic_string[abi:ne180100]<0>(v397, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v397, 0, (uint64_t *)&Scalar);
  v399 = Scalar;
  if (Scalar)
  {
    v197 = (std::__shared_weak_count *)operator new();
    v198 = Scalar;
    v197->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v197->__shared_owners_ = 0;
    v197->__shared_weak_owners_ = 0;
    v197[1].__vftable = v198;
  }
  else
  {
    v197 = 0;
  }
  v400 = v197;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v395, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v196 + 24))(v196, &v399, 0, v395);
  if (v396 < 0)
    operator delete(v395[0]);
  v199 = v400;
  if (v400)
  {
    v200 = (unint64_t *)&v400->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = Scalar;
  Scalar = 0;
  if (v202)
    (*((void (**)(std::__shared_weak_count_vtbl *))v202->~__shared_weak_count + 1))(v202);
  if (v398 < 0)
    operator delete(v397[0]);
  v203 = __p;
  std::string::basic_string[abi:ne180100]<0>(v391, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v391, 0, (uint64_t *)&Scalar);
  v393 = Scalar;
  if (Scalar)
  {
    v204 = (std::__shared_weak_count *)operator new();
    v205 = Scalar;
    v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v204->__shared_owners_ = 0;
    v204->__shared_weak_owners_ = 0;
    v204[1].__vftable = v205;
  }
  else
  {
    v204 = 0;
  }
  v394 = v204;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v389, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v203 + 24))(v203, &v393, 1, v389);
  if (v390 < 0)
    operator delete(v389[0]);
  v206 = v394;
  if (v394)
  {
    v207 = (unint64_t *)&v394->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = Scalar;
  Scalar = 0;
  if (v209)
    (*((void (**)(std::__shared_weak_count_vtbl *))v209->~__shared_weak_count + 1))(v209);
  if (v392 < 0)
    operator delete(v391[0]);
  v210 = __p;
  std::string::basic_string[abi:ne180100]<0>(v385, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v385, 0, (uint64_t *)&Scalar);
  v387 = Scalar;
  if (Scalar)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = Scalar;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = v212;
  }
  else
  {
    v211 = 0;
  }
  v388 = v211;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v383, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v210 + 24))(v210, &v387, 2, v383);
  if (v384 < 0)
    operator delete(v383[0]);
  v213 = v388;
  if (v388)
  {
    v214 = (unint64_t *)&v388->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = Scalar;
  Scalar = 0;
  if (v216)
    (*((void (**)(std::__shared_weak_count_vtbl *))v216->~__shared_weak_count + 1))(v216);
  if (v386 < 0)
    operator delete(v385[0]);
  v217 = __p;
  std::string::basic_string[abi:ne180100]<0>(v379, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v379, 0, (uint64_t *)&Scalar);
  v381 = Scalar;
  if (Scalar)
  {
    v218 = (std::__shared_weak_count *)operator new();
    v219 = Scalar;
    v218->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v218->__shared_owners_ = 0;
    v218->__shared_weak_owners_ = 0;
    v218[1].__vftable = v219;
  }
  else
  {
    v218 = 0;
  }
  v382 = v218;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v377, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v217 + 24))(v217, &v381, 0, v377);
  if (v378 < 0)
    operator delete(v377[0]);
  v220 = v382;
  if (v382)
  {
    v221 = (unint64_t *)&v382->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = Scalar;
  Scalar = 0;
  if (v223)
    (*((void (**)(std::__shared_weak_count_vtbl *))v223->~__shared_weak_count + 1))(v223);
  if (v380 < 0)
    operator delete(v379[0]);
  v224 = __p;
  std::string::basic_string[abi:ne180100]<0>(v373, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v373, 0, (uint64_t *)&Scalar);
  v375 = Scalar;
  if (Scalar)
  {
    v225 = (std::__shared_weak_count *)operator new();
    v226 = Scalar;
    v225->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v225->__shared_owners_ = 0;
    v225->__shared_weak_owners_ = 0;
    v225[1].__vftable = v226;
  }
  else
  {
    v225 = 0;
  }
  v376 = v225;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v371, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v224 + 24))(v224, &v375, 1, v371);
  if (v372 < 0)
    operator delete(v371[0]);
  v227 = v376;
  if (v376)
  {
    v228 = (unint64_t *)&v376->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = Scalar;
  Scalar = 0;
  if (v230)
    (*((void (**)(std::__shared_weak_count_vtbl *))v230->~__shared_weak_count + 1))(v230);
  if (v374 < 0)
    operator delete(v373[0]);
  v231 = __p;
  std::string::basic_string[abi:ne180100]<0>(v367, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v367, 0, (uint64_t *)&Scalar);
  v369 = Scalar;
  if (Scalar)
  {
    v232 = (std::__shared_weak_count *)operator new();
    v233 = Scalar;
    v232->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v232->__shared_owners_ = 0;
    v232->__shared_weak_owners_ = 0;
    v232[1].__vftable = v233;
  }
  else
  {
    v232 = 0;
  }
  v370 = v232;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v365, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v231 + 24))(v231, &v369, 0, v365);
  if (v366 < 0)
    operator delete(v365[0]);
  v234 = v370;
  if (v370)
  {
    v235 = (unint64_t *)&v370->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v237 = Scalar;
  Scalar = 0;
  if (v237)
    (*((void (**)(std::__shared_weak_count_vtbl *))v237->~__shared_weak_count + 1))(v237);
  if (v368 < 0)
    operator delete(v367[0]);
  v238 = __p;
  std::string::basic_string[abi:ne180100]<0>(v361, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v361, 0, (uint64_t *)&Scalar);
  v363 = Scalar;
  if (Scalar)
  {
    v239 = (std::__shared_weak_count *)operator new();
    v240 = Scalar;
    v239->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v239->__shared_owners_ = 0;
    v239->__shared_weak_owners_ = 0;
    v239[1].__vftable = v240;
  }
  else
  {
    v239 = 0;
  }
  v364 = v239;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v359, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v238 + 24))(v238, &v363, 1, v359);
  if (v360 < 0)
    operator delete(v359[0]);
  v241 = v364;
  if (v364)
  {
    v242 = (unint64_t *)&v364->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = Scalar;
  Scalar = 0;
  if (v244)
    (*((void (**)(std::__shared_weak_count_vtbl *))v244->~__shared_weak_count + 1))(v244);
  if (v362 < 0)
    operator delete(v361[0]);
  v245 = __p;
  std::string::basic_string[abi:ne180100]<0>(v355, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v355, 0, (uint64_t *)&Scalar);
  v357 = Scalar;
  if (Scalar)
  {
    v246 = (std::__shared_weak_count *)operator new();
    v247 = Scalar;
    v246->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v246->__shared_owners_ = 0;
    v246->__shared_weak_owners_ = 0;
    v246[1].__vftable = v247;
  }
  else
  {
    v246 = 0;
  }
  v358 = v246;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v353, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v245 + 24))(v245, &v357, 1, v353);
  if (v354 < 0)
    operator delete(v353[0]);
  v248 = v358;
  if (v358)
  {
    v249 = (unint64_t *)&v358->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v251 = Scalar;
  Scalar = 0;
  if (v251)
    (*((void (**)(std::__shared_weak_count_vtbl *))v251->~__shared_weak_count + 1))(v251);
  if (v356 < 0)
    operator delete(v355[0]);
  v252 = __p;
  std::string::basic_string[abi:ne180100]<0>(v349, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v349, 1, (uint64_t *)&Scalar);
  v351 = Scalar;
  if (Scalar)
  {
    v253 = (std::__shared_weak_count *)operator new();
    v254 = Scalar;
    v253->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v253->__shared_owners_ = 0;
    v253->__shared_weak_owners_ = 0;
    v253[1].__vftable = v254;
  }
  else
  {
    v253 = 0;
  }
  v352 = v253;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v347, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v252 + 24))(v252, &v351, 0, v347);
  if (v348 < 0)
    operator delete(v347[0]);
  v255 = v352;
  if (v352)
  {
    v256 = (unint64_t *)&v352->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  v258 = Scalar;
  Scalar = 0;
  if (v258)
    (*((void (**)(std::__shared_weak_count_vtbl *))v258->~__shared_weak_count + 1))(v258);
  if (v350 < 0)
    operator delete(v349[0]);
  v259 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v345 = Scalar;
  if (Scalar)
  {
    v260 = (std::__shared_weak_count *)operator new();
    v261 = Scalar;
    v260->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v260->__shared_owners_ = 0;
    v260->__shared_weak_owners_ = 0;
    v260[1].__vftable = v261;
  }
  else
  {
    v260 = 0;
  }
  v346 = v260;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v343, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v259 + 24))(v259, &v345, 1, v343);
  if (v344 < 0)
    operator delete(v343[0]);
  v262 = v346;
  if (v346)
  {
    v263 = (unint64_t *)&v346->__shared_owners_;
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = Scalar;
  Scalar = 0;
  if (v265)
    (*((void (**)(std::__shared_weak_count_vtbl *))v265->~__shared_weak_count + 1))(v265);
  v266 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v341 = Scalar;
  if (Scalar)
  {
    v267 = (std::__shared_weak_count *)operator new();
    v268 = Scalar;
    v267->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v267->__shared_owners_ = 0;
    v267->__shared_weak_owners_ = 0;
    v267[1].__vftable = v268;
  }
  else
  {
    v267 = 0;
  }
  v342 = v267;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v339, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v266 + 24))(v266, &v341, 2, v339);
  if (v340 < 0)
    operator delete(v339[0]);
  v269 = v342;
  if (v342)
  {
    v270 = (unint64_t *)&v342->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  v272 = Scalar;
  Scalar = 0;
  if (v272)
    (*((void (**)(std::__shared_weak_count_vtbl *))v272->~__shared_weak_count + 1))(v272);
  v273 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v337 = Scalar;
  if (Scalar)
  {
    v274 = (std::__shared_weak_count *)operator new();
    v275 = Scalar;
    v274->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v274->__shared_owners_ = 0;
    v274->__shared_weak_owners_ = 0;
    v274[1].__vftable = v275;
  }
  else
  {
    v274 = 0;
  }
  v338 = v274;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v335, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v273 + 24))(v273, &v337, 0, v335);
  if (v336 < 0)
    operator delete(v335[0]);
  v276 = v338;
  if (v338)
  {
    v277 = (unint64_t *)&v338->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  v279 = Scalar;
  Scalar = 0;
  if (v279)
    (*((void (**)(std::__shared_weak_count_vtbl *))v279->~__shared_weak_count + 1))(v279);
  v280 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v333 = Scalar;
  if (Scalar)
  {
    v281 = (std::__shared_weak_count *)operator new();
    v282 = Scalar;
    v281->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v281->__shared_owners_ = 0;
    v281->__shared_weak_owners_ = 0;
    v281[1].__vftable = v282;
  }
  else
  {
    v281 = 0;
  }
  v334 = v281;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v331, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v280 + 24))(v280, &v333, 1, v331);
  if (v332 < 0)
    operator delete(v331[0]);
  v283 = v334;
  if (v334)
  {
    v284 = (unint64_t *)&v334->__shared_owners_;
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }
  v286 = Scalar;
  Scalar = 0;
  if (v286)
    (*((void (**)(std::__shared_weak_count_vtbl *))v286->~__shared_weak_count + 1))(v286);
  v287 = *a3;
  v329 = __p;
  if (__p)
  {
    v288 = (std::__shared_weak_count *)operator new();
    v289 = (std::__shared_weak_count_vtbl *)__p;
    v288->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v288->__shared_owners_ = 0;
    v288->__shared_weak_owners_ = 0;
    v288[1].__vftable = v289;
  }
  else
  {
    v288 = 0;
  }
  v330 = v288;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v287 + 56))(v287, &v329);
  v290 = v330;
  if (v330)
  {
    v291 = (unint64_t *)&v330->__shared_owners_;
    do
      v292 = __ldaxr(v291);
    while (__stlxr(v292 - 1, v291));
    if (!v292)
    {
      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
      std::__shared_weak_count::__release_weak(v290);
    }
  }
  v293 = __p;
  __p = 0;
  if (v293)
    (*(void (**)(void *))(*(_QWORD *)v293 + 8))(v293);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v478);
  v294 = v478;
  std::string::basic_string[abi:ne180100]<0>(v325, "direction");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v325, 0, &v447);
  v327 = v447;
  if (v447)
  {
    v295 = (std::__shared_weak_count *)operator new();
    v296 = v447;
    v295->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v295->__shared_owners_ = 0;
    v295->__shared_weak_owners_ = 0;
    v295[1].__vftable = (std::__shared_weak_count_vtbl *)v296;
  }
  else
  {
    v295 = 0;
  }
  v328 = v295;
  v447 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "forward");
  std::string::basic_string[abi:ne180100]<0>(&v461, "reverse");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 2);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v294 + 24))(v294, &v327, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (*(&v463 + i * 8) < 0)
      operator delete((&v461)[i]);
  }
  v298 = v328;
  if (v328)
  {
    v299 = (unint64_t *)&v328->__shared_owners_;
    do
      v300 = __ldaxr(v299);
    while (__stlxr(v300 - 1, v299));
    if (!v300)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  v301 = v447;
  v447 = 0;
  if (v301)
    (*(void (**)(uint64_t))(*(_QWORD *)v301 + 8))(v301);
  if (v326 < 0)
    operator delete(v325[0]);
  v302 = v478;
  std::string::basic_string[abi:ne180100]<0>(v321, "activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v321, 0, &v447);
  v323 = v447;
  if (v447)
  {
    v303 = (std::__shared_weak_count *)operator new();
    v304 = v447;
    v303->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v303->__shared_owners_ = 0;
    v303->__shared_weak_owners_ = 0;
    v303[1].__vftable = (std::__shared_weak_count_vtbl *)v304;
  }
  else
  {
    v303 = 0;
  }
  v324 = v303;
  v447 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v461, "linear");
  std::string::basic_string[abi:ne180100]<0>(v464, "relu");
  std::string::basic_string[abi:ne180100]<0>(v465, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v466, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v467, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v302 + 24))(v302, &v323, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v467[j + 2]) < 0)
      operator delete((void *)v467[j]);
  }
  v306 = v324;
  if (v324)
  {
    v307 = (unint64_t *)&v324->__shared_owners_;
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  v309 = v447;
  v447 = 0;
  if (v309)
    (*(void (**)(uint64_t))(*(_QWORD *)v309 + 8))(v309);
  if (v322 < 0)
    operator delete(v321[0]);
  v310 = *a3;
  v319 = v478;
  if (v478)
  {
    v311 = (std::__shared_weak_count *)operator new();
    v312 = v478;
    v311->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v311->__shared_owners_ = 0;
    v311->__shared_weak_owners_ = 0;
    v311[1].__vftable = (std::__shared_weak_count_vtbl *)v312;
  }
  else
  {
    v311 = 0;
  }
  v320 = v311;
  v478 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v310 + 56))(v310, &v319);
  v313 = v320;
  if (v320)
  {
    v314 = (unint64_t *)&v320->__shared_owners_;
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
      std::__shared_weak_count::__release_weak(v313);
    }
  }
  v316 = v478;
  v478 = 0;
  if (v316)
    (*(void (**)(uint64_t))(*(_QWORD *)v316 + 8))(v316);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v448, 0);
  result = (uint64_t)v457;
  if (v457)
  {
    v318 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v457);
    return MEMORY[0x1E0C023A0](v318, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07A07D0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 - 104);
  *(_QWORD *)(v2 - 104) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x558], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x5E0], 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[16],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E07A13CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[16],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[16],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E07A1464(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[16],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E07A14B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E07A1528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[21],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[21],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E07A15C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[21],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E07A160C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateBaseReduction(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  BOOL IsParameterSet;
  BOOL v6;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v8;
  const MIL::IRTensorValue *v9;
  MIL::IRValue *ParameterValue;
  MIL::IRValue *v11;
  uint64_t *v12;
  uint64_t Data;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type size;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  unint64_t *v41;
  void *__p;
  char v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  __int128 v51;
  std::string::size_type v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::string v55;

  std::string::basic_string[abi:ne180100]<0>(&v55, "axes");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v55.__r_.__value_.__l.__data_);
  v6 = IsParameterSet;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v55.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_15;
  }
  else if (!IsParameterSet)
  {
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(&v55, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v8 + 104))(v8) & 1) == 0)
    goto LABEL_15;
  v9 = (const MIL::IRTensorValue *)MIL::IRTensorValueType::Rank(v8);
  std::string::basic_string[abi:ne180100]<0>(&v55, "axes");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  v11 = (MIL::IRValue *)MIL::IRValue::AsTensor(ParameterValue);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  v12 = (uint64_t *)MIL::IRValue::AsTensor(v11);
  Data = MIL::IRTensorValue::GetDataView<int>(v12);
  if (v14)
  {
    v15 = (int *)Data;
    v16 = 4 * v14;
    while (1)
    {
      v17 = *v15;
      if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v15, (int)v9))
        break;
      ++v15;
      v16 -= 4;
      if (!v16)
        goto LABEL_14;
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v26 = (std::__shared_weak_count *)LocationPtr[1];
    v53 = *LocationPtr;
    v54 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
    (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
    std::operator+<char>();
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v47, v17);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v47;
    else
      v31 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      size = v47.__r_.__value_.__l.__size_;
    v33 = std::string::append(&v49, (const std::string::value_type *)v31, size);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append(&v50, "for input with rank: ");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v46, (int)v9);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v46;
    else
      v37 = (std::string *)v46.__r_.__value_.__r.__words[0];
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    else
      v38 = v46.__r_.__value_.__l.__size_;
    v39 = std::string::append(&v55, (const std::string::value_type *)v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v52 = v39->__r_.__value_.__r.__words[2];
    v51 = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a2, &v53, 315, &v51);
    if (SHIBYTE(v52) < 0)
      operator delete((void *)v51);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    v22 = v54;
    if (v54)
    {
      v41 = (unint64_t *)&v54->__shared_owners_;
      do
        v24 = __ldaxr(v41);
      while (__stlxr(v24 - 1, v41));
      goto LABEL_58;
    }
    return;
  }
LABEL_14:
  if (MIL::Validation::HasUniqueElementsInAxes(v11, v9))
  {
LABEL_15:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  v18 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v19 = (std::__shared_weak_count *)v18[1];
  v44 = *v18;
  v45 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
  std::operator+<char>();
  MIL::ValidationResult::ValidationResult(a2, &v44, 315, &__p);
  if (v43 < 0)
    operator delete(__p);
  v22 = v45;
  if (v45)
  {
    v23 = (unint64_t *)&v45->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
LABEL_58:
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1E07A1A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 121) < 0)
    operator delete(*(void **)(v47 - 144));
  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 73) < 0)
    operator delete(*(void **)(v47 - 96));
  if (a47 < 0)
    operator delete(a42);
  if (a28 < 0)
    operator delete(a23);
  if (a40 < 0)
    operator delete(a35);
  if (a34 < 0)
    operator delete(a29);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v47 - 112);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::ValueTypeInferenceUtils::ValueTypeInferenceBaseArgReductionCommon(a1, a3, 11, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E07A1B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBaseReduction(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  void (***v9)(MIL::MILContextImpl *__hidden);
  MIL::IRValueType *v10;
  uint64_t v11;
  const void *SingleValue;
  int v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  MIL::IRValue *v17;
  uint64_t *v18;
  unsigned int *Data;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  int64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  void *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  void *__p[2];
  char v50;
  void *v51;
  unint64_t *v52;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  if (v50 < 0)
    operator delete(__p[0]);
  v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  v10 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v11 = MIL::IRValueType::AsTensorType(v10);
  if (v50 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "keep_dims");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)__p);
  v13 = MIL::IRValue::GetScalar<BOOL>(SingleValue);
  if (v50 < 0)
    operator delete(__p[0]);
  v14 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
  v46 = 0;
  v47 = 0;
  v45 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "axes");
  v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  v16 = v15;
  if (v50 < 0)
  {
    operator delete(__p[0]);
    if (v16)
      goto LABEL_9;
LABEL_50:
    if (v13)
    {
      v42 = *v14;
      v41 = v14[1];
      __p[0] = (void *)MIL::IRConstantDimension::Make(v9, (MIL::MILContext *)1);
      std::vector<MIL::IRDimension const*>::insert((uint64_t)&v45, v46, (v41 - v42) >> 3, (char *)__p);
    }
    goto LABEL_52;
  }
  if (!v15)
    goto LABEL_50;
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(__p, "axes");
  v17 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)__p);
  v18 = (uint64_t *)MIL::IRValue::AsTensor(v17);
  Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v18);
  v21 = v20;
  if (v50 < 0)
    operator delete(__p[0]);
  MIL::ValueTypeInferenceUtils::ConvertAxesToNonNeg(Data, v21, (v14[1] - *v14) >> 3, (char **)&v51);
  std::unordered_set<unsigned long>::unordered_set<std::__wrap_iter<unsigned long *>>((uint64_t)__p, (unint64_t *)v51, v52);
  v48 = 0;
  if (v14[1] != *v14)
  {
    while (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(__p, &v48))
    {
      if (v13)
      {
        v22 = MIL::IRConstantDimension::Make(v9, (MIL::MILContext *)1);
        v23 = v22;
        v24 = v46;
        if ((unint64_t)v46 < v47)
        {
          *(_QWORD *)v46 = v22;
          v25 = v24 + 8;
LABEL_44:
          v46 = v25;
          goto LABEL_45;
        }
        v33 = (v46 - (_BYTE *)v45) >> 3;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v34 = (uint64_t)(v47 - (_QWORD)v45) >> 2;
        if (v34 <= v33 + 1)
          v34 = v33 + 1;
        if (v47 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v34;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v47, v31);
        else
          v32 = 0;
        v35 = &v32[8 * v33];
        *(_QWORD *)v35 = v23;
        v25 = v35 + 8;
        v39 = (char *)v45;
        v36 = v46;
        if (v46 != v45)
        {
          do
          {
            v40 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v35 - 1) = v40;
            v35 -= 8;
          }
          while (v36 != v39);
          goto LABEL_41;
        }
        goto LABEL_42;
      }
LABEL_45:
      if (++v48 >= (v14[1] - *v14) >> 3)
        goto LABEL_46;
    }
    v26 = v48;
    v27 = *v14;
    v28 = v46;
    if ((unint64_t)v46 < v47)
    {
      *(_QWORD *)v46 = *(_QWORD *)(v27 + 8 * v48);
      v25 = v28 + 8;
      goto LABEL_44;
    }
    v29 = (v46 - (_BYTE *)v45) >> 3;
    if ((unint64_t)(v29 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v30 = (uint64_t)(v47 - (_QWORD)v45) >> 2;
    if (v30 <= v29 + 1)
      v30 = v29 + 1;
    if (v47 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    if (v31)
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v47, v31);
    else
      v32 = 0;
    v35 = &v32[8 * v29];
    *(_QWORD *)v35 = *(_QWORD *)(v27 + 8 * v26);
    v25 = v35 + 8;
    v37 = (char *)v45;
    v36 = v46;
    if (v46 != v45)
    {
      do
      {
        v38 = *((_QWORD *)v36 - 1);
        v36 -= 8;
        *((_QWORD *)v35 - 1) = v38;
        v35 -= 8;
      }
      while (v36 != v37);
LABEL_41:
      v36 = (char *)v45;
    }
LABEL_42:
    v45 = v35;
    v46 = v25;
    v47 = (unint64_t)&v32[8 * v31];
    if (v36)
      operator delete(v36);
    goto LABEL_44;
  }
LABEL_46:
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)__p);
  if (v51)
  {
    v52 = (unint64_t *)v51;
    operator delete(v51);
  }
LABEL_52:
  v43 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&v45);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v44 = (uint64_t *)operator new(8uLL);
  *a3 = v44;
  *v44++ = v43;
  a3[1] = v44;
  a3[2] = v44;
  if (v45)
  {
    v46 = (char *)v45;
    operator delete(v45);
  }
}

void sub_1E07A1F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::IRDimension const*>::insert(uint64_t a1, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void *__p;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v4 = __src;
  if (a3)
  {
    v5 = a4;
    v10 = *(_QWORD *)(a1 + 16);
    v8 = a1 + 16;
    v9 = v10;
    v11 = *(char **)(v8 - 8);
    if (a3 <= (v10 - (uint64_t)v11) >> 3)
    {
      v18 = v11 - __src;
      if (a3 <= (v11 - __src) >> 3)
      {
        v21 = *(char **)(v8 - 8);
        v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = v18 >> 3;
        v21 = &v11[8 * (a3 - (v18 >> 3))];
        do
        {
          *(_QWORD *)&v11[v19] = *(_QWORD *)a4;
          v19 += 8;
        }
        while (8 * a3 - 8 * v20 != v19);
        *(_QWORD *)(a1 + 8) = v21;
        if (v11 == __src)
          return v4;
      }
      v22 = &__src[8 * a3];
      v23 = &v21[-8 * a3];
      v24 = v21;
      if (v23 < v11)
      {
        v24 = v21;
        do
        {
          v25 = *(_QWORD *)v23;
          v23 += 8;
          *(_QWORD *)v24 = v25;
          v24 += 8;
        }
        while (v23 < v11);
      }
      *(_QWORD *)(a1 + 8) = v24;
      if (v21 != v22)
        memmove(&v21[-8 * ((v21 - v22) >> 3)], __src, v21 - v22);
      if (v4 <= v5)
      {
        if (*(_QWORD *)(a1 + 8) <= (unint64_t)v5)
          v26 = 0;
        else
          v26 = a3;
        v5 += 8 * v26;
      }
      v27 = v4;
      do
      {
        *(_QWORD *)v27 = *(_QWORD *)v5;
        v27 += 8;
        --v20;
      }
      while (v20);
    }
    else
    {
      v12 = *(_BYTE **)a1;
      v13 = a3 + ((uint64_t)&v11[-*(_QWORD *)a1] >> 3);
      if (v13 >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = (__src - v12) >> 3;
      v15 = v9 - (_QWORD)v12;
      if (v15 >> 2 > v13)
        v13 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v13;
      v36 = v8;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v8, v16);
      else
        v17 = 0;
      v28 = &v17[8 * v14];
      __p = v17;
      v33 = v28;
      v35 = &v17[8 * v16];
      v29 = 8 * a3;
      v30 = &v28[8 * a3];
      do
      {
        *(_QWORD *)v28 = *(_QWORD *)v5;
        v28 += 8;
        v29 -= 8;
      }
      while (v29);
      v34 = v30;
      v4 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
      if (v34 != v33)
        v34 += (v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (__p)
        operator delete(__p);
    }
  }
  return v4;
}

void sub_1E07A2218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<unsigned long>::unordered_set<std::__wrap_iter<unsigned long *>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1E07A22B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1E07A24CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BaseArgReduction::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  void ***v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  unint64_t v41;
  void **v42;
  void **v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  void **v51;
  void **v52;
  char *v53;
  __int128 v54;
  void **v55;
  void **v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  void **v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  std::__shared_weak_count_vtbl *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  void **v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void **v91;
  void **v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  void **v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void **v105;
  uint64_t result;
  uint64_t v107;
  void **v108;
  std::__shared_weak_count *v109;
  void *v110[2];
  char v111;
  void *v112[2];
  char v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  void **v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  void *v120[2];
  char v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  __int128 v124;
  __int128 v125;
  void *v126[2];
  uint64_t v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  void *__p;
  void *v132;
  _QWORD *v133;
  void *v134;
  void *v135;
  _QWORD *v136;
  __n128 v137;
  void *v138;
  _QWORD *v139;
  _QWORD v140[3];
  _QWORD *v141;
  _BYTE v142[24];
  _BYTE *v143;
  _QWORD v144[3];
  _QWORD *v145;
  uint64_t v146;
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v149;
  void **v150;
  uint64_t v151;
  uint64_t v152;
  void **v153;
  _QWORD *v154;
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v139 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v11->__on_zero_shared;
  v149 = &v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  Scalar = v11;
  v150 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v135 = v14 + 2;
  v136 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v134 = v14;
  v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v134);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v132 = v17 + 2;
  v133 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v150, 3, &v137);
  MIL::IRParameter::Make(&v137, (uint64_t *)&v138);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v138);
  v18 = v138;
  v138 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v137.n128_u64[1];
  if (v137.n128_u64[1])
  {
    v20 = (unint64_t *)(v137.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v132 = __p;
    operator delete(__p);
  }
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  v22 = v139;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v130);
  MIL::IRParameter::Make(&v130, (uint64_t *)&v150);
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v22, "axis", (uint64_t *)&v150);
  v24 = v150;
  v150 = 0;
  if (v24)
    (*((void (**)(void **))*v24 + 1))(v24);
  v25 = (std::__shared_weak_count *)v130.n128_u64[1];
  if (v130.n128_u64[1])
  {
    v26 = (unint64_t *)(v130.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v23 + 5) + 32))(*((_QWORD *)v23 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v23 + 5) + 48))(*((_QWORD *)v23 + 5), 1);
  v28 = v139;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v129);
  MIL::IRParameter::Make(&v129, (uint64_t *)&v150);
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v28, "keep_dims", (uint64_t *)&v150);
  v30 = v150;
  v150 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = (std::__shared_weak_count *)v129.n128_u64[1];
  if (v129.n128_u64[1])
  {
    v32 = (unint64_t *)(v129.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  __p = 0;
  v34 = operator new();
  *(_QWORD *)v34 = 0;
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  v150 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v34);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v150, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v35 = (void ***)__p;
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v37;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v37->~__shared_weak_count_0;
  v149 = &v37->~__shared_weak_count_0;
  v146 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v146, 1, &v128);
  MIL::IRParameter::Make(&v128, (uint64_t *)&v138);
  v38 = v138;
  v134 = v138;
  if (v138)
  {
    v39 = (_QWORD *)operator new();
    v40 = v138;
    *v39 = &unk_1EA99F888;
    v39[1] = 0;
    v39[2] = 0;
    v39[3] = v40;
  }
  else
  {
    v39 = 0;
  }
  v135 = v39;
  v138 = 0;
  v41 = (unint64_t)v35[2];
  v42 = v35[1];
  if ((unint64_t)v42 >= v41)
  {
    v44 = ((char *)v42 - (char *)*v35) >> 4;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v46 = v41 - (_QWORD)*v35;
    if (v46 >> 3 > v45)
      v45 = v46 >> 3;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
      v47 = 0xFFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    v154 = v35 + 2;
    v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v35 + 2), v47);
    v50 = &v48[16 * v44];
    *(_QWORD *)v50 = v38;
    *((_QWORD *)v50 + 1) = v39;
    v134 = 0;
    v135 = 0;
    v52 = *v35;
    v51 = v35[1];
    if (v51 == *v35)
    {
      v55 = v35[1];
      v53 = &v48[16 * v44];
    }
    else
    {
      v53 = &v48[16 * v44];
      do
      {
        v54 = *((_OWORD *)v51 - 1);
        v51 -= 2;
        *((_OWORD *)v53 - 1) = v54;
        v53 -= 16;
        *v51 = 0;
        v51[1] = 0;
      }
      while (v51 != v52);
      v55 = *v35;
      v51 = v35[1];
    }
    v43 = (void **)(v50 + 16);
    *v35 = (void **)v53;
    v150 = v55;
    v151 = (uint64_t)v55;
    v35[1] = (void **)(v50 + 16);
    v152 = (uint64_t)v51;
    v56 = v35[2];
    v35[2] = (void **)&v48[16 * v49];
    v153 = v56;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v150);
  }
  else
  {
    *v42 = v38;
    v42[1] = v39;
    v43 = v42 + 2;
    v134 = 0;
    v135 = 0;
  }
  v35[1] = v43;
  v57 = v138;
  v138 = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v128.n128_u64[1];
  if (v128.n128_u64[1])
  {
    v59 = (unint64_t *)(v128.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v126 = *(_OWORD *)a2;
  v127 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v61 = (uint64_t)v139;
  *(_QWORD *)&v125 = v139;
  if (v139)
  {
    v62 = (_QWORD *)operator new();
    *v62 = &unk_1EA99F8E8;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v61;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v125 + 1) = v62;
  v139 = 0;
  *(_QWORD *)&v124 = __p;
  if (__p)
  {
    v63 = (_QWORD *)operator new();
    v64 = __p;
    *v63 = &unk_1EA99F948;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v64;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v124 + 1) = v63;
  __p = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v144, a3);
  }
  else
  {
    v144[0] = &unk_1EA99FAC8;
    v144[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateBaseArgReduction;
    v145 = v144;
  }
  v143 = 0;
  MIL::IROperator::Make((__int128 *)v126, &v125, &v124, (uint64_t)v144, (uint64_t)v142, a4);
  v65 = v143;
  if (v143 == v142)
  {
    v66 = 4;
    v65 = v142;
  }
  else
  {
    if (!v143)
      goto LABEL_68;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_68:
  v67 = v145;
  if (v145 == v144)
  {
    v68 = 4;
    v67 = v144;
    goto LABEL_72;
  }
  if (v145)
  {
    v68 = 5;
LABEL_72:
    (*(void (**)(void))(*v67 + 8 * v68))();
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
  if (*((_QWORD *)&v125 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (SHIBYTE(v127) < 0)
    operator delete(v126[0]);
  v75 = *a4;
  v140[0] = &off_1EA99FBD8;
  v140[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction;
  v141 = v140;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v75 + 200))(v75, v140);
  v76 = v141;
  if (v141 == v140)
  {
    v77 = 4;
    v76 = v140;
  }
  else
  {
    if (!v141)
      goto LABEL_90;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_90:
  MIL::Validation::TensorDTypeConstraints::Make(&v150);
  v78 = v150;
  std::string::basic_string[abi:ne180100]<0>(v120, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v120, 0, (uint64_t *)&Scalar);
  v122 = Scalar;
  if (Scalar)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = Scalar;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v123 = v79;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v118, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v78 + 3))(v78, &v122, v118);
  if (v119 < 0)
    operator delete(v118[0]);
  v81 = v123;
  if (v123)
  {
    p_shared_owners = (unint64_t *)&v123->__shared_owners_;
    do
      v83 = __ldaxr(p_shared_owners);
    while (__stlxr(v83 - 1, p_shared_owners));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = Scalar;
  Scalar = 0;
  if (v84)
    (*((void (**)(std::__shared_weak_count_vtbl *))v84->~__shared_weak_count + 1))(v84);
  if (v121 < 0)
    operator delete(v120[0]);
  v85 = *a4;
  v116 = v150;
  if (v150)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = v150;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = (std::__shared_weak_count_vtbl *)v87;
  }
  else
  {
    v86 = 0;
  }
  v117 = v86;
  v150 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v85 + 56))(v85, &v116);
  v88 = v117;
  if (v117)
  {
    v89 = (unint64_t *)&v117->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v150;
  v150 = 0;
  if (v91)
    (*((void (**)(void **))*v91 + 1))(v91);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v150);
  v92 = v150;
  std::string::basic_string[abi:ne180100]<0>(v112, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v112, 0, (uint64_t *)&Scalar);
  v114 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v115 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v110, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v92 + 3))(v92, &v114, 0, v110);
  if (v111 < 0)
    operator delete(v110[0]);
  v95 = v115;
  if (v115)
  {
    v96 = (unint64_t *)&v115->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  if (v113 < 0)
    operator delete(v112[0]);
  v99 = *a4;
  v108 = v150;
  if (v150)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = v150;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v109 = v100;
  v150 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v99 + 56))(v99, &v108);
  v102 = v109;
  if (v109)
  {
    v103 = (unint64_t *)&v109->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v150;
  v150 = 0;
  if (v105)
    (*((void (**)(void **))*v105 + 1))(v105);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v139;
  if (v139)
  {
    v107 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v139);
    return MEMORY[0x1E0C023A0](v107, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07A30C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  uint64_t *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;

  v46 = *(_QWORD *)(v44 - 112);
  *(_QWORD *)(v44 - 112) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *v43;
  *v43 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a43, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v44 - 248), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceArgmax::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseArgReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A34CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceArgmin::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseArgReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A35CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BaseReduction::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void **v24;
  unsigned __int8 *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  void **v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  void **v61;
  char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  char **v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void **v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void **v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void **v104;
  void **v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  void **v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void **v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void **v125;
  uint64_t result;
  uint64_t v127;
  void **v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  void *v138[2];
  char v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  void **v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  void *v148[2];
  char v149;
  void *v150[2];
  char v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  __int128 v154;
  __int128 v155;
  void *v156[2];
  uint64_t v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  char **v165;
  __n128 v166;
  __n128 v167;
  void *__p;
  void *v169;
  _QWORD *v170;
  __n128 v171;
  _QWORD *v172;
  _QWORD v173[3];
  _QWORD *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  void *v179;
  void *v180;
  _QWORD *v181;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v184;
  void **v185;
  void **v186;
  uint64_t v187;
  char *v188;
  char **v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v172 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared;
  v184 = (uint64_t)&v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  Scalar = v11;
  v185 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v180 = v14 + 2;
  v181 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v179 = v14;
  v186 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v179);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v169 = v17 + 2;
  v170 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 3, &v171);
  MIL::IRParameter::Make(&v171, (uint64_t *)&v158);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v158);
  v18 = v158;
  v158 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v171.n128_u64[1];
  if (v171.n128_u64[1])
  {
    v20 = (unint64_t *)(v171.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v169 = __p;
    operator delete(__p);
  }
  if (v179)
  {
    v180 = v179;
    operator delete(v179);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v22 = v172;
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = (void **)operator new(8uLL);
  v185 = v24;
  *v24 = (void *)v23;
  v186 = v24 + 1;
  v187 = (uint64_t)(v24 + 1);
  v179 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v185);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v179, 1, &v167);
  MIL::IRParameter::Make(&v167, (uint64_t *)&Scalar);
  v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v22, "axes", (uint64_t *)&Scalar);
  v26 = Scalar;
  Scalar = 0;
  if (v26)
    (*((void (**)(std::__shared_weak_count_vtbl *))v26->~__shared_weak_count + 1))(v26);
  v27 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v28 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v25 + 5) + 32))(*((_QWORD *)v25 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v25 + 5) + 48))(*((_QWORD *)v25 + 5), 1);
  v30 = v172;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v166);
  MIL::IRParameter::Make(&v166, (uint64_t *)&v185);
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v30, "keep_dims", (uint64_t *)&v185);
  v32 = v185;
  v185 = 0;
  if (v32)
    (*((void (**)(void **))*v32 + 1))(v32);
  v33 = (std::__shared_weak_count *)v166.n128_u64[1];
  if (v166.n128_u64[1])
  {
    v34 = (unint64_t *)(v166.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  v165 = 0;
  v36 = operator new();
  *(_QWORD *)v36 = 0;
  *(_QWORD *)(v36 + 8) = 0;
  *(_QWORD *)(v36 + 16) = 0;
  v185 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v165, (void **)v36);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v185, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v165, 1uLL);
  v37 = v165;
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v179 = v39;
  *v39 = v38;
  v180 = v39 + 1;
  v181 = v39 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v179);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  __p = v41;
  *v41 = v40;
  v169 = v41 + 1;
  v170 = v41 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v158 = v43;
  *v43 = v42;
  v159 = v43 + 1;
  v160 = v43 + 1;
  v184 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v161);
  MIL::IRParameter::Make(&v161, &v162);
  v44 = v162;
  v163 = v162;
  if (v162)
  {
    v45 = (_QWORD *)operator new();
    v46 = v162;
    *v45 = &unk_1EA99F888;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v46;
  }
  else
  {
    v45 = 0;
  }
  v164 = v45;
  v162 = 0;
  v47 = v37[2];
  v48 = v37[1];
  if (v48 >= v47)
  {
    v50 = (v48 - *v37) >> 4;
    v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v52 = v47 - *v37;
    if (v52 >> 3 > v51)
      v51 = v52 >> 3;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
      v53 = 0xFFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    v189 = v37 + 2;
    v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v37 + 2), v53);
    v56 = (uint64_t *)&v54[16 * v50];
    *v56 = v44;
    v56[1] = (uint64_t)v45;
    v163 = 0;
    v164 = 0;
    v58 = *v37;
    v57 = v37[1];
    if (v57 == *v37)
    {
      v61 = (void **)v37[1];
      v59 = &v54[16 * v50];
    }
    else
    {
      v59 = &v54[16 * v50];
      do
      {
        v60 = *((_OWORD *)v57 - 1);
        v57 -= 16;
        *((_OWORD *)v59 - 1) = v60;
        v59 -= 16;
        *(_QWORD *)v57 = 0;
        *((_QWORD *)v57 + 1) = 0;
      }
      while (v57 != v58);
      v61 = (void **)*v37;
      v57 = v37[1];
    }
    v49 = (char *)(v56 + 2);
    *v37 = v59;
    v185 = v61;
    v186 = v61;
    v37[1] = (char *)(v56 + 2);
    v187 = (uint64_t)v57;
    v62 = v37[2];
    v37[2] = &v54[16 * v55];
    v188 = v62;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v185);
  }
  else
  {
    *(_QWORD *)v48 = v44;
    *((_QWORD *)v48 + 1) = v45;
    v49 = v48 + 16;
    v163 = 0;
    v164 = 0;
  }
  v37[1] = v49;
  v63 = v162;
  v162 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v65 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (__p)
  {
    v169 = __p;
    operator delete(__p);
  }
  if (v179)
  {
    v180 = v179;
    operator delete(v179);
  }
  *(_OWORD *)v156 = *(_OWORD *)a2;
  v157 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v67 = (uint64_t)v172;
  *(_QWORD *)&v155 = v172;
  if (v172)
  {
    v68 = (_QWORD *)operator new();
    *v68 = &unk_1EA99F8E8;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v67;
  }
  else
  {
    v68 = 0;
  }
  *((_QWORD *)&v155 + 1) = v68;
  v172 = 0;
  *(_QWORD *)&v154 = v165;
  if (v165)
  {
    v69 = (_QWORD *)operator new();
    v70 = v165;
    *v69 = &unk_1EA99F948;
    v69[1] = 0;
    v69[2] = 0;
    v69[3] = v70;
  }
  else
  {
    v69 = 0;
  }
  *((_QWORD *)&v154 + 1) = v69;
  v165 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v177, a3);
  }
  else
  {
    v177[0] = &unk_1EA99FAC8;
    v177[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateBaseReduction;
    v178 = v177;
  }
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v156, &v155, &v154, (uint64_t)v177, (uint64_t)v175, a4);
  v71 = v176;
  if (v176 == v175)
  {
    v72 = 4;
    v71 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_74;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_74:
  v73 = v178;
  if (v178 == v177)
  {
    v74 = 4;
    v73 = v177;
    goto LABEL_78;
  }
  if (v178)
  {
    v74 = 5;
LABEL_78:
    (*(void (**)(void))(*v73 + 8 * v74))();
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (SHIBYTE(v157) < 0)
    operator delete(v156[0]);
  v81 = *a4;
  v173[0] = &off_1EA99FBD8;
  v173[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBaseReduction;
  v174 = v173;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v173);
  v82 = v174;
  if (v174 == v173)
  {
    v83 = 4;
    v82 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_96;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_96:
  MIL::Validation::TensorDTypeConstraints::Make(&v185);
  v84 = v185;
  std::string::basic_string[abi:ne180100]<0>(v150, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v150, 0, (uint64_t *)&Scalar);
  v152 = Scalar;
  if (Scalar)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = Scalar;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v153 = v85;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v148, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v84 + 3))(v84, &v152, v148);
  if (v149 < 0)
    operator delete(v148[0]);
  v87 = v153;
  if (v153)
  {
    p_shared_owners = (unint64_t *)&v153->__shared_owners_;
    do
      v89 = __ldaxr(p_shared_owners);
    while (__stlxr(v89 - 1, p_shared_owners));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = Scalar;
  Scalar = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  if (v151 < 0)
    operator delete(v150[0]);
  v91 = v185;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v146 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v147 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v91 + 3))(v91, &v146, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v94 = v147;
  if (v147)
  {
    v95 = (unint64_t *)&v147->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  v98 = *a4;
  v142 = v185;
  if (v185)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = v185;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v143 = v99;
  v185 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v98 + 56))(v98, &v142);
  v101 = v143;
  if (v143)
  {
    v102 = (unint64_t *)&v143->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v185;
  v185 = 0;
  if (v104)
    (*((void (**)(void **))*v104 + 1))(v104);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v185);
  v105 = v185;
  std::string::basic_string[abi:ne180100]<0>(v138, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v138, 0, (uint64_t *)&Scalar);
  v140 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v141 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v136, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v105 + 3))(v105, &v140, 0, v136);
  if (v137 < 0)
    operator delete(v136[0]);
  v108 = v141;
  if (v141)
  {
    v109 = (unint64_t *)&v141->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  if (v139 < 0)
    operator delete(v138[0]);
  v112 = v185;
  std::string::basic_string[abi:ne180100]<0>(v132, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v132, 1, (uint64_t *)&Scalar);
  v134 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v135 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v112 + 3))(v112, &v134, 0, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v115 = v135;
  if (v135)
  {
    v116 = (unint64_t *)&v135->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(std::__shared_weak_count_vtbl *))v118->~__shared_weak_count + 1))(v118);
  if (v133 < 0)
    operator delete(v132[0]);
  v119 = *a4;
  v128 = v185;
  if (v185)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = v185;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = (std::__shared_weak_count_vtbl *)v121;
  }
  else
  {
    v120 = 0;
  }
  v129 = v120;
  v185 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v119 + 56))(v119, &v128);
  v122 = v129;
  if (v129)
  {
    v123 = (unint64_t *)&v129->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v185;
  v185 = 0;
  if (v125)
    (*((void (**)(void **))*v125 + 1))(v125);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v165, 0);
  result = (uint64_t)v172;
  if (v172)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v172);
    return MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07A4498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t a68;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;

  v71 = *(_QWORD *)(v69 - 112);
  *(_QWORD *)(v69 - 112) = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *v68;
  *v68 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceL1Norm::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A49AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceL2Norm::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A4AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceLogSum::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A4BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceLogSumExp::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A4CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceMax::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A4DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceMean::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A4EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceMin::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A4FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceProd::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A50AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceSum::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A51AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceSumSquare::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A52AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateBaseScatterWithAxis(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  _BOOL4 IsParameterSet;
  _BOOL4 v6;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v8;
  int v9;
  const void *ParameterValue;
  MIL::Validation *v11;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  __int128 v36;
  std::string::size_type v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string v40;

  std::string::basic_string[abi:ne180100]<0>(&v40, "axis");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v40.__r_.__value_.__l.__data_);
  v6 = IsParameterSet;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if (!v6)
    {
LABEL_11:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  else if (!IsParameterSet)
  {
    goto LABEL_11;
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "data");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v8 + 104))(v8) & 1) == 0)
    goto LABEL_11;
  v9 = MIL::IRTensorValueType::Rank(v8);
  std::string::basic_string[abi:ne180100]<0>(&v40, "axis");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v11 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(ParameterValue);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (MIL::Validation::IsAxisValidForRank(v11, v9))
    goto LABEL_11;
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v13 = (std::__shared_weak_count *)LocationPtr[1];
  v38 = *LocationPtr;
  v39 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
  std::operator+<char>();
  v16 = std::string::append(&v33, ", 'axis' must be within range (-data_rank - 1, data_rank) (exclusive). Provided axis: ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v32, (int)v11);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v32;
  else
    v18 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  v20 = std::string::append(&v34, (const std::string::value_type *)v18, size);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v35, "for input 'data' with rank: ");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v31, v9);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v31;
  else
    v24 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    v25 = v31.__r_.__value_.__l.__size_;
  v26 = std::string::append(&v40, (const std::string::value_type *)v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v37 = v26->__r_.__value_.__r.__words[2];
  v36 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(a2, &v38, 315, &v36);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1E07A5604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 105) < 0)
    operator delete(*(void **)(v40 - 128));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (a40 < 0)
    operator delete(a35);
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v40 - 96);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BaseScatter::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  std::__shared_weak_count_vtbl *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  char *v75;
  char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  char **v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  void *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  void *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  void *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  void *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count_vtbl *v132;
  void *v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count_vtbl *v139;
  void *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count_vtbl *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  void *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  uint64_t i;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count_vtbl *v168;
  uint64_t result;
  uint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  void *v175;
  std::__shared_weak_count *v176;
  void *v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  void *v181[2];
  char v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  void *v187[2];
  char v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  void *v191[2];
  char v192;
  void *v193[2];
  char v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  void *v197;
  std::__shared_weak_count *v198;
  void *v199[2];
  char v200;
  std::__shared_weak_count_vtbl *v201;
  std::__shared_weak_count *v202;
  void *v203[2];
  char v204;
  void *v205[2];
  char v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  void *v209[2];
  char v210;
  void *v211[2];
  char v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  __int128 v215;
  __int128 v216;
  void *v217[2];
  uint64_t v218;
  void *v219;
  void *v220;
  _QWORD *v221;
  __n128 v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  char **v226;
  __n128 v227;
  __n128 v228;
  __n128 v229;
  void *__p;
  void *v231;
  _QWORD *v232;
  __n128 v233;
  _QWORD *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD v238[3];
  uint64_t v239[3];
  uint64_t v240[3];
  uint64_t v241[3];
  uint64_t v242[3];
  _QWORD v243[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v246;
  _BYTE v247[24];
  _BYTE *v248;
  _BYTE v249[24];
  _BYTE *v250;
  _BYTE v251[24];
  _BYTE *v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count_vtbl *v254;
  _QWORD *v255;
  uint64_t v256;

  v256 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v234 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared;
  v246 = (uint64_t)&v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  Scalar = v11;
  v235 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v254 = (std::__shared_weak_count_vtbl *)&v14->__on_zero_shared;
  v255 = &v14->__on_zero_shared;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v253 = v14;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v253);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v232 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v231 = v17 + 2;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v235, 3, &v233);
  MIL::IRParameter::Make(&v233, (uint64_t *)&v219);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "data", (uint64_t *)&v219);
  v18 = v219;
  v219 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v233.n128_u64[1];
  if (v233.n128_u64[1])
  {
    v20 = (unint64_t *)(v233.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v231 = __p;
    operator delete(__p);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v22 = v234;
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(0x10uLL);
  v237 = (uint64_t)(v25 + 2);
  *v25 = v23;
  v25[1] = v24;
  v235 = v25;
  v236 = (uint64_t)(v25 + 2);
  v253 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v235);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v253, 1, &v229);
  MIL::IRParameter::Make(&v229, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v22, "indices", (uint64_t *)&Scalar);
  v26 = Scalar;
  Scalar = 0;
  if (v26)
    (*((void (**)(std::__shared_weak_count_vtbl *))v26->~__shared_weak_count + 1))(v26);
  v27 = (std::__shared_weak_count *)v229.n128_u64[1];
  if (v229.n128_u64[1])
  {
    v28 = (unint64_t *)(v229.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v235)
  {
    v236 = (uint64_t)v235;
    operator delete(v235);
  }
  v30 = v234;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v33->__on_zero_shared;
  v246 = (uint64_t)&v33->__on_zero_shared;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v31;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  Scalar = v33;
  v235 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v254 = (std::__shared_weak_count_vtbl *)&v36->__on_zero_shared;
  v255 = &v36->__on_zero_shared;
  v36->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v36->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v35;
  v253 = v36;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v253);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(0x10uLL);
  v232 = v39 + 2;
  *v39 = v37;
  v39[1] = v38;
  __p = v39;
  v231 = v39 + 2;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v235, 3, &v228);
  MIL::IRParameter::Make(&v228, (uint64_t *)&v219);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v30, "updates", (uint64_t *)&v219);
  v40 = v219;
  v219 = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v228.n128_u64[1];
  if (v228.n128_u64[1])
  {
    v42 = (unint64_t *)(v228.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (__p)
  {
    v231 = __p;
    operator delete(__p);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v44 = v234;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v227);
  MIL::IRParameter::Make(&v227, (uint64_t *)&v235);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v44, "mode", (uint64_t *)&v235);
  v46 = v235;
  v235 = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v227.n128_u64[1];
  if (v227.n128_u64[1])
  {
    v48 = (unint64_t *)(v227.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v226 = 0;
  v50 = operator new();
  *(_QWORD *)v50 = 0;
  *(_QWORD *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 16) = 0;
  v235 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v226, (void **)v50);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v235, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v226, 1uLL);
  v51 = v226;
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v253 = v53;
  v53->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v52;
  v254 = (std::__shared_weak_count_vtbl *)&v53->~__shared_weak_count_0;
  v255 = &v53->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v253);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(8uLL);
  __p = v55;
  *v55 = v54;
  v232 = v55 + 1;
  v231 = v55 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v56 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v57 = operator new(8uLL);
  v219 = v57;
  *v57 = v56;
  v221 = v57 + 1;
  v220 = v57 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v219);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v222);
  MIL::IRParameter::Make(&v222, &v223);
  v58 = v223;
  v224 = v223;
  if (v223)
  {
    v59 = (_QWORD *)operator new();
    v60 = v223;
    *v59 = &unk_1EA99F888;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v60;
  }
  else
  {
    v59 = 0;
  }
  v225 = v59;
  v223 = 0;
  v61 = v51[2];
  v62 = v51[1];
  if (v62 >= v61)
  {
    v64 = (v62 - *v51) >> 4;
    v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v66 = v61 - *v51;
    if (v66 >> 3 > v65)
      v65 = v66 >> 3;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
      v67 = 0xFFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    v238[1] = v51 + 2;
    v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v51 + 2), v67);
    v70 = (uint64_t *)&v68[16 * v64];
    *v70 = v58;
    v70[1] = (uint64_t)v59;
    v225 = 0;
    v224 = 0;
    v72 = *v51;
    v71 = v51[1];
    if (v71 == *v51)
    {
      v75 = v51[1];
      v73 = &v68[16 * v64];
    }
    else
    {
      v73 = &v68[16 * v64];
      do
      {
        v74 = *((_OWORD *)v71 - 1);
        v71 -= 16;
        *((_OWORD *)v73 - 1) = v74;
        v73 -= 16;
        *(_QWORD *)v71 = 0;
        *((_QWORD *)v71 + 1) = 0;
      }
      while (v71 != v72);
      v75 = *v51;
      v71 = v51[1];
    }
    v63 = (char *)(v70 + 2);
    *v51 = v73;
    v236 = (uint64_t)v75;
    v51[1] = (char *)(v70 + 2);
    v237 = (uint64_t)v71;
    v76 = v51[2];
    v51[2] = &v68[16 * v69];
    v238[0] = v76;
    v235 = v75;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v235);
  }
  else
  {
    *(_QWORD *)v62 = v58;
    *((_QWORD *)v62 + 1) = v59;
    v63 = v62 + 16;
    v225 = 0;
    v224 = 0;
  }
  v51[1] = v63;
  v77 = v223;
  v223 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = (std::__shared_weak_count *)v222.n128_u64[1];
  if (v222.n128_u64[1])
  {
    v79 = (unint64_t *)(v222.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (__p)
  {
    v231 = __p;
    operator delete(__p);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  *(_OWORD *)v217 = *(_OWORD *)a2;
  v218 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v81 = (uint64_t)v234;
  *(_QWORD *)&v216 = v234;
  if (v234)
  {
    v82 = (_QWORD *)operator new();
    *v82 = &unk_1EA99F8E8;
    v82[1] = 0;
    v82[2] = 0;
    v82[3] = v81;
  }
  else
  {
    v82 = 0;
  }
  *((_QWORD *)&v216 + 1) = v82;
  v234 = 0;
  *(_QWORD *)&v215 = v226;
  if (v226)
  {
    v83 = (_QWORD *)operator new();
    v84 = v226;
    *v83 = &unk_1EA99F948;
    v83[1] = 0;
    v83[2] = 0;
    v83[3] = v84;
  }
  else
  {
    v83 = 0;
  }
  *((_QWORD *)&v215 + 1) = v83;
  v226 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v251, a3);
  v250 = 0;
  MIL::IROperator::Make((__int128 *)v217, &v216, &v215, (uint64_t)v251, (uint64_t)v249, a4);
  v85 = v250;
  if (v250 == v249)
  {
    v86 = 4;
    v85 = v249;
  }
  else
  {
    if (!v250)
      goto LABEL_84;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_84:
  v87 = v252;
  if (v252 == v251)
  {
    v88 = 4;
    v87 = v251;
    goto LABEL_88;
  }
  if (v252)
  {
    v88 = 5;
LABEL_88:
    (*(void (**)(void))(*v87 + 8 * v88))();
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (SHIBYTE(v218) < 0)
    operator delete(v217[0]);
  v95 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v235, "data");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v235, (uint64_t)v247);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v95 + 200))(v95, v247);
  v96 = v248;
  if (v248 == v247)
  {
    v97 = 4;
    v96 = v247;
  }
  else
  {
    if (!v248)
      goto LABEL_106;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_106:
  if (SHIBYTE(v237) < 0)
    operator delete(v235);
  MIL::Validation::TensorDTypeConstraints::Make(&v235);
  v98 = v235;
  std::string::basic_string[abi:ne180100]<0>(v211, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v211, 0, (uint64_t *)&Scalar);
  v213 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v214 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v209, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v98 + 24))(v98, &v213, v209);
  if (v210 < 0)
    operator delete(v209[0]);
  v101 = v214;
  if (v214)
  {
    p_shared_owners = (unint64_t *)&v214->__shared_owners_;
    do
      v103 = __ldaxr(p_shared_owners);
    while (__stlxr(v103 - 1, p_shared_owners));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v212 < 0)
    operator delete(v211[0]);
  v105 = v235;
  std::string::basic_string[abi:ne180100]<0>(v205, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v205, 0, (uint64_t *)&Scalar);
  v207 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v208 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v203, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v105 + 24))(v105, &v207, v203);
  if (v204 < 0)
    operator delete(v203[0]);
  v108 = v208;
  if (v208)
  {
    v109 = (unint64_t *)&v208->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  if (v206 < 0)
    operator delete(v205[0]);
  v112 = v235;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v201 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v202 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v199, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v112 + 24))(v112, &v201, v199);
  if (v200 < 0)
    operator delete(v199[0]);
  v115 = v202;
  if (v202)
  {
    v116 = (unint64_t *)&v202->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(std::__shared_weak_count_vtbl *))v118->~__shared_weak_count + 1))(v118);
  v119 = *a4;
  v197 = v235;
  if (v235)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v235;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v198 = v120;
  v235 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v119 + 56))(v119, &v197);
  v122 = v198;
  if (v198)
  {
    v123 = (unint64_t *)&v198->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v235;
  v235 = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v235);
  v126 = v235;
  std::string::basic_string[abi:ne180100]<0>(v193, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v193, 0, (uint64_t *)&Scalar);
  v195 = Scalar;
  if (Scalar)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = Scalar;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v196 = v127;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v191, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v126 + 24))(v126, &v195, 0, v191);
  if (v192 < 0)
    operator delete(v191[0]);
  v129 = v196;
  if (v196)
  {
    v130 = (unint64_t *)&v196->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = Scalar;
  Scalar = 0;
  if (v132)
    (*((void (**)(std::__shared_weak_count_vtbl *))v132->~__shared_weak_count + 1))(v132);
  if (v194 < 0)
    operator delete(v193[0]);
  v133 = v235;
  std::string::basic_string[abi:ne180100]<0>(v187, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v187, 0, (uint64_t *)&Scalar);
  v189 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v190 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v133 + 24))(v133, &v189, 0, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v136 = v190;
  if (v190)
  {
    v137 = (unint64_t *)&v190->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*((void (**)(std::__shared_weak_count_vtbl *))v139->~__shared_weak_count + 1))(v139);
  if (v188 < 0)
    operator delete(v187[0]);
  v140 = v235;
  std::string::basic_string[abi:ne180100]<0>(v181, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v181, 0, (uint64_t *)&Scalar);
  v183 = Scalar;
  if (Scalar)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = Scalar;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v184 = v141;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v140 + 24))(v140, &v183, 0, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v143 = v184;
  if (v184)
  {
    v144 = (unint64_t *)&v184->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = Scalar;
  Scalar = 0;
  if (v146)
    (*((void (**)(std::__shared_weak_count_vtbl *))v146->~__shared_weak_count + 1))(v146);
  if (v182 < 0)
    operator delete(v181[0]);
  v147 = *a4;
  v177 = v235;
  if (v235)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = (std::__shared_weak_count_vtbl *)v235;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v178 = v148;
  v235 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v147 + 56))(v147, &v177);
  v150 = v178;
  if (v178)
  {
    v151 = (unint64_t *)&v178->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v235;
  v235 = 0;
  if (v153)
    (*(void (**)(void *))(*(_QWORD *)v153 + 8))(v153);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v253);
  v154 = v253;
  std::string::basic_string[abi:ne180100]<0>(v173, "mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, (uint64_t *)&__p);
  v175 = __p;
  if (__p)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = (std::__shared_weak_count_vtbl *)__p;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v176 = v155;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v235, "add");
  std::string::basic_string[abi:ne180100]<0>(v238, "div");
  std::string::basic_string[abi:ne180100]<0>(v239, "max");
  std::string::basic_string[abi:ne180100]<0>(v240, "min");
  std::string::basic_string[abi:ne180100]<0>(v241, "mul");
  std::string::basic_string[abi:ne180100]<0>(v242, "sub");
  std::string::basic_string[abi:ne180100]<0>(v243, "update");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v235, 7);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, _QWORD))v154->~__shared_weak_count
   + 3))(v154, &v175, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v243[i + 2]) < 0)
      operator delete((void *)v243[i]);
  }
  v158 = v176;
  if (v176)
  {
    v159 = (unint64_t *)&v176->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = __p;
  __p = 0;
  if (v161)
    (*(void (**)(void *))(*(_QWORD *)v161 + 8))(v161);
  if (v174 < 0)
    operator delete(v173[0]);
  v162 = *a4;
  v171 = v253;
  if (v253)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = v253;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = v164;
  }
  else
  {
    v163 = 0;
  }
  v172 = v163;
  v253 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v162 + 56))(v162, &v171);
  v165 = v172;
  if (v172)
  {
    v166 = (unint64_t *)&v172->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v253;
  v253 = 0;
  if (v168)
    (*((void (**)(std::__shared_weak_count_vtbl *))v168->~__shared_weak_count + 1))(v168);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v226, 0);
  result = (uint64_t)v234;
  if (v234)
  {
    v170 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v234);
    return MEMORY[0x1E0C023A0](v170, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07A6B68(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x238], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x298], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BaseScatterWithAxis::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char **v57;
  uint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  char *v81;
  char *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  char **v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  void *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *p_shared_owners;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  void *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  void *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  void *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count_vtbl *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  uint64_t i;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count_vtbl *v174;
  uint64_t result;
  uint64_t v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  void *v181;
  std::__shared_weak_count *v182;
  void *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  void *v187[2];
  char v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  void *v191[2];
  char v192;
  void *v193[2];
  char v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  void *v197[2];
  char v198;
  void *v199[2];
  char v200;
  std::__shared_weak_count_vtbl *v201;
  std::__shared_weak_count *v202;
  void *v203;
  std::__shared_weak_count *v204;
  void *v205[2];
  char v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  void *v209[2];
  char v210;
  void *v211[2];
  char v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  void *v215[2];
  char v216;
  void *v217[2];
  char v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  __int128 v221;
  __int128 v222;
  void *v223[2];
  uint64_t v224;
  void *v225;
  void *v226;
  _QWORD *v227;
  __n128 v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  char **v232;
  __n128 v233;
  __n128 v234;
  __n128 v235;
  __n128 v236;
  void *__p;
  void *v238;
  _QWORD *v239;
  __n128 v240;
  _QWORD *v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD v245[3];
  uint64_t v246[3];
  uint64_t v247[3];
  uint64_t v248[3];
  uint64_t v249[3];
  _QWORD v250[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v253;
  _BYTE v254[24];
  _BYTE *v255;
  _BYTE v256[24];
  _BYTE *v257;
  _QWORD v258[3];
  _QWORD *v259;
  std::__shared_weak_count_vtbl *v260;
  std::__shared_weak_count_vtbl *v261;
  _QWORD *v262;
  uint64_t v263;

  v263 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v241 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared;
  v253 = (uint64_t)&v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  Scalar = v11;
  v242 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v261 = (std::__shared_weak_count_vtbl *)&v14->__on_zero_shared;
  v262 = &v14->__on_zero_shared;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v260 = v14;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v260);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v239 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v238 = v17 + 2;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v242, 3, &v240);
  MIL::IRParameter::Make(&v240, (uint64_t *)&v225);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "data", (uint64_t *)&v225);
  v18 = v225;
  v225 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v240.n128_u64[1];
  if (v240.n128_u64[1])
  {
    v20 = (unint64_t *)(v240.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v238 = __p;
    operator delete(__p);
  }
  if (v260)
  {
    v261 = v260;
    operator delete(v260);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v22 = v241;
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(0x10uLL);
  v244 = (uint64_t)(v25 + 2);
  *v25 = v23;
  v25[1] = v24;
  v242 = v25;
  v243 = (uint64_t)(v25 + 2);
  v260 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v242);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v260, 1, &v236);
  MIL::IRParameter::Make(&v236, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v22, "indices", (uint64_t *)&Scalar);
  v26 = Scalar;
  Scalar = 0;
  if (v26)
    (*((void (**)(std::__shared_weak_count_vtbl *))v26->~__shared_weak_count + 1))(v26);
  v27 = (std::__shared_weak_count *)v236.n128_u64[1];
  if (v236.n128_u64[1])
  {
    v28 = (unint64_t *)(v236.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v242)
  {
    v243 = (uint64_t)v242;
    operator delete(v242);
  }
  v30 = v241;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v33->__on_zero_shared;
  v253 = (uint64_t)&v33->__on_zero_shared;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v31;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  Scalar = v33;
  v242 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v261 = (std::__shared_weak_count_vtbl *)&v36->__on_zero_shared;
  v262 = &v36->__on_zero_shared;
  v36->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v36->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v35;
  v260 = v36;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v260);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(0x10uLL);
  v239 = v39 + 2;
  *v39 = v37;
  v39[1] = v38;
  __p = v39;
  v238 = v39 + 2;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v242, 3, &v235);
  MIL::IRParameter::Make(&v235, (uint64_t *)&v225);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v30, "updates", (uint64_t *)&v225);
  v40 = v225;
  v225 = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v235.n128_u64[1];
  if (v235.n128_u64[1])
  {
    v42 = (unint64_t *)(v235.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (__p)
  {
    v238 = __p;
    operator delete(__p);
  }
  if (v260)
  {
    v261 = v260;
    operator delete(v260);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v44 = v241;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v234);
  MIL::IRParameter::Make(&v234, (uint64_t *)&v242);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v44, "mode", (uint64_t *)&v242);
  v46 = v242;
  v242 = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v234.n128_u64[1];
  if (v234.n128_u64[1])
  {
    v48 = (unint64_t *)(v234.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v50 = v241;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v233);
  MIL::IRParameter::Make(&v233, (uint64_t *)&v242);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v50, "axis", (uint64_t *)&v242);
  v52 = v242;
  v242 = 0;
  if (v52)
    (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
  v53 = (std::__shared_weak_count *)v233.n128_u64[1];
  if (v233.n128_u64[1])
  {
    v54 = (unint64_t *)(v233.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v232 = 0;
  v56 = operator new();
  *(_QWORD *)v56 = 0;
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v56 + 16) = 0;
  v242 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v232, (void **)v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v242, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v232, 1uLL);
  v57 = v232;
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v260 = v59;
  v59->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v58;
  v261 = (std::__shared_weak_count_vtbl *)&v59->~__shared_weak_count_0;
  v262 = &v59->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v260);
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  __p = v61;
  *v61 = v60;
  v239 = v61 + 1;
  v238 = v61 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  v225 = v63;
  *v63 = v62;
  v227 = v63 + 1;
  v226 = v63 + 1;
  v253 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v225);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v228);
  MIL::IRParameter::Make(&v228, &v229);
  v64 = v229;
  v230 = v229;
  if (v229)
  {
    v65 = (_QWORD *)operator new();
    v66 = v229;
    *v65 = &unk_1EA99F888;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v66;
  }
  else
  {
    v65 = 0;
  }
  v231 = v65;
  v229 = 0;
  v67 = v57[2];
  v68 = v57[1];
  if (v68 >= v67)
  {
    v70 = (v68 - *v57) >> 4;
    v71 = v70 + 1;
    if ((unint64_t)(v70 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v72 = v67 - *v57;
    if (v72 >> 3 > v71)
      v71 = v72 >> 3;
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
      v73 = 0xFFFFFFFFFFFFFFFLL;
    else
      v73 = v71;
    v245[1] = v57 + 2;
    v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v57 + 2), v73);
    v76 = (uint64_t *)&v74[16 * v70];
    *v76 = v64;
    v76[1] = (uint64_t)v65;
    v231 = 0;
    v230 = 0;
    v78 = *v57;
    v77 = v57[1];
    if (v77 == *v57)
    {
      v81 = v57[1];
      v79 = &v74[16 * v70];
    }
    else
    {
      v79 = &v74[16 * v70];
      do
      {
        v80 = *((_OWORD *)v77 - 1);
        v77 -= 16;
        *((_OWORD *)v79 - 1) = v80;
        v79 -= 16;
        *(_QWORD *)v77 = 0;
        *((_QWORD *)v77 + 1) = 0;
      }
      while (v77 != v78);
      v81 = *v57;
      v77 = v57[1];
    }
    v69 = (char *)(v76 + 2);
    *v57 = v79;
    v243 = (uint64_t)v81;
    v57[1] = (char *)(v76 + 2);
    v244 = (uint64_t)v77;
    v82 = v57[2];
    v57[2] = &v74[16 * v75];
    v245[0] = v82;
    v242 = v81;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v242);
  }
  else
  {
    *(_QWORD *)v68 = v64;
    *((_QWORD *)v68 + 1) = v65;
    v69 = v68 + 16;
    v231 = 0;
    v230 = 0;
  }
  v57[1] = v69;
  v83 = v229;
  v229 = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = (std::__shared_weak_count *)v228.n128_u64[1];
  if (v228.n128_u64[1])
  {
    v85 = (unint64_t *)(v228.n128_u64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (v225)
  {
    v226 = v225;
    operator delete(v225);
  }
  if (__p)
  {
    v238 = __p;
    operator delete(__p);
  }
  if (v260)
  {
    v261 = v260;
    operator delete(v260);
  }
  *(_OWORD *)v223 = *(_OWORD *)a2;
  v224 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v87 = (uint64_t)v241;
  *(_QWORD *)&v222 = v241;
  if (v241)
  {
    v88 = (_QWORD *)operator new();
    *v88 = &unk_1EA99F8E8;
    v88[1] = 0;
    v88[2] = 0;
    v88[3] = v87;
  }
  else
  {
    v88 = 0;
  }
  *((_QWORD *)&v222 + 1) = v88;
  v241 = 0;
  *(_QWORD *)&v221 = v232;
  if (v232)
  {
    v89 = (_QWORD *)operator new();
    v90 = v232;
    *v89 = &unk_1EA99F948;
    v89[1] = 0;
    v89[2] = 0;
    v89[3] = v90;
  }
  else
  {
    v89 = 0;
  }
  *((_QWORD *)&v221 + 1) = v89;
  v232 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v258, a3);
  }
  else
  {
    v258[0] = &unk_1EA99FAC8;
    v258[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateBaseScatterWithAxis;
    v259 = v258;
  }
  v257 = 0;
  MIL::IROperator::Make((__int128 *)v223, &v222, &v221, (uint64_t)v258, (uint64_t)v256, a4);
  v91 = v257;
  if (v257 == v256)
  {
    v92 = 4;
    v91 = v256;
  }
  else
  {
    if (!v257)
      goto LABEL_94;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_94:
  v93 = v259;
  if (v259 == v258)
  {
    v94 = 4;
    v93 = v258;
    goto LABEL_98;
  }
  if (v259)
  {
    v94 = 5;
LABEL_98:
    (*(void (**)(void))(*v93 + 8 * v94))();
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
  if (*((_QWORD *)&v221 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
  if (*((_QWORD *)&v222 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (SHIBYTE(v224) < 0)
    operator delete(v223[0]);
  v101 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v242, "data");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v242, (uint64_t)v254);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v101 + 200))(v101, v254);
  v102 = v255;
  if (v255 == v254)
  {
    v103 = 4;
    v102 = v254;
  }
  else
  {
    if (!v255)
      goto LABEL_116;
    v103 = 5;
  }
  (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_116:
  if (SHIBYTE(v244) < 0)
    operator delete(v242);
  MIL::Validation::TensorDTypeConstraints::Make(&v242);
  v104 = v242;
  std::string::basic_string[abi:ne180100]<0>(v217, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v217, 0, (uint64_t *)&Scalar);
  v219 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v220 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v215, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v104 + 24))(v104, &v219, v215);
  if (v216 < 0)
    operator delete(v215[0]);
  v107 = v220;
  if (v220)
  {
    p_shared_owners = (unint64_t *)&v220->__shared_owners_;
    do
      v109 = __ldaxr(p_shared_owners);
    while (__stlxr(v109 - 1, p_shared_owners));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v218 < 0)
    operator delete(v217[0]);
  v111 = v242;
  std::string::basic_string[abi:ne180100]<0>(v211, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v211, 0, (uint64_t *)&Scalar);
  v213 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v214 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v209, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v111 + 24))(v111, &v213, v209);
  if (v210 < 0)
    operator delete(v209[0]);
  v114 = v214;
  if (v214)
  {
    v115 = (unint64_t *)&v214->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v212 < 0)
    operator delete(v211[0]);
  v118 = v242;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v207 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v208 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v205, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v118 + 24))(v118, &v207, v205);
  if (v206 < 0)
    operator delete(v205[0]);
  v121 = v208;
  if (v208)
  {
    v122 = (unint64_t *)&v208->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  v125 = *a4;
  v203 = v242;
  if (v242)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)v242;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v204 = v126;
  v242 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v125 + 56))(v125, &v203);
  v128 = v204;
  if (v204)
  {
    v129 = (unint64_t *)&v204->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v242;
  v242 = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v242);
  v132 = v242;
  std::string::basic_string[abi:ne180100]<0>(v199, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v199, 0, (uint64_t *)&Scalar);
  v201 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v202 = v133;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v197, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v132 + 24))(v132, &v201, 0, v197);
  if (v198 < 0)
    operator delete(v197[0]);
  v135 = v202;
  if (v202)
  {
    v136 = (unint64_t *)&v202->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*((void (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 1))(v138);
  if (v200 < 0)
    operator delete(v199[0]);
  v139 = v242;
  std::string::basic_string[abi:ne180100]<0>(v193, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v193, 0, (uint64_t *)&Scalar);
  v195 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v196 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v191, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v139 + 24))(v139, &v195, 0, v191);
  if (v192 < 0)
    operator delete(v191[0]);
  v142 = v196;
  if (v196)
  {
    v143 = (unint64_t *)&v196->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  if (v194 < 0)
    operator delete(v193[0]);
  v146 = v242;
  std::string::basic_string[abi:ne180100]<0>(v187, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v187, 0, (uint64_t *)&Scalar);
  v189 = Scalar;
  if (Scalar)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = Scalar;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v190 = v147;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v146 + 24))(v146, &v189, 0, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v149 = v190;
  if (v190)
  {
    v150 = (unint64_t *)&v190->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = Scalar;
  Scalar = 0;
  if (v152)
    (*((void (**)(std::__shared_weak_count_vtbl *))v152->~__shared_weak_count + 1))(v152);
  if (v188 < 0)
    operator delete(v187[0]);
  v153 = *a4;
  v183 = v242;
  if (v242)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)v242;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v184 = v154;
  v242 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v153 + 56))(v153, &v183);
  v156 = v184;
  if (v184)
  {
    v157 = (unint64_t *)&v184->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = v242;
  v242 = 0;
  if (v159)
    (*(void (**)(void *))(*(_QWORD *)v159 + 8))(v159);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v260);
  v160 = v260;
  std::string::basic_string[abi:ne180100]<0>(v179, "mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v179, 0, (uint64_t *)&__p);
  v181 = __p;
  if (__p)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = (std::__shared_weak_count_vtbl *)__p;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v182 = v161;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v242, "add");
  std::string::basic_string[abi:ne180100]<0>(v245, "div");
  std::string::basic_string[abi:ne180100]<0>(v246, "max");
  std::string::basic_string[abi:ne180100]<0>(v247, "min");
  std::string::basic_string[abi:ne180100]<0>(v248, "mul");
  std::string::basic_string[abi:ne180100]<0>(v249, "sub");
  std::string::basic_string[abi:ne180100]<0>(v250, "update");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v242, 7);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, _QWORD))v160->~__shared_weak_count
   + 3))(v160, &v181, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v250[i + 2]) < 0)
      operator delete((void *)v250[i]);
  }
  v164 = v182;
  if (v182)
  {
    v165 = (unint64_t *)&v182->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = __p;
  __p = 0;
  if (v167)
    (*(void (**)(void *))(*(_QWORD *)v167 + 8))(v167);
  if (v180 < 0)
    operator delete(v179[0]);
  v168 = *a4;
  v177 = v260;
  if (v260)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = v260;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v170;
  }
  else
  {
    v169 = 0;
  }
  v178 = v169;
  v260 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v168 + 56))(v168, &v177);
  v171 = v178;
  if (v178)
  {
    v172 = (unint64_t *)&v178->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = v260;
  v260 = 0;
  if (v174)
    (*((void (**)(std::__shared_weak_count_vtbl *))v174->~__shared_weak_count + 1))(v174);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v232, 0);
  result = (uint64_t)v241;
  if (v241)
  {
    v176 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v241);
    return MEMORY[0x1E0C023A0](v176, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07A8728(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x238], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2A8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Scatter::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseScatterWithAxis::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A8E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ScatterAlongAxis::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseScatterWithAxis::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A8F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ScatterNd::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseScatter::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07A9078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateArgsort(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  int v7;
  const void *ParameterValue;
  int v9;
  uint64_t OutputType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  void *__p[2];
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *v36[2];
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40[2];
  char v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *v44[2];
  char v45;

  std::string::basic_string[abi:ne180100]<0>(v44, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v45 < 0)
    operator delete(v44[0]);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 104))(v6) & 1) == 0)
    goto LABEL_20;
  v7 = MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(v44, "axis");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v9 = MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v45 < 0)
    operator delete(v44[0]);
  if (v9 >= v7 || v9 < -v7)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v23 = (std::__shared_weak_count *)LocationPtr[1];
    v42 = *LocationPtr;
    v43 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v40, "'axis' must be within range (-input_rank - 1, input_rank) (exclusive)");
    MIL::ValidationResult::ValidationResult(a2, &v42, 315, v40);
    if (v41 < 0)
      operator delete(v40[0]);
    v19 = v43;
    if (v43)
    {
      v26 = (unint64_t *)&v43->__shared_owners_;
      do
        v21 = __ldaxr(v26);
      while (__stlxr(v21 - 1, v26));
      goto LABEL_38;
    }
    return;
  }
  OutputType = MIL::IROperation::GetOutputType(this, 0);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)OutputType + 24))(OutputType);
  if (v11)
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
    v13 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 96))(v6);
    v14 = *(_QWORD *)(v12 + 8) - *(_QWORD *)v12;
    if (v14 != *(_QWORD *)(v13 + 8) - *(_QWORD *)v13 || memcmp(*(const void **)v12, *(const void **)v13, v14))
    {
      v15 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v16 = (std::__shared_weak_count *)v15[1];
      v34 = *v15;
      v35 = v16;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Output type should be same as input type");
      MIL::ValidationResult::ValidationResult(a2, &v34, 313, __p);
      if (v33 < 0)
        operator delete(__p[0]);
      v19 = v35;
      if (v35)
      {
        v20 = (unint64_t *)&v35->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
LABEL_38:
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        return;
      }
      return;
    }
LABEL_20:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  v27 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v28 = (std::__shared_weak_count *)v27[1];
  v38 = *v27;
  v39 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  std::string::basic_string[abi:ne180100]<0>(v36, "Output type should be a tensor");
  MIL::ValidationResult::ValidationResult(a2, &v38, 313, v36);
  if (v37 < 0)
    operator delete(v36[0]);
  v19 = v39;
  if (v39)
  {
    v31 = (unint64_t *)&v39->__shared_owners_;
    do
      v21 = __ldaxr(v31);
    while (__stlxr(v21 - 1, v31));
    goto LABEL_38;
  }
}

void sub_1E07A9398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidatePad(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  uint64_t v7;
  MIL::IRValueType *v8;
  MIL::IRTensorValueType *v9;
  uint64_t v10;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  const void *ParameterValue;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  MIL::IRValue *v22;
  uint64_t v23;
  std::vector<int>::size_type v24;
  std::vector<int>::pointer begin;
  uint64_t v26;
  MIL::IRValueType *OutputType;
  MIL::IRTensorValueType *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  MIL::IRValue *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string *v42;
  std::string::size_type v44;
  int v45;
  int *v47;
  unint64_t v48;
  unint64_t v49;
  int *v51;
  unint64_t v52;
  unint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::string::size_type size;
  std::string *v95;
  __int128 v96;
  unint64_t *v97;
  uint64_t *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  uint64_t v108;
  std::string *v109;
  std::string::size_type v110;
  std::string *v111;
  __int128 v112;
  unint64_t *v113;
  uint64_t *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  __int128 v121;
  std::string *v122;
  __int128 v123;
  uint64_t v124;
  std::string *v125;
  std::string::size_type v126;
  std::string *v127;
  __int128 v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131[2];
  char v132;
  _QWORD v133[2];
  void *v134[2];
  std::string::size_type v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  std::string::size_type v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  std::string v142;
  std::string v143;
  std::string v144;
  __int128 v145;
  std::string::size_type v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  std::string v149;
  __int128 v150;
  std::string::size_type v151;
  _QWORD v152[2];
  std::string v153;
  void *v154[2];
  char v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  void *v158[2];
  char v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  std::vector<int> __p;
  std::string v163;
  uint64_t v164[2];
  void *v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  int v169;
  MIL::IRDimension **v170;
  MIL::IRDimension **v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;

  std::string::basic_string[abi:ne180100]<0>(&v165, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v166) < 0)
    operator delete(v165);
  v7 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 96))(v6);
  v174 = 0;
  v175 = 0;
  v173 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v173, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v165, "pad");
  v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v166) < 0)
    operator delete(v165);
  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  v170 = 0;
  v171 = 0;
  v172 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v170, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v12 = (std::__shared_weak_count *)LocationPtr[1];
  v164[0] = *LocationPtr;
  v164[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v165))
  {
    v20 = v167;
    *(_OWORD *)(a2 + 8) = v166;
    v166 = 0uLL;
    *(_OWORD *)(a2 + 24) = v20;
    *(_QWORD *)(a2 + 40) = v168;
    v167 = 0uLL;
    v168 = 0;
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v169;
    goto LABEL_126;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mode");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  MIL::IRValue::GetScalar<std::string>(ParameterValue, &v163);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  v18 = MIL::IRDimension::AsConstant(*v170);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18) < 5)
    goto LABEL_38;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v163.__r_.__value_.__l.__size_ == 8)
    {
      v19 = (std::string *)v163.__r_.__value_.__r.__words[0];
LABEL_23:
      if (v19->__r_.__value_.__r.__words[0] == 0x746E6174736E6F63)
        goto LABEL_38;
    }
  }
  else if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) == 8)
  {
    v19 = &v163;
    goto LABEL_23;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "pad");
  v21 = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&__p, 0);
  v22 = (MIL::IRValue *)v21;
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
  {
    operator delete(__p.__begin_);
    if (!v22)
      goto LABEL_90;
  }
  else if (!v21)
  {
    goto LABEL_90;
  }
  v23 = MIL::IRDimension::AsConstant(*v170);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23);
  std::vector<int>::vector(&__p, v24);
  if (__p.__end_ == __p.__begin_)
    begin = 0;
  else
    begin = __p.__begin_;
  MIL::IRValueUtils::CopyTensorTo<int>(v22, begin, __p.__end_ - __p.__begin_);
  if (__p.__end_ - __p.__begin_ != 4)
  {
    v26 = 0;
    while (!__p.__begin_[v26])
    {
      if (__p.__end_ - __p.__begin_ - 4 == ++v26)
        goto LABEL_37;
    }
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
LABEL_90:
    v65 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v66 = (std::__shared_weak_count *)v65[1];
    v160 = *v65;
    v161 = v66;
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    MIL::ValidationResult::ValidationResult(a2, &v160, 315, v158);
    if (v159 < 0)
      operator delete(v158[0]);
    v69 = v161;
    if (v161)
    {
      v70 = (unint64_t *)&v161->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    goto LABEL_124;
  }
  if (__p.__begin_)
  {
LABEL_37:
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
LABEL_38:
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  v28 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 104))(v6)
    || !(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v28 + 104))(v28))
  {
    goto LABEL_123;
  }
  v29 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v28 + 96))(v28);
  memset(&__p, 0, sizeof(__p));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v29, *(_QWORD *)(v29 + 8), (uint64_t)(*(_QWORD *)(v29 + 8) - *(_QWORD *)v29) >> 3);
  v30 = MIL::IRTensorValueType::Rank(v6);
  if (v30 != MIL::IRTensorValueType::Rank(v28))
  {
    v58 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v59 = (std::__shared_weak_count *)v58[1];
    v156 = *v58;
    v157 = v59;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    std::string::basic_string[abi:ne180100]<0>(v154, "Input and output should have the same rank");
    MIL::ValidationResult::ValidationResult(a2, &v156, 313, v154);
    if (v155 < 0)
      operator delete(v154[0]);
    v62 = v157;
    if (v157)
    {
      v63 = (unint64_t *)&v157->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      goto LABEL_87;
    }
    goto LABEL_120;
  }
  v31 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 16))(v9);
  std::string::basic_string[abi:ne180100]<0>(&v153, "pad");
  v32 = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)&v153, 0);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (!v32)
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
    goto LABEL_119;
  }
  v33 = (uint64_t *)MIL::IRValue::AsTensor(v32);
  v34 = 0;
  v130 = v31 >> 1;
  for (i = MIL::IRTensorValue::GetDataView<int>(v33) + 8 * (v31 >> 1); ; i += 8)
  {
    if (v34 >= MIL::IRTensorValueType::Rank(v6))
    {
      LOBYTE(v62) = 1;
      goto LABEL_120;
    }
    v36 = v173[v34];
    v37 = *(_QWORD *)&__p.__begin_[2 * v34];
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
    if ((v38 == 0) == (v39 != 0))
    {
      v72 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
      v73 = v72[1];
      v152[0] = *v72;
      v152[1] = v73;
      if (v73)
      {
        v74 = (unint64_t *)(v73 + 8);
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      std::to_string(&v149, v34);
      v76 = std::string::insert(&v149, 0, "Dim ");
      v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v153.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      v78 = std::string::append(&v153, " for both input and output should have matching dimension type");
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v151 = v78->__r_.__value_.__r.__words[2];
      v150 = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a2, v152, 313, &v150);
      if (SHIBYTE(v151) < 0)
        operator delete((void *)v150);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      v80 = v152;
      goto LABEL_118;
    }
    if (v34 >= MIL::IRTensorValueType::Rank(v6) - v130)
      break;
    if (v36 != v37)
    {
      v81 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
      v82 = v81[1];
      v133[0] = *v81;
      v133[1] = v82;
      if (v82)
      {
        v83 = (unint64_t *)(v82 + 8);
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      std::string::basic_string[abi:ne180100]<0>(v131, "Output shape dimensions should match input when no padding is added");
      MIL::ValidationResult::ValidationResult(a2, v133, 313, v131);
      if (v132 < 0)
        operator delete(v131[0]);
      v80 = v133;
LABEL_118:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v80);
      goto LABEL_119;
    }
LABEL_78:
    ++v34;
  }
  if (!v38)
    goto LABEL_78;
  v40 = MIL::IRTensorValueType::Rank(v6);
  v41 = v40;
  if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v163.__r_.__value_.__r.__words[2]) != 7)
    {
      if (HIBYTE(v163.__r_.__value_.__r.__words[2]) == 9)
      {
        v42 = &v163;
        goto LABEL_62;
      }
LABEL_77:
      v54 = (int *)(i - 8 * v41);
      v55 = *v54;
      v56 = v54[1];
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38) + v56 + v55;
      if (v57 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(v39))
        goto LABEL_78;
      v85 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v86 = (std::__shared_weak_count *)v85[1];
      v136 = *v85;
      v137 = v86;
      if (v86)
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      std::to_string(&v144, v34);
      v89 = std::string::insert(&v144, 0, "Output dim");
      v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      v91 = std::string::append(&v149, " size incorrect. Expected ");
      v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v153.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v143, v57);
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v93 = &v143;
      else
        v93 = (std::string *)v143.__r_.__value_.__r.__words[0];
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v143.__r_.__value_.__r.__words[2]);
      else
        size = v143.__r_.__value_.__l.__size_;
      v95 = std::string::append(&v153, (const std::string::value_type *)v93, size);
      v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
      v135 = v95->__r_.__value_.__r.__words[2];
      *(_OWORD *)v134 = v96;
      v95->__r_.__value_.__l.__size_ = 0;
      v95->__r_.__value_.__r.__words[2] = 0;
      v95->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a2, &v136, 313, v134);
      if (SHIBYTE(v135) < 0)
        operator delete(v134[0]);
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v143.__r_.__value_.__l.__data_);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      v62 = v137;
      if (!v137)
        goto LABEL_120;
      v97 = (unint64_t *)&v137->__shared_owners_;
      do
        v64 = __ldaxr(v97);
      while (__stlxr(v64 - 1, v97));
LABEL_87:
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
LABEL_119:
      LOBYTE(v62) = 0;
      goto LABEL_120;
    }
    if (LODWORD(v163.__r_.__value_.__l.__data_) != 1818649970
      || *(_DWORD *)((char *)v163.__r_.__value_.__r.__words + 3) != 1952671084)
    {
      goto LABEL_77;
    }
LABEL_75:
    v51 = (int *)(i - 8 * v40);
    v52 = *v51;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38) <= v52
      || (v53 = v51[1], (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38) <= v53))
    {
      v114 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v115 = (std::__shared_weak_count *)v114[1];
      v147 = *v114;
      v148 = v115;
      if (v115)
      {
        v116 = (unint64_t *)&v115->__shared_owners_;
        do
          v117 = __ldxr(v116);
        while (__stxr(v117 + 1, v116));
      }
      std::to_string(&v143, v34);
      v118 = std::string::insert(&v143, 0, "Padding size for dim");
      v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v119;
      v118->__r_.__value_.__l.__size_ = 0;
      v118->__r_.__value_.__r.__words[2] = 0;
      v118->__r_.__value_.__r.__words[0] = 0;
      v120 = std::string::append(&v144, " is too big for mode reflect. ");
      v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      v122 = std::string::append(&v149, " It can a maximum of (dim_size - 1) ");
      v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
      v153.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v123;
      v122->__r_.__value_.__l.__size_ = 0;
      v122->__r_.__value_.__r.__words[2] = 0;
      v122->__r_.__value_.__r.__words[0] = 0;
      v124 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38);
      std::to_string(&v142, v124 - 1);
      if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v125 = &v142;
      else
        v125 = (std::string *)v142.__r_.__value_.__r.__words[0];
      if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v126 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
      else
        v126 = v142.__r_.__value_.__l.__size_;
      v127 = std::string::append(&v153, (const std::string::value_type *)v125, v126);
      v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
      v146 = v127->__r_.__value_.__r.__words[2];
      v145 = v128;
      v127->__r_.__value_.__l.__size_ = 0;
      v127->__r_.__value_.__r.__words[2] = 0;
      v127->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a2, &v147, 315, &v145);
      if (SHIBYTE(v146) < 0)
        operator delete((void *)v145);
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v142.__r_.__value_.__l.__data_);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v143.__r_.__value_.__l.__data_);
      v62 = v148;
      if (v148)
      {
        v129 = (unint64_t *)&v148->__shared_owners_;
        do
          v64 = __ldaxr(v129);
        while (__stlxr(v64 - 1, v129));
        goto LABEL_87;
      }
      goto LABEL_120;
    }
    goto LABEL_77;
  }
  if (v163.__r_.__value_.__l.__size_ == 7
    && *(_DWORD *)v163.__r_.__value_.__l.__data_ == 1818649970
    && *(_DWORD *)(v163.__r_.__value_.__r.__words[0] + 3) == 1952671084)
  {
    goto LABEL_75;
  }
  if (v163.__r_.__value_.__l.__size_ != 9)
    goto LABEL_77;
  v42 = (std::string *)v163.__r_.__value_.__r.__words[0];
LABEL_62:
  v44 = v42->__r_.__value_.__r.__words[0];
  v45 = v42->__r_.__value_.__s.__data_[8];
  if (v44 != 0x746163696C706572 || v45 != 101)
    goto LABEL_77;
  v47 = (int *)(i - 8 * v40);
  v48 = *v47;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38) >= v48)
  {
    v49 = v47[1];
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38) >= v49)
      goto LABEL_77;
  }
  v98 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v99 = (std::__shared_weak_count *)v98[1];
  v140 = *v98;
  v141 = v99;
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  std::to_string(&v143, v34);
  v102 = std::string::insert(&v143, 0, "Padding size for dim");
  v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v144.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  v104 = std::string::append(&v144, " is too big for mode replicate. ");
  v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v149.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  v106 = std::string::append(&v149, " It can a maximum of (dim_size) ");
  v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v153.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38);
  std::to_string(&v142, v108 - 1);
  if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v109 = &v142;
  else
    v109 = (std::string *)v142.__r_.__value_.__r.__words[0];
  if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v110 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
  else
    v110 = v142.__r_.__value_.__l.__size_;
  v111 = std::string::append(&v153, (const std::string::value_type *)v109, v110);
  v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
  v139 = v111->__r_.__value_.__r.__words[2];
  *(_OWORD *)v138 = v112;
  v111->__r_.__value_.__l.__size_ = 0;
  v111->__r_.__value_.__r.__words[2] = 0;
  v111->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(a2, &v140, 315, v138);
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  v62 = v141;
  if (v141)
  {
    v113 = (unint64_t *)&v141->__shared_owners_;
    do
      v64 = __ldaxr(v113);
    while (__stlxr(v64 - 1, v113));
    goto LABEL_87;
  }
LABEL_120:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if ((v62 & 1) != 0)
LABEL_123:
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
LABEL_124:
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
LABEL_126:
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v165);
  if (v170)
  {
    v171 = v170;
    operator delete(v170);
  }
  if (v173)
  {
    v174 = v173;
    operator delete(v173);
  }
}

void sub_1E07AA1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a68;
  char a72;
  void *a73;
  uint64_t a74;
  uint64_t v74;
  void *v76;
  void *v77;

  if (a51 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a72 < 0)
    operator delete(a68);
  if (a60 < 0)
    operator delete(a55);
  if (a44 < 0)
    operator delete(a39);
  if (a38 < 0)
    operator delete(a33);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  if (a73)
  {
    a74 = (uint64_t)a73;
    operator delete(a73);
  }
  if (*(char *)(v74 - 217) < 0)
    operator delete(*(void **)(v74 - 240));
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v74 - 200));
  v76 = *(void **)(v74 - 144);
  if (v76)
  {
    *(_QWORD *)(v74 - 136) = v76;
    operator delete(v76);
  }
  v77 = *(void **)(v74 - 120);
  if (v77)
  {
    *(_QWORD *)(v74 - 112) = v77;
    operator delete(v77);
  }
  _Unwind_Resume(a1);
}

void sub_1E07AA568()
{
  uint64_t v0;

  if (*(char *)(v0 - 177) < 0)
    JUMPOUT(0x1E07AA55CLL);
  JUMPOUT(0x1E07AA560);
}

void `anonymous namespace'::ValidatePadInputs(MIL::IRTensorValueType *a1@<X0>, MIL::IRTensorValueType *a2@<X1>, uint64_t *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  char v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35[2];
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  MIL::IRDimension **v39;
  MIL::IRDimension **v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;

  v8 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 96))(a1);
  v43 = 0;
  v44 = 0;
  v42 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v42, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
  v9 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a2 + 96))(a2);
  v39 = 0;
  v40 = 0;
  v41 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v39, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3);
  if (MIL::IRTensorValueType::Rank(a2) != 1)
  {
    v18 = (std::__shared_weak_count *)a3[1];
    v37 = *a3;
    v38 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "Padding must be rank 1");
    MIL::ValidationResult::ValidationResult(a4, &v37, 315, v35);
    if (v36 < 0)
      operator delete(v35[0]);
    v15 = v38;
    if (!v38)
      goto LABEL_34;
    v21 = (unint64_t *)&v38->__shared_owners_;
    do
      v17 = __ldaxr(v21);
    while (__stlxr(v17 - 1, v21));
    goto LABEL_32;
  }
  v10 = MIL::IRDimension::AsConstant(*v39);
  if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 104))(a1)
    || (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10),
        v11 <= 2 * MIL::IRTensorValueType::Rank(a1)))
  {
    v22 = MIL::IRDimension::AsConstant(*v39);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22) & 1) == 0)
    {
      MIL::ValidationResult::ValidationResult(a4);
      goto LABEL_34;
    }
    v23 = (std::__shared_weak_count *)a3[1];
    v29 = *a3;
    v30 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    std::string::basic_string[abi:ne180100]<0>(v27, "Padding must be even! Provided odd number of padding");
    MIL::ValidationResult::ValidationResult(a4, &v29, 315, v27);
    if (v28 < 0)
      operator delete(v27[0]);
    v15 = v30;
    if (!v30)
      goto LABEL_34;
    v26 = (unint64_t *)&v30->__shared_owners_;
    do
      v17 = __ldaxr(v26);
    while (__stlxr(v17 - 1, v26));
LABEL_32:
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    goto LABEL_34;
  }
  v12 = (std::__shared_weak_count *)a3[1];
  v33 = *a3;
  v34 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Pad can have a maximum size of 2 * (input x rank)");
  MIL::ValidationResult::ValidationResult(a4, &v33, 315, __p);
  if (v32 < 0)
    operator delete(__p[0]);
  v15 = v34;
  if (v34)
  {
    v16 = (unint64_t *)&v34->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    goto LABEL_32;
  }
LABEL_34:
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
}

void sub_1E07AA81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  void *v33;
  void *v34;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  v33 = *(void **)(v31 - 80);
  if (v33)
  {
    *(_QWORD *)(v31 - 72) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v31 - 56);
  if (v34)
  {
    *(_QWORD *)(v31 - 48) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *MIL::IRValueUtils::CopyTensorTo<int>(MIL::IRValue *a1, void *a2, unint64_t a3)
{
  uint64_t *v5;
  void *result;
  unint64_t v7;
  std::runtime_error *exception;

  v5 = (uint64_t *)MIL::IRValue::AsTensor(a1);
  result = (void *)MIL::IRTensorValue::GetDataView<int>(v5);
  if (a3 < v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Insufficient destination buffer size.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v7)
    return memmove(a2, result, 4 * v7);
  return result;
}

void sub_1E07AA948(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateFill(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t ParameterValue;
  uint64_t v6;
  MIL::IRValueType *v7;
  MIL::IRTensorValueType *v8;
  unint64_t v9;
  std::string *v10;
  std::string::value_type *v11;
  std::string::size_type size;
  int v13;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  std::string __p;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _DWORD v35[2];
  std::string v36;

  std::string::basic_string[abi:ne180100]<0>(&v36, "shape");
  ParameterValue = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&v36, 0);
  v6 = ParameterValue;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v36.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_21;
  }
  else if (!ParameterValue)
  {
    goto LABEL_21;
  }
  v7 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v7);
  v9 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v8 + 16))(v8);
  if (v9 >= 6)
  {
    std::to_string(&v36, v9);
    v10 = std::string::insert(&v36, 0, "'shape' parameter must have size less than equal to 5. Instead, size is ");
    v11 = (std::string::value_type *)v10->__r_.__value_.__r.__words[0];
    size = v10->__r_.__value_.__l.__size_;
    v35[0] = v10->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
    v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v15 = (std::__shared_weak_count *)LocationPtr[1];
    v33 = *LocationPtr;
    v34 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    if (v13 < 0)
    {
      std::string::__init_copy_ctor_external(&v32, v11, size);
    }
    else
    {
      v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v32.__r_.__value_.__l.__size_ = size;
      LODWORD(v32.__r_.__value_.__r.__words[2]) = v35[0];
      *(_DWORD *)((char *)&v32.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v35 + 3);
      *((_BYTE *)&v32.__r_.__value_.__s + 23) = v13;
    }
    MIL::ValidationResult::ValidationResult(a2, &v33, 315, &v32);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    v25 = v34;
    if (v34)
    {
      v26 = (unint64_t *)&v34->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      goto LABEL_35;
    }
LABEL_36:
    if ((v13 & 0x80000000) == 0)
      return;
    goto LABEL_37;
  }
  v18 = MIL::IRTensorValueType::Rank(v8);
  if (v18 < 2)
  {
LABEL_21:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  std::to_string(&v36, v18);
  v19 = std::string::insert(&v36, 0, "'shape' parameter must have 1 dimension (rank 1). Instead, rank is ");
  v11 = (std::string::value_type *)v19->__r_.__value_.__r.__words[0];
  v20 = v19->__r_.__value_.__l.__size_;
  v35[0] = v19->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)((char *)&v19->__r_.__value_.__r.__words[2] + 3);
  v13 = SHIBYTE(v19->__r_.__value_.__r.__words[2]);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v21 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v22 = (std::__shared_weak_count *)v21[1];
  v30 = *v21;
  v31 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (v13 < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v11, v20);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    __p.__r_.__value_.__l.__size_ = v20;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v35[0];
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v35 + 3);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v13;
  }
  MIL::ValidationResult::ValidationResult(a2, &v30, 315, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v25 = v31;
  if (!v31)
    goto LABEL_36;
  v28 = (unint64_t *)&v31->__shared_owners_;
  do
    v27 = __ldaxr(v28);
  while (__stlxr(v27 - 1, v28));
LABEL_35:
  if (v27)
    goto LABEL_36;
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (v13 < 0)
LABEL_37:
    operator delete(v11);
}

void sub_1E07AAC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  void *v23;
  int v24;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v24 < 0)
    operator delete(v23);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateFlatten2D(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  _BOOL4 IsParameterSet;
  _BOOL4 v8;
  const void *ParameterValue;
  int v10;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];
  void *__p[2];
  char v19;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v19 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)__p);
  v8 = IsParameterSet;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (v8)
      goto LABEL_5;
LABEL_16:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  if (!IsParameterSet)
    goto LABEL_16;
LABEL_5:
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v10 = MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v19 < 0)
    operator delete(__p[0]);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v12 = (std::__shared_weak_count *)LocationPtr[1];
  v17[0] = *LocationPtr;
  v17[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1E07AADF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ValidateFlatten2DInputs(MIL::IRTensorValueType *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 104))(a1) & 1) != 0
    && ((v8 = MIL::IRTensorValueType::Rank(a1), v8 < a2) || -v8 > a2))
  {
    v9 = (std::__shared_weak_count *)a3[1];
    v17 = *a3;
    v18 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "'axis'' must be within range [-input_rank, input_rank]");
    MIL::ValidationResult::ValidationResult(a4, &v17, 315, __p);
    if (v16 < 0)
      operator delete(__p[0]);
    v12 = v18;
    if (v18)
    {
      v13 = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    MIL::ValidationResult::ValidationResult(a4);
  }
}

void sub_1E07AAF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateNonMaximumSuppression(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  MIL::IRValueType *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  _QWORD *LocationPtr;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35[2];
  char v36;
  _QWORD v37[2];
  void *v38[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  char v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49[2];
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;

  std::string::basic_string[abi:ne180100]<0>(&v53, "boxes");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v55) < 0)
    operator delete(v53);
  std::string::basic_string[abi:ne180100]<0>(&v53, "scores");
  v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v55) < 0)
    operator delete(v53);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8) & 1) != 0)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
    v54 = 0;
    v55 = 0;
    v53 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v53, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v46, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
    if (*v53 == *(_QWORD *)v46)
    {
      if (v53[1] == *((_QWORD *)v46 + 1))
      {
        v30 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v53[2] + 16))(v53[2]);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30) == 4)
        {
          MIL::ValidationResult::ValidationResult(a2);
        }
        else
        {
          LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
          v32 = LocationPtr[1];
          v37[0] = *LocationPtr;
          v37[1] = v32;
          if (v32)
          {
            v33 = (unint64_t *)(v32 + 8);
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          std::string::basic_string[abi:ne180100]<0>(v35, "Invalid boxes coordinate");
          MIL::ValidationResult::ValidationResult(a2, v37, 315, v35);
          if (v36 < 0)
            operator delete(v35[0]);
          std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v37);
        }
        goto LABEL_46;
      }
      v25 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v26 = (std::__shared_weak_count *)v25[1];
      v40 = *v25;
      v41 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v38, "Boxes don't match between boxes and scores");
      MIL::ValidationResult::ValidationResult(a2, &v40, 315, v38);
      if (v39 < 0)
        operator delete(v38[0]);
      v15 = v41;
      if (!v41)
      {
LABEL_46:
        if (v46)
        {
          v47 = v46;
          operator delete(v46);
        }
        if (v53)
        {
          v54 = v53;
          operator delete(v53);
        }
        return;
      }
      v29 = (unint64_t *)&v41->__shared_owners_;
      do
        v17 = __ldaxr(v29);
      while (__stlxr(v17 - 1, v29));
    }
    else
    {
      v11 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v12 = (std::__shared_weak_count *)v11[1];
      v44 = *v11;
      v45 = v12;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Batch doesn't match between boxes and scores");
      MIL::ValidationResult::ValidationResult(a2, &v44, 315, __p);
      if (v43 < 0)
        operator delete(__p[0]);
      v15 = v45;
      if (!v45)
        goto LABEL_46;
      v16 = (unint64_t *)&v45->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
    }
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    goto LABEL_46;
  }
  v18 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v19 = (std::__shared_weak_count *)v18[1];
  v51 = *v18;
  v52 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  std::string::basic_string[abi:ne180100]<0>(v49, "Non-fixed rank not supported");
  MIL::ValidationResult::ValidationResult(a2, &v51, 315, v49);
  if (v50 < 0)
    operator delete(v49[0]);
  v22 = v52;
  if (v52)
  {
    v23 = (unint64_t *)&v52->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1E07AB308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34)
{
  uint64_t v34;
  void *v36;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  v36 = *(void **)(v34 - 72);
  if (v36)
  {
    *(_QWORD *)(v34 - 64) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateTile(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValue *ParameterValue;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12[2];
  void *__p[2];
  char v14;

  std::string::basic_string[abi:ne180100]<0>(__p, "reps");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)__p, 0);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v7 = (std::__shared_weak_count *)LocationPtr[1];
  v12[0] = *LocationPtr;
  v12[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v14 < 0)
    operator delete(__p[0]);
}

void sub_1E07AB4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ValidateTileInputs(MIL::IRValue *a1@<X0>, uint64_t *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t *v5;
  int *Data;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  if (a1 && (v5 = (uint64_t *)MIL::IRValue::AsTensor(a1), Data = (int *)MIL::IRTensorValue::GetDataView<int>(v5), v7))
  {
    v8 = 4 * v7;
    while (*Data > 0)
    {
      ++Data;
      v8 -= 4;
      if (!v8)
        goto LABEL_6;
    }
    v9 = (std::__shared_weak_count *)a2[1];
    v17 = *a2;
    v18 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "All values of reps must be at least 1");
    MIL::ValidationResult::ValidationResult(a3, &v17, 315, __p);
    if (v16 < 0)
      operator delete(__p[0]);
    v12 = v18;
    if (v18)
    {
      v13 = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
LABEL_6:
    MIL::ValidationResult::ValidationResult(a3);
  }
}

void sub_1E07AB5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateTopk(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  const void *ParameterValue;
  int v8;
  uint64_t v9;
  const void *v10;
  int v11;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18[2];
  void *__p;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  void *v24;
  char v25;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  if (MIL::IROperation::TryGetParameterValue(this, (uint64_t)&__p, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "axis");
    ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
    v8 = MIL::IRValue::GetScalar<int>(ParameterValue);
    if (v25 < 0)
      operator delete(v24);
  }
  else
  {
    v8 = -1;
  }
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "k");
  v9 = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&__p, 0);
  v10 = (const void *)v9;
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p);
    if (v10)
      goto LABEL_11;
  }
  else if (v9)
  {
LABEL_11:
    v11 = MIL::IRValue::GetScalar<int>(v10);
    goto LABEL_14;
  }
  v11 = 1;
LABEL_14:
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v13 = (std::__shared_weak_count *)LocationPtr[1];
  v18[0] = *LocationPtr;
  v18[1] = (uint64_t)v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v20;
    v20 = 0uLL;
    *(_OWORD *)(a2 + 24) = v21;
    *(_QWORD *)(a2 + 40) = v22;
    v21 = 0uLL;
    v22 = 0;
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v23;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
}

void sub_1E07AB80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::ValidateTopkInputs(MIL::IRTensorValueType *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  unint64_t v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  unint64_t *v54;
  void *__p[2];
  std::string::size_type v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  __int128 v67;
  std::string::size_type v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  _QWORD **v71;
  _QWORD **v72;
  uint64_t v73;

  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 96))(a1);
  v72 = 0;
  v73 = 0;
  v71 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v71, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 104))(a1) & 1) == 0)
    goto LABEL_9;
  v11 = a2;
  if (a2 < 0)
    v11 = MIL::IRTensorValueType::Rank(a1) + a2;
  v12 = MIL::IRTensorValueType::Rank(a1);
  if (v11 < 0 || v12 <= v11)
  {
    v16 = (std::__shared_weak_count *)a4[1];
    v69 = *a4;
    v70 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    std::to_string(&v61, a2);
    v19 = std::string::insert(&v61, 0, "Provided axis (");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v62, ") is not within range [-");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = MIL::IRTensorValueType::Rank(a1);
    std::to_string(&v60, v23);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v60;
    else
      v24 = (std::string *)v60.__r_.__value_.__r.__words[0];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      size = v60.__r_.__value_.__l.__size_;
    v26 = std::string::append(&v63, (const std::string::value_type *)v24, size);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v64, ", ");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = MIL::IRTensorValueType::Rank(a1);
    std::to_string(&v59, v30 - 1);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v59;
    else
      v31 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    else
      v32 = v59.__r_.__value_.__l.__size_;
    v33 = std::string::append(&v65, (const std::string::value_type *)v31, v32);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append(&v66, "] for TopK");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v68 = v35->__r_.__value_.__r.__words[2];
    v67 = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a5, &v69, 315, &v67);
    if (SHIBYTE(v68) < 0)
      operator delete((void *)v67);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    v37 = v70;
    if (v70)
    {
      v38 = (unint64_t *)&v70->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
LABEL_72:
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    v13 = (*(uint64_t (**)(_QWORD *))(*v71[v11] + 16))(v71[v11]);
    v14 = v13;
    if (!v13 || (v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13), a3 >= 1) && v15 >= a3)
    {
LABEL_9:
      MIL::ValidationResult::ValidationResult(a5);
      goto LABEL_74;
    }
    v40 = (std::__shared_weak_count *)a4[1];
    v57 = *a4;
    v58 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    std::to_string(&v63, a3);
    v43 = std::string::insert(&v63, 0, "Provided k (");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = std::string::append(&v64, ") is not within range [1, ");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
    std::to_string(&v62, v47);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v62;
    else
      v48 = (std::string *)v62.__r_.__value_.__r.__words[0];
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    else
      v49 = v62.__r_.__value_.__l.__size_;
    v50 = std::string::append(&v65, (const std::string::value_type *)v48, v49);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = std::string::append(&v66, "] for TopK");
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v56 = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a5, &v57, 315, __p);
    if (SHIBYTE(v56) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    v37 = v58;
    if (v58)
    {
      v54 = (unint64_t *)&v58->__shared_owners_;
      do
        v39 = __ldaxr(v54);
      while (__stlxr(v39 - 1, v54));
      goto LABEL_72;
    }
  }
LABEL_74:
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
}

void sub_1E07ABD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;
  void *v56;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v54 - 137) < 0)
    operator delete(*(void **)(v54 - 160));
  if (a40 < 0)
    operator delete(a35);
  if (*(char *)(v54 - 169) < 0)
    operator delete(*(void **)(v54 - 192));
  if (a54 < 0)
    operator delete(a49);
  if (a47 < 0)
    operator delete(a42);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  v56 = *(void **)(v54 - 88);
  if (v56)
  {
    *(_QWORD *)(v54 - 80) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceArgsort(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *__p[2];
  char v12;
  void *v13;
  void *v14;
  uint64_t v15;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v13, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
  if (v12 < 0)
    operator delete(__p[0]);
  v9 = MIL::IRTensorValueType::MakeWithShape(*a1, 11, (uint64_t)&v13);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = (uint64_t *)operator new(8uLL);
  *a3 = v10;
  *v10++ = v9;
  a3[1] = v10;
  a3[2] = v10;
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
}

void sub_1E07ABFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceFill(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  unsigned __int8 *v8;
  MIL::IRValueType *ValueType;
  uint64_t v10;
  int v11;
  MIL::IRValue *SingleValue;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t Data;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  MIL::MILContext *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  MIL::IRValueType *v34;
  uint64_t v35;
  MIL::IRDimension *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  void *exception;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72[2];
  char v73;
  _QWORD v74[3];
  __int128 v75;
  void *__p;
  uint64_t *v77;
  char *v78;

  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v8
                                                                      + 5));
  v10 = MIL::IRValueType::AsTensorType(ValueType);
  if (SHIBYTE(v78) < 0)
    operator delete(__p);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v78) < 0)
    operator delete(__p);
  __p = 0;
  v77 = 0;
  v78 = 0;
  if (SingleValue)
  {
    v13 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
    v14 = (*(uint64_t (**)(uint64_t *))(*v13 + 32))(v13);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    std::vector<std::string const*>::reserve(&__p, v15);
    v71 = a2;
    Data = MIL::IRTensorValue::GetDataView<int>(v13);
    if (v17)
    {
      v18 = (unsigned int *)Data;
      v19 = (unsigned int *)(Data + 4 * v17);
      do
      {
        v20 = (MIL::MILContext *)*v18;
        if ((int)v20 <= 0)
        {
          exception = __cxa_allocate_exception(0x48uLL);
          v68 = v71[1];
          *(_QWORD *)&v75 = *v71;
          *((_QWORD *)&v75 + 1) = v68;
          if (v68)
          {
            v69 = (unint64_t *)(v68 + 8);
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
          }
          std::string::basic_string[abi:ne180100]<0>(v74, "Cannot fill tensor of shape with negative elements.");
          MIL::ValidationError::ValidationError((uint64_t)exception, &v75, (uint64_t)v74, 315);
        }
        v21 = MIL::IRConstantDimension::Make(*a1, v20);
        v22 = v21;
        v23 = v77;
        if (v77 >= (uint64_t *)v78)
        {
          v25 = ((char *)v77 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v25 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v26 = (v78 - (_BYTE *)__p) >> 2;
          if (v26 <= v25 + 1)
            v26 = v25 + 1;
          if ((unint64_t)(v78 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v78, v27);
          else
            v28 = 0;
          v29 = (uint64_t *)&v28[8 * v25];
          *v29 = v22;
          v24 = v29 + 1;
          v31 = (char *)__p;
          v30 = (char *)v77;
          if (v77 != __p)
          {
            do
            {
              v32 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *--v29 = v32;
            }
            while (v30 != v31);
            v30 = (char *)__p;
          }
          __p = v29;
          v77 = v24;
          v78 = &v28[8 * v27];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v77 = v21;
          v24 = v23 + 1;
        }
        v77 = v24;
        ++v18;
      }
      while (v18 != v19);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v72, "shape");
    v33 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v72);
    if (!v33)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v34 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v33
                                                                  + 5));
    v35 = MIL::IRValueType::AsTensorType(v34);
    v36 = **(MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 96))(v35);
    if (v73 < 0)
      operator delete(v72[0]);
    if ((*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)v36 + 24))(v36))
    {
      v37 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
      v38 = v37;
      v39 = v77;
      if (v77 >= (uint64_t *)v78)
      {
        v56 = ((char *)v77 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v56 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v57 = (v78 - (_BYTE *)__p) >> 2;
        if (v57 <= v56 + 1)
          v57 = v56 + 1;
        if ((unint64_t)(v78 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v58 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v58 = v57;
        if (v58)
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v78, v58);
        else
          v59 = 0;
        v60 = (uint64_t *)&v59[8 * v56];
        v61 = &v59[8 * v58];
        *v60 = v38;
        v40 = v60 + 1;
        v63 = (char *)__p;
        v62 = (char *)v77;
        if (v77 != __p)
        {
          do
          {
            v64 = *((_QWORD *)v62 - 1);
            v62 -= 8;
            *--v60 = v64;
          }
          while (v62 != v63);
          v62 = (char *)__p;
        }
        __p = v60;
        v77 = v40;
        v78 = v61;
        if (v62)
          operator delete(v62);
      }
      else
      {
        *v77 = v37;
        v40 = v39 + 1;
      }
      v77 = v40;
    }
    else
    {
      v41 = MIL::IRDimension::AsConstant(v36);
      v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 48))(v41);
      std::vector<std::string const*>::reserve(&__p, v42);
      if (v42)
      {
        for (i = 0; i != v42; ++i)
        {
          v44 = MIL::IRUnknownDimension::Make(*a1, 0);
          v45 = v44;
          v46 = v77;
          if (v77 >= (uint64_t *)v78)
          {
            v48 = ((char *)v77 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v48 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v49 = (v78 - (_BYTE *)__p) >> 2;
            if (v49 <= v48 + 1)
              v49 = v48 + 1;
            if ((unint64_t)(v78 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v49;
            if (v50)
              v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v78, v50);
            else
              v51 = 0;
            v52 = (uint64_t *)&v51[8 * v48];
            *v52 = v45;
            v47 = v52 + 1;
            v54 = (char *)__p;
            v53 = (char *)v77;
            if (v77 != __p)
            {
              do
              {
                v55 = *((_QWORD *)v53 - 1);
                v53 -= 8;
                *--v52 = v55;
              }
              while (v53 != v54);
              v53 = (char *)__p;
            }
            __p = v52;
            v77 = v47;
            v78 = &v51[8 * v50];
            if (v53)
              operator delete(v53);
          }
          else
          {
            *v77 = v44;
            v47 = v46 + 1;
          }
          v77 = v47;
        }
      }
    }
  }
  v65 = MIL::IRTensorValueType::MakeWithShape(*a1, v11, (uint64_t)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v66 = (uint64_t *)operator new(8uLL);
  *a4 = v66;
  *v66++ = v65;
  a4[1] = v66;
  a4[2] = v66;
  if (__p)
  {
    v77 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_1E07AC520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceFlatten2D(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v9;
  _QWORD *v10;
  const void *SingleValue;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void (***v19)(MIL::MILContextImpl *__hidden);
  int v20;
  uint64_t v21;
  uint64_t *v22;
  void *exception;
  _QWORD v24[3];
  void *__p;
  void *v26;
  uint64_t v27;
  std::string v28[2];
  int v29;
  uint64_t v30[2];
  void *v31[2];
  char v32;
  int v33;

  std::string::basic_string[abi:ne180100]<0>(v31, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v31);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v32 < 0)
    operator delete(v31[0]);
  v10 = (_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  std::string::basic_string[abi:ne180100]<0>(v31, "axis");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v31);
  v12 = MIL::IRValue::GetScalar<int>(SingleValue);
  if (v32 < 0)
    operator delete(v31[0]);
  v13 = *a2;
  v14 = (std::__shared_weak_count *)a2[1];
  v30[0] = v13;
  v30[1] = (uint64_t)v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v31))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v28, (uint64_t)v31);
    v28[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v29 = v33;
    MIL::ValidationError::ValidationError(exception, v28);
  }
  if (v12 < 0)
    v12 += (v10[1] - *v10) >> 3;
  __p = 0;
  v26 = 0;
  v27 = 0;
  std::vector<std::string const*>::reserve(&__p, 2uLL);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 104))(v9) & 1) != 0)
  {
    v24[0] = &__p;
    v24[1] = v10;
    v24[2] = a1;
    MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceFlatten2D(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)::$_0::operator()((uint64_t)v24, 0, v12);
    MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceFlatten2D(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)::$_0::operator()((uint64_t)v24, v12, (uint64_t)(v10[1] - *v10) >> 3);
  }
  else
  {
    v24[0] = MIL::IRUnknownDimension::Make(*a1, 0);
    std::vector<MIL::IRDimension const*>::assign((char **)&__p, 2uLL, v24);
  }
  v19 = *a1;
  v20 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 88))(v9);
  v21 = MIL::IRTensorValueType::MakeWithShape(v19, v20, (uint64_t)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v22 = (uint64_t *)operator new(8uLL);
  *a4 = v22;
  *v22++ = v21;
  a4[1] = v22;
  a4[2] = v22;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v31);
}

void sub_1E07AC860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a15);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v22 - 104));
  _Unwind_Resume(a1);
}

void sub_1E07AC8DC()
{
  uint64_t v0;

  if (*(char *)(v0 - 81) < 0)
    operator delete(*(void **)(v0 - 104));
  JUMPOUT(0x1E07AC8D4);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceFlatten2D(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)::$_0::operator()(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  if (a2 < a3)
  {
    v5 = a2;
    v6 = 1;
    while (1)
    {
      v7 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8 * v5);
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7))
        break;
      v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(**(_QWORD **)(a1 + 8) + 8 * v5));
      v6 *= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
      if (a3 == ++v5)
        goto LABEL_7;
    }
    v9 = *(void ***)a1;
    v10 = MIL::IRUnknownDimension::Make(**(void (*****)(MIL::MILContextImpl *__hidden))(a1 + 16), 0);
    v11 = (uint64_t *)v9[1];
    v18 = (unint64_t)v9[2];
    if ((unint64_t)v11 < v18)
    {
LABEL_17:
      *v11 = v10;
      v19 = v11 + 1;
      goto LABEL_36;
    }
    v25 = ((char *)v11 - (_BYTE *)*v9) >> 3;
    if (!((unint64_t)(v25 + 1) >> 61))
    {
      v26 = v18 - (_QWORD)*v9;
      v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(v9 + 2), v28);
      else
        v29 = 0;
      v20 = (uint64_t *)&v29[8 * v25];
      v21 = &v29[8 * v28];
      *v20 = v10;
      v19 = v20 + 1;
      v30 = (char *)*v9;
      v22 = (char *)v9[1];
      if (v22 == *v9)
        goto LABEL_34;
      do
      {
        v31 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *--v20 = v31;
      }
      while (v22 != v30);
      goto LABEL_33;
    }
LABEL_37:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  v6 = 1;
LABEL_7:
  v9 = *(void ***)a1;
  v10 = MIL::IRConstantDimension::Make(**(void (*****)(MIL::MILContextImpl *__hidden))(a1 + 16), (MIL::MILContext *)v6);
  v11 = (uint64_t *)v9[1];
  v12 = (unint64_t)v9[2];
  if ((unint64_t)v11 < v12)
    goto LABEL_17;
  v13 = ((char *)v11 - (_BYTE *)*v9) >> 3;
  if ((unint64_t)(v13 + 1) >> 61)
    goto LABEL_37;
  v14 = v12 - (_QWORD)*v9;
  v15 = v14 >> 2;
  if (v14 >> 2 <= (unint64_t)(v13 + 1))
    v15 = v13 + 1;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(v9 + 2), v16);
  else
    v17 = 0;
  v20 = (uint64_t *)&v17[8 * v13];
  v21 = &v17[8 * v16];
  *v20 = v10;
  v19 = v20 + 1;
  v23 = (char *)*v9;
  v22 = (char *)v9[1];
  if (v22 == *v9)
    goto LABEL_34;
  do
  {
    v24 = *((_QWORD *)v22 - 1);
    v22 -= 8;
    *--v20 = v24;
  }
  while (v22 != v23);
LABEL_33:
  v22 = (char *)*v9;
LABEL_34:
  *v9 = v20;
  v9[1] = v19;
  v9[2] = v21;
  if (v22)
    operator delete(v22);
LABEL_36:
  v9[1] = v19;
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceNonMaximumSuppression(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  const void *SingleValue;
  int v9;
  uint64_t v10;
  MIL::IRValueType *SingleValueType;
  uint64_t v12;
  MIL::IRValueType *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  void (***v22)(MIL::MILContextImpl *__hidden);
  int v23;
  uint64_t v24;
  void (***v25)(MIL::MILContextImpl *__hidden);
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *exception;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  void *__p;
  void *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  _QWORD v49[3];
  __int128 v50;
  void *v51;
  _BYTE *v52;
  uint64_t v53;
  _QWORD v54[3];
  __int128 v55;
  _QWORD v56[3];
  __int128 v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;

  std::string::basic_string[abi:ne180100]<0>(&v58, "max_boxes");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v58);
  v9 = MIL::IRValue::GetScalar<int>(SingleValue);
  if (SHIBYTE(v60) < 0)
    operator delete(v58);
  if (v9 <= 0)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v32 = a2[1];
    *(_QWORD *)&v57 = *a2;
    *((_QWORD *)&v57 + 1) = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    std::string::basic_string[abi:ne180100]<0>(v56, "Max_boxes parameter needs to be greater than zero always.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v57, (uint64_t)v56, 315);
  }
  v10 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v9);
  std::string::basic_string[abi:ne180100]<0>(&v58, "boxes");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v58);
  v12 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v60) < 0)
    operator delete(v58);
  std::string::basic_string[abi:ne180100]<0>(&v58, "scores");
  v13 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v58);
  v14 = MIL::IRValueType::AsTensorType(v13);
  if (SHIBYTE(v60) < 0)
    operator delete(v58);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
  v59 = 0;
  v60 = 0;
  v58 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v58, *(const void **)v15, *(_QWORD *)(v15 + 8), (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 3);
  if ((unint64_t)((char *)v59 - (char *)v58) < 9)
  {
    v35 = __cxa_allocate_exception(0x48uLL);
    v36 = a2[1];
    *(_QWORD *)&v55 = *a2;
    *((_QWORD *)&v55 + 1) = v36;
    if (v36)
    {
      v37 = (unint64_t *)(v36 + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    std::string::basic_string[abi:ne180100]<0>(v54, "Boxes param should have a rank of 3");
    MIL::ValidationError::ValidationError((uint64_t)v35, &v55, (uint64_t)v54, 315);
  }
  v58[1] = v10;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 96))(v14);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v51, *(const void **)v16, *(_QWORD *)(v16 + 8), (uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 3);
  if ((unint64_t)(v52 - (_BYTE *)v51) < 9)
  {
    v39 = __cxa_allocate_exception(0x48uLL);
    v40 = a2[1];
    *(_QWORD *)&v50 = *a2;
    *((_QWORD *)&v50 + 1) = v40;
    if (v40)
    {
      v41 = (unint64_t *)(v40 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    std::string::basic_string[abi:ne180100]<0>(v49, "Scores param should have a rank of 3");
    MIL::ValidationError::ValidationError((uint64_t)v39, &v50, (uint64_t)v49, 315);
  }
  *((_QWORD *)v51 + 1) = v10;
  v17 = v58;
  if (v59 == v58)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v18 = *v58;
  v19 = operator new(0x10uLL);
  v47 = v19 + 2;
  v48 = v19 + 2;
  *v19 = v18;
  v19[1] = v10;
  v46 = v19;
  v20 = *v17;
  v21 = operator new(8uLL);
  __p = v21;
  *v21 = v20;
  v44 = v21 + 1;
  v45 = v21 + 1;
  v22 = *a1;
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  v24 = MIL::IRTensorValueType::MakeWithShape(v22, v23, (uint64_t)&v58);
  v25 = *a1;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14);
  v27 = MIL::IRTensorValueType::MakeWithShape(v25, v26, (uint64_t)&v51);
  v28 = MIL::IRTensorValueType::MakeWithShape(*a1, 11, (uint64_t)&v46);
  v29 = MIL::IRTensorValueType::MakeWithShape(*a1, 11, (uint64_t)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v30 = operator new(0x20uLL);
  a4[1] = v30 + 4;
  a4[2] = v30 + 4;
  *v30 = v24;
  v30[1] = v27;
  v30[2] = v28;
  v30[3] = v29;
  *a4 = v30;
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
}

void sub_1E07ACEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;
  void *v37;

  if (a21 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      if (a24)
      {
        a25 = (uint64_t)a24;
        operator delete(a24);
      }
      v37 = *(void **)(v35 - 88);
      if (v37)
      {
        *(_QWORD *)(v35 - 80) = v37;
        operator delete(v37);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
    if (!v34)
      goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceNonZero(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _BOOL4 HasVariadicUnknownDims;
  void (***v23)(MIL::MILContextImpl *__hidden);
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void *__p;
  uint64_t *v45;
  unint64_t v46;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<std::string const*>::reserve(&__p, 2uLL);
  v9 = MIL::IRUnknownDimension::Make(*a1, 0);
  v10 = v9;
  v11 = v45;
  if ((unint64_t)v45 >= v46)
  {
    v13 = ((char *)v45 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v14 = (uint64_t)(v46 - (_QWORD)__p) >> 2;
    if (v14 <= v13 + 1)
      v14 = v13 + 1;
    if (v46 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v46, v15);
    else
      v16 = 0;
    v17 = (uint64_t *)&v16[8 * v13];
    v18 = &v16[8 * v15];
    *v17 = v10;
    v12 = v17 + 1;
    v20 = (char *)__p;
    v19 = (char *)v45;
    if (v45 != __p)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v21;
      }
      while (v19 != v20);
      v19 = (char *)__p;
    }
    __p = v17;
    v45 = v12;
    v46 = (unint64_t)v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v45 = v9;
    v12 = v11 + 1;
  }
  v45 = v12;
  HasVariadicUnknownDims = MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)v8);
  v23 = *a1;
  if (!HasVariadicUnknownDims)
  {
    v24 = MIL::IRConstantDimension::Make(v23, (MIL::MILContext *)((uint64_t)(v8[1] - *v8) >> 3));
    v25 = v45;
    if ((unint64_t)v45 >= v46)
    {
      v31 = ((char *)v45 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v31 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v32 = (uint64_t)(v46 - (_QWORD)__p) >> 2;
      if (v32 <= v31 + 1)
        v32 = v31 + 1;
      if (v46 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v46, v33);
      else
        v34 = 0;
      v35 = (uint64_t *)&v34[8 * v31];
      v36 = &v34[8 * v33];
      *v35 = v24;
      v30 = v35 + 1;
      v40 = (char *)__p;
      v37 = (char *)v45;
      if (v45 == __p)
        goto LABEL_47;
      do
      {
        v41 = *((_QWORD *)v37 - 1);
        v37 -= 8;
        *--v35 = v41;
      }
      while (v37 != v40);
      goto LABEL_46;
    }
LABEL_30:
    *v25 = v24;
    v30 = v25 + 1;
    goto LABEL_49;
  }
  v24 = MIL::IRUnknownDimension::Make(v23, 0);
  v25 = v45;
  if ((unint64_t)v45 < v46)
    goto LABEL_30;
  v26 = ((char *)v45 - (_BYTE *)__p) >> 3;
  if ((unint64_t)(v26 + 1) >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v27 = (uint64_t)(v46 - (_QWORD)__p) >> 2;
  if (v27 <= v26 + 1)
    v27 = v26 + 1;
  if (v46 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
    v28 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v28 = v27;
  if (v28)
    v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v46, v28);
  else
    v29 = 0;
  v35 = (uint64_t *)&v29[8 * v26];
  v36 = &v29[8 * v28];
  *v35 = v24;
  v30 = v35 + 1;
  v38 = (char *)__p;
  v37 = (char *)v45;
  if (v45 == __p)
    goto LABEL_47;
  do
  {
    v39 = *((_QWORD *)v37 - 1);
    v37 -= 8;
    *--v35 = v39;
  }
  while (v37 != v38);
LABEL_46:
  v37 = (char *)__p;
LABEL_47:
  __p = v35;
  v45 = v30;
  v46 = (unint64_t)v36;
  if (v37)
    operator delete(v37);
LABEL_49:
  v45 = v30;
  v42 = MIL::IRTensorValueType::MakeWithShape(*a1, 11, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v43 = (uint64_t *)operator new(8uLL);
  *a3 = v43;
  *v43++ = v42;
  a3[1] = v43;
  a3[2] = v43;
  if (__p)
  {
    v45 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_1E07AD370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceOneHot(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  uint64_t v10;
  MIL::IRValueType *v11;
  uint64_t v12;
  int v13;
  MIL::IRValueType *v14;
  uint64_t v15;
  int v16;
  const void *SingleValue;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  const void *v20;
  unsigned int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  BOOL v25;
  _QWORD *v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  void *exception;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  _BYTE v41[24];
  void *v42[3];
  char v43[24];
  __int128 v44;
  void *__p;
  char **v46;
  int *v47;
  int v48;
  _QWORD v49[3];
  __int128 v50;
  char *v51;
  char *v52;
  uint64_t v53;

  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v51, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
  if (SHIBYTE(v47) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "on_value");
  v11 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  v12 = MIL::IRValueType::AsTensorType(v11);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  if (SHIBYTE(v47) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "off_value");
  v14 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  v15 = MIL::IRValueType::AsTensorType(v14);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
  if (SHIBYTE(v47) < 0)
    operator delete(__p);
  if (v13 != v16)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v33 = a2[1];
    *(_QWORD *)&v50 = *a2;
    *((_QWORD *)&v50 + 1) = v33;
    if (v33)
    {
      v34 = (unint64_t *)(v33 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    std::string::basic_string[abi:ne180100]<0>(v49, "The dtype of on_value and off_value must match with each other.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v50, (uint64_t)v49, 315);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "one_hot_vector_size");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v47) < 0)
    operator delete(__p);
  v48 = -1;
  if (SingleValue)
  {
    v48 = MIL::IRValue::GetScalar<int>(SingleValue);
    if (v48 < 0)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"The value of one_hot_vector_size must be non-negative but is ", 61);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
      v37 = __cxa_allocate_exception(0x48uLL);
      v38 = a2[1];
      *(_QWORD *)&v44 = *a2;
      *((_QWORD *)&v44 + 1) = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      std::stringbuf::str();
      MIL::ValidationError::ValidationError((uint64_t)v37, &v44, (uint64_t)v43, 315);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  v18 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  v19 = v18;
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
    if (v18)
      goto LABEL_14;
LABEL_19:
    __p = a1;
    v46 = &v51;
    v47 = &v48;
    v21 = -1;
    goto LABEL_20;
  }
  operator delete(__p);
  if (!v19)
    goto LABEL_19;
LABEL_14:
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  v20 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  v21 = MIL::IRValue::GetScalar<int>(v20);
  if (SHIBYTE(v47) < 0)
    operator delete(__p);
  __p = a1;
  v46 = &v51;
  v47 = &v48;
  memset(v42, 0, sizeof(v42));
  if ((v21 & 0x80000000) == 0)
  {
    MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceOneHot(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)::$_0::operator()((void (*****)(MIL::MILContextImpl *__hidden))&__p, (uint64_t *)&v51, v21, (void **)v41);
    *(_OWORD *)v42 = *(_OWORD *)v41;
    v42[2] = *(void **)&v41[16];
    goto LABEL_33;
  }
LABEL_20:
  if (v51 != v52)
  {
    v22 = v52 - 8;
    if (v52 - 8 > v51)
    {
      v23 = v51 + 8;
      do
      {
        v24 = *((_QWORD *)v23 - 1);
        *((_QWORD *)v23 - 1) = *(_QWORD *)v22;
        *(_QWORD *)v22 = v24;
        v22 -= 8;
        v25 = v23 >= v22;
        v23 += 8;
      }
      while (!v25);
    }
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceOneHot(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)::$_0::operator()((void (*****)(MIL::MILContextImpl *__hidden))&__p, (uint64_t *)&v51, ~v21, (void **)v41);
  v42[0] = *(void **)v41;
  *(_OWORD *)&v42[1] = *(_OWORD *)&v41[8];
  v26 = (_QWORD *)(*(_QWORD *)&v41[8] - 8);
  if (*(_QWORD *)v41 != *(_QWORD *)&v41[8] && (unint64_t)v26 > *(_QWORD *)v41)
  {
    v28 = *(_QWORD *)v41 + 8;
    do
    {
      v29 = *(_QWORD *)(v28 - 8);
      *(_QWORD *)(v28 - 8) = *v26;
      *v26-- = v29;
      v25 = v28 >= (unint64_t)v26;
      v28 += 8;
    }
    while (!v25);
  }
LABEL_33:
  v30 = MIL::IRTensorValueType::MakeWithShape(*a1, v13, (uint64_t)v42);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v31 = (uint64_t *)operator new(8uLL);
  *a4 = v31;
  *v31++ = v30;
  a4[1] = v31;
  a4[2] = v31;
  if (v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
}

void sub_1E07AD7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;
  void *v33;

  if (a21 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
    if ((v30 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      v33 = *(void **)(v31 - 88);
      if (v33)
      {
        *(_QWORD *)(v31 - 80) = v33;
        operator delete(v33);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
    if (!v30)
      goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

void sub_1E07AD914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    JUMPOUT(0x1E07AD908);
  JUMPOUT(0x1E07AD90CLL);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceOneHot(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)::$_0::operator()(void (*****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t v8;
  MIL::MILContext *v9;
  void (***v10)(MIL::MILContextImpl *__hidden);
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (**v30)(MIL::MILContextImpl *__hidden);
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a2[1] == *a2)
    return;
  v8 = 0;
  while (1)
  {
    if (v8 != a3)
      goto LABEL_35;
    v9 = (MIL::MILContext *)*(unsigned int *)a1[2];
    v10 = **a1;
    if ((v9 & 0x80000000) != 0)
    {
      v11 = MIL::IRUnknownDimension::Make(v10, 0);
      v13 = (uint64_t *)a4[1];
      v19 = (unint64_t)a4[2];
      if ((unint64_t)v13 >= v19)
      {
        v21 = ((char *)v13 - (_BYTE *)*a4) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v22 = v19 - (_QWORD)*a4;
        v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1))
          v23 = v21 + 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v23;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v17);
        else
          v18 = 0;
        v24 = (uint64_t *)&v18[8 * v21];
        *v24 = v11;
        v20 = v24 + 1;
        v28 = (char *)*a4;
        v25 = (char *)a4[1];
        if (v25 == *a4)
          goto LABEL_32;
        do
        {
          v29 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *--v24 = v29;
        }
        while (v25 != v28);
        goto LABEL_31;
      }
    }
    else
    {
      v11 = MIL::IRConstantDimension::Make(v10, v9);
      v13 = (uint64_t *)a4[1];
      v12 = (unint64_t)a4[2];
      if ((unint64_t)v13 >= v12)
      {
        v14 = ((char *)v13 - (_BYTE *)*a4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = v12 - (_QWORD)*a4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v17);
        else
          v18 = 0;
        v24 = (uint64_t *)&v18[8 * v14];
        *v24 = v11;
        v20 = v24 + 1;
        v26 = (char *)*a4;
        v25 = (char *)a4[1];
        if (v25 == *a4)
          goto LABEL_32;
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *--v24 = v27;
        }
        while (v25 != v26);
LABEL_31:
        v25 = (char *)*a4;
LABEL_32:
        *a4 = v24;
        a4[1] = v20;
        a4[2] = &v18[8 * v17];
        if (v25)
          operator delete(v25);
        goto LABEL_34;
      }
    }
    *v13 = v11;
    v20 = v13 + 1;
LABEL_34:
    a4[1] = v20;
LABEL_35:
    v30 = (*a1[1])[v8];
    if ((*((unsigned int (**)(_QWORD))*v30 + 4))(v30))
      break;
    v31 = *a2;
    v33 = a4[1];
    v32 = (unint64_t)a4[2];
    if ((unint64_t)v33 >= v32)
    {
      v35 = ((char *)v33 - (_BYTE *)*a4) >> 3;
      if ((unint64_t)(v35 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v36 = v32 - (_QWORD)*a4;
      v37 = v36 >> 2;
      if (v36 >> 2 <= (unint64_t)(v35 + 1))
        v37 = v35 + 1;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      if (v38)
        v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v38);
      else
        v39 = 0;
      v40 = &v39[8 * v35];
      *(_QWORD *)v40 = *(_QWORD *)(v31 + 8 * v8);
      v34 = v40 + 8;
      v42 = (char *)*a4;
      v41 = (char *)a4[1];
      if (v41 != *a4)
      {
        do
        {
          v43 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *((_QWORD *)v40 - 1) = v43;
          v40 -= 8;
        }
        while (v41 != v42);
        v41 = (char *)*a4;
      }
      *a4 = v40;
      a4[1] = v34;
      a4[2] = &v39[8 * v38];
      if (v41)
        operator delete(v41);
    }
    else
    {
      *v33 = *(_QWORD *)(v31 + 8 * v8);
      v34 = v33 + 1;
    }
    a4[1] = v34;
    if (++v8 >= (unint64_t)((a2[1] - *a2) >> 3))
      return;
  }
  v44 = MIL::IRUnknownDimension::Make(**a1, (MIL::MILContext *)1);
  v45 = v44;
  v47 = (uint64_t *)a4[1];
  v46 = (unint64_t)a4[2];
  if ((unint64_t)v47 >= v46)
  {
    v49 = ((char *)v47 - (_BYTE *)*a4) >> 3;
    if ((unint64_t)(v49 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v50 = v46 - (_QWORD)*a4;
    v51 = v50 >> 2;
    if (v50 >> 2 <= (unint64_t)(v49 + 1))
      v51 = v49 + 1;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
      v52 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v52 = v51;
    if (v52)
      v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v52);
    else
      v53 = 0;
    v54 = (uint64_t *)&v53[8 * v49];
    v55 = &v53[8 * v52];
    *v54 = v45;
    v48 = v54 + 1;
    v57 = (char *)*a4;
    v56 = (char *)a4[1];
    if (v56 != *a4)
    {
      do
      {
        v58 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        *--v54 = v58;
      }
      while (v56 != v57);
      v56 = (char *)*a4;
    }
    *a4 = v54;
    a4[1] = v48;
    a4[2] = v55;
    if (v56)
      operator delete(v56);
  }
  else
  {
    *v47 = v44;
    v48 = v47 + 1;
  }
  a4[1] = v48;
}

void sub_1E07ADCA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferencePad(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v9;
  int v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  MIL::IRValueType *ValueType;
  MIL::IRTensorValueType *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  MIL::IRValue *SingleValue;
  unint64_t v35;
  uint64_t *v36;
  uint64_t Data;
  char v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  void (***v56)(MIL::MILContextImpl *__hidden);
  uint64_t v57;
  MIL::MILContext *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  MIL::MILContext *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  void *v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  void *exception;
  uint64_t *v109;
  uint64_t **v110;
  int v111;
  _QWORD *v112;
  _QWORD v113[3];
  __int128 v114;
  void *v115;
  uint64_t *v116;
  unint64_t v117;
  std::string v118[2];
  int v119;
  uint64_t v120[2];
  void *__p[2];
  char v122;
  int v123;
  char *v124;
  char *v125;
  _QWORD v126[2];

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v122 < 0)
    operator delete(__p[0]);
  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 88))(v9);
  v11 = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  v125 = 0;
  v126[0] = 0;
  v124 = 0;
  std::vector<std::string const*>::reserve((void **)&v124, (v11[1] - *v11) >> 3);
  std::string::basic_string[abi:ne180100]<0>(__p, "pad");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v12
                                                                      + 5));
  v14 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ValueType);
  if (v122 < 0)
    operator delete(__p[0]);
  v15 = (std::__shared_weak_count *)a2[1];
  v120[0] = *a2;
  v120[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v118, (uint64_t)__p);
    v118[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v119 = v123;
    MIL::ValidationError::ValidationError(exception, v118);
  }
  v112 = a3;
  v109 = a2;
  v110 = a4;
  v111 = v10;
  v20 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v14 + 16))(v14);
  v21 = (v11[1] - *v11) >> 3;
  v22 = v21 - (v20 >> 1);
  if (v21 != v20 >> 1)
  {
    v23 = 0;
    v24 = v125;
    do
    {
      v25 = *v11;
      if ((unint64_t)v24 >= v126[0])
      {
        v26 = (v24 - v124) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v27 = (uint64_t)(v126[0] - (_QWORD)v124) >> 2;
        if (v27 <= v26 + 1)
          v27 = v26 + 1;
        if (v126[0] - (_QWORD)v124 >= 0x7FFFFFFFFFFFFFF8uLL)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v126, v28);
        else
          v29 = 0;
        v30 = &v29[8 * v26];
        *(_QWORD *)v30 = *(_QWORD *)(v25 + 8 * v23);
        v24 = v30 + 8;
        v32 = v124;
        v31 = v125;
        if (v125 != v124)
        {
          do
          {
            v33 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *((_QWORD *)v30 - 1) = v33;
            v30 -= 8;
          }
          while (v31 != v32);
          v31 = v124;
        }
        v124 = v30;
        v125 = v24;
        v126[0] = &v29[8 * v28];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_QWORD *)v24 = *(_QWORD *)(v25 + 8 * v23);
        v24 += 8;
      }
      v125 = v24;
      ++v23;
    }
    while (v23 != v22);
  }
  std::string::basic_string[abi:ne180100]<0>(&v115, "pad");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(v112, (uint64_t)&v115);
  if (SHIBYTE(v117) < 0)
    operator delete(v115);
  v35 = v20 >> 1;
  if (!SingleValue)
  {
    if (v20 >= 2)
    {
      v84 = 0;
      if (v35 <= 1)
        v85 = 1;
      else
        v85 = v20 >> 1;
      do
      {
        v86 = *(_QWORD *)(*v11 + 8 * (v84 + v22));
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 24))(v86))
        {
          v87 = MIL::IRDimension::AsUnknown(*(MIL::IRDimension **)(*v11 + 8 * (v84 + v22)));
          v88 = (MIL::MILContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 32))(v87);
        }
        else
        {
          v88 = 0;
        }
        v89 = MIL::IRUnknownDimension::Make(*a1, v88);
        v90 = v89;
        v91 = v125;
        if ((unint64_t)v125 >= v126[0])
        {
          v93 = (v125 - v124) >> 3;
          if ((unint64_t)(v93 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v94 = (uint64_t)(v126[0] - (_QWORD)v124) >> 2;
          if (v94 <= v93 + 1)
            v94 = v93 + 1;
          if (v126[0] - (_QWORD)v124 >= 0x7FFFFFFFFFFFFFF8uLL)
            v95 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v95 = v94;
          if (v95)
            v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v126, v95);
          else
            v96 = 0;
          v97 = &v96[8 * v93];
          *(_QWORD *)v97 = v90;
          v92 = v97 + 8;
          v99 = v124;
          v98 = v125;
          if (v125 != v124)
          {
            do
            {
              v100 = *((_QWORD *)v98 - 1);
              v98 -= 8;
              *((_QWORD *)v97 - 1) = v100;
              v97 -= 8;
            }
            while (v98 != v99);
            v98 = v124;
          }
          v124 = v97;
          v125 = v92;
          v126[0] = &v96[8 * v95];
          if (v98)
            operator delete(v98);
        }
        else
        {
          *(_QWORD *)v125 = v89;
          v92 = v91 + 8;
        }
        v125 = v92;
        ++v84;
      }
      while (v84 != v85);
    }
    goto LABEL_126;
  }
  v36 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  Data = MIL::IRTensorValue::GetDataView<int>(v36);
  v115 = 0;
  v116 = 0;
  v117 = 0;
  std::vector<std::string const*>::reserve(&v115, v20 >> 1);
  if ((int)v35 < 1)
    goto LABEL_124;
  v38 = 0;
  for (i = (v20 >> 1); ; --i)
  {
    v35 = (v35 - 1);
    if ((v38 & 1) != 0)
    {
      v40 = MIL::IRUnknownDimension::Make(*a1, 0);
      v41 = v40;
      v42 = v116;
      if ((unint64_t)v116 >= v117)
      {
        v52 = ((char *)v116 - (_BYTE *)v115) >> 3;
        if ((unint64_t)(v52 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v53 = (uint64_t)(v117 - (_QWORD)v115) >> 2;
        if (v53 <= v52 + 1)
          v53 = v52 + 1;
        if (v117 - (unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
          v54 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v54 = v53;
        if (v54)
          v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v117, v54);
        else
          v55 = 0;
        v67 = (uint64_t *)&v55[8 * v52];
        *v67 = v41;
        v43 = v67 + 1;
        v69 = v115;
        v68 = v116;
        if (v116 != v115)
        {
          do
          {
            v70 = *--v68;
            *--v67 = v70;
          }
          while (v68 != v69);
          v68 = v115;
        }
        v115 = v67;
        v116 = v43;
        v117 = (unint64_t)&v55[8 * v54];
        if (v68)
          operator delete(v68);
      }
      else
      {
        *v116 = v40;
        v43 = v42 + 1;
      }
      v116 = v43;
      v38 = 1;
      goto LABEL_94;
    }
    v44 = v22 + v35;
    if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v11 + 8 * v44) + 16))(*(_QWORD *)(*v11 + 8 * v44)))
      break;
    v45 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v11 + 8 * v44));
    v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 48))(v45);
    v47 = *(_DWORD *)(Data + 8 * v35) + *(_DWORD *)(Data + 8 * v35 + 4);
    if (v47 + v46 < 0)
    {
      v104 = __cxa_allocate_exception(0x48uLL);
      v105 = v109[1];
      *(_QWORD *)&v114 = *v109;
      *((_QWORD *)&v114 + 1) = v105;
      if (v105)
      {
        v106 = (unint64_t *)(v105 + 8);
        do
          v107 = __ldxr(v106);
        while (__stxr(v107 + 1, v106));
      }
      std::string::basic_string[abi:ne180100]<0>(v113, "Negative padded dimension is not allowed.");
      MIL::ValidationError::ValidationError((uint64_t)v104, &v114, (uint64_t)v113, 315);
    }
    v48 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v47 + v46));
    v49 = v48;
    v50 = v116;
    if ((unint64_t)v116 >= v117)
    {
      v63 = ((char *)v116 - (_BYTE *)v115) >> 3;
      if ((unint64_t)(v63 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v64 = (uint64_t)(v117 - (_QWORD)v115) >> 2;
      if (v64 <= v63 + 1)
        v64 = v63 + 1;
      if (v117 - (unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
        v65 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v65 = v64;
      if (v65)
        v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v117, v65);
      else
        v66 = 0;
      v75 = (uint64_t *)&v66[8 * v63];
      *v75 = v49;
      v51 = v75 + 1;
      v77 = v115;
      v76 = v116;
      if (v116 != v115)
      {
        do
        {
          v78 = *--v76;
          *--v75 = v78;
        }
        while (v76 != v77);
        v76 = v115;
      }
      v115 = v75;
      v116 = v51;
      v117 = (unint64_t)&v66[8 * v65];
      if (v76)
        operator delete(v76);
    }
    else
    {
      *v116 = v48;
      v51 = v50 + 1;
    }
    v116 = v51;
    if (i <= 1)
      goto LABEL_124;
    v38 = 0;
LABEL_95:
    ;
  }
  v56 = *a1;
  v57 = MIL::IRDimension::AsUnknown(*(MIL::IRDimension **)(*v11 + 8 * v44));
  v58 = (MIL::MILContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 32))(v57);
  v59 = MIL::IRUnknownDimension::Make(v56, v58);
  v60 = v59;
  v61 = v116;
  if ((unint64_t)v116 >= v117)
  {
    v71 = ((char *)v116 - (_BYTE *)v115) >> 3;
    if ((unint64_t)(v71 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v72 = (uint64_t)(v117 - (_QWORD)v115) >> 2;
    if (v72 <= v71 + 1)
      v72 = v71 + 1;
    if (v117 - (unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
      v73 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v73 = v72;
    if (v73)
      v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v117, v73);
    else
      v74 = 0;
    v79 = (uint64_t *)&v74[8 * v71];
    *v79 = v60;
    v62 = v79 + 1;
    v81 = v115;
    v80 = v116;
    if (v116 != v115)
    {
      do
      {
        v82 = *--v80;
        *--v79 = v82;
      }
      while (v80 != v81);
      v80 = v115;
    }
    v115 = v79;
    v116 = v62;
    v117 = (unint64_t)&v74[8 * v73];
    if (v80)
      operator delete(v80);
  }
  else
  {
    *v116 = v59;
    v62 = v61 + 1;
  }
  v116 = v62;
  v83 = MIL::IRDimension::AsUnknown(*(MIL::IRDimension **)(*v11 + 8 * v44));
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 32))(v83);
LABEL_94:
  if (i >= 2)
    goto LABEL_95;
  if ((v38 & 1) != 0 && v125 != v124)
  {
    v101 = MIL::IRUnknownDimension::Make(*a1, 0);
    *((_QWORD *)v125 - 1) = v101;
  }
LABEL_124:
  std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<MIL::IRDimension const**>>,std::reverse_iterator<std::__wrap_iter<MIL::IRDimension const**>>>((uint64_t)&v124, v125, (uint64_t)v116, (uint64_t)v116, (uint64_t)v115, (uint64_t)v115, ((char *)v116 - (_BYTE *)v115) >> 3);
  if (v115)
  {
    v116 = (uint64_t *)v115;
    operator delete(v115);
  }
LABEL_126:
  v102 = MIL::IRTensorValueType::MakeWithShape(*a1, v111, (uint64_t)&v124);
  *v110 = 0;
  v110[1] = 0;
  v110[2] = 0;
  v103 = (uint64_t *)operator new(8uLL);
  *v110 = v103;
  *v103++ = v102;
  v110[1] = v103;
  v110[2] = v103;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
}

void sub_1E07AE580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  void *v43;

  if (__p)
    operator delete(__p);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a36);
  v43 = *(void **)(v41 - 112);
  if (v43)
  {
    *(_QWORD *)(v41 - 104) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRange1D(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  MIL::IRValue *SingleValue;
  MIL::IRValue *v10;
  MIL::IRValue *v11;
  MIL::ValueTypeInferenceUtils *v12;
  const MIL::IRTensorValue *v13;
  float FloatScalarValue;
  MIL::ValueTypeInferenceUtils *v15;
  const MIL::IRTensorValue *v16;
  float v17;
  MIL::ValueTypeInferenceUtils *v18;
  const MIL::IRTensorValue *v19;
  float v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  void *__p;
  uint64_t *v42;
  unint64_t v43;

  std::string::basic_string[abi:ne180100]<0>(&__p, "start");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  if (SHIBYTE(v43) < 0)
    operator delete(__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "start");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a2, (uint64_t)&__p);
  if (SHIBYTE(v43) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "end");
  v10 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a2, (uint64_t)&__p);
  if (SHIBYTE(v43) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "step");
  v11 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a2, (uint64_t)&__p);
  if (SHIBYTE(v43) < 0)
    operator delete(__p);
  __p = 0;
  v42 = 0;
  v43 = 0;
  std::vector<std::string const*>::reserve(&__p, 1uLL);
  if (!SingleValue || !v10 || !v11)
  {
    v21 = MIL::IRUnknownDimension::Make(*a1, 0);
    v22 = v42;
    if ((unint64_t)v42 >= v43)
    {
      v28 = ((char *)v42 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v29 = (uint64_t)(v43 - (_QWORD)__p) >> 2;
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      if (v43 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v43, v30);
      else
        v31 = 0;
      v32 = (uint64_t *)&v31[8 * v28];
      v33 = &v31[8 * v30];
      *v32 = v21;
      v27 = v32 + 1;
      v35 = (char *)__p;
      v34 = (char *)v42;
      if (v42 == __p)
        goto LABEL_39;
      do
      {
        v36 = *((_QWORD *)v34 - 1);
        v34 -= 8;
        *--v32 = v36;
      }
      while (v34 != v35);
      goto LABEL_38;
    }
LABEL_22:
    *v22 = v21;
    v27 = v22 + 1;
    goto LABEL_41;
  }
  v12 = (MIL::ValueTypeInferenceUtils *)MIL::IRValue::AsTensor(SingleValue);
  FloatScalarValue = MIL::ValueTypeInferenceUtils::GetFloatScalarValue(v12, v13);
  v15 = (MIL::ValueTypeInferenceUtils *)MIL::IRValue::AsTensor(v10);
  v17 = MIL::ValueTypeInferenceUtils::GetFloatScalarValue(v15, v16);
  v18 = (MIL::ValueTypeInferenceUtils *)MIL::IRValue::AsTensor(v11);
  v20 = MIL::ValueTypeInferenceUtils::GetFloatScalarValue(v18, v19);
  v21 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)vcvtps_u32_f32((float)(v17 - FloatScalarValue) / v20));
  v22 = v42;
  if ((unint64_t)v42 < v43)
    goto LABEL_22;
  v23 = ((char *)v42 - (_BYTE *)__p) >> 3;
  if ((unint64_t)(v23 + 1) >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v24 = (uint64_t)(v43 - (_QWORD)__p) >> 2;
  if (v24 <= v23 + 1)
    v24 = v23 + 1;
  if (v43 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v24;
  if (v25)
    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v43, v25);
  else
    v26 = 0;
  v32 = (uint64_t *)&v26[8 * v23];
  v33 = &v26[8 * v25];
  *v32 = v21;
  v27 = v32 + 1;
  v37 = (char *)__p;
  v34 = (char *)v42;
  if (v42 == __p)
    goto LABEL_39;
  do
  {
    v38 = *((_QWORD *)v34 - 1);
    v34 -= 8;
    *--v32 = v38;
  }
  while (v34 != v37);
LABEL_38:
  v34 = (char *)__p;
LABEL_39:
  __p = v32;
  v42 = v27;
  v43 = (unint64_t)v33;
  if (v34)
    operator delete(v34);
LABEL_41:
  v42 = v27;
  v39 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v40 = (uint64_t *)operator new(8uLL);
  *a3 = v40;
  *v40++ = v39;
  a3[1] = v40;
  a3[2] = v40;
  if (__p)
  {
    v42 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_1E07AEA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceShape(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 HasVariadicUnknownDims;
  void (***v10)(MIL::MILContextImpl *__hidden);
  uint64_t v11;
  uint64_t v12;
  void (***v13)(MIL::MILContextImpl *__hidden);
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  void *__p;
  _BYTE *v21;
  uint64_t v22;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v21 = 0;
  v22 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
  HasVariadicUnknownDims = MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)&__p);
  v10 = *a1;
  if (HasVariadicUnknownDims)
    v11 = MIL::IRUnknownDimension::Make(v10, 0);
  else
    v11 = MIL::IRConstantDimension::Make(v10, (MIL::MILContext *)((v21 - (_BYTE *)__p) >> 3));
  v12 = v11;
  v13 = *a1;
  v14 = operator new(8uLL);
  v17 = v14;
  *v14 = v12;
  v18 = v14 + 1;
  v19 = v14 + 1;
  v15 = MIL::IRTensorValueType::MakeWithShape(v13, 11, (uint64_t)&v17);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v16 = (uint64_t *)operator new(8uLL);
  *a3 = v16;
  *v16++ = v15;
  a3[1] = v16;
  a3[2] = v16;
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_1E07AEB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceTile(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValue *SingleValue;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  MIL::IRValueType *SingleValueType;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t Data;
  _QWORD **v24;
  uint64_t v25;
  unint64_t i;
  uint64_t v27;
  void (***v28)(MIL::MILContextImpl *__hidden);
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  void *v36;
  int64_t v37;
  unint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  void (***v47)(MIL::MILContextImpl *__hidden);
  int v48;
  uint64_t v49;
  uint64_t *v50;
  void *exception;
  void *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[3];
  _QWORD v64[2];
  _BYTE v65[56];
  void *__p[2];
  _QWORD v67[2];
  _QWORD v68[3];
  _QWORD v69[2];
  _BYTE v70[56];
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  std::string v74[2];
  int v75;
  uint64_t v76[2];
  void *v77[2];
  char v78;
  int v79;

  std::string::basic_string[abi:ne180100]<0>(v77, "reps");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)v77);
  if (v78 < 0)
    operator delete(v77[0]);
  v9 = (std::__shared_weak_count *)a2[1];
  v76[0] = *a2;
  v76[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v77))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v74, (uint64_t)v77);
    v74[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v75 = v79;
    MIL::ValidationError::ValidationError(exception, v74);
  }
  std::string::basic_string[abi:ne180100]<0>(&v71, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v71);
  v15 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v73) < 0)
    operator delete(v71);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15);
  v71 = 0;
  v72 = 0;
  v73 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v71, *(const void **)v16, *(_QWORD *)(v16 + 8), (uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 3);
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)&v71))
  {
    v52 = __cxa_allocate_exception(0x48uLL);
    v53 = a2[1];
    v69[0] = *a2;
    v69[1] = v53;
    if (v53)
    {
      v54 = (unint64_t *)(v53 + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    std::string::basic_string[abi:ne180100]<0>(v68, "Variadic shape is not supported for tile type inference.");
    MIL::ValidationResult::ValidationResult(v70, v69, 315, v68);
    MIL::ValidationError::ValidationError(v52, v70);
  }
  v18 = v71;
  v17 = v72;
  std::string::basic_string[abi:ne180100]<0>(__p, "reps");
  v19 = MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  v21 = (v17 - v18) >> 3;
  if (SHIBYTE(v67[0]) < 0)
    operator delete(__p[0]);
  if (v21 != v20)
  {
    v56 = __cxa_allocate_exception(0x48uLL);
    v57 = a2[1];
    v64[0] = *a2;
    v64[1] = v57;
    if (v57)
    {
      v58 = (unint64_t *)(v57 + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    std::string::basic_string[abi:ne180100]<0>(v63, "Reps 1-D Length must be the same as the number of dimensions in input.");
    MIL::ValidationResult::ValidationResult(v65, v64, 315, v63);
    MIL::ValidationError::ValidationError(v56, v65);
  }
  __p[0] = 0;
  __p[1] = 0;
  v67[0] = 0;
  std::vector<std::string const*>::reserve(__p, (v72 - v71) >> 3);
  if (SingleValue)
  {
    v22 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
    Data = MIL::IRTensorValue::GetDataView<int>(v22);
    v24 = (_QWORD **)v71;
    if (v72 != v71)
    {
      v25 = Data;
      for (i = 0; i < (v72 - v71) >> 3; ++i)
      {
        v27 = (*(uint64_t (**)(_QWORD *))(*v24[i] + 16))(v24[i]);
        v28 = *a1;
        if (v27)
        {
          v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27);
          v30 = MIL::IRConstantDimension::Make(v28, (MIL::MILContext *)(v29 * *(int *)(v25 + 4 * i)));
          v31 = (uint64_t *)__p[1];
          if (__p[1] >= (void *)v67[0])
          {
            v32 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v32 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v33 = (uint64_t)(v67[0] - (unint64_t)__p[0]) >> 2;
            if (v33 <= v32 + 1)
              v33 = v32 + 1;
            if (v67[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v33;
            if (v34)
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v67, v34);
            else
              v35 = 0;
            v39 = (uint64_t *)&v35[8 * v32];
            *v39 = v30;
            v36 = v39 + 1;
            v41 = (char *)__p[0];
            v40 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                v42 = *((_QWORD *)v40 - 1);
                v40 -= 8;
                *--v39 = v42;
              }
              while (v40 != v41);
              goto LABEL_48;
            }
            goto LABEL_49;
          }
        }
        else
        {
          v30 = MIL::IRUnknownDimension::Make(*a1, 0);
          v31 = (uint64_t *)__p[1];
          if (__p[1] >= (void *)v67[0])
          {
            v37 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v37 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v38 = (uint64_t)(v67[0] - (unint64_t)__p[0]) >> 2;
            if (v38 <= v37 + 1)
              v38 = v37 + 1;
            if (v67[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v38;
            if (v34)
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v67, v34);
            else
              v35 = 0;
            v39 = (uint64_t *)&v35[8 * v37];
            *v39 = v30;
            v36 = v39 + 1;
            v43 = (char *)__p[0];
            v40 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                v44 = *((_QWORD *)v40 - 1);
                v40 -= 8;
                *--v39 = v44;
              }
              while (v40 != v43);
LABEL_48:
              v40 = (char *)__p[0];
            }
LABEL_49:
            __p[0] = v39;
            __p[1] = v36;
            v67[0] = &v35[8 * v34];
            if (v40)
              operator delete(v40);
            goto LABEL_51;
          }
        }
        *v31 = v30;
        v36 = v31 + 1;
LABEL_51:
        __p[1] = v36;
        v24 = (_QWORD **)v71;
      }
    }
  }
  else
  {
    v46 = v71;
    v45 = v72;
    v60 = MIL::IRUnknownDimension::Make(*a1, 0);
    std::vector<MIL::IRDimension const*>::vector(&v61, (v45 - v46) >> 3, &v60);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = v61;
    v67[0] = v62;
  }
  v47 = *a1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
  v49 = MIL::IRTensorValueType::MakeWithShape(v47, v48, (uint64_t)__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v50 = (uint64_t *)operator new(8uLL);
  *a4 = v50;
  *v50++ = v49;
  a4[1] = v50;
  a4[2] = v50;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v77);
}

void sub_1E07AF178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,char a45)
{
  void *v45;
  char v46;
  uint64_t v47;
  void *v49;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a23);
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if ((v46 & 1) != 0)
    __cxa_free_exception(v45);
  v49 = *(void **)(v47 - 240);
  if (v49)
  {
    *(_QWORD *)(v47 - 232) = v49;
    operator delete(v49);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v47 - 144));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceTopk(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v9;
  uint64_t v10;
  int v11;
  const void *SingleValue;
  int v13;
  const void *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *exception;
  void *__src;
  __int128 v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *__p;
  __int128 v34;
  std::string v35[2];
  int v36;
  uint64_t v37[2];
  void *v38[2];
  char v39;
  int v40;

  std::string::basic_string[abi:ne180100]<0>(v38, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v38);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v39 < 0)
    operator delete(v38[0]);
  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  v11 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 88))(v9);
  std::string::basic_string[abi:ne180100]<0>(v38, "k");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v38);
  v13 = MIL::IRValue::GetScalar<int>(SingleValue);
  if (v39 < 0)
    operator delete(v38[0]);
  std::string::basic_string[abi:ne180100]<0>(v38, "axis");
  v14 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v38);
  v15 = MIL::IRValue::GetScalar<int>(v14);
  if (v39 < 0)
    operator delete(v38[0]);
  v16 = MIL::IRTensorValueType::Rank(v9);
  v17 = *a2;
  v18 = (std::__shared_weak_count *)a2[1];
  v37[0] = v17;
  v37[1] = (uint64_t)v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v38))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v35, (uint64_t)v38);
    v35[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v36 = v40;
    MIL::ValidationError::ValidationError(exception, v35);
  }
  __p = 0;
  v34 = 0uLL;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  std::vector<std::string const*>::reserve(&__p, (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
  v23 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v13);
  MIL::ValueTypeInferenceUtils::GetTopkOutShape(a1, (char **)v10, v15, v23, v16, &__src);
  if (__p)
  {
    *(_QWORD *)&v34 = __p;
    operator delete(__p);
  }
  __p = __src;
  v34 = v29;
  std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v30, (char *)__src, v29, (uint64_t)(v29 - (_QWORD)__src) >> 3);
  v24 = MIL::IRTensorValueType::MakeWithShape(*a1, v11, (uint64_t)&__p);
  v25 = MIL::IRTensorValueType::MakeWithShape(*a1, 11, (uint64_t)&v30);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v26 = operator new(0x10uLL);
  a4[1] = v26 + 2;
  a4[2] = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  *a4 = v26;
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (__p)
  {
    *(_QWORD *)&v34 = __p;
    operator delete(__p);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v38);
}

void sub_1E07AF5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a19);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v26 - 136));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceShape(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  MIL::IRDimension **v14;
  MIL::IRDimension **v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  std::vector<unsigned int>::pointer end;
  unsigned int *v20;
  std::vector<unsigned int>::pointer begin;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::vector<unsigned int> v37;
  void *__p;
  _BYTE *v39;
  _QWORD *v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  _QWORD v46[3];

  v46[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v6 + 5));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v41, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3);
  if (SHIBYTE(v40) < 0)
    operator delete(__p);
  v10 = v41;
  v11 = v42;
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = (v11 - v10) >> 3;
  v39 = v12 + 1;
  v40 = v12 + 1;
  v13 = MIL::IRTensorValueType::Make(*a1, 11, (MIL::MILContext ***)&__p);
  memset(&v37, 0, sizeof(v37));
  std::vector<int>::reserve(&v37, (v39 - (_BYTE *)__p) >> 3);
  v14 = (MIL::IRDimension **)v41;
  v15 = (MIL::IRDimension **)v42;
  if (v41 != v42)
  {
    do
    {
      v16 = MIL::IRDimension::AsConstant(*v14);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
      v18 = v17;
      end = v37.__end_;
      if (v37.__end_ >= v37.__end_cap_.__value_)
      {
        begin = v37.__begin_;
        v22 = v37.__end_ - v37.__begin_;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v24 = (char *)v37.__end_cap_.__value_ - (char *)v37.__begin_;
        if (((char *)v37.__end_cap_.__value_ - (char *)v37.__begin_) >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v37.__end_cap_, v25);
          begin = v37.__begin_;
          end = v37.__end_;
        }
        else
        {
          v26 = 0;
        }
        v27 = (unsigned int *)&v26[4 * v22];
        *v27 = v18;
        v20 = v27 + 1;
        while (end != begin)
        {
          v28 = *--end;
          *--v27 = v28;
        }
        v37.__begin_ = v27;
        v37.__end_ = v20;
        v37.__end_cap_.__value_ = (unsigned int *)&v26[4 * v25];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *v37.__end_ = v17;
        v20 = end + 1;
      }
      v37.__end_ = v20;
      ++v14;
    }
    while (v14 != v15);
  }
  MIL::IRTensorValueType::MakeInt32Value(v13, (uint64_t)&v37, &v36);
  v29 = v36;
  v46[0] = v36;
  if (v36)
  {
    v30 = (_QWORD *)operator new();
    v31 = v36;
    *v30 = &unk_1EA992A68;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v46[1] = v30;
  v36 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v44 = a3;
  v45 = 0;
  v32 = operator new(0x10uLL);
  *a3 = v32;
  a3[1] = v32;
  a3[2] = v32 + 2;
  *v32 = v29;
  v32[1] = v30;
  if (v30)
  {
    v33 = v30 + 1;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  a3[1] = v32 + 2;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v46);
  v35 = v36;
  v36 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
}

void sub_1E07AF9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<MIL::IRDimension const**>>,std::reverse_iterator<std::__wrap_iter<MIL::IRDimension const**>>>(uint64_t a1, char *__src, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  void *__p;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v7 = __src;
  if (a7 < 1)
    return v7;
  v9 = a4;
  v13 = *(_QWORD *)(a1 + 16);
  v11 = a1 + 16;
  v12 = v13;
  v14 = *(_QWORD *)(v11 - 8);
  if (a7 > (uint64_t)(v13 - v14) >> 3)
  {
    v15 = *(_BYTE **)a1;
    v16 = a7 + ((uint64_t)(v14 - *(_QWORD *)a1) >> 3);
    if (v16 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v17 = (__src - v15) >> 3;
    v18 = v12 - (_QWORD)v15;
    if (v18 >> 2 > v16)
      v16 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v16;
    v43 = v11;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v11, v19);
    else
      v20 = 0;
    v33 = &v20[8 * v17];
    __p = v20;
    v40 = v33;
    v42 = &v20[8 * v19];
    v34 = 8 * a7;
    v35 = (uint64_t *)(v9 - 8);
    v36 = &v33[8 * a7];
    do
    {
      v37 = *v35--;
      *(_QWORD *)v33 = v37;
      v33 += 8;
      v34 -= 8;
    }
    while (v34);
    v41 = v36;
    v7 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v7);
    if (v41 != v40)
      v41 += (v40 - v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v7;
  }
  v21 = (uint64_t)(v14 - (_QWORD)__src) >> 3;
  if (v21 >= a7)
  {
    v22 = a4 - 8 * a7;
    v23 = *(char **)(v11 - 8);
LABEL_18:
    v27 = &__src[8 * a7];
    v28 = &v23[-8 * a7];
    v29 = v23;
    if ((unint64_t)v28 < v14)
    {
      v29 = v23;
      do
      {
        v30 = *(_QWORD *)v28;
        v28 += 8;
        *(_QWORD *)v29 = v30;
        v29 += 8;
      }
      while ((unint64_t)v28 < v14);
    }
    *(_QWORD *)(a1 + 8) = v29;
    if (v23 != v27)
      memmove(&v23[-8 * ((v23 - v27) >> 3)], __src, v23 - v27);
    if (v22 != v9)
    {
      v31 = v7;
      do
      {
        v32 = *(_QWORD *)(v9 - 8);
        v9 -= 8;
        *(_QWORD *)v31 = v32;
        v31 += 8;
      }
      while (v9 != v22);
    }
    return v7;
  }
  v22 = a4 - 8 * v21;
  v23 = *(char **)(v11 - 8);
  if (v22 != a6)
  {
    v24 = v22;
    v25 = *(_QWORD **)(v11 - 8);
    do
    {
      v26 = *(_QWORD *)(v24 - 8);
      v24 -= 8;
      *v25++ = v26;
      v23 += 8;
    }
    while (v24 != a6);
  }
  *(_QWORD *)(a1 + 8) = v23;
  if ((uint64_t)(v14 - (_QWORD)__src) >= 1)
    goto LABEL_18;
  return v7;
}

void sub_1E07AFC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::ios15::Argsort::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  void **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  void ***v33;
  uint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  unint64_t v39;
  void **v40;
  void **v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void **v49;
  void **v50;
  char *v51;
  __int128 v52;
  void **v53;
  void **v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void **v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void **v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void **v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void **v103;
  uint64_t result;
  uint64_t v105;
  void **v106;
  std::__shared_weak_count *v107;
  void *v108[2];
  char v109;
  void *v110[2];
  char v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  __int128 v122;
  __int128 v123;
  void *v124[2];
  uint64_t v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  void *__p;
  void *v130;
  _QWORD *v131;
  void *v132;
  void *v133;
  _QWORD *v134;
  __n128 v135;
  void *v136;
  _QWORD *v137;
  _QWORD v138[3];
  _QWORD *v139;
  _BYTE v140[24];
  _BYTE *v141;
  _QWORD v142[3];
  _QWORD *v143;
  uint64_t v144;
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v147;
  void **v148;
  uint64_t v149;
  uint64_t v150;
  void **v151;
  _QWORD *v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v137 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v9->__on_zero_shared;
  v147 = &v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v148 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v133 = v12 + 2;
  v134 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v132 = v12;
  v149 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v132);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v130 = v15 + 2;
  v131 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v150 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v148, 3, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v136);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v136);
  v16 = v136;
  v136 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v18 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v130 = __p;
    operator delete(__p);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  v20 = v137;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v128);
  MIL::IRParameter::Make(&v128, (uint64_t *)&v148);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v20, "axis", (uint64_t *)&v148);
  v22 = v148;
  v148 = 0;
  if (v22)
    (*((void (**)(void **))*v22 + 1))(v22);
  v23 = (std::__shared_weak_count *)v128.n128_u64[1];
  if (v128.n128_u64[1])
  {
    v24 = (unint64_t *)(v128.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 32))(*((_QWORD *)v21 + 5), 1);
  v26 = v137;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v127);
  MIL::IRParameter::Make(&v127, (uint64_t *)&v148);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v26, "ascending", (uint64_t *)&v148);
  v28 = v148;
  v148 = 0;
  if (v28)
    (*((void (**)(void **))*v28 + 1))(v28);
  v29 = (std::__shared_weak_count *)v127.n128_u64[1];
  if (v127.n128_u64[1])
  {
    v30 = (unint64_t *)(v127.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  __p = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  v148 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v148, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v33 = (void ***)__p;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v35;
  v35->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v35->~__shared_weak_count_0;
  v147 = &v35->~__shared_weak_count_0;
  v144 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v144, 1, &v126);
  MIL::IRParameter::Make(&v126, (uint64_t *)&v136);
  v36 = v136;
  v132 = v136;
  if (v136)
  {
    v37 = (_QWORD *)operator new();
    v38 = v136;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v133 = v37;
  v136 = 0;
  v39 = (unint64_t)v33[2];
  v40 = v33[1];
  if ((unint64_t)v40 >= v39)
  {
    v42 = ((char *)v40 - (char *)*v33) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - (_QWORD)*v33;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v152 = v33 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v45);
    v48 = &v46[16 * v42];
    *(_QWORD *)v48 = v36;
    *((_QWORD *)v48 + 1) = v37;
    v132 = 0;
    v133 = 0;
    v50 = *v33;
    v49 = v33[1];
    if (v49 == *v33)
    {
      v53 = v33[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 2;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *v49 = 0;
        v49[1] = 0;
      }
      while (v49 != v50);
      v53 = *v33;
      v49 = v33[1];
    }
    v41 = (void **)(v48 + 16);
    *v33 = (void **)v51;
    v148 = v53;
    v149 = (uint64_t)v53;
    v33[1] = (void **)(v48 + 16);
    v150 = (uint64_t)v49;
    v54 = v33[2];
    v33[2] = (void **)&v46[16 * v47];
    v151 = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v148);
  }
  else
  {
    *v40 = v36;
    v40[1] = v37;
    v41 = v40 + 2;
    v132 = 0;
    v133 = 0;
  }
  v33[1] = v41;
  v55 = v136;
  v136 = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v126.n128_u64[1];
  if (v126.n128_u64[1])
  {
    v57 = (unint64_t *)(v126.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v124 = *(_OWORD *)a2;
  v125 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v137;
  *(_QWORD *)&v123 = v137;
  if (v137)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v123 + 1) = v60;
  v137 = 0;
  *(_QWORD *)&v122 = __p;
  if (__p)
  {
    v61 = (_QWORD *)operator new();
    v62 = __p;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v122 + 1) = v61;
  __p = 0;
  v142[0] = &unk_1EA99FAC8;
  v142[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateArgsort;
  v143 = v142;
  v141 = 0;
  MIL::IROperator::Make((__int128 *)v124, &v123, &v122, (uint64_t)v142, (uint64_t)v140, a3);
  v63 = v141;
  if (v141 == v140)
  {
    v64 = 4;
    v63 = v140;
  }
  else
  {
    if (!v141)
      goto LABEL_65;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_65:
  v65 = v143;
  if (v143 == v142)
  {
    v66 = 4;
    v65 = v142;
    goto LABEL_69;
  }
  if (v143)
  {
    v66 = 5;
LABEL_69:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
  if (*((_QWORD *)&v122 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
  if (*((_QWORD *)&v123 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v125) < 0)
    operator delete(v124[0]);
  v73 = *a3;
  v138[0] = &off_1EA99FBD8;
  v138[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceArgsort;
  v139 = v138;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v138);
  v74 = v139;
  if (v139 == v138)
  {
    v75 = 4;
    v74 = v138;
  }
  else
  {
    if (!v139)
      goto LABEL_87;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_87:
  MIL::Validation::TensorDTypeConstraints::Make(&v148);
  v76 = v148;
  std::string::basic_string[abi:ne180100]<0>(v118, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&Scalar);
  v120 = Scalar;
  if (Scalar)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = Scalar;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v121 = v77;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v76 + 3))(v76, &v120, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v79 = v121;
  if (v121)
  {
    p_shared_owners = (unint64_t *)&v121->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = Scalar;
  Scalar = 0;
  if (v82)
    (*((void (**)(std::__shared_weak_count_vtbl *))v82->~__shared_weak_count + 1))(v82);
  if (v119 < 0)
    operator delete(v118[0]);
  v83 = *a3;
  v114 = v148;
  if (v148)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v148;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = (std::__shared_weak_count_vtbl *)v85;
  }
  else
  {
    v84 = 0;
  }
  v115 = v84;
  v148 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v83 + 56))(v83, &v114);
  v86 = v115;
  if (v115)
  {
    v87 = (unint64_t *)&v115->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v148;
  v148 = 0;
  if (v89)
    (*((void (**)(void **))*v89 + 1))(v89);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v148);
  v90 = v148;
  std::string::basic_string[abi:ne180100]<0>(v110, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v110, 0, (uint64_t *)&Scalar);
  v112 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v113 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v108, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v90 + 3))(v90, &v112, 0, v108);
  if (v109 < 0)
    operator delete(v108[0]);
  v93 = v113;
  if (v113)
  {
    v94 = (unint64_t *)&v113->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v111 < 0)
    operator delete(v110[0]);
  v97 = *a3;
  v106 = v148;
  if (v148)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v148;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v107 = v98;
  v148 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v97 + 56))(v97, &v106);
  v100 = v107;
  if (v107)
  {
    v101 = (unint64_t *)&v107->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v148;
  v148 = 0;
  if (v103)
    (*((void (**)(void **))*v103 + 1))(v103);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v137;
  if (v137)
  {
    v105 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v137);
    return MEMORY[0x1E0C023A0](v105, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07B0824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  uint64_t *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;

  v46 = *(_QWORD *)(v44 - 112);
  *(_QWORD *)(v44 - 112) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *v43;
  *v43 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a43, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v44 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BandPart::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void **v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  void **v62;
  char *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  char **v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  void **v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void **v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void **v106;
  void **v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  void **v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void **v120;
  uint64_t result;
  uint64_t v122;
  void **v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void **v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137[2];
  char v138;
  void *v139[2];
  char v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  __int128 v143;
  __int128 v144;
  void *v145[2];
  uint64_t v146;
  void *v147;
  void *v148;
  _QWORD *v149;
  __n128 v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char **v154;
  __n128 v155;
  __n128 v156;
  void *__p;
  void *v158;
  _QWORD *v159;
  void *v160;
  void *v161;
  _QWORD *v162;
  void *v163;
  void *v164;
  _QWORD *v165;
  __n128 v166;
  _QWORD *v167;
  _BYTE v168[24];
  _BYTE *v169;
  _BYTE v170[24];
  _BYTE *v171;
  _BYTE v172[24];
  _BYTE *v173;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v176;
  uint64_t v177;
  void **v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char **v182;
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v167 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v176 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v178 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v164 = v12 + 2;
  v165 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v163 = v12;
  v179 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v163);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v161 = v15 + 2;
  v162 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v160 = v15;
  v180 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v160);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v158 = v18 + 2;
  v159 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  __p = v18;
  v181 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v178, 4, &v166);
  MIL::IRParameter::Make(&v166, (uint64_t *)&v147);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v147);
  v19 = v147;
  v147 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v166.n128_u64[1];
  if (v166.n128_u64[1])
  {
    v21 = (unint64_t *)(v166.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v158 = __p;
    operator delete(__p);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v167;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v156);
  MIL::IRParameter::Make(&v156, (uint64_t *)&v178);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v23, "lower", (uint64_t *)&v178);
  v25 = v178;
  v178 = 0;
  if (v25)
    (*((void (**)(void **))*v25 + 1))(v25);
  v26 = (std::__shared_weak_count *)v156.n128_u64[1];
  if (v156.n128_u64[1])
  {
    v27 = (unint64_t *)(v156.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v167;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v155);
  MIL::IRParameter::Make(&v155, (uint64_t *)&v178);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v29, "upper", (uint64_t *)&v178);
  v31 = v178;
  v178 = 0;
  if (v31)
    (*((void (**)(void **))*v31 + 1))(v31);
  v32 = (std::__shared_weak_count *)v155.n128_u64[1];
  if (v155.n128_u64[1])
  {
    v33 = (unint64_t *)(v155.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v154 = 0;
  v35 = operator new();
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  v178 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v154, (void **)v35);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v178, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v154, 1uLL);
  v36 = v154;
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v163 = v38;
  *v38 = v37;
  v164 = v38 + 1;
  v165 = v38 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v163);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v160 = v40;
  *v40 = v39;
  v161 = v40 + 1;
  v162 = v40 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v160);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  __p = v42;
  *v42 = v41;
  v158 = v42 + 1;
  v159 = v42 + 1;
  v176 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v147 = v44;
  *v44 = v43;
  v148 = v44 + 1;
  v149 = v44 + 1;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v147);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v150);
  MIL::IRParameter::Make(&v150, &v151);
  v45 = v151;
  v152 = v151;
  if (v151)
  {
    v46 = (_QWORD *)operator new();
    v47 = v151;
    *v46 = &unk_1EA99F888;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  v153 = v46;
  v151 = 0;
  v48 = v36[2];
  v49 = v36[1];
  if (v49 >= v48)
  {
    v51 = (v49 - *v36) >> 4;
    v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v53 = v48 - *v36;
    if (v53 >> 3 > v52)
      v52 = v53 >> 3;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
      v54 = 0xFFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    v182 = v36 + 2;
    v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v36 + 2), v54);
    v57 = (uint64_t *)&v55[16 * v51];
    *v57 = v45;
    v57[1] = (uint64_t)v46;
    v152 = 0;
    v153 = 0;
    v59 = *v36;
    v58 = v36[1];
    if (v58 == *v36)
    {
      v62 = (void **)v36[1];
      v60 = &v55[16 * v51];
    }
    else
    {
      v60 = &v55[16 * v51];
      do
      {
        v61 = *((_OWORD *)v58 - 1);
        v58 -= 16;
        *((_OWORD *)v60 - 1) = v61;
        v60 -= 16;
        *(_QWORD *)v58 = 0;
        *((_QWORD *)v58 + 1) = 0;
      }
      while (v58 != v59);
      v62 = (void **)*v36;
      v58 = v36[1];
    }
    v50 = (char *)(v57 + 2);
    *v36 = v60;
    v178 = v62;
    v179 = (uint64_t)v62;
    v36[1] = (char *)(v57 + 2);
    v180 = (uint64_t)v58;
    v63 = v36[2];
    v36[2] = &v55[16 * v56];
    v181 = (uint64_t)v63;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v178);
  }
  else
  {
    *(_QWORD *)v49 = v45;
    *((_QWORD *)v49 + 1) = v46;
    v50 = v49 + 16;
    v152 = 0;
    v153 = 0;
  }
  v36[1] = v50;
  v64 = v151;
  v151 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v150.n128_u64[1];
  if (v150.n128_u64[1])
  {
    v66 = (unint64_t *)(v150.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  if (__p)
  {
    v158 = __p;
    operator delete(__p);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  *(_OWORD *)v145 = *(_OWORD *)a2;
  v146 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v68 = (uint64_t)v167;
  *(_QWORD *)&v144 = v167;
  if (v167)
  {
    v69 = (_QWORD *)operator new();
    *v69 = &unk_1EA99F8E8;
    v69[1] = 0;
    v69[2] = 0;
    v69[3] = v68;
  }
  else
  {
    v69 = 0;
  }
  *((_QWORD *)&v144 + 1) = v69;
  v167 = 0;
  *(_QWORD *)&v143 = v154;
  if (v154)
  {
    v70 = (_QWORD *)operator new();
    v71 = v154;
    *v70 = &unk_1EA99F948;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  *((_QWORD *)&v143 + 1) = v70;
  v154 = 0;
  v173 = 0;
  v171 = 0;
  MIL::IROperator::Make((__int128 *)v145, &v144, &v143, (uint64_t)v172, (uint64_t)v170, a3);
  v72 = v171;
  if (v171 == v170)
  {
    v73 = 4;
    v72 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_73;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_73:
  v74 = v173;
  if (v173 == v172)
  {
    v75 = 4;
    v74 = v172;
    goto LABEL_77;
  }
  if (v173)
  {
    v75 = 5;
LABEL_77:
    (*(void (**)(void))(*v74 + 8 * v75))();
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
  if (*((_QWORD *)&v143 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (SHIBYTE(v146) < 0)
    operator delete(v145[0]);
  v82 = *a3;
  v83 = std::string::basic_string[abi:ne180100]<0>(&v178, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v83, (uint64_t)v168);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v82 + 200))(v82, v168);
  v84 = v169;
  if (v169 == v168)
  {
    v85 = 4;
    v84 = v168;
  }
  else
  {
    if (!v169)
      goto LABEL_95;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_95:
  if (SHIBYTE(v180) < 0)
    operator delete(v178);
  MIL::Validation::TensorDTypeConstraints::Make(&v178);
  v86 = v178;
  std::string::basic_string[abi:ne180100]<0>(v139, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v139, 0, (uint64_t *)&Scalar);
  v141 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v142 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v137, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v86 + 3))(v86, &v141, v137);
  if (v138 < 0)
    operator delete(v137[0]);
  v89 = v142;
  if (v142)
  {
    p_shared_owners = (unint64_t *)&v142->__shared_owners_;
    do
      v91 = __ldaxr(p_shared_owners);
    while (__stlxr(v91 - 1, p_shared_owners));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  if (v140 < 0)
    operator delete(v139[0]);
  v93 = v178;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = Scalar;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v136 = v94;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v133, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v93 + 3))(v93, &v135, v133);
  if (v134 < 0)
    operator delete(v133[0]);
  v96 = v136;
  if (v136)
  {
    v97 = (unint64_t *)&v136->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*((void (**)(std::__shared_weak_count_vtbl *))v99->~__shared_weak_count + 1))(v99);
  v100 = *a3;
  v131 = v178;
  if (v178)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v178;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v132 = v101;
  v178 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v100 + 56))(v100, &v131);
  v103 = v132;
  if (v132)
  {
    v104 = (unint64_t *)&v132->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v178;
  v178 = 0;
  if (v106)
    (*((void (**)(void **))*v106 + 1))(v106);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v178);
  v107 = v178;
  std::string::basic_string[abi:ne180100]<0>(v127, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v127, 0, (uint64_t *)&Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v130 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v125, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v107 + 3))(v107, &v129, 0, v125);
  if (v126 < 0)
    operator delete(v125[0]);
  v110 = v130;
  if (v130)
  {
    v111 = (unint64_t *)&v130->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  if (v128 < 0)
    operator delete(v127[0]);
  v114 = *a3;
  v123 = v178;
  if (v178)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = v178;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = (std::__shared_weak_count_vtbl *)v116;
  }
  else
  {
    v115 = 0;
  }
  v124 = v115;
  v178 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v114 + 56))(v114, &v123);
  v117 = v124;
  if (v124)
  {
    v118 = (unint64_t *)&v124->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v178;
  v178 = 0;
  if (v120)
    (*((void (**)(void **))*v120 + 1))(v120);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v154, 0);
  result = (uint64_t)v167;
  if (v167)
  {
    v122 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v167);
    return MEMORY[0x1E0C023A0](v122, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07B1930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  v53 = *(_QWORD *)(v51 - 112);
  *(_QWORD *)(v51 - 112) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *v50;
  *v50 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 248), 0);
  _Unwind_Resume(a1);
}

void sub_1E07B1D68()
{
  JUMPOUT(0x1E07B1CECLL);
}

uint64_t MIL::Operators::Common::ios15::Cumsum::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  void **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  void **v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char **v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  void **v63;
  char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  char **v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void **v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void **v121;
  uint64_t result;
  uint64_t v123;
  void **v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  __int128 v144;
  __int128 v145;
  void *v146[2];
  uint64_t v147;
  void *v148;
  void *v149;
  _QWORD *v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char **v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  void *__p;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  __n128 v165;
  _QWORD *v166;
  _BYTE v167[24];
  _BYTE *v168;
  _BYTE v169[24];
  _BYTE *v170;
  _BYTE v171[24];
  _BYTE *v172;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v175;
  void **v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char **v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v166 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v175 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v176 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v163 = v12 + 2;
  v164 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v162 = v12;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v160 = v15 + 2;
  v161 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v178 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v176, 3, &v165);
  MIL::IRParameter::Make(&v165, (uint64_t *)&v148);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v148);
  v16 = v148;
  v148 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v18 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v166;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v176);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v20, "axis", (uint64_t *)&v176);
  v22 = v176;
  v176 = 0;
  if (v22)
    (*((void (**)(void **))*v22 + 1))(v22);
  v23 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v24 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 32))(*((_QWORD *)v21 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 48))(*((_QWORD *)v21 + 5), 1);
  v26 = v166;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&v176);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v26, "exclusive", (uint64_t *)&v176);
  v28 = v176;
  v176 = 0;
  if (v28)
    (*((void (**)(void **))*v28 + 1))(v28);
  v29 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v30 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  v32 = v166;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v156);
  MIL::IRParameter::Make(&v156, (uint64_t *)&v176);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v32, "reverse", (uint64_t *)&v176);
  v34 = v176;
  v176 = 0;
  if (v34)
    (*((void (**)(void **))*v34 + 1))(v34);
  v35 = (std::__shared_weak_count *)v156.n128_u64[1];
  if (v156.n128_u64[1])
  {
    v36 = (unint64_t *)(v156.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v155 = 0;
  v38 = operator new();
  *(_QWORD *)v38 = 0;
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)(v38 + 16) = 0;
  v176 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, (void **)v38);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v176, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v155, 1uLL);
  v39 = v155;
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v162 = v41;
  *v41 = v40;
  v163 = v41 + 1;
  v164 = v41 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v162);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  __p = v43;
  *v43 = v42;
  v160 = v43 + 1;
  v161 = v43 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v148 = v45;
  *v45 = v44;
  v149 = v45 + 1;
  v150 = v45 + 1;
  v175 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v148);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v151);
  MIL::IRParameter::Make(&v151, &v152);
  v46 = v152;
  v153 = v152;
  if (v152)
  {
    v47 = (_QWORD *)operator new();
    v48 = v152;
    *v47 = &unk_1EA99F888;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v48;
  }
  else
  {
    v47 = 0;
  }
  v154 = v47;
  v152 = 0;
  v49 = v39[2];
  v50 = v39[1];
  if (v50 >= v49)
  {
    v52 = (v50 - *v39) >> 4;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v54 = v49 - *v39;
    if (v54 >> 3 > v53)
      v53 = v54 >> 3;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
      v55 = 0xFFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    v180 = v39 + 2;
    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v39 + 2), v55);
    v58 = (uint64_t *)&v56[16 * v52];
    *v58 = v46;
    v58[1] = (uint64_t)v47;
    v153 = 0;
    v154 = 0;
    v60 = *v39;
    v59 = v39[1];
    if (v59 == *v39)
    {
      v63 = (void **)v39[1];
      v61 = &v56[16 * v52];
    }
    else
    {
      v61 = &v56[16 * v52];
      do
      {
        v62 = *((_OWORD *)v59 - 1);
        v59 -= 16;
        *((_OWORD *)v61 - 1) = v62;
        v61 -= 16;
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = 0;
      }
      while (v59 != v60);
      v63 = (void **)*v39;
      v59 = v39[1];
    }
    v51 = (char *)(v58 + 2);
    *v39 = v61;
    v176 = v63;
    v177 = (uint64_t)v63;
    v39[1] = (char *)(v58 + 2);
    v178 = (uint64_t)v59;
    v64 = v39[2];
    v39[2] = &v56[16 * v57];
    v179 = v64;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v176);
  }
  else
  {
    *(_QWORD *)v50 = v46;
    *((_QWORD *)v50 + 1) = v47;
    v51 = v50 + 16;
    v153 = 0;
    v154 = 0;
  }
  v39[1] = v51;
  v65 = v152;
  v152 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v151.n128_u64[1];
  if (v151.n128_u64[1])
  {
    v67 = (unint64_t *)(v151.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  *(_OWORD *)v146 = *(_OWORD *)a2;
  v147 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v69 = (uint64_t)v166;
  *(_QWORD *)&v145 = v166;
  if (v166)
  {
    v70 = (_QWORD *)operator new();
    *v70 = &unk_1EA99F8E8;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v69;
  }
  else
  {
    v70 = 0;
  }
  *((_QWORD *)&v145 + 1) = v70;
  v166 = 0;
  *(_QWORD *)&v144 = v155;
  if (v155)
  {
    v71 = (_QWORD *)operator new();
    v72 = v155;
    *v71 = &unk_1EA99F948;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v144 + 1) = v71;
  v155 = 0;
  v172 = 0;
  v170 = 0;
  MIL::IROperator::Make((__int128 *)v146, &v145, &v144, (uint64_t)v171, (uint64_t)v169, a3);
  v73 = v170;
  if (v170 == v169)
  {
    v74 = 4;
    v73 = v169;
  }
  else
  {
    if (!v170)
      goto LABEL_76;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_76:
  v75 = v172;
  if (v172 == v171)
  {
    v76 = 4;
    v75 = v171;
    goto LABEL_80;
  }
  if (v172)
  {
    v76 = 5;
LABEL_80:
    (*(void (**)(void))(*v75 + 8 * v76))();
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (SHIBYTE(v147) < 0)
    operator delete(v146[0]);
  v83 = *a3;
  v84 = std::string::basic_string[abi:ne180100]<0>(&v176, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v84, (uint64_t)v167);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v83 + 200))(v83, v167);
  v85 = v168;
  if (v168 == v167)
  {
    v86 = 4;
    v85 = v167;
  }
  else
  {
    if (!v168)
      goto LABEL_98;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_98:
  if (SHIBYTE(v178) < 0)
    operator delete(v176);
  MIL::Validation::TensorDTypeConstraints::Make(&v176);
  v87 = v176;
  std::string::basic_string[abi:ne180100]<0>(v140, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&Scalar);
  v142 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v143 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v142, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v90 = v143;
  if (v143)
  {
    p_shared_owners = (unint64_t *)&v143->__shared_owners_;
    do
      v92 = __ldaxr(p_shared_owners);
    while (__stlxr(v92 - 1, p_shared_owners));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v141 < 0)
    operator delete(v140[0]);
  v94 = v176;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v137 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v136, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v137;
  if (v137)
  {
    v98 = (unint64_t *)&v137->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  v101 = *a3;
  v132 = v176;
  if (v176)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v176;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v176 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v176;
  v176 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v176);
  v108 = v176;
  std::string::basic_string[abi:ne180100]<0>(v128, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&Scalar);
  v130 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v108 + 3))(v108, &v130, 0, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v111 = v131;
  if (v131)
  {
    v112 = (unint64_t *)&v131->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v129 < 0)
    operator delete(v128[0]);
  v115 = *a3;
  v124 = v176;
  if (v176)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = v176;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = (std::__shared_weak_count_vtbl *)v117;
  }
  else
  {
    v116 = 0;
  }
  v125 = v116;
  v176 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v115 + 56))(v115, &v124);
  v118 = v125;
  if (v125)
  {
    v119 = (unint64_t *)&v125->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v176;
  v176 = 0;
  if (v121)
    (*((void (**)(void **))*v121 + 1))(v121);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, 0);
  result = (uint64_t)v166;
  if (v166)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v166);
    return MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07B2B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  v53 = *(_QWORD *)(v51 - 112);
  *(_QWORD *)(v51 - 112) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *v50;
  *v50 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 240), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Fill::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  void **v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void **v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  uint64_t v75;
  void **v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void **v89;
  void **v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void **v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void **v103;
  uint64_t result;
  uint64_t v105;
  void **v106;
  std::__shared_weak_count *v107;
  void *v108[2];
  char v109;
  void *v110[2];
  char v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  void *v122[2];
  char v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  __int128 v126;
  __int128 v127;
  void *v128[2];
  uint64_t v129;
  void *__p;
  void *v131;
  _QWORD *v132;
  void *v133;
  void *v134;
  _QWORD *v135;
  void *v136;
  void *v137;
  _QWORD *v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  char **v143;
  __n128 v144;
  __n128 v145;
  _QWORD *v146;
  _QWORD v147[3];
  _QWORD *v148;
  _BYTE v149[24];
  _BYTE *v150;
  _QWORD v151[3];
  _QWORD *v152;
  void *v153;
  void *v154;
  _QWORD *v155;
  uint64_t v156[4];
  void **Scalar;
  void **v158;
  uint64_t v159;
  uint64_t v160;
  char **v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = (void **)operator new(8uLL);
  Scalar = v8;
  *v8 = (void *)v7;
  v158 = v8 + 1;
  v159 = (uint64_t)(v8 + 1);
  v153 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v153, 1, &v145);
  MIL::IRParameter::Make(&v145, v156);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "shape", v156);
  v9 = v156[0];
  v156[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v11 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (Scalar)
  {
    v158 = Scalar;
    operator delete(Scalar);
  }
  v13 = v146;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v158 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  v159 = MIL::IRTensorValueType::MakeScalar(a1, 11);
  v160 = MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v144);
  MIL::IRParameter::Make(&v144, v156);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v13, "value", v156);
  v15 = v156[0];
  v156[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v17 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  v143 = 0;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v143, (void **)v19);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v143, 1uLL);
  v20 = v143;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v153 = v22;
  *v22 = v21;
  v154 = v22 + 1;
  v155 = v22 + 1;
  v156[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v153);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v136 = v24;
  *v24 = v23;
  v137 = v24 + 1;
  v138 = v24 + 1;
  v156[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v136);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v133 = v26;
  *v26 = v25;
  v134 = v26 + 1;
  v135 = v26 + 1;
  v156[2] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v133);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  __p = v28;
  *v28 = v27;
  v131 = v28 + 1;
  v132 = v28 + 1;
  v156[3] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)v156, 4, &v139);
  MIL::IRParameter::Make(&v139, &v140);
  v29 = v140;
  v141 = v140;
  if (v140)
  {
    v30 = (_QWORD *)operator new();
    v31 = v140;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v142 = v30;
  v140 = 0;
  v32 = v20[2];
  v33 = v20[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v20) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v20;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v161 = v20 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v141 = 0;
    v142 = 0;
    v43 = *v20;
    v42 = v20[1];
    if (v42 == *v20)
    {
      v46 = (void **)v20[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = (void **)*v20;
      v42 = v20[1];
    }
    v34 = (char *)(v41 + 2);
    *v20 = v44;
    Scalar = v46;
    v158 = v46;
    v20[1] = (char *)(v41 + 2);
    v159 = (uint64_t)v42;
    v47 = v20[2];
    v20[2] = &v39[16 * v40];
    v160 = (uint64_t)v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v141 = 0;
    v142 = 0;
  }
  v20[1] = v34;
  v48 = v140;
  v140 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v50 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (__p)
  {
    v131 = __p;
    operator delete(__p);
  }
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  *(_OWORD *)v128 = *(_OWORD *)a2;
  v129 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = (uint64_t)v146;
  *(_QWORD *)&v127 = v146;
  if (v146)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v127 + 1) = v53;
  v146 = 0;
  *(_QWORD *)&v126 = v143;
  if (v143)
  {
    v54 = (_QWORD *)operator new();
    v55 = v143;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v126 + 1) = v54;
  v143 = 0;
  v151[0] = &unk_1EA99FAC8;
  v151[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateFill;
  v152 = v151;
  v150 = 0;
  MIL::IROperator::Make((__int128 *)v128, &v127, &v126, (uint64_t)v151, (uint64_t)v149, a3);
  v56 = v150;
  if (v150 == v149)
  {
    v57 = 4;
    v56 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_60;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_60:
  v58 = v152;
  if (v152 == v151)
  {
    v59 = 4;
    v58 = v151;
    goto LABEL_64;
  }
  if (v152)
  {
    v59 = 5;
LABEL_64:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
  if (*((_QWORD *)&v126 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v129) < 0)
    operator delete(v128[0]);
  v66 = *a3;
  v147[0] = &off_1EA99FBD8;
  v147[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceFill;
  v148 = v147;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v66 + 200))(v66, v147);
  v67 = v148;
  if (v148 == v147)
  {
    v68 = 4;
    v67 = v147;
  }
  else
  {
    if (!v148)
      goto LABEL_82;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_82:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v69 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v122, "value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v122, 0, v156);
  v124 = v156[0];
  if (v156[0])
  {
    v70 = (std::__shared_weak_count *)operator new();
    v71 = v156[0];
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = (std::__shared_weak_count_vtbl *)v71;
  }
  else
  {
    v70 = 0;
  }
  v125 = v70;
  v156[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v120, "T");
  (*((void (**)(void **, uint64_t *, void **))*v69 + 3))(v69, &v124, v120);
  if (v121 < 0)
    operator delete(v120[0]);
  v72 = v125;
  if (v125)
  {
    p_shared_owners = (unint64_t *)&v125->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v156[0];
  v156[0] = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  if (v123 < 0)
    operator delete(v122[0]);
  v76 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, v156);
  v118 = v156[0];
  if (v156[0])
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = v156[0];
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = (std::__shared_weak_count_vtbl *)v78;
  }
  else
  {
    v77 = 0;
  }
  v119 = v77;
  v156[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*((void (**)(void **, uint64_t *, void **))*v76 + 3))(v76, &v118, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v79 = v119;
  if (v119)
  {
    v80 = (unint64_t *)&v119->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v156[0];
  v156[0] = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = *a3;
  v114 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = (std::__shared_weak_count_vtbl *)v85;
  }
  else
  {
    v84 = 0;
  }
  v115 = v84;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v83 + 56))(v83, &v114);
  v86 = v115;
  if (v115)
  {
    v87 = (unint64_t *)&v115->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(void **))*v89 + 1))(v89);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v90 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v110, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v110, 0, v156);
  v112 = v156[0];
  if (v156[0])
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v156[0];
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v113 = v91;
  v156[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v108, "K");
  (*((void (**)(void **, uint64_t *, _QWORD, void **))*v90 + 3))(v90, &v112, 0, v108);
  if (v109 < 0)
    operator delete(v108[0]);
  v93 = v113;
  if (v113)
  {
    v94 = (unint64_t *)&v113->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v156[0];
  v156[0] = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  if (v111 < 0)
    operator delete(v110[0]);
  v97 = *a3;
  v106 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v107 = v98;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v97 + 56))(v97, &v106);
  v100 = v107;
  if (v107)
  {
    v101 = (unint64_t *)&v107->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(void **))*v103 + 1))(v103);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v143, 0);
  result = (uint64_t)v146;
  if (v146)
  {
    v105 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v146);
    return MEMORY[0x1E0C023A0](v105, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07B3B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;

  v64 = *(_QWORD *)(v62 - 112);
  *(_QWORD *)(v62 - 112) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *v61;
  *v61 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Flatten2D::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  void **v60;
  char *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  char **v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void **v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void **v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  void **v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void **v117;
  uint64_t result;
  uint64_t v119;
  void **v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void **v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  __n128 v152;
  void *__p;
  void *v154;
  _QWORD *v155;
  void *v156;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  __n128 v162;
  _QWORD *v163;
  _QWORD v164[3];
  _QWORD *v165;
  _BYTE v166[24];
  _BYTE *v167;
  _QWORD v168[3];
  _QWORD *v169;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v172;
  uint64_t v173;
  void **v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char **v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v172 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v174 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v160 = v12 + 2;
  v161 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v159 = v12;
  v175 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v159);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v157 = v15 + 2;
  v158 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v156 = v15;
  v176 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v156);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v154 = v18 + 2;
  v155 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  __p = v18;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v174, 4, &v162);
  MIL::IRParameter::Make(&v162, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v19 = v144;
  v144 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v162.n128_u64[1];
  if (v162.n128_u64[1])
  {
    v21 = (unint64_t *)(v162.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v154 = __p;
    operator delete(__p);
  }
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v163;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v152);
  MIL::IRParameter::Make(&v152, (uint64_t *)&v174);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v23, "axis", (uint64_t *)&v174);
  v25 = v174;
  v174 = 0;
  if (v25)
    (*((void (**)(void **))*v25 + 1))(v25);
  v26 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v27 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v151 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  v174 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v174, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v30 = v151;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = operator new(0x10uLL);
  v160 = v33 + 2;
  v161 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  v159 = v33;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v159);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = operator new(0x10uLL);
  v157 = v36 + 2;
  v158 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  v156 = v36;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v156);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = operator new(0x10uLL);
  v154 = v39 + 2;
  v155 = v39 + 2;
  *v39 = v37;
  v39[1] = v38;
  __p = v39;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = operator new(0x10uLL);
  v145 = v42 + 2;
  v146 = v42 + 2;
  *v42 = v40;
  v42[1] = v41;
  v144 = v42;
  v173 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v43 = v148;
  v149 = v148;
  if (v148)
  {
    v44 = (_QWORD *)operator new();
    v45 = v148;
    *v44 = &unk_1EA99F888;
    v44[1] = 0;
    v44[2] = 0;
    v44[3] = v45;
  }
  else
  {
    v44 = 0;
  }
  v150 = v44;
  v148 = 0;
  v46 = v30[2];
  v47 = v30[1];
  if (v47 >= v46)
  {
    v49 = (v47 - *v30) >> 4;
    v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v51 = v46 - *v30;
    if (v51 >> 3 > v50)
      v50 = v51 >> 3;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
      v52 = 0xFFFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    v178 = v30 + 2;
    v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v30 + 2), v52);
    v55 = (uint64_t *)&v53[16 * v49];
    *v55 = v43;
    v55[1] = (uint64_t)v44;
    v149 = 0;
    v150 = 0;
    v57 = *v30;
    v56 = v30[1];
    if (v56 == *v30)
    {
      v60 = (void **)v30[1];
      v58 = &v53[16 * v49];
    }
    else
    {
      v58 = &v53[16 * v49];
      do
      {
        v59 = *((_OWORD *)v56 - 1);
        v56 -= 16;
        *((_OWORD *)v58 - 1) = v59;
        v58 -= 16;
        *(_QWORD *)v56 = 0;
        *((_QWORD *)v56 + 1) = 0;
      }
      while (v56 != v57);
      v60 = (void **)*v30;
      v56 = v30[1];
    }
    v48 = (char *)(v55 + 2);
    *v30 = v58;
    v174 = v60;
    v175 = (uint64_t)v60;
    v30[1] = (char *)(v55 + 2);
    v176 = (uint64_t)v56;
    v61 = v30[2];
    v30[2] = &v53[16 * v54];
    v177 = (uint64_t)v61;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v174);
  }
  else
  {
    *(_QWORD *)v47 = v43;
    *((_QWORD *)v47 + 1) = v44;
    v48 = v47 + 16;
    v149 = 0;
    v150 = 0;
  }
  v30[1] = v48;
  v62 = v148;
  v148 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v64 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v154 = __p;
    operator delete(__p);
  }
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v66 = (uint64_t)v163;
  *(_QWORD *)&v141 = v163;
  if (v163)
  {
    v67 = (_QWORD *)operator new();
    *v67 = &unk_1EA99F8E8;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v66;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v141 + 1) = v67;
  v163 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v68 = (_QWORD *)operator new();
    v69 = v151;
    *v68 = &unk_1EA99F948;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v69;
  }
  else
  {
    v68 = 0;
  }
  *((_QWORD *)&v140 + 1) = v68;
  v151 = 0;
  v168[0] = &unk_1EA99FAC8;
  v168[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateFlatten2D;
  v169 = v168;
  v167 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v168, (uint64_t)v166, a3);
  v70 = v167;
  if (v167 == v166)
  {
    v71 = 4;
    v70 = v166;
  }
  else
  {
    if (!v167)
      goto LABEL_66;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_66:
  v72 = v169;
  if (v169 == v168)
  {
    v73 = 4;
    v72 = v168;
    goto LABEL_70;
  }
  if (v169)
  {
    v73 = 5;
LABEL_70:
    (*(void (**)(void))(*v72 + 8 * v73))();
  }
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v75 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v80 = *a3;
  v164[0] = &off_1EA99FBD8;
  v164[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceFlatten2D;
  v165 = v164;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v80 + 200))(v80, v164);
  v81 = v165;
  if (v165 == v164)
  {
    v82 = 4;
    v81 = v164;
  }
  else
  {
    if (!v165)
      goto LABEL_88;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_88:
  MIL::Validation::TensorDTypeConstraints::Make(&v174);
  v83 = v174;
  std::string::basic_string[abi:ne180100]<0>(v136, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v139 = v84;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v86 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v88 = __ldaxr(p_shared_owners);
    while (__stlxr(v88 - 1, p_shared_owners));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v137 < 0)
    operator delete(v136[0]);
  v90 = v174;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v132 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v133 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v132, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v93 = v133;
  if (v133)
  {
    v94 = (unint64_t *)&v133->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  v97 = *a3;
  v128 = v174;
  if (v174)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v174;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v129 = v98;
  v174 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v97 + 56))(v97, &v128);
  v100 = v129;
  if (v129)
  {
    v101 = (unint64_t *)&v129->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v174;
  v174 = 0;
  if (v103)
    (*((void (**)(void **))*v103 + 1))(v103);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v174);
  v104 = v174;
  std::string::basic_string[abi:ne180100]<0>(v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v124, 0, (uint64_t *)&Scalar);
  v126 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v127 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v104 + 3))(v104, &v126, 0, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v107 = v127;
  if (v127)
  {
    v108 = (unint64_t *)&v127->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v125 < 0)
    operator delete(v124[0]);
  v111 = *a3;
  v120 = v174;
  if (v174)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v174;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = (std::__shared_weak_count_vtbl *)v113;
  }
  else
  {
    v112 = 0;
  }
  v121 = v112;
  v174 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v111 + 56))(v111, &v120);
  v114 = v121;
  if (v121)
  {
    v115 = (unint64_t *)&v121->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v174;
  v174 = 0;
  if (v117)
    (*((void (**)(void **))*v117 + 1))(v117);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v119 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v119, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07B4C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  v53 = *(_QWORD *)(v51 - 112);
  *(_QWORD *)(v51 - 112) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *v50;
  *v50 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 248), 0);
  _Unwind_Resume(a1);
}

void sub_1E07B5060()
{
  JUMPOUT(0x1E07B4FE8);
}

uint64_t MIL::Operators::Common::ios15::Identity::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  void **v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  void **v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  void **v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  void **v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void **v90;
  uint64_t result;
  uint64_t v92;
  void **v93;
  std::__shared_weak_count *v94;
  void *v95[2];
  char v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  void *v99[2];
  char v100;
  void *v101[2];
  char v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  __int128 v105;
  __int128 v106;
  void *v107[2];
  uint64_t v108;
  void *v109;
  void *v110;
  _QWORD *v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char **v116;
  void *__p;
  void *v118;
  _QWORD *v119;
  void *v120;
  void *v121;
  _QWORD *v122;
  void *v123;
  void *v124;
  _QWORD *v125;
  __n128 v126;
  uint64_t v127;
  _BYTE v128[24];
  _BYTE *v129;
  _BYTE v130[24];
  _BYTE *v131;
  _BYTE v132[24];
  _BYTE *v133;
  std::__shared_weak_count_vtbl *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char **v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v127 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v134 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v135 = (uint64_t)&v8->~__shared_weak_count_0;
  v136 = (uint64_t)&v8->~__shared_weak_count_0;
  v138 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v134);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v123 = v10;
  *v10 = v9;
  v124 = v10 + 1;
  v125 = v10 + 1;
  v139 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v123);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v120 = v12;
  *v12 = v11;
  v121 = v12 + 1;
  v122 = v12 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v120);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v118 = v14 + 1;
  v119 = v14 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v138, 4, &v126);
  MIL::IRParameter::Make(&v126, (uint64_t *)&v109);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v109);
  v15 = v109;
  v109 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v126.n128_u64[1];
  if (v126.n128_u64[1])
  {
    v17 = (unint64_t *)(v126.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  if (v134)
  {
    v135 = (uint64_t)v134;
    operator delete(v134);
  }
  v116 = 0;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v138 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v116, (void **)v19);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v138, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v116, 1uLL);
  v20 = v116;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v123 = v22;
  *v22 = v21;
  v124 = v22 + 1;
  v125 = v22 + 1;
  v134 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v123);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v120 = v24;
  *v24 = v23;
  v121 = v24 + 1;
  v122 = v24 + 1;
  v135 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v120);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v118 = v26 + 1;
  v119 = v26 + 1;
  v136 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v109 = v28;
  *v28 = v27;
  v110 = v28 + 1;
  v111 = v28 + 1;
  v137 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v109);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v134, 4, &v112);
  MIL::IRParameter::Make(&v112, &v113);
  v29 = v113;
  v114 = v113;
  if (v113)
  {
    v30 = (_QWORD *)operator new();
    v31 = v113;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v115 = v30;
  v113 = 0;
  v32 = v20[2];
  v33 = v20[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v20) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v20;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v142 = v20 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v114 = 0;
    v115 = 0;
    v43 = *v20;
    v42 = v20[1];
    if (v42 == *v20)
    {
      v46 = (void **)v20[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = (void **)*v20;
      v42 = v20[1];
    }
    v34 = (char *)(v41 + 2);
    *v20 = v44;
    v138 = v46;
    v139 = (uint64_t)v46;
    v20[1] = (char *)(v41 + 2);
    v140 = (uint64_t)v42;
    v47 = v20[2];
    v20[2] = &v39[16 * v40];
    v141 = (uint64_t)v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v138);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v114 = 0;
    v115 = 0;
  }
  v20[1] = v34;
  v48 = v113;
  v113 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v112.n128_u64[1];
  if (v112.n128_u64[1])
  {
    v50 = (unint64_t *)(v112.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v109)
  {
    v110 = v109;
    operator delete(v109);
  }
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  *(_OWORD *)v107 = *(_OWORD *)a2;
  v108 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = v127;
  *(_QWORD *)&v106 = v127;
  if (v127)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v106 + 1) = v53;
  v127 = 0;
  *(_QWORD *)&v105 = v116;
  if (v116)
  {
    v54 = (_QWORD *)operator new();
    v55 = v116;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v105 + 1) = v54;
  v116 = 0;
  v133 = 0;
  v131 = 0;
  MIL::IROperator::Make((__int128 *)v107, &v106, &v105, (uint64_t)v132, (uint64_t)v130, a3);
  v56 = v131;
  if (v131 == v130)
  {
    v57 = 4;
    v56 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_59;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_59:
  v58 = v133;
  if (v133 == v132)
  {
    v59 = 4;
    v58 = v132;
    goto LABEL_63;
  }
  if (v133)
  {
    v59 = 5;
LABEL_63:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v108) < 0)
    operator delete(v107[0]);
  v66 = *a3;
  v67 = std::string::basic_string[abi:ne180100]<0>(&v138, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v67, (uint64_t)v128);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v66 + 200))(v66, v128);
  v68 = v129;
  if (v129 == v128)
  {
    v69 = 4;
    v68 = v128;
  }
  else
  {
    if (!v129)
      goto LABEL_81;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_81:
  if (SHIBYTE(v140) < 0)
    operator delete(v138);
  MIL::Validation::TensorDTypeConstraints::Make(&v138);
  v70 = v138;
  std::string::basic_string[abi:ne180100]<0>(v101, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v101, 0, (uint64_t *)&v134);
  v103 = v134;
  if (v134)
  {
    v71 = (std::__shared_weak_count *)operator new();
    v72 = v134;
    v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71[1].__vftable = v72;
  }
  else
  {
    v71 = 0;
  }
  v104 = v71;
  v134 = 0;
  std::string::basic_string[abi:ne180100]<0>(v99, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v70 + 3))(v70, &v103, v99);
  if (v100 < 0)
    operator delete(v99[0]);
  v73 = v104;
  if (v104)
  {
    p_shared_owners = (unint64_t *)&v104->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v134;
  v134 = 0;
  if (v76)
    (*((void (**)(std::__shared_weak_count_vtbl *))v76->~__shared_weak_count + 1))(v76);
  if (v102 < 0)
    operator delete(v101[0]);
  v77 = v138;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v134);
  v97 = v134;
  if (v134)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v79 = v134;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v79;
  }
  else
  {
    v78 = 0;
  }
  v98 = v78;
  v134 = 0;
  std::string::basic_string[abi:ne180100]<0>(v95, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v77 + 3))(v77, &v97, v95);
  if (v96 < 0)
    operator delete(v95[0]);
  v80 = v98;
  if (v98)
  {
    v81 = (unint64_t *)&v98->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v134;
  v134 = 0;
  if (v83)
    (*((void (**)(std::__shared_weak_count_vtbl *))v83->~__shared_weak_count + 1))(v83);
  v84 = *a3;
  v93 = v138;
  if (v138)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = v138;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = (std::__shared_weak_count_vtbl *)v86;
  }
  else
  {
    v85 = 0;
  }
  v94 = v85;
  v138 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v84 + 56))(v84, &v93);
  v87 = v94;
  if (v94)
  {
    v88 = (unint64_t *)&v94->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v138;
  v138 = 0;
  if (v90)
    (*((void (**)(void **))*v90 + 1))(v90);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v116, 0);
  result = v127;
  if (v127)
  {
    v92 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v127);
    return MEMORY[0x1E0C023A0](v92, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07B5AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,void **a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;

  v65 = *(_QWORD *)(v63 - 112);
  *(_QWORD *)(v63 - 112) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *v62;
  *v62 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::NonMaximumSuppression::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count_vtbl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  __int128 v82;
  void **v83;
  char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  char **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  void *v98;
  _QWORD *v99;
  void *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  __int128 v114;
  void **v115;
  char *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  char **v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  void *v125;
  _QWORD *v126;
  void *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  __int128 v141;
  void **v142;
  char *v143;
  void *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  char **v148;
  uint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  void *v151;
  _QWORD *v152;
  void *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  __int128 v167;
  void **v168;
  char *v169;
  void *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  char **v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  void **v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  unint64_t *p_shared_owners;
  unint64_t v196;
  std::__shared_weak_count_vtbl *v197;
  void **v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count_vtbl *v204;
  void **v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count_vtbl *v211;
  void **v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count_vtbl *v218;
  void **v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count_vtbl *v225;
  void **v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count_vtbl *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count_vtbl *v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  void **v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  void **v239;
  void **v240;
  std::__shared_weak_count *v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count_vtbl *v246;
  void **v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count_vtbl *v253;
  void **v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count_vtbl *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count_vtbl *v260;
  void **v261;
  std::__shared_weak_count *v262;
  std::__shared_weak_count_vtbl *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count_vtbl *v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  void **v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  void **v274;
  uint64_t result;
  uint64_t v276;
  void **v277;
  std::__shared_weak_count *v278;
  void *v279[2];
  char v280;
  std::__shared_weak_count_vtbl *v281;
  std::__shared_weak_count *v282;
  void *v283[2];
  char v284;
  void *v285[2];
  char v286;
  std::__shared_weak_count_vtbl *v287;
  std::__shared_weak_count *v288;
  void *v289[2];
  char v290;
  void *v291[2];
  char v292;
  std::__shared_weak_count_vtbl *v293;
  std::__shared_weak_count *v294;
  void *v295[2];
  char v296;
  void *v297[2];
  char v298;
  std::__shared_weak_count_vtbl *v299;
  std::__shared_weak_count *v300;
  void **v301;
  std::__shared_weak_count *v302;
  void *v303[2];
  char v304;
  std::__shared_weak_count_vtbl *v305;
  std::__shared_weak_count *v306;
  void *v307[2];
  char v308;
  std::__shared_weak_count_vtbl *v309;
  std::__shared_weak_count *v310;
  void *v311[2];
  char v312;
  void *v313[2];
  char v314;
  std::__shared_weak_count_vtbl *v315;
  std::__shared_weak_count *v316;
  void *v317[2];
  char v318;
  void *v319[2];
  char v320;
  std::__shared_weak_count_vtbl *v321;
  std::__shared_weak_count *v322;
  void *v323[2];
  char v324;
  void *v325[2];
  char v326;
  std::__shared_weak_count_vtbl *v327;
  std::__shared_weak_count *v328;
  void *v329[2];
  char v330;
  void *v331[2];
  char v332;
  std::__shared_weak_count_vtbl *v333;
  std::__shared_weak_count *v334;
  __int128 v335;
  __int128 v336;
  void *__p[2];
  uint64_t v338;
  __n128 v339;
  __n128 v340;
  __n128 v341;
  __n128 v342;
  void *v343;
  void *v344;
  _QWORD *v345;
  char **v346;
  __n128 v347;
  __n128 v348;
  __n128 v349;
  __n128 v350;
  __n128 v351;
  __n128 v352;
  _QWORD *v353;
  _QWORD v354[3];
  _QWORD *v355;
  _BYTE v356[24];
  _BYTE *v357;
  _QWORD v358[3];
  _QWORD *v359;
  void *v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t v364;
  std::__shared_weak_count_vtbl *v365;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *p_on_zero_shared;
  void **Scalar;
  void **v369;
  char *v370;
  char *v371;
  char **v372;
  uint64_t v373;

  v373 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v353 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v10 = (char *)operator new(0x18uLL);
  v369 = (void **)(v10 + 24);
  v370 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  Scalar = (void **)v10;
  v360 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  p_on_zero_shared = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v365 = v14;
  v361 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v360, 2, &v352);
  MIL::IRParameter::Make(&v352, (uint64_t *)&v344);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "boxes", (uint64_t *)&v344);
  v15 = v344;
  v344 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v352.n128_u64[1];
  if (v352.n128_u64[1])
  {
    v17 = (unint64_t *)(v352.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  if (Scalar)
  {
    v369 = Scalar;
    operator delete(Scalar);
  }
  v19 = v353;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (char *)operator new(0x18uLL);
  v369 = (void **)(v23 + 24);
  v370 = v23 + 24;
  *(_QWORD *)v23 = v20;
  *((_QWORD *)v23 + 1) = v21;
  *((_QWORD *)v23 + 2) = v22;
  Scalar = (void **)v23;
  v360 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v27->__get_deleter;
  p_on_zero_shared = &v27->__get_deleter;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  v365 = v27;
  v361 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v360, 2, &v351);
  MIL::IRParameter::Make(&v351, (uint64_t *)&v344);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v19, "scores", (uint64_t *)&v344);
  v28 = v344;
  v344 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v351.n128_u64[1];
  if (v351.n128_u64[1])
  {
    v30 = (unint64_t *)(v351.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  if (Scalar)
  {
    v369 = Scalar;
    operator delete(Scalar);
  }
  v32 = v353;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v369 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v350);
  MIL::IRParameter::Make(&v350, (uint64_t *)&v365);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v32, "iou_threshold", (uint64_t *)&v365);
  v34 = v365;
  v365 = 0;
  if (v34)
    (*((void (**)(std::__shared_weak_count_vtbl *))v34->~__shared_weak_count + 1))(v34);
  v35 = (std::__shared_weak_count *)v350.n128_u64[1];
  if (v350.n128_u64[1])
  {
    v36 = (unint64_t *)(v350.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v38 = v353;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v369 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v349);
  MIL::IRParameter::Make(&v349, (uint64_t *)&v365);
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v38, "score_threshold", (uint64_t *)&v365);
  v40 = v365;
  v365 = 0;
  if (v40)
    (*((void (**)(std::__shared_weak_count_vtbl *))v40->~__shared_weak_count + 1))(v40);
  v41 = (std::__shared_weak_count *)v349.n128_u64[1];
  if (v349.n128_u64[1])
  {
    v42 = (unint64_t *)(v349.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  v44 = v353;
  v365 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v365, 1, &v348);
  MIL::IRParameter::Make(&v348, (uint64_t *)&Scalar);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v44, "max_boxes", (uint64_t *)&Scalar);
  v46 = Scalar;
  Scalar = 0;
  if (v46)
    (*((void (**)(void **))*v46 + 1))(v46);
  v47 = (std::__shared_weak_count *)v348.n128_u64[1];
  if (v348.n128_u64[1])
  {
    v48 = (unint64_t *)(v348.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v50 = v353;
  v365 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v365, 1, &v347);
  MIL::IRParameter::Make(&v347, (uint64_t *)&Scalar);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[22],std::unique_ptr<MIL::IRParameter>>(v50, "per_class_suppression", (uint64_t *)&Scalar);
  v52 = Scalar;
  Scalar = 0;
  if (v52)
    (*((void (**)(void **))*v52 + 1))(v52);
  v53 = (std::__shared_weak_count *)v347.n128_u64[1];
  if (v347.n128_u64[1])
  {
    v54 = (unint64_t *)(v347.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v346 = 0;
  v56 = operator new();
  *(_QWORD *)v56 = 0;
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v56 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v346, (void **)v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v346, 4uLL);
  v57 = v346;
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v61 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v61->__get_deleter;
  p_on_zero_shared = &v61->__get_deleter;
  v61->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v58;
  v61->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v59;
  v61->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v60;
  v365 = v61;
  v363 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v365);
  v62 = MIL::IRUnknownDimension::Make(a1, 0);
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v65 = operator new(0x18uLL);
  v361 = (uint64_t)(v65 + 3);
  v362 = v65 + 3;
  *v65 = v62;
  v65[1] = v63;
  v65[2] = v64;
  v360 = v65;
  v364 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v360);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v363, 2, &v342);
  MIL::IRParameter::Make(&v342, (uint64_t *)&v343);
  v66 = v343;
  v344 = v343;
  if (v343)
  {
    v67 = (_QWORD *)operator new();
    v68 = v343;
    *v67 = &unk_1EA99F888;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  v345 = v67;
  v343 = 0;
  v69 = v57[2];
  v70 = v57[1];
  if (v70 >= v69)
  {
    v72 = (v70 - *v57) >> 4;
    v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v74 = v69 - *v57;
    if (v74 >> 3 > v73)
      v73 = v74 >> 3;
    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
      v75 = 0xFFFFFFFFFFFFFFFLL;
    else
      v75 = v73;
    v372 = v57 + 2;
    v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v57 + 2), v75);
    v78 = &v76[16 * v72];
    *(_QWORD *)v78 = v66;
    *((_QWORD *)v78 + 1) = v67;
    v345 = 0;
    v344 = 0;
    v80 = *v57;
    v79 = v57[1];
    if (v79 == *v57)
    {
      v83 = (void **)v57[1];
      v81 = &v76[16 * v72];
    }
    else
    {
      v81 = &v76[16 * v72];
      do
      {
        v82 = *((_OWORD *)v79 - 1);
        v79 -= 16;
        *((_OWORD *)v81 - 1) = v82;
        v81 -= 16;
        *(_QWORD *)v79 = 0;
        *((_QWORD *)v79 + 1) = 0;
      }
      while (v79 != v80);
      v83 = (void **)*v57;
      v79 = v57[1];
    }
    v71 = v78 + 16;
    *v57 = v81;
    Scalar = v83;
    v369 = v83;
    v57[1] = v78 + 16;
    v370 = v79;
    v84 = v57[2];
    v57[2] = &v76[16 * v77];
    v371 = v84;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v70 = v66;
    *((_QWORD *)v70 + 1) = v67;
    v71 = v70 + 16;
    v345 = 0;
    v344 = 0;
  }
  v57[1] = v71;
  v85 = (uint64_t)v343;
  v343 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = (std::__shared_weak_count *)v342.n128_u64[1];
  if (v342.n128_u64[1])
  {
    v87 = (unint64_t *)(v342.n128_u64[1] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v360)
  {
    v361 = (uint64_t)v360;
    operator delete(v360);
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  v89 = v346;
  v90 = MIL::IRUnknownDimension::Make(a1, 0);
  v91 = MIL::IRUnknownDimension::Make(a1, 0);
  v92 = MIL::IRUnknownDimension::Make(a1, 0);
  v93 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v93->__get_deleter;
  p_on_zero_shared = &v93->__get_deleter;
  v93->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v90;
  v93->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v91;
  v93->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v92;
  v365 = v93;
  v363 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v365);
  v94 = MIL::IRUnknownDimension::Make(a1, 0);
  v95 = MIL::IRUnknownDimension::Make(a1, 0);
  v96 = MIL::IRUnknownDimension::Make(a1, 0);
  v97 = operator new(0x18uLL);
  v361 = (uint64_t)(v97 + 3);
  v362 = v97 + 3;
  *v97 = v94;
  v97[1] = v95;
  v97[2] = v96;
  v360 = v97;
  v364 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v360);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v363, 2, &v341);
  MIL::IRParameter::Make(&v341, (uint64_t *)&v343);
  v98 = v343;
  v344 = v343;
  if (v343)
  {
    v99 = (_QWORD *)operator new();
    v100 = v343;
    *v99 = &unk_1EA99F888;
    v99[1] = 0;
    v99[2] = 0;
    v99[3] = v100;
  }
  else
  {
    v99 = 0;
  }
  v345 = v99;
  v343 = 0;
  v101 = v89[2];
  v102 = v89[1];
  if (v102 >= v101)
  {
    v104 = (v102 - *v89) >> 4;
    v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v106 = v101 - *v89;
    if (v106 >> 3 > v105)
      v105 = v106 >> 3;
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0)
      v107 = 0xFFFFFFFFFFFFFFFLL;
    else
      v107 = v105;
    v372 = v89 + 2;
    v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v89 + 2), v107);
    v110 = &v108[16 * v104];
    *(_QWORD *)v110 = v98;
    *((_QWORD *)v110 + 1) = v99;
    v345 = 0;
    v344 = 0;
    v112 = *v89;
    v111 = v89[1];
    if (v111 == *v89)
    {
      v115 = (void **)v89[1];
      v113 = &v108[16 * v104];
    }
    else
    {
      v113 = &v108[16 * v104];
      do
      {
        v114 = *((_OWORD *)v111 - 1);
        v111 -= 16;
        *((_OWORD *)v113 - 1) = v114;
        v113 -= 16;
        *(_QWORD *)v111 = 0;
        *((_QWORD *)v111 + 1) = 0;
      }
      while (v111 != v112);
      v115 = (void **)*v89;
      v111 = v89[1];
    }
    v103 = v110 + 16;
    *v89 = v113;
    Scalar = v115;
    v369 = v115;
    v89[1] = v110 + 16;
    v370 = v111;
    v116 = v89[2];
    v89[2] = &v108[16 * v109];
    v371 = v116;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v102 = v98;
    *((_QWORD *)v102 + 1) = v99;
    v103 = v102 + 16;
    v345 = 0;
    v344 = 0;
  }
  v89[1] = v103;
  v117 = (uint64_t)v343;
  v343 = 0;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = (std::__shared_weak_count *)v341.n128_u64[1];
  if (v341.n128_u64[1])
  {
    v119 = (unint64_t *)(v341.n128_u64[1] + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (v360)
  {
    v361 = (uint64_t)v360;
    operator delete(v360);
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  v121 = v346;
  v122 = MIL::IRUnknownDimension::Make(a1, 0);
  v123 = MIL::IRUnknownDimension::Make(a1, 0);
  v124 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v124->__on_zero_shared;
  p_on_zero_shared = &v124->__on_zero_shared;
  v124->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v122;
  v124->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v123;
  v365 = v124;
  v363 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v363, 1, &v340);
  MIL::IRParameter::Make(&v340, (uint64_t *)&v344);
  v125 = v344;
  v360 = v344;
  if (v344)
  {
    v126 = (_QWORD *)operator new();
    v127 = v344;
    *v126 = &unk_1EA99F888;
    v126[1] = 0;
    v126[2] = 0;
    v126[3] = v127;
  }
  else
  {
    v126 = 0;
  }
  v361 = (uint64_t)v126;
  v344 = 0;
  v128 = v121[2];
  v129 = v121[1];
  if (v129 >= v128)
  {
    v131 = (v129 - *v121) >> 4;
    v132 = v131 + 1;
    if ((unint64_t)(v131 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v133 = v128 - *v121;
    if (v133 >> 3 > v132)
      v132 = v133 >> 3;
    if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF0)
      v134 = 0xFFFFFFFFFFFFFFFLL;
    else
      v134 = v132;
    v372 = v121 + 2;
    v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v121 + 2), v134);
    v137 = &v135[16 * v131];
    *(_QWORD *)v137 = v125;
    *((_QWORD *)v137 + 1) = v126;
    v360 = 0;
    v361 = 0;
    v139 = *v121;
    v138 = v121[1];
    if (v138 == *v121)
    {
      v142 = (void **)v121[1];
      v140 = &v135[16 * v131];
    }
    else
    {
      v140 = &v135[16 * v131];
      do
      {
        v141 = *((_OWORD *)v138 - 1);
        v138 -= 16;
        *((_OWORD *)v140 - 1) = v141;
        v140 -= 16;
        *(_QWORD *)v138 = 0;
        *((_QWORD *)v138 + 1) = 0;
      }
      while (v138 != v139);
      v142 = (void **)*v121;
      v138 = v121[1];
    }
    v130 = v137 + 16;
    *v121 = v140;
    Scalar = v142;
    v369 = v142;
    v121[1] = v137 + 16;
    v370 = v138;
    v143 = v121[2];
    v121[2] = &v135[16 * v136];
    v371 = v143;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v129 = v125;
    *((_QWORD *)v129 + 1) = v126;
    v130 = v129 + 16;
    v360 = 0;
    v361 = 0;
  }
  v121[1] = v130;
  v144 = v344;
  v344 = 0;
  if (v144)
    (*(void (**)(void *))(*(_QWORD *)v144 + 8))(v144);
  v145 = (std::__shared_weak_count *)v340.n128_u64[1];
  if (v340.n128_u64[1])
  {
    v146 = (unint64_t *)(v340.n128_u64[1] + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  v148 = v346;
  v149 = MIL::IRUnknownDimension::Make(a1, 0);
  v150 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v365 = v150;
  v150->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v149;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v150->~__shared_weak_count_0;
  p_on_zero_shared = &v150->~__shared_weak_count_0;
  v363 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v363, 1, &v339);
  MIL::IRParameter::Make(&v339, (uint64_t *)&v344);
  v151 = v344;
  v360 = v344;
  if (v344)
  {
    v152 = (_QWORD *)operator new();
    v153 = v344;
    *v152 = &unk_1EA99F888;
    v152[1] = 0;
    v152[2] = 0;
    v152[3] = v153;
  }
  else
  {
    v152 = 0;
  }
  v361 = (uint64_t)v152;
  v344 = 0;
  v154 = v148[2];
  v155 = v148[1];
  if (v155 >= v154)
  {
    v157 = (v155 - *v148) >> 4;
    v158 = v157 + 1;
    if ((unint64_t)(v157 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v159 = v154 - *v148;
    if (v159 >> 3 > v158)
      v158 = v159 >> 3;
    if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF0)
      v160 = 0xFFFFFFFFFFFFFFFLL;
    else
      v160 = v158;
    v372 = v148 + 2;
    v161 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v148 + 2), v160);
    v163 = &v161[16 * v157];
    *(_QWORD *)v163 = v151;
    *((_QWORD *)v163 + 1) = v152;
    v360 = 0;
    v361 = 0;
    v165 = *v148;
    v164 = v148[1];
    if (v164 == *v148)
    {
      v168 = (void **)v148[1];
      v166 = &v161[16 * v157];
    }
    else
    {
      v166 = &v161[16 * v157];
      do
      {
        v167 = *((_OWORD *)v164 - 1);
        v164 -= 16;
        *((_OWORD *)v166 - 1) = v167;
        v166 -= 16;
        *(_QWORD *)v164 = 0;
        *((_QWORD *)v164 + 1) = 0;
      }
      while (v164 != v165);
      v168 = (void **)*v148;
      v164 = v148[1];
    }
    v156 = v163 + 16;
    *v148 = v166;
    Scalar = v168;
    v369 = v168;
    v148[1] = v163 + 16;
    v370 = v164;
    v169 = v148[2];
    v148[2] = &v161[16 * v162];
    v371 = v169;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v155 = v151;
    *((_QWORD *)v155 + 1) = v152;
    v156 = v155 + 16;
    v360 = 0;
    v361 = 0;
  }
  v148[1] = v156;
  v170 = v344;
  v344 = 0;
  if (v170)
    (*(void (**)(void *))(*(_QWORD *)v170 + 8))(v170);
  v171 = (std::__shared_weak_count *)v339.n128_u64[1];
  if (v339.n128_u64[1])
  {
    v172 = (unint64_t *)(v339.n128_u64[1] + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v338 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v174 = (uint64_t)v353;
  *(_QWORD *)&v336 = v353;
  if (v353)
  {
    v175 = (_QWORD *)operator new();
    *v175 = &unk_1EA99F8E8;
    v175[1] = 0;
    v175[2] = 0;
    v175[3] = v174;
  }
  else
  {
    v175 = 0;
  }
  *((_QWORD *)&v336 + 1) = v175;
  v353 = 0;
  *(_QWORD *)&v335 = v346;
  if (v346)
  {
    v176 = (_QWORD *)operator new();
    v177 = v346;
    *v176 = &unk_1EA99F948;
    v176[1] = 0;
    v176[2] = 0;
    v176[3] = v177;
  }
  else
  {
    v176 = 0;
  }
  *((_QWORD *)&v335 + 1) = v176;
  v346 = 0;
  v358[0] = &unk_1EA99FAC8;
  v358[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateNonMaximumSuppression;
  v359 = v358;
  v357 = 0;
  MIL::IROperator::Make((__int128 *)__p, &v336, &v335, (uint64_t)v358, (uint64_t)v356, a3);
  v178 = v357;
  if (v357 == v356)
  {
    v179 = 4;
    v178 = v356;
  }
  else
  {
    if (!v357)
      goto LABEL_170;
    v179 = 5;
  }
  (*(void (**)(void))(*v178 + 8 * v179))();
LABEL_170:
  v180 = v359;
  if (v359 == v358)
  {
    v181 = 4;
    v180 = v358;
    goto LABEL_174;
  }
  if (v359)
  {
    v181 = 5;
LABEL_174:
    (*(void (**)(void))(*v180 + 8 * v181))();
  }
  v182 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
  if (*((_QWORD *)&v335 + 1))
  {
    v183 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = (std::__shared_weak_count *)*((_QWORD *)&v336 + 1);
  if (*((_QWORD *)&v336 + 1))
  {
    v186 = (unint64_t *)(*((_QWORD *)&v336 + 1) + 8);
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  if (SHIBYTE(v338) < 0)
    operator delete(__p[0]);
  v188 = *a3;
  v354[0] = &off_1EA99FBD8;
  v354[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceNonMaximumSuppression;
  v355 = v354;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v188 + 200))(v188, v354);
  v189 = v355;
  if (v355 == v354)
  {
    v190 = 4;
    v189 = v354;
  }
  else
  {
    if (!v355)
      goto LABEL_192;
    v190 = 5;
  }
  (*(void (**)(void))(*v189 + 8 * v190))();
LABEL_192:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v191 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v331, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v331, 0, (uint64_t *)&v365);
  v333 = v365;
  if (v365)
  {
    v192 = (std::__shared_weak_count *)operator new();
    v193 = v365;
    v192->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v192->__shared_owners_ = 0;
    v192->__shared_weak_owners_ = 0;
    v192[1].__vftable = v193;
  }
  else
  {
    v192 = 0;
  }
  v334 = v192;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v329, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v191 + 3))(v191, &v333, v329);
  if (v330 < 0)
    operator delete(v329[0]);
  v194 = v334;
  if (v334)
  {
    p_shared_owners = (unint64_t *)&v334->__shared_owners_;
    do
      v196 = __ldaxr(p_shared_owners);
    while (__stlxr(v196 - 1, p_shared_owners));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = v365;
  v365 = 0;
  if (v197)
    (*((void (**)(std::__shared_weak_count_vtbl *))v197->~__shared_weak_count + 1))(v197);
  if (v332 < 0)
    operator delete(v331[0]);
  v198 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v325, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v325, 0, (uint64_t *)&v365);
  v327 = v365;
  if (v365)
  {
    v199 = (std::__shared_weak_count *)operator new();
    v200 = v365;
    v199->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v199->__shared_owners_ = 0;
    v199->__shared_weak_owners_ = 0;
    v199[1].__vftable = v200;
  }
  else
  {
    v199 = 0;
  }
  v328 = v199;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v323, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v198 + 3))(v198, &v327, v323);
  if (v324 < 0)
    operator delete(v323[0]);
  v201 = v328;
  if (v328)
  {
    v202 = (unint64_t *)&v328->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v204 = v365;
  v365 = 0;
  if (v204)
    (*((void (**)(std::__shared_weak_count_vtbl *))v204->~__shared_weak_count + 1))(v204);
  if (v326 < 0)
    operator delete(v325[0]);
  v205 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v319, "iou_threshold");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v319, 0, (uint64_t *)&v365);
  v321 = v365;
  if (v365)
  {
    v206 = (std::__shared_weak_count *)operator new();
    v207 = v365;
    v206->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v206->__shared_owners_ = 0;
    v206->__shared_weak_owners_ = 0;
    v206[1].__vftable = v207;
  }
  else
  {
    v206 = 0;
  }
  v322 = v206;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v317, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v205 + 3))(v205, &v321, v317);
  if (v318 < 0)
    operator delete(v317[0]);
  v208 = v322;
  if (v322)
  {
    v209 = (unint64_t *)&v322->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = v365;
  v365 = 0;
  if (v211)
    (*((void (**)(std::__shared_weak_count_vtbl *))v211->~__shared_weak_count + 1))(v211);
  if (v320 < 0)
    operator delete(v319[0]);
  v212 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v313, "score_threshold");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v313, 0, (uint64_t *)&v365);
  v315 = v365;
  if (v365)
  {
    v213 = (std::__shared_weak_count *)operator new();
    v214 = v365;
    v213->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v213->__shared_owners_ = 0;
    v213->__shared_weak_owners_ = 0;
    v213[1].__vftable = v214;
  }
  else
  {
    v213 = 0;
  }
  v316 = v213;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v311, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v212 + 3))(v212, &v315, v311);
  if (v312 < 0)
    operator delete(v311[0]);
  v215 = v316;
  if (v316)
  {
    v216 = (unint64_t *)&v316->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = v365;
  v365 = 0;
  if (v218)
    (*((void (**)(std::__shared_weak_count_vtbl *))v218->~__shared_weak_count + 1))(v218);
  if (v314 < 0)
    operator delete(v313[0]);
  v219 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v365);
  v309 = v365;
  if (v365)
  {
    v220 = (std::__shared_weak_count *)operator new();
    v221 = v365;
    v220->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v220->__shared_owners_ = 0;
    v220->__shared_weak_owners_ = 0;
    v220[1].__vftable = v221;
  }
  else
  {
    v220 = 0;
  }
  v310 = v220;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v307, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v219 + 3))(v219, &v309, v307);
  if (v308 < 0)
    operator delete(v307[0]);
  v222 = v310;
  if (v310)
  {
    v223 = (unint64_t *)&v310->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = v365;
  v365 = 0;
  if (v225)
    (*((void (**)(std::__shared_weak_count_vtbl *))v225->~__shared_weak_count + 1))(v225);
  v226 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &v365);
  v305 = v365;
  if (v365)
  {
    v227 = (std::__shared_weak_count *)operator new();
    v228 = v365;
    v227->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v227->__shared_owners_ = 0;
    v227->__shared_weak_owners_ = 0;
    v227[1].__vftable = v228;
  }
  else
  {
    v227 = 0;
  }
  v306 = v227;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v303, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v226 + 3))(v226, &v305, v303);
  if (v304 < 0)
    operator delete(v303[0]);
  v229 = v306;
  if (v306)
  {
    v230 = (unint64_t *)&v306->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  v232 = v365;
  v365 = 0;
  if (v232)
    (*((void (**)(std::__shared_weak_count_vtbl *))v232->~__shared_weak_count + 1))(v232);
  v233 = *a3;
  v301 = Scalar;
  if (Scalar)
  {
    v234 = (std::__shared_weak_count *)operator new();
    v235 = Scalar;
    v234->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v234->__shared_owners_ = 0;
    v234->__shared_weak_owners_ = 0;
    v234[1].__vftable = (std::__shared_weak_count_vtbl *)v235;
  }
  else
  {
    v234 = 0;
  }
  v302 = v234;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v233 + 56))(v233, &v301);
  v236 = v302;
  if (v302)
  {
    v237 = (unint64_t *)&v302->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v239 = Scalar;
  Scalar = 0;
  if (v239)
    (*((void (**)(void **))*v239 + 1))(v239);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v240 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v297, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v297, 0, (uint64_t *)&v365);
  v299 = v365;
  if (v365)
  {
    v241 = (std::__shared_weak_count *)operator new();
    v242 = v365;
    v241->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v241->__shared_owners_ = 0;
    v241->__shared_weak_owners_ = 0;
    v241[1].__vftable = v242;
  }
  else
  {
    v241 = 0;
  }
  v300 = v241;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v295, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v240 + 3))(v240, &v299, 1, v295);
  if (v296 < 0)
    operator delete(v295[0]);
  v243 = v300;
  if (v300)
  {
    v244 = (unint64_t *)&v300->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  v246 = v365;
  v365 = 0;
  if (v246)
    (*((void (**)(std::__shared_weak_count_vtbl *))v246->~__shared_weak_count + 1))(v246);
  if (v298 < 0)
    operator delete(v297[0]);
  v247 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v291, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v291, 0, (uint64_t *)&v365);
  v293 = v365;
  if (v365)
  {
    v248 = (std::__shared_weak_count *)operator new();
    v249 = v365;
    v248->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v248->__shared_owners_ = 0;
    v248->__shared_weak_owners_ = 0;
    v248[1].__vftable = v249;
  }
  else
  {
    v248 = 0;
  }
  v294 = v248;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v289, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v247 + 3))(v247, &v293, 1, v289);
  if (v290 < 0)
    operator delete(v289[0]);
  v250 = v294;
  if (v294)
  {
    v251 = (unint64_t *)&v294->__shared_owners_;
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v253 = v365;
  v365 = 0;
  if (v253)
    (*((void (**)(std::__shared_weak_count_vtbl *))v253->~__shared_weak_count + 1))(v253);
  if (v292 < 0)
    operator delete(v291[0]);
  v254 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v285, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v285, 0, (uint64_t *)&v365);
  v287 = v365;
  if (v365)
  {
    v255 = (std::__shared_weak_count *)operator new();
    v256 = v365;
    v255->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v255->__shared_owners_ = 0;
    v255->__shared_weak_owners_ = 0;
    v255[1].__vftable = v256;
  }
  else
  {
    v255 = 0;
  }
  v288 = v255;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v283, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v254 + 3))(v254, &v287, 2, v283);
  if (v284 < 0)
    operator delete(v283[0]);
  v257 = v288;
  if (v288)
  {
    v258 = (unint64_t *)&v288->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = v365;
  v365 = 0;
  if (v260)
    (*((void (**)(std::__shared_weak_count_vtbl *))v260->~__shared_weak_count + 1))(v260);
  if (v286 < 0)
    operator delete(v285[0]);
  v261 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &v365);
  v281 = v365;
  if (v365)
  {
    v262 = (std::__shared_weak_count *)operator new();
    v263 = v365;
    v262->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v262->__shared_owners_ = 0;
    v262->__shared_weak_owners_ = 0;
    v262[1].__vftable = v263;
  }
  else
  {
    v262 = 0;
  }
  v282 = v262;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v279, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v261 + 3))(v261, &v281, 2, v279);
  if (v280 < 0)
    operator delete(v279[0]);
  v264 = v282;
  if (v282)
  {
    v265 = (unint64_t *)&v282->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  v267 = v365;
  v365 = 0;
  if (v267)
    (*((void (**)(std::__shared_weak_count_vtbl *))v267->~__shared_weak_count + 1))(v267);
  v268 = *a3;
  v277 = Scalar;
  if (Scalar)
  {
    v269 = (std::__shared_weak_count *)operator new();
    v270 = Scalar;
    v269->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v269->__shared_owners_ = 0;
    v269->__shared_weak_owners_ = 0;
    v269[1].__vftable = (std::__shared_weak_count_vtbl *)v270;
  }
  else
  {
    v269 = 0;
  }
  v278 = v269;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v268 + 56))(v268, &v277);
  v271 = v278;
  if (v278)
  {
    v272 = (unint64_t *)&v278->__shared_owners_;
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  v274 = Scalar;
  Scalar = 0;
  if (v274)
    (*((void (**)(void **))*v274 + 1))(v274);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v346, 0);
  result = (uint64_t)v353;
  if (v353)
  {
    v276 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v353);
    return MEMORY[0x1E0C023A0](v276, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07B7B14(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2F0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x358], 0);
  _Unwind_Resume(a1);
}

void sub_1E07B8260()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 128);
  if (v1)
  {
    *(_QWORD *)(v0 - 120) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1E07B823CLL);
}

void sub_1E07B8278()
{
  JUMPOUT(0x1E07B823CLL);
}

uint64_t MIL::Operators::Common::ios15::NonZero::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void ***v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  unint64_t v27;
  void **v28;
  void **v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void **v37;
  void **v38;
  char *v39;
  __int128 v40;
  void **v41;
  uint64_t v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void **v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  void **v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void **v77;
  void **v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  void **v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void **v91;
  void **v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  void **v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  void **v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  void **v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void **v119;
  uint64_t result;
  uint64_t v121;
  void **v122;
  std::__shared_weak_count *v123;
  void *v124[2];
  char v125;
  void *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  void **v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  void **v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  void *v150;
  std::__shared_weak_count *v151;
  __int128 v152;
  __int128 v153;
  void *v154[2];
  uint64_t v155;
  __n128 v156;
  void *__p;
  void *v158;
  _QWORD *v159;
  void *v160;
  void *v161;
  _QWORD *v162;
  void *v163;
  void *v164;
  _QWORD *v165;
  void *v166;
  void *v167;
  _QWORD *v168;
  __n128 v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  uint64_t v177;
  void **v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v170 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v166 = v8;
  *v8 = v7;
  v167 = v8 + 1;
  v168 = v8 + 1;
  v178 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v166);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v163 = v10;
  *v10 = v9;
  v164 = v10 + 1;
  v165 = v10 + 1;
  v179 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v163);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v160 = v12;
  *v12 = v11;
  v161 = v12 + 1;
  v162 = v12 + 1;
  v180 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v160);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v158 = v14 + 1;
  v159 = v14 + 1;
  v181 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v178, 4, &v169);
  MIL::IRParameter::Make(&v169, &v177);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v177);
  v15 = v177;
  v177 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v169.n128_u64[1];
  if (v169.n128_u64[1])
  {
    v17 = (unint64_t *)(v169.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v158 = __p;
    operator delete(__p);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  v160 = 0;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v178 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, (void **)v19);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v178, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v160, 1uLL);
  v20 = (void ***)v160;
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(0x10uLL);
  v167 = v23 + 2;
  v168 = v23 + 2;
  *v23 = v21;
  v23[1] = v22;
  v166 = v23;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v166);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v177, 1, &v156);
  MIL::IRParameter::Make(&v156, (uint64_t *)&__p);
  v24 = __p;
  v163 = __p;
  if (__p)
  {
    v25 = (_QWORD *)operator new();
    v26 = __p;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v164 = v25;
  __p = 0;
  v27 = (unint64_t)v20[2];
  v28 = v20[1];
  if ((unint64_t)v28 >= v27)
  {
    v30 = ((char *)v28 - (char *)*v20) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - (_QWORD)*v20;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v182 = v20 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 2), v33);
    v36 = &v34[16 * v30];
    *(_QWORD *)v36 = v24;
    *((_QWORD *)v36 + 1) = v25;
    v163 = 0;
    v164 = 0;
    v38 = *v20;
    v37 = v20[1];
    if (v37 == *v20)
    {
      v41 = v20[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 2;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *v37 = 0;
        v37[1] = 0;
      }
      while (v37 != v38);
      v41 = *v20;
      v37 = v20[1];
    }
    v29 = (void **)(v36 + 16);
    *v20 = (void **)v39;
    v178 = v41;
    v179 = (uint64_t)v41;
    v20[1] = (void **)(v36 + 16);
    v180 = (uint64_t)v37;
    v42 = (uint64_t)v20[2];
    v20[2] = (void **)&v34[16 * v35];
    v181 = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v178);
  }
  else
  {
    *v28 = v24;
    v28[1] = v25;
    v29 = v28 + 2;
    v163 = 0;
    v164 = 0;
  }
  v20[1] = v29;
  v43 = __p;
  __p = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v156.n128_u64[1];
  if (v156.n128_u64[1])
  {
    v45 = (unint64_t *)(v156.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  *(_OWORD *)v154 = *(_OWORD *)a2;
  v155 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = v170;
  *(_QWORD *)&v153 = v170;
  if (v170)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v153 + 1) = v48;
  v170 = 0;
  *(_QWORD *)&v152 = v160;
  if (v160)
  {
    v49 = (_QWORD *)operator new();
    v50 = v160;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v152 + 1) = v49;
  v160 = 0;
  v176 = 0;
  v174 = 0;
  MIL::IROperator::Make((__int128 *)v154, &v153, &v152, (uint64_t)v175, (uint64_t)v173, a3);
  v51 = v174;
  if (v174 == v173)
  {
    v52 = 4;
    v51 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_53;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_53:
  v53 = v176;
  if (v176 == v175)
  {
    v54 = 4;
    v53 = v175;
    goto LABEL_57;
  }
  if (v176)
  {
    v54 = 5;
LABEL_57:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v155) < 0)
    operator delete(v154[0]);
  v61 = *a3;
  v171[0] = &off_1EA99FBD8;
  v171[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceNonZero;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 200))(v61, v171);
  v62 = v172;
  if (v172 == v171)
  {
    v63 = 4;
    v62 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_75;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_75:
  MIL::Validation::TensorDTypeConstraints::Make(&v178);
  v64 = v178;
  std::string::basic_string[abi:ne180100]<0>(v148, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v148, 0, (uint64_t *)&v166);
  v150 = v166;
  if (v166)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)v166;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v151 = v65;
  v166 = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*((void (**)(void **, void **, void **))*v64 + 3))(v64, &v150, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v67 = v151;
  if (v151)
  {
    p_shared_owners = (unint64_t *)&v151->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v166;
  v166 = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v149 < 0)
    operator delete(v148[0]);
  v71 = *a3;
  v144 = v178;
  if (v178)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = v178;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = (std::__shared_weak_count_vtbl *)v73;
  }
  else
  {
    v72 = 0;
  }
  v145 = v72;
  v178 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v71 + 56))(v71, &v144);
  v74 = v145;
  if (v145)
  {
    v75 = (unint64_t *)&v145->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v178;
  v178 = 0;
  if (v77)
    (*((void (**)(void **))*v77 + 1))(v77);
  MIL::Validation::TensorRankValueConstraints::Make(&v178);
  v78 = v178;
  std::string::basic_string[abi:ne180100]<0>(v140, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&v166);
  v142 = v166;
  if (v166)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v166;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v143 = v79;
  v166 = 0;
  (*((void (**)(void **, void **, uint64_t, uint64_t))*v78 + 4))(v78, &v142, 1, 0x7FFFFFFFFFFFFFFFLL);
  v81 = v143;
  if (v143)
  {
    v82 = (unint64_t *)&v143->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v166;
  v166 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  if (v141 < 0)
    operator delete(v140[0]);
  v85 = *a3;
  v138 = v178;
  if (v178)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = v178;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = (std::__shared_weak_count_vtbl *)v87;
  }
  else
  {
    v86 = 0;
  }
  v139 = v86;
  v178 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v85 + 56))(v85, &v138);
  v88 = v139;
  if (v139)
  {
    v89 = (unint64_t *)&v139->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v178;
  v178 = 0;
  if (v91)
    (*((void (**)(void **))*v91 + 1))(v91);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v178);
  v92 = v178;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&v166);
  v136 = v166;
  if (v166)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = (std::__shared_weak_count_vtbl *)v166;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v137 = v93;
  v166 = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "R");
  (*((void (**)(void **, void **, _QWORD, uint64_t, void **))*v92 + 4))(v92, &v136, 0, -1, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v95 = v137;
  if (v137)
  {
    v96 = (unint64_t *)&v137->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v166;
  v166 = 0;
  if (v98)
    (*(void (**)(void *))(*(_QWORD *)v98 + 8))(v98);
  if (v135 < 0)
    operator delete(v134[0]);
  v99 = v178;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v166);
  v130 = v166;
  if (v166)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = (std::__shared_weak_count_vtbl *)v166;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v131 = v100;
  v166 = 0;
  std::string::basic_string[abi:ne180100]<0>(v128, "N");
  (*((void (**)(void **, void **, _QWORD, void **))*v99 + 3))(v99, &v130, 0, v128);
  if (v129 < 0)
    operator delete(v128[0]);
  v102 = v131;
  if (v131)
  {
    v103 = (unint64_t *)&v131->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v166;
  v166 = 0;
  if (v105)
    (*(void (**)(void *))(*(_QWORD *)v105 + 8))(v105);
  v106 = v178;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v166);
  v126 = v166;
  if (v166)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)v166;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v127 = v107;
  v166 = 0;
  std::string::basic_string[abi:ne180100]<0>(v124, "R");
  (*((void (**)(void **, void **, uint64_t, void **))*v106 + 3))(v106, &v126, 1, v124);
  if (v125 < 0)
    operator delete(v124[0]);
  v109 = v127;
  if (v127)
  {
    v110 = (unint64_t *)&v127->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v166;
  v166 = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  v113 = *a3;
  v122 = v178;
  if (v178)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = v178;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = (std::__shared_weak_count_vtbl *)v115;
  }
  else
  {
    v114 = 0;
  }
  v123 = v114;
  v178 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v113 + 56))(v113, &v122);
  v116 = v123;
  if (v123)
  {
    v117 = (unint64_t *)&v123->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v178;
  v178 = 0;
  if (v119)
    (*((void (**)(void **))*v119 + 1))(v119);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  result = v170;
  if (v170)
  {
    v121 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v170);
    return MEMORY[0x1E0C023A0](v121, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07B9044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 112);
  *(_QWORD *)(v61 - 112) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v61 - 224), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::OneHot::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  void **v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char **v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  void **v68;
  char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  char **v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void **v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  uint64_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  void **v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void **v118;
  uint64_t result;
  uint64_t v120;
  void **v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  void *v135[2];
  char v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  __int128 v139;
  __int128 v140;
  void *v141[2];
  uint64_t v142;
  void *__p;
  void *v144;
  _QWORD *v145;
  void *v146;
  void *v147;
  _QWORD *v148;
  void *v149;
  void *v150;
  _QWORD *v151;
  __n128 v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  char **v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  _QWORD *v162;
  _QWORD v163[3];
  _QWORD *v164;
  _BYTE v165[24];
  _BYTE *v166;
  _BYTE v167[24];
  _BYTE *v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  uint64_t v172[4];
  void **Scalar;
  void **v174;
  uint64_t v175;
  uint64_t v176;
  char **v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v162 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v174 = (void **)(v9 + 16);
  v175 = (uint64_t)(v9 + 16);
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = (void **)v9;
  v169 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 1, &v161);
  MIL::IRParameter::Make(&v161, v172);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "indices", v172);
  v10 = v172[0];
  v172[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v12 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (Scalar)
  {
    v174 = Scalar;
    operator delete(Scalar);
  }
  v14 = v162;
  v172[0] = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)v172, 1, &v160);
  MIL::IRParameter::Make(&v160, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[20],std::unique_ptr<MIL::IRParameter>>(v14, "one_hot_vector_size", (uint64_t *)&Scalar);
  v15 = Scalar;
  Scalar = 0;
  if (v15)
    (*((void (**)(void **))*v15 + 1))(v15);
  v16 = (std::__shared_weak_count *)v160.n128_u64[1];
  if (v160.n128_u64[1])
  {
    v17 = (unint64_t *)(v160.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v162;
  v172[0] = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)v172, 1, &v159);
  MIL::IRParameter::Make(&v159, (uint64_t *)&Scalar);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "axis", (uint64_t *)&Scalar);
  v21 = Scalar;
  Scalar = 0;
  if (v21)
    (*((void (**)(void **))*v21 + 1))(v21);
  v22 = (std::__shared_weak_count *)v159.n128_u64[1];
  if (v159.n128_u64[1])
  {
    v23 = (unint64_t *)(v159.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 48))(*((_QWORD *)v20 + 5), 1);
  v25 = v162;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v174 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  v175 = MIL::IRTensorValueType::MakeScalar(a1, 11);
  v176 = MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v158);
  MIL::IRParameter::Make(&v158, v172);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v25, "on_value", v172);
  v27 = v172[0];
  v172[0] = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v29 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v162;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v174 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  v175 = MIL::IRTensorValueType::MakeScalar(a1, 11);
  v176 = MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v157);
  MIL::IRParameter::Make(&v157, v172);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v31, "off_value", v172);
  v33 = v172[0];
  v172[0] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v35 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v156 = 0;
  v37 = operator new();
  *(_QWORD *)v37 = 0;
  *(_QWORD *)(v37 + 8) = 0;
  *(_QWORD *)(v37 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v156, (void **)v37);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v156, 1uLL);
  v38 = v156;
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(0x10uLL);
  v170 = v41 + 2;
  v171 = v41 + 2;
  *v41 = v39;
  v41[1] = v40;
  v169 = v41;
  v172[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v169);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(0x10uLL);
  v150 = v44 + 2;
  v151 = v44 + 2;
  *v44 = v42;
  v44[1] = v43;
  v149 = v44;
  v172[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v149);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(0x10uLL);
  v147 = v47 + 2;
  v148 = v47 + 2;
  *v47 = v45;
  v47[1] = v46;
  v146 = v47;
  v172[2] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v146);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(0x10uLL);
  v144 = v50 + 2;
  v145 = v50 + 2;
  *v50 = v48;
  v50[1] = v49;
  __p = v50;
  v172[3] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)v172, 4, &v152);
  MIL::IRParameter::Make(&v152, &v153);
  v51 = v153;
  v154 = v153;
  if (v153)
  {
    v52 = (_QWORD *)operator new();
    v53 = v153;
    *v52 = &unk_1EA99F888;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  v155 = v52;
  v153 = 0;
  v54 = v38[2];
  v55 = v38[1];
  if (v55 >= v54)
  {
    v57 = (v55 - *v38) >> 4;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v59 = v54 - *v38;
    if (v59 >> 3 > v58)
      v58 = v59 >> 3;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
      v60 = 0xFFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    v177 = v38 + 2;
    v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v38 + 2), v60);
    v63 = (uint64_t *)&v61[16 * v57];
    *v63 = v51;
    v63[1] = (uint64_t)v52;
    v154 = 0;
    v155 = 0;
    v65 = *v38;
    v64 = v38[1];
    if (v64 == *v38)
    {
      v68 = (void **)v38[1];
      v66 = &v61[16 * v57];
    }
    else
    {
      v66 = &v61[16 * v57];
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v64 -= 16;
        *((_OWORD *)v66 - 1) = v67;
        v66 -= 16;
        *(_QWORD *)v64 = 0;
        *((_QWORD *)v64 + 1) = 0;
      }
      while (v64 != v65);
      v68 = (void **)*v38;
      v64 = v38[1];
    }
    v56 = (char *)(v63 + 2);
    *v38 = v66;
    Scalar = v68;
    v174 = v68;
    v38[1] = (char *)(v63 + 2);
    v175 = (uint64_t)v64;
    v69 = v38[2];
    v38[2] = &v61[16 * v62];
    v176 = (uint64_t)v69;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v55 = v51;
    *((_QWORD *)v55 + 1) = v52;
    v56 = v55 + 16;
    v154 = 0;
    v155 = 0;
  }
  v38[1] = v56;
  v70 = v153;
  v153 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v72 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (__p)
  {
    v144 = __p;
    operator delete(__p);
  }
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  *(_OWORD *)v141 = *(_OWORD *)a2;
  v142 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v74 = (uint64_t)v162;
  *(_QWORD *)&v140 = v162;
  if (v162)
  {
    v75 = (_QWORD *)operator new();
    *v75 = &unk_1EA99F8E8;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = v74;
  }
  else
  {
    v75 = 0;
  }
  *((_QWORD *)&v140 + 1) = v75;
  v162 = 0;
  *(_QWORD *)&v139 = v156;
  if (v156)
  {
    v76 = (_QWORD *)operator new();
    v77 = v156;
    *v76 = &unk_1EA99F948;
    v76[1] = 0;
    v76[2] = 0;
    v76[3] = v77;
  }
  else
  {
    v76 = 0;
  }
  *((_QWORD *)&v139 + 1) = v76;
  v156 = 0;
  v168 = 0;
  v166 = 0;
  MIL::IROperator::Make((__int128 *)v141, &v140, &v139, (uint64_t)v167, (uint64_t)v165, a3);
  v78 = v166;
  if (v166 == v165)
  {
    v79 = 4;
    v78 = v165;
  }
  else
  {
    if (!v166)
      goto LABEL_81;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_81:
  v80 = v168;
  if (v168 == v167)
  {
    v81 = 4;
    v80 = v167;
    goto LABEL_85;
  }
  if (v168)
  {
    v81 = 5;
LABEL_85:
    (*(void (**)(void))(*v80 + 8 * v81))();
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (SHIBYTE(v142) < 0)
    operator delete(v141[0]);
  v88 = *a3;
  v163[0] = &off_1EA99FBD8;
  v163[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceOneHot;
  v164 = v163;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v88 + 200))(v88, v163);
  v89 = v164;
  if (v164 == v163)
  {
    v90 = 4;
    v89 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_103;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_103:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v91 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v135, "on_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v135, 0, v172);
  v137 = v172[0];
  if (v172[0])
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = v172[0];
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = (std::__shared_weak_count_vtbl *)v93;
  }
  else
  {
    v92 = 0;
  }
  v138 = v92;
  v172[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v133, "T");
  (*((void (**)(void **, uint64_t *, void **))*v91 + 3))(v91, &v137, v133);
  if (v134 < 0)
    operator delete(v133[0]);
  v94 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v96 = __ldaxr(p_shared_owners);
    while (__stlxr(v96 - 1, p_shared_owners));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v172[0];
  v172[0] = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  if (v136 < 0)
    operator delete(v135[0]);
  v98 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v129, "off_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, v172);
  v131 = v172[0];
  if (v172[0])
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = v172[0];
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v132 = v99;
  v172[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*((void (**)(void **, uint64_t *, void **))*v98 + 3))(v98, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v101 = v132;
  if (v132)
  {
    v102 = (unint64_t *)&v132->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v172[0];
  v172[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v130 < 0)
    operator delete(v129[0]);
  v105 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, v172);
  v125 = v172[0];
  if (v172[0])
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v172[0];
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v126 = v106;
  v172[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*((void (**)(void **, uint64_t *, void **))*v105 + 3))(v105, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v108 = v126;
  if (v126)
  {
    v109 = (unint64_t *)&v126->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v172[0];
  v172[0] = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = *a3;
  v121 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v122 = v113;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v112 + 56))(v112, &v121);
  v115 = v122;
  if (v122)
  {
    v116 = (unint64_t *)&v122->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(void **))*v118 + 1))(v118);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v156, 0);
  result = (uint64_t)v162;
  if (v162)
  {
    v120 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v162);
    return MEMORY[0x1E0C023A0](v120, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07BA1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void **a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;

  v68 = *(_QWORD *)(v66 - 112);
  *(_QWORD *)(v66 - 112) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = *v65;
  *v65 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a65, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Pad::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char **v38;
  uint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  std::__shared_weak_count_vtbl *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  char *v60;
  char *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  char **v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  uint64_t i;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count_vtbl *v146;
  uint64_t result;
  uint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  void *v151[2];
  char v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  void *v155;
  std::__shared_weak_count *v156;
  void *v157[2];
  char v158;
  void *v159[2];
  char v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  void *v163[2];
  char v164;
  void *v165[2];
  char v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  void *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  void *v177[2];
  char v178;
  std::__shared_weak_count_vtbl *v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  void *v183[2];
  char v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  __int128 v187;
  __int128 v188;
  void *v189[2];
  uint64_t v190;
  __n128 v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  char **v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  _QWORD *v200;
  void *__p;
  uint64_t v202;
  char *v203;
  _QWORD v204[3];
  _QWORD v205[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v208;
  _QWORD v209[3];
  _QWORD *v210;
  _BYTE v211[24];
  _BYTE *v212;
  _QWORD v213[3];
  _QWORD *v214;
  std::__shared_weak_count_vtbl *v215;
  uint64_t v216;
  void (__cdecl **v217)(std::__shared_weak_count *__hidden);
  _QWORD v218[3];

  v218[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v200 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v203 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  __p = v9;
  v202 = (uint64_t)(v9 + 16);
  v215 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v12->__on_zero_shared;
  v208 = &v12->__on_zero_shared;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  Scalar = v12;
  v216 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v215, 2, &v199);
  MIL::IRParameter::Make(&v199, &v193);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v193);
  v13 = v193;
  v193 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v199.n128_u64[1];
  if (v199.n128_u64[1])
  {
    v15 = (unint64_t *)(v199.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v202 = (uint64_t)__p;
    operator delete(__p);
  }
  v17 = v200;
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (char *)operator new(0x10uLL);
  v203 = v20 + 16;
  *(_QWORD *)v20 = v18;
  *((_QWORD *)v20 + 1) = v19;
  __p = v20;
  v202 = (uint64_t)(v20 + 16);
  v215 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v215, 1, &v198);
  MIL::IRParameter::Make(&v198, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v17, "pad", (uint64_t *)&Scalar);
  v21 = Scalar;
  Scalar = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v198.n128_u64[1];
  if (v198.n128_u64[1])
  {
    v23 = (unint64_t *)(v198.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v202 = (uint64_t)__p;
    operator delete(__p);
  }
  v25 = v200;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v197);
  MIL::IRParameter::Make(&v197, (uint64_t *)&__p);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v25, "mode", (uint64_t *)&__p);
  v27 = __p;
  __p = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v29 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v200;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v202 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v196);
  MIL::IRParameter::Make(&v196, (uint64_t *)&Scalar);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v31, "constant_val", (uint64_t *)&Scalar);
  v33 = Scalar;
  Scalar = 0;
  if (v33)
    (*((void (**)(std::__shared_weak_count_vtbl *))v33->~__shared_weak_count + 1))(v33);
  v34 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v35 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v195 = 0;
  v37 = operator new();
  *(_QWORD *)v37 = 0;
  *(_QWORD *)(v37 + 8) = 0;
  *(_QWORD *)(v37 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, (void **)v37);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v195, 1uLL);
  v38 = v195;
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v40;
  v40->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v40->~__shared_weak_count_0;
  v208 = &v40->~__shared_weak_count_0;
  v218[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v215 = v42;
  v42->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
  v216 = (uint64_t)&v42->~__shared_weak_count_0;
  v217 = &v42->~__shared_weak_count_0;
  v218[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v215);
  MIL::IRParameter::MakeTypeSet((uint64_t)v218, 2, &v191);
  MIL::IRParameter::Make(&v191, &v192);
  v43 = v192;
  v193 = v192;
  if (v192)
  {
    v44 = (_QWORD *)operator new();
    v45 = v192;
    *v44 = &unk_1EA99F888;
    v44[1] = 0;
    v44[2] = 0;
    v44[3] = v45;
  }
  else
  {
    v44 = 0;
  }
  v194 = v44;
  v192 = 0;
  v46 = v38[2];
  v47 = v38[1];
  if (v47 >= v46)
  {
    v49 = (v47 - *v38) >> 4;
    v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v51 = v46 - *v38;
    if (v51 >> 3 > v50)
      v50 = v51 >> 3;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
      v52 = 0xFFFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    v204[1] = v38 + 2;
    v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v38 + 2), v52);
    v55 = (uint64_t *)&v53[16 * v49];
    *v55 = v43;
    v55[1] = (uint64_t)v44;
    v193 = 0;
    v194 = 0;
    v57 = *v38;
    v56 = v38[1];
    if (v56 == *v38)
    {
      v60 = v38[1];
      v58 = &v53[16 * v49];
    }
    else
    {
      v58 = &v53[16 * v49];
      do
      {
        v59 = *((_OWORD *)v56 - 1);
        v56 -= 16;
        *((_OWORD *)v58 - 1) = v59;
        v58 -= 16;
        *(_QWORD *)v56 = 0;
        *((_QWORD *)v56 + 1) = 0;
      }
      while (v56 != v57);
      v60 = *v38;
      v56 = v38[1];
    }
    v48 = (char *)(v55 + 2);
    *v38 = v58;
    v202 = (uint64_t)v60;
    v38[1] = (char *)(v55 + 2);
    v203 = v56;
    v61 = v38[2];
    v38[2] = &v53[16 * v54];
    v204[0] = v61;
    __p = v60;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v47 = v43;
    *((_QWORD *)v47 + 1) = v44;
    v48 = v47 + 16;
    v193 = 0;
    v194 = 0;
  }
  v38[1] = v48;
  v62 = v192;
  v192 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v191.n128_u64[1];
  if (v191.n128_u64[1])
  {
    v64 = (unint64_t *)(v191.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v215)
  {
    v216 = (uint64_t)v215;
    operator delete(v215);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v189 = *(_OWORD *)a2;
  v190 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v66 = (uint64_t)v200;
  *(_QWORD *)&v188 = v200;
  if (v200)
  {
    v67 = (_QWORD *)operator new();
    *v67 = &unk_1EA99F8E8;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v66;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v188 + 1) = v67;
  v200 = 0;
  *(_QWORD *)&v187 = v195;
  if (v195)
  {
    v68 = (_QWORD *)operator new();
    v69 = v195;
    *v68 = &unk_1EA99F948;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v69;
  }
  else
  {
    v68 = 0;
  }
  *((_QWORD *)&v187 + 1) = v68;
  v195 = 0;
  v213[0] = &unk_1EA99FAC8;
  v213[1] = MIL::Operators::Common::ios15::CustomValidators::ValidatePad;
  v214 = v213;
  v212 = 0;
  MIL::IROperator::Make((__int128 *)v189, &v188, &v187, (uint64_t)v213, (uint64_t)v211, a3);
  v70 = v212;
  if (v212 == v211)
  {
    v71 = 4;
    v70 = v211;
  }
  else
  {
    if (!v212)
      goto LABEL_74;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_74:
  v72 = v214;
  if (v214 == v213)
  {
    v73 = 4;
    v72 = v213;
    goto LABEL_78;
  }
  if (v214)
  {
    v73 = 5;
LABEL_78:
    (*(void (**)(void))(*v72 + 8 * v73))();
  }
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v75 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
  if (*((_QWORD *)&v188 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (SHIBYTE(v190) < 0)
    operator delete(v189[0]);
  v80 = *a3;
  v209[0] = &off_1EA99FBD8;
  v209[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferencePad;
  v210 = v209;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v80 + 200))(v80, v209);
  v81 = v210;
  if (v210 == v209)
  {
    v82 = 4;
    v81 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_96;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_96:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v83 = __p;
  std::string::basic_string[abi:ne180100]<0>(v183, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v183, 0, (uint64_t *)&Scalar);
  v185 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v186 = v84;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v181, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v83 + 24))(v83, &v185, v181);
  if (v182 < 0)
    operator delete(v181[0]);
  v86 = v186;
  if (v186)
  {
    p_shared_owners = (unint64_t *)&v186->__shared_owners_;
    do
      v88 = __ldaxr(p_shared_owners);
    while (__stlxr(v88 - 1, p_shared_owners));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v184 < 0)
    operator delete(v183[0]);
  v90 = __p;
  std::string::basic_string[abi:ne180100]<0>(v177, "constant_val");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v177, 0, (uint64_t *)&Scalar);
  v179 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v180 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v175, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v90 + 24))(v90, &v179, v175);
  if (v176 < 0)
    operator delete(v175[0]);
  v93 = v180;
  if (v180)
  {
    v94 = (unint64_t *)&v180->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v178 < 0)
    operator delete(v177[0]);
  v97 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v173 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v174 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v97 + 24))(v97, &v173, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v100 = v174;
  if (v174)
  {
    v101 = (unint64_t *)&v174->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v169 = __p;
  if (__p)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = (std::__shared_weak_count_vtbl *)__p;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v170 = v105;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v104 + 56))(v104, &v169);
  v107 = v170;
  if (v170)
  {
    v108 = (unint64_t *)&v170->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = __p;
  __p = 0;
  if (v110)
    (*(void (**)(void *))(*(_QWORD *)v110 + 8))(v110);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v111 = __p;
  std::string::basic_string[abi:ne180100]<0>(v165, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v165, 0, (uint64_t *)&Scalar);
  v167 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v168 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v163, "D_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v111 + 24))(v111, &v167, 0, v163);
  if (v164 < 0)
    operator delete(v163[0]);
  v114 = v168;
  if (v168)
  {
    v115 = (unint64_t *)&v168->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v166 < 0)
    operator delete(v165[0]);
  v118 = __p;
  std::string::basic_string[abi:ne180100]<0>(v159, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v159, 0, (uint64_t *)&Scalar);
  v161 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v162 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v157, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v118 + 24))(v118, &v161, 0, v157);
  if (v158 < 0)
    operator delete(v157[0]);
  v121 = v162;
  if (v162)
  {
    v122 = (unint64_t *)&v162->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v160 < 0)
    operator delete(v159[0]);
  v125 = *a3;
  v155 = __p;
  if (__p)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)__p;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v156 = v126;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v125 + 56))(v125, &v155);
  v128 = v156;
  if (v156)
  {
    v129 = (unint64_t *)&v156->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = __p;
  __p = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v215);
  v132 = v215;
  std::string::basic_string[abi:ne180100]<0>(v151, "mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v151, 0, &v193);
  v153 = v193;
  if (v193)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v193;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v154 = v133;
  v193 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "constant");
  std::string::basic_string[abi:ne180100]<0>(v204, "reflect");
  std::string::basic_string[abi:ne180100]<0>(v205, "replicate");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 3);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v132->~__shared_weak_count
   + 3))(v132, &v153, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v205[i + 2]) < 0)
      operator delete((void *)v205[i]);
  }
  v136 = v154;
  if (v154)
  {
    v137 = (unint64_t *)&v154->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v193;
  v193 = 0;
  if (v139)
    (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
  if (v152 < 0)
    operator delete(v151[0]);
  v140 = *a3;
  v149 = v215;
  if (v215)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = v215;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v150 = v141;
  v215 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v140 + 56))(v140, &v149);
  v143 = v150;
  if (v150)
  {
    v144 = (unint64_t *)&v150->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v215;
  v215 = 0;
  if (v146)
    (*((void (**)(std::__shared_weak_count_vtbl *))v146->~__shared_weak_count + 1))(v146);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, 0);
  result = (uint64_t)v200;
  if (v200)
  {
    v148 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v200);
    return MEMORY[0x1E0C023A0](v148, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07BB798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void **a69;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;

  v72 = *(_QWORD *)(v70 - 112);
  *(_QWORD *)(v70 - 112) = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = *v69;
  *v69 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x228], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Range1D::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  void **v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void **v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  uint64_t v75;
  void **v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  void **v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  void **v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void **v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void **v103;
  uint64_t result;
  uint64_t v105;
  void **v106;
  std::__shared_weak_count *v107;
  void *v108[2];
  char v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  void *v114[2];
  char v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124[2];
  char v125;
  void *v126[2];
  char v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  __int128 v130;
  __int128 v131;
  void *v132[2];
  uint64_t v133;
  void *__p;
  void *v135;
  _QWORD *v136;
  void *v137;
  void *v138;
  _QWORD *v139;
  void *v140;
  void *v141;
  _QWORD *v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  char **v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  _QWORD *v151;
  _QWORD v152[3];
  _QWORD *v153;
  _BYTE v154[24];
  _BYTE *v155;
  _BYTE v156[24];
  _BYTE *v157;
  uint64_t v158[3];
  void **Scalar;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char **v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v151 = (_QWORD *)v6;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 11);
  v160 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v161 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v150);
  MIL::IRParameter::Make(&v150, v158);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "start", v158);
  v7 = v158[0];
  v158[0] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (std::__shared_weak_count *)v150.n128_u64[1];
  if (v150.n128_u64[1])
  {
    v9 = (unint64_t *)(v150.n128_u64[1] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v151;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 11);
  v160 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v161 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v149);
  MIL::IRParameter::Make(&v149, v158);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v11, "end", v158);
  v12 = v158[0];
  v158[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v14 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v151;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 11);
  v160 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v161 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v148);
  MIL::IRParameter::Make(&v148, v158);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v16, "step", v158);
  v17 = v158[0];
  v158[0] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v19 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v147 = 0;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, (void **)v21);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v147, 1uLL);
  v22 = v147;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v140 = v24;
  *v24 = v23;
  v141 = v24 + 1;
  v142 = v24 + 1;
  v158[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v140);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v137 = v26;
  *v26 = v25;
  v138 = v26 + 1;
  v139 = v26 + 1;
  v158[1] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v137);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  __p = v28;
  *v28 = v27;
  v135 = v28 + 1;
  v136 = v28 + 1;
  v158[2] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)v158, 3, &v143);
  MIL::IRParameter::Make(&v143, &v144);
  v29 = v144;
  v145 = v144;
  if (v144)
  {
    v30 = (_QWORD *)operator new();
    v31 = v144;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v146 = v30;
  v144 = 0;
  v32 = v22[2];
  v33 = v22[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v22) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v22;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v163 = v22 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v22 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v145 = 0;
    v146 = 0;
    v43 = *v22;
    v42 = v22[1];
    if (v42 == *v22)
    {
      v46 = (void **)v22[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = (void **)*v22;
      v42 = v22[1];
    }
    v34 = (char *)(v41 + 2);
    *v22 = v44;
    Scalar = v46;
    v160 = (uint64_t)v46;
    v22[1] = (char *)(v41 + 2);
    v161 = (uint64_t)v42;
    v47 = v22[2];
    v22[2] = &v39[16 * v40];
    v162 = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v145 = 0;
    v146 = 0;
  }
  v22[1] = v34;
  v48 = v144;
  v144 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v143.n128_u64[1];
  if (v143.n128_u64[1])
  {
    v50 = (unint64_t *)(v143.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (__p)
  {
    v135 = __p;
    operator delete(__p);
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  if (v140)
  {
    v141 = v140;
    operator delete(v140);
  }
  *(_OWORD *)v132 = *(_OWORD *)a2;
  v133 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = (uint64_t)v151;
  *(_QWORD *)&v131 = v151;
  if (v151)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v131 + 1) = v53;
  v151 = 0;
  *(_QWORD *)&v130 = v147;
  if (v147)
  {
    v54 = (_QWORD *)operator new();
    v55 = v147;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v130 + 1) = v54;
  v147 = 0;
  v157 = 0;
  v155 = 0;
  MIL::IROperator::Make((__int128 *)v132, &v131, &v130, (uint64_t)v156, (uint64_t)v154, a3);
  v56 = v155;
  if (v155 == v154)
  {
    v57 = 4;
    v56 = v154;
  }
  else
  {
    if (!v155)
      goto LABEL_63;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_63:
  v58 = v157;
  if (v157 == v156)
  {
    v59 = 4;
    v58 = v156;
    goto LABEL_67;
  }
  if (v157)
  {
    v59 = 5;
LABEL_67:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
  if (*((_QWORD *)&v130 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v133) < 0)
    operator delete(v132[0]);
  v66 = *a3;
  v152[0] = &off_1EA99FBD8;
  v152[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRange1D;
  v153 = v152;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v66 + 200))(v66, v152);
  v67 = v153;
  if (v153 == v152)
  {
    v68 = 4;
    v67 = v152;
  }
  else
  {
    if (!v153)
      goto LABEL_85;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_85:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v69 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v126, "start");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v126, 0, v158);
  v128 = v158[0];
  if (v158[0])
  {
    v70 = (std::__shared_weak_count *)operator new();
    v71 = v158[0];
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = (std::__shared_weak_count_vtbl *)v71;
  }
  else
  {
    v70 = 0;
  }
  v129 = v70;
  v158[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v124, "T");
  (*((void (**)(void **, uint64_t *, void **))*v69 + 3))(v69, &v128, v124);
  if (v125 < 0)
    operator delete(v124[0]);
  v72 = v129;
  if (v129)
  {
    p_shared_owners = (unint64_t *)&v129->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v158[0];
  v158[0] = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  if (v127 < 0)
    operator delete(v126[0]);
  v76 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v120, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v120, 0, v158);
  v122 = v158[0];
  if (v158[0])
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = v158[0];
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = (std::__shared_weak_count_vtbl *)v78;
  }
  else
  {
    v77 = 0;
  }
  v123 = v77;
  v158[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v118, "T");
  (*((void (**)(void **, uint64_t *, void **))*v76 + 3))(v76, &v122, v118);
  if (v119 < 0)
    operator delete(v118[0]);
  v79 = v123;
  if (v123)
  {
    v80 = (unint64_t *)&v123->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v158[0];
  v158[0] = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  if (v121 < 0)
    operator delete(v120[0]);
  v83 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v114, "step");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v114, 0, v158);
  v116 = v158[0];
  if (v158[0])
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v158[0];
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = (std::__shared_weak_count_vtbl *)v85;
  }
  else
  {
    v84 = 0;
  }
  v117 = v84;
  v158[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*((void (**)(void **, uint64_t *, void **))*v83 + 3))(v83, &v116, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v86 = v117;
  if (v117)
  {
    v87 = (unint64_t *)&v117->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v158[0];
  v158[0] = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  if (v115 < 0)
    operator delete(v114[0]);
  v90 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, v158);
  v110 = v158[0];
  if (v158[0])
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v158[0];
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v111 = v91;
  v158[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v108, "T");
  (*((void (**)(void **, uint64_t *, void **))*v90 + 3))(v90, &v110, v108);
  if (v109 < 0)
    operator delete(v108[0]);
  v93 = v111;
  if (v111)
  {
    v94 = (unint64_t *)&v111->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v158[0];
  v158[0] = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = *a3;
  v106 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v107 = v98;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v97 + 56))(v97, &v106);
  v100 = v107;
  if (v107)
  {
    v101 = (unint64_t *)&v107->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(void **))*v103 + 1))(v103);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  result = (uint64_t)v151;
  if (v151)
  {
    v105 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v151);
    return MEMORY[0x1E0C023A0](v105, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07BC97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void **a62)
{
  uint64_t *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;

  v65 = *(_QWORD *)(v63 - 112);
  *(_QWORD *)(v63 - 112) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *v62;
  *v62 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 240), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Shape::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  void ***v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  unint64_t v30;
  void **v31;
  void **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  void **v40;
  void **v41;
  char *v42;
  __int128 v43;
  void **v44;
  uint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void **v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  void **v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void **v83;
  void **v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void **v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void **v104;
  uint64_t result;
  uint64_t v106;
  void **v107;
  std::__shared_weak_count *v108;
  void *v109[2];
  char v110;
  void *v111;
  std::__shared_weak_count *v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  void *v117;
  std::__shared_weak_count *v118;
  void **v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  __int128 v127;
  __int128 v128;
  void *v129[2];
  uint64_t v130;
  __n128 v131;
  void *__p;
  void *v133;
  _QWORD *v134;
  void *v135;
  void *v136;
  _QWORD *v137;
  void *v138;
  void *v139;
  _QWORD *v140;
  void *v141;
  void *v142;
  _QWORD *v143;
  __n128 v144;
  uint64_t v145;
  _QWORD v146[3];
  _QWORD *v147;
  _QWORD v148[3];
  _QWORD *v149;
  _BYTE v150[24];
  _BYTE *v151;
  _BYTE v152[24];
  _BYTE *v153;
  uint64_t v154;
  void **v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v145 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = operator new(0x10uLL);
  v142 = v9 + 2;
  v143 = v9 + 2;
  *v9 = v7;
  v9[1] = v8;
  v141 = v9;
  v155 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v141);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v139 = v12 + 2;
  v140 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v138 = v12;
  v156 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v138);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v136 = v15 + 2;
  v137 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v135 = v15;
  v157 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v135);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v133 = v18 + 2;
  v134 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  __p = v18;
  v158 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v155, 4, &v144);
  MIL::IRParameter::Make(&v144, &v154);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v154);
  v19 = v154;
  v154 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v21 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v133 = __p;
    operator delete(__p);
  }
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  v135 = 0;
  v23 = operator new();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  v155 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v135, (void **)v23);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v155, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v135, 1uLL);
  v24 = (void ***)v135;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v141 = v26;
  *v26 = v25;
  v142 = v26 + 1;
  v143 = v26 + 1;
  v154 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v141);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v154, 1, &v131);
  MIL::IRParameter::Make(&v131, (uint64_t *)&__p);
  v27 = __p;
  v138 = __p;
  if (__p)
  {
    v28 = (_QWORD *)operator new();
    v29 = __p;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v139 = v28;
  __p = 0;
  v30 = (unint64_t)v24[2];
  v31 = v24[1];
  if ((unint64_t)v31 >= v30)
  {
    v33 = ((char *)v31 - (char *)*v24) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - (_QWORD)*v24;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v159 = v24 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v24 + 2), v36);
    v39 = &v37[16 * v33];
    *(_QWORD *)v39 = v27;
    *((_QWORD *)v39 + 1) = v28;
    v138 = 0;
    v139 = 0;
    v41 = *v24;
    v40 = v24[1];
    if (v40 == *v24)
    {
      v44 = v24[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 2;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *v40 = 0;
        v40[1] = 0;
      }
      while (v40 != v41);
      v44 = *v24;
      v40 = v24[1];
    }
    v32 = (void **)(v39 + 16);
    *v24 = (void **)v42;
    v155 = v44;
    v156 = (uint64_t)v44;
    v24[1] = (void **)(v39 + 16);
    v157 = (uint64_t)v40;
    v45 = (uint64_t)v24[2];
    v24[2] = (void **)&v37[16 * v38];
    v158 = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v155);
  }
  else
  {
    *v31 = v27;
    v31[1] = v28;
    v32 = v31 + 2;
    v138 = 0;
    v139 = 0;
  }
  v24[1] = v32;
  v46 = __p;
  __p = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v131.n128_u64[1];
  if (v131.n128_u64[1])
  {
    v48 = (unint64_t *)(v131.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  *(_OWORD *)v129 = *(_OWORD *)a2;
  v130 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = v145;
  *(_QWORD *)&v128 = v145;
  if (v145)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v128 + 1) = v51;
  v145 = 0;
  *(_QWORD *)&v127 = v135;
  if (v135)
  {
    v52 = (_QWORD *)operator new();
    v53 = v135;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v127 + 1) = v52;
  v135 = 0;
  v153 = 0;
  v151 = 0;
  MIL::IROperator::Make((__int128 *)v129, &v128, &v127, (uint64_t)v152, (uint64_t)v150, a3);
  v54 = v151;
  if (v151 == v150)
  {
    v55 = 4;
    v54 = v150;
  }
  else
  {
    if (!v151)
      goto LABEL_53;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_53:
  v56 = v153;
  if (v153 == v152)
  {
    v57 = 4;
    v56 = v152;
    goto LABEL_57;
  }
  if (v153)
  {
    v57 = 5;
LABEL_57:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v130) < 0)
    operator delete(v129[0]);
  v64 = *a3;
  v148[0] = &off_1EA99FBD8;
  v148[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceShape;
  v149 = v148;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v64 + 200))(v64, v148);
  v65 = v149;
  if (v149 == v148)
  {
    v66 = 4;
    v65 = v148;
  }
  else
  {
    if (!v149)
      goto LABEL_75;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_75:
  v67 = *a3;
  v146[0] = &off_1EA9A00F8;
  v146[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceShape;
  v147 = v146;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v67 + 216))(v67, v146);
  v68 = v147;
  if (v147 == v146)
  {
    v69 = 4;
    v68 = v146;
  }
  else
  {
    if (!v147)
      goto LABEL_80;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v155);
  v70 = v155;
  std::string::basic_string[abi:ne180100]<0>(v123, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v123, 0, (uint64_t *)&v141);
  v125 = v141;
  if (v141)
  {
    v71 = (std::__shared_weak_count *)operator new();
    v72 = (std::__shared_weak_count_vtbl *)v141;
    v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71[1].__vftable = v72;
  }
  else
  {
    v71 = 0;
  }
  v126 = v71;
  v141 = 0;
  std::string::basic_string[abi:ne180100]<0>(v121, "T");
  (*((void (**)(void **, void **, void **))*v70 + 3))(v70, &v125, v121);
  if (v122 < 0)
    operator delete(v121[0]);
  v73 = v126;
  if (v126)
  {
    p_shared_owners = (unint64_t *)&v126->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v141;
  v141 = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  if (v124 < 0)
    operator delete(v123[0]);
  v77 = *a3;
  v119 = v155;
  if (v155)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v79 = v155;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)v79;
  }
  else
  {
    v78 = 0;
  }
  v120 = v78;
  v155 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v77 + 56))(v77, &v119);
  v80 = v120;
  if (v120)
  {
    v81 = (unint64_t *)&v120->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v155;
  v155 = 0;
  if (v83)
    (*((void (**)(void **))*v83 + 1))(v83);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v155);
  v84 = v155;
  std::string::basic_string[abi:ne180100]<0>(v115, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v115, 0, (uint64_t *)&v141);
  v117 = v141;
  if (v141)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = (std::__shared_weak_count_vtbl *)v141;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v118 = v85;
  v141 = 0;
  std::string::basic_string[abi:ne180100]<0>(v113, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v84 + 3))(v84, &v117, 0, v113);
  if (v114 < 0)
    operator delete(v113[0]);
  v87 = v118;
  if (v118)
  {
    v88 = (unint64_t *)&v118->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v141;
  v141 = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  if (v116 < 0)
    operator delete(v115[0]);
  v91 = v155;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v141);
  v111 = v141;
  if (v141)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = (std::__shared_weak_count_vtbl *)v141;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v112 = v92;
  v141 = 0;
  std::string::basic_string[abi:ne180100]<0>(v109, "K");
  (*((void (**)(void **, void **, void **))*v91 + 5))(v91, &v111, v109);
  if (v110 < 0)
    operator delete(v109[0]);
  v94 = v112;
  if (v112)
  {
    v95 = (unint64_t *)&v112->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v141;
  v141 = 0;
  if (v97)
    (*(void (**)(void *))(*(_QWORD *)v97 + 8))(v97);
  v98 = *a3;
  v107 = v155;
  if (v155)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = v155;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v108 = v99;
  v155 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v98 + 56))(v98, &v107);
  v101 = v108;
  if (v108)
  {
    v102 = (unint64_t *)&v108->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v155;
  v155 = 0;
  if (v104)
    (*((void (**)(void **))*v104 + 1))(v104);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v135, 0);
  result = v145;
  if (v145)
  {
    v106 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v145);
    return MEMORY[0x1E0C023A0](v106, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07BD910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48)
{
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;

  v51 = *(_QWORD *)(v49 - 112);
  *(_QWORD *)(v49 - 112) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *v48;
  *v48 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v49 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Tile::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  void **v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void **v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void **v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void **v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void **v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void **v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void **v131;
  uint64_t result;
  uint64_t v133;
  void **v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  void *v138[2];
  char v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  void *v144[2];
  char v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  void **v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  void **v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  void *v162[2];
  char v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  __int128 v166;
  __int128 v167;
  void *v168[2];
  uint64_t v169;
  void *v170;
  void *v171;
  _QWORD *v172;
  __n128 v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  char **v177;
  __n128 v178;
  void *__p;
  void *v180;
  _QWORD *v181;
  void *v182;
  void *v183;
  _QWORD *v184;
  __n128 v185;
  _QWORD *v186;
  _QWORD v187[3];
  _QWORD *v188;
  _BYTE v189[24];
  _BYTE *v190;
  _QWORD v191[3];
  _QWORD *v192;
  std::__shared_weak_count_vtbl *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  void **v200;
  void **v201;
  uint64_t v202;
  uint64_t v203;
  char **v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v186 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v193 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v194 = (uint64_t)&v8->~__shared_weak_count_0;
  v195 = (uint64_t)&v8->~__shared_weak_count_0;
  v200 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v193);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v197 = v10;
  *v10 = v9;
  v198 = v10 + 1;
  v199 = v10 + 1;
  v201 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v197);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v182 = v12;
  *v12 = v11;
  v183 = v12 + 1;
  v184 = v12 + 1;
  v202 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v182);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v180 = v14 + 1;
  v181 = v14 + 1;
  v203 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v200, 4, &v185);
  MIL::IRParameter::Make(&v185, (uint64_t *)&v170);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v170);
  v15 = v170;
  v170 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v17 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v180 = __p;
    operator delete(__p);
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v193)
  {
    v194 = (uint64_t)v193;
    operator delete(v193);
  }
  v19 = v186;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (void **)operator new(8uLL);
  v200 = v21;
  *v21 = (void *)v20;
  v201 = v21 + 1;
  v202 = (uint64_t)(v21 + 1);
  v197 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v200);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v197, 1, &v178);
  MIL::IRParameter::Make(&v178, (uint64_t *)&v193);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "reps", (uint64_t *)&v193);
  v22 = v193;
  v193 = 0;
  if (v22)
    (*((void (**)(std::__shared_weak_count_vtbl *))v22->~__shared_weak_count + 1))(v22);
  v23 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v24 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v177 = 0;
  v26 = operator new();
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v200 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v177, (void **)v26);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v200, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v177, 1uLL);
  v27 = v177;
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v197 = v29;
  *v29 = v28;
  v198 = v29 + 1;
  v199 = v29 + 1;
  v193 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v197);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v182 = v31;
  *v31 = v30;
  v183 = v31 + 1;
  v184 = v31 + 1;
  v194 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v182);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v180 = v33 + 1;
  v181 = v33 + 1;
  v195 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v170 = v35;
  *v35 = v34;
  v171 = v35 + 1;
  v172 = v35 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v170);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v193, 4, &v173);
  MIL::IRParameter::Make(&v173, &v174);
  v36 = v174;
  v175 = v174;
  if (v174)
  {
    v37 = (_QWORD *)operator new();
    v38 = v174;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v176 = v37;
  v174 = 0;
  v39 = v27[2];
  v40 = v27[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v27) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v27;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v204 = v27 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v27 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v175 = 0;
    v176 = 0;
    v50 = *v27;
    v49 = v27[1];
    if (v49 == *v27)
    {
      v53 = (void **)v27[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = (void **)*v27;
      v49 = v27[1];
    }
    v41 = (char *)(v48 + 2);
    *v27 = v51;
    v200 = v53;
    v201 = v53;
    v27[1] = (char *)(v48 + 2);
    v202 = (uint64_t)v49;
    v54 = v27[2];
    v27[2] = &v46[16 * v47];
    v203 = (uint64_t)v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v200);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v175 = 0;
    v176 = 0;
  }
  v27[1] = v41;
  v55 = v174;
  v174 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v173.n128_u64[1];
  if (v173.n128_u64[1])
  {
    v57 = (unint64_t *)(v173.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v170)
  {
    v171 = v170;
    operator delete(v170);
  }
  if (__p)
  {
    v180 = __p;
    operator delete(__p);
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  *(_OWORD *)v168 = *(_OWORD *)a2;
  v169 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v186;
  *(_QWORD *)&v167 = v186;
  if (v186)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v167 + 1) = v60;
  v186 = 0;
  *(_QWORD *)&v166 = v177;
  if (v177)
  {
    v61 = (_QWORD *)operator new();
    v62 = v177;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v166 + 1) = v61;
  v177 = 0;
  v191[0] = &unk_1EA99FAC8;
  v191[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateTile;
  v192 = v191;
  v190 = 0;
  MIL::IROperator::Make((__int128 *)v168, &v167, &v166, (uint64_t)v191, (uint64_t)v189, a3);
  v63 = v190;
  if (v190 == v189)
  {
    v64 = 4;
    v63 = v189;
  }
  else
  {
    if (!v190)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v192;
  if (v192 == v191)
  {
    v66 = 4;
    v65 = v191;
    goto LABEL_72;
  }
  if (v192)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v169) < 0)
    operator delete(v168[0]);
  v73 = *a3;
  v187[0] = &off_1EA99FBD8;
  v187[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceTile;
  v188 = v187;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v187);
  v74 = v188;
  if (v188 == v187)
  {
    v75 = 4;
    v74 = v187;
  }
  else
  {
    if (!v188)
      goto LABEL_90;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_90:
  MIL::Validation::TensorDTypeConstraints::Make(&v200);
  v76 = v200;
  std::string::basic_string[abi:ne180100]<0>(v162, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v162, 0, (uint64_t *)&v193);
  v164 = v193;
  if (v193)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = v193;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v165 = v77;
  v193 = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v76 + 3))(v76, &v164, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v79 = v165;
  if (v165)
  {
    p_shared_owners = (unint64_t *)&v165->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v193;
  v193 = 0;
  if (v82)
    (*((void (**)(std::__shared_weak_count_vtbl *))v82->~__shared_weak_count + 1))(v82);
  if (v163 < 0)
    operator delete(v162[0]);
  v83 = v200;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v193);
  v158 = v193;
  if (v193)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v193;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v159 = v84;
  v193 = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v158, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v86 = v159;
  if (v159)
  {
    v87 = (unint64_t *)&v159->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v193;
  v193 = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  v90 = *a3;
  v154 = v200;
  if (v200)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v200;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v155 = v91;
  v200 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v90 + 56))(v90, &v154);
  v93 = v155;
  if (v155)
  {
    v94 = (unint64_t *)&v155->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v200;
  v200 = 0;
  if (v96)
    (*((void (**)(void **))*v96 + 1))(v96);
  MIL::Validation::TensorRankValueConstraints::Make(&v200);
  v97 = v200;
  std::string::basic_string[abi:ne180100]<0>(v150, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v150, 0, (uint64_t *)&v193);
  v152 = v193;
  if (v193)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v193;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v153 = v98;
  v193 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v97 + 4))(v97, &v152, 1, 0x7FFFFFFFFFFFFFFFLL);
  v100 = v153;
  if (v153)
  {
    v101 = (unint64_t *)&v153->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v193;
  v193 = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  if (v151 < 0)
    operator delete(v150[0]);
  v104 = *a3;
  v148 = v200;
  if (v200)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v200;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v149 = v105;
  v200 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v148);
  v107 = v149;
  if (v149)
  {
    v108 = (unint64_t *)&v149->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v200;
  v200 = 0;
  if (v110)
    (*((void (**)(void **))*v110 + 1))(v110);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v200);
  v111 = v200;
  std::string::basic_string[abi:ne180100]<0>(v144, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v144, 0, (uint64_t *)&v193);
  v146 = v193;
  if (v193)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v193;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v147 = v112;
  v193 = 0;
  std::string::basic_string[abi:ne180100]<0>(v142, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t, void **))*v111 + 4))(v111, &v146, 0, -1, v142);
  if (v143 < 0)
    operator delete(v142[0]);
  v114 = v147;
  if (v147)
  {
    v115 = (unint64_t *)&v147->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v193;
  v193 = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v145 < 0)
    operator delete(v144[0]);
  v118 = v200;
  std::string::basic_string[abi:ne180100]<0>(v138, "reps");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v138, 0, (uint64_t *)&v193);
  v140 = v193;
  if (v193)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = v193;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v141 = v119;
  v193 = 0;
  std::string::basic_string[abi:ne180100]<0>(v136, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v118 + 3))(v118, &v140, 0, v136);
  if (v137 < 0)
    operator delete(v136[0]);
  v121 = v141;
  if (v141)
  {
    v122 = (unint64_t *)&v141->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v193;
  v193 = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v139 < 0)
    operator delete(v138[0]);
  v125 = *a3;
  v134 = v200;
  if (v200)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = v200;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = (std::__shared_weak_count_vtbl *)v127;
  }
  else
  {
    v126 = 0;
  }
  v135 = v126;
  v200 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v125 + 56))(v125, &v134);
  v128 = v135;
  if (v135)
  {
    v129 = (unint64_t *)&v135->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v200;
  v200 = 0;
  if (v131)
    (*((void (**)(void **))*v131 + 1))(v131);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v177, 0);
  result = (uint64_t)v186;
  if (v186)
  {
    v133 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v186);
    return MEMORY[0x1E0C023A0](v133, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07BEC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a64;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;

  v67 = *(_QWORD *)(v65 - 112);
  *(_QWORD *)(v65 - 112) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *v64;
  *v64 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x210], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Topk::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  void **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  void **v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char **v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  void **v63;
  char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  char **v69;
  uint64_t v70;
  std::__shared_weak_count_vtbl *v71;
  void *v72;
  _QWORD *v73;
  void *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  __int128 v88;
  void **v89;
  char *v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  char **v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  void **v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void **v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void **v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count_vtbl *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void **v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  void **v146;
  uint64_t result;
  uint64_t v148;
  void **v149;
  std::__shared_weak_count *v150;
  void *v151[2];
  char v152;
  void *v153[2];
  char v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  void **v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  void *v163[2];
  char v164;
  void *v165[2];
  char v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  __int128 v169;
  __int128 v170;
  void *v171[2];
  uint64_t v172;
  __n128 v173;
  __n128 v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  char **v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  void *__p;
  void *v183;
  _QWORD *v184;
  void *v185;
  void *v186;
  _QWORD *v187;
  __n128 v188;
  _QWORD *v189;
  _QWORD v190[3];
  _QWORD *v191;
  _BYTE v192[24];
  _BYTE *v193;
  _QWORD v194[3];
  _QWORD *v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v201;
  void **v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char **v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v189 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v201 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v202 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v186 = v12 + 2;
  v187 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v185 = v12;
  v203 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v185);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v183 = v15 + 2;
  v184 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v204 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v202, 3, &v188);
  MIL::IRParameter::Make(&v188, (uint64_t *)&v196);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v196);
  v16 = v196;
  v196 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v188.n128_u64[1];
  if (v188.n128_u64[1])
  {
    v18 = (unint64_t *)(v188.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v189;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v181);
  MIL::IRParameter::Make(&v181, (uint64_t *)&v202);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v20, "k", (uint64_t *)&v202);
  v22 = v202;
  v202 = 0;
  if (v22)
    (*((void (**)(void **))*v22 + 1))(v22);
  v23 = (std::__shared_weak_count *)v181.n128_u64[1];
  if (v181.n128_u64[1])
  {
    v24 = (unint64_t *)(v181.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 32))(*((_QWORD *)v21 + 5), 1);
  v26 = v189;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v180);
  MIL::IRParameter::Make(&v180, (uint64_t *)&v202);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v26, "axis", (uint64_t *)&v202);
  v28 = v202;
  v202 = 0;
  if (v28)
    (*((void (**)(void **))*v28 + 1))(v28);
  v29 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    v30 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  v32 = v189;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v179);
  MIL::IRParameter::Make(&v179, (uint64_t *)&v202);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v32, "ascending", (uint64_t *)&v202);
  v34 = v202;
  v202 = 0;
  if (v34)
    (*((void (**)(void **))*v34 + 1))(v34);
  v35 = (std::__shared_weak_count *)v179.n128_u64[1];
  if (v179.n128_u64[1])
  {
    v36 = (unint64_t *)(v179.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v178 = 0;
  v38 = operator new();
  *(_QWORD *)v38 = 0;
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)(v38 + 16) = 0;
  v202 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v178, (void **)v38);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v202, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v178, 2uLL);
  v39 = v178;
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v185 = v41;
  *v41 = v40;
  v186 = v41 + 1;
  v187 = v41 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v185);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  __p = v43;
  *v43 = v42;
  v183 = v43 + 1;
  v184 = v43 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v196 = v45;
  *v45 = v44;
  v197 = v45 + 1;
  v198 = v45 + 1;
  v201 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v196);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v174);
  MIL::IRParameter::Make(&v174, &v175);
  v46 = v175;
  v176 = v175;
  if (v175)
  {
    v47 = (_QWORD *)operator new();
    v48 = v175;
    *v47 = &unk_1EA99F888;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v48;
  }
  else
  {
    v47 = 0;
  }
  v177 = v47;
  v175 = 0;
  v49 = v39[2];
  v50 = v39[1];
  if (v50 >= v49)
  {
    v52 = (v50 - *v39) >> 4;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v54 = v49 - *v39;
    if (v54 >> 3 > v53)
      v53 = v54 >> 3;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
      v55 = 0xFFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    v206 = v39 + 2;
    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v39 + 2), v55);
    v58 = (uint64_t *)&v56[16 * v52];
    *v58 = v46;
    v58[1] = (uint64_t)v47;
    v176 = 0;
    v177 = 0;
    v60 = *v39;
    v59 = v39[1];
    if (v59 == *v39)
    {
      v63 = (void **)v39[1];
      v61 = &v56[16 * v52];
    }
    else
    {
      v61 = &v56[16 * v52];
      do
      {
        v62 = *((_OWORD *)v59 - 1);
        v59 -= 16;
        *((_OWORD *)v61 - 1) = v62;
        v61 -= 16;
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = 0;
      }
      while (v59 != v60);
      v63 = (void **)*v39;
      v59 = v39[1];
    }
    v51 = (char *)(v58 + 2);
    *v39 = v61;
    v202 = v63;
    v203 = (uint64_t)v63;
    v39[1] = (char *)(v58 + 2);
    v204 = (uint64_t)v59;
    v64 = v39[2];
    v39[2] = &v56[16 * v57];
    v205 = v64;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v202);
  }
  else
  {
    *(_QWORD *)v50 = v46;
    *((_QWORD *)v50 + 1) = v47;
    v51 = v50 + 16;
    v176 = 0;
    v177 = 0;
  }
  v39[1] = v51;
  v65 = v175;
  v175 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v67 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  v69 = v178;
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v71;
  v71->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v70;
  p_on_zero_shared = (uint64_t)&v71->~__shared_weak_count_0;
  v201 = (uint64_t)&v71->~__shared_weak_count_0;
  v196 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v196, 1, &v173);
  MIL::IRParameter::Make(&v173, (uint64_t *)&__p);
  v72 = __p;
  v185 = __p;
  if (__p)
  {
    v73 = (_QWORD *)operator new();
    v74 = __p;
    *v73 = &unk_1EA99F888;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = v74;
  }
  else
  {
    v73 = 0;
  }
  v186 = v73;
  __p = 0;
  v75 = v69[2];
  v76 = v69[1];
  if (v76 >= v75)
  {
    v78 = (v76 - *v69) >> 4;
    v79 = v78 + 1;
    if ((unint64_t)(v78 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v80 = v75 - *v69;
    if (v80 >> 3 > v79)
      v79 = v80 >> 3;
    if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
      v81 = 0xFFFFFFFFFFFFFFFLL;
    else
      v81 = v79;
    v206 = v69 + 2;
    v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v69 + 2), v81);
    v84 = &v82[16 * v78];
    *(_QWORD *)v84 = v72;
    *((_QWORD *)v84 + 1) = v73;
    v185 = 0;
    v186 = 0;
    v86 = *v69;
    v85 = v69[1];
    if (v85 == *v69)
    {
      v89 = (void **)v69[1];
      v87 = &v82[16 * v78];
    }
    else
    {
      v87 = &v82[16 * v78];
      do
      {
        v88 = *((_OWORD *)v85 - 1);
        v85 -= 16;
        *((_OWORD *)v87 - 1) = v88;
        v87 -= 16;
        *(_QWORD *)v85 = 0;
        *((_QWORD *)v85 + 1) = 0;
      }
      while (v85 != v86);
      v89 = (void **)*v69;
      v85 = v69[1];
    }
    v77 = v84 + 16;
    *v69 = v87;
    v202 = v89;
    v203 = (uint64_t)v89;
    v69[1] = v84 + 16;
    v204 = (uint64_t)v85;
    v90 = v69[2];
    v69[2] = &v82[16 * v83];
    v205 = v90;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v202);
  }
  else
  {
    *(_QWORD *)v76 = v72;
    *((_QWORD *)v76 + 1) = v73;
    v77 = v76 + 16;
    v185 = 0;
    v186 = 0;
  }
  v69[1] = v77;
  v91 = __p;
  __p = 0;
  if (v91)
    (*(void (**)(void *))(*(_QWORD *)v91 + 8))(v91);
  v92 = (std::__shared_weak_count *)v173.n128_u64[1];
  if (v173.n128_u64[1])
  {
    v93 = (unint64_t *)(v173.n128_u64[1] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v171 = *(_OWORD *)a2;
  v172 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v95 = (uint64_t)v189;
  *(_QWORD *)&v170 = v189;
  if (v189)
  {
    v96 = (_QWORD *)operator new();
    *v96 = &unk_1EA99F8E8;
    v96[1] = 0;
    v96[2] = 0;
    v96[3] = v95;
  }
  else
  {
    v96 = 0;
  }
  *((_QWORD *)&v170 + 1) = v96;
  v189 = 0;
  *(_QWORD *)&v169 = v178;
  if (v178)
  {
    v97 = (_QWORD *)operator new();
    v98 = v178;
    *v97 = &unk_1EA99F948;
    v97[1] = 0;
    v97[2] = 0;
    v97[3] = v98;
  }
  else
  {
    v97 = 0;
  }
  *((_QWORD *)&v169 + 1) = v97;
  v178 = 0;
  v194[0] = &unk_1EA99FAC8;
  v194[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateTopk;
  v195 = v194;
  v193 = 0;
  MIL::IROperator::Make((__int128 *)v171, &v170, &v169, (uint64_t)v194, (uint64_t)v192, a3);
  v99 = v193;
  if (v193 == v192)
  {
    v100 = 4;
    v99 = v192;
  }
  else
  {
    if (!v193)
      goto LABEL_102;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_102:
  v101 = v195;
  if (v195 == v194)
  {
    v102 = 4;
    v101 = v194;
    goto LABEL_106;
  }
  if (v195)
  {
    v102 = 5;
LABEL_106:
    (*(void (**)(void))(*v101 + 8 * v102))();
  }
  v103 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    v104 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if (SHIBYTE(v172) < 0)
    operator delete(v171[0]);
  v109 = *a3;
  v190[0] = &off_1EA99FBD8;
  v190[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceTopk;
  v191 = v190;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v109 + 200))(v109, v190);
  v110 = v191;
  if (v191 == v190)
  {
    v111 = 4;
    v110 = v190;
  }
  else
  {
    if (!v191)
      goto LABEL_124;
    v111 = 5;
  }
  (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_124:
  MIL::Validation::TensorDTypeConstraints::Make(&v202);
  v112 = v202;
  std::string::basic_string[abi:ne180100]<0>(v165, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v165, 0, (uint64_t *)&Scalar);
  v167 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v168 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v163, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v112 + 3))(v112, &v167, v163);
  if (v164 < 0)
    operator delete(v163[0]);
  v115 = v168;
  if (v168)
  {
    p_shared_owners = (unint64_t *)&v168->__shared_owners_;
    do
      v117 = __ldaxr(p_shared_owners);
    while (__stlxr(v117 - 1, p_shared_owners));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(std::__shared_weak_count_vtbl *))v118->~__shared_weak_count + 1))(v118);
  if (v166 < 0)
    operator delete(v165[0]);
  v119 = v202;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v161 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v162 = v120;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v159, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v119 + 3))(v119, &v161, v159);
  if (v160 < 0)
    operator delete(v159[0]);
  v122 = v162;
  if (v162)
  {
    v123 = (unint64_t *)&v162->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  v126 = *a3;
  v157 = v202;
  if (v202)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v202;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  }
  else
  {
    v127 = 0;
  }
  v158 = v127;
  v202 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v126 + 56))(v126, &v157);
  v129 = v158;
  if (v158)
  {
    v130 = (unint64_t *)&v158->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v202;
  v202 = 0;
  if (v132)
    (*((void (**)(void **))*v132 + 1))(v132);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v202);
  v133 = v202;
  std::string::basic_string[abi:ne180100]<0>(v153, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v153, 0, (uint64_t *)&Scalar);
  v155 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v156 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v151, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v133 + 3))(v133, &v155, 0, v151);
  if (v152 < 0)
    operator delete(v151[0]);
  v136 = v156;
  if (v156)
  {
    v137 = (unint64_t *)&v156->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*((void (**)(std::__shared_weak_count_vtbl *))v139->~__shared_weak_count + 1))(v139);
  if (v154 < 0)
    operator delete(v153[0]);
  v140 = *a3;
  v149 = v202;
  if (v202)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = v202;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = (std::__shared_weak_count_vtbl *)v142;
  }
  else
  {
    v141 = 0;
  }
  v150 = v141;
  v202 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v140 + 56))(v140, &v149);
  v143 = v150;
  if (v150)
  {
    v144 = (unint64_t *)&v150->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v202;
  v202 = 0;
  if (v146)
    (*((void (**)(void **))*v146 + 1))(v146);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v178, 0);
  result = (uint64_t)v189;
  if (v189)
  {
    v148 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v189);
    return MEMORY[0x1E0C023A0](v148, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07C0074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;

  v67 = *(_QWORD *)(v65 - 128);
  *(_QWORD *)(v65 - 128) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *v64;
  *v64 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[22],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[22],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E07C0540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[22],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[22],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E07C05D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[22],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E07C0624(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateBatchToSpace(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  MIL::IRValueType *OutputType;
  MIL::IRTensorValueType *v8;
  uint64_t v9;
  MIL::IRValue *ParameterValue;
  uint64_t *v11;
  uint64_t v12;
  MIL::IRDimension ***v13;
  uint64_t v14;
  uint64_t v15;
  int *Data;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD **v33;
  uint64_t v34;
  _QWORD **v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  MIL::IRValue *v40;
  uint64_t *v41;
  uint64_t v42;
  MIL::IRDimension ***v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  unint64_t v48;
  int v49;
  int *v50;
  uint64_t v51;
  int *v52;
  int v53;
  int v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74[2];
  char v75;
  _QWORD v76[2];
  void *v77[2];
  char v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  void *v81[2];
  char v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  void *v85[2];
  char v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  void *__p[2];
  char v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void *v97[2];
  char v98;

  std::string::basic_string[abi:ne180100]<0>(v97, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v98 < 0)
    operator delete(v97[0]);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  v9 = MIL::IRTensorValueType::Rank(v6);
  if (v9 != MIL::IRTensorValueType::Rank(v8))
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v22 = (std::__shared_weak_count *)LocationPtr[1];
    v95 = *LocationPtr;
    v96 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v93, "Input and output tensor shape must have the same rank");
    MIL::ValidationResult::ValidationResult(a2, &v95, 315, v93);
    if (v94 < 0)
      operator delete(v93[0]);
    v25 = v96;
    if (!v96)
      return;
    v26 = (unint64_t *)&v96->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
LABEL_72:
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v97, "block_shape");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  v11 = (uint64_t *)MIL::IRValue::AsTensor(ParameterValue);
  if (v98 < 0)
    operator delete(v97[0]);
  v12 = (*(uint64_t (**)(uint64_t *))(*v11 + 32))(v11);
  v13 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
  v14 = MIL::IRDimension::AsConstant(**v13);
  v15 = MIL::IRTensorValueType::Rank(v6);
  if (v15 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14) + 2)
  {
    v28 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v29 = (std::__shared_weak_count *)v28[1];
    v91 = *v28;
    v92 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Input and output shape must have exactly two more dimensions than the block shape");
    MIL::ValidationResult::ValidationResult(a2, &v91, 315, __p);
    if (v90 < 0)
      operator delete(__p[0]);
    v25 = v92;
    if (!v92)
      return;
    v32 = (unint64_t *)&v92->__shared_owners_;
    do
      v27 = __ldaxr(v32);
    while (__stlxr(v27 - 1, v32));
    goto LABEL_72;
  }
  Data = (int *)MIL::IRTensorValue::GetDataView<int>(v11);
  if (v17)
  {
    v18 = 4 * v17;
    v19 = 1;
    do
    {
      v20 = *Data++;
      v19 *= v20;
      v18 -= 4;
    }
    while (v18);
  }
  else
  {
    v19 = 1;
  }
  v33 = (_QWORD **)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 96))(v6);
  v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v33 + 16))(**v33);
  v35 = (_QWORD **)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v8 + 96))(v8);
  v36 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v35 + 16))(**v35);
  if (v34)
    v37 = v36 == 0;
  else
    v37 = 1;
  if (!v37)
  {
    v38 = v36;
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 48))(v34);
    if (v19 * (*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38) != v39)
    {
      v60 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v61 = (std::__shared_weak_count *)v60[1];
      v87 = *v60;
      v88 = v61;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      std::string::basic_string[abi:ne180100]<0>(v85, "Input batch size must be equal to the output batch size times the total block size");
      MIL::ValidationResult::ValidationResult(a2, &v87, 315, v85);
      if (v86 < 0)
        operator delete(v85[0]);
      v25 = v88;
      if (!v88)
        return;
      v64 = (unint64_t *)&v88->__shared_owners_;
      do
        v27 = __ldaxr(v64);
      while (__stlxr(v27 - 1, v64));
      goto LABEL_72;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v97, "crops");
  v40 = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  v41 = (uint64_t *)MIL::IRValue::AsTensor(v40);
  if (v98 < 0)
    operator delete(v97[0]);
  v42 = (*(uint64_t (**)(uint64_t *))(*v41 + 32))(v41);
  v43 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 96))(v42);
  v44 = MIL::IRDimension::AsConstant(**v43);
  v45 = MIL::IRDimension::AsConstant((*v43)[1]);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 48))(v45) != 2)
  {
    v55 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v56 = (std::__shared_weak_count *)v55[1];
    v83 = *v55;
    v84 = v56;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    std::string::basic_string[abi:ne180100]<0>(v81, "'crops' must be an M x 2 tensor");
    MIL::ValidationResult::ValidationResult(a2, &v83, 315, v81);
    if (v82 < 0)
      operator delete(v81[0]);
    v25 = v84;
    if (!v84)
      return;
    v59 = (unint64_t *)&v84->__shared_owners_;
    do
      v27 = __ldaxr(v59);
    while (__stlxr(v27 - 1, v59));
    goto LABEL_72;
  }
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
  if (v46 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14))
  {
    v47 = (int *)MIL::IRTensorValue::GetDataView<int>(v41);
    if (v48 >= 2)
    {
      v50 = v47 + 1;
      v49 = *v47;
      v51 = 4 * v48 - 4;
      v52 = v47 + 1;
      do
      {
        v54 = *v52++;
        v53 = v54;
        if (v54 < v49)
        {
          v49 = v53;
          v47 = v50;
        }
        v50 = v52;
        v51 -= 4;
      }
      while (v51);
    }
    if (*v47 < 0)
    {
      v70 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
      v71 = v70[1];
      v76[0] = *v70;
      v76[1] = v71;
      if (v71)
      {
        v72 = (unint64_t *)(v71 + 8);
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      std::string::basic_string[abi:ne180100]<0>(v74, "'crops' values must all be >= 0");
      MIL::ValidationResult::ValidationResult(a2, v76, 315, v74);
      if (v75 < 0)
        operator delete(v74[0]);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v76);
    }
    else
    {
      MIL::ValidationResult::ValidationResult(a2);
    }
    return;
  }
  v65 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v66 = (std::__shared_weak_count *)v65[1];
  v79 = *v65;
  v80 = v66;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  std::string::basic_string[abi:ne180100]<0>(v77, "'crops' must be an M x 2 tensor");
  MIL::ValidationResult::ValidationResult(a2, &v79, 315, v77);
  if (v78 < 0)
    operator delete(v77[0]);
  v25 = v80;
  if (v80)
  {
    v69 = (unint64_t *)&v80->__shared_owners_;
    do
      v27 = __ldaxr(v69);
    while (__stlxr(v27 - 1, v69));
    goto LABEL_72;
  }
}

void sub_1E07C0C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateExpandDims(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *OutputType;
  MIL::IRTensorValueType *v6;
  const MIL::IRTensorValue *v7;
  MIL::IRValue *ParameterValue;
  MIL::IRValue *v9;
  uint64_t *v10;
  uint64_t Data;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  void *__p[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31[2];
  char v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  char v36;

  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 104))(v6) & 1) == 0)
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  v7 = (const MIL::IRTensorValue *)MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(&v35, "axes");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  v9 = (MIL::IRValue *)MIL::IRValue::AsTensor(ParameterValue);
  if (v36 < 0)
    operator delete(v35);
  v10 = (uint64_t *)MIL::IRValue::AsTensor(v9);
  Data = MIL::IRTensorValue::GetDataView<int>(v10);
  if (v12)
  {
    v13 = (unsigned int *)Data;
    v14 = 4 * v12;
    while (MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v13, (int)v7))
    {
      ++v13;
      v14 -= 4;
      if (!v14)
        goto LABEL_8;
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v23 = (std::__shared_weak_count *)LocationPtr[1];
    v33 = *LocationPtr;
    v34 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v31, "Each 'axis' in 'axes' must be within range (-output_rank - 1, output_rank) (exclusive)");
    MIL::ValidationResult::ValidationResult(a2, &v33, 315, v31);
    if (v32 < 0)
      operator delete(v31[0]);
    v19 = v34;
    if (v34)
    {
      v26 = (unint64_t *)&v34->__shared_owners_;
      do
        v21 = __ldaxr(v26);
      while (__stlxr(v21 - 1, v26));
      goto LABEL_28;
    }
  }
  else
  {
LABEL_8:
    if (MIL::Validation::HasUniqueElementsInAxes(v9, v7))
    {
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
    v15 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v16 = (std::__shared_weak_count *)v15[1];
    v29 = *v15;
    v30 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Each 'axis' in 'axes' must correspond to a unique & different dimension");
    MIL::ValidationResult::ValidationResult(a2, &v29, 315, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v19 = v30;
    if (v30)
    {
      v20 = (unint64_t *)&v30->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
LABEL_28:
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void sub_1E07C0F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateReshape(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  uint64_t ParameterValue;
  MIL::IRValue *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  size_t v24;
  MIL::IRValueType *v25;
  MIL::IRTensorValueType *v26;
  __int32 *v27;
  __int32 *v28;
  __int32 *v29;
  __int32 *v30;
  size_t v31;
  __int32 *v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  std::string *v40;
  std::string::size_type size;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  std::string *v45;
  std::string::size_type v46;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  char v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::string v58;
  std::string v59;
  void *__p[2];
  char v61;
  void *v62;
  char v63;
  uint64_t v64;
  void *v65[2];
  char v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  __int32 *Data;
  size_t v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  void *v75[2];
  char v76;
  uint64_t v77;
  std::__shared_weak_count *v78;

  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v61 < 0)
    operator delete(__p[0]);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6) & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "shape");
    ParameterValue = MIL::IROperation::TryGetParameterValue(this, (uint64_t)__p, 0);
    v8 = (MIL::IRValue *)ParameterValue;
    if (v61 < 0)
    {
      operator delete(__p[0]);
      if (!v8)
      {
LABEL_42:
        MIL::ValidationResult::ValidationResult(a2);
        return;
      }
    }
    else if (!ParameterValue)
    {
      goto LABEL_42;
    }
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if (v16 < 6)
    {
      v22 = v16;
      v23 = (uint64_t *)MIL::IRValue::AsTensor(v8);
      Data = (__int32 *)MIL::IRTensorValue::GetDataView<int>(v23);
      v70 = v24;
      std::string::basic_string[abi:ne180100]<0>(__p, "x");
      v25 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
      v26 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v25);
      if (v61 < 0)
        operator delete(__p[0]);
      v27 = &Data[v70];
      v28 = wmemchr(Data, -1, v70);
      if (v28)
        v29 = v28;
      else
        v29 = v27;
      if (v29 == &Data[v70]
        || MIL::IRTensorValueType::Rank(v26) != v22
        || ((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v26 + 104))(v26) & 1) != 0)
      {
        if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v26 + 104))(v26)
          || !MIL::Validation::IsZeroOutOfRangeForReshape(&Data, v26))
        {
          goto LABEL_42;
        }
        v30 = Data;
        v31 = v70;
        while (v31 * 4)
        {
          if (!Data[--v31])
          {
            v33 = &Data[v31 + 1];
            goto LABEL_54;
          }
        }
        v33 = Data;
LABEL_54:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Can only reshape to a shape containing 0 when shape[i]==0 && i<rank(X).  Index of 0: ", 85);
        std::to_string(&v59, v33 - v30);
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = &v59;
        else
          v40 = (std::string *)v59.__r_.__value_.__r.__words[0];
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
        else
          size = v59.__r_.__value_.__l.__size_;
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, size);
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", rank of X: ", 13);
        v44 = MIL::IRTensorValueType::Rank(v26);
        std::to_string(&v58, v44);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &v58;
        else
          v45 = (std::string *)v58.__r_.__value_.__r.__words[0];
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        else
          v46 = v58.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v45, v46);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v58.__r_.__value_.__l.__data_);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v48 = (std::__shared_weak_count *)LocationPtr[1];
        v56 = *LocationPtr;
        v57 = v48;
        if (v48)
        {
          p_shared_owners = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldxr(p_shared_owners);
          while (__stxr(v50 + 1, p_shared_owners));
        }
        std::stringbuf::str();
        MIL::ValidationResult::ValidationResult(a2, &v56, 315, &v54);
        if (v55 < 0)
          operator delete(v54);
        v51 = v57;
        if (v57)
        {
          v52 = (unint64_t *)&v57->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        __p[0] = *(void **)MEMORY[0x1E0DE4F60];
        *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
        __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
        if (v63 < 0)
          operator delete(v62);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1E0C022F8](&v64);
      }
      else
      {
        v34 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v35 = (std::__shared_weak_count *)v34[1];
        v67 = *v34;
        v68 = v35;
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        std::string::basic_string[abi:ne180100]<0>(v65, "Unable to reshape tensors of non-fixed rank");
        MIL::ValidationResult::ValidationResult(a2, &v67, 315, v65);
        if (v66 < 0)
          operator delete(v65[0]);
        v13 = v68;
        if (v68)
        {
          v38 = (unint64_t *)&v68->__shared_owners_;
          do
            v15 = __ldaxr(v38);
          while (__stlxr(v15 - 1, v38));
          goto LABEL_26;
        }
      }
    }
    else
    {
      v17 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v18 = (std::__shared_weak_count *)v17[1];
      v73 = *v17;
      v74 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      std::string::basic_string[abi:ne180100]<0>(v71, "Rank of the shape parameter must be between 0 and 5 (inclusive) in reshape");
      MIL::ValidationResult::ValidationResult(a2, &v73, 315, v71);
      if (v72 < 0)
        operator delete(v71[0]);
      v13 = v74;
      if (v74)
      {
        v21 = (unint64_t *)&v74->__shared_owners_;
        do
          v15 = __ldaxr(v21);
        while (__stlxr(v15 - 1, v21));
LABEL_26:
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
  else
  {
    v9 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v10 = (std::__shared_weak_count *)v9[1];
    v77 = *v9;
    v78 = v10;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    std::string::basic_string[abi:ne180100]<0>(v75, "The target shape cannot have non-fixed rank in reshape");
    MIL::ValidationResult::ValidationResult(a2, &v77, 315, v75);
    if (v76 < 0)
      operator delete(v75[0]);
    v13 = v78;
    if (v78)
    {
      v14 = (unint64_t *)&v78->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_26;
    }
  }
}

void sub_1E07C14B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 177) < 0)
    operator delete(*(void **)(v35 - 200));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v35 - 176);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateSlidingWindows(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  int v7;
  const void *ParameterValue;
  MIL::Validation *v9;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v22 < 0)
    operator delete(__p[0]);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 104))(v6) & 1) == 0)
    goto LABEL_7;
  v7 = MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v9 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v22 < 0)
    operator delete(__p[0]);
  if (!MIL::Validation::IsAxisValidForRank(v9, v7))
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v11 = (std::__shared_weak_count *)LocationPtr[1];
    v19 = *LocationPtr;
    v20 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "Axis must be within range (-input_rank - 1, input_rank) (exclusive)");
    MIL::ValidationResult::ValidationResult(a2, &v19, 315, v17);
    if (v18 < 0)
      operator delete(v17[0]);
    v14 = v20;
    if (v20)
    {
      v15 = (unint64_t *)&v20->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
LABEL_7:
    MIL::ValidationResult::ValidationResult(a2);
  }
}

void sub_1E07C172C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateSpaceToBatch(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  MIL::IRValueType *OutputType;
  MIL::IRTensorValueType *v8;
  uint64_t v9;
  MIL::IRValue *ParameterValue;
  uint64_t *v11;
  uint64_t v12;
  MIL::IRDimension ***v13;
  uint64_t v14;
  uint64_t v15;
  int *Data;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD **v33;
  uint64_t v34;
  _QWORD **v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  MIL::IRValue *v40;
  uint64_t *v41;
  uint64_t v42;
  MIL::IRDimension ***v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  unint64_t v48;
  int v49;
  int *v50;
  uint64_t v51;
  int *v52;
  int v53;
  int v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74[2];
  char v75;
  _QWORD v76[2];
  void *v77[2];
  char v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  void *v81[2];
  char v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  void *v85[2];
  char v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  void *__p[2];
  char v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void *v97[2];
  char v98;

  std::string::basic_string[abi:ne180100]<0>(v97, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v98 < 0)
    operator delete(v97[0]);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  v9 = MIL::IRTensorValueType::Rank(v6);
  if (v9 != MIL::IRTensorValueType::Rank(v8))
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v22 = (std::__shared_weak_count *)LocationPtr[1];
    v95 = *LocationPtr;
    v96 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v93, "Input and output tensor shape must have the same rank");
    MIL::ValidationResult::ValidationResult(a2, &v95, 315, v93);
    if (v94 < 0)
      operator delete(v93[0]);
    v25 = v96;
    if (!v96)
      return;
    v26 = (unint64_t *)&v96->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
LABEL_72:
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v97, "block_shape");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  v11 = (uint64_t *)MIL::IRValue::AsTensor(ParameterValue);
  if (v98 < 0)
    operator delete(v97[0]);
  v12 = (*(uint64_t (**)(uint64_t *))(*v11 + 32))(v11);
  v13 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
  v14 = MIL::IRDimension::AsConstant(**v13);
  v15 = MIL::IRTensorValueType::Rank(v6);
  if (v15 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14) + 2)
  {
    v28 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v29 = (std::__shared_weak_count *)v28[1];
    v91 = *v28;
    v92 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Input and output shape must have exactly two more dimensions than the block shape");
    MIL::ValidationResult::ValidationResult(a2, &v91, 315, __p);
    if (v90 < 0)
      operator delete(__p[0]);
    v25 = v92;
    if (!v92)
      return;
    v32 = (unint64_t *)&v92->__shared_owners_;
    do
      v27 = __ldaxr(v32);
    while (__stlxr(v27 - 1, v32));
    goto LABEL_72;
  }
  Data = (int *)MIL::IRTensorValue::GetDataView<int>(v11);
  if (v17)
  {
    v18 = 4 * v17;
    v19 = 1;
    do
    {
      v20 = *Data++;
      v19 *= v20;
      v18 -= 4;
    }
    while (v18);
  }
  else
  {
    v19 = 1;
  }
  v33 = (_QWORD **)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 96))(v6);
  v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v33 + 16))(**v33);
  v35 = (_QWORD **)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v8 + 96))(v8);
  v36 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v35 + 16))(**v35);
  if (v34)
    v37 = v36 == 0;
  else
    v37 = 1;
  if (!v37)
  {
    v38 = v36;
    v39 = v19 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 48))(v34);
    if (v39 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38))
    {
      v60 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v61 = (std::__shared_weak_count *)v60[1];
      v87 = *v60;
      v88 = v61;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      std::string::basic_string[abi:ne180100]<0>(v85, "Input batch size must be equal to the output batch size times the total block size");
      MIL::ValidationResult::ValidationResult(a2, &v87, 315, v85);
      if (v86 < 0)
        operator delete(v85[0]);
      v25 = v88;
      if (!v88)
        return;
      v64 = (unint64_t *)&v88->__shared_owners_;
      do
        v27 = __ldaxr(v64);
      while (__stlxr(v27 - 1, v64));
      goto LABEL_72;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v97, "paddings");
  v40 = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  v41 = (uint64_t *)MIL::IRValue::AsTensor(v40);
  if (v98 < 0)
    operator delete(v97[0]);
  v42 = (*(uint64_t (**)(uint64_t *))(*v41 + 32))(v41);
  v43 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 96))(v42);
  v44 = MIL::IRDimension::AsConstant(**v43);
  v45 = MIL::IRDimension::AsConstant((*v43)[1]);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 48))(v45) != 2)
  {
    v55 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v56 = (std::__shared_weak_count *)v55[1];
    v83 = *v55;
    v84 = v56;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    std::string::basic_string[abi:ne180100]<0>(v81, "'paddings' must be an M x 2 tensor");
    MIL::ValidationResult::ValidationResult(a2, &v83, 315, v81);
    if (v82 < 0)
      operator delete(v81[0]);
    v25 = v84;
    if (!v84)
      return;
    v59 = (unint64_t *)&v84->__shared_owners_;
    do
      v27 = __ldaxr(v59);
    while (__stlxr(v27 - 1, v59));
    goto LABEL_72;
  }
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
  if (v46 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14))
  {
    v47 = (int *)MIL::IRTensorValue::GetDataView<int>(v41);
    if (v48 >= 2)
    {
      v50 = v47 + 1;
      v49 = *v47;
      v51 = 4 * v48 - 4;
      v52 = v47 + 1;
      do
      {
        v54 = *v52++;
        v53 = v54;
        if (v54 < v49)
        {
          v49 = v53;
          v47 = v50;
        }
        v50 = v52;
        v51 -= 4;
      }
      while (v51);
    }
    if (*v47 < 0)
    {
      v70 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
      v71 = v70[1];
      v76[0] = *v70;
      v76[1] = v71;
      if (v71)
      {
        v72 = (unint64_t *)(v71 + 8);
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      std::string::basic_string[abi:ne180100]<0>(v74, "'paddings' values must all be >= 0");
      MIL::ValidationResult::ValidationResult(a2, v76, 315, v74);
      if (v75 < 0)
        operator delete(v74[0]);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v76);
    }
    else
    {
      MIL::ValidationResult::ValidationResult(a2);
    }
    return;
  }
  v65 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v66 = (std::__shared_weak_count *)v65[1];
  v79 = *v65;
  v80 = v66;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  std::string::basic_string[abi:ne180100]<0>(v77, "'paddings' must be an M x 2 tensor");
  MIL::ValidationResult::ValidationResult(a2, &v79, 315, v77);
  if (v78 < 0)
    operator delete(v77[0]);
  v25 = v80;
  if (v80)
  {
    v69 = (unint64_t *)&v80->__shared_owners_;
    do
      v27 = __ldaxr(v69);
    while (__stlxr(v27 - 1, v69));
    goto LABEL_72;
  }
}

void sub_1E07C1D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateSqueeze(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  _BOOL4 IsParameterSet;
  _BOOL4 v6;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v8;
  const MIL::IRTensorValue *v9;
  MIL::IRValue *ParameterValue;
  MIL::IRValue *v11;
  uint64_t *v12;
  uint64_t Data;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  const void *v37[2];
  char v38;

  std::string::basic_string[abi:ne180100]<0>(v37, "axes");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, v37);
  v6 = IsParameterSet;
  if (v38 < 0)
  {
    operator delete((void *)v37[0]);
    if (!v6)
      goto LABEL_15;
  }
  else if (!IsParameterSet)
  {
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v38 < 0)
    operator delete((void *)v37[0]);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v8 + 104))(v8) & 1) == 0)
    goto LABEL_15;
  v9 = (const MIL::IRTensorValue *)MIL::IRTensorValueType::Rank(v8);
  std::string::basic_string[abi:ne180100]<0>(v37, "axes");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  v11 = (MIL::IRValue *)MIL::IRValue::AsTensor(ParameterValue);
  if (v38 < 0)
    operator delete((void *)v37[0]);
  v12 = (uint64_t *)MIL::IRValue::AsTensor(v11);
  Data = MIL::IRTensorValue::GetDataView<int>(v12);
  if (v14)
  {
    v15 = (unsigned int *)Data;
    v16 = 4 * v14;
    while (MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v15, (int)v9))
    {
      ++v15;
      v16 -= 4;
      if (!v16)
        goto LABEL_14;
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v25 = (std::__shared_weak_count *)LocationPtr[1];
    v35 = *LocationPtr;
    v36 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v33, "Each 'axis' in 'axes' must be within range (-input_rank - 1, input_rank) (exclusive)");
    MIL::ValidationResult::ValidationResult(a2, &v35, 315, v33);
    if (v34 < 0)
      operator delete(v33[0]);
    v21 = v36;
    if (v36)
    {
      v28 = (unint64_t *)&v36->__shared_owners_;
      do
        v23 = __ldaxr(v28);
      while (__stlxr(v23 - 1, v28));
      goto LABEL_34;
    }
    return;
  }
LABEL_14:
  if (MIL::Validation::HasUniqueElementsInAxes(v11, v9))
  {
LABEL_15:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  v17 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v18 = (std::__shared_weak_count *)v17[1];
  v31 = *v17;
  v32 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Each 'axis' in 'axes' must correspond to a unique & different dimension");
  MIL::ValidationResult::ValidationResult(a2, &v31, 315, __p);
  if (v30 < 0)
    operator delete(__p[0]);
  v21 = v32;
  if (v32)
  {
    v22 = (unint64_t *)&v32->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
LABEL_34:
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1E07C20B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateTranspose(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  const MIL::IRTensorValue *v7;
  MIL::IRValue *ParameterValue;
  MIL::IRValue *v9;
  uint64_t v10;
  MIL::IRTensorValueType *v11;
  MIL::IRDimension ***v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t Data;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  std::string v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::string v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *__p[2];
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::string v48;

  std::string::basic_string[abi:ne180100]<0>(&v48, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 104))(v6) & 1) == 0)
    goto LABEL_13;
  v7 = (const MIL::IRTensorValue *)MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(&v48, "perm");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  v9 = (MIL::IRValue *)MIL::IRValue::AsTensor(ParameterValue);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v10 = (*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v9 + 32))(v9);
  v11 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  if (MIL::IRTensorValueType::Rank(v11) == 1)
  {
    v12 = (MIL::IRDimension ***)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v11 + 96))(v11);
    v13 = MIL::IRDimension::AsConstant(**v12);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13) == (int)v7)
    {
      v14 = (uint64_t *)MIL::IRValue::AsTensor(v9);
      Data = MIL::IRTensorValue::GetDataView<int>(v14);
      if (v16)
      {
        v17 = (unsigned int *)Data;
        v18 = 4 * v16;
        while (MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v17, (int)v7))
        {
          ++v17;
          v18 -= 4;
          if (!v18)
            goto LABEL_12;
        }
        (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
        std::operator+<char>();
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v31 = (std::__shared_weak_count *)LocationPtr[1];
        v42 = *LocationPtr;
        v43 = v31;
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldxr(p_shared_owners);
          while (__stxr(v33 + 1, p_shared_owners));
        }
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v41, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
        else
          v41 = v48;
        MIL::ValidationResult::ValidationResult(a2, &v42, 315, &v41);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        v34 = v43;
        if (!v43)
          goto LABEL_49;
        v37 = (unint64_t *)&v43->__shared_owners_;
        do
          v36 = __ldaxr(v37);
        while (__stlxr(v36 - 1, v37));
        goto LABEL_47;
      }
LABEL_12:
      if (!MIL::Validation::HasUniqueElementsInAxes(v9, v7))
      {
        (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
        std::operator+<char>();
        v26 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v27 = (std::__shared_weak_count *)v26[1];
        v39 = *v26;
        v40 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v38, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
        else
          v38 = v48;
        MIL::ValidationResult::ValidationResult(a2, &v39, 315, &v38);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        v34 = v40;
        if (!v40)
          goto LABEL_49;
        v35 = (unint64_t *)&v40->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
LABEL_47:
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
LABEL_49:
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        return;
      }
LABEL_13:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v20 = (std::__shared_weak_count *)v19[1];
  v46 = *v19;
  v47 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Perm must have shape [rank of x].");
  MIL::ValidationResult::ValidationResult(a2, &v46, 315, __p);
  if (v45 < 0)
    operator delete(__p[0]);
  v23 = v47;
  if (v47)
  {
    v24 = (unint64_t *)&v47->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1E07C24D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (*(char *)(v32 - 65) < 0)
    operator delete(*(void **)(v32 - 88));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateReverse(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  uint64_t v7;
  _BOOL4 IsParameterSet;
  _BOOL4 v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  MIL::IRValue *ParameterValue;
  uint64_t *v18;
  uint64_t v19;
  int *Data;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  void *v30[2];
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  char v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  const void *v38[2];
  char v39;

  std::string::basic_string[abi:ne180100]<0>(v38, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v39 < 0)
    operator delete((void *)v38[0]);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 104))(v6) & 1) != 0)
  {
    v7 = MIL::IRTensorValueType::Rank(v6);
    std::string::basic_string[abi:ne180100]<0>(v38, "axes");
    IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, v38);
    v9 = IsParameterSet;
    if (v39 < 0)
    {
      operator delete((void *)v38[0]);
      if (!v9)
        goto LABEL_28;
    }
    else if (!IsParameterSet)
    {
      goto LABEL_28;
    }
    std::string::basic_string[abi:ne180100]<0>(v38, "axes");
    ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
    v18 = (uint64_t *)MIL::IRValue::AsTensor(ParameterValue);
    Data = (int *)MIL::IRTensorValue::GetDataView<int>(v18);
    v21 = v19;
    if ((v39 & 0x80000000) == 0)
    {
      if (!v19)
        goto LABEL_28;
LABEL_22:
      v22 = 4 * v21;
      while (1)
      {
        v23 = *Data;
        if (v23 < -v7 || v7 <= v23)
          break;
        ++Data;
        v22 -= 4;
        if (!v22)
          goto LABEL_28;
      }
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v26 = (std::__shared_weak_count *)LocationPtr[1];
      v32 = *LocationPtr;
      v33 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v30, "Axes must be within range [-rank, rank)");
      MIL::ValidationResult::ValidationResult(a2, &v32, 315, v30);
      if (v31 < 0)
        operator delete(v30[0]);
      v14 = v33;
      if (v33)
      {
        v29 = (unint64_t *)&v33->__shared_owners_;
        do
          v16 = __ldaxr(v29);
        while (__stlxr(v16 - 1, v29));
LABEL_15:
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        return;
      }
      return;
    }
    operator delete((void *)v38[0]);
    if (v21)
      goto LABEL_22;
LABEL_28:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  v10 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v11 = (std::__shared_weak_count *)v10[1];
  v36 = *v10;
  v37 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Non-fixed rank not supported");
  MIL::ValidationResult::ValidationResult(a2, &v36, 315, __p);
  if (v35 < 0)
    operator delete(__p[0]);
  v14 = v37;
  if (v37)
  {
    v15 = (unint64_t *)&v37->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    goto LABEL_15;
  }
}

void sub_1E07C27C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateConcat(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  int v7;
  const void *ParameterValue;
  MIL::Validation *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::value_type *v19;
  std::string::size_type v20;
  int v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t *v55;
  std::string __p;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  _DWORD v65[2];
  std::string v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  std::string v69;
  std::string v70;
  std::string v71;

  std::string::basic_string[abi:ne180100]<0>(&v71, "values");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 104))(v6) & 1) == 0)
    goto LABEL_27;
  v7 = MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(&v71, "axis");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v9 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(ParameterValue);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (!MIL::IRTensorValueType::IsScalar(v6) || !(_DWORD)v9)
  {
    if (!MIL::IRTensorValueType::IsScalar(v6) && !MIL::Validation::IsAxisValidForRank(v9, v7))
    {
      std::to_string(&v61, (int)v9);
      v29 = std::string::insert(&v61, 0, "Axis (");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      v31 = std::string::append(&v62, ") must be within range [-");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v60, v7);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v60;
      else
        v33 = (std::string *)v60.__r_.__value_.__r.__words[0];
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      else
        size = v60.__r_.__value_.__l.__size_;
      v35 = std::string::append(&v63, (const std::string::value_type *)v33, size);
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      v37 = std::string::append(&v64, ", ");
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v59, v7);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v59;
      else
        v39 = (std::string *)v59.__r_.__value_.__r.__words[0];
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      else
        v40 = v59.__r_.__value_.__l.__size_;
      v41 = std::string::append(&v69, (const std::string::value_type *)v39, v40);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      v43 = std::string::append(&v70, ") for ");
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
      v46 = *(char *)(v45 + 23);
      if (v46 >= 0)
        v47 = (const std::string::value_type *)v45;
      else
        v47 = *(const std::string::value_type **)v45;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v45 + 23);
      else
        v48 = *(_QWORD *)(v45 + 8);
      v49 = std::string::append(&v71, v47, v48);
      v19 = (std::string::value_type *)v49->__r_.__value_.__r.__words[0];
      v50 = v49->__r_.__value_.__l.__size_;
      v65[0] = v49->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v65 + 3) = *(_DWORD *)((char *)&v49->__r_.__value_.__r.__words[2] + 3);
      v21 = SHIBYTE(v49->__r_.__value_.__r.__words[2]);
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v52 = (std::__shared_weak_count *)LocationPtr[1];
      v57 = *LocationPtr;
      v58 = v52;
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldxr(p_shared_owners);
        while (__stxr(v54 + 1, p_shared_owners));
      }
      if (v21 < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v19, v50);
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        __p.__r_.__value_.__l.__size_ = v50;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = v65[0];
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v65 + 3);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v21;
      }
      MIL::ValidationResult::ValidationResult(a2, &v57, 315, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v26 = v58;
      if (!v58)
        goto LABEL_84;
      v55 = (unint64_t *)&v58->__shared_owners_;
      do
        v28 = __ldaxr(v55);
      while (__stlxr(v28 - 1, v55));
      goto LABEL_34;
    }
LABEL_27:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  std::to_string(&v69, (int)v9);
  v10 = std::string::insert(&v69, 0, "Axis (");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v70, ") must be 0 when inputs are scalars for ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v71.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
  v15 = *(char *)(v14 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)v14;
  else
    v16 = *(const std::string::value_type **)v14;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v14 + 23);
  else
    v17 = *(_QWORD *)(v14 + 8);
  v18 = std::string::append(&v71, v16, v17);
  v19 = (std::string::value_type *)v18->__r_.__value_.__r.__words[0];
  v20 = v18->__r_.__value_.__l.__size_;
  LODWORD(v64.__r_.__value_.__l.__data_) = v18->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v64.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v18->__r_.__value_.__r.__words[2] + 3);
  v21 = SHIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  v22 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v23 = (std::__shared_weak_count *)v22[1];
  v67 = *v22;
  v68 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (v21 < 0)
  {
    std::string::__init_copy_ctor_external(&v66, v19, v20);
  }
  else
  {
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v66.__r_.__value_.__l.__size_ = v20;
    LODWORD(v66.__r_.__value_.__r.__words[2]) = v64.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v66.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v64.__r_.__value_.__r.__words + 3);
    *((_BYTE *)&v66.__r_.__value_.__s + 23) = v21;
  }
  MIL::ValidationResult::ValidationResult(a2, &v67, 315, &v66);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  v26 = v68;
  if (!v68)
    goto LABEL_84;
  v27 = (unint64_t *)&v68->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
LABEL_34:
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_84:
  if (v21 < 0)
    operator delete(v19);
}

void sub_1E07C2DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void *v54;
  int v55;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v55 < 0)
    operator delete(v54);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateSplit(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t *LocationPtr;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *ParameterValue;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v11;
  const void *v12;
  MIL::Validation *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  char v17;
  void *v18;
  char v19;
  void *v20[2];
  char v21;
  uint64_t v22[2];

  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v6 = (std::__shared_weak_count *)LocationPtr[1];
  v22[0] = *LocationPtr;
  v22[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "num_splits");
  ParameterValue = (const void *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v20, 0);
  std::string::basic_string[abi:ne180100]<0>(&v18, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v11 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  v12 = (const void *)MIL::IROperation::GetParameterValue(this);
  v13 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(v12);
  if (v17 < 0)
    operator delete(__p);
  if (v19 < 0)
    operator delete(v18);
  if (v21 < 0)
    operator delete(v20[0]);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1E07C3084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v27 - 64);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::`anonymous namespace'::ValidateSplitHelper(uint64_t *a1@<X0>, const void *a2@<X1>, MIL::IRTensorValueType *a3@<X2>, MIL::Validation *a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::value_type *v31;
  std::string::size_type v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::string __p;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  _DWORD v51[2];
  void *v52[2];
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;

  if (a2 && (int)MIL::IRValue::GetScalar<int>(a2) <= 1)
  {
    v9 = (std::__shared_weak_count *)a1[1];
    v54 = *a1;
    v55 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v52, "Invalid num_splits (must be at least 2)");
    MIL::ValidationResult::ValidationResult(a5, &v54, 315, v52);
    if (v53 < 0)
      operator delete(v52[0]);
    v12 = v55;
    if (v55)
    {
      v13 = (unint64_t *)&v55->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a3 + 104))(a3) & 1) != 0
         && (v15 = MIL::IRTensorValueType::Rank(a3), !MIL::Validation::IsAxisValidForRank(a4, v15)))
  {
    std::to_string(&v45, (int)a4);
    v16 = std::string::insert(&v45, 0, "Axis (");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v46, ") must be within range [-");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v44, v15);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v44;
    else
      v20 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      size = v44.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v47, (const std::string::value_type *)v20, size);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v48, ", ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v43, v15);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v43;
    else
      v26 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    else
      v27 = v43.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v49, (const std::string::value_type *)v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v50, ") for split");
    v31 = (std::string::value_type *)v30->__r_.__value_.__r.__words[0];
    v32 = v30->__r_.__value_.__l.__size_;
    v51[0] = v30->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v51 + 3) = *(_DWORD *)((char *)&v30->__r_.__value_.__r.__words[2] + 3);
    v33 = SHIBYTE(v30->__r_.__value_.__r.__words[2]);
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    v34 = (std::__shared_weak_count *)a1[1];
    v41 = *a1;
    v42 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    if (v33 < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v31, v32);
    }
    else
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      __p.__r_.__value_.__l.__size_ = v32;
      LODWORD(__p.__r_.__value_.__r.__words[2]) = v51[0];
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v51 + 3);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v33;
    }
    MIL::ValidationResult::ValidationResult(a5, &v41, 315, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v37 = v42;
    if (v42)
    {
      v38 = (unint64_t *)&v42->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v33 < 0)
      operator delete(v31);
  }
  else
  {
    MIL::ValidationResult::ValidationResult(a5);
  }
}

void sub_1E07C34A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void *v54;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  operator delete(v54);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateStack(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  BOOL v7;
  BOOL v8;
  int v9;
  const void *ParameterValue;
  MIL::Validation *v11;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::value_type *v40;
  std::string::size_type v41;
  int v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string __p;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  _DWORD v61[2];
  void *v62[2];
  char v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  std::string v66;

  std::string::basic_string[abi:ne180100]<0>(&v66, "values");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 104))(v6) & 1) == 0)
    goto LABEL_9;
  std::string::basic_string[abi:ne180100]<0>(&v66, "values");
  v7 = MIL::Validation::VariadicTensorsDTypesMatch(this, (uint64_t)&v66);
  v8 = v7;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v66.__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_6;
LABEL_12:
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v13 = (std::__shared_weak_count *)LocationPtr[1];
    v64 = *LocationPtr;
    v65 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v62, "Inputs must have the same datatype");
    MIL::ValidationResult::ValidationResult(a2, &v64, 319, v62);
    if (v63 < 0)
      operator delete(v62[0]);
    v16 = v65;
    if (v65)
    {
      v17 = (unint64_t *)&v65->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    return;
  }
  if (!v7)
    goto LABEL_12;
LABEL_6:
  v9 = MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(&v66, "axis");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v11 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(ParameterValue);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (MIL::Validation::IsAxisValidForRank(v11, v9 + 1))
  {
LABEL_9:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  std::to_string(&v55, (int)v11);
  v19 = std::string::insert(&v55, 0, "Axis (");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v56, ") must be within range [-");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v54, v9);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v54;
  else
    v23 = (std::string *)v54.__r_.__value_.__r.__words[0];
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  else
    size = v54.__r_.__value_.__l.__size_;
  v25 = std::string::append(&v57, (const std::string::value_type *)v23, size);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v58, ", ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v53, v9);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v53;
  else
    v29 = (std::string *)v53.__r_.__value_.__r.__words[0];
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  else
    v30 = v53.__r_.__value_.__l.__size_;
  v31 = std::string::append(&v59, (const std::string::value_type *)v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v60, "] for ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
  v36 = *(char *)(v35 + 23);
  if (v36 >= 0)
    v37 = (const std::string::value_type *)v35;
  else
    v37 = *(const std::string::value_type **)v35;
  if (v36 >= 0)
    v38 = *(unsigned __int8 *)(v35 + 23);
  else
    v38 = *(_QWORD *)(v35 + 8);
  v39 = std::string::append(&v66, v37, v38);
  v40 = (std::string::value_type *)v39->__r_.__value_.__r.__words[0];
  v41 = v39->__r_.__value_.__l.__size_;
  v61[0] = v39->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v61 + 3) = *(_DWORD *)((char *)&v39->__r_.__value_.__r.__words[2] + 3);
  v42 = SHIBYTE(v39->__r_.__value_.__r.__words[2]);
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  v43 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v44 = (std::__shared_weak_count *)v43[1];
  v51 = *v43;
  v52 = v44;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  if (v42 < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v40, v41);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    __p.__r_.__value_.__l.__size_ = v41;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v61[0];
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v61 + 3);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v42;
  }
  MIL::ValidationResult::ValidationResult(a2, &v51, 315, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v47 = v52;
  if (v52)
  {
    v48 = (unint64_t *)&v52->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v42 < 0)
    operator delete(v40);
}

void sub_1E07C3A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  int v62;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v62 < 0)
    operator delete(v61);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBatchToSpace(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  char **v8;
  MIL::IRValue *SingleValue;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  MIL::IRValue *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  _DWORD *v21;
  int *v22;
  int v23;
  int *v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t i;
  unint64_t v65;
  uint64_t v66;
  void (***v67)(MIL::MILContextImpl *__hidden);
  int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  void (***v75)(MIL::MILContextImpl *__hidden);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  std::logic_error *exception;
  std::logic_error *v113;
  std::logic_error *v114;
  int v115;
  uint64_t Data;
  void *v117;
  char *v118;
  char *v119;
  void *__p;
  void *v121;
  uint64_t v122;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v122) < 0)
    operator delete(__p);
  v115 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v8 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "block_shape");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v10 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  Data = MIL::IRTensorValue::GetDataView<int>(v10);
  v12 = v11;
  if (SHIBYTE(v122) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "crops");
  v13 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v14 = (uint64_t *)MIL::IRValue::AsTensor(v13);
  if (SHIBYTE(v122) < 0)
    operator delete(__p);
  v15 = (*(uint64_t (**)(uint64_t *))(*v14 + 32))(v14);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15);
  v121 = 0;
  v122 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v16, *(_QWORD *)(v16 + 8), (uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 3);
  v17 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)__p);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17) != v12
    || (v18 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)__p + 1)),
        (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18) != 2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "'crops' must be an M x 2 tensor");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v19 = (_DWORD *)MIL::IRTensorValue::GetDataView<int>(v14);
  v21 = v19;
  v22 = v19;
  if (v20 >= 2)
  {
    v24 = v19 + 1;
    v23 = *v19;
    v25 = 4 * v20 - 4;
    v22 = v19;
    v26 = v19 + 1;
    do
    {
      v28 = *v26++;
      v27 = v28;
      if (v28 < v23)
      {
        v23 = v27;
        v22 = v24;
      }
      v24 = v26;
      v25 -= 4;
    }
    while (v25);
  }
  if (*v22 < 0)
  {
    v113 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v113, "'crops' values must all be >= 0");
    v113->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v113, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (v12)
  {
    v29 = 4 * v12;
    v30 = 1;
    v31 = (int *)Data;
    do
    {
      v32 = *v31++;
      v30 *= v32;
      v29 -= 4;
    }
    while (v29);
  }
  else
  {
    v30 = 1;
  }
  v118 = 0;
  v119 = 0;
  v117 = 0;
  if (v8[1] == *v8)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*v8 + 16))(*(_QWORD *)*v8);
  if (v33)
  {
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33);
    if (v34 % v30)
    {
      v114 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v114, "Total block size is not divisible by the batch dimension.");
      v114->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v114, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v35 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v34 / v30));
    v36 = (v118 - (_BYTE *)v117) >> 3;
    if ((unint64_t)(v36 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = (v119 - (_BYTE *)v117) >> 2;
    if (v37 <= v36 + 1)
      v37 = v36 + 1;
    if ((unint64_t)(v119 - (_BYTE *)v117) >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    if (v38)
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v38);
    else
      v39 = 0;
    v45 = (uint64_t *)&v39[8 * v36];
    v46 = &v39[8 * v38];
    *v45 = v35;
    v47 = (char *)(v45 + 1);
    v49 = (char *)v117;
    v48 = v118;
    if (v118 != v117)
    {
      do
      {
        v50 = *((_QWORD *)v48 - 1);
        v48 -= 8;
        *--v45 = v50;
      }
      while (v48 != v49);
LABEL_46:
      v48 = (char *)v117;
    }
  }
  else
  {
    v40 = MIL::IRUnknownDimension::Make(*a1, 0);
    v41 = (v118 - (_BYTE *)v117) >> 3;
    if ((unint64_t)(v41 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v42 = (v119 - (_BYTE *)v117) >> 2;
    if (v42 <= v41 + 1)
      v42 = v41 + 1;
    if ((unint64_t)(v119 - (_BYTE *)v117) >= 0x7FFFFFFFFFFFFFF8)
      v43 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v43 = v42;
    if (v43)
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v43);
    else
      v44 = 0;
    v45 = (uint64_t *)&v44[8 * v41];
    v46 = &v44[8 * v43];
    *v45 = v40;
    v47 = (char *)(v45 + 1);
    v51 = (char *)v117;
    v48 = v118;
    if (v118 != v117)
    {
      do
      {
        v52 = *((_QWORD *)v48 - 1);
        v48 -= 8;
        *--v45 = v52;
      }
      while (v48 != v51);
      goto LABEL_46;
    }
  }
  v117 = v45;
  v118 = v47;
  v119 = v46;
  if (v48)
    operator delete(v48);
  v118 = v47;
  v53 = *v8;
  if ((unint64_t)(v8[1] - *v8) <= 8)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  if (v47 >= v119)
  {
    v55 = (v47 - (_BYTE *)v117) >> 3;
    if ((unint64_t)(v55 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v56 = (v119 - (_BYTE *)v117) >> 2;
    if (v56 <= v55 + 1)
      v56 = v55 + 1;
    if ((unint64_t)(v119 - (_BYTE *)v117) >= 0x7FFFFFFFFFFFFFF8)
      v57 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v57 = v56;
    if (v57)
      v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v57);
    else
      v58 = 0;
    v59 = &v58[8 * v55];
    v60 = &v58[8 * v57];
    *(_QWORD *)v59 = *((_QWORD *)v53 + 1);
    v54 = (uint64_t)(v59 + 8);
    v62 = (char *)v117;
    v61 = v118;
    if (v118 != v117)
    {
      do
      {
        v63 = *((_QWORD *)v61 - 1);
        v61 -= 8;
        *((_QWORD *)v59 - 1) = v63;
        v59 -= 8;
      }
      while (v61 != v62);
      v61 = (char *)v117;
    }
    v117 = v59;
    v118 = (char *)v54;
    v119 = v60;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *(_QWORD *)v47 = *((_QWORD *)v53 + 1);
    v54 = (uint64_t)(v47 + 8);
  }
  v118 = (char *)v54;
  if (v12)
  {
    for (i = 0; i != v12; ++i)
    {
      v65 = i + 2;
      if (i + 2 >= (unint64_t)((v8[1] - *v8) >> 3))
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v66 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&(*v8)[8 * v65] + 16))(*(_QWORD *)&(*v8)[8 * v65]);
      if (v66)
      {
        v67 = *a1;
        v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 48))(v66);
        v69 = MIL::IRConstantDimension::Make(v67, (MIL::MILContext *)(*(_DWORD *)(Data + 4 * i) * v68 - (v21[2 * i] + v21[2 * i + 1])));
        v70 = v69;
        v71 = v118;
        if (v118 >= v119)
        {
          v80 = (v118 - (_BYTE *)v117) >> 3;
          if ((unint64_t)(v80 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v81 = (v119 - (_BYTE *)v117) >> 2;
          if (v81 <= v80 + 1)
            v81 = v80 + 1;
          if ((unint64_t)(v119 - (_BYTE *)v117) >= 0x7FFFFFFFFFFFFFF8)
            v82 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v82 = v81;
          if (v82)
            v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v82);
          else
            v83 = 0;
          v88 = (uint64_t *)&v83[8 * v80];
          *v88 = v70;
          v72 = (char *)(v88 + 1);
          v90 = (char *)v117;
          v89 = v118;
          if (v118 != v117)
          {
            do
            {
              v91 = *((_QWORD *)v89 - 1);
              v89 -= 8;
              *--v88 = v91;
            }
            while (v89 != v90);
            v89 = (char *)v117;
          }
          v117 = v88;
          v118 = v72;
          v119 = &v83[8 * v82];
          if (v89)
            operator delete(v89);
        }
        else
        {
          *(_QWORD *)v118 = v69;
          v72 = v71 + 8;
        }
        v118 = v72;
      }
      else
      {
        if (v65 >= (v8[1] - *v8) >> 3)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        v73 = MIL::IRDimension::AsUnknown(*(MIL::IRDimension **)&(*v8)[8 * v65]);
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
        v75 = *a1;
        if (v74)
        {
          v76 = MIL::IRUnknownDimension::Make(v75, (MIL::MILContext *)1);
          v77 = v76;
          v78 = v118;
          if (v118 >= v119)
          {
            v92 = (v118 - (_BYTE *)v117) >> 3;
            if ((unint64_t)(v92 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v93 = (v119 - (_BYTE *)v117) >> 2;
            if (v93 <= v92 + 1)
              v93 = v92 + 1;
            if ((unint64_t)(v119 - (_BYTE *)v117) >= 0x7FFFFFFFFFFFFFF8)
              v94 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v94 = v93;
            if (v94)
              v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v94);
            else
              v95 = 0;
            v100 = (uint64_t *)&v95[8 * v92];
            *v100 = v77;
            v79 = (char *)(v100 + 1);
            v102 = (char *)v117;
            v101 = v118;
            if (v118 != v117)
            {
              do
              {
                v103 = *((_QWORD *)v101 - 1);
                v101 -= 8;
                *--v100 = v103;
              }
              while (v101 != v102);
              v101 = (char *)v117;
            }
            v117 = v100;
            v118 = v79;
            v119 = &v95[8 * v94];
            if (v101)
              operator delete(v101);
          }
          else
          {
            *(_QWORD *)v118 = v76;
            v79 = v78 + 8;
          }
          v118 = v79;
          v104 = MIL::IRTensorValueType::MakeWithShape(*a1, v115, (uint64_t)&v117);
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          v105 = (uint64_t *)operator new(8uLL);
          *a3 = v105;
          *v105++ = v104;
          a3[1] = v105;
          a3[2] = v105;
          if ((v74 & 1) != 0)
            goto LABEL_127;
        }
        else
        {
          v84 = MIL::IRUnknownDimension::Make(v75, 0);
          v85 = v84;
          v86 = v118;
          if (v118 >= v119)
          {
            v96 = (v118 - (_BYTE *)v117) >> 3;
            if ((unint64_t)(v96 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v97 = (v119 - (_BYTE *)v117) >> 2;
            if (v97 <= v96 + 1)
              v97 = v96 + 1;
            if ((unint64_t)(v119 - (_BYTE *)v117) >= 0x7FFFFFFFFFFFFFF8)
              v98 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v98 = v97;
            if (v98)
              v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v98);
            else
              v99 = 0;
            v106 = (uint64_t *)&v99[8 * v96];
            *v106 = v85;
            v87 = (char *)(v106 + 1);
            v108 = (char *)v117;
            v107 = v118;
            if (v118 != v117)
            {
              do
              {
                v109 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *--v106 = v109;
              }
              while (v107 != v108);
              v107 = (char *)v117;
            }
            v117 = v106;
            v118 = v87;
            v119 = &v99[8 * v98];
            if (v107)
              operator delete(v107);
          }
          else
          {
            *(_QWORD *)v118 = v84;
            v87 = v86 + 8;
          }
          v118 = v87;
        }
      }
    }
    v54 = (uint64_t)v118;
  }
  std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)&v117, v54, &(*v8)[8 * v12 + 16], v8[1], (v8[1] - &(*v8)[8 * v12 + 16]) >> 3);
  v110 = MIL::IRTensorValueType::MakeWithShape(*a1, v115, (uint64_t)&v117);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v111 = (uint64_t *)operator new(8uLL);
  *a3 = v111;
  *v111++ = v110;
  a3[1] = v111;
  a3[2] = v111;
LABEL_127:
  if (v117)
  {
    v118 = (char *)v117;
    operator delete(v117);
  }
  if (__p)
  {
    v121 = __p;
    operator delete(__p);
  }
}

void sub_1E07C44D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  __cxa_free_exception(v19);
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConcat(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  unsigned __int8 *v6;
  MIL::IRValueType *ValueType;
  uint64_t v8;
  uint64_t v9;
  const void *SingleValue;
  uint64_t v11;
  uint64_t v12;
  MIL::IRTypedArgument::IRTypedArgumentImpl ***v13;
  MIL::IRTypedArgument::IRTypedArgumentImpl ***v14;
  MIL::MILContext *v15;
  MIL::IRTypedArgument::IRTypedArgumentImpl **v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  MIL::IRValueType *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD *v34;
  std::logic_error *v35;
  std::logic_error *exception;
  int v37;
  std::string v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  _BYTE *v43;
  uint64_t v44;
  MIL::IRTypedArgument::IRTypedArgumentImpl ***v45;
  MIL::IRTypedArgument::IRTypedArgumentImpl ***v46;
  uint64_t v47;
  void *__p;
  std::__shared_weak_count *v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "values");
  v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v45 = 0;
  v46 = 0;
  v47 = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>((char *)&v45, *((_QWORD **)v6 + 5), *((_QWORD **)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 4);
  if (v50 < 0)
    operator delete(__p);
  ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(*v45);
  v8 = MIL::IRValueType::AsTensorType(ValueType);
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  v42 = 0;
  v43 = 0;
  v44 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v42, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v11 = MIL::IRValue::GetScalar<int>(SingleValue);
  if (v50 < 0)
    operator delete(__p);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  v39 = 0;
  v40 = 0;
  v41 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v39, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3);
  if (v40 == v39)
  {
    if ((_DWORD)v11)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Scalar concatenation is only allowed when axis is 0.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    __p = (void *)MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(((char *)v46 - (char *)v45) >> 4));
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v42, (char *)&__p, (uint64_t)&v49, 1uLL);
    v31 = MIL::IRTensorValueType::MakeWithShape(*a1, v37, (uint64_t)&v42);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v32 = (uint64_t *)operator new(8uLL);
  }
  else
  {
    if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)v11, (unint64_t)(v43 - (_BYTE *)v42) >> 3))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 83);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" for input_ndim: ", 17);
      std::ostream::operator<<();
      v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(v35, &v38);
      v35->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v35, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    if ((v11 & 0x80000000) != 0)
      LODWORD(v11) = v11 + ((unint64_t)(v43 - (_BYTE *)v42) >> 3);
    v13 = v45;
    v14 = v46;
    v15 = 0;
    while (v13 != v14)
    {
      v16 = *v13;
      v17 = (std::__shared_weak_count *)v13[1];
      __p = *v13;
      v49 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      v20 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(v16);
      v21 = MIL::IRValueType::AsTensorType(v20);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 96))(v21);
      if (&v39 != (void **)v22)
        std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v39, *(char **)v22, *(_QWORD *)(v22 + 8), (uint64_t)(*(_QWORD *)(v22 + 8) - *(_QWORD *)v22) >> 3);
      v23 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v39 + (int)v11) + 16))(*((_QWORD *)v39 + (int)v11));
      v24 = v23;
      if (v23)
      {
        v15 = (MIL::MILContext *)((char *)v15 + (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23));
        if (v17)
          goto LABEL_20;
      }
      else
      {
        v25 = MIL::IRUnknownDimension::Make(*a1, 0);
        *((_QWORD *)v42 + (int)v11) = v25;
        v26 = MIL::IRTensorValueType::MakeWithShape(*a1, v37, (uint64_t)&v42);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        v27 = (uint64_t *)operator new(8uLL);
        *a3 = v27;
        *v27++ = v26;
        a3[1] = v27;
        a3[2] = v27;
        if (v17)
        {
LABEL_20:
          v28 = (unint64_t *)&v17->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      if (!v24)
        goto LABEL_30;
      v13 += 2;
    }
    v30 = MIL::IRConstantDimension::Make(*a1, v15);
    *((_QWORD *)v42 + (int)v11) = v30;
    v31 = MIL::IRTensorValueType::MakeWithShape(*a1, v37, (uint64_t)&v42);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v32 = (uint64_t *)operator new(8uLL);
  }
  *a3 = v32;
  *v32 = v31;
  v33 = v32 + 1;
  a3[1] = v33;
  a3[2] = v33;
LABEL_30:
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  __p = &v45;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1E07C4A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      if (a18)
        operator delete(a18);
      if (a21)
        operator delete(a21);
      a27 = &a24;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceDepthToSpace(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "block_size");
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1E07C4BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::`anonymous namespace'::ValueTypeInferenceDepthToSpaceImpl(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const void *SingleValue;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  std::logic_error *exception;
  int v64;
  std::string v65;
  void *__p[2];
  char v67;
  uint64_t *v68;
  uint64_t *v69;
  _QWORD v70[2];

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v67 < 0)
    operator delete(__p[0]);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, a3);
  v13 = MIL::IRValue::GetScalar<int>(SingleValue);
  if (*(_QWORD *)(v11 + 8) == *(_QWORD *)v11)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v14 = v13;
  v15 = **(_QWORD **)v11;
  v16 = (uint64_t *)operator new(8uLL);
  v68 = v16;
  *v16 = v15;
  v69 = v16 + 1;
  v70[0] = v16 + 1;
  if (*(_QWORD *)(v11 + 8) - *(_QWORD *)v11 <= 8uLL)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v11 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v11 + 8));
  v64 = v10;
  if (v17)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
    v19 = (v14 * v14);
    if (v18 % v19)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      v59 = *(char *)(a3 + 23);
      if (v59 >= 0)
        v60 = a3;
      else
        v60 = *(_QWORD *)a3;
      if (v59 >= 0)
        v61 = *(unsigned __int8 *)(a3 + 23);
      else
        v61 = *(_QWORD *)(a3 + 8);
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v60, v61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" is not divisible by the channel dimension.", 43);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v65);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v20 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v18 / v19));
    v21 = v69;
    if ((unint64_t)v69 >= v70[0])
    {
      v22 = v69 - v68;
      if ((unint64_t)(v22 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v23 = (uint64_t)(v70[0] - (_QWORD)v68) >> 2;
      if (v23 <= v22 + 1)
        v23 = v22 + 1;
      if (v70[0] - (_QWORD)v68 >= 0x7FFFFFFFFFFFFFF8uLL)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v70, v24);
      else
        v25 = 0;
      v31 = (uint64_t *)&v25[8 * v22];
      v32 = &v25[8 * v24];
      *v31 = v20;
      v26 = v31 + 1;
      v34 = (char *)v68;
      v33 = (char *)v69;
      if (v69 == v68)
        goto LABEL_34;
      do
      {
        v35 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v31 = v35;
      }
      while (v33 != v34);
LABEL_33:
      v33 = (char *)v68;
LABEL_34:
      v68 = v31;
      v69 = v26;
      v70[0] = v32;
      if (v33)
        operator delete(v33);
      goto LABEL_36;
    }
  }
  else
  {
    v20 = MIL::IRUnknownDimension::Make(*a1, 0);
    v21 = v69;
    if ((unint64_t)v69 >= v70[0])
    {
      v27 = v69 - v68;
      if ((unint64_t)(v27 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v28 = (uint64_t)(v70[0] - (_QWORD)v68) >> 2;
      if (v28 <= v27 + 1)
        v28 = v27 + 1;
      if (v70[0] - (_QWORD)v68 >= 0x7FFFFFFFFFFFFFF8uLL)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      if (v29)
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v70, v29);
      else
        v30 = 0;
      v31 = (uint64_t *)&v30[8 * v27];
      v32 = &v30[8 * v29];
      *v31 = v20;
      v26 = v31 + 1;
      v36 = (char *)v68;
      v33 = (char *)v69;
      if (v69 == v68)
        goto LABEL_34;
      do
      {
        v37 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v31 = v37;
      }
      while (v33 != v36);
      goto LABEL_33;
    }
  }
  *v21 = v20;
  v26 = v21 + 1;
LABEL_36:
  v69 = v26;
  v38 = v14;
  for (i = 2; i != 4; ++i)
  {
    if (i >= (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v11 + 8 * i) + 16))(*(_QWORD *)(*(_QWORD *)v11 + 8 * i));
    if (v40)
    {
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 48))(v40);
      v42 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v41 * v38));
      v43 = v69;
      if ((unint64_t)v69 < v70[0])
        goto LABEL_49;
      v44 = v69 - v68;
      if ((unint64_t)(v44 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v45 = (uint64_t)(v70[0] - (_QWORD)v68) >> 2;
      if (v45 <= v44 + 1)
        v45 = v44 + 1;
      if (v70[0] - (_QWORD)v68 >= 0x7FFFFFFFFFFFFFF8uLL)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v45;
      if (v46)
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v70, v46);
      else
        v47 = 0;
      v51 = (uint64_t *)&v47[8 * v44];
      *v51 = v42;
      v48 = v51 + 1;
      v53 = (char *)v68;
      v52 = (char *)v69;
      if (v69 != v68)
      {
        do
        {
          v54 = *((_QWORD *)v52 - 1);
          v52 -= 8;
          *--v51 = v54;
        }
        while (v52 != v53);
LABEL_65:
        v52 = (char *)v68;
      }
    }
    else
    {
      v42 = MIL::IRUnknownDimension::Make(*a1, 0);
      v43 = v69;
      if ((unint64_t)v69 < v70[0])
      {
LABEL_49:
        *v43 = v42;
        v48 = v43 + 1;
        goto LABEL_68;
      }
      v49 = v69 - v68;
      if ((unint64_t)(v49 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v50 = (uint64_t)(v70[0] - (_QWORD)v68) >> 2;
      if (v50 <= v49 + 1)
        v50 = v49 + 1;
      if (v70[0] - (_QWORD)v68 >= 0x7FFFFFFFFFFFFFF8uLL)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v50;
      if (v46)
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v70, v46);
      else
        v47 = 0;
      v51 = (uint64_t *)&v47[8 * v49];
      *v51 = v42;
      v48 = v51 + 1;
      v55 = (char *)v68;
      v52 = (char *)v69;
      if (v69 != v68)
      {
        do
        {
          v56 = *((_QWORD *)v52 - 1);
          v52 -= 8;
          *--v51 = v56;
        }
        while (v52 != v55);
        goto LABEL_65;
      }
    }
    v68 = v51;
    v69 = v48;
    v70[0] = &v47[8 * v46];
    if (v52)
      operator delete(v52);
LABEL_68:
    v69 = v48;
  }
  v57 = MIL::IRTensorValueType::MakeWithShape(*a1, v64, (uint64_t)&v68);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v58 = (uint64_t *)operator new(8uLL);
  *a4 = v58;
  *v58++ = v57;
  a4[1] = v58;
  a4[2] = v58;
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
}

void sub_1E07C5100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;
  uint64_t v24;
  void *v26;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      v26 = *(void **)(v24 - 112);
      if (v26)
      {
        *(_QWORD *)(v24 - 104) = v26;
        operator delete(v26);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceExpandDims(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  MIL::IRValue *SingleValue;
  uint64_t *v13;
  unsigned int *Data;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *__p;
  void *v25;
  uint64_t v26;
  void *__src;
  uint64_t *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  __p = 0;
  v25 = 0;
  v26 = 0;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(v9))
  {
    __src = (void *)MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&__p, (char *)&__src, (uint64_t)&v28, 1uLL);
    v10 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&__p);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v11 = (uint64_t *)operator new(8uLL);
    *a3 = v11;
    *v11++ = v10;
    a3[1] = v11;
    a3[2] = v11;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__src, "axes");
    SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__src);
    v13 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
    Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v13);
    v16 = v15;
    if (v29 < 0)
      operator delete(__src);
    MIL::ValueTypeInferenceUtils::ConvertAxesToNonNeg(Data, v16, v16 + ((uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3), (char **)&__src);
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    if (&__p != (void **)v9)
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&__p, *(char **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3);
    v17 = (uint64_t *)__src;
    v18 = v28;
    while (v17 != v18)
    {
      v19 = *v17;
      v20 = (char *)__p;
      v23 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)1);
      std::vector<MIL::IRDimension const*>::insert((uint64_t)&__p, &v20[8 * (int)v19], &v23);
      ++v17;
    }
    v21 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&__p);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v22 = (uint64_t *)operator new(8uLL);
    *a3 = v22;
    *v22++ = v21;
    a3[1] = v22;
    a3[2] = v22;
    if (__src)
    {
      v28 = (uint64_t *)__src;
      operator delete(__src);
    }
  }
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_1E07C53F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferencePixelShuffle(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "upscale_factor");
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1E07C54E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceReshape(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::ValueTypeInferenceUtils::ValueTypeInferenceReshapeCommon(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07C557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceByIndex(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t SingleValue;
  MIL::IRValue *v14;
  uint64_t *v15;
  _BYTE *Data;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  MIL::IRValue *v23;
  uint64_t *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  MIL::IRValue *v33;
  uint64_t *v34;
  _BYTE *v35;
  unint64_t v36;
  std::vector<int>::size_type v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  MIL::IRValue *v43;
  MIL::Validation *v44;
  const MIL::IRTensorValue *v45;
  MIL::IRValue *v46;
  MIL::IRValue *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  unsigned __int8 v54;
  unsigned int v55;
  MIL::IRValueType *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  MIL::IRValueType *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  std::vector<int>::pointer v68;
  int64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  MIL::IRValueType *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  MIL::IRValueType *v77;
  uint64_t v78;
  int *v79;
  int *v80;
  std::vector<int>::pointer v81;
  std::vector<int>::pointer v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int64_t v90;
  unint64_t v91;
  int v92;
  int v93;
  int64_t v94;
  unint64_t v95;
  std::vector<int>::pointer v96;
  uint64_t v97;
  std::vector<int>::pointer v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  std::vector<int>::pointer end;
  int *v107;
  int64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  int *v112;
  int *v113;
  std::vector<int>::pointer v114;
  std::vector<int>::pointer begin;
  uint64_t v116;
  uint64_t *v117;
  std::logic_error *exception;
  std::runtime_error *v119;
  int v120;
  uint64_t v121;
  std::vector<int> __x;
  std::vector<int> v123;
  std::vector<int> v124;
  void *v125;
  unint64_t v126;
  std::vector<int> __p;
  void *__src;
  int v129[3];
  char v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  memset(&__p, 0, sizeof(__p));
  v10 = (v9[1] - *v9) >> 3;
  LOBYTE(__src) = 0;
  std::vector<BOOL>::vector(&v125, v10, (unsigned __int8 *)&__src);
  std::string::basic_string[abi:ne180100]<0>(&__src, "squeeze_mask");
  v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__src);
  v12 = v11;
  if (v130 < 0)
  {
    operator delete(__src);
    if (!v12)
      goto LABEL_10;
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(&__src, "squeeze_mask");
    SingleValue = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a2, (uint64_t)&__src);
    v14 = (MIL::IRValue *)SingleValue;
    if (v130 < 0)
    {
      operator delete(__src);
      if (v14)
        goto LABEL_9;
    }
    else if (SingleValue)
    {
LABEL_9:
      v15 = (uint64_t *)MIL::IRValue::AsTensor(v14);
      Data = (_BYTE *)MIL::IRTensorValue::GetDataView<BOOL>(v15);
      std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(&v125, Data, &Data[v17], v17);
      goto LABEL_10;
    }
    __src = (void *)MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&__p, (char *)&__src, (uint64_t)v129, 1uLL);
    v30 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&__p);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v31 = (uint64_t *)operator new(8uLL);
    *a3 = v31;
    *v31++ = v30;
    a3[1] = v31;
    a3[2] = v31;
    goto LABEL_167;
  }
  if (v11)
    goto LABEL_7;
LABEL_10:
  LOBYTE(__x.__begin_) = 0;
  __src = v125;
  v129[0] = 0;
  v124.__begin_ = (std::vector<int>::pointer)((char *)v125 + 8 * (v126 >> 6));
  LODWORD(v124.__end_) = v126 & 0x3F;
  v18 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>((uint64_t *)&__src, (uint64_t)&v124, &__x);
  v19 = (v9[1] - *v9) >> 3;
  LOBYTE(v124.__begin_) = 0;
  std::vector<BOOL>::vector(&__src, v19, (unsigned __int8 *)&v124);
  std::string::basic_string[abi:ne180100]<0>(&v124, "begin_mask");
  v20 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v124);
  v21 = v20;
  if (SHIBYTE(v124.__end_cap_.__value_) < 0)
  {
    operator delete(v124.__begin_);
    if (!v21)
      goto LABEL_17;
LABEL_14:
    std::string::basic_string[abi:ne180100]<0>(&v124, "begin_mask");
    v22 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a2, (uint64_t)&v124);
    v23 = (MIL::IRValue *)v22;
    if (SHIBYTE(v124.__end_cap_.__value_) < 0)
    {
      operator delete(v124.__begin_);
      if (v23)
        goto LABEL_16;
    }
    else if (v22)
    {
LABEL_16:
      v24 = (uint64_t *)MIL::IRValue::AsTensor(v23);
      v25 = (_BYTE *)MIL::IRTensorValue::GetDataView<BOOL>(v24);
      std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(&__src, v25, &v25[v26], v26);
      goto LABEL_17;
    }
    v123.__begin_ = (std::vector<int>::pointer)MIL::IRUnknownDimension::Make(*a1, 0);
    std::vector<MIL::IRDimension const*>::vector(&v124, v18, &v123);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    __p = v124;
    v40 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&__p);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v41 = (uint64_t *)operator new(8uLL);
    *a3 = v41;
    *v41++ = v40;
    a3[1] = v41;
    a3[2] = v41;
    goto LABEL_165;
  }
  if (v20)
    goto LABEL_14;
LABEL_17:
  v27 = (v9[1] - *v9) >> 3;
  LOBYTE(v123.__begin_) = 0;
  std::vector<BOOL>::vector(&v124, v27, (unsigned __int8 *)&v123);
  std::string::basic_string[abi:ne180100]<0>(&v123, "end_mask");
  v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v123);
  v29 = v28;
  if (SHIBYTE(v123.__end_cap_.__value_) < 0)
  {
    operator delete(v123.__begin_);
    if (!v29)
    {
LABEL_26:
      v37 = (v9[1] - *v9) >> 3;
      LODWORD(__x.__begin_) = 1;
      std::vector<int>::vector(&v123, v37, (const std::vector<int>::value_type *)&__x);
      std::string::basic_string[abi:ne180100]<0>(&__x, "stride");
      v38 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__x);
      v39 = v38;
      if (SHIBYTE(__x.__end_cap_.__value_) < 0)
      {
        operator delete(__x.__begin_);
        if (!v39)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__x, "begin");
          v46 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a2, (uint64_t)&__x);
          if (SHIBYTE(__x.__end_cap_.__value_) < 0)
            operator delete(__x.__begin_);
          std::string::basic_string[abi:ne180100]<0>(&__x, "end");
          v120 = v8;
          v47 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a2, (uint64_t)&__x);
          if (SHIBYTE(__x.__end_cap_.__value_) < 0)
            operator delete(__x.__begin_);
          v48 = *v9;
          if (v9[1] == *v9)
          {
LABEL_135:
            v100 = MIL::IRTensorValueType::MakeWithShape(*a1, v120, (uint64_t)&__p);
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            v101 = (uint64_t *)operator new(8uLL);
            goto LABEL_161;
          }
          v49 = 0;
          while (1)
          {
            v50 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v48 + 8 * v49) + 24))(*(_QWORD *)(v48 + 8 * v49));
            if (v50 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50))
            {
              v104 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
              v105 = v104;
              end = __p.__end_;
              if (__p.__end_ >= __p.__end_cap_.__value_)
              {
                v108 = ((char *)__p.__end_ - (char *)__p.__begin_) >> 3;
                if ((unint64_t)(v108 + 1) >> 61)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v109 = __p.__end_cap_.__value_ - __p.__begin_;
                if (v109 <= v108 + 1)
                  v109 = v108 + 1;
                if ((int *)((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >= (int *)0x7FFFFFFFFFFFFFF8)
                  v110 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v110 = v109;
                if (v110)
                  v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&__p.__end_cap_, v110);
                else
                  v111 = 0;
                v112 = (int *)&v111[8 * v108];
                v113 = (int *)&v111[8 * v110];
                *(_QWORD *)v112 = v105;
                v107 = v112 + 2;
                begin = __p.__begin_;
                v114 = __p.__end_;
                if (__p.__end_ != __p.__begin_)
                {
                  do
                  {
                    v116 = *((_QWORD *)v114 - 1);
                    v114 -= 2;
                    *((_QWORD *)v112 - 1) = v116;
                    v112 -= 2;
                  }
                  while (v114 != begin);
                  v114 = __p.__begin_;
                }
                __p.__begin_ = v112;
                __p.__end_ = v107;
                __p.__end_cap_.__value_ = v113;
                if (v114)
                  operator delete(v114);
              }
              else
              {
                *(_QWORD *)__p.__end_ = v104;
                v107 = end + 2;
              }
              __p.__end_ = v107;
              v100 = MIL::IRTensorValueType::MakeWithShape(*a1, v120, (uint64_t)&__p);
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              v101 = (uint64_t *)operator new(8uLL);
              goto LABEL_161;
            }
            v51 = v49 >> 6;
            v52 = 1 << v49;
            if ((*((_QWORD *)v125 + (v49 >> 6)) & (1 << v49)) == 0)
              break;
LABEL_134:
            ++v49;
            v48 = *v9;
            if (v49 >= (v9[1] - *v9) >> 3)
              goto LABEL_135;
          }
          v53 = v123.__begin_[v49];
          if (!v53)
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "stride cannot be 0.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
          }
          if ((*((_QWORD *)__src + v51) & v52) != 0)
          {
            if (v53 > 0)
            {
              v54 = 0;
              v55 = 0;
LABEL_57:
              v61 = v54 | v55;
LABEL_63:
              if ((*(_QWORD *)&v124.__begin_[2 * v51] & v52) != 0)
              {
                if (v123.__begin_[v49] < 1)
                {
                  LOBYTE(v65) = -1;
                  v66 = -256;
                  goto LABEL_80;
                }
                v64 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v9 + 8 * v49) + 16))(*(_QWORD *)(*v9 + 8 * v49));
                if (v64)
                {
                  v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 48))(v64);
                  v66 = v65 & 0xFFFFFF00;
LABEL_80:
                  v76 = v65 | v66;
LABEL_90:
                  v84 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v9 + 8 * v49));
                  v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 48))(v84);
                  v86 = v123.__begin_[v49];
                  if (v86 < 1)
                  {
                    if (v61 >= v85)
                      v61 = ~(v61 % v86) + v85;
                    if (v76 < 0)
                      v92 = -1;
                    else
                      v92 = v76;
                    v89 = v92 - v61 + 1;
                  }
                  else
                  {
                    v87 = v61 + -v61 / v86 * v86;
                    if (v61 >= 0)
                      v87 = v61;
                    if (v85 >= v76)
                      v88 = v76;
                    else
                      v88 = v85;
                    v89 = v88 + ~v87;
                  }
                  v93 = v89 / v86;
                  if (v93 < 0)
                  {
                    v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v119, "zero shape error");
                    __cxa_throw(v119, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  v67 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v93 + 1));
                  v68 = __p.__end_;
                  if (__p.__end_ < __p.__end_cap_.__value_)
                    goto LABEL_114;
                  v94 = ((char *)__p.__end_ - (char *)__p.__begin_) >> 3;
                  if ((unint64_t)(v94 + 1) >> 61)
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v95 = __p.__end_cap_.__value_ - __p.__begin_;
                  if (v95 <= v94 + 1)
                    v95 = v94 + 1;
                  if ((int *)((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >= (int *)0x7FFFFFFFFFFFFFF8)
                    v71 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v71 = v95;
                  if (v71)
                    v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&__p.__end_cap_, v71);
                  else
                    v72 = 0;
                  v79 = (int *)&v72[8 * v94];
                  *(_QWORD *)v79 = v67;
                  v80 = v79 + 2;
                  v96 = __p.__begin_;
                  v81 = __p.__end_;
                  if (__p.__end_ == __p.__begin_)
                  {
LABEL_131:
                    __p.__begin_ = v79;
                    __p.__end_ = v80;
                    __p.__end_cap_.__value_ = (int *)&v72[8 * v71];
                    if (v81)
                      operator delete(v81);
                    goto LABEL_133;
                  }
                  do
                  {
                    v97 = *((_QWORD *)v81 - 1);
                    v81 -= 2;
                    *((_QWORD *)v79 - 1) = v97;
                    v79 -= 2;
                  }
                  while (v81 != v96);
LABEL_130:
                  v81 = __p.__begin_;
                  goto LABEL_131;
                }
              }
              else if (v47)
              {
                v73 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v47 + 32))(v47);
                v74 = MIL::IRValueType::AsTensorType(v73);
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v74 + 88))(v74) == 11)
                {
                }
                else
                {
                  v77 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v47 + 32))(v47);
                  v78 = MIL::IRValueType::AsTensorType(v77);
                  v75 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 88))(v78) == 10
                }
                if ((v75 & 0xFF00000000) != 0)
                {
                  v76 = v75;
                  goto LABEL_90;
                }
              }
              v67 = MIL::IRUnknownDimension::Make(*a1, 0);
              v68 = __p.__end_;
              if (__p.__end_ >= __p.__end_cap_.__value_)
              {
                v90 = ((char *)__p.__end_ - (char *)__p.__begin_) >> 3;
                if ((unint64_t)(v90 + 1) >> 61)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v91 = __p.__end_cap_.__value_ - __p.__begin_;
                if (v91 <= v90 + 1)
                  v91 = v90 + 1;
                if ((int *)((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >= (int *)0x7FFFFFFFFFFFFFF8)
                  v71 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v71 = v91;
                if (v71)
                  v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&__p.__end_cap_, v71);
                else
                  v72 = 0;
                v79 = (int *)&v72[8 * v90];
                *(_QWORD *)v79 = v67;
                v80 = v79 + 2;
                v98 = __p.__begin_;
                v81 = __p.__end_;
                if (__p.__end_ == __p.__begin_)
                  goto LABEL_131;
                do
                {
                  v99 = *((_QWORD *)v81 - 1);
                  v81 -= 2;
                  *((_QWORD *)v79 - 1) = v99;
                  v79 -= 2;
                }
                while (v81 != v98);
                goto LABEL_130;
              }
LABEL_114:
              *(_QWORD *)v68 = v67;
              v80 = v68 + 2;
LABEL_133:
              __p.__end_ = v80;
              goto LABEL_134;
            }
            v59 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v9 + 8 * v49) + 16))(*(_QWORD *)(*v9 + 8 * v49));
            if (v59)
            {
              v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 48))(v59);
              v54 = v60 - 1;
              v55 = (v60 - 1) & 0xFFFFFF00;
              goto LABEL_57;
            }
          }
          else if (v46)
          {
            v56 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v46 + 32))(v46);
            v57 = MIL::IRValueType::AsTensorType(v56);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v57 + 88))(v57) == 11)
            {
            }
            else
            {
              v62 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v46 + 32))(v46);
              v63 = MIL::IRValueType::AsTensorType(v62);
              v58 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 88))(v63) == 10
            }
            if ((v58 & 0xFF00000000) != 0)
            {
              v61 = v58;
              goto LABEL_63;
            }
          }
          v67 = MIL::IRUnknownDimension::Make(*a1, 0);
          v68 = __p.__end_;
          if (__p.__end_ >= __p.__end_cap_.__value_)
          {
            v69 = ((char *)__p.__end_ - (char *)__p.__begin_) >> 3;
            if ((unint64_t)(v69 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v70 = __p.__end_cap_.__value_ - __p.__begin_;
            if (v70 <= v69 + 1)
              v70 = v69 + 1;
            if ((int *)((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >= (int *)0x7FFFFFFFFFFFFFF8)
              v71 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v71 = v70;
            if (v71)
              v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&__p.__end_cap_, v71);
            else
              v72 = 0;
            v79 = (int *)&v72[8 * v69];
            *(_QWORD *)v79 = v67;
            v80 = v79 + 2;
            v82 = __p.__begin_;
            v81 = __p.__end_;
            if (__p.__end_ == __p.__begin_)
              goto LABEL_131;
            do
            {
              v83 = *((_QWORD *)v81 - 1);
              v81 -= 2;
              *((_QWORD *)v79 - 1) = v83;
              v79 -= 2;
            }
            while (v81 != v82);
            goto LABEL_130;
          }
          goto LABEL_114;
        }
      }
      else if (!v38)
      {
        goto LABEL_39;
      }
      std::string::basic_string[abi:ne180100]<0>(&__x, "stride");
      v42 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a2, (uint64_t)&__x);
      v43 = (MIL::IRValue *)v42;
      if (SHIBYTE(__x.__end_cap_.__value_) < 0)
      {
        operator delete(__x.__begin_);
        if (v43)
          goto LABEL_36;
      }
      else if (v42)
      {
LABEL_36:
        v44 = (MIL::Validation *)MIL::IRValue::AsTensor(v43);
        MIL::Validation::GetIntTensorValueCasted(v44, v45, (char **)&__x);
        if (v123.__begin_)
        {
          v123.__end_ = v123.__begin_;
          operator delete(v123.__begin_);
        }
        v123 = __x;
        goto LABEL_39;
      }
      v121 = MIL::IRUnknownDimension::Make(*a1, 0);
      std::vector<MIL::IRDimension const*>::vector(&__x, v18, &v121);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      __p = __x;
      v100 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&__p);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v101 = (uint64_t *)operator new(8uLL);
LABEL_161:
      *a3 = v101;
      *v101 = v100;
      v117 = v101 + 1;
      a3[1] = v117;
      a3[2] = v117;
      if (v123.__begin_)
      {
        v123.__end_ = v123.__begin_;
        operator delete(v123.__begin_);
      }
      goto LABEL_163;
    }
  }
  else if (!v28)
  {
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(&v123, "end_mask");
  v32 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a2, (uint64_t)&v123);
  v33 = (MIL::IRValue *)v32;
  if (SHIBYTE(v123.__end_cap_.__value_) < 0)
  {
    operator delete(v123.__begin_);
    if (v33)
      goto LABEL_25;
  }
  else if (v32)
  {
LABEL_25:
    v34 = (uint64_t *)MIL::IRValue::AsTensor(v33);
    v35 = (_BYTE *)MIL::IRTensorValue::GetDataView<BOOL>(v34);
    std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(&v124, v35, &v35[v36], v36);
    goto LABEL_26;
  }
  __x.__begin_ = (std::vector<int>::pointer)MIL::IRUnknownDimension::Make(*a1, 0);
  std::vector<MIL::IRDimension const*>::vector(&v123, v18, &__x);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  __p = v123;
  v102 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v103 = (uint64_t *)operator new(8uLL);
  *a3 = v103;
  *v103++ = v102;
  a3[1] = v103;
  a3[2] = v103;
LABEL_163:
  if (v124.__begin_)
    operator delete(v124.__begin_);
LABEL_165:
  if (__src)
    operator delete(__src);
LABEL_167:
  if (v125)
    operator delete(v125);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1E07C625C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  void *v43;

  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  v43 = *(void **)(v41 - 120);
  if (v43)
    operator delete(v43);
  if (a33)
    operator delete(a33);
  if (a36)
    operator delete(a36);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceBySize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  MIL::IRValue *SingleValue;
  uint64_t v13;
  MIL::IRValue *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unsigned int v41;
  MIL::MILContext *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  int v49;
  int v50;
  unsigned int *v51;
  int v52;
  int v53;
  int v54;
  int *v55;
  int v56;
  int v57;
  int v58;
  __int16 *v59;
  int v60;
  int v61;
  int v62;
  __int16 *v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  int v68;
  int v69;
  int v70;
  char *v71;
  int v72;
  uint64_t *v73;
  _QWORD *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  std::logic_error *v99;
  std::logic_error *v100;
  std::logic_error *v101;
  _QWORD *v102;
  _QWORD *v103;
  std::logic_error *v104;
  _QWORD *v105;
  std::logic_error *v106;
  void *exception;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::logic_error *v111;
  std::logic_error *v112;
  _QWORD *v113;
  int v114;
  _QWORD v115[3];
  __int128 v116;
  uint64_t Data;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  char *v130;
  std::string v131;
  __int128 __p;
  char *v133;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v133) < 0)
    operator delete((void *)__p);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v11 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v129 = 0uLL;
  v130 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "begin");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v133) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "begin");
  v13 = MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  if (SHIBYTE(v133) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "size");
  v14 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v133) < 0)
    operator delete((void *)__p);
  v114 = v10;
  v113 = a4;
  if (!v14)
  {
    v24 = *v11;
    v23 = v11[1];
    v131.__r_.__value_.__r.__words[0] = MIL::IRUnknownDimension::Make(*a1, 0);
    std::vector<MIL::IRDimension const*>::vector(&__p, (v23 - v24) >> 3, &v131);
    v129 = __p;
    v130 = v133;
    v25 = v113;
    v26 = MIL::IRTensorValueType::MakeWithShape(*a1, v114, (uint64_t)&v129);
    *v113 = 0;
    v113[1] = 0;
    v113[2] = 0;
    v27 = operator new(8uLL);
    goto LABEL_122;
  }
  v127 = 0;
  v128 = 0;
  v125 = 0;
  v126 = 0;
  v123 = 0;
  v124 = 0;
  v121 = 0;
  v122 = 0;
  v119 = 0;
  v120 = 0;
  Data = 0;
  v118 = 0;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
  v17 = v16;
  if ((v16 - 12) <= 0xFFFFFFFC)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v108 = a2[1];
    *(_QWORD *)&v116 = *a2;
    *((_QWORD *)&v116 + 1) = v108;
    if (v108)
    {
      v109 = (unint64_t *)(v108 + 8);
      do
        v110 = __ldxr(v109);
      while (__stxr(v110 + 1, v109));
    }
    std::string::basic_string[abi:ne180100]<0>(v115, "Incompatible dtype for begin, size");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v116, (uint64_t)v115, 315);
  }
  if (v16 == 11)
  {
    v18 = (uint64_t *)MIL::IRValue::AsTensor(v14);
    Data = MIL::IRTensorValue::GetDataView<int>(v18);
    v118 = v19;
    if (SingleValue)
    {
      v20 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
      v119 = MIL::IRTensorValue::GetDataView<int>(v20);
      v120 = v21;
      v22 = v118;
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  if (v16 != 10)
  {
    v33 = (uint64_t *)MIL::IRValue::AsTensor(v14);
    v125 = MIL::IRTensorValue::GetDataView<signed char>(v33);
    v126 = v34;
    if (SingleValue)
    {
      v35 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
      v127 = MIL::IRTensorValue::GetDataView<signed char>(v35);
      v128 = v21;
      v22 = v126;
LABEL_21:
      if (v21 == v22)
        goto LABEL_22;
LABEL_139:
      v112 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v112, "Length of begin is not equal to the length of size.");
      v112->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v112, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
LABEL_22:
    v32 = 0;
    goto LABEL_23;
  }
  v28 = (uint64_t *)MIL::IRValue::AsTensor(v14);
  v121 = MIL::IRTensorValue::GetDataView<short>(v28);
  v122 = v29;
  if (SingleValue)
  {
    v30 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
    v123 = MIL::IRTensorValue::GetDataView<short>(v30);
    v124 = v31;
    if (v31 != v122)
      goto LABEL_139;
  }
  v32 = 1;
LABEL_23:
  std::vector<std::string const*>::reserve((void **)&v129, (v11[1] - *v11) >> 3);
  v36 = *v11;
  if (v11[1] == *v11)
  {
LABEL_104:
    v26 = MIL::IRTensorValueType::MakeWithShape(*a1, v114, (uint64_t)&v129);
    v25 = v113;
    *v113 = 0;
    v113[1] = 0;
    v113[2] = 0;
    v27 = operator new(8uLL);
    goto LABEL_122;
  }
  v37 = 0;
  while (1)
  {
    v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v36 + 8 * v37) + 16))(*(_QWORD *)(v36 + 8 * v37));
    v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v11 + 8 * v37) + 24))(*(_QWORD *)(*v11 + 8 * v37));
    if (v39)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39))
        break;
    }
    if (v38)
      v40 = SingleValue == 0;
    else
      v40 = 1;
    if (!v40)
    {
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38);
      v50 = v49;
      if (v17 == 11)
      {
        v51 = (unsigned int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v119, v37);
        if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v51, v50))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Begin axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 89);
          MIL::Util::Span<int const,18446744073709551615ul>::At(&v119, v37);
          v98 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)" for input_ndim: ", 17);
          std::ostream::operator<<();
          v99 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(v99, &v131);
          v99->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v99, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
        }
        v52 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v119, v37);
        v53 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v119, v37);
        v54 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v37);
        v55 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v37);
        v56 = v53 + (v50 & (v52 >> 31));
        v57 = *v55;
        if ((v54 & 0x80000000) == 0)
        {
          if (v57 + v56 > v50)
            goto LABEL_138;
          v58 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v37);
          goto LABEL_83;
        }
        if (v57 != -1)
          goto LABEL_140;
LABEL_82:
        v58 = v50 - v56;
        goto LABEL_83;
      }
      if (v32)
      {
        v59 = (__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v123, v37);
        if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v59, v50))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Begin axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 89);
          MIL::Util::Span<short const,18446744073709551615ul>::At(&v123, v37);
          v105 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)" for input_ndim: ", 17);
          std::ostream::operator<<();
          v106 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(v106, &v131);
          v106->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v106, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
        }
        v60 = *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v123, v37);
        v61 = *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v123, v37);
        v62 = *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v121, v37);
        v63 = (__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v121, v37);
        v56 = (v50 & (v60 >> 31)) + v61;
        v64 = *v63;
        if (v62 < 0)
        {
          if (v64 != -1)
            goto LABEL_140;
          goto LABEL_82;
        }
        if (v56 + v64 > v50)
          goto LABEL_138;
        v58 = *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v121, v37);
      }
      else
      {
        v67 = (char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v127, v37);
        if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v67, v50))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
          v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Begin axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 89);
          v131.__r_.__value_.__s.__data_[0] = *(_BYTE *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v127, v37);
          v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)&v131, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)" for input_ndim: ", 17);
          std::ostream::operator<<();
          v104 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(v104, &v131);
          v104->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v104, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
        }
        v68 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v127, v37);
        v69 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v127, v37);
        v70 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v125, v37);
        v71 = (char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v125, v37);
        v56 = (v50 & (v68 >> 31)) + v69;
        v72 = *v71;
        if (v70 < 0)
        {
          if (v72 != -1)
          {
LABEL_140:
            v111 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v111, "size[i] cannot be negative value except -1.");
LABEL_141:
            v111->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v111, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
          }
          goto LABEL_82;
        }
        if (v56 + v72 > v50)
        {
LABEL_138:
          v111 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v111, "begin[i] + size[i] is required to be <= input dimension.");
          goto LABEL_141;
        }
        v58 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v125, v37);
      }
LABEL_83:
      v43 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v58);
      v44 = (uint64_t *)*((_QWORD *)&v129 + 1);
      if (*((_QWORD *)&v129 + 1) >= (unint64_t)v130)
      {
        v78 = (uint64_t)(*((_QWORD *)&v129 + 1) - v129) >> 3;
        if ((unint64_t)(v78 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v79 = (uint64_t)&v130[-v129] >> 2;
        if (v79 <= v78 + 1)
          v79 = v78 + 1;
        if ((unint64_t)&v130[-v129] >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v79;
        if (v47)
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v130, v47);
        else
          v48 = 0;
        v73 = (uint64_t *)&v48[8 * v78];
        *v73 = v43;
        v74 = v73 + 1;
        v75 = (char *)*((_QWORD *)&v129 + 1);
        v80 = (char *)v129;
        if (*((_QWORD *)&v129 + 1) != (_QWORD)v129)
        {
          do
          {
            v81 = *((_QWORD *)v75 - 1);
            v75 -= 8;
            *--v73 = v81;
          }
          while (v75 != v80);
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      goto LABEL_84;
    }
    if (v17 == 11)
    {
      v41 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v37);
      if ((v41 & 0x80000000) == 0)
        goto LABEL_34;
    }
    else if (v32)
    {
      v41 = *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v121, v37);
      if ((v41 & 0x80000000) == 0)
        goto LABEL_34;
    }
    else
    {
      v41 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v125, v37);
      if ((v41 & 0x80000000) == 0)
      {
LABEL_34:
        v42 = (MIL::MILContext *)v41;
        if (v38 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38) < (unint64_t)v41)
        {
          v100 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v100, "size[i] is required to be <= input dimension when begin is unknown.");
          v100->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v100, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
        }
        v43 = MIL::IRConstantDimension::Make(*a1, v42);
        v44 = (uint64_t *)*((_QWORD *)&v129 + 1);
        if (*((_QWORD *)&v129 + 1) >= (unint64_t)v130)
        {
          v45 = (uint64_t)(*((_QWORD *)&v129 + 1) - v129) >> 3;
          if ((unint64_t)(v45 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v46 = (uint64_t)&v130[-v129] >> 2;
          if (v46 <= v45 + 1)
            v46 = v45 + 1;
          if ((unint64_t)&v130[-v129] >= 0x7FFFFFFFFFFFFFF8)
            v47 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v47 = v46;
          if (v47)
            v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v130, v47);
          else
            v48 = 0;
          v73 = (uint64_t *)&v48[8 * v45];
          *v73 = v43;
          v74 = v73 + 1;
          v75 = (char *)*((_QWORD *)&v129 + 1);
          v76 = (char *)v129;
          if (*((_QWORD *)&v129 + 1) != (_QWORD)v129)
          {
            do
            {
              v77 = *((_QWORD *)v75 - 1);
              v75 -= 8;
              *--v73 = v77;
            }
            while (v75 != v76);
            goto LABEL_100;
          }
          goto LABEL_101;
        }
        goto LABEL_84;
      }
    }
    if (v41 != -1)
    {
      v101 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v101, "size[i] cannot be negative value except -1.");
      v101->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v101, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v43 = MIL::IRUnknownDimension::Make(*a1, 0);
    v44 = (uint64_t *)*((_QWORD *)&v129 + 1);
    if (*((_QWORD *)&v129 + 1) >= (unint64_t)v130)
    {
      v65 = (uint64_t)(*((_QWORD *)&v129 + 1) - v129) >> 3;
      if ((unint64_t)(v65 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v66 = (uint64_t)&v130[-v129] >> 2;
      if (v66 <= v65 + 1)
        v66 = v65 + 1;
      if ((unint64_t)&v130[-v129] >= 0x7FFFFFFFFFFFFFF8)
        v47 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v47 = v66;
      if (v47)
        v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v130, v47);
      else
        v48 = 0;
      v73 = (uint64_t *)&v48[8 * v65];
      *v73 = v43;
      v74 = v73 + 1;
      v75 = (char *)*((_QWORD *)&v129 + 1);
      v82 = (char *)v129;
      if (*((_QWORD *)&v129 + 1) != (_QWORD)v129)
      {
        do
        {
          v83 = *((_QWORD *)v75 - 1);
          v75 -= 8;
          *--v73 = v83;
        }
        while (v75 != v82);
LABEL_100:
        v75 = (char *)v129;
      }
LABEL_101:
      *(_QWORD *)&v129 = v73;
      *((_QWORD *)&v129 + 1) = v74;
      v130 = &v48[8 * v47];
      if (v75)
        operator delete(v75);
      goto LABEL_103;
    }
LABEL_84:
    *v44 = v43;
    v74 = v44 + 1;
LABEL_103:
    *((_QWORD *)&v129 + 1) = v74;
    ++v37;
    v36 = *v11;
    if (v37 >= (v11[1] - *v11) >> 3)
      goto LABEL_104;
  }
  v84 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
  v85 = v84;
  v86 = *((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1) >= (unint64_t)v130)
  {
    v88 = (uint64_t)(*((_QWORD *)&v129 + 1) - v129) >> 3;
    if ((unint64_t)(v88 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v89 = (uint64_t)&v130[-v129] >> 2;
    if (v89 <= v88 + 1)
      v89 = v88 + 1;
    if ((unint64_t)&v130[-v129] >= 0x7FFFFFFFFFFFFFF8)
      v90 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v90 = v89;
    if (v90)
      v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v130, v90);
    else
      v91 = 0;
    v92 = (uint64_t *)&v91[8 * v88];
    v93 = &v91[8 * v90];
    *v92 = v85;
    v87 = v92 + 1;
    v94 = (char *)*((_QWORD *)&v129 + 1);
    v95 = (char *)v129;
    if (*((_QWORD *)&v129 + 1) != (_QWORD)v129)
    {
      do
      {
        v96 = *((_QWORD *)v94 - 1);
        v94 -= 8;
        *--v92 = v96;
      }
      while (v94 != v95);
      v94 = (char *)v129;
    }
    *(_QWORD *)&v129 = v92;
    *((_QWORD *)&v129 + 1) = v87;
    v130 = v93;
    if (v94)
      operator delete(v94);
  }
  else
  {
    **((_QWORD **)&v129 + 1) = v84;
    v87 = (_QWORD *)(v86 + 8);
  }
  *((_QWORD *)&v129 + 1) = v87;
  v26 = MIL::IRTensorValueType::MakeWithShape(*a1, v114, (uint64_t)&v129);
  v25 = v113;
  *v113 = 0;
  v113[1] = 0;
  v113[2] = 0;
  v27 = operator new(8uLL);
LABEL_122:
  *v25 = v27;
  *v27 = v26;
  v97 = v27 + 1;
  v25[1] = v97;
  v25[2] = v97;
  if ((_QWORD)v129)
  {
    *((_QWORD *)&v129 + 1) = v129;
    operator delete((void *)v129);
  }
}

void sub_1E07C70F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  void *v46;
  int v47;

  if (a40 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a41);
      if (a32)
        operator delete(a32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

uint64_t MIL::Util::Span<short const,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + 2 * a2;
}

void sub_1E07C72F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Util::Span<signed char const,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + a2;
}

void sub_1E07C7364(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSlidingWindows(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  uint64_t v9;
  MIL::IRValue *SingleValue;
  const void *v11;
  int v12;
  MIL::IRValue *v13;
  const void *v14;
  int v15;
  MIL::IRValue *v16;
  const void *v17;
  int v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (***v26)(MIL::MILContextImpl *__hidden);
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  std::logic_error *exception;
  uint64_t v33;
  void *__p;
  void *v35;
  uint64_t v36;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v11 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  v12 = MIL::IRValue::GetScalar<int>(v11);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "size");
  v13 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v14 = (const void *)MIL::IRValue::AsTensor(v13);
  v15 = MIL::IRValue::GetScalar<int>(v14);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "stride");
  v16 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v17 = (const void *)MIL::IRValue::AsTensor(v16);
  v18 = MIL::IRValue::GetScalar<int>(v17);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  v19 = *(const void **)v9;
  v20 = *(_QWORD *)(v9 + 8);
  v21 = v20 - *(_QWORD *)v9;
  v22 = v12 + (((unint64_t)v21 >> 3) & (v12 >> 31));
  __p = 0;
  v35 = 0;
  v36 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, v19, v20, v21 >> 3);
  v23 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v22);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  v25 = v24;
  if (v24)
  {
    if (v15 > (*(int (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "size cannot exceed the input dimension.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v26 = *a1;
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25);
    v28 = MIL::IRConstantDimension::Make(v26, (MIL::MILContext *)((v27 - v15) / v18 + 1));
  }
  else
  {
    v28 = MIL::IRUnknownDimension::Make(*a1, 0);
  }
  *((_QWORD *)__p + v22) = v28;
  v29 = (char *)__p;
  v33 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v15);
  std::vector<MIL::IRDimension const*>::insert((uint64_t)&__p, &v29[8 * v22 + 8], &v33);
  v30 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v31 = (uint64_t *)operator new(8uLL);
  *a3 = v31;
  *v31++ = v30;
  a3[1] = v31;
  a3[2] = v31;
  if (__p)
  {
    v35 = __p;
    operator delete(__p);
  }
}

void sub_1E07C7610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSpaceToBatch(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  char **v8;
  MIL::IRValue *SingleValue;
  uint64_t *v10;
  uint64_t Data;
  unint64_t v12;
  unint64_t v13;
  MIL::IRDimension **v14;
  MIL::IRDimension **v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  MIL::IRValue *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  int v38;
  void (***v39)(MIL::MILContextImpl *__hidden);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void *v43;
  int64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  int64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  std::logic_error *exception;
  int v77;
  void *v78[2];
  char v79;
  void *__p;
  void *__dst;
  unint64_t v82;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v82) < 0)
    operator delete(__p);
  v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v8 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "block_shape");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v10 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  Data = MIL::IRTensorValue::GetDataView<int>(v10);
  v13 = v12;
  if (SHIBYTE(v82) < 0)
    operator delete(__p);
  v14 = (MIL::IRDimension **)*v8;
  v15 = (MIL::IRDimension **)v8[1];
  if (v13 > (((char *)v15 - *v8) >> 3) - 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "size of the block_shape cannot exceed the size of input spatial dimensions.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (v13)
  {
    v16 = 4 * v13;
    v17 = 1;
    v18 = (int *)Data;
    do
    {
      v19 = *v18++;
      v17 *= v19;
      v16 -= 4;
    }
    while (v16);
  }
  else
  {
    v17 = 1;
  }
  if (v15 == v14
    || (v20 = MIL::IRDimension::AsConstant(*v14),
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20),
        v22 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v21 * v17)),
        (unint64_t)(v8[1] - *v8) <= 8))
  {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  v23 = v22;
  v24 = *((_QWORD *)*v8 + 1);
  v25 = operator new(0x10uLL);
  __dst = v25 + 2;
  v82 = (unint64_t)(v25 + 2);
  *v25 = v23;
  v25[1] = v24;
  __p = v25;
  std::string::basic_string[abi:ne180100]<0>(v78, "paddings");
  v26 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)v78);
  v27 = (uint64_t *)MIL::IRValue::AsTensor(v26);
  v28 = MIL::IRTensorValue::GetDataView<int>(v27);
  if ((v79 & 0x80000000) == 0)
  {
    if (!v13)
      goto LABEL_75;
LABEL_17:
    v29 = 0;
    while (1)
    {
      v30 = v29 + 2;
      if (v29 + 2 >= (unint64_t)((v8[1] - *v8) >> 3))
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&(*v8)[8 * v30] + 16))(*(_QWORD *)&(*v8)[8 * v30]);
      if (v31)
      {
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 48))(v31);
        v33 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)((*(_DWORD *)(v28 + 8 * v29) + *(_DWORD *)(v28 + 8 * v29 + 4) + v32)/ *(_DWORD *)(Data + 4 * v29)));
        v34 = v33;
        v35 = (char *)__dst;
        if ((unint64_t)__dst >= v82)
        {
          v44 = ((_BYTE *)__dst - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v44 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v45 = (uint64_t)(v82 - (_QWORD)__p) >> 2;
          if (v45 <= v44 + 1)
            v45 = v44 + 1;
          if (v82 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
            v46 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v46 = v45;
          if (v46)
            v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v82, v46);
          else
            v47 = 0;
          v52 = (uint64_t *)&v47[8 * v44];
          *v52 = v34;
          v36 = v52 + 1;
          v54 = (char *)__p;
          v53 = (char *)__dst;
          if (__dst != __p)
          {
            do
            {
              v55 = *((_QWORD *)v53 - 1);
              v53 -= 8;
              *--v52 = v55;
            }
            while (v53 != v54);
            v53 = (char *)__p;
          }
          __p = v52;
          __dst = v36;
          v82 = (unint64_t)&v47[8 * v46];
          if (v53)
            operator delete(v53);
        }
        else
        {
          *(_QWORD *)__dst = v33;
          v36 = v35 + 8;
        }
        __dst = v36;
      }
      else
      {
        if (v30 >= (v8[1] - *v8) >> 3)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        v37 = MIL::IRDimension::AsUnknown(*(MIL::IRDimension **)&(*v8)[8 * v30]);
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
        v39 = *a1;
        if (v38)
        {
          v40 = MIL::IRUnknownDimension::Make(v39, (MIL::MILContext *)1);
          v41 = v40;
          v42 = (char *)__dst;
          if ((unint64_t)__dst >= v82)
          {
            v56 = ((_BYTE *)__dst - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v56 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v57 = (uint64_t)(v82 - (_QWORD)__p) >> 2;
            if (v57 <= v56 + 1)
              v57 = v56 + 1;
            if (v82 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
              v58 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v58 = v57;
            if (v58)
              v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v82, v58);
            else
              v59 = 0;
            v64 = (uint64_t *)&v59[8 * v56];
            *v64 = v41;
            v43 = v64 + 1;
            v66 = (char *)__p;
            v65 = (char *)__dst;
            if (__dst != __p)
            {
              do
              {
                v67 = *((_QWORD *)v65 - 1);
                v65 -= 8;
                *--v64 = v67;
              }
              while (v65 != v66);
              v65 = (char *)__p;
            }
            __p = v64;
            __dst = v43;
            v82 = (unint64_t)&v59[8 * v58];
            if (v65)
              operator delete(v65);
          }
          else
          {
            *(_QWORD *)__dst = v40;
            v43 = v42 + 8;
          }
          __dst = v43;
          v68 = MIL::IRTensorValueType::MakeWithShape(*a1, v77, (uint64_t)&__p);
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          v69 = (uint64_t *)operator new(8uLL);
          *a3 = v69;
          *v69++ = v68;
          a3[1] = v69;
          a3[2] = v69;
          if ((v38 & 1) != 0)
            goto LABEL_76;
        }
        else
        {
          v48 = MIL::IRUnknownDimension::Make(v39, 0);
          v49 = v48;
          v50 = (char *)__dst;
          if ((unint64_t)__dst >= v82)
          {
            v60 = ((_BYTE *)__dst - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v60 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v61 = (uint64_t)(v82 - (_QWORD)__p) >> 2;
            if (v61 <= v60 + 1)
              v61 = v60 + 1;
            if (v82 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
              v62 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v62 = v61;
            if (v62)
              v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v82, v62);
            else
              v63 = 0;
            v70 = (uint64_t *)&v63[8 * v60];
            *v70 = v49;
            v51 = v70 + 1;
            v72 = (char *)__p;
            v71 = (char *)__dst;
            if (__dst != __p)
            {
              do
              {
                v73 = *((_QWORD *)v71 - 1);
                v71 -= 8;
                *--v70 = v73;
              }
              while (v71 != v72);
              v71 = (char *)__p;
            }
            __p = v70;
            __dst = v51;
            v82 = (unint64_t)&v63[8 * v62];
            if (v71)
              operator delete(v71);
          }
          else
          {
            *(_QWORD *)__dst = v48;
            v51 = v50 + 8;
          }
          __dst = v51;
        }
      }
      if (++v29 == v13)
        goto LABEL_75;
    }
  }
  operator delete(v78[0]);
  if (v13)
    goto LABEL_17;
LABEL_75:
  std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)&__p, (uint64_t)__dst, &(*v8)[8 * v13 + 16], v8[1], (v8[1] - &(*v8)[8 * v13 + 16]) >> 3);
  v74 = MIL::IRTensorValueType::MakeWithShape(*a1, v77, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v75 = (uint64_t *)operator new(8uLL);
  *a3 = v75;
  *v75++ = v74;
  a3[1] = v75;
  a3[2] = v75;
LABEL_76:
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
}

void sub_1E07C7BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSpaceToDepth(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  uint64_t v9;
  MIL::IRValue *SingleValue;
  const void *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  std::logic_error *exception;
  std::logic_error *v78;
  std::string v79;
  void *__p[2];
  char v81;
  uint64_t *v82;
  uint64_t *v83;
  char *v84;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v81 < 0)
    operator delete(__p[0]);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  std::string::basic_string[abi:ne180100]<0>(__p, "block_size");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)__p);
  v11 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  v12 = MIL::IRValue::GetScalar<int>(v11);
  if (v81 < 0)
    operator delete(__p[0]);
  if (*(_QWORD *)(v9 + 8) == *(_QWORD *)v9)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v13 = **(_QWORD **)v9;
  v14 = (uint64_t *)operator new(8uLL);
  v82 = v14;
  *v14 = v13;
  v83 = v14 + 1;
  v84 = (char *)(v14 + 1);
  if (*(_QWORD *)(v9 + 8) - *(_QWORD *)v9 <= 8uLL)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v9 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v9 + 8));
  if (!v15)
  {
    v17 = MIL::IRUnknownDimension::Make(*a1, 0);
    v18 = v83;
    if (v83 >= (uint64_t *)v84)
    {
      v24 = v83 - v82;
      if ((unint64_t)(v24 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v25 = (v84 - (char *)v82) >> 2;
      if (v25 <= v24 + 1)
        v25 = v24 + 1;
      if ((unint64_t)(v84 - (char *)v82) >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v84, v26);
      else
        v27 = 0;
      v28 = (uint64_t *)&v27[8 * v24];
      v29 = &v27[8 * v26];
      *v28 = v17;
      v23 = v28 + 1;
      v33 = (char *)v82;
      v30 = (char *)v83;
      if (v83 == v82)
        goto LABEL_35;
      do
      {
        v34 = *((_QWORD *)v30 - 1);
        v30 -= 8;
        *--v28 = v34;
      }
      while (v30 != v33);
      goto LABEL_34;
    }
LABEL_18:
    *v18 = v17;
    v23 = v18 + 1;
    goto LABEL_37;
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
  v17 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v16 * (v12 * v12)));
  v18 = v83;
  if (v83 < (uint64_t *)v84)
    goto LABEL_18;
  v19 = v83 - v82;
  if ((unint64_t)(v19 + 1) >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v20 = (v84 - (char *)v82) >> 2;
  if (v20 <= v19 + 1)
    v20 = v19 + 1;
  if ((unint64_t)(v84 - (char *)v82) >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v20;
  if (v21)
    v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v84, v21);
  else
    v22 = 0;
  v28 = (uint64_t *)&v22[8 * v19];
  v29 = &v22[8 * v21];
  *v28 = v17;
  v23 = v28 + 1;
  v31 = (char *)v82;
  v30 = (char *)v83;
  if (v83 == v82)
    goto LABEL_35;
  do
  {
    v32 = *((_QWORD *)v30 - 1);
    v30 -= 8;
    *--v28 = v32;
  }
  while (v30 != v31);
LABEL_34:
  v30 = (char *)v82;
LABEL_35:
  v82 = v28;
  v83 = v23;
  v84 = v29;
  if (v30)
    operator delete(v30);
LABEL_37:
  v83 = v23;
  if (*(_QWORD *)(v9 + 8) - *(_QWORD *)v9 <= 0x10uLL)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v9 + 16) + 16))(*(_QWORD *)(*(_QWORD *)v9 + 16));
  if (!v35)
  {
    v37 = MIL::IRUnknownDimension::Make(*a1, 0);
    v38 = v83;
    if (v83 >= (uint64_t *)v84)
    {
      v44 = v83 - v82;
      if ((unint64_t)(v44 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v45 = (v84 - (char *)v82) >> 2;
      if (v45 <= v44 + 1)
        v45 = v44 + 1;
      if ((unint64_t)(v84 - (char *)v82) >= 0x7FFFFFFFFFFFFFF8)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v45;
      if (v46)
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v84, v46);
      else
        v47 = 0;
      v48 = (uint64_t *)&v47[8 * v44];
      v49 = &v47[8 * v46];
      *v48 = v37;
      v43 = v48 + 1;
      v53 = (char *)v82;
      v50 = (char *)v83;
      if (v83 == v82)
        goto LABEL_67;
      do
      {
        v54 = *((_QWORD *)v50 - 1);
        v50 -= 8;
        *--v48 = v54;
      }
      while (v50 != v53);
      goto LABEL_66;
    }
LABEL_50:
    *v38 = v37;
    v43 = v38 + 1;
    goto LABEL_69;
  }
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
  if (v36 % v12)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"block_size is not divisible by the first space dimension.", 57);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v79);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v37 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v36 / v12));
  v38 = v83;
  if (v83 < (uint64_t *)v84)
    goto LABEL_50;
  v39 = v83 - v82;
  if ((unint64_t)(v39 + 1) >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v40 = (v84 - (char *)v82) >> 2;
  if (v40 <= v39 + 1)
    v40 = v39 + 1;
  if ((unint64_t)(v84 - (char *)v82) >= 0x7FFFFFFFFFFFFFF8)
    v41 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v41 = v40;
  if (v41)
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v84, v41);
  else
    v42 = 0;
  v48 = (uint64_t *)&v42[8 * v39];
  v49 = &v42[8 * v41];
  *v48 = v37;
  v43 = v48 + 1;
  v51 = (char *)v82;
  v50 = (char *)v83;
  if (v83 == v82)
    goto LABEL_67;
  do
  {
    v52 = *((_QWORD *)v50 - 1);
    v50 -= 8;
    *--v48 = v52;
  }
  while (v50 != v51);
LABEL_66:
  v50 = (char *)v82;
LABEL_67:
  v82 = v48;
  v83 = v43;
  v84 = v49;
  if (v50)
    operator delete(v50);
LABEL_69:
  v83 = v43;
  if (*(_QWORD *)(v9 + 8) - *(_QWORD *)v9 <= 0x18uLL)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v9 + 24) + 16))(*(_QWORD *)(*(_QWORD *)v9 + 24));
  if (!v55)
  {
    v57 = MIL::IRUnknownDimension::Make(*a1, 0);
    v58 = v83;
    if (v83 >= (uint64_t *)v84)
    {
      v64 = v83 - v82;
      if ((unint64_t)(v64 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v65 = (v84 - (char *)v82) >> 2;
      if (v65 <= v64 + 1)
        v65 = v64 + 1;
      if ((unint64_t)(v84 - (char *)v82) >= 0x7FFFFFFFFFFFFFF8)
        v66 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      if (v66)
        v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v84, v66);
      else
        v67 = 0;
      v68 = (uint64_t *)&v67[8 * v64];
      v69 = &v67[8 * v66];
      *v68 = v57;
      v63 = v68 + 1;
      v73 = (char *)v82;
      v70 = (char *)v83;
      if (v83 == v82)
        goto LABEL_99;
      do
      {
        v74 = *((_QWORD *)v70 - 1);
        v70 -= 8;
        *--v68 = v74;
      }
      while (v70 != v73);
      goto LABEL_98;
    }
LABEL_82:
    *v58 = v57;
    v63 = v58 + 1;
    goto LABEL_101;
  }
  v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 48))(v55);
  if (v56 % v12)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"block_size is not divisible by the second space dimension.", 58);
    v78 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(v78, &v79);
    v78->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v78, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v57 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v56 / v12));
  v58 = v83;
  if (v83 < (uint64_t *)v84)
    goto LABEL_82;
  v59 = v83 - v82;
  if ((unint64_t)(v59 + 1) >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v60 = (v84 - (char *)v82) >> 2;
  if (v60 <= v59 + 1)
    v60 = v59 + 1;
  if ((unint64_t)(v84 - (char *)v82) >= 0x7FFFFFFFFFFFFFF8)
    v61 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v61 = v60;
  if (v61)
    v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v84, v61);
  else
    v62 = 0;
  v68 = (uint64_t *)&v62[8 * v59];
  v69 = &v62[8 * v61];
  *v68 = v57;
  v63 = v68 + 1;
  v71 = (char *)v82;
  v70 = (char *)v83;
  if (v83 == v82)
    goto LABEL_99;
  do
  {
    v72 = *((_QWORD *)v70 - 1);
    v70 -= 8;
    *--v68 = v72;
  }
  while (v70 != v71);
LABEL_98:
  v70 = (char *)v82;
LABEL_99:
  v82 = v68;
  v83 = v63;
  v84 = v69;
  if (v70)
    operator delete(v70);
LABEL_101:
  v83 = v63;
  v75 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&v82);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v76 = (uint64_t *)operator new(8uLL);
  *a3 = v76;
  *v76++ = v75;
  a3[1] = v76;
  a3[2] = v76;
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
}

void sub_1E07C83DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;
  void *v25;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      v25 = *(void **)(v23 - 104);
      if (v25)
      {
        *(_QWORD *)(v23 - 96) = v25;
        operator delete(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSplit(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, void **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v9;
  uint64_t v10;
  MIL::IRValue *SingleValue;
  const void *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  const void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned __int8 *v24;
  MIL::IRValue *v25;
  uint64_t *v26;
  int *Data;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  MIL::IRValue *v36;
  const void *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  MIL::MILContext *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  MIL::IRValue *v57;
  const void *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (***v63)(MIL::MILContextImpl *__hidden);
  unint64_t v64;
  uint64_t v65;
  void *exception;
  void *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  _QWORD v84[3];
  __int128 v85;
  _QWORD v86[3];
  __int128 v87;
  _QWORD v88[3];
  __int128 v89;
  _QWORD v90[3];
  __int128 v91;
  std::string v92[2];
  int v93;
  uint64_t v94[2];
  void *__p[2];
  char v96;
  uint64_t v97[2];
  void *v98;
  void *v99;
  uint64_t v100;
  int v101;
  void *v102[2];
  char v103;
  int v104;

  std::string::basic_string[abi:ne180100]<0>(v102, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v102);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v103 < 0)
    operator delete(v102[0]);
  v83 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 88))(v9);
  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  std::string::basic_string[abi:ne180100]<0>(v102, "axis");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v102);
  v12 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  v13 = MIL::IRValue::GetScalar<int>(v12);
  if (v103 < 0)
    operator delete(v102[0]);
  std::string::basic_string[abi:ne180100]<0>(v102, "num_splits");
  v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v102);
  if (v103 < 0)
    operator delete(v102[0]);
  MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v102);
  if (v14)
  {
    v15 = (std::__shared_weak_count *)a2[1];
    v97[0] = *a2;
    v97[1] = (uint64_t)v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "num_splits");
    v18 = (const void *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)__p);
    MIL::MILResult::operator=((uint64_t)v102, (uint64_t)&v98);
    v104 = v101;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v98);
    if (v96 < 0)
      operator delete(__p[0]);
    if (v15)
    {
      v19 = (unint64_t *)&v15->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      goto LABEL_23;
    }
  }
  else
  {
    v15 = (std::__shared_weak_count *)a2[1];
    v94[0] = *a2;
    v94[1] = (uint64_t)v15;
    if (v15)
    {
      v21 = (unint64_t *)&v15->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    MIL::MILResult::operator=((uint64_t)v102, (uint64_t)&v98);
    v104 = v101;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v98);
    if (v15)
    {
      v23 = (unint64_t *)&v15->__shared_owners_;
      do
        v20 = __ldaxr(v23);
      while (__stlxr(v20 - 1, v23));
LABEL_23:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v102))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v92, (uint64_t)v102);
    v92[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v93 = v104;
    MIL::ValidationError::ValidationError(exception, v92);
  }
  if ((v13 & 0x80000000) != 0)
    LODWORD(v13) = v13 + ((*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v98, "split_sizes");
  v24 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v98);
  if (SHIBYTE(v100) < 0)
    operator delete(v98);
  if (!((unint64_t)v14 | (unint64_t)v24))
  {
    v67 = __cxa_allocate_exception(0x48uLL);
    v68 = a2[1];
    *(_QWORD *)&v91 = *a2;
    *((_QWORD *)&v91 + 1) = v68;
    if (v68)
    {
      v69 = (unint64_t *)(v68 + 8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    MIL::ValidationError::ValidationError((uint64_t)v67, &v91, (uint64_t)v90, 315);
  }
  if (v24)
  {
    std::string::basic_string[abi:ne180100]<0>(&v98, "split_sizes");
    v25 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v98);
    v26 = (uint64_t *)MIL::IRValue::AsTensor(v25);
    Data = (int *)MIL::IRTensorValue::GetDataView<int>(v26);
    v29 = v28;
    if (SHIBYTE(v100) < 0)
      operator delete(v98);
    v30 = 0;
    if (v29)
    {
      v31 = 4 * v29;
      v32 = Data;
      do
      {
        v33 = *v32++;
        v30 += v33;
        v31 -= 4;
      }
      while (v31);
    }
    v34 = *(_QWORD *)(*(_QWORD *)v10 + 8 * (int)v13);
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
    if (v35 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35) != v30)
    {
      v71 = __cxa_allocate_exception(0x48uLL);
      v72 = a2[1];
      *(_QWORD *)&v89 = *a2;
      *((_QWORD *)&v89 + 1) = v72;
      if (v72)
      {
        v73 = (unint64_t *)(v72 + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      std::string::basic_string[abi:ne180100]<0>(v88, "The sum of split_sizes does not match the input dimension.");
      MIL::ValidationError::ValidationError((uint64_t)v71, &v89, (uint64_t)v88, 315);
    }
    if (v14)
    {
      std::string::basic_string[abi:ne180100]<0>(&v98, "num_splits");
      v36 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v98);
      v37 = (const void *)MIL::IRValue::AsTensor(v36);
      v38 = (int)MIL::IRValue::GetScalar<int>(v37);
      if (SHIBYTE(v100) < 0)
        operator delete(v98);
      if (v29 != v38)
      {
        v75 = __cxa_allocate_exception(0x48uLL);
        v76 = a2[1];
        *(_QWORD *)&v87 = *a2;
        *((_QWORD *)&v87 + 1) = v76;
        if (v76)
        {
          v77 = (unint64_t *)(v76 + 8);
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        std::string::basic_string[abi:ne180100]<0>(v86, "Parameter num_splits is not equal to length of split_sizes param when both are specified.");
        MIL::ValidationError::ValidationError((uint64_t)v75, &v87, (uint64_t)v86, 315);
      }
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::vector<std::string const*>::reserve(a4, v29);
    if (v29)
    {
      v39 = &Data[v29];
      v40 = (int)v13;
      do
      {
        v41 = (MIL::MILContext *)*Data;
        v98 = 0;
        v99 = 0;
        v100 = 0;
        std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v98, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
        v42 = MIL::IRConstantDimension::Make(*a1, v41);
        *((_QWORD *)v98 + v40) = v42;
        v43 = MIL::IRTensorValueType::MakeWithShape(*a1, v83, (uint64_t)&v98);
        v44 = v43;
        v46 = (uint64_t *)a4[1];
        v45 = (unint64_t)a4[2];
        if ((unint64_t)v46 >= v45)
        {
          v48 = ((char *)v46 - (_BYTE *)*a4) >> 3;
          if ((unint64_t)(v48 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v49 = v45 - (_QWORD)*a4;
          v50 = v49 >> 2;
          if (v49 >> 2 <= (unint64_t)(v48 + 1))
            v50 = v48 + 1;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v51 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v51 = v50;
          if (v51)
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v51);
          else
            v52 = 0;
          v53 = (uint64_t *)&v52[8 * v48];
          *v53 = v44;
          v47 = (char *)(v53 + 1);
          v55 = (char *)*a4;
          v54 = (char *)a4[1];
          if (v54 != *a4)
          {
            do
            {
              v56 = *((_QWORD *)v54 - 1);
              v54 -= 8;
              *--v53 = v56;
            }
            while (v54 != v55);
            v54 = (char *)*a4;
          }
          *a4 = v53;
          a4[1] = v47;
          a4[2] = &v52[8 * v51];
          if (v54)
            operator delete(v54);
        }
        else
        {
          *v46 = v43;
          v47 = (char *)(v46 + 1);
        }
        a4[1] = v47;
        if (v98)
        {
          v99 = v98;
          operator delete(v98);
        }
        ++Data;
      }
      while (Data != v39);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v98, "num_splits");
    v57 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v98);
    v58 = (const void *)MIL::IRValue::AsTensor(v57);
    v59 = MIL::IRValue::GetScalar<int>(v58);
    if (SHIBYTE(v100) < 0)
      operator delete(v98);
    v98 = 0;
    v99 = 0;
    v100 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v98, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
    v60 = *(_QWORD *)(*(_QWORD *)v10 + 8 * (int)v13);
    v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
    v62 = v61;
    if (v61)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 48))(v61) % (unint64_t)v59)
      {
        v79 = __cxa_allocate_exception(0x48uLL);
        v80 = a2[1];
        *(_QWORD *)&v85 = *a2;
        *((_QWORD *)&v85 + 1) = v80;
        if (v80)
        {
          v81 = (unint64_t *)(v80 + 8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
        std::string::basic_string[abi:ne180100]<0>(v84, "Axis dimension is not divisible by parameter num_splits.");
        MIL::ValidationError::ValidationError((uint64_t)v79, &v85, (uint64_t)v84, 315);
      }
      v63 = *a1;
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 48))(v62);
      v65 = MIL::IRConstantDimension::Make(v63, (MIL::MILContext *)(v64 / v59));
    }
    else
    {
      v65 = MIL::IRUnknownDimension::Make(*a1, 0);
    }
    *((_QWORD *)v98 + (int)v13) = v65;
    __p[0] = (void *)MIL::IRTensorValueType::MakeWithShape(*a1, v83, (uint64_t)&v98);
    std::vector<MIL::IRValueType const*>::vector(a4, v59, __p);
    if (v98)
    {
      v99 = v98;
      operator delete(v98);
    }
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v102);
}

void sub_1E07C8C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;
  int v57;
  uint64_t v58;
  void *v60;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if ((v57 & 1) == 0)
    {
LABEL_6:
      v60 = *(void **)(v58 - 200);
      if (v60)
      {
        *(_QWORD *)(v58 - 192) = v60;
        operator delete(v60);
      }
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v58 - 144));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if (!v57)
      goto LABEL_6;
  }
  __cxa_free_exception(v56);
  goto LABEL_6;
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSqueeze(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  MIL::IRValue *SingleValue;
  uint64_t *v15;
  unsigned int *Data;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  void *v36[2];
  char v37;
  void *v38;
  unint64_t *v39;
  void *v40;
  char *v41;
  char *v42;
  void *__p[2];
  __int128 v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)v9))
  {
    __p[0] = (void *)MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v40, (char *)__p, (uint64_t)&__p[1], 1uLL);
    v10 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&v40);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v11 = (uint64_t *)operator new(8uLL);
    *a3 = v11;
    *v11++ = v10;
    a3[1] = v11;
    a3[2] = v11;
    goto LABEL_38;
  }
  *(_OWORD *)__p = 0u;
  v44 = 0u;
  v45 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v36, "axes");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v36);
  v13 = v12;
  if ((v37 & 0x80000000) == 0)
  {
    if (!v12)
      goto LABEL_13;
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(v36, "axes");
    SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)v36);
    v15 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
    Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v15);
    v18 = v17;
    if (v37 < 0)
      operator delete(v36[0]);
    MIL::ValueTypeInferenceUtils::ConvertAxesToNonNeg(Data, v18, (v9[1] - *v9) >> 3, (char **)&v38);
    std::unordered_set<unsigned long>::unordered_set<std::__wrap_iter<unsigned long *>>((uint64_t)v36, (unint64_t *)v38, v39);
    std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)__p, (uint64_t *)v36);
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v36);
    if (v38)
    {
      v39 = (unint64_t *)v38;
      operator delete(v38);
    }
    goto LABEL_13;
  }
  operator delete(v36[0]);
  if (v13)
    goto LABEL_9;
LABEL_13:
  v36[0] = 0;
  v19 = *v9;
  if (v9[1] != *v9)
  {
    v20 = 0;
    do
    {
      v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 8 * v20) + 16))(*(_QWORD *)(v19 + 8 * v20));
      if (!v21
        || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21) != 1
        || *((_QWORD *)&v44 + 1)
        && !std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(__p, (unint64_t *)v36))
      {
        v22 = v36[0];
        v23 = *v9;
        v24 = v41;
        if (v41 >= v42)
        {
          v26 = (v41 - (_BYTE *)v40) >> 3;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v27 = (v42 - (_BYTE *)v40) >> 2;
          if (v27 <= v26 + 1)
            v27 = v26 + 1;
          if ((unint64_t)(v42 - (_BYTE *)v40) >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v27;
          if (v28)
            v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v42, v28);
          else
            v29 = 0;
          v30 = &v29[8 * v26];
          *(_QWORD *)v30 = *(_QWORD *)(v23 + 8 * (_QWORD)v22);
          v25 = v30 + 8;
          v32 = (char *)v40;
          v31 = v41;
          if (v41 != v40)
          {
            do
            {
              v33 = *((_QWORD *)v31 - 1);
              v31 -= 8;
              *((_QWORD *)v30 - 1) = v33;
              v30 -= 8;
            }
            while (v31 != v32);
            v31 = (char *)v40;
          }
          v40 = v30;
          v41 = v25;
          v42 = &v29[8 * v28];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *(_QWORD *)v41 = *(_QWORD *)(v23 + 8 * (uint64_t)v36[0]);
          v25 = v24 + 8;
        }
        v41 = v25;
      }
      v20 = (unint64_t)v36[0] + 1;
      v36[0] = (void *)v20;
      v19 = *v9;
    }
    while (v20 < (v9[1] - *v9) >> 3);
  }
  v34 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&v40);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v35 = (uint64_t *)operator new(8uLL);
  *a3 = v35;
  *v35++ = v34;
  a3[1] = v35;
  a3[2] = v35;
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)__p);
LABEL_38:
  if (v40)
  {
    v41 = (char *)v40;
    operator delete(v40);
  }
}

void sub_1E07C9228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p)
    operator delete(__p);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a24);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceStack(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  unsigned __int8 *v6;
  MIL::IRValueType *ValueType;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  const void *SingleValue;
  MIL::Validation *v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  std::logic_error *exception;
  std::string v26;
  void *__p;
  void *v28;
  uint64_t v29;

  std::string::basic_string[abi:ne180100]<0>(&__p, "values");
  v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v6
                                                                      + 5));
  v8 = MIL::IRValueType::AsTensorType(ValueType);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
  v11 = *((_QWORD *)v6 + 5);
  v10 = *((_QWORD *)v6 + 6);
  v12 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v14 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(SingleValue);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  if (!MIL::Validation::IsAxisValidForRank(v14, ((unint64_t)((_BYTE *)v12[1] - (_BYTE *)*v12) >> 3) + 1))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Axis must be within range (-input_ndim-2, input_ndim+1) (exclusive) to stack. Invalid axis: ", 92);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" for input_ndim: ", 17);
    std::ostream::operator<<();
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v26);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v15 = (v10 - v11) >> 4;
  v16 = *v12;
  v17 = (uint64_t)v12[1];
  v18 = v17 - (_QWORD)*v12;
  __p = 0;
  v28 = 0;
  v29 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, v16, v17, v18 >> 3);
  v19 = (char *)__p;
  v20 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v15);
  if ((int)v14 < 0)
    v21 = (_DWORD)v14 + ((unint64_t)v18 >> 3) + 1;
  else
    v21 = (int)v14;
  v26.__r_.__value_.__r.__words[0] = v20;
  std::vector<MIL::IRDimension const*>::insert((uint64_t)&__p, &v19[8 * v21], &v26);
  v22 = MIL::IRTensorValueType::MakeWithShape(*a1, v9, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v23 = (uint64_t *)operator new(8uLL);
  *a3 = v23;
  *v23++ = v22;
  a3[1] = v23;
  a3[2] = v23;
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
}

void sub_1E07C9520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceTranspose(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  MIL::IRValue *SingleValue;
  uint64_t *v11;
  int *Data;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  std::logic_error *exception;
  int v33;
  void (****v34)(MIL::MILContextImpl *__hidden);
  void *__p[2];
  char v36;
  int v37[4];
  void *v38;
  char *v39;
  char *v40;
  void *__src;
  _QWORD v42[3];

  v42[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v36 < 0)
    operator delete(__p[0]);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  std::string::basic_string[abi:ne180100]<0>(__p, "perm");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)__p);
  v11 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  if (v36 < 0)
    operator delete(__p[0]);
  Data = (int *)MIL::IRTensorValue::GetDataView<int>(v11);
  v14 = v13;
  std::unordered_set<int>::unordered_set<int const*>((uint64_t)__p, Data, &Data[v13]);
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)v9))
  {
    __src = (void *)MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v38, (char *)&__src, (uint64_t)v42, 1uLL);
    v15 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&v38);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v16 = (uint64_t *)operator new(8uLL);
    *a3 = v16;
    *v16++ = v15;
    a3[1] = v16;
    a3[2] = v16;
  }
  else
  {
    if (*(_QWORD *)v37 != (v9[1] - *v9) >> 3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Each 'axis' in 'perm' must correspond to a unique and different dimension.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v33 = v8;
    v34 = a1;
    MIL::ValueTypeInferenceUtils::ConvertAxesToNonNeg((unsigned int *)Data, v14, v37[0], (char **)&__src);
    v17 = (uint64_t *)__src;
    v18 = (uint64_t *)v42[0];
    if (__src != (void *)v42[0])
    {
      v19 = v39;
      do
      {
        v20 = *v17;
        v21 = *v9;
        if (v19 >= v40)
        {
          v22 = (v19 - (_BYTE *)v38) >> 3;
          if ((unint64_t)(v22 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v23 = (v40 - (_BYTE *)v38) >> 2;
          if (v23 <= v22 + 1)
            v23 = v22 + 1;
          if ((unint64_t)(v40 - (_BYTE *)v38) >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v40, v24);
          else
            v25 = 0;
          v26 = &v25[8 * v22];
          *(_QWORD *)v26 = *(_QWORD *)(v21 + 8 * v20);
          v19 = v26 + 8;
          v28 = (char *)v38;
          v27 = v39;
          if (v39 != v38)
          {
            do
            {
              v29 = *((_QWORD *)v27 - 1);
              v27 -= 8;
              *((_QWORD *)v26 - 1) = v29;
              v26 -= 8;
            }
            while (v27 != v28);
            v27 = (char *)v38;
          }
          v38 = v26;
          v39 = v19;
          v40 = &v25[8 * v24];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)(v21 + 8 * v20);
          v19 += 8;
        }
        v39 = v19;
        ++v17;
      }
      while (v17 != v18);
    }
    v30 = MIL::IRTensorValueType::MakeWithShape(*v34, v33, (uint64_t)&v38);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v31 = (uint64_t *)operator new(8uLL);
    *a3 = v31;
    *v31++ = v30;
    a3[1] = v31;
    a3[2] = v31;
    if (__src)
    {
      v42[0] = __src;
      operator delete(__src);
    }
  }
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)__p);
  if (v38)
  {
    v39 = (char *)v38;
    operator delete(v38);
  }
}

void sub_1E07C98EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;

  __cxa_free_exception(v23);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a11);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::`anonymous namespace'::inferIndexHelper<int>(MIL::IRValue *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  _QWORD v12[2];

  v5 = (uint64_t *)MIL::IRValue::AsTensor(a1);
  v12[0] = MIL::IRTensorValue::GetDataView<int>(v5);
  v12[1] = v6;
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8 * a3) + 24))(*(_QWORD *)(*a2 + 8 * a3)))
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v9 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * a3));
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
    if ((*(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(v12, a3) & 0x80000000) != 0)
      v8 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(v12, a3) + v10;
    else
      v8 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(v12, a3);
    v7 = 0x100000000;
  }
  return v7 | v8;
}

uint64_t MIL::Operators::Common::ios15::`anonymous namespace'::inferIndexHelper<short>(MIL::IRValue *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD v11[2];

  v5 = (uint64_t *)MIL::IRValue::AsTensor(a1);
  v11[0] = MIL::IRTensorValue::GetDataView<short>(v5);
  v11[1] = v6;
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8 * a3) + 24))(*(_QWORD *)(*a2 + 8 * a3)))
    return 0;
  v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * a3));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  v10 = *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(v11, a3);
  return ((v9 & (v10 >> 31)) + *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(v11, a3)) | 0x100000000;
}

uint64_t MIL::Operators::Common::ios15::`anonymous namespace'::inferIndexHelper<signed char>(MIL::IRValue *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD v11[2];

  v5 = (uint64_t *)MIL::IRValue::AsTensor(a1);
  v11[0] = MIL::IRTensorValue::GetDataView<signed char>(v5);
  v11[1] = v6;
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8 * a3) + 24))(*(_QWORD *)(*a2 + 8 * a3)))
    return 0;
  v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * a3));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  v10 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(v11, a3);
  return ((v9 & (v10 >> 31))
        + *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(v11, a3)) | 0x100000000;
}

_QWORD *std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _QWORD *v7;
  void *v8;

  result[1] = 0;
  if (a4)
  {
    v7 = result;
    if (a4 > result[2] << 6)
    {
      v8 = (void *)*result;
      if (*v7)
      {
        operator delete(v8);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
      }
      std::vector<BOOL>::__vallocate[abi:ne180100](v7, a4);
    }
    return std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(v7, a2, a3, a4);
  }
  return result;
}

_QWORD *std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(_QWORD *result, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result[1];
  v5 = v4 + a4;
  result[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*result + 8 * v6) = 0;
  }
  if (a2 != a3)
  {
    v7 = v4 & 0x3F;
    v8 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      v9 = 1 << v7;
      if (*a2)
        v10 = *v8 | v9;
      else
        v10 = *v8 & ~v9;
      *v8 = v10;
      ++a2;
      v8 += v7 == 63;
      if (v7 == 63)
        v7 = 0;
      else
        ++v7;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  if (*a3)
  {
    v6 = *a1;
    return std::__count_BOOL[abi:ne180100]<true,std::vector<BOOL>,false>((uint64_t)&v6, *(unsigned int *)(a2 + 8) - (unint64_t)*((unsigned int *)a1 + 2) + 8 * (*(_QWORD *)a2 - v3));
  }
  else
  {
    v5 = *a1;
    return std::__count_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>((uint64_t)&v5, *(unsigned int *)(a2 + 8) - (unint64_t)*((unsigned int *)a1 + 2) + 8 * (*(_QWORD *)a2 - v3));
  }
}

uint64_t std::__count_BOOL[abi:ne180100]<true,std::vector<BOOL>,false>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  int8x8_t *v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2)
      v3 = a2;
    else
      v3 = (64 - v2);
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & **(_QWORD **)a1));
    v4.i16[0] = vaddlv_u8(v4);
    v5 = v4.u32[0];
    a2 -= v3;
    *(_QWORD *)a1 += 8;
  }
  else
  {
    v5 = 0;
  }
  if (a2 >= 0x40)
  {
    v6 = *(int8x8_t **)a1;
    do
    {
      v7 = *v6++;
      v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(_QWORD *)a1 = v6;
  }
  if (a2)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)(**(_QWORD **)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2)));
    v9.i16[0] = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

uint64_t std::__count_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2)
      v3 = a2;
    else
      v3 = (64 - v2);
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & ~**(_QWORD **)a1));
    v4.i16[0] = vaddlv_u8(v4);
    v5 = v4.u32[0];
    a2 -= v3;
    *(_QWORD *)a1 += 8;
  }
  else
  {
    v5 = 0;
  }
  if (a2 >= 0x40)
  {
    v6 = *(uint64_t **)a1;
    do
    {
      v7 = *v6++;
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(_QWORD *)a1 = v6;
  }
  if (a2)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~**(_QWORD **)a1));
    v9.i16[0] = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

_QWORD *std::vector<MIL::IRValueType const*>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1E07C9F24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<int>::unordered_set<int const*>(uint64_t a1, int *a2, int *a3)
{
  int *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1E07C9FA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1E07CA1BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BatchToSpace::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  unsigned __int8 *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unsigned __int8 *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  void **v63;
  char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  char **v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void **v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  void *v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void **v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void **v106;
  void **v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void **v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void **v127;
  void **v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  void **v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void *v141;
  void **v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  void **v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void *v155;
  void **v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  void **v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  void **v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void **v176;
  uint64_t result;
  uint64_t v178;
  void **v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  void *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  void *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  void *v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  void *v197[2];
  char v198;
  void *v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  void *v203[2];
  char v204;
  void *v205;
  std::__shared_weak_count *v206;
  void *v207[2];
  char v208;
  void *v209[2];
  char v210;
  void *v211;
  std::__shared_weak_count *v212;
  void **v213;
  std::__shared_weak_count *v214;
  void *v215;
  std::__shared_weak_count *v216;
  void *v217[2];
  char v218;
  void *v219;
  std::__shared_weak_count *v220;
  void **v221;
  std::__shared_weak_count *v222;
  void *v223[2];
  char v224;
  void *v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  void *v229[2];
  char v230;
  void *v231;
  std::__shared_weak_count *v232;
  __int128 v233;
  __int128 v234;
  void *v235[2];
  uint64_t v236;
  __n128 v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  char **v241;
  __n128 v242;
  __n128 v243;
  void *__p;
  void *v245;
  _QWORD *v246;
  __n128 v247;
  _QWORD *v248;
  void **v249;
  void **v250;
  void **v251;
  char *v252;
  char **v253;
  _QWORD v254[3];
  _QWORD *v255;
  _BYTE v256[24];
  _BYTE *v257;
  _QWORD v258[3];
  _QWORD *v259;
  void *v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD v263[3];

  v263[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v248 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v250 = (void **)(v10 + 24);
  v251 = (void **)(v10 + 24);
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  v249 = (void **)v10;
  v260 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v249);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v246 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v245 = v14 + 3;
  v261 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v260, 2, &v247);
  MIL::IRParameter::Make(&v247, &v239);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v239);
  v15 = v239;
  v239 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v247.n128_u64[1];
  if (v247.n128_u64[1])
  {
    v17 = (unint64_t *)(v247.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v245 = __p;
    operator delete(__p);
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  v19 = v248;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (void **)operator new(8uLL);
  v249 = v21;
  *v21 = (void *)v20;
  v250 = v21 + 1;
  v251 = v21 + 1;
  v260 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v249);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v260, 1, &v243);
  MIL::IRParameter::Make(&v243, (uint64_t *)&__p);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v19, "block_shape", (uint64_t *)&__p);
  v23 = __p;
  __p = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v243.n128_u64[1];
  if (v243.n128_u64[1])
  {
    v25 = (unint64_t *)(v243.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 32))(*((_QWORD *)v22 + 5), 1);
  v27 = v248;
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v30 = (char *)operator new(0x10uLL);
  v250 = (void **)(v30 + 16);
  v251 = (void **)(v30 + 16);
  *(_QWORD *)v30 = v28;
  *((_QWORD *)v30 + 1) = v29;
  v249 = (void **)v30;
  v260 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v249);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v260, 1, &v242);
  MIL::IRParameter::Make(&v242, (uint64_t *)&__p);
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v27, "crops", (uint64_t *)&__p);
  v32 = __p;
  __p = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  v33 = (std::__shared_weak_count *)v242.n128_u64[1];
  if (v242.n128_u64[1])
  {
    v34 = (unint64_t *)(v242.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  v241 = 0;
  v36 = operator new();
  *(_QWORD *)v36 = 0;
  *(_QWORD *)(v36 + 8) = 0;
  *(_QWORD *)(v36 + 16) = 0;
  v249 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v241, (void **)v36);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v249, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v241, 1uLL);
  v37 = v241;
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(0x18uLL);
  v246 = v41 + 3;
  *v41 = v38;
  v41[1] = v39;
  v41[2] = v40;
  __p = v41;
  v245 = v41 + 3;
  v263[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(0x18uLL);
  v261 = (uint64_t)(v45 + 3);
  v262 = v45 + 3;
  *v45 = v42;
  v45[1] = v43;
  v45[2] = v44;
  v260 = v45;
  v263[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v260);
  MIL::IRParameter::MakeTypeSet((uint64_t)v263, 2, &v237);
  MIL::IRParameter::Make(&v237, &v238);
  v46 = v238;
  v239 = v238;
  if (v238)
  {
    v47 = (_QWORD *)operator new();
    v48 = v238;
    *v47 = &unk_1EA99F888;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v48;
  }
  else
  {
    v47 = 0;
  }
  v240 = v47;
  v238 = 0;
  v49 = v37[2];
  v50 = v37[1];
  if (v50 >= v49)
  {
    v52 = (v50 - *v37) >> 4;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v54 = v49 - *v37;
    if (v54 >> 3 > v53)
      v53 = v54 >> 3;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
      v55 = 0xFFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    v253 = v37 + 2;
    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v37 + 2), v55);
    v58 = (uint64_t *)&v56[16 * v52];
    *v58 = v46;
    v58[1] = (uint64_t)v47;
    v240 = 0;
    v239 = 0;
    v60 = *v37;
    v59 = v37[1];
    if (v59 == *v37)
    {
      v63 = (void **)v37[1];
      v61 = &v56[16 * v52];
    }
    else
    {
      v61 = &v56[16 * v52];
      do
      {
        v62 = *((_OWORD *)v59 - 1);
        v59 -= 16;
        *((_OWORD *)v61 - 1) = v62;
        v61 -= 16;
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = 0;
      }
      while (v59 != v60);
      v63 = (void **)*v37;
      v59 = v37[1];
    }
    v51 = (char *)(v58 + 2);
    *v37 = v61;
    v249 = v63;
    v250 = v63;
    v37[1] = (char *)(v58 + 2);
    v251 = (void **)v59;
    v64 = v37[2];
    v37[2] = &v56[16 * v57];
    v252 = v64;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v249);
  }
  else
  {
    *(_QWORD *)v50 = v46;
    *((_QWORD *)v50 + 1) = v47;
    v51 = v50 + 16;
    v240 = 0;
    v239 = 0;
  }
  v37[1] = v51;
  v65 = v238;
  v238 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v237.n128_u64[1];
  if (v237.n128_u64[1])
  {
    v67 = (unint64_t *)(v237.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v260)
  {
    v261 = (uint64_t)v260;
    operator delete(v260);
  }
  if (__p)
  {
    v245 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v235 = *(_OWORD *)a2;
  v236 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v69 = (uint64_t)v248;
  *(_QWORD *)&v234 = v248;
  if (v248)
  {
    v70 = (_QWORD *)operator new();
    *v70 = &unk_1EA99F8E8;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v69;
  }
  else
  {
    v70 = 0;
  }
  *((_QWORD *)&v234 + 1) = v70;
  v248 = 0;
  *(_QWORD *)&v233 = v241;
  if (v241)
  {
    v71 = (_QWORD *)operator new();
    v72 = v241;
    *v71 = &unk_1EA99F948;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v233 + 1) = v71;
  v241 = 0;
  v258[0] = &unk_1EA99FAC8;
  v258[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateBatchToSpace;
  v259 = v258;
  v257 = 0;
  MIL::IROperator::Make((__int128 *)v235, &v234, &v233, (uint64_t)v258, (uint64_t)v256, a3);
  v73 = v257;
  if (v257 == v256)
  {
    v74 = 4;
    v73 = v256;
  }
  else
  {
    if (!v257)
      goto LABEL_69;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_69:
  v75 = v259;
  if (v259 == v258)
  {
    v76 = 4;
    v75 = v258;
    goto LABEL_73;
  }
  if (v259)
  {
    v76 = 5;
LABEL_73:
    (*(void (**)(void))(*v75 + 8 * v76))();
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
  if (*((_QWORD *)&v233 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (*((_QWORD *)&v234 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (SHIBYTE(v236) < 0)
    operator delete(v235[0]);
  v83 = *a3;
  v254[0] = &off_1EA99FBD8;
  v254[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBatchToSpace;
  v255 = v254;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v83 + 200))(v83, v254);
  v84 = v255;
  if (v255 == v254)
  {
    v85 = 4;
    v84 = v254;
  }
  else
  {
    if (!v255)
      goto LABEL_91;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_91:
  MIL::Validation::TensorDTypeConstraints::Make(&v249);
  v86 = v249;
  std::string::basic_string[abi:ne180100]<0>(v229, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v229, 0, (uint64_t *)&__p);
  v231 = __p;
  if (__p)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)__p;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v232 = v87;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v227, "T");
  (*((void (**)(void **, void **, void **))*v86 + 3))(v86, &v231, v227);
  if (v228 < 0)
    operator delete(v227[0]);
  v89 = v232;
  if (v232)
  {
    p_shared_owners = (unint64_t *)&v232->__shared_owners_;
    do
      v91 = __ldaxr(p_shared_owners);
    while (__stlxr(v91 - 1, p_shared_owners));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = __p;
  __p = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v230 < 0)
    operator delete(v229[0]);
  v93 = v249;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v225 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v226 = v94;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v223, "T");
  (*((void (**)(void **, void **, void **))*v93 + 3))(v93, &v225, v223);
  if (v224 < 0)
    operator delete(v223[0]);
  v96 = v226;
  if (v226)
  {
    v97 = (unint64_t *)&v226->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  v100 = *a3;
  v221 = v249;
  if (v249)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v249;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v222 = v101;
  v249 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v100 + 56))(v100, &v221);
  v103 = v222;
  if (v222)
  {
    v104 = (unint64_t *)&v222->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v249;
  v249 = 0;
  if (v106)
    (*((void (**)(void **))*v106 + 1))(v106);
  MIL::Validation::TensorRankValueConstraints::Make(&v249);
  v107 = v249;
  std::string::basic_string[abi:ne180100]<0>(v217, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v217, 0, (uint64_t *)&__p);
  v219 = __p;
  if (__p)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = (std::__shared_weak_count_vtbl *)__p;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v220 = v108;
  __p = 0;
  (*((void (**)(void **, void **, uint64_t, uint64_t))*v107 + 4))(v107, &v219, 3, 5);
  v110 = v220;
  if (v220)
  {
    v111 = (unint64_t *)&v220->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = __p;
  __p = 0;
  if (v113)
    (*(void (**)(void *))(*(_QWORD *)v113 + 8))(v113);
  if (v218 < 0)
    operator delete(v217[0]);
  v114 = v249;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v215 = __p;
  if (__p)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)__p;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v216 = v115;
  __p = 0;
  (*((void (**)(void **, void **, uint64_t, uint64_t))*v114 + 4))(v114, &v215, 3, 5);
  v117 = v216;
  if (v216)
  {
    v118 = (unint64_t *)&v216->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = __p;
  __p = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  v121 = *a3;
  v213 = v249;
  if (v249)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = v249;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = (std::__shared_weak_count_vtbl *)v123;
  }
  else
  {
    v122 = 0;
  }
  v214 = v122;
  v249 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v121 + 56))(v121, &v213);
  v124 = v214;
  if (v214)
  {
    v125 = (unint64_t *)&v214->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v249;
  v249 = 0;
  if (v127)
    (*((void (**)(void **))*v127 + 1))(v127);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v249);
  v128 = v249;
  std::string::basic_string[abi:ne180100]<0>(v209, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v209, 0, (uint64_t *)&__p);
  v211 = __p;
  if (__p)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)__p;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v212 = v129;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v207, "B_in");
  (*((void (**)(void **, void **, _QWORD, void **))*v128 + 3))(v128, &v211, 0, v207);
  if (v208 < 0)
    operator delete(v207[0]);
  v131 = v212;
  if (v212)
  {
    v132 = (unint64_t *)&v212->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = __p;
  __p = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (v210 < 0)
    operator delete(v209[0]);
  v135 = v249;
  std::string::basic_string[abi:ne180100]<0>(v203, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v203, 0, (uint64_t *)&__p);
  v205 = __p;
  if (__p)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = (std::__shared_weak_count_vtbl *)__p;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v206 = v136;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v201, "C");
  (*((void (**)(void **, void **, uint64_t, void **))*v135 + 3))(v135, &v205, 1, v201);
  if (v202 < 0)
    operator delete(v201[0]);
  v138 = v206;
  if (v206)
  {
    v139 = (unint64_t *)&v206->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = __p;
  __p = 0;
  if (v141)
    (*(void (**)(void *))(*(_QWORD *)v141 + 8))(v141);
  if (v204 < 0)
    operator delete(v203[0]);
  v142 = v249;
  std::string::basic_string[abi:ne180100]<0>(v197, "block_shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v197, 0, (uint64_t *)&__p);
  v199 = __p;
  if (__p)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = (std::__shared_weak_count_vtbl *)__p;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v200 = v143;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "M");
  (*((void (**)(void **, void **, _QWORD, void **))*v142 + 3))(v142, &v199, 0, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v145 = v200;
  if (v200)
  {
    v146 = (unint64_t *)&v200->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = __p;
  __p = 0;
  if (v148)
    (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
  if (v198 < 0)
    operator delete(v197[0]);
  v149 = v249;
  std::string::basic_string[abi:ne180100]<0>(v191, "crops");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v191, 0, (uint64_t *)&__p);
  v193 = __p;
  if (__p)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = (std::__shared_weak_count_vtbl *)__p;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v194 = v150;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "M");
  (*((void (**)(void **, void **, _QWORD, void **))*v149 + 3))(v149, &v193, 0, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v152 = v194;
  if (v194)
  {
    v153 = (unint64_t *)&v194->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = __p;
  __p = 0;
  if (v155)
    (*(void (**)(void *))(*(_QWORD *)v155 + 8))(v155);
  if (v192 < 0)
    operator delete(v191[0]);
  v156 = v249;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v187 = __p;
  if (__p)
  {
    v157 = (std::__shared_weak_count *)operator new();
    v158 = (std::__shared_weak_count_vtbl *)__p;
    v157->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v157->__shared_owners_ = 0;
    v157->__shared_weak_owners_ = 0;
    v157[1].__vftable = v158;
  }
  else
  {
    v157 = 0;
  }
  v188 = v157;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "B_out");
  (*((void (**)(void **, void **, _QWORD, void **))*v156 + 3))(v156, &v187, 0, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v159 = v188;
  if (v188)
  {
    v160 = (unint64_t *)&v188->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = __p;
  __p = 0;
  if (v162)
    (*(void (**)(void *))(*(_QWORD *)v162 + 8))(v162);
  v163 = v249;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v183 = __p;
  if (__p)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = (std::__shared_weak_count_vtbl *)__p;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v184 = v164;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v181, "C");
  (*((void (**)(void **, void **, uint64_t, void **))*v163 + 3))(v163, &v183, 1, v181);
  if (v182 < 0)
    operator delete(v181[0]);
  v166 = v184;
  if (v184)
  {
    v167 = (unint64_t *)&v184->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = __p;
  __p = 0;
  if (v169)
    (*(void (**)(void *))(*(_QWORD *)v169 + 8))(v169);
  v170 = *a3;
  v179 = v249;
  if (v249)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = v249;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = (std::__shared_weak_count_vtbl *)v172;
  }
  else
  {
    v171 = 0;
  }
  v180 = v171;
  v249 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v170 + 56))(v170, &v179);
  v173 = v180;
  if (v180)
  {
    v174 = (unint64_t *)&v180->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = v249;
  v249 = 0;
  if (v176)
    (*((void (**)(void **))*v176 + 1))(v176);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v241, 0);
  result = (uint64_t)v248;
  if (v248)
  {
    v178 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v248);
    return MEMORY[0x1E0C023A0](v178, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07CB688(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 248);
  *(_QWORD *)(v2 - 248) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x280], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 256), 0);
  _Unwind_Resume(a1);
}

void sub_1E07CBA18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 184);
  if (v2 != v0 && !v2)
    JUMPOUT(0x1E07CB9D8);
  JUMPOUT(0x1E07CB9D4);
}

void sub_1E07CBA48()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 152);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 176);
  }
  else
  {
    if (!v2)
    {
LABEL_6:
      MIL::Operators::Common::ios15::GeLU::Make();
      JUMPOUT(0x1E07CBA88);
    }
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
  goto LABEL_6;
}

void sub_1E07CBAA0()
{
  JUMPOUT(0x1E07CBA08);
}

void sub_1E07CBAA8()
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x270]);
  JUMPOUT(0x1E07CBAB4);
}

void sub_1E07CBAF8()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;

  v1 = STACK[0x2A8];
  STACK[0x2A8] = 0;
  if (v1)
    (*(void (**)(unint64_t))(*(_QWORD *)v1 + 8))(v1);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x288]);
  v2 = *(void **)(v0 - 248);
  if (v2)
  {
    *(_QWORD *)(v0 - 240) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E07CB9FCLL);
}

void sub_1E07CBB64()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  void *v3;

  v1 = STACK[0x270];
  STACK[0x270] = 0;
  if (v1)
    (*(void (**)(unint64_t))(*(_QWORD *)v1 + 8))(v1);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C0]);
  v2 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = *(void **)(v0 - 248);
  if (v3)
  {
    *(_QWORD *)(v0 - 240) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1E07CB9FCLL);
}

void sub_1E07CBBF8()
{
  JUMPOUT(0x1E07CB9F0);
}

void sub_1E07CBC18()
{
  JUMPOUT(0x1E07CB9FCLL);
}

uint64_t MIL::Operators::Common::ios15::Concat::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  void **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  void **v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char **v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void **v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  std::__shared_weak_count_vtbl *v88;
  void **v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  void **v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void **v102;
  uint64_t result;
  uint64_t v104;
  void **v105;
  std::__shared_weak_count *v106;
  void *v107[2];
  char v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  void *v111[2];
  char v112;
  void *v113[2];
  char v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  __int128 v118;
  void *v119[2];
  uint64_t v120;
  void *v121;
  void *v122;
  _QWORD *v123;
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char **v128;
  __n128 v129;
  __n128 v130;
  void *__p;
  void *v132;
  _QWORD *v133;
  void *v134;
  void *v135;
  _QWORD *v136;
  void *v137;
  void *v138;
  _QWORD *v139;
  __n128 v140;
  _QWORD *v141;
  _QWORD v142[3];
  _QWORD *v143;
  _BYTE v144[24];
  _BYTE *v145;
  _QWORD v146[3];
  _QWORD *v147;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void **v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char **v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v141 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v149 = (uint64_t)&v8->~__shared_weak_count_0;
  v150 = (uint64_t)&v8->~__shared_weak_count_0;
  v152 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v137 = v10;
  *v10 = v9;
  v138 = v10 + 1;
  v139 = v10 + 1;
  v153 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v137);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v134 = v12;
  *v12 = v11;
  v135 = v12 + 1;
  v136 = v12 + 1;
  v154 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v134);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v132 = v14 + 1;
  v133 = v14 + 1;
  v155 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v152, 4, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v121);
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "values", (uint64_t *)&v121);
  v16 = v121;
  v121 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v18 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v132 = __p;
    operator delete(__p);
  }
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  if (Scalar)
  {
    v149 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v15 + 5) + 64))(*((_QWORD *)v15 + 5), 1);
  v20 = v141;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v130);
  MIL::IRParameter::Make(&v130, (uint64_t *)&v152);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v20, "axis", (uint64_t *)&v152);
  v22 = v152;
  v152 = 0;
  if (v22)
    (*((void (**)(void **))*v22 + 1))(v22);
  v23 = (std::__shared_weak_count *)v130.n128_u64[1];
  if (v130.n128_u64[1])
  {
    v24 = (unint64_t *)(v130.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 32))(*((_QWORD *)v21 + 5), 1);
  v26 = v141;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v129);
  MIL::IRParameter::Make(&v129, (uint64_t *)&v152);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v26, "interleave", (uint64_t *)&v152);
  v28 = v152;
  v152 = 0;
  if (v28)
    (*((void (**)(void **))*v28 + 1))(v28);
  v29 = (std::__shared_weak_count *)v129.n128_u64[1];
  if (v129.n128_u64[1])
  {
    v30 = (unint64_t *)(v129.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  v128 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  v152 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v128, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v152, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v128, 1uLL);
  v33 = v128;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v137 = v35;
  *v35 = v34;
  v138 = v35 + 1;
  v139 = v35 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v137);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v134 = v37;
  *v37 = v36;
  v135 = v37 + 1;
  v136 = v37 + 1;
  v149 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v134);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  __p = v39;
  *v39 = v38;
  v132 = v39 + 1;
  v133 = v39 + 1;
  v150 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v121 = v41;
  *v41 = v40;
  v122 = v41 + 1;
  v123 = v41 + 1;
  v151 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v121);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v124);
  MIL::IRParameter::Make(&v124, &v125);
  v42 = v125;
  v126 = v125;
  if (v125)
  {
    v43 = (_QWORD *)operator new();
    v44 = v125;
    *v43 = &unk_1EA99F888;
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = v44;
  }
  else
  {
    v43 = 0;
  }
  v127 = v43;
  v125 = 0;
  v45 = v33[2];
  v46 = v33[1];
  if (v46 >= v45)
  {
    v48 = (v46 - *v33) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v50 = v45 - *v33;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v156 = v33 + 2;
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v51);
    v54 = (uint64_t *)&v52[16 * v48];
    *v54 = v42;
    v54[1] = (uint64_t)v43;
    v126 = 0;
    v127 = 0;
    v56 = *v33;
    v55 = v33[1];
    if (v55 == *v33)
    {
      v59 = (void **)v33[1];
      v57 = &v52[16 * v48];
    }
    else
    {
      v57 = &v52[16 * v48];
      do
      {
        v58 = *((_OWORD *)v55 - 1);
        v55 -= 16;
        *((_OWORD *)v57 - 1) = v58;
        v57 -= 16;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
      }
      while (v55 != v56);
      v59 = (void **)*v33;
      v55 = v33[1];
    }
    v47 = (char *)(v54 + 2);
    *v33 = v57;
    v152 = v59;
    v153 = (uint64_t)v59;
    v33[1] = (char *)(v54 + 2);
    v154 = (uint64_t)v55;
    v60 = v33[2];
    v33[2] = &v52[16 * v53];
    v155 = (uint64_t)v60;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v152);
  }
  else
  {
    *(_QWORD *)v46 = v42;
    *((_QWORD *)v46 + 1) = v43;
    v47 = v46 + 16;
    v126 = 0;
    v127 = 0;
  }
  v33[1] = v47;
  v61 = v125;
  v125 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v124.n128_u64[1];
  if (v124.n128_u64[1])
  {
    v63 = (unint64_t *)(v124.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (__p)
  {
    v132 = __p;
    operator delete(__p);
  }
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  *(_OWORD *)v119 = *(_OWORD *)a2;
  v120 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v65 = (uint64_t)v141;
  *(_QWORD *)&v118 = v141;
  if (v141)
  {
    v66 = (_QWORD *)operator new();
    *v66 = &unk_1EA99F8E8;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v65;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v118 + 1) = v66;
  v141 = 0;
  *(_QWORD *)&v117 = v128;
  if (v128)
  {
    v67 = (_QWORD *)operator new();
    v68 = v128;
    *v67 = &unk_1EA99F948;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v117 + 1) = v67;
  v128 = 0;
  v146[0] = &unk_1EA99FAC8;
  v146[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateConcat;
  v147 = v146;
  v145 = 0;
  MIL::IROperator::Make((__int128 *)v119, &v118, &v117, (uint64_t)v146, (uint64_t)v144, a3);
  v69 = v145;
  if (v145 == v144)
  {
    v70 = 4;
    v69 = v144;
  }
  else
  {
    if (!v145)
      goto LABEL_73;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_73:
  v71 = v147;
  if (v147 == v146)
  {
    v72 = 4;
    v71 = v146;
    goto LABEL_77;
  }
  if (v147)
  {
    v72 = 5;
LABEL_77:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (*((_QWORD *)&v117 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
  if (*((_QWORD *)&v118 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SHIBYTE(v120) < 0)
    operator delete(v119[0]);
  v79 = *a3;
  v142[0] = &off_1EA99FBD8;
  v142[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConcat;
  v143 = v142;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v79 + 200))(v79, v142);
  v80 = v143;
  if (v143 == v142)
  {
    v81 = 4;
    v80 = v142;
  }
  else
  {
    if (!v143)
      goto LABEL_95;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v152);
  v82 = v152;
  std::string::basic_string[abi:ne180100]<0>(v113, "values");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v113, 0, (uint64_t *)&Scalar);
  v115 = Scalar;
  if (Scalar)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = Scalar;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v116 = v83;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v111, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v82 + 3))(v82, &v115, v111);
  if (v112 < 0)
    operator delete(v111[0]);
  v85 = v116;
  if (v116)
  {
    p_shared_owners = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = Scalar;
  Scalar = 0;
  if (v88)
    (*((void (**)(std::__shared_weak_count_vtbl *))v88->~__shared_weak_count + 1))(v88);
  if (v114 < 0)
    operator delete(v113[0]);
  v89 = v152;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v109 = Scalar;
  if (Scalar)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = Scalar;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v110 = v90;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v107, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v89 + 3))(v89, &v109, v107);
  if (v108 < 0)
    operator delete(v107[0]);
  v92 = v110;
  if (v110)
  {
    v93 = (unint64_t *)&v110->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = Scalar;
  Scalar = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  v96 = *a3;
  v105 = v152;
  if (v152)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v152;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = (std::__shared_weak_count_vtbl *)v98;
  }
  else
  {
    v97 = 0;
  }
  v106 = v97;
  v152 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v96 + 56))(v96, &v105);
  v99 = v106;
  if (v106)
  {
    v100 = (unint64_t *)&v106->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v152;
  v152 = 0;
  if (v102)
    (*((void (**)(void **))*v102 + 1))(v102);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v128, 0);
  result = (uint64_t)v141;
  if (v141)
  {
    v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v141);
    return MEMORY[0x1E0C023A0](v104, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07CC7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40)
{
  uint64_t *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;

  v43 = *(_QWORD *)(v41 - 112);
  *(_QWORD *)(v41 - 112) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *v40;
  *v40 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v41 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::DepthToSpace::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char **v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  void *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  void *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t result;
  uint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  __int128 v162;
  __int128 v163;
  void *v164[2];
  uint64_t v165;
  __n128 v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  char **v170;
  __n128 v171;
  __n128 v172;
  _QWORD *v173;
  void *__p;
  void *v175;
  char *v176;
  char *v177;
  char **v178;
  _QWORD v179[3];
  _QWORD *v180;
  _BYTE v181[24];
  _BYTE *v182;
  _BYTE v183[24];
  _BYTE *v184;
  void *v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD v188[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared_weak;
  void (__cdecl **v191)(std::__shared_weak_count *__hidden);
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v173 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = operator new(0x20uLL);
  v175 = v11 + 4;
  v176 = (char *)(v11 + 4);
  *v11 = v7;
  v11[1] = v8;
  v11[2] = v9;
  v11[3] = v10;
  __p = v11;
  v185 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (std::__shared_weak_count_vtbl *)&v16->__on_zero_shared_weak;
  v191 = &v16->__on_zero_shared_weak;
  v16->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v14;
  v16->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v15;
  Scalar = v16;
  v186 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 2, &v172);
  MIL::IRParameter::Make(&v172, &v168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v168);
  v17 = v168;
  v168 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v19 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v175 = __p;
    operator delete(__p);
  }
  v21 = v173;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v171);
  MIL::IRParameter::Make(&v171, (uint64_t *)&__p);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v21, "block_size", (uint64_t *)&__p);
  v23 = __p;
  __p = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v171.n128_u64[1];
  if (v171.n128_u64[1])
  {
    v25 = (unint64_t *)(v171.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 32))(*((_QWORD *)v22 + 5), 1);
  v170 = 0;
  v27 = operator new();
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v170, (void **)v27);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v170, 1uLL);
  v28 = v170;
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (std::__shared_weak_count_vtbl *)&v33->__on_zero_shared_weak;
  v191 = &v33->__on_zero_shared_weak;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v33->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v31;
  v33->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v32;
  Scalar = v33;
  v188[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = operator new(0x20uLL);
  v186 = (uint64_t)(v38 + 4);
  v187 = v38 + 4;
  *v38 = v34;
  v38[1] = v35;
  v38[2] = v36;
  v38[3] = v37;
  v185 = v38;
  v188[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v185);
  MIL::IRParameter::MakeTypeSet((uint64_t)v188, 2, &v166);
  MIL::IRParameter::Make(&v166, &v167);
  v39 = v167;
  v168 = v167;
  if (v167)
  {
    v40 = (_QWORD *)operator new();
    v41 = v167;
    *v40 = &unk_1EA99F888;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  v169 = v40;
  v167 = 0;
  v42 = v28[2];
  v43 = v28[1];
  if (v43 >= v42)
  {
    v45 = (v43 - *v28) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v47 = v42 - *v28;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v178 = v28 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v28 + 2), v48);
    v51 = (uint64_t *)&v49[16 * v45];
    *v51 = v39;
    v51[1] = (uint64_t)v40;
    v168 = 0;
    v169 = 0;
    v53 = *v28;
    v52 = v28[1];
    if (v52 == *v28)
    {
      v56 = v28[1];
      v54 = &v49[16 * v45];
    }
    else
    {
      v54 = &v49[16 * v45];
      do
      {
        v55 = *((_OWORD *)v52 - 1);
        v52 -= 16;
        *((_OWORD *)v54 - 1) = v55;
        v54 -= 16;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
      }
      while (v52 != v53);
      v56 = *v28;
      v52 = v28[1];
    }
    v44 = (char *)(v51 + 2);
    *v28 = v54;
    __p = v56;
    v175 = v56;
    v28[1] = (char *)(v51 + 2);
    v176 = v52;
    v57 = v28[2];
    v28[2] = &v49[16 * v50];
    v177 = v57;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v40;
    v44 = v43 + 16;
    v168 = 0;
    v169 = 0;
  }
  v28[1] = v44;
  v58 = v167;
  v167 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v166.n128_u64[1];
  if (v166.n128_u64[1])
  {
    v60 = (unint64_t *)(v166.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v185)
  {
    v186 = (uint64_t)v185;
    operator delete(v185);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v164 = *(_OWORD *)a2;
  v165 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v62 = (uint64_t)v173;
  *(_QWORD *)&v163 = v173;
  if (v173)
  {
    v63 = (_QWORD *)operator new();
    *v63 = &unk_1EA99F8E8;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v163 + 1) = v63;
  v173 = 0;
  *(_QWORD *)&v162 = v170;
  if (v170)
  {
    v64 = (_QWORD *)operator new();
    v65 = v170;
    *v64 = &unk_1EA99F948;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v162 + 1) = v64;
  v170 = 0;
  v184 = 0;
  v182 = 0;
  MIL::IROperator::Make((__int128 *)v164, &v163, &v162, (uint64_t)v183, (uint64_t)v181, a3);
  v66 = v182;
  if (v182 == v181)
  {
    v67 = 4;
    v66 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_58;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_58:
  v68 = v184;
  if (v184 == v183)
  {
    v69 = 4;
    v68 = v183;
    goto LABEL_62;
  }
  if (v184)
  {
    v69 = 5;
LABEL_62:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v165) < 0)
    operator delete(v164[0]);
  v76 = *a3;
  v179[0] = &off_1EA99FBD8;
  v179[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceDepthToSpace;
  v180 = v179;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 200))(v76, v179);
  v77 = v180;
  if (v180 == v179)
  {
    v78 = 4;
    v77 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_80;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v161 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v79 + 24))(v79, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v82 = v161;
  if (v161)
  {
    p_shared_owners = (unint64_t *)&v161->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  if (v159 < 0)
    operator delete(v158[0]);
  v86 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v155 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v86 + 24))(v86, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v89 = v155;
  if (v155)
  {
    v90 = (unint64_t *)&v155->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  v93 = *a3;
  v150 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v151 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v150);
  v96 = v151;
  if (v151)
  {
    v97 = (unint64_t *)&v151->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v100 = __p;
  std::string::basic_string[abi:ne180100]<0>(v146, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v146, 0, (uint64_t *)&Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = Scalar;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v149 = v101;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v100 + 24))(v100, &v148, 1, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v103 = v149;
  if (v149)
  {
    v104 = (unint64_t *)&v149->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = Scalar;
  Scalar = 0;
  if (v106)
    (*((void (**)(std::__shared_weak_count_vtbl *))v106->~__shared_weak_count + 1))(v106);
  if (v147 < 0)
    operator delete(v146[0]);
  v107 = __p;
  std::string::basic_string[abi:ne180100]<0>(v140, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&Scalar);
  v142 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v143 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "D_in1");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v107 + 24))(v107, &v142, 2, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v110 = v143;
  if (v143)
  {
    v111 = (unint64_t *)&v143->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  if (v141 < 0)
    operator delete(v140[0]);
  v114 = __p;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v137 = v115;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "D_in2");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v114 + 24))(v114, &v136, 3, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v117 = v137;
  if (v137)
  {
    v118 = (unint64_t *)&v137->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*((void (**)(std::__shared_weak_count_vtbl *))v120->~__shared_weak_count + 1))(v120);
  if (v135 < 0)
    operator delete(v134[0]);
  v121 = *a3;
  v130 = __p;
  if (__p)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)__p;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v131 = v122;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, &v130);
  v124 = v131;
  if (v131)
  {
    v125 = (unint64_t *)&v131->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = __p;
  __p = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v170, 0);
  result = (uint64_t)v173;
  if (v173)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v173);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07CDA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  uint64_t a68;
  void *a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a69;
  a69 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::ExpandDims::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  unsigned __int8 *v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  void **v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  char **v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void **v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  void **v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  void **v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void **v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void **v111;
  uint64_t result;
  uint64_t v113;
  void **v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  void **v122;
  std::__shared_weak_count *v123;
  void *v124[2];
  char v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  void *v130[2];
  char v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  __int128 v134;
  __int128 v135;
  void *v136[2];
  uint64_t v137;
  void *v138;
  void *v139;
  _QWORD *v140;
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  char **v145;
  __n128 v146;
  void *__p;
  void *v148;
  _QWORD *v149;
  void *v150;
  void *v151;
  _QWORD *v152;
  __n128 v153;
  _QWORD *v154;
  _QWORD v155[3];
  _QWORD *v156;
  _BYTE v157[24];
  _BYTE *v158;
  _QWORD v159[3];
  _QWORD *v160;
  std::__shared_weak_count_vtbl *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  void **v168;
  void **v169;
  uint64_t v170;
  uint64_t v171;
  char **v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v154 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v161 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v162 = (uint64_t)&v8->~__shared_weak_count_0;
  v163 = (uint64_t)&v8->~__shared_weak_count_0;
  v168 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v161);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v165 = v10;
  *v10 = v9;
  v166 = v10 + 1;
  v167 = v10 + 1;
  v169 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v150 = v12;
  *v12 = v11;
  v151 = v12 + 1;
  v152 = v12 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v150);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v148 = v14 + 1;
  v149 = v14 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v168, 4, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v138);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v138);
  v15 = v138;
  v138 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v17 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v148 = __p;
    operator delete(__p);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (v161)
  {
    v162 = (uint64_t)v161;
    operator delete(v161);
  }
  v19 = v154;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (void **)operator new(8uLL);
  v168 = v21;
  *v21 = (void *)v20;
  v169 = v21 + 1;
  v170 = (uint64_t)(v21 + 1);
  v165 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v168);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 1, &v146);
  MIL::IRParameter::Make(&v146, (uint64_t *)&v161);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "axes", (uint64_t *)&v161);
  v23 = v161;
  v161 = 0;
  if (v23)
    (*((void (**)(std::__shared_weak_count_vtbl *))v23->~__shared_weak_count + 1))(v23);
  v24 = (std::__shared_weak_count *)v146.n128_u64[1];
  if (v146.n128_u64[1])
  {
    v25 = (unint64_t *)(v146.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 32))(*((_QWORD *)v22 + 5), 1);
  v145 = 0;
  v27 = operator new();
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = 0;
  v168 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v145, (void **)v27);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v168, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v145, 1uLL);
  v28 = v145;
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v165 = v30;
  *v30 = v29;
  v166 = v30 + 1;
  v167 = v30 + 1;
  v161 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v150 = v32;
  *v32 = v31;
  v151 = v32 + 1;
  v152 = v32 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v150);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  __p = v34;
  *v34 = v33;
  v148 = v34 + 1;
  v149 = v34 + 1;
  v163 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v138 = v36;
  *v36 = v35;
  v139 = v36 + 1;
  v140 = v36 + 1;
  v164 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v138);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v161, 4, &v141);
  MIL::IRParameter::Make(&v141, &v142);
  v37 = v142;
  v143 = v142;
  if (v142)
  {
    v38 = (_QWORD *)operator new();
    v39 = v142;
    *v38 = &unk_1EA99F888;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v144 = v38;
  v142 = 0;
  v40 = v28[2];
  v41 = v28[1];
  if (v41 >= v40)
  {
    v43 = (v41 - *v28) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v45 = v40 - *v28;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v172 = v28 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v28 + 2), v46);
    v49 = (uint64_t *)&v47[16 * v43];
    *v49 = v37;
    v49[1] = (uint64_t)v38;
    v143 = 0;
    v144 = 0;
    v51 = *v28;
    v50 = v28[1];
    if (v50 == *v28)
    {
      v54 = (void **)v28[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 16;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
      while (v50 != v51);
      v54 = (void **)*v28;
      v50 = v28[1];
    }
    v42 = (char *)(v49 + 2);
    *v28 = v52;
    v168 = v54;
    v169 = v54;
    v28[1] = (char *)(v49 + 2);
    v170 = (uint64_t)v50;
    v55 = v28[2];
    v28[2] = &v47[16 * v48];
    v171 = (uint64_t)v55;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v168);
  }
  else
  {
    *(_QWORD *)v41 = v37;
    *((_QWORD *)v41 + 1) = v38;
    v42 = v41 + 16;
    v143 = 0;
    v144 = 0;
  }
  v28[1] = v42;
  v56 = v142;
  v142 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v141.n128_u64[1];
  if (v141.n128_u64[1])
  {
    v58 = (unint64_t *)(v141.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  if (__p)
  {
    v148 = __p;
    operator delete(__p);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  *(_OWORD *)v136 = *(_OWORD *)a2;
  v137 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = (uint64_t)v154;
  *(_QWORD *)&v135 = v154;
  if (v154)
  {
    v61 = (_QWORD *)operator new();
    *v61 = &unk_1EA99F8E8;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v60;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v135 + 1) = v61;
  v154 = 0;
  *(_QWORD *)&v134 = v145;
  if (v145)
  {
    v62 = (_QWORD *)operator new();
    v63 = v145;
    *v62 = &unk_1EA99F948;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v134 + 1) = v62;
  v145 = 0;
  v159[0] = &unk_1EA99FAC8;
  v159[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateExpandDims;
  v160 = v159;
  v158 = 0;
  MIL::IROperator::Make((__int128 *)v136, &v135, &v134, (uint64_t)v159, (uint64_t)v157, a3);
  v64 = v158;
  if (v158 == v157)
  {
    v65 = 4;
    v64 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_68;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_68:
  v66 = v160;
  if (v160 == v159)
  {
    v67 = 4;
    v66 = v159;
    goto LABEL_72;
  }
  if (v160)
  {
    v67 = 5;
LABEL_72:
    (*(void (**)(void))(*v66 + 8 * v67))();
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  if (*((_QWORD *)&v134 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
  if (*((_QWORD *)&v135 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SHIBYTE(v137) < 0)
    operator delete(v136[0]);
  v74 = *a3;
  v155[0] = &off_1EA99FBD8;
  v155[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceExpandDims;
  v156 = v155;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v74 + 200))(v74, v155);
  v75 = v156;
  if (v156 == v155)
  {
    v76 = 4;
    v75 = v155;
  }
  else
  {
    if (!v156)
      goto LABEL_90;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_90:
  MIL::Validation::TensorDTypeConstraints::Make(&v168);
  v77 = v168;
  std::string::basic_string[abi:ne180100]<0>(v130, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v130, 0, (uint64_t *)&v161);
  v132 = v161;
  if (v161)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v79 = v161;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v79;
  }
  else
  {
    v78 = 0;
  }
  v133 = v78;
  v161 = 0;
  std::string::basic_string[abi:ne180100]<0>(v128, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v77 + 3))(v77, &v132, v128);
  if (v129 < 0)
    operator delete(v128[0]);
  v80 = v133;
  if (v133)
  {
    p_shared_owners = (unint64_t *)&v133->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v161;
  v161 = 0;
  if (v83)
    (*((void (**)(std::__shared_weak_count_vtbl *))v83->~__shared_weak_count + 1))(v83);
  if (v131 < 0)
    operator delete(v130[0]);
  v84 = v168;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v161);
  v126 = v161;
  if (v161)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = v161;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v127 = v85;
  v161 = 0;
  std::string::basic_string[abi:ne180100]<0>(v124, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v84 + 3))(v84, &v126, v124);
  if (v125 < 0)
    operator delete(v124[0]);
  v87 = v127;
  if (v127)
  {
    v88 = (unint64_t *)&v127->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v161;
  v161 = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  v91 = *a3;
  v122 = v168;
  if (v168)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = v168;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = (std::__shared_weak_count_vtbl *)v93;
  }
  else
  {
    v92 = 0;
  }
  v123 = v92;
  v168 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v91 + 56))(v91, &v122);
  v94 = v123;
  if (v123)
  {
    v95 = (unint64_t *)&v123->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v168;
  v168 = 0;
  if (v97)
    (*((void (**)(void **))*v97 + 1))(v97);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v168);
  v98 = v168;
  std::string::basic_string[abi:ne180100]<0>(v118, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&v161);
  v120 = v161;
  if (v161)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = v161;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v121 = v99;
  v161 = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v98 + 3))(v98, &v120, 0, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v101 = v121;
  if (v121)
  {
    v102 = (unint64_t *)&v121->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v161;
  v161 = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v119 < 0)
    operator delete(v118[0]);
  v105 = *a3;
  v114 = v168;
  if (v168)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v168;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v115 = v106;
  v168 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v105 + 56))(v105, &v114);
  v108 = v115;
  if (v115)
  {
    v109 = (unint64_t *)&v115->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v168;
  v168 = 0;
  if (v111)
    (*((void (**)(void **))*v111 + 1))(v111);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v145, 0);
  result = (uint64_t)v154;
  if (v154)
  {
    v113 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v154);
    return MEMORY[0x1E0C023A0](v113, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07CEB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;

  v64 = *(_QWORD *)(v62 - 112);
  *(_QWORD *)(v62 - 112) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *v61;
  *v61 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::PixelShuffle::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char **v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  void *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  void *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t result;
  uint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  __int128 v162;
  __int128 v163;
  void *v164[2];
  uint64_t v165;
  __n128 v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  char **v170;
  __n128 v171;
  __n128 v172;
  _QWORD *v173;
  void *__p;
  void *v175;
  char *v176;
  char *v177;
  char **v178;
  _QWORD v179[3];
  _QWORD *v180;
  _BYTE v181[24];
  _BYTE *v182;
  _BYTE v183[24];
  _BYTE *v184;
  void *v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD v188[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared_weak;
  void (__cdecl **v191)(std::__shared_weak_count *__hidden);
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v173 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = operator new(0x20uLL);
  v175 = v11 + 4;
  v176 = (char *)(v11 + 4);
  *v11 = v7;
  v11[1] = v8;
  v11[2] = v9;
  v11[3] = v10;
  __p = v11;
  v185 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (std::__shared_weak_count_vtbl *)&v16->__on_zero_shared_weak;
  v191 = &v16->__on_zero_shared_weak;
  v16->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v14;
  v16->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v15;
  Scalar = v16;
  v186 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 2, &v172);
  MIL::IRParameter::Make(&v172, &v168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v168);
  v17 = v168;
  v168 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v19 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v175 = __p;
    operator delete(__p);
  }
  v21 = v173;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v171);
  MIL::IRParameter::Make(&v171, (uint64_t *)&__p);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v21, "upscale_factor", (uint64_t *)&__p);
  v23 = __p;
  __p = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v171.n128_u64[1];
  if (v171.n128_u64[1])
  {
    v25 = (unint64_t *)(v171.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 32))(*((_QWORD *)v22 + 5), 1);
  v170 = 0;
  v27 = operator new();
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v170, (void **)v27);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v170, 1uLL);
  v28 = v170;
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (std::__shared_weak_count_vtbl *)&v33->__on_zero_shared_weak;
  v191 = &v33->__on_zero_shared_weak;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v33->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v31;
  v33->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v32;
  Scalar = v33;
  v188[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = operator new(0x20uLL);
  v186 = (uint64_t)(v38 + 4);
  v187 = v38 + 4;
  *v38 = v34;
  v38[1] = v35;
  v38[2] = v36;
  v38[3] = v37;
  v185 = v38;
  v188[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v185);
  MIL::IRParameter::MakeTypeSet((uint64_t)v188, 2, &v166);
  MIL::IRParameter::Make(&v166, &v167);
  v39 = v167;
  v168 = v167;
  if (v167)
  {
    v40 = (_QWORD *)operator new();
    v41 = v167;
    *v40 = &unk_1EA99F888;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  v169 = v40;
  v167 = 0;
  v42 = v28[2];
  v43 = v28[1];
  if (v43 >= v42)
  {
    v45 = (v43 - *v28) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v47 = v42 - *v28;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v178 = v28 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v28 + 2), v48);
    v51 = (uint64_t *)&v49[16 * v45];
    *v51 = v39;
    v51[1] = (uint64_t)v40;
    v168 = 0;
    v169 = 0;
    v53 = *v28;
    v52 = v28[1];
    if (v52 == *v28)
    {
      v56 = v28[1];
      v54 = &v49[16 * v45];
    }
    else
    {
      v54 = &v49[16 * v45];
      do
      {
        v55 = *((_OWORD *)v52 - 1);
        v52 -= 16;
        *((_OWORD *)v54 - 1) = v55;
        v54 -= 16;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
      }
      while (v52 != v53);
      v56 = *v28;
      v52 = v28[1];
    }
    v44 = (char *)(v51 + 2);
    *v28 = v54;
    __p = v56;
    v175 = v56;
    v28[1] = (char *)(v51 + 2);
    v176 = v52;
    v57 = v28[2];
    v28[2] = &v49[16 * v50];
    v177 = v57;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v40;
    v44 = v43 + 16;
    v168 = 0;
    v169 = 0;
  }
  v28[1] = v44;
  v58 = v167;
  v167 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v166.n128_u64[1];
  if (v166.n128_u64[1])
  {
    v60 = (unint64_t *)(v166.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v185)
  {
    v186 = (uint64_t)v185;
    operator delete(v185);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v164 = *(_OWORD *)a2;
  v165 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v62 = (uint64_t)v173;
  *(_QWORD *)&v163 = v173;
  if (v173)
  {
    v63 = (_QWORD *)operator new();
    *v63 = &unk_1EA99F8E8;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v163 + 1) = v63;
  v173 = 0;
  *(_QWORD *)&v162 = v170;
  if (v170)
  {
    v64 = (_QWORD *)operator new();
    v65 = v170;
    *v64 = &unk_1EA99F948;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v162 + 1) = v64;
  v170 = 0;
  v184 = 0;
  v182 = 0;
  MIL::IROperator::Make((__int128 *)v164, &v163, &v162, (uint64_t)v183, (uint64_t)v181, a3);
  v66 = v182;
  if (v182 == v181)
  {
    v67 = 4;
    v66 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_58;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_58:
  v68 = v184;
  if (v184 == v183)
  {
    v69 = 4;
    v68 = v183;
    goto LABEL_62;
  }
  if (v184)
  {
    v69 = 5;
LABEL_62:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v165) < 0)
    operator delete(v164[0]);
  v76 = *a3;
  v179[0] = &off_1EA99FBD8;
  v179[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferencePixelShuffle;
  v180 = v179;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 200))(v76, v179);
  v77 = v180;
  if (v180 == v179)
  {
    v78 = 4;
    v77 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_80;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v161 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v79 + 24))(v79, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v82 = v161;
  if (v161)
  {
    p_shared_owners = (unint64_t *)&v161->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  if (v159 < 0)
    operator delete(v158[0]);
  v86 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v155 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v86 + 24))(v86, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v89 = v155;
  if (v155)
  {
    v90 = (unint64_t *)&v155->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  v93 = *a3;
  v150 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v151 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v150);
  v96 = v151;
  if (v151)
  {
    v97 = (unint64_t *)&v151->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v100 = __p;
  std::string::basic_string[abi:ne180100]<0>(v146, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v146, 0, (uint64_t *)&Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = Scalar;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v149 = v101;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v100 + 24))(v100, &v148, 1, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v103 = v149;
  if (v149)
  {
    v104 = (unint64_t *)&v149->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = Scalar;
  Scalar = 0;
  if (v106)
    (*((void (**)(std::__shared_weak_count_vtbl *))v106->~__shared_weak_count + 1))(v106);
  if (v147 < 0)
    operator delete(v146[0]);
  v107 = __p;
  std::string::basic_string[abi:ne180100]<0>(v140, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&Scalar);
  v142 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v143 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "D_in1");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v107 + 24))(v107, &v142, 2, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v110 = v143;
  if (v143)
  {
    v111 = (unint64_t *)&v143->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  if (v141 < 0)
    operator delete(v140[0]);
  v114 = __p;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v137 = v115;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "D_in2");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v114 + 24))(v114, &v136, 3, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v117 = v137;
  if (v137)
  {
    v118 = (unint64_t *)&v137->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*((void (**)(std::__shared_weak_count_vtbl *))v120->~__shared_weak_count + 1))(v120);
  if (v135 < 0)
    operator delete(v134[0]);
  v121 = *a3;
  v130 = __p;
  if (__p)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)__p;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v131 = v122;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, &v130);
  v124 = v131;
  if (v131)
  {
    v125 = (unint64_t *)&v131->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = __p;
  __p = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v170, 0);
  result = (uint64_t)v173;
  if (v173)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v173);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07CFDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  uint64_t a68;
  void *a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a69;
  a69 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Reshape::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  void **v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void **v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void **v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void **v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void **v110;
  uint64_t result;
  uint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  void *v115[2];
  char v116;
  void *v117[2];
  char v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  void **v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  __int128 v133;
  __int128 v134;
  void *v135[2];
  uint64_t v136;
  void *v137;
  void *v138;
  _QWORD *v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  void *__p;
  void *v147;
  _QWORD *v148;
  void *v149;
  void *v150;
  _QWORD *v151;
  __n128 v152;
  _QWORD *v153;
  _QWORD v154[3];
  _QWORD *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _QWORD v158[3];
  _QWORD *v159;
  std::__shared_weak_count_vtbl *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  void *v165;
  _QWORD *v166;
  void **v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  char **v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v153 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v160 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v161 = (uint64_t)&v8->~__shared_weak_count_0;
  v162 = (uint64_t)&v8->~__shared_weak_count_0;
  v167 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v164 = v10;
  *v10 = v9;
  v165 = v10 + 1;
  v166 = v10 + 1;
  v168 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v164);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v149 = v12;
  *v12 = v11;
  v150 = v12 + 1;
  v151 = v12 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v149);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v147 = v14 + 1;
  v148 = v14 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 4, &v152);
  MIL::IRParameter::Make(&v152, (uint64_t *)&v137);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v137);
  v15 = v137;
  v137 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v17 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v147 = __p;
    operator delete(__p);
  }
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (v160)
  {
    v161 = (uint64_t)v160;
    operator delete(v160);
  }
  v19 = v153;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (void **)operator new(8uLL);
  v167 = v21;
  *v21 = (void *)v20;
  v168 = v21 + 1;
  v169 = (uint64_t)(v21 + 1);
  v164 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v167);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 1, &v145);
  MIL::IRParameter::Make(&v145, (uint64_t *)&v160);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "shape", (uint64_t *)&v160);
  v22 = v160;
  v160 = 0;
  if (v22)
    (*((void (**)(std::__shared_weak_count_vtbl *))v22->~__shared_weak_count + 1))(v22);
  v23 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v24 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  v144 = 0;
  v26 = operator new();
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v167 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v26);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v167, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v27 = v144;
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v164 = v29;
  *v29 = v28;
  v165 = v29 + 1;
  v166 = v29 + 1;
  v160 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v164);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v149 = v31;
  *v31 = v30;
  v150 = v31 + 1;
  v151 = v31 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v149);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v147 = v33 + 1;
  v148 = v33 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v137 = v35;
  *v35 = v34;
  v138 = v35 + 1;
  v139 = v35 + 1;
  v163 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v137);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 4, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v36 = v141;
  v142 = v141;
  if (v141)
  {
    v37 = (_QWORD *)operator new();
    v38 = v141;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v143 = v37;
  v141 = 0;
  v39 = v27[2];
  v40 = v27[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v27) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v27;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v171 = v27 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v27 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v142 = 0;
    v143 = 0;
    v50 = *v27;
    v49 = v27[1];
    if (v49 == *v27)
    {
      v53 = (void **)v27[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = (void **)*v27;
      v49 = v27[1];
    }
    v41 = (char *)(v48 + 2);
    *v27 = v51;
    v167 = v53;
    v168 = v53;
    v27[1] = (char *)(v48 + 2);
    v169 = (uint64_t)v49;
    v54 = v27[2];
    v27[2] = &v46[16 * v47];
    v170 = (uint64_t)v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v167);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v142 = 0;
    v143 = 0;
  }
  v27[1] = v41;
  v55 = v141;
  v141 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v57 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  if (__p)
  {
    v147 = __p;
    operator delete(__p);
  }
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  *(_OWORD *)v135 = *(_OWORD *)a2;
  v136 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v153;
  *(_QWORD *)&v134 = v153;
  if (v153)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v134 + 1) = v60;
  v153 = 0;
  *(_QWORD *)&v133 = v144;
  if (v144)
  {
    v61 = (_QWORD *)operator new();
    v62 = v144;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v133 + 1) = v61;
  v144 = 0;
  v158[0] = &unk_1EA99FAC8;
  v158[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateReshape;
  v159 = v158;
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v135, &v134, &v133, (uint64_t)v158, (uint64_t)v156, a3);
  v63 = v157;
  if (v157 == v156)
  {
    v64 = 4;
    v63 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v159;
  if (v159 == v158)
  {
    v66 = 4;
    v65 = v158;
    goto LABEL_72;
  }
  if (v159)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
  if (*((_QWORD *)&v133 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  if (*((_QWORD *)&v134 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v136) < 0)
    operator delete(v135[0]);
  v73 = *a3;
  v154[0] = &off_1EA99FBD8;
  v154[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceReshape;
  v155 = v154;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v154);
  v74 = v155;
  if (v155 == v154)
  {
    v75 = 4;
    v74 = v154;
  }
  else
  {
    if (!v155)
      goto LABEL_90;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_90:
  MIL::Validation::TensorDTypeConstraints::Make(&v167);
  v76 = v167;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&v160);
  v131 = v160;
  if (v160)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = v160;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v76 + 3))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    p_shared_owners = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v160;
  v160 = 0;
  if (v82)
    (*((void (**)(std::__shared_weak_count_vtbl *))v82->~__shared_weak_count + 1))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v167;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v160);
  v125 = v160;
  if (v160)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v160;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v160;
  v160 = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  v90 = *a3;
  v121 = v167;
  if (v167)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v167;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v167 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v167;
  v167 = 0;
  if (v96)
    (*((void (**)(void **))*v96 + 1))(v96);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v167);
  v97 = v167;
  std::string::basic_string[abi:ne180100]<0>(v117, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v117, 0, (uint64_t *)&v160);
  v119 = v160;
  if (v160)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v160;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v115, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v97 + 3))(v97, &v119, 0, v115);
  if (v116 < 0)
    operator delete(v115[0]);
  v100 = v120;
  if (v120)
  {
    v101 = (unint64_t *)&v120->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v160;
  v160 = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  if (v118 < 0)
    operator delete(v117[0]);
  v104 = *a3;
  v113 = v167;
  if (v167)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v167;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v114 = v105;
  v167 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v113);
  v107 = v114;
  if (v114)
  {
    v108 = (unint64_t *)&v114->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v167;
  v167 = 0;
  if (v110)
    (*((void (**)(void **))*v110 + 1))(v110);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = (uint64_t)v153;
  if (v153)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v153);
    return MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07D0EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;

  v64 = *(_QWORD *)(v62 - 112);
  *(_QWORD *)(v62 - 112) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *v61;
  *v61 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Reverse::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  void **v62;
  char *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  char **v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  void **v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void **v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void **v106;
  void **v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  void **v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void **v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void **v134;
  uint64_t result;
  uint64_t v136;
  void **v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  void *v151[2];
  char v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  void **v155;
  std::__shared_weak_count *v156;
  void *v157[2];
  char v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  void *v163[2];
  char v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  __int128 v167;
  __int128 v168;
  void *v169[2];
  uint64_t v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  __n128 v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  char **v178;
  __n128 v179;
  void *__p;
  void *v181;
  _QWORD *v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  __n128 v186;
  _QWORD *v187;
  _BYTE v188[24];
  _BYTE *v189;
  _BYTE v190[24];
  _BYTE *v191;
  _QWORD v192[3];
  _QWORD *v193;
  std::__shared_weak_count_vtbl *v194;
  uint64_t p_on_zero_shared;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  void **v201;
  void **v202;
  uint64_t v203;
  uint64_t v204;
  char **v205;
  uint64_t v206;

  v206 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v187 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v196 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v194 = v9;
  v201 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v194);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v199 = v12 + 2;
  v200 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v198 = v12;
  v202 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v198);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v184 = v15 + 2;
  v185 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v183 = v15;
  v203 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v183);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v181 = v18 + 2;
  v182 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  __p = v18;
  v204 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v201, 4, &v186);
  MIL::IRParameter::Make(&v186, (uint64_t *)&v171);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v171);
  v19 = v171;
  v171 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v186.n128_u64[1];
  if (v186.n128_u64[1])
  {
    v21 = (unint64_t *)(v186.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v181 = __p;
    operator delete(__p);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v194)
  {
    p_on_zero_shared = (uint64_t)v194;
    operator delete(v194);
  }
  v23 = v187;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (void **)operator new(8uLL);
  v201 = v25;
  *v25 = (void *)v24;
  v202 = v25 + 1;
  v203 = (uint64_t)(v25 + 1);
  v198 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v201);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v198, 1, &v179);
  MIL::IRParameter::Make(&v179, (uint64_t *)&v194);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v23, "axes", (uint64_t *)&v194);
  v27 = v194;
  v194 = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = (std::__shared_weak_count *)v179.n128_u64[1];
  if (v179.n128_u64[1])
  {
    v29 = (unint64_t *)(v179.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v178 = 0;
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  v201 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v178, (void **)v31);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v201, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v178, 1uLL);
  v32 = v178;
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(0x10uLL);
  v199 = v35 + 2;
  v200 = v35 + 2;
  *v35 = v33;
  v35[1] = v34;
  v198 = v35;
  v194 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v198);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(0x10uLL);
  v184 = v38 + 2;
  v185 = v38 + 2;
  *v38 = v36;
  v38[1] = v37;
  v183 = v38;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v183);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(0x10uLL);
  v181 = v41 + 2;
  v182 = v41 + 2;
  *v41 = v39;
  v41[1] = v40;
  __p = v41;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(0x10uLL);
  v172 = v44 + 2;
  v173 = v44 + 2;
  *v44 = v42;
  v44[1] = v43;
  v171 = v44;
  v197 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v171);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v194, 4, &v174);
  MIL::IRParameter::Make(&v174, &v175);
  v45 = v175;
  v176 = v175;
  if (v175)
  {
    v46 = (_QWORD *)operator new();
    v47 = v175;
    *v46 = &unk_1EA99F888;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  v177 = v46;
  v175 = 0;
  v48 = v32[2];
  v49 = v32[1];
  if (v49 >= v48)
  {
    v51 = (v49 - *v32) >> 4;
    v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v53 = v48 - *v32;
    if (v53 >> 3 > v52)
      v52 = v53 >> 3;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
      v54 = 0xFFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    v205 = v32 + 2;
    v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v32 + 2), v54);
    v57 = (uint64_t *)&v55[16 * v51];
    *v57 = v45;
    v57[1] = (uint64_t)v46;
    v176 = 0;
    v177 = 0;
    v59 = *v32;
    v58 = v32[1];
    if (v58 == *v32)
    {
      v62 = (void **)v32[1];
      v60 = &v55[16 * v51];
    }
    else
    {
      v60 = &v55[16 * v51];
      do
      {
        v61 = *((_OWORD *)v58 - 1);
        v58 -= 16;
        *((_OWORD *)v60 - 1) = v61;
        v60 -= 16;
        *(_QWORD *)v58 = 0;
        *((_QWORD *)v58 + 1) = 0;
      }
      while (v58 != v59);
      v62 = (void **)*v32;
      v58 = v32[1];
    }
    v50 = (char *)(v57 + 2);
    *v32 = v60;
    v201 = v62;
    v202 = v62;
    v32[1] = (char *)(v57 + 2);
    v203 = (uint64_t)v58;
    v63 = v32[2];
    v32[2] = &v55[16 * v56];
    v204 = (uint64_t)v63;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v201);
  }
  else
  {
    *(_QWORD *)v49 = v45;
    *((_QWORD *)v49 + 1) = v46;
    v50 = v49 + 16;
    v176 = 0;
    v177 = 0;
  }
  v32[1] = v50;
  v64 = v175;
  v175 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v66 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (__p)
  {
    v181 = __p;
    operator delete(__p);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  *(_OWORD *)v169 = *(_OWORD *)a2;
  v170 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v68 = (uint64_t)v187;
  *(_QWORD *)&v168 = v187;
  if (v187)
  {
    v69 = (_QWORD *)operator new();
    *v69 = &unk_1EA99F8E8;
    v69[1] = 0;
    v69[2] = 0;
    v69[3] = v68;
  }
  else
  {
    v69 = 0;
  }
  *((_QWORD *)&v168 + 1) = v69;
  v187 = 0;
  *(_QWORD *)&v167 = v178;
  if (v178)
  {
    v70 = (_QWORD *)operator new();
    v71 = v178;
    *v70 = &unk_1EA99F948;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  *((_QWORD *)&v167 + 1) = v70;
  v178 = 0;
  v192[0] = &unk_1EA99FAC8;
  v192[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateReverse;
  v193 = v192;
  v191 = 0;
  MIL::IROperator::Make((__int128 *)v169, &v168, &v167, (uint64_t)v192, (uint64_t)v190, a3);
  v72 = v191;
  if (v191 == v190)
  {
    v73 = 4;
    v72 = v190;
  }
  else
  {
    if (!v191)
      goto LABEL_68;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_68:
  v74 = v193;
  if (v193 == v192)
  {
    v75 = 4;
    v74 = v192;
    goto LABEL_72;
  }
  if (v193)
  {
    v75 = 5;
LABEL_72:
    (*(void (**)(void))(*v74 + 8 * v75))();
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
  if (*((_QWORD *)&v168 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (SHIBYTE(v170) < 0)
    operator delete(v169[0]);
  v82 = *a3;
  v83 = std::string::basic_string[abi:ne180100]<0>(&v201, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v83, (uint64_t)v188);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v82 + 200))(v82, v188);
  v84 = v189;
  if (v189 == v188)
  {
    v85 = 4;
    v84 = v188;
  }
  else
  {
    if (!v189)
      goto LABEL_90;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_90:
  if (SHIBYTE(v203) < 0)
    operator delete(v201);
  MIL::Validation::TensorDTypeConstraints::Make(&v201);
  v86 = v201;
  std::string::basic_string[abi:ne180100]<0>(v163, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v163, 0, (uint64_t *)&v194);
  v165 = v194;
  if (v194)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = v194;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v166 = v87;
  v194 = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v86 + 3))(v86, &v165, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v89 = v166;
  if (v166)
  {
    p_shared_owners = (unint64_t *)&v166->__shared_owners_;
    do
      v91 = __ldaxr(p_shared_owners);
    while (__stlxr(v91 - 1, p_shared_owners));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = v194;
  v194 = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  if (v164 < 0)
    operator delete(v163[0]);
  v93 = v201;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v194);
  v159 = v194;
  if (v194)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = v194;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v160 = v94;
  v194 = 0;
  std::string::basic_string[abi:ne180100]<0>(v157, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v93 + 3))(v93, &v159, v157);
  if (v158 < 0)
    operator delete(v157[0]);
  v96 = v160;
  if (v160)
  {
    v97 = (unint64_t *)&v160->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v194;
  v194 = 0;
  if (v99)
    (*((void (**)(std::__shared_weak_count_vtbl *))v99->~__shared_weak_count + 1))(v99);
  v100 = *a3;
  v155 = v201;
  if (v201)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v201;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v156 = v101;
  v201 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v100 + 56))(v100, &v155);
  v103 = v156;
  if (v156)
  {
    v104 = (unint64_t *)&v156->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v201;
  v201 = 0;
  if (v106)
    (*((void (**)(void **))*v106 + 1))(v106);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v201);
  v107 = v201;
  std::string::basic_string[abi:ne180100]<0>(v151, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v151, 0, (uint64_t *)&v194);
  v153 = v194;
  if (v194)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = v194;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v154 = v108;
  v194 = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v107 + 3))(v107, &v153, 0, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v110 = v154;
  if (v154)
  {
    v111 = (unint64_t *)&v154->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v194;
  v194 = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  if (v152 < 0)
    operator delete(v151[0]);
  v114 = v201;
  std::string::basic_string[abi:ne180100]<0>(v145, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v145, 1, (uint64_t *)&v194);
  v147 = v194;
  if (v194)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = v194;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v148 = v115;
  v194 = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v114 + 3))(v114, &v147, 0, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v117 = v148;
  if (v148)
  {
    v118 = (unint64_t *)&v148->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v194;
  v194 = 0;
  if (v120)
    (*((void (**)(std::__shared_weak_count_vtbl *))v120->~__shared_weak_count + 1))(v120);
  if (v146 < 0)
    operator delete(v145[0]);
  v121 = v201;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v194);
  v141 = v194;
  if (v194)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = v194;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v142 = v122;
  v194 = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v121 + 3))(v121, &v141, 0, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v124 = v142;
  if (v142)
  {
    v125 = (unint64_t *)&v142->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v194;
  v194 = 0;
  if (v127)
    (*((void (**)(std::__shared_weak_count_vtbl *))v127->~__shared_weak_count + 1))(v127);
  v128 = *a3;
  v137 = v201;
  if (v201)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = v201;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = (std::__shared_weak_count_vtbl *)v130;
  }
  else
  {
    v129 = 0;
  }
  v138 = v129;
  v201 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v128 + 56))(v128, &v137);
  v131 = v138;
  if (v138)
  {
    v132 = (unint64_t *)&v138->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v201;
  v201 = 0;
  if (v134)
    (*((void (**)(void **))*v134 + 1))(v134);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v178, 0);
  result = (uint64_t)v187;
  if (v187)
  {
    v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v187);
    return MEMORY[0x1E0C023A0](v136, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07D2260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void **a62)
{
  uint64_t *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;

  v65 = *(_QWORD *)(v63 - 112);
  *(_QWORD *)(v63 - 112) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *v62;
  *v62 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x200], 0);
  _Unwind_Resume(a1);
}

void sub_1E07D2708()
{
  JUMPOUT(0x1E07D267CLL);
}

uint64_t MIL::Operators::Common::ios15::ReverseSequence::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  void **v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  void **v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  char **v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  void **v73;
  char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char **v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  void **v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void **v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  void **v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  void **v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void **v145;
  uint64_t result;
  uint64_t v147;
  void **v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  void *v154[2];
  char v155;
  void *v156[2];
  char v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  void *v162[2];
  char v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  void **v166;
  std::__shared_weak_count *v167;
  void *v168[2];
  char v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  void *v172[2];
  char v173;
  void *v174[2];
  char v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  __int128 v178;
  __int128 v179;
  void *v180[2];
  uint64_t v181;
  void *v182;
  void *v183;
  _QWORD *v184;
  __n128 v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  char **v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  void *__p;
  void *v194;
  _QWORD *v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  __n128 v199;
  _QWORD *v200;
  _BYTE v201[24];
  _BYTE *v202;
  _BYTE v203[24];
  _BYTE *v204;
  _BYTE v205[24];
  _BYTE *v206;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  void *v212;
  _QWORD *v213;
  void **v214;
  void **v215;
  uint64_t v216;
  uint64_t v217;
  char **v218;
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v200 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v209 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v214 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v212 = v12 + 2;
  v213 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v211 = v12;
  v215 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v211);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v198 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v196 = v15;
  v197 = v15 + 2;
  v216 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v196);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v194 = v18 + 2;
  v195 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  __p = v18;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v214, 4, &v199);
  MIL::IRParameter::Make(&v199, (uint64_t *)&v182);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v182);
  v19 = v182;
  v182 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v199.n128_u64[1];
  if (v199.n128_u64[1])
  {
    v21 = (unint64_t *)(v199.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v194 = __p;
    operator delete(__p);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v200;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (void **)operator new(8uLL);
  v214 = v25;
  *v25 = (void *)v24;
  v215 = v25 + 1;
  v216 = (uint64_t)(v25 + 1);
  v211 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v214);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v211, 1, &v192);
  MIL::IRParameter::Make(&v192, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v23, "lengths", (uint64_t *)&Scalar);
  v26 = Scalar;
  Scalar = 0;
  if (v26)
    (*((void (**)(std::__shared_weak_count_vtbl *))v26->~__shared_weak_count + 1))(v26);
  v27 = (std::__shared_weak_count *)v192.n128_u64[1];
  if (v192.n128_u64[1])
  {
    v28 = (unint64_t *)(v192.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  v30 = v200;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v191);
  MIL::IRParameter::Make(&v191, (uint64_t *)&v214);
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v30, "seq_axis", (uint64_t *)&v214);
  v32 = v214;
  v214 = 0;
  if (v32)
    (*((void (**)(void **))*v32 + 1))(v32);
  v33 = (std::__shared_weak_count *)v191.n128_u64[1];
  if (v191.n128_u64[1])
  {
    v34 = (unint64_t *)(v191.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  v36 = v200;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v190);
  MIL::IRParameter::Make(&v190, (uint64_t *)&v214);
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v36, "batch_axis", (uint64_t *)&v214);
  v38 = v214;
  v214 = 0;
  if (v38)
    (*((void (**)(void **))*v38 + 1))(v38);
  v39 = (std::__shared_weak_count *)v190.n128_u64[1];
  if (v190.n128_u64[1])
  {
    v40 = (unint64_t *)(v190.n128_u64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 32))(*((_QWORD *)v37 + 5), 1);
  v189 = 0;
  v42 = operator new();
  *(_QWORD *)v42 = 0;
  *(_QWORD *)(v42 + 8) = 0;
  *(_QWORD *)(v42 + 16) = 0;
  v214 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v189, (void **)v42);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v214, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v189, 1uLL);
  v43 = v189;
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(0x10uLL);
  v212 = v46 + 2;
  v213 = v46 + 2;
  *v46 = v44;
  v46[1] = v45;
  v211 = v46;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v211);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(0x10uLL);
  v198 = v49 + 2;
  *v49 = v47;
  v49[1] = v48;
  v196 = v49;
  v197 = v49 + 2;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v196);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(0x10uLL);
  v194 = v52 + 2;
  v195 = v52 + 2;
  *v52 = v50;
  v52[1] = v51;
  __p = v52;
  v209 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(0x10uLL);
  v183 = v55 + 2;
  v184 = v55 + 2;
  *v55 = v53;
  v55[1] = v54;
  v182 = v55;
  v210 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v182);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v185);
  MIL::IRParameter::Make(&v185, &v186);
  v56 = v186;
  v187 = v186;
  if (v186)
  {
    v57 = (_QWORD *)operator new();
    v58 = v186;
    *v57 = &unk_1EA99F888;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  v188 = v57;
  v186 = 0;
  v59 = v43[2];
  v60 = v43[1];
  if (v60 >= v59)
  {
    v62 = (v60 - *v43) >> 4;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v64 = v59 - *v43;
    if (v64 >> 3 > v63)
      v63 = v64 >> 3;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
      v65 = 0xFFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    v218 = v43 + 2;
    v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v43 + 2), v65);
    v68 = (uint64_t *)&v66[16 * v62];
    *v68 = v56;
    v68[1] = (uint64_t)v57;
    v187 = 0;
    v188 = 0;
    v70 = *v43;
    v69 = v43[1];
    if (v69 == *v43)
    {
      v73 = (void **)v43[1];
      v71 = &v66[16 * v62];
    }
    else
    {
      v71 = &v66[16 * v62];
      do
      {
        v72 = *((_OWORD *)v69 - 1);
        v69 -= 16;
        *((_OWORD *)v71 - 1) = v72;
        v71 -= 16;
        *(_QWORD *)v69 = 0;
        *((_QWORD *)v69 + 1) = 0;
      }
      while (v69 != v70);
      v73 = (void **)*v43;
      v69 = v43[1];
    }
    v61 = (char *)(v68 + 2);
    *v43 = v71;
    v214 = v73;
    v215 = v73;
    v43[1] = (char *)(v68 + 2);
    v216 = (uint64_t)v69;
    v74 = v43[2];
    v43[2] = &v66[16 * v67];
    v217 = (uint64_t)v74;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v214);
  }
  else
  {
    *(_QWORD *)v60 = v56;
    *((_QWORD *)v60 + 1) = v57;
    v61 = v60 + 16;
    v187 = 0;
    v188 = 0;
  }
  v43[1] = v61;
  v75 = v186;
  v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v77 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  if (__p)
  {
    v194 = __p;
    operator delete(__p);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  *(_OWORD *)v180 = *(_OWORD *)a2;
  v181 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v79 = (uint64_t)v200;
  *(_QWORD *)&v179 = v200;
  if (v200)
  {
    v80 = (_QWORD *)operator new();
    *v80 = &unk_1EA99F8E8;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v79;
  }
  else
  {
    v80 = 0;
  }
  *((_QWORD *)&v179 + 1) = v80;
  v200 = 0;
  *(_QWORD *)&v178 = v189;
  if (v189)
  {
    v81 = (_QWORD *)operator new();
    v82 = v189;
    *v81 = &unk_1EA99F948;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v82;
  }
  else
  {
    v81 = 0;
  }
  *((_QWORD *)&v178 + 1) = v81;
  v189 = 0;
  v206 = 0;
  v204 = 0;
  MIL::IROperator::Make((__int128 *)v180, &v179, &v178, (uint64_t)v205, (uint64_t)v203, a3);
  v83 = v204;
  if (v204 == v203)
  {
    v84 = 4;
    v83 = v203;
  }
  else
  {
    if (!v204)
      goto LABEL_82;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_82:
  v85 = v206;
  if (v206 == v205)
  {
    v86 = 4;
    v85 = v205;
    goto LABEL_86;
  }
  if (v206)
  {
    v86 = 5;
LABEL_86:
    (*(void (**)(void))(*v85 + 8 * v86))();
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  if (*((_QWORD *)&v178 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
  if (*((_QWORD *)&v179 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (SHIBYTE(v181) < 0)
    operator delete(v180[0]);
  v93 = *a3;
  v94 = std::string::basic_string[abi:ne180100]<0>(&v214, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v94, (uint64_t)v201);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v93 + 200))(v93, v201);
  v95 = v202;
  if (v202 == v201)
  {
    v96 = 4;
    v95 = v201;
  }
  else
  {
    if (!v202)
      goto LABEL_104;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_104:
  if (SHIBYTE(v216) < 0)
    operator delete(v214);
  MIL::Validation::TensorDTypeConstraints::Make(&v214);
  v97 = v214;
  std::string::basic_string[abi:ne180100]<0>(v174, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v174, 0, (uint64_t *)&Scalar);
  v176 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v177 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v172, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v176, v172);
  if (v173 < 0)
    operator delete(v172[0]);
  v100 = v177;
  if (v177)
  {
    p_shared_owners = (unint64_t *)&v177->__shared_owners_;
    do
      v102 = __ldaxr(p_shared_owners);
    while (__stlxr(v102 - 1, p_shared_owners));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  if (v175 < 0)
    operator delete(v174[0]);
  v104 = v214;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v170 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v171 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v168, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v104 + 3))(v104, &v170, v168);
  if (v169 < 0)
    operator delete(v168[0]);
  v107 = v171;
  if (v171)
  {
    v108 = (unint64_t *)&v171->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  v111 = *a3;
  v166 = v214;
  if (v214)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v214;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = (std::__shared_weak_count_vtbl *)v113;
  }
  else
  {
    v112 = 0;
  }
  v167 = v112;
  v214 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v111 + 56))(v111, &v166);
  v114 = v167;
  if (v167)
  {
    v115 = (unint64_t *)&v167->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v214;
  v214 = 0;
  if (v117)
    (*((void (**)(void **))*v117 + 1))(v117);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v214);
  v118 = v214;
  std::string::basic_string[abi:ne180100]<0>(v162, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v162, 0, (uint64_t *)&Scalar);
  v164 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v165 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v118 + 3))(v118, &v164, 0, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v121 = v165;
  if (v165)
  {
    v122 = (unint64_t *)&v165->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v163 < 0)
    operator delete(v162[0]);
  v125 = v214;
  std::string::basic_string[abi:ne180100]<0>(v156, "lengths");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v156, 0, (uint64_t *)&Scalar);
  v158 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v159 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v154, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v125 + 3))(v125, &v158, 0, v154);
  if (v155 < 0)
    operator delete(v154[0]);
  v128 = v159;
  if (v159)
  {
    v129 = (unint64_t *)&v159->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  if (v157 < 0)
    operator delete(v156[0]);
  v132 = v214;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v152 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v153 = v133;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v132 + 3))(v132, &v152, 0, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v135 = v153;
  if (v153)
  {
    v136 = (unint64_t *)&v153->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*((void (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 1))(v138);
  v139 = *a3;
  v148 = v214;
  if (v214)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = v214;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = (std::__shared_weak_count_vtbl *)v141;
  }
  else
  {
    v140 = 0;
  }
  v149 = v140;
  v214 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v139 + 56))(v139, &v148);
  v142 = v149;
  if (v149)
  {
    v143 = (unint64_t *)&v149->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v214;
  v214 = 0;
  if (v145)
    (*((void (**)(void **))*v145 + 1))(v145);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v189, 0);
  result = (uint64_t)v200;
  if (v200)
  {
    v147 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v200);
    return MEMORY[0x1E0C023A0](v147, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07D37CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void **a62)
{
  uint64_t *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;

  v65 = *(_QWORD *)(v63 - 112);
  *(_QWORD *)(v63 - 112) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *v62;
  *v62 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x220], 0);
  _Unwind_Resume(a1);
}

void sub_1E07D3CDC()
{
  JUMPOUT(0x1E07D3C4CLL);
}

uint64_t MIL::Operators::Common::ios15::SliceByIndex::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void **v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void **v39;
  unsigned __int8 *v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void **v47;
  unsigned __int8 *v48;
  std::__shared_weak_count_vtbl *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void **v55;
  unsigned __int8 *v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  void **v63;
  unsigned __int8 *v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  void **v96;
  char *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  char **v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *p_shared_owners;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  void **v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count_vtbl *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  void **v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  void **v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count_vtbl *v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count_vtbl *v153;
  void **v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count_vtbl *v160;
  void **v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  void **v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count_vtbl *v174;
  void **v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count_vtbl *v181;
  void **v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count_vtbl *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  void **v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  void **v195;
  uint64_t result;
  uint64_t v197;
  void **v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202[2];
  char v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  void *v206[2];
  char v207;
  void *v208[2];
  char v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count *v211;
  void *v212[2];
  char v213;
  void *v214[2];
  char v215;
  std::__shared_weak_count_vtbl *v216;
  std::__shared_weak_count *v217;
  void *v218[2];
  char v219;
  void *v220[2];
  char v221;
  std::__shared_weak_count_vtbl *v222;
  std::__shared_weak_count *v223;
  void *v224[2];
  char v225;
  void *v226[2];
  char v227;
  std::__shared_weak_count_vtbl *v228;
  std::__shared_weak_count *v229;
  void *v230[2];
  char v231;
  void *v232[2];
  char v233;
  std::__shared_weak_count_vtbl *v234;
  std::__shared_weak_count *v235;
  void *v236[2];
  char v237;
  void *v238[2];
  char v239;
  std::__shared_weak_count_vtbl *v240;
  std::__shared_weak_count *v241;
  void **v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  std::__shared_weak_count_vtbl *v246;
  std::__shared_weak_count *v247;
  void *v248[2];
  char v249;
  void *v250[2];
  char v251;
  std::__shared_weak_count_vtbl *v252;
  std::__shared_weak_count *v253;
  __int128 v254;
  __int128 v255;
  void *v256[2];
  uint64_t v257;
  void *v258;
  void *v259;
  _QWORD *v260;
  __n128 v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  char **v265;
  __n128 v266;
  __n128 v267;
  __n128 v268;
  __n128 v269;
  __n128 v270;
  __n128 v271;
  void *__p;
  void *v273;
  _QWORD *v274;
  void *v275;
  void *v276;
  _QWORD *v277;
  __n128 v278;
  _QWORD *v279;
  _QWORD v280[3];
  _QWORD *v281;
  _BYTE v282[24];
  _BYTE *v283;
  _BYTE v284[24];
  _BYTE *v285;
  std::__shared_weak_count_vtbl *v286;
  uint64_t p_on_zero_shared;
  uint64_t v288;
  uint64_t v289;
  void *v290;
  void *v291;
  _QWORD *v292;
  void **v293;
  void **v294;
  uint64_t v295;
  uint64_t v296;
  char **v297;
  uint64_t v298;

  v298 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v279 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v288 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v286 = v9;
  v293 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v286);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v291 = v12 + 2;
  v292 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v290 = v12;
  v294 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v290);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v277 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v275 = v15;
  v276 = v15 + 2;
  v295 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v275);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v274 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  __p = v18;
  v273 = v18 + 2;
  v296 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v293, 4, &v278);
  MIL::IRParameter::Make(&v278, (uint64_t *)&v258);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v258);
  v19 = v258;
  v258 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v278.n128_u64[1];
  if (v278.n128_u64[1])
  {
    v21 = (unint64_t *)(v278.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v273 = __p;
    operator delete(__p);
  }
  if (v275)
  {
    v276 = v275;
    operator delete(v275);
  }
  if (v290)
  {
    v291 = v290;
    operator delete(v290);
  }
  if (v286)
  {
    p_on_zero_shared = (uint64_t)v286;
    operator delete(v286);
  }
  v23 = v279;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (void **)operator new(8uLL);
  v293 = v25;
  *v25 = (void *)v24;
  v294 = v25 + 1;
  v295 = (uint64_t)(v25 + 1);
  v290 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v293);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v290, 1, &v271);
  MIL::IRParameter::Make(&v271, (uint64_t *)&v286);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v23, "begin", (uint64_t *)&v286);
  v26 = v286;
  v286 = 0;
  if (v26)
    (*((void (**)(std::__shared_weak_count_vtbl *))v26->~__shared_weak_count + 1))(v26);
  v27 = (std::__shared_weak_count *)v271.n128_u64[1];
  if (v271.n128_u64[1])
  {
    v28 = (unint64_t *)(v271.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  v30 = v279;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = (void **)operator new(8uLL);
  v293 = v32;
  *v32 = (void *)v31;
  v294 = v32 + 1;
  v295 = (uint64_t)(v32 + 1);
  v290 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v293);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v290, 1, &v270);
  MIL::IRParameter::Make(&v270, (uint64_t *)&v286);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v30, "end", (uint64_t *)&v286);
  v33 = v286;
  v286 = 0;
  if (v33)
    (*((void (**)(std::__shared_weak_count_vtbl *))v33->~__shared_weak_count + 1))(v33);
  v34 = (std::__shared_weak_count *)v270.n128_u64[1];
  if (v270.n128_u64[1])
  {
    v35 = (unint64_t *)(v270.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  v37 = v279;
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = (void **)operator new(8uLL);
  v293 = v39;
  *v39 = (void *)v38;
  v294 = v39 + 1;
  v295 = (uint64_t)(v39 + 1);
  v290 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v293);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v290, 1, &v269);
  MIL::IRParameter::Make(&v269, (uint64_t *)&v286);
  v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v37, "stride", (uint64_t *)&v286);
  v41 = v286;
  v286 = 0;
  if (v41)
    (*((void (**)(std::__shared_weak_count_vtbl *))v41->~__shared_weak_count + 1))(v41);
  v42 = (std::__shared_weak_count *)v269.n128_u64[1];
  if (v269.n128_u64[1])
  {
    v43 = (unint64_t *)(v269.n128_u64[1] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 48))(*((_QWORD *)v40 + 5), 1);
  v45 = v279;
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = (void **)operator new(8uLL);
  v293 = v47;
  *v47 = (void *)v46;
  v294 = v47 + 1;
  v295 = (uint64_t)(v47 + 1);
  v290 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v293);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v290, 1, &v268);
  MIL::IRParameter::Make(&v268, (uint64_t *)&v286);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v45, "begin_mask", (uint64_t *)&v286);
  v49 = v286;
  v286 = 0;
  if (v49)
    (*((void (**)(std::__shared_weak_count_vtbl *))v49->~__shared_weak_count + 1))(v49);
  v50 = (std::__shared_weak_count *)v268.n128_u64[1];
  if (v268.n128_u64[1])
  {
    v51 = (unint64_t *)(v268.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 48))(*((_QWORD *)v48 + 5), 1);
  v53 = v279;
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = (void **)operator new(8uLL);
  v293 = v55;
  *v55 = (void *)v54;
  v294 = v55 + 1;
  v295 = (uint64_t)(v55 + 1);
  v290 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v293);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v290, 1, &v267);
  MIL::IRParameter::Make(&v267, (uint64_t *)&v286);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v53, "end_mask", (uint64_t *)&v286);
  v57 = v286;
  v286 = 0;
  if (v57)
    (*((void (**)(std::__shared_weak_count_vtbl *))v57->~__shared_weak_count + 1))(v57);
  v58 = (std::__shared_weak_count *)v267.n128_u64[1];
  if (v267.n128_u64[1])
  {
    v59 = (unint64_t *)(v267.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 48))(*((_QWORD *)v56 + 5), 1);
  v61 = v279;
  v62 = MIL::IRUnknownDimension::Make(a1, 0);
  v63 = (void **)operator new(8uLL);
  v293 = v63;
  *v63 = (void *)v62;
  v294 = v63 + 1;
  v295 = (uint64_t)(v63 + 1);
  v290 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v293);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v290, 1, &v266);
  MIL::IRParameter::Make(&v266, (uint64_t *)&v286);
  v64 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v61, "squeeze_mask", (uint64_t *)&v286);
  v65 = v286;
  v286 = 0;
  if (v65)
    (*((void (**)(std::__shared_weak_count_vtbl *))v65->~__shared_weak_count + 1))(v65);
  v66 = (std::__shared_weak_count *)v266.n128_u64[1];
  if (v266.n128_u64[1])
  {
    v67 = (unint64_t *)(v266.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v64 + 5) + 48))(*((_QWORD *)v64 + 5), 1);
  v265 = 0;
  v69 = operator new();
  *(_QWORD *)v69 = 0;
  *(_QWORD *)(v69 + 8) = 0;
  *(_QWORD *)(v69 + 16) = 0;
  v293 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v265, (void **)v69);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v293, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v265, 1uLL);
  v70 = v265;
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v290 = v72;
  *v72 = v71;
  v291 = v72 + 1;
  v292 = v72 + 1;
  v286 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v290);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v275 = v74;
  *v74 = v73;
  v277 = v74 + 1;
  v276 = v74 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v275);
  v75 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v76 = operator new(8uLL);
  __p = v76;
  *v76 = v75;
  v274 = v76 + 1;
  v273 = v76 + 1;
  v288 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(8uLL);
  v258 = v78;
  *v78 = v77;
  v260 = v78 + 1;
  v259 = v78 + 1;
  v289 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v258);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v286, 4, &v261);
  MIL::IRParameter::Make(&v261, &v262);
  v79 = v262;
  v263 = v262;
  if (v262)
  {
    v80 = (_QWORD *)operator new();
    v81 = v262;
    *v80 = &unk_1EA99F888;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v81;
  }
  else
  {
    v80 = 0;
  }
  v264 = v80;
  v262 = 0;
  v82 = v70[2];
  v83 = v70[1];
  if (v83 >= v82)
  {
    v85 = (v83 - *v70) >> 4;
    v86 = v85 + 1;
    if ((unint64_t)(v85 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v87 = v82 - *v70;
    if (v87 >> 3 > v86)
      v86 = v87 >> 3;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
      v88 = 0xFFFFFFFFFFFFFFFLL;
    else
      v88 = v86;
    v297 = v70 + 2;
    v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v70 + 2), v88);
    v91 = (uint64_t *)&v89[16 * v85];
    *v91 = v79;
    v91[1] = (uint64_t)v80;
    v264 = 0;
    v263 = 0;
    v93 = *v70;
    v92 = v70[1];
    if (v92 == *v70)
    {
      v96 = (void **)v70[1];
      v94 = &v89[16 * v85];
    }
    else
    {
      v94 = &v89[16 * v85];
      do
      {
        v95 = *((_OWORD *)v92 - 1);
        v92 -= 16;
        *((_OWORD *)v94 - 1) = v95;
        v94 -= 16;
        *(_QWORD *)v92 = 0;
        *((_QWORD *)v92 + 1) = 0;
      }
      while (v92 != v93);
      v96 = (void **)*v70;
      v92 = v70[1];
    }
    v84 = (char *)(v91 + 2);
    *v70 = v94;
    v293 = v96;
    v294 = v96;
    v70[1] = (char *)(v91 + 2);
    v295 = (uint64_t)v92;
    v97 = v70[2];
    v70[2] = &v89[16 * v90];
    v296 = (uint64_t)v97;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v293);
  }
  else
  {
    *(_QWORD *)v83 = v79;
    *((_QWORD *)v83 + 1) = v80;
    v84 = v83 + 16;
    v264 = 0;
    v263 = 0;
  }
  v70[1] = v84;
  v98 = v262;
  v262 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  v99 = (std::__shared_weak_count *)v261.n128_u64[1];
  if (v261.n128_u64[1])
  {
    v100 = (unint64_t *)(v261.n128_u64[1] + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (v258)
  {
    v259 = v258;
    operator delete(v258);
  }
  if (__p)
  {
    v273 = __p;
    operator delete(__p);
  }
  if (v275)
  {
    v276 = v275;
    operator delete(v275);
  }
  if (v290)
  {
    v291 = v290;
    operator delete(v290);
  }
  *(_OWORD *)v256 = *(_OWORD *)a2;
  v257 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v102 = (uint64_t)v279;
  *(_QWORD *)&v255 = v279;
  if (v279)
  {
    v103 = (_QWORD *)operator new();
    *v103 = &unk_1EA99F8E8;
    v103[1] = 0;
    v103[2] = 0;
    v103[3] = v102;
  }
  else
  {
    v103 = 0;
  }
  *((_QWORD *)&v255 + 1) = v103;
  v279 = 0;
  *(_QWORD *)&v254 = v265;
  if (v265)
  {
    v104 = (_QWORD *)operator new();
    v105 = v265;
    *v104 = &unk_1EA99F948;
    v104[1] = 0;
    v104[2] = 0;
    v104[3] = v105;
  }
  else
  {
    v104 = 0;
  }
  *((_QWORD *)&v254 + 1) = v104;
  v265 = 0;
  v285 = 0;
  v283 = 0;
  MIL::IROperator::Make((__int128 *)v256, &v255, &v254, (uint64_t)v284, (uint64_t)v282, a3);
  v106 = v283;
  if (v283 == v282)
  {
    v107 = 4;
    v106 = v282;
  }
  else
  {
    if (!v283)
      goto LABEL_113;
    v107 = 5;
  }
  (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_113:
  v108 = v285;
  if (v285 == v284)
  {
    v109 = 4;
    v108 = v284;
    goto LABEL_117;
  }
  if (v285)
  {
    v109 = 5;
LABEL_117:
    (*(void (**)(void))(*v108 + 8 * v109))();
  }
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
  if (*((_QWORD *)&v254 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
  if (*((_QWORD *)&v255 + 1))
  {
    v114 = (unint64_t *)(*((_QWORD *)&v255 + 1) + 8);
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  if (SHIBYTE(v257) < 0)
    operator delete(v256[0]);
  v116 = *a3;
  v280[0] = &off_1EA99FBD8;
  v280[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceByIndex;
  v281 = v280;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v116 + 200))(v116, v280);
  v117 = v281;
  if (v281 == v280)
  {
    v118 = 4;
    v117 = v280;
  }
  else
  {
    if (!v281)
      goto LABEL_135;
    v118 = 5;
  }
  (*(void (**)(void))(*v117 + 8 * v118))();
LABEL_135:
  MIL::Validation::TensorDTypeConstraints::Make(&v293);
  v119 = v293;
  std::string::basic_string[abi:ne180100]<0>(v250, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v250, 0, (uint64_t *)&v286);
  v252 = v286;
  if (v286)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = v286;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v253 = v120;
  v286 = 0;
  std::string::basic_string[abi:ne180100]<0>(v248, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v119 + 3))(v119, &v252, v248);
  if (v249 < 0)
    operator delete(v248[0]);
  v122 = v253;
  if (v253)
  {
    p_shared_owners = (unint64_t *)&v253->__shared_owners_;
    do
      v124 = __ldaxr(p_shared_owners);
    while (__stlxr(v124 - 1, p_shared_owners));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v286;
  v286 = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  if (v251 < 0)
    operator delete(v250[0]);
  v126 = v293;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v286);
  v246 = v286;
  if (v286)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v286;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v247 = v127;
  v286 = 0;
  std::string::basic_string[abi:ne180100]<0>(v244, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v126 + 3))(v126, &v246, v244);
  if (v245 < 0)
    operator delete(v244[0]);
  v129 = v247;
  if (v247)
  {
    v130 = (unint64_t *)&v247->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v286;
  v286 = 0;
  if (v132)
    (*((void (**)(std::__shared_weak_count_vtbl *))v132->~__shared_weak_count + 1))(v132);
  v133 = *a3;
  v242 = v293;
  if (v293)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = v293;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = (std::__shared_weak_count_vtbl *)v135;
  }
  else
  {
    v134 = 0;
  }
  v243 = v134;
  v293 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v133 + 56))(v133, &v242);
  v136 = v243;
  if (v243)
  {
    v137 = (unint64_t *)&v243->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v293;
  v293 = 0;
  if (v139)
    (*((void (**)(void **))*v139 + 1))(v139);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v293);
  v140 = v293;
  std::string::basic_string[abi:ne180100]<0>(v238, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v238, 0, (uint64_t *)&v286);
  v240 = v286;
  if (v286)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = v286;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v241 = v141;
  v286 = 0;
  std::string::basic_string[abi:ne180100]<0>(v236, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v140 + 5))(v140, &v240, v236);
  if (v237 < 0)
    operator delete(v236[0]);
  v143 = v241;
  if (v241)
  {
    v144 = (unint64_t *)&v241->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v286;
  v286 = 0;
  if (v146)
    (*((void (**)(std::__shared_weak_count_vtbl *))v146->~__shared_weak_count + 1))(v146);
  if (v239 < 0)
    operator delete(v238[0]);
  v147 = v293;
  std::string::basic_string[abi:ne180100]<0>(v232, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v232, 0, (uint64_t *)&v286);
  v234 = v286;
  if (v286)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = v286;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v235 = v148;
  v286 = 0;
  std::string::basic_string[abi:ne180100]<0>(v230, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v147 + 3))(v147, &v234, 0, v230);
  if (v231 < 0)
    operator delete(v230[0]);
  v150 = v235;
  if (v235)
  {
    v151 = (unint64_t *)&v235->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v286;
  v286 = 0;
  if (v153)
    (*((void (**)(std::__shared_weak_count_vtbl *))v153->~__shared_weak_count + 1))(v153);
  if (v233 < 0)
    operator delete(v232[0]);
  v154 = v293;
  std::string::basic_string[abi:ne180100]<0>(v226, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v226, 0, (uint64_t *)&v286);
  v228 = v286;
  if (v286)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = v286;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v229 = v155;
  v286 = 0;
  std::string::basic_string[abi:ne180100]<0>(v224, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v154 + 3))(v154, &v228, 0, v224);
  if (v225 < 0)
    operator delete(v224[0]);
  v157 = v229;
  if (v229)
  {
    v158 = (unint64_t *)&v229->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = v286;
  v286 = 0;
  if (v160)
    (*((void (**)(std::__shared_weak_count_vtbl *))v160->~__shared_weak_count + 1))(v160);
  if (v227 < 0)
    operator delete(v226[0]);
  v161 = v293;
  std::string::basic_string[abi:ne180100]<0>(v220, "stride");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v220, 1, (uint64_t *)&v286);
  v222 = v286;
  if (v286)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = v286;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v223 = v162;
  v286 = 0;
  std::string::basic_string[abi:ne180100]<0>(v218, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v161 + 3))(v161, &v222, 0, v218);
  if (v219 < 0)
    operator delete(v218[0]);
  v164 = v223;
  if (v223)
  {
    v165 = (unint64_t *)&v223->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v286;
  v286 = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  if (v221 < 0)
    operator delete(v220[0]);
  v168 = v293;
  std::string::basic_string[abi:ne180100]<0>(v214, "begin_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v214, 1, (uint64_t *)&v286);
  v216 = v286;
  if (v286)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = v286;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v170;
  }
  else
  {
    v169 = 0;
  }
  v217 = v169;
  v286 = 0;
  std::string::basic_string[abi:ne180100]<0>(v212, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v168 + 3))(v168, &v216, 0, v212);
  if (v213 < 0)
    operator delete(v212[0]);
  v171 = v217;
  if (v217)
  {
    v172 = (unint64_t *)&v217->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = v286;
  v286 = 0;
  if (v174)
    (*((void (**)(std::__shared_weak_count_vtbl *))v174->~__shared_weak_count + 1))(v174);
  if (v215 < 0)
    operator delete(v214[0]);
  v175 = v293;
  std::string::basic_string[abi:ne180100]<0>(v208, "end_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v208, 1, (uint64_t *)&v286);
  v210 = v286;
  if (v286)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = v286;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = v177;
  }
  else
  {
    v176 = 0;
  }
  v211 = v176;
  v286 = 0;
  std::string::basic_string[abi:ne180100]<0>(v206, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v175 + 3))(v175, &v210, 0, v206);
  if (v207 < 0)
    operator delete(v206[0]);
  v178 = v211;
  if (v211)
  {
    v179 = (unint64_t *)&v211->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = v286;
  v286 = 0;
  if (v181)
    (*((void (**)(std::__shared_weak_count_vtbl *))v181->~__shared_weak_count + 1))(v181);
  if (v209 < 0)
    operator delete(v208[0]);
  v182 = v293;
  std::string::basic_string[abi:ne180100]<0>(v202, "squeeze_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v202, 1, (uint64_t *)&v286);
  v204 = v286;
  if (v286)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = v286;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = v184;
  }
  else
  {
    v183 = 0;
  }
  v205 = v183;
  v286 = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v182 + 3))(v182, &v204, 0, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v185 = v205;
  if (v205)
  {
    v186 = (unint64_t *)&v205->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = v286;
  v286 = 0;
  if (v188)
    (*((void (**)(std::__shared_weak_count_vtbl *))v188->~__shared_weak_count + 1))(v188);
  if (v203 < 0)
    operator delete(v202[0]);
  v189 = *a3;
  v198 = v293;
  if (v293)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = v293;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = (std::__shared_weak_count_vtbl *)v191;
  }
  else
  {
    v190 = 0;
  }
  v199 = v190;
  v293 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v189 + 56))(v189, &v198);
  v192 = v199;
  if (v199)
  {
    v193 = (unint64_t *)&v199->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = v293;
  v293 = 0;
  if (v195)
    (*((void (**)(void **))*v195 + 1))(v195);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v265, 0);
  result = (uint64_t)v279;
  if (v279)
  {
    v197 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v279);
    return MEMORY[0x1E0C023A0](v197, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07D548C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2C8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x370], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::SliceBySize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void **v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char **v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  void **v64;
  char *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  char **v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  void **v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  void **v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void **v135;
  uint64_t result;
  uint64_t v137;
  void **v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154[2];
  char v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  void **v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  void *v164[2];
  char v165;
  void *v166[2];
  char v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  __int128 v170;
  __int128 v171;
  void *v172[2];
  uint64_t v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  __n128 v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  char **v181;
  __n128 v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  __n128 v190;
  _QWORD *v191;
  _QWORD v192[3];
  _QWORD *v193;
  _BYTE v194[24];
  _BYTE *v195;
  _BYTE v196[24];
  _BYTE *v197;
  std::__shared_weak_count_vtbl *v198;
  uint64_t p_on_zero_shared;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  void *v203;
  _QWORD *v204;
  void **v205;
  void **v206;
  uint64_t v207;
  uint64_t v208;
  char **v209;
  uint64_t v210;

  v210 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v191 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v200 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v198 = v9;
  v205 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v198);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v203 = v12 + 2;
  v204 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v202 = v12;
  v206 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v202);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v189 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v187 = v15;
  v188 = v15 + 2;
  v207 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v187);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v185 = v18 + 2;
  v186 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  __p = v18;
  v208 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v205, 4, &v190);
  MIL::IRParameter::Make(&v190, (uint64_t *)&v174);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v174);
  v19 = v174;
  v174 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v190.n128_u64[1];
  if (v190.n128_u64[1])
  {
    v21 = (unint64_t *)(v190.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v198)
  {
    p_on_zero_shared = (uint64_t)v198;
    operator delete(v198);
  }
  v23 = v191;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (void **)operator new(8uLL);
  v205 = v25;
  *v25 = (void *)v24;
  v206 = v25 + 1;
  v207 = (uint64_t)(v25 + 1);
  v202 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v205);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v202, 1, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v198);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v23, "begin", (uint64_t *)&v198);
  v26 = v198;
  v198 = 0;
  if (v26)
    (*((void (**)(std::__shared_weak_count_vtbl *))v26->~__shared_weak_count + 1))(v26);
  v27 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v28 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  v30 = v191;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = (void **)operator new(8uLL);
  v205 = v32;
  *v32 = (void *)v31;
  v206 = v32 + 1;
  v207 = (uint64_t)(v32 + 1);
  v202 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v205);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v202, 1, &v182);
  MIL::IRParameter::Make(&v182, (uint64_t *)&v198);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v30, "size", (uint64_t *)&v198);
  v33 = v198;
  v198 = 0;
  if (v33)
    (*((void (**)(std::__shared_weak_count_vtbl *))v33->~__shared_weak_count + 1))(v33);
  v34 = (std::__shared_weak_count *)v182.n128_u64[1];
  if (v182.n128_u64[1])
  {
    v35 = (unint64_t *)(v182.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  v181 = 0;
  v37 = operator new();
  *(_QWORD *)v37 = 0;
  *(_QWORD *)(v37 + 8) = 0;
  *(_QWORD *)(v37 + 16) = 0;
  v205 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v181, (void **)v37);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v205, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v181, 1uLL);
  v38 = v181;
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v202 = v40;
  *v40 = v39;
  v203 = v40 + 1;
  v204 = v40 + 1;
  v198 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v202);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v187 = v42;
  *v42 = v41;
  v189 = v42 + 1;
  v188 = v42 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  __p = v44;
  *v44 = v43;
  v185 = v44 + 1;
  v186 = v44 + 1;
  v200 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v174 = v46;
  *v46 = v45;
  v175 = v46 + 1;
  v176 = v46 + 1;
  v201 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v174);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v198, 4, &v177);
  MIL::IRParameter::Make(&v177, &v178);
  v47 = v178;
  v179 = v178;
  if (v178)
  {
    v48 = (_QWORD *)operator new();
    v49 = v178;
    *v48 = &unk_1EA99F888;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v49;
  }
  else
  {
    v48 = 0;
  }
  v180 = v48;
  v178 = 0;
  v50 = v38[2];
  v51 = v38[1];
  if (v51 >= v50)
  {
    v53 = (v51 - *v38) >> 4;
    v54 = v53 + 1;
    if ((unint64_t)(v53 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v55 = v50 - *v38;
    if (v55 >> 3 > v54)
      v54 = v55 >> 3;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
      v56 = 0xFFFFFFFFFFFFFFFLL;
    else
      v56 = v54;
    v209 = v38 + 2;
    v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v38 + 2), v56);
    v59 = (uint64_t *)&v57[16 * v53];
    *v59 = v47;
    v59[1] = (uint64_t)v48;
    v179 = 0;
    v180 = 0;
    v61 = *v38;
    v60 = v38[1];
    if (v60 == *v38)
    {
      v64 = (void **)v38[1];
      v62 = &v57[16 * v53];
    }
    else
    {
      v62 = &v57[16 * v53];
      do
      {
        v63 = *((_OWORD *)v60 - 1);
        v60 -= 16;
        *((_OWORD *)v62 - 1) = v63;
        v62 -= 16;
        *(_QWORD *)v60 = 0;
        *((_QWORD *)v60 + 1) = 0;
      }
      while (v60 != v61);
      v64 = (void **)*v38;
      v60 = v38[1];
    }
    v52 = (char *)(v59 + 2);
    *v38 = v62;
    v205 = v64;
    v206 = v64;
    v38[1] = (char *)(v59 + 2);
    v207 = (uint64_t)v60;
    v65 = v38[2];
    v38[2] = &v57[16 * v58];
    v208 = (uint64_t)v65;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v205);
  }
  else
  {
    *(_QWORD *)v51 = v47;
    *((_QWORD *)v51 + 1) = v48;
    v52 = v51 + 16;
    v179 = 0;
    v180 = 0;
  }
  v38[1] = v52;
  v66 = v178;
  v178 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v68 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  *(_OWORD *)v172 = *(_OWORD *)a2;
  v173 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v70 = (uint64_t)v191;
  *(_QWORD *)&v171 = v191;
  if (v191)
  {
    v71 = (_QWORD *)operator new();
    *v71 = &unk_1EA99F8E8;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v70;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v171 + 1) = v71;
  v191 = 0;
  *(_QWORD *)&v170 = v181;
  if (v181)
  {
    v72 = (_QWORD *)operator new();
    v73 = v181;
    *v72 = &unk_1EA99F948;
    v72[1] = 0;
    v72[2] = 0;
    v72[3] = v73;
  }
  else
  {
    v72 = 0;
  }
  *((_QWORD *)&v170 + 1) = v72;
  v181 = 0;
  v197 = 0;
  v195 = 0;
  MIL::IROperator::Make((__int128 *)v172, &v171, &v170, (uint64_t)v196, (uint64_t)v194, a3);
  v74 = v195;
  if (v195 == v194)
  {
    v75 = 4;
    v74 = v194;
  }
  else
  {
    if (!v195)
      goto LABEL_77;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_77:
  v76 = v197;
  if (v197 == v196)
  {
    v77 = 4;
    v76 = v196;
    goto LABEL_81;
  }
  if (v197)
  {
    v77 = 5;
LABEL_81:
    (*(void (**)(void))(*v76 + 8 * v77))();
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (SHIBYTE(v173) < 0)
    operator delete(v172[0]);
  v84 = *a3;
  v192[0] = &off_1EA99FBD8;
  v192[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceBySize;
  v193 = v192;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 200))(v84, v192);
  v85 = v193;
  if (v193 == v192)
  {
    v86 = 4;
    v85 = v192;
  }
  else
  {
    if (!v193)
      goto LABEL_99;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v205);
  v87 = v205;
  std::string::basic_string[abi:ne180100]<0>(v166, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v166, 0, (uint64_t *)&v198);
  v168 = v198;
  if (v198)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v198;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v169 = v88;
  v198 = 0;
  std::string::basic_string[abi:ne180100]<0>(v164, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v168, v164);
  if (v165 < 0)
    operator delete(v164[0]);
  v90 = v169;
  if (v169)
  {
    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
    do
      v92 = __ldaxr(p_shared_owners);
    while (__stlxr(v92 - 1, p_shared_owners));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v198;
  v198 = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v167 < 0)
    operator delete(v166[0]);
  v94 = v205;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v198);
  v162 = v198;
  if (v198)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v198;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v163 = v95;
  v198 = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v162, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v97 = v163;
  if (v163)
  {
    v98 = (unint64_t *)&v163->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v198;
  v198 = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  v101 = *a3;
  v158 = v205;
  if (v205)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v205;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v159 = v102;
  v205 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v158);
  v104 = v159;
  if (v159)
  {
    v105 = (unint64_t *)&v159->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v205;
  v205 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v205);
  v108 = v205;
  std::string::basic_string[abi:ne180100]<0>(v154, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v154, 0, (uint64_t *)&v198);
  v156 = v198;
  if (v198)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v198;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v157 = v109;
  v198 = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v108 + 5))(v108, &v156, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v111 = v157;
  if (v157)
  {
    v112 = (unint64_t *)&v157->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v198;
  v198 = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v155 < 0)
    operator delete(v154[0]);
  v115 = v205;
  std::string::basic_string[abi:ne180100]<0>(v148, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v148, 0, (uint64_t *)&v198);
  v150 = v198;
  if (v198)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = v198;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v151 = v116;
  v198 = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v115 + 3))(v115, &v150, 0, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v118 = v151;
  if (v151)
  {
    v119 = (unint64_t *)&v151->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v198;
  v198 = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  if (v149 < 0)
    operator delete(v148[0]);
  v122 = v205;
  std::string::basic_string[abi:ne180100]<0>(v142, "size");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&v198);
  v144 = v198;
  if (v198)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v198;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v145 = v123;
  v198 = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v122 + 3))(v122, &v144, 0, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v125 = v145;
  if (v145)
  {
    v126 = (unint64_t *)&v145->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v198;
  v198 = 0;
  if (v128)
    (*((void (**)(std::__shared_weak_count_vtbl *))v128->~__shared_weak_count + 1))(v128);
  if (v143 < 0)
    operator delete(v142[0]);
  v129 = *a3;
  v138 = v205;
  if (v205)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = v205;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = (std::__shared_weak_count_vtbl *)v131;
  }
  else
  {
    v130 = 0;
  }
  v139 = v130;
  v205 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v129 + 56))(v129, &v138);
  v132 = v139;
  if (v139)
  {
    v133 = (unint64_t *)&v139->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v205;
  v205 = 0;
  if (v135)
    (*((void (**)(void **))*v135 + 1))(v135);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v181, 0);
  result = (uint64_t)v191;
  if (v191)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v191);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07D6BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a66;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;

  v69 = *(_QWORD *)(v67 - 112);
  *(_QWORD *)(v67 - 112) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *v66;
  *v66 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a66, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x230], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::SlidingWindows::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  void **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  void **v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char **v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  void **v63;
  char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  char **v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void **v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void **v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void **v106;
  void **v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  void **v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void **v120;
  uint64_t result;
  uint64_t v122;
  void **v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void **v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137[2];
  char v138;
  void *v139[2];
  char v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  __int128 v143;
  __int128 v144;
  void *v145[2];
  uint64_t v146;
  void *v147;
  void *v148;
  _QWORD *v149;
  __n128 v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char **v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  void *__p;
  void *v159;
  _QWORD *v160;
  void *v161;
  void *v162;
  _QWORD *v163;
  __n128 v164;
  _QWORD *v165;
  _QWORD v166[3];
  _QWORD *v167;
  _BYTE v168[24];
  _BYTE *v169;
  _QWORD v170[3];
  _QWORD *v171;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v174;
  void **v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char **v179;
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v165 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v174 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v175 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v162 = v12 + 2;
  v163 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v161 = v12;
  v176 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v161);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v159 = v15 + 2;
  v160 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v175, 3, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v147);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v147);
  v16 = v147;
  v147 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v18 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v159 = __p;
    operator delete(__p);
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v165;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&v175);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v20, "axis", (uint64_t *)&v175);
  v22 = v175;
  v175 = 0;
  if (v22)
    (*((void (**)(void **))*v22 + 1))(v22);
  v23 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v24 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 32))(*((_QWORD *)v21 + 5), 1);
  v26 = v165;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v156);
  MIL::IRParameter::Make(&v156, (uint64_t *)&v175);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v26, "size", (uint64_t *)&v175);
  v28 = v175;
  v175 = 0;
  if (v28)
    (*((void (**)(void **))*v28 + 1))(v28);
  v29 = (std::__shared_weak_count *)v156.n128_u64[1];
  if (v156.n128_u64[1])
  {
    v30 = (unint64_t *)(v156.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  v32 = v165;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v155);
  MIL::IRParameter::Make(&v155, (uint64_t *)&v175);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v32, "stride", (uint64_t *)&v175);
  v34 = v175;
  v175 = 0;
  if (v34)
    (*((void (**)(void **))*v34 + 1))(v34);
  v35 = (std::__shared_weak_count *)v155.n128_u64[1];
  if (v155.n128_u64[1])
  {
    v36 = (unint64_t *)(v155.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v154 = 0;
  v38 = operator new();
  *(_QWORD *)v38 = 0;
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)(v38 + 16) = 0;
  v175 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v154, (void **)v38);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v175, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v154, 1uLL);
  v39 = v154;
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v161 = v41;
  *v41 = v40;
  v162 = v41 + 1;
  v163 = v41 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v161);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  __p = v43;
  *v43 = v42;
  v159 = v43 + 1;
  v160 = v43 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v147 = v45;
  *v45 = v44;
  v148 = v45 + 1;
  v149 = v45 + 1;
  v174 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v147);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v150);
  MIL::IRParameter::Make(&v150, &v151);
  v46 = v151;
  v152 = v151;
  if (v151)
  {
    v47 = (_QWORD *)operator new();
    v48 = v151;
    *v47 = &unk_1EA99F888;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v48;
  }
  else
  {
    v47 = 0;
  }
  v153 = v47;
  v151 = 0;
  v49 = v39[2];
  v50 = v39[1];
  if (v50 >= v49)
  {
    v52 = (v50 - *v39) >> 4;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v54 = v49 - *v39;
    if (v54 >> 3 > v53)
      v53 = v54 >> 3;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
      v55 = 0xFFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    v179 = v39 + 2;
    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v39 + 2), v55);
    v58 = (uint64_t *)&v56[16 * v52];
    *v58 = v46;
    v58[1] = (uint64_t)v47;
    v152 = 0;
    v153 = 0;
    v60 = *v39;
    v59 = v39[1];
    if (v59 == *v39)
    {
      v63 = (void **)v39[1];
      v61 = &v56[16 * v52];
    }
    else
    {
      v61 = &v56[16 * v52];
      do
      {
        v62 = *((_OWORD *)v59 - 1);
        v59 -= 16;
        *((_OWORD *)v61 - 1) = v62;
        v61 -= 16;
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = 0;
      }
      while (v59 != v60);
      v63 = (void **)*v39;
      v59 = v39[1];
    }
    v51 = (char *)(v58 + 2);
    *v39 = v61;
    v175 = v63;
    v176 = (uint64_t)v63;
    v39[1] = (char *)(v58 + 2);
    v177 = (uint64_t)v59;
    v64 = v39[2];
    v39[2] = &v56[16 * v57];
    v178 = v64;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v175);
  }
  else
  {
    *(_QWORD *)v50 = v46;
    *((_QWORD *)v50 + 1) = v47;
    v51 = v50 + 16;
    v152 = 0;
    v153 = 0;
  }
  v39[1] = v51;
  v65 = v151;
  v151 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v150.n128_u64[1];
  if (v150.n128_u64[1])
  {
    v67 = (unint64_t *)(v150.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  if (__p)
  {
    v159 = __p;
    operator delete(__p);
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  *(_OWORD *)v145 = *(_OWORD *)a2;
  v146 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v69 = (uint64_t)v165;
  *(_QWORD *)&v144 = v165;
  if (v165)
  {
    v70 = (_QWORD *)operator new();
    *v70 = &unk_1EA99F8E8;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v69;
  }
  else
  {
    v70 = 0;
  }
  *((_QWORD *)&v144 + 1) = v70;
  v165 = 0;
  *(_QWORD *)&v143 = v154;
  if (v154)
  {
    v71 = (_QWORD *)operator new();
    v72 = v154;
    *v71 = &unk_1EA99F948;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v143 + 1) = v71;
  v154 = 0;
  v170[0] = &unk_1EA99FAC8;
  v170[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateSlidingWindows;
  v171 = v170;
  v169 = 0;
  MIL::IROperator::Make((__int128 *)v145, &v144, &v143, (uint64_t)v170, (uint64_t)v168, a3);
  v73 = v169;
  if (v169 == v168)
  {
    v74 = 4;
    v73 = v168;
  }
  else
  {
    if (!v169)
      goto LABEL_76;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_76:
  v75 = v171;
  if (v171 == v170)
  {
    v76 = 4;
    v75 = v170;
    goto LABEL_80;
  }
  if (v171)
  {
    v76 = 5;
LABEL_80:
    (*(void (**)(void))(*v75 + 8 * v76))();
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
  if (*((_QWORD *)&v143 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (SHIBYTE(v146) < 0)
    operator delete(v145[0]);
  v83 = *a3;
  v166[0] = &off_1EA99FBD8;
  v166[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSlidingWindows;
  v167 = v166;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v83 + 200))(v83, v166);
  v84 = v167;
  if (v167 == v166)
  {
    v85 = 4;
    v84 = v166;
  }
  else
  {
    if (!v167)
      goto LABEL_98;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_98:
  MIL::Validation::TensorDTypeConstraints::Make(&v175);
  v86 = v175;
  std::string::basic_string[abi:ne180100]<0>(v139, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v139, 0, (uint64_t *)&Scalar);
  v141 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v142 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v137, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v86 + 3))(v86, &v141, v137);
  if (v138 < 0)
    operator delete(v137[0]);
  v89 = v142;
  if (v142)
  {
    p_shared_owners = (unint64_t *)&v142->__shared_owners_;
    do
      v91 = __ldaxr(p_shared_owners);
    while (__stlxr(v91 - 1, p_shared_owners));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  if (v140 < 0)
    operator delete(v139[0]);
  v93 = v175;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = Scalar;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v136 = v94;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v133, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v93 + 3))(v93, &v135, v133);
  if (v134 < 0)
    operator delete(v133[0]);
  v96 = v136;
  if (v136)
  {
    v97 = (unint64_t *)&v136->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*((void (**)(std::__shared_weak_count_vtbl *))v99->~__shared_weak_count + 1))(v99);
  v100 = *a3;
  v131 = v175;
  if (v175)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v175;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v132 = v101;
  v175 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v100 + 56))(v100, &v131);
  v103 = v132;
  if (v132)
  {
    v104 = (unint64_t *)&v132->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v175;
  v175 = 0;
  if (v106)
    (*((void (**)(void **))*v106 + 1))(v106);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v175);
  v107 = v175;
  std::string::basic_string[abi:ne180100]<0>(v127, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v127, 0, (uint64_t *)&Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v130 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v125, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v107 + 3))(v107, &v129, 0, v125);
  if (v126 < 0)
    operator delete(v125[0]);
  v110 = v130;
  if (v130)
  {
    v111 = (unint64_t *)&v130->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  if (v128 < 0)
    operator delete(v127[0]);
  v114 = *a3;
  v123 = v175;
  if (v175)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = v175;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = (std::__shared_weak_count_vtbl *)v116;
  }
  else
  {
    v115 = 0;
  }
  v124 = v115;
  v175 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v114 + 56))(v114, &v123);
  v117 = v124;
  if (v124)
  {
    v118 = (unint64_t *)&v124->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v175;
  v175 = 0;
  if (v120)
    (*((void (**)(void **))*v120 + 1))(v120);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v154, 0);
  result = (uint64_t)v165;
  if (v165)
  {
    v122 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    return MEMORY[0x1E0C023A0](v122, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07D7EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  v53 = *(_QWORD *)(v51 - 112);
  *(_QWORD *)(v51 - 112) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *v50;
  *v50 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 240), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::SpaceToBatch::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  unsigned __int8 *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unsigned __int8 *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  void **v63;
  char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  char **v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void **v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  void *v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void **v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void **v106;
  void **v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void **v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void **v127;
  void **v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  void **v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void *v141;
  void **v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  void **v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void *v155;
  void **v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  void **v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  void **v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void **v176;
  uint64_t result;
  uint64_t v178;
  void **v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  void *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  void *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  void *v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  void *v197[2];
  char v198;
  void *v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  void *v203[2];
  char v204;
  void *v205;
  std::__shared_weak_count *v206;
  void *v207[2];
  char v208;
  void *v209[2];
  char v210;
  void *v211;
  std::__shared_weak_count *v212;
  void **v213;
  std::__shared_weak_count *v214;
  void *v215;
  std::__shared_weak_count *v216;
  void *v217[2];
  char v218;
  void *v219;
  std::__shared_weak_count *v220;
  void **v221;
  std::__shared_weak_count *v222;
  void *v223[2];
  char v224;
  void *v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  void *v229[2];
  char v230;
  void *v231;
  std::__shared_weak_count *v232;
  __int128 v233;
  __int128 v234;
  void *v235[2];
  uint64_t v236;
  __n128 v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  char **v241;
  __n128 v242;
  __n128 v243;
  void *__p;
  void *v245;
  _QWORD *v246;
  __n128 v247;
  _QWORD *v248;
  void **v249;
  void **v250;
  void **v251;
  char *v252;
  char **v253;
  _QWORD v254[3];
  _QWORD *v255;
  _BYTE v256[24];
  _BYTE *v257;
  _QWORD v258[3];
  _QWORD *v259;
  void *v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD v263[3];

  v263[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v248 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v250 = (void **)(v10 + 24);
  v251 = (void **)(v10 + 24);
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  v249 = (void **)v10;
  v260 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v249);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v246 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v245 = v14 + 3;
  v261 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v260, 2, &v247);
  MIL::IRParameter::Make(&v247, &v239);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v239);
  v15 = v239;
  v239 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v247.n128_u64[1];
  if (v247.n128_u64[1])
  {
    v17 = (unint64_t *)(v247.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v245 = __p;
    operator delete(__p);
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  v19 = v248;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (void **)operator new(8uLL);
  v249 = v21;
  *v21 = (void *)v20;
  v250 = v21 + 1;
  v251 = v21 + 1;
  v260 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v249);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v260, 1, &v243);
  MIL::IRParameter::Make(&v243, (uint64_t *)&__p);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v19, "block_shape", (uint64_t *)&__p);
  v23 = __p;
  __p = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v243.n128_u64[1];
  if (v243.n128_u64[1])
  {
    v25 = (unint64_t *)(v243.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 32))(*((_QWORD *)v22 + 5), 1);
  v27 = v248;
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v30 = (char *)operator new(0x10uLL);
  v250 = (void **)(v30 + 16);
  v251 = (void **)(v30 + 16);
  *(_QWORD *)v30 = v28;
  *((_QWORD *)v30 + 1) = v29;
  v249 = (void **)v30;
  v260 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v249);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v260, 1, &v242);
  MIL::IRParameter::Make(&v242, (uint64_t *)&__p);
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v27, "paddings", (uint64_t *)&__p);
  v32 = __p;
  __p = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  v33 = (std::__shared_weak_count *)v242.n128_u64[1];
  if (v242.n128_u64[1])
  {
    v34 = (unint64_t *)(v242.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  v241 = 0;
  v36 = operator new();
  *(_QWORD *)v36 = 0;
  *(_QWORD *)(v36 + 8) = 0;
  *(_QWORD *)(v36 + 16) = 0;
  v249 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v241, (void **)v36);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v249, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v241, 1uLL);
  v37 = v241;
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(0x18uLL);
  v246 = v41 + 3;
  *v41 = v38;
  v41[1] = v39;
  v41[2] = v40;
  __p = v41;
  v245 = v41 + 3;
  v263[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(0x18uLL);
  v261 = (uint64_t)(v45 + 3);
  v262 = v45 + 3;
  *v45 = v42;
  v45[1] = v43;
  v45[2] = v44;
  v260 = v45;
  v263[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v260);
  MIL::IRParameter::MakeTypeSet((uint64_t)v263, 2, &v237);
  MIL::IRParameter::Make(&v237, &v238);
  v46 = v238;
  v239 = v238;
  if (v238)
  {
    v47 = (_QWORD *)operator new();
    v48 = v238;
    *v47 = &unk_1EA99F888;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v48;
  }
  else
  {
    v47 = 0;
  }
  v240 = v47;
  v238 = 0;
  v49 = v37[2];
  v50 = v37[1];
  if (v50 >= v49)
  {
    v52 = (v50 - *v37) >> 4;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v54 = v49 - *v37;
    if (v54 >> 3 > v53)
      v53 = v54 >> 3;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
      v55 = 0xFFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    v253 = v37 + 2;
    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v37 + 2), v55);
    v58 = (uint64_t *)&v56[16 * v52];
    *v58 = v46;
    v58[1] = (uint64_t)v47;
    v240 = 0;
    v239 = 0;
    v60 = *v37;
    v59 = v37[1];
    if (v59 == *v37)
    {
      v63 = (void **)v37[1];
      v61 = &v56[16 * v52];
    }
    else
    {
      v61 = &v56[16 * v52];
      do
      {
        v62 = *((_OWORD *)v59 - 1);
        v59 -= 16;
        *((_OWORD *)v61 - 1) = v62;
        v61 -= 16;
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = 0;
      }
      while (v59 != v60);
      v63 = (void **)*v37;
      v59 = v37[1];
    }
    v51 = (char *)(v58 + 2);
    *v37 = v61;
    v249 = v63;
    v250 = v63;
    v37[1] = (char *)(v58 + 2);
    v251 = (void **)v59;
    v64 = v37[2];
    v37[2] = &v56[16 * v57];
    v252 = v64;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v249);
  }
  else
  {
    *(_QWORD *)v50 = v46;
    *((_QWORD *)v50 + 1) = v47;
    v51 = v50 + 16;
    v240 = 0;
    v239 = 0;
  }
  v37[1] = v51;
  v65 = v238;
  v238 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v237.n128_u64[1];
  if (v237.n128_u64[1])
  {
    v67 = (unint64_t *)(v237.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v260)
  {
    v261 = (uint64_t)v260;
    operator delete(v260);
  }
  if (__p)
  {
    v245 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v235 = *(_OWORD *)a2;
  v236 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v69 = (uint64_t)v248;
  *(_QWORD *)&v234 = v248;
  if (v248)
  {
    v70 = (_QWORD *)operator new();
    *v70 = &unk_1EA99F8E8;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v69;
  }
  else
  {
    v70 = 0;
  }
  *((_QWORD *)&v234 + 1) = v70;
  v248 = 0;
  *(_QWORD *)&v233 = v241;
  if (v241)
  {
    v71 = (_QWORD *)operator new();
    v72 = v241;
    *v71 = &unk_1EA99F948;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v233 + 1) = v71;
  v241 = 0;
  v258[0] = &unk_1EA99FAC8;
  v258[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateSpaceToBatch;
  v259 = v258;
  v257 = 0;
  MIL::IROperator::Make((__int128 *)v235, &v234, &v233, (uint64_t)v258, (uint64_t)v256, a3);
  v73 = v257;
  if (v257 == v256)
  {
    v74 = 4;
    v73 = v256;
  }
  else
  {
    if (!v257)
      goto LABEL_69;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_69:
  v75 = v259;
  if (v259 == v258)
  {
    v76 = 4;
    v75 = v258;
    goto LABEL_73;
  }
  if (v259)
  {
    v76 = 5;
LABEL_73:
    (*(void (**)(void))(*v75 + 8 * v76))();
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
  if (*((_QWORD *)&v233 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (*((_QWORD *)&v234 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (SHIBYTE(v236) < 0)
    operator delete(v235[0]);
  v83 = *a3;
  v254[0] = &off_1EA99FBD8;
  v254[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSpaceToBatch;
  v255 = v254;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v83 + 200))(v83, v254);
  v84 = v255;
  if (v255 == v254)
  {
    v85 = 4;
    v84 = v254;
  }
  else
  {
    if (!v255)
      goto LABEL_91;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_91:
  MIL::Validation::TensorDTypeConstraints::Make(&v249);
  v86 = v249;
  std::string::basic_string[abi:ne180100]<0>(v229, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v229, 0, (uint64_t *)&__p);
  v231 = __p;
  if (__p)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)__p;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v232 = v87;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v227, "T");
  (*((void (**)(void **, void **, void **))*v86 + 3))(v86, &v231, v227);
  if (v228 < 0)
    operator delete(v227[0]);
  v89 = v232;
  if (v232)
  {
    p_shared_owners = (unint64_t *)&v232->__shared_owners_;
    do
      v91 = __ldaxr(p_shared_owners);
    while (__stlxr(v91 - 1, p_shared_owners));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = __p;
  __p = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v230 < 0)
    operator delete(v229[0]);
  v93 = v249;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v225 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v226 = v94;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v223, "T");
  (*((void (**)(void **, void **, void **))*v93 + 3))(v93, &v225, v223);
  if (v224 < 0)
    operator delete(v223[0]);
  v96 = v226;
  if (v226)
  {
    v97 = (unint64_t *)&v226->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  v100 = *a3;
  v221 = v249;
  if (v249)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v249;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v222 = v101;
  v249 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v100 + 56))(v100, &v221);
  v103 = v222;
  if (v222)
  {
    v104 = (unint64_t *)&v222->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v249;
  v249 = 0;
  if (v106)
    (*((void (**)(void **))*v106 + 1))(v106);
  MIL::Validation::TensorRankValueConstraints::Make(&v249);
  v107 = v249;
  std::string::basic_string[abi:ne180100]<0>(v217, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v217, 0, (uint64_t *)&__p);
  v219 = __p;
  if (__p)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = (std::__shared_weak_count_vtbl *)__p;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v220 = v108;
  __p = 0;
  (*((void (**)(void **, void **, uint64_t, uint64_t))*v107 + 4))(v107, &v219, 3, 5);
  v110 = v220;
  if (v220)
  {
    v111 = (unint64_t *)&v220->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = __p;
  __p = 0;
  if (v113)
    (*(void (**)(void *))(*(_QWORD *)v113 + 8))(v113);
  if (v218 < 0)
    operator delete(v217[0]);
  v114 = v249;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v215 = __p;
  if (__p)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)__p;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v216 = v115;
  __p = 0;
  (*((void (**)(void **, void **, uint64_t, uint64_t))*v114 + 4))(v114, &v215, 3, 5);
  v117 = v216;
  if (v216)
  {
    v118 = (unint64_t *)&v216->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = __p;
  __p = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  v121 = *a3;
  v213 = v249;
  if (v249)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = v249;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = (std::__shared_weak_count_vtbl *)v123;
  }
  else
  {
    v122 = 0;
  }
  v214 = v122;
  v249 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v121 + 56))(v121, &v213);
  v124 = v214;
  if (v214)
  {
    v125 = (unint64_t *)&v214->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v249;
  v249 = 0;
  if (v127)
    (*((void (**)(void **))*v127 + 1))(v127);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v249);
  v128 = v249;
  std::string::basic_string[abi:ne180100]<0>(v209, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v209, 0, (uint64_t *)&__p);
  v211 = __p;
  if (__p)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)__p;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v212 = v129;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v207, "B_in");
  (*((void (**)(void **, void **, _QWORD, void **))*v128 + 3))(v128, &v211, 0, v207);
  if (v208 < 0)
    operator delete(v207[0]);
  v131 = v212;
  if (v212)
  {
    v132 = (unint64_t *)&v212->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = __p;
  __p = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (v210 < 0)
    operator delete(v209[0]);
  v135 = v249;
  std::string::basic_string[abi:ne180100]<0>(v203, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v203, 0, (uint64_t *)&__p);
  v205 = __p;
  if (__p)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = (std::__shared_weak_count_vtbl *)__p;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v206 = v136;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v201, "C");
  (*((void (**)(void **, void **, uint64_t, void **))*v135 + 3))(v135, &v205, 1, v201);
  if (v202 < 0)
    operator delete(v201[0]);
  v138 = v206;
  if (v206)
  {
    v139 = (unint64_t *)&v206->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = __p;
  __p = 0;
  if (v141)
    (*(void (**)(void *))(*(_QWORD *)v141 + 8))(v141);
  if (v204 < 0)
    operator delete(v203[0]);
  v142 = v249;
  std::string::basic_string[abi:ne180100]<0>(v197, "block_shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v197, 0, (uint64_t *)&__p);
  v199 = __p;
  if (__p)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = (std::__shared_weak_count_vtbl *)__p;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v200 = v143;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "M");
  (*((void (**)(void **, void **, _QWORD, void **))*v142 + 3))(v142, &v199, 0, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v145 = v200;
  if (v200)
  {
    v146 = (unint64_t *)&v200->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = __p;
  __p = 0;
  if (v148)
    (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
  if (v198 < 0)
    operator delete(v197[0]);
  v149 = v249;
  std::string::basic_string[abi:ne180100]<0>(v191, "paddings");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v191, 0, (uint64_t *)&__p);
  v193 = __p;
  if (__p)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = (std::__shared_weak_count_vtbl *)__p;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v194 = v150;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "M");
  (*((void (**)(void **, void **, _QWORD, void **))*v149 + 3))(v149, &v193, 0, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v152 = v194;
  if (v194)
  {
    v153 = (unint64_t *)&v194->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = __p;
  __p = 0;
  if (v155)
    (*(void (**)(void *))(*(_QWORD *)v155 + 8))(v155);
  if (v192 < 0)
    operator delete(v191[0]);
  v156 = v249;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v187 = __p;
  if (__p)
  {
    v157 = (std::__shared_weak_count *)operator new();
    v158 = (std::__shared_weak_count_vtbl *)__p;
    v157->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v157->__shared_owners_ = 0;
    v157->__shared_weak_owners_ = 0;
    v157[1].__vftable = v158;
  }
  else
  {
    v157 = 0;
  }
  v188 = v157;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "B_out");
  (*((void (**)(void **, void **, _QWORD, void **))*v156 + 3))(v156, &v187, 0, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v159 = v188;
  if (v188)
  {
    v160 = (unint64_t *)&v188->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = __p;
  __p = 0;
  if (v162)
    (*(void (**)(void *))(*(_QWORD *)v162 + 8))(v162);
  v163 = v249;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v183 = __p;
  if (__p)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = (std::__shared_weak_count_vtbl *)__p;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v184 = v164;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v181, "C");
  (*((void (**)(void **, void **, uint64_t, void **))*v163 + 3))(v163, &v183, 1, v181);
  if (v182 < 0)
    operator delete(v181[0]);
  v166 = v184;
  if (v184)
  {
    v167 = (unint64_t *)&v184->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = __p;
  __p = 0;
  if (v169)
    (*(void (**)(void *))(*(_QWORD *)v169 + 8))(v169);
  v170 = *a3;
  v179 = v249;
  if (v249)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = v249;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = (std::__shared_weak_count_vtbl *)v172;
  }
  else
  {
    v171 = 0;
  }
  v180 = v171;
  v249 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v170 + 56))(v170, &v179);
  v173 = v180;
  if (v180)
  {
    v174 = (unint64_t *)&v180->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = v249;
  v249 = 0;
  if (v176)
    (*((void (**)(void **))*v176 + 1))(v176);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v241, 0);
  result = (uint64_t)v248;
  if (v248)
  {
    v178 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v248);
    return MEMORY[0x1E0C023A0](v178, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07D9770(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 248);
  *(_QWORD *)(v2 - 248) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x280], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 256), 0);
  _Unwind_Resume(a1);
}

void sub_1E07D9B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 184);
  if (v2 != v0 && !v2)
    JUMPOUT(0x1E07D9AC0);
  JUMPOUT(0x1E07D9ABCLL);
}

void sub_1E07D9B30()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 152);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 176);
  }
  else
  {
    if (!v2)
    {
LABEL_6:
      MIL::Operators::Common::ios15::GeLU::Make();
      JUMPOUT(0x1E07D9B70);
    }
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
  goto LABEL_6;
}

void sub_1E07D9B88()
{
  JUMPOUT(0x1E07D9AF0);
}

void sub_1E07D9B90()
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x270]);
  JUMPOUT(0x1E07D9B9CLL);
}

void sub_1E07D9BE0()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;

  v1 = STACK[0x2A8];
  STACK[0x2A8] = 0;
  if (v1)
    (*(void (**)(unint64_t))(*(_QWORD *)v1 + 8))(v1);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x288]);
  v2 = *(void **)(v0 - 248);
  if (v2)
  {
    *(_QWORD *)(v0 - 240) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E07D9AE4);
}

void sub_1E07D9C4C()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  void *v3;

  v1 = STACK[0x270];
  STACK[0x270] = 0;
  if (v1)
    (*(void (**)(unint64_t))(*(_QWORD *)v1 + 8))(v1);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C0]);
  v2 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = *(void **)(v0 - 248);
  if (v3)
  {
    *(_QWORD *)(v0 - 240) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1E07D9AE4);
}

void sub_1E07D9CE0()
{
  JUMPOUT(0x1E07D9AD8);
}

void sub_1E07D9D00()
{
  JUMPOUT(0x1E07D9AE4);
}

uint64_t MIL::Operators::Common::ios15::SpaceToDepth::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char **v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  void *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  void *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t result;
  uint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  __int128 v162;
  __int128 v163;
  void *v164[2];
  uint64_t v165;
  __n128 v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  char **v170;
  __n128 v171;
  __n128 v172;
  _QWORD *v173;
  void *__p;
  void *v175;
  char *v176;
  char *v177;
  char **v178;
  _QWORD v179[3];
  _QWORD *v180;
  _BYTE v181[24];
  _BYTE *v182;
  _BYTE v183[24];
  _BYTE *v184;
  void *v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD v188[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared_weak;
  void (__cdecl **v191)(std::__shared_weak_count *__hidden);
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v173 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = operator new(0x20uLL);
  v175 = v11 + 4;
  v176 = (char *)(v11 + 4);
  *v11 = v7;
  v11[1] = v8;
  v11[2] = v9;
  v11[3] = v10;
  __p = v11;
  v185 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (std::__shared_weak_count_vtbl *)&v16->__on_zero_shared_weak;
  v191 = &v16->__on_zero_shared_weak;
  v16->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v14;
  v16->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v15;
  Scalar = v16;
  v186 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 2, &v172);
  MIL::IRParameter::Make(&v172, &v168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v168);
  v17 = v168;
  v168 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v19 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v175 = __p;
    operator delete(__p);
  }
  v21 = v173;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v171);
  MIL::IRParameter::Make(&v171, (uint64_t *)&__p);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v21, "block_size", (uint64_t *)&__p);
  v23 = __p;
  __p = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v171.n128_u64[1];
  if (v171.n128_u64[1])
  {
    v25 = (unint64_t *)(v171.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 32))(*((_QWORD *)v22 + 5), 1);
  v170 = 0;
  v27 = operator new();
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v170, (void **)v27);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v170, 1uLL);
  v28 = v170;
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (std::__shared_weak_count_vtbl *)&v33->__on_zero_shared_weak;
  v191 = &v33->__on_zero_shared_weak;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v33->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v31;
  v33->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v32;
  Scalar = v33;
  v188[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = operator new(0x20uLL);
  v186 = (uint64_t)(v38 + 4);
  v187 = v38 + 4;
  *v38 = v34;
  v38[1] = v35;
  v38[2] = v36;
  v38[3] = v37;
  v185 = v38;
  v188[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v185);
  MIL::IRParameter::MakeTypeSet((uint64_t)v188, 2, &v166);
  MIL::IRParameter::Make(&v166, &v167);
  v39 = v167;
  v168 = v167;
  if (v167)
  {
    v40 = (_QWORD *)operator new();
    v41 = v167;
    *v40 = &unk_1EA99F888;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  v169 = v40;
  v167 = 0;
  v42 = v28[2];
  v43 = v28[1];
  if (v43 >= v42)
  {
    v45 = (v43 - *v28) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v47 = v42 - *v28;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v178 = v28 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v28 + 2), v48);
    v51 = (uint64_t *)&v49[16 * v45];
    *v51 = v39;
    v51[1] = (uint64_t)v40;
    v168 = 0;
    v169 = 0;
    v53 = *v28;
    v52 = v28[1];
    if (v52 == *v28)
    {
      v56 = v28[1];
      v54 = &v49[16 * v45];
    }
    else
    {
      v54 = &v49[16 * v45];
      do
      {
        v55 = *((_OWORD *)v52 - 1);
        v52 -= 16;
        *((_OWORD *)v54 - 1) = v55;
        v54 -= 16;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
      }
      while (v52 != v53);
      v56 = *v28;
      v52 = v28[1];
    }
    v44 = (char *)(v51 + 2);
    *v28 = v54;
    __p = v56;
    v175 = v56;
    v28[1] = (char *)(v51 + 2);
    v176 = v52;
    v57 = v28[2];
    v28[2] = &v49[16 * v50];
    v177 = v57;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v40;
    v44 = v43 + 16;
    v168 = 0;
    v169 = 0;
  }
  v28[1] = v44;
  v58 = v167;
  v167 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v166.n128_u64[1];
  if (v166.n128_u64[1])
  {
    v60 = (unint64_t *)(v166.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v185)
  {
    v186 = (uint64_t)v185;
    operator delete(v185);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v164 = *(_OWORD *)a2;
  v165 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v62 = (uint64_t)v173;
  *(_QWORD *)&v163 = v173;
  if (v173)
  {
    v63 = (_QWORD *)operator new();
    *v63 = &unk_1EA99F8E8;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v163 + 1) = v63;
  v173 = 0;
  *(_QWORD *)&v162 = v170;
  if (v170)
  {
    v64 = (_QWORD *)operator new();
    v65 = v170;
    *v64 = &unk_1EA99F948;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v162 + 1) = v64;
  v170 = 0;
  v184 = 0;
  v182 = 0;
  MIL::IROperator::Make((__int128 *)v164, &v163, &v162, (uint64_t)v183, (uint64_t)v181, a3);
  v66 = v182;
  if (v182 == v181)
  {
    v67 = 4;
    v66 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_58;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_58:
  v68 = v184;
  if (v184 == v183)
  {
    v69 = 4;
    v68 = v183;
    goto LABEL_62;
  }
  if (v184)
  {
    v69 = 5;
LABEL_62:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v165) < 0)
    operator delete(v164[0]);
  v76 = *a3;
  v179[0] = &off_1EA99FBD8;
  v179[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSpaceToDepth;
  v180 = v179;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 200))(v76, v179);
  v77 = v180;
  if (v180 == v179)
  {
    v78 = 4;
    v77 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_80;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v161 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v79 + 24))(v79, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v82 = v161;
  if (v161)
  {
    p_shared_owners = (unint64_t *)&v161->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  if (v159 < 0)
    operator delete(v158[0]);
  v86 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v155 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v86 + 24))(v86, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v89 = v155;
  if (v155)
  {
    v90 = (unint64_t *)&v155->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  v93 = *a3;
  v150 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v151 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v150);
  v96 = v151;
  if (v151)
  {
    v97 = (unint64_t *)&v151->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v100 = __p;
  std::string::basic_string[abi:ne180100]<0>(v146, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v146, 0, (uint64_t *)&Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = Scalar;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v149 = v101;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v100 + 24))(v100, &v148, 1, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v103 = v149;
  if (v149)
  {
    v104 = (unint64_t *)&v149->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = Scalar;
  Scalar = 0;
  if (v106)
    (*((void (**)(std::__shared_weak_count_vtbl *))v106->~__shared_weak_count + 1))(v106);
  if (v147 < 0)
    operator delete(v146[0]);
  v107 = __p;
  std::string::basic_string[abi:ne180100]<0>(v140, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&Scalar);
  v142 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v143 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "D_in1");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v107 + 24))(v107, &v142, 2, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v110 = v143;
  if (v143)
  {
    v111 = (unint64_t *)&v143->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  if (v141 < 0)
    operator delete(v140[0]);
  v114 = __p;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v137 = v115;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "D_in2");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v114 + 24))(v114, &v136, 3, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v117 = v137;
  if (v137)
  {
    v118 = (unint64_t *)&v137->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*((void (**)(std::__shared_weak_count_vtbl *))v120->~__shared_weak_count + 1))(v120);
  if (v135 < 0)
    operator delete(v134[0]);
  v121 = *a3;
  v130 = __p;
  if (__p)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)__p;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v131 = v122;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, &v130);
  v124 = v131;
  if (v131)
  {
    v125 = (unint64_t *)&v131->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = __p;
  __p = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v170, 0);
  result = (uint64_t)v173;
  if (v173)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v173);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07DAB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  uint64_t a68;
  void *a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a69;
  a69 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Split::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void **v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  void **v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count_vtbl *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  uint64_t result;
  uint64_t v71;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  void **v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void *v84[2];
  uint64_t v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  void *__p;
  void *v90;
  _QWORD *v91;
  void *v92;
  void *v93;
  _QWORD *v94;
  __n128 v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD v98[3];
  _QWORD *v99;
  _BYTE v100[24];
  _BYTE *v101;
  _QWORD v102[3];
  _QWORD *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count_vtbl *v105;
  void (__cdecl **v106)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v108;
  void (__cdecl **v109)(std::__shared_weak_count *__hidden);
  void **v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v97 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v108 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v109 = &v8->~__shared_weak_count_0;
  v110 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v104 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v105 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v106 = &v10->~__shared_weak_count_0;
  v111 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v104);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v92 = v12;
  *v12 = v11;
  v93 = v12 + 1;
  v94 = v12 + 1;
  v112 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v92);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v90 = v14 + 1;
  v91 = v14 + 1;
  v113 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v110, 4, &v95);
  MIL::IRParameter::Make(&v95, &v96);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v96);
  v15 = v96;
  v96 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v95.n128_u64[1];
  if (v95.n128_u64[1])
  {
    v17 = (unint64_t *)(v95.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v90 = __p;
    operator delete(__p);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  if (Scalar)
  {
    v108 = Scalar;
    operator delete(Scalar);
  }
  v19 = v97;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v88);
  MIL::IRParameter::Make(&v88, (uint64_t *)&v110);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "axis", (uint64_t *)&v110);
  v21 = v110;
  v110 = 0;
  if (v21)
    (*((void (**)(void **))*v21 + 1))(v21);
  v22 = (std::__shared_weak_count *)v88.n128_u64[1];
  if (v88.n128_u64[1])
  {
    v23 = (unint64_t *)(v88.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v97;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v87);
  MIL::IRParameter::Make(&v87, (uint64_t *)&v110);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v25, "num_splits", (uint64_t *)&v110);
  v27 = v110;
  v110 = 0;
  if (v27)
    (*((void (**)(void **))*v27 + 1))(v27);
  v28 = (std::__shared_weak_count *)v87.n128_u64[1];
  if (v87.n128_u64[1])
  {
    v29 = (unint64_t *)(v87.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v31 = v97;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (void **)operator new(8uLL);
  v110 = v33;
  *v33 = (void *)v32;
  v111 = v33 + 1;
  v112 = (uint64_t)(v33 + 1);
  v104 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v110);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v104, 1, &v86);
  MIL::IRParameter::Make(&v86, (uint64_t *)&Scalar);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v31, "split_sizes", (uint64_t *)&Scalar);
  v35 = Scalar;
  Scalar = 0;
  if (v35)
    (*((void (**)(std::__shared_weak_count_vtbl *))v35->~__shared_weak_count + 1))(v35);
  v36 = (std::__shared_weak_count *)v86.n128_u64[1];
  if (v86.n128_u64[1])
  {
    v37 = (unint64_t *)(v86.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 48))(*((_QWORD *)v34 + 5), 1);
  v110 = 0;
  *(_OWORD *)v84 = *(_OWORD *)a2;
  v85 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v39 = (uint64_t)v97;
  v82 = (uint64_t)v97;
  if (v97)
  {
    v40 = (std::__shared_weak_count *)operator new();
    v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v40->__shared_owners_ = 0;
    v40->__shared_weak_owners_ = 0;
    v40[1].__vftable = (std::__shared_weak_count_vtbl *)v39;
    v83 = v40;
    v97 = 0;
    v80 = v110;
    if (v110)
    {
      v41 = (std::__shared_weak_count *)operator new();
      v42 = v110;
      v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F948;
      v41->__shared_owners_ = 0;
      v41->__shared_weak_owners_ = 0;
      v41[1].__vftable = (std::__shared_weak_count_vtbl *)v42;
    }
    else
    {
      v41 = 0;
    }
  }
  else
  {
    v41 = 0;
    v83 = 0;
    v97 = 0;
    v80 = 0;
  }
  v81 = v41;
  v110 = 0;
  v102[0] = &unk_1EA99FAC8;
  v102[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateSplit;
  v103 = v102;
  v101 = 0;
  MIL::IROperator::Make((__int128 *)v84, 2, 4, 2, -1, (uint64_t)&v82, (uint64_t)&v80, (uint64_t)v102, a3, (uint64_t)v100);
  v43 = v101;
  if (v101 == v100)
  {
    v44 = 4;
    v43 = v100;
  }
  else
  {
    if (!v101)
      goto LABEL_49;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_49:
  v45 = v103;
  if (v103 == v102)
  {
    v46 = 4;
    v45 = v102;
    goto LABEL_53;
  }
  if (v103)
  {
    v46 = 5;
LABEL_53:
    (*(void (**)(void))(*v45 + 8 * v46))();
  }
  v47 = v81;
  if (v81)
  {
    p_shared_owners = (unint64_t *)&v81->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v83;
  if (v83)
  {
    v51 = (unint64_t *)&v83->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (SHIBYTE(v85) < 0)
    operator delete(v84[0]);
  v53 = *a3;
  v98[0] = &off_1EA99FBD8;
  v98[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSplit;
  v99 = v98;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v53 + 200))(v53, v98);
  v54 = v99;
  if (v99 == v98)
  {
    v55 = 4;
    v54 = v98;
  }
  else
  {
    if (!v99)
      goto LABEL_71;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_71:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v56 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v76, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v76, 0, (uint64_t *)&v104);
  v78 = v104;
  if (v104)
  {
    v57 = (std::__shared_weak_count *)operator new();
    v58 = v104;
    v57->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v57->__shared_owners_ = 0;
    v57->__shared_weak_owners_ = 0;
    v57[1].__vftable = v58;
  }
  else
  {
    v57 = 0;
  }
  v79 = v57;
  v104 = 0;
  std::string::basic_string[abi:ne180100]<0>(v74, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, std::__shared_weak_count_vtbl **, void **))v56->~__shared_weak_count
   + 3))(v56, &v78, v74);
  if (v75 < 0)
    operator delete(v74[0]);
  v59 = v79;
  if (v79)
  {
    v60 = (unint64_t *)&v79->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v104;
  v104 = 0;
  if (v62)
    (*((void (**)(std::__shared_weak_count_vtbl *))v62->~__shared_weak_count + 1))(v62);
  if (v77 < 0)
    operator delete(v76[0]);
  v63 = *a3;
  v72 = Scalar;
  if (Scalar)
  {
    v64 = (std::__shared_weak_count *)operator new();
    v65 = Scalar;
    v64->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v64->__shared_owners_ = 0;
    v64->__shared_weak_owners_ = 0;
    v64[1].__vftable = v65;
  }
  else
  {
    v64 = 0;
  }
  v73 = v64;
  Scalar = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v63 + 56))(v63, &v72);
  v66 = v73;
  if (v73)
  {
    v67 = (unint64_t *)&v73->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = Scalar;
  Scalar = 0;
  if (v69)
    (*((void (**)(std::__shared_weak_count_vtbl *))v69->~__shared_weak_count + 1))(v69);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v110, 0);
  result = (uint64_t)v97;
  if (v97)
  {
    v71 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v97);
    return MEMORY[0x1E0C023A0](v71, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07DB888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (a36 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v49 - 88), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v49 - 240), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Squeeze::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  void **v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char **v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void **v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  void **v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void **v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  void **v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  void **v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count_vtbl *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  void **v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  void **v122;
  uint64_t result;
  uint64_t v124;
  void **v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  void *v135[2];
  char v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  void **v139;
  std::__shared_weak_count *v140;
  void *v141[2];
  char v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  void *v145[2];
  char v146;
  void *v147[2];
  char v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  __int128 v151;
  __int128 v152;
  void *v153[2];
  uint64_t v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  char **v162;
  __n128 v163;
  void *__p;
  void *v165;
  _QWORD *v166;
  void *v167;
  void *v168;
  _QWORD *v169;
  __n128 v170;
  _QWORD *v171;
  _QWORD v172[3];
  _QWORD *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _QWORD v176[3];
  _QWORD *v177;
  std::__shared_weak_count_vtbl *v178;
  uint64_t p_on_zero_shared;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  void *v183;
  _QWORD *v184;
  void **v185;
  void **v186;
  uint64_t v187;
  uint64_t v188;
  char **v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v171 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v180 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v178 = v9;
  v185 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v178);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v183 = v12 + 2;
  v184 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v182 = v12;
  v186 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v182);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v168 = v15 + 2;
  v169 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v167 = v15;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v167);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v165 = v18 + 2;
  v166 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  __p = v18;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 4, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v155);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v155);
  v19 = v155;
  v155 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v21 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v165 = __p;
    operator delete(__p);
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  if (v178)
  {
    p_on_zero_shared = (uint64_t)v178;
    operator delete(v178);
  }
  v23 = v171;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (void **)operator new(8uLL);
  v185 = v25;
  *v25 = (void *)v24;
  v186 = v25 + 1;
  v187 = (uint64_t)(v25 + 1);
  v182 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v185);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v182, 1, &v163);
  MIL::IRParameter::Make(&v163, (uint64_t *)&v178);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v23, "axes", (uint64_t *)&v178);
  v27 = v178;
  v178 = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v29 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v162 = 0;
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  v185 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, (void **)v31);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v185, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v162, 1uLL);
  v32 = v162;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v182 = v34;
  *v34 = v33;
  v183 = v34 + 1;
  v184 = v34 + 1;
  v178 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v182);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v167 = v36;
  *v36 = v35;
  v168 = v36 + 1;
  v169 = v36 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v167);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  __p = v38;
  *v38 = v37;
  v165 = v38 + 1;
  v166 = v38 + 1;
  v180 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v155 = v40;
  *v40 = v39;
  v156 = v40 + 1;
  v157 = v40 + 1;
  v181 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v155);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v178, 4, &v158);
  MIL::IRParameter::Make(&v158, &v159);
  v41 = v159;
  v160 = v159;
  if (v159)
  {
    v42 = (_QWORD *)operator new();
    v43 = v159;
    *v42 = &unk_1EA99F888;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  v161 = v42;
  v159 = 0;
  v44 = v32[2];
  v45 = v32[1];
  if (v45 >= v44)
  {
    v47 = (v45 - *v32) >> 4;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v49 = v44 - *v32;
    if (v49 >> 3 > v48)
      v48 = v49 >> 3;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
      v50 = 0xFFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    v189 = v32 + 2;
    v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v32 + 2), v50);
    v53 = (uint64_t *)&v51[16 * v47];
    *v53 = v41;
    v53[1] = (uint64_t)v42;
    v160 = 0;
    v161 = 0;
    v55 = *v32;
    v54 = v32[1];
    if (v54 == *v32)
    {
      v58 = (void **)v32[1];
      v56 = &v51[16 * v47];
    }
    else
    {
      v56 = &v51[16 * v47];
      do
      {
        v57 = *((_OWORD *)v54 - 1);
        v54 -= 16;
        *((_OWORD *)v56 - 1) = v57;
        v56 -= 16;
        *(_QWORD *)v54 = 0;
        *((_QWORD *)v54 + 1) = 0;
      }
      while (v54 != v55);
      v58 = (void **)*v32;
      v54 = v32[1];
    }
    v46 = (char *)(v53 + 2);
    *v32 = v56;
    v185 = v58;
    v186 = v58;
    v32[1] = (char *)(v53 + 2);
    v187 = (uint64_t)v54;
    v59 = v32[2];
    v32[2] = &v51[16 * v52];
    v188 = (uint64_t)v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v185);
  }
  else
  {
    *(_QWORD *)v45 = v41;
    *((_QWORD *)v45 + 1) = v42;
    v46 = v45 + 16;
    v160 = 0;
    v161 = 0;
  }
  v32[1] = v46;
  v60 = v159;
  v159 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v62 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (__p)
  {
    v165 = __p;
    operator delete(__p);
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  *(_OWORD *)v153 = *(_OWORD *)a2;
  v154 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v64 = (uint64_t)v171;
  *(_QWORD *)&v152 = v171;
  if (v171)
  {
    v65 = (_QWORD *)operator new();
    *v65 = &unk_1EA99F8E8;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v64;
  }
  else
  {
    v65 = 0;
  }
  *((_QWORD *)&v152 + 1) = v65;
  v171 = 0;
  *(_QWORD *)&v151 = v162;
  if (v162)
  {
    v66 = (_QWORD *)operator new();
    v67 = v162;
    *v66 = &unk_1EA99F948;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v151 + 1) = v66;
  v162 = 0;
  v176[0] = &unk_1EA99FAC8;
  v176[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateSqueeze;
  v177 = v176;
  v175 = 0;
  MIL::IROperator::Make((__int128 *)v153, &v152, &v151, (uint64_t)v176, (uint64_t)v174, a3);
  v68 = v175;
  if (v175 == v174)
  {
    v69 = 4;
    v68 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_68;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_68:
  v70 = v177;
  if (v177 == v176)
  {
    v71 = 4;
    v70 = v176;
    goto LABEL_72;
  }
  if (v177)
  {
    v71 = 5;
LABEL_72:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (SHIBYTE(v154) < 0)
    operator delete(v153[0]);
  v78 = *a3;
  v172[0] = &off_1EA99FBD8;
  v172[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSqueeze;
  v173 = v172;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v78 + 200))(v78, v172);
  v79 = v173;
  if (v173 == v172)
  {
    v80 = 4;
    v79 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_90;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_90:
  MIL::Validation::TensorDTypeConstraints::Make(&v185);
  v81 = v185;
  std::string::basic_string[abi:ne180100]<0>(v147, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v147, 0, (uint64_t *)&v178);
  v149 = v178;
  if (v178)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v178;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v150 = v82;
  v178 = 0;
  std::string::basic_string[abi:ne180100]<0>(v145, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v81 + 3))(v81, &v149, v145);
  if (v146 < 0)
    operator delete(v145[0]);
  v84 = v150;
  if (v150)
  {
    p_shared_owners = (unint64_t *)&v150->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v178;
  v178 = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  if (v148 < 0)
    operator delete(v147[0]);
  v88 = v185;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v178);
  v143 = v178;
  if (v178)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = v178;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v144 = v89;
  v178 = 0;
  std::string::basic_string[abi:ne180100]<0>(v141, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v88 + 3))(v88, &v143, v141);
  if (v142 < 0)
    operator delete(v141[0]);
  v91 = v144;
  if (v144)
  {
    v92 = (unint64_t *)&v144->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v178;
  v178 = 0;
  if (v94)
    (*((void (**)(std::__shared_weak_count_vtbl *))v94->~__shared_weak_count + 1))(v94);
  v95 = *a3;
  v139 = v185;
  if (v185)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v185;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = (std::__shared_weak_count_vtbl *)v97;
  }
  else
  {
    v96 = 0;
  }
  v140 = v96;
  v185 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v95 + 56))(v95, &v139);
  v98 = v140;
  if (v140)
  {
    v99 = (unint64_t *)&v140->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v185;
  v185 = 0;
  if (v101)
    (*((void (**)(void **))*v101 + 1))(v101);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v185);
  v102 = v185;
  std::string::basic_string[abi:ne180100]<0>(v135, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v135, 0, (uint64_t *)&v178);
  v137 = v178;
  if (v178)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = v178;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v138 = v103;
  v178 = 0;
  std::string::basic_string[abi:ne180100]<0>(v133, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v102 + 3))(v102, &v137, 0, v133);
  if (v134 < 0)
    operator delete(v133[0]);
  v105 = v138;
  if (v138)
  {
    v106 = (unint64_t *)&v138->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v178;
  v178 = 0;
  if (v108)
    (*((void (**)(std::__shared_weak_count_vtbl *))v108->~__shared_weak_count + 1))(v108);
  if (v136 < 0)
    operator delete(v135[0]);
  v109 = v185;
  std::string::basic_string[abi:ne180100]<0>(v129, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 1, (uint64_t *)&v178);
  v131 = v178;
  if (v178)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = v178;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v132 = v110;
  v178 = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v109 + 3))(v109, &v131, 0, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v112 = v132;
  if (v132)
  {
    v113 = (unint64_t *)&v132->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v178;
  v178 = 0;
  if (v115)
    (*((void (**)(std::__shared_weak_count_vtbl *))v115->~__shared_weak_count + 1))(v115);
  if (v130 < 0)
    operator delete(v129[0]);
  v116 = *a3;
  v125 = v185;
  if (v185)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v185;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = (std::__shared_weak_count_vtbl *)v118;
  }
  else
  {
    v117 = 0;
  }
  v126 = v117;
  v185 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v116 + 56))(v116, &v125);
  v119 = v126;
  if (v126)
  {
    v120 = (unint64_t *)&v126->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v185;
  v185 = 0;
  if (v122)
    (*((void (**)(void **))*v122 + 1))(v122);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v171;
  if (v171)
  {
    v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v171);
    return MEMORY[0x1E0C023A0](v124, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07DC9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;

  v72 = *(_QWORD *)(v70 - 112);
  *(_QWORD *)(v70 - 112) = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = *v69;
  *v69 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

void sub_1E07DCE2C()
{
  JUMPOUT(0x1E07DCDA0);
}

uint64_t MIL::Operators::Common::ios15::Stack::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  void **v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void **v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void **v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void **v96;
  uint64_t result;
  uint64_t v98;
  void **v99;
  std::__shared_weak_count *v100;
  void *v101[2];
  char v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  void *v105[2];
  char v106;
  void *v107[2];
  char v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  __int128 v111;
  __int128 v112;
  void *v113[2];
  uint64_t v114;
  void *v115;
  void *v116;
  _QWORD *v117;
  __n128 v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char **v122;
  __n128 v123;
  void *__p;
  void *v125;
  _QWORD *v126;
  void *v127;
  void *v128;
  _QWORD *v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  __n128 v133;
  _QWORD *v134;
  _QWORD v135[3];
  _QWORD *v136;
  _BYTE v137[24];
  _BYTE *v138;
  _QWORD v139[3];
  _QWORD *v140;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void **v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char **v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v134 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v142 = (uint64_t)&v8->~__shared_weak_count_0;
  v143 = (uint64_t)&v8->~__shared_weak_count_0;
  v145 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v130 = v10;
  *v10 = v9;
  v131 = v10 + 1;
  v132 = v10 + 1;
  v146 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v130);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v127 = v12;
  *v12 = v11;
  v128 = v12 + 1;
  v129 = v12 + 1;
  v147 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v127);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v125 = v14 + 1;
  v126 = v14 + 1;
  v148 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v145, 4, &v133);
  MIL::IRParameter::Make(&v133, (uint64_t *)&v115);
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "values", (uint64_t *)&v115);
  v16 = v115;
  v115 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v133.n128_u64[1];
  if (v133.n128_u64[1])
  {
    v18 = (unint64_t *)(v133.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v125 = __p;
    operator delete(__p);
  }
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  if (Scalar)
  {
    v142 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v15 + 5) + 64))(*((_QWORD *)v15 + 5), 1);
  v20 = v134;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v123);
  MIL::IRParameter::Make(&v123, (uint64_t *)&v145);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v20, "axis", (uint64_t *)&v145);
  v22 = v145;
  v145 = 0;
  if (v22)
    (*((void (**)(void **))*v22 + 1))(v22);
  v23 = (std::__shared_weak_count *)v123.n128_u64[1];
  if (v123.n128_u64[1])
  {
    v24 = (unint64_t *)(v123.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 32))(*((_QWORD *)v21 + 5), 1);
  v122 = 0;
  v26 = operator new();
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v145 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v122, (void **)v26);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v145, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v122, 1uLL);
  v27 = v122;
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v130 = v29;
  *v29 = v28;
  v131 = v29 + 1;
  v132 = v29 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v130);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v127 = v31;
  *v31 = v30;
  v128 = v31 + 1;
  v129 = v31 + 1;
  v142 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v127);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v125 = v33 + 1;
  v126 = v33 + 1;
  v143 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v115 = v35;
  *v35 = v34;
  v116 = v35 + 1;
  v117 = v35 + 1;
  v144 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v115);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v118);
  MIL::IRParameter::Make(&v118, &v119);
  v36 = v119;
  v120 = v119;
  if (v119)
  {
    v37 = (_QWORD *)operator new();
    v38 = v119;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v121 = v37;
  v119 = 0;
  v39 = v27[2];
  v40 = v27[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v27) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v27;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v149 = v27 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v27 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v120 = 0;
    v121 = 0;
    v50 = *v27;
    v49 = v27[1];
    if (v49 == *v27)
    {
      v53 = (void **)v27[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = (void **)*v27;
      v49 = v27[1];
    }
    v41 = (char *)(v48 + 2);
    *v27 = v51;
    v145 = v53;
    v146 = (uint64_t)v53;
    v27[1] = (char *)(v48 + 2);
    v147 = (uint64_t)v49;
    v54 = v27[2];
    v27[2] = &v46[16 * v47];
    v148 = (uint64_t)v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v145);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v120 = 0;
    v121 = 0;
  }
  v27[1] = v41;
  v55 = v119;
  v119 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v118.n128_u64[1];
  if (v118.n128_u64[1])
  {
    v57 = (unint64_t *)(v118.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
  if (__p)
  {
    v125 = __p;
    operator delete(__p);
  }
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  *(_OWORD *)v113 = *(_OWORD *)a2;
  v114 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v134;
  *(_QWORD *)&v112 = v134;
  if (v134)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v112 + 1) = v60;
  v134 = 0;
  *(_QWORD *)&v111 = v122;
  if (v122)
  {
    v61 = (_QWORD *)operator new();
    v62 = v122;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v111 + 1) = v61;
  v122 = 0;
  v139[0] = &unk_1EA99FAC8;
  v139[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateStack;
  v140 = v139;
  v138 = 0;
  MIL::IROperator::Make((__int128 *)v113, &v112, &v111, (uint64_t)v139, (uint64_t)v137, a3);
  v63 = v138;
  if (v138 == v137)
  {
    v64 = 4;
    v63 = v137;
  }
  else
  {
    if (!v138)
      goto LABEL_66;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_66:
  v65 = v140;
  if (v140 == v139)
  {
    v66 = 4;
    v65 = v139;
    goto LABEL_70;
  }
  if (v140)
  {
    v66 = 5;
LABEL_70:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
  if (*((_QWORD *)&v111 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v114) < 0)
    operator delete(v113[0]);
  v73 = *a3;
  v135[0] = &off_1EA99FBD8;
  v135[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceStack;
  v136 = v135;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v135);
  v74 = v136;
  if (v136 == v135)
  {
    v75 = 4;
    v74 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_88;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_88:
  MIL::Validation::TensorDTypeConstraints::Make(&v145);
  v76 = v145;
  std::string::basic_string[abi:ne180100]<0>(v107, "values");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v107, 0, (uint64_t *)&Scalar);
  v109 = Scalar;
  if (Scalar)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = Scalar;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v110 = v77;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v105, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v76 + 3))(v76, &v109, v105);
  if (v106 < 0)
    operator delete(v105[0]);
  v79 = v110;
  if (v110)
  {
    p_shared_owners = (unint64_t *)&v110->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = Scalar;
  Scalar = 0;
  if (v82)
    (*((void (**)(std::__shared_weak_count_vtbl *))v82->~__shared_weak_count + 1))(v82);
  if (v108 < 0)
    operator delete(v107[0]);
  v83 = v145;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v103 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v104 = v84;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v101, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v103, v101);
  if (v102 < 0)
    operator delete(v101[0]);
  v86 = v104;
  if (v104)
  {
    v87 = (unint64_t *)&v104->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  v90 = *a3;
  v99 = v145;
  if (v145)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v145;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v100 = v91;
  v145 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v90 + 56))(v90, &v99);
  v93 = v100;
  if (v100)
  {
    v94 = (unint64_t *)&v100->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v145;
  v145 = 0;
  if (v96)
    (*((void (**)(void **))*v96 + 1))(v96);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v122, 0);
  result = (uint64_t)v134;
  if (v134)
  {
    v98 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v134);
    return MEMORY[0x1E0C023A0](v98, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07DD94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40)
{
  uint64_t *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;

  v43 = *(_QWORD *)(v41 - 112);
  *(_QWORD *)(v41 - 112) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *v40;
  *v40 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v41 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Transpose::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  void **v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char **v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void **v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  void **v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void **v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  void **v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  void **v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count_vtbl *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  void **v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  void **v122;
  uint64_t result;
  uint64_t v124;
  void **v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  void *v135[2];
  char v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  void **v139;
  std::__shared_weak_count *v140;
  void *v141[2];
  char v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  void *v145[2];
  char v146;
  void *v147[2];
  char v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  __int128 v151;
  __int128 v152;
  void *v153[2];
  uint64_t v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  char **v162;
  __n128 v163;
  void *__p;
  void *v165;
  _QWORD *v166;
  void *v167;
  void *v168;
  _QWORD *v169;
  __n128 v170;
  _QWORD *v171;
  _QWORD v172[3];
  _QWORD *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _QWORD v176[3];
  _QWORD *v177;
  std::__shared_weak_count_vtbl *v178;
  uint64_t p_on_zero_shared;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  void *v183;
  _QWORD *v184;
  void **v185;
  void **v186;
  uint64_t v187;
  uint64_t v188;
  char **v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v171 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v180 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v178 = v9;
  v185 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v178);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v183 = v12 + 2;
  v184 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v182 = v12;
  v186 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v182);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v168 = v15 + 2;
  v169 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v167 = v15;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v167);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v165 = v18 + 2;
  v166 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  __p = v18;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 4, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v155);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v155);
  v19 = v155;
  v155 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v21 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v165 = __p;
    operator delete(__p);
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  if (v178)
  {
    p_on_zero_shared = (uint64_t)v178;
    operator delete(v178);
  }
  v23 = v171;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (void **)operator new(8uLL);
  v185 = v25;
  *v25 = (void *)v24;
  v186 = v25 + 1;
  v187 = (uint64_t)(v25 + 1);
  v182 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v185);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v182, 1, &v163);
  MIL::IRParameter::Make(&v163, (uint64_t *)&v178);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v23, "perm", (uint64_t *)&v178);
  v27 = v178;
  v178 = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v29 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v162 = 0;
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  v185 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, (void **)v31);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v185, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v162, 1uLL);
  v32 = v162;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v182 = v34;
  *v34 = v33;
  v183 = v34 + 1;
  v184 = v34 + 1;
  v178 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v182);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v167 = v36;
  *v36 = v35;
  v168 = v36 + 1;
  v169 = v36 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v167);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  __p = v38;
  *v38 = v37;
  v165 = v38 + 1;
  v166 = v38 + 1;
  v180 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v155 = v40;
  *v40 = v39;
  v156 = v40 + 1;
  v157 = v40 + 1;
  v181 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v155);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v178, 4, &v158);
  MIL::IRParameter::Make(&v158, &v159);
  v41 = v159;
  v160 = v159;
  if (v159)
  {
    v42 = (_QWORD *)operator new();
    v43 = v159;
    *v42 = &unk_1EA99F888;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  v161 = v42;
  v159 = 0;
  v44 = v32[2];
  v45 = v32[1];
  if (v45 >= v44)
  {
    v47 = (v45 - *v32) >> 4;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v49 = v44 - *v32;
    if (v49 >> 3 > v48)
      v48 = v49 >> 3;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
      v50 = 0xFFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    v189 = v32 + 2;
    v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v32 + 2), v50);
    v53 = (uint64_t *)&v51[16 * v47];
    *v53 = v41;
    v53[1] = (uint64_t)v42;
    v160 = 0;
    v161 = 0;
    v55 = *v32;
    v54 = v32[1];
    if (v54 == *v32)
    {
      v58 = (void **)v32[1];
      v56 = &v51[16 * v47];
    }
    else
    {
      v56 = &v51[16 * v47];
      do
      {
        v57 = *((_OWORD *)v54 - 1);
        v54 -= 16;
        *((_OWORD *)v56 - 1) = v57;
        v56 -= 16;
        *(_QWORD *)v54 = 0;
        *((_QWORD *)v54 + 1) = 0;
      }
      while (v54 != v55);
      v58 = (void **)*v32;
      v54 = v32[1];
    }
    v46 = (char *)(v53 + 2);
    *v32 = v56;
    v185 = v58;
    v186 = v58;
    v32[1] = (char *)(v53 + 2);
    v187 = (uint64_t)v54;
    v59 = v32[2];
    v32[2] = &v51[16 * v52];
    v188 = (uint64_t)v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v185);
  }
  else
  {
    *(_QWORD *)v45 = v41;
    *((_QWORD *)v45 + 1) = v42;
    v46 = v45 + 16;
    v160 = 0;
    v161 = 0;
  }
  v32[1] = v46;
  v60 = v159;
  v159 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v62 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (__p)
  {
    v165 = __p;
    operator delete(__p);
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  *(_OWORD *)v153 = *(_OWORD *)a2;
  v154 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v64 = (uint64_t)v171;
  *(_QWORD *)&v152 = v171;
  if (v171)
  {
    v65 = (_QWORD *)operator new();
    *v65 = &unk_1EA99F8E8;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v64;
  }
  else
  {
    v65 = 0;
  }
  *((_QWORD *)&v152 + 1) = v65;
  v171 = 0;
  *(_QWORD *)&v151 = v162;
  if (v162)
  {
    v66 = (_QWORD *)operator new();
    v67 = v162;
    *v66 = &unk_1EA99F948;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v151 + 1) = v66;
  v162 = 0;
  v176[0] = &unk_1EA99FAC8;
  v176[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateTranspose;
  v177 = v176;
  v175 = 0;
  MIL::IROperator::Make((__int128 *)v153, &v152, &v151, (uint64_t)v176, (uint64_t)v174, a3);
  v68 = v175;
  if (v175 == v174)
  {
    v69 = 4;
    v68 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_68;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_68:
  v70 = v177;
  if (v177 == v176)
  {
    v71 = 4;
    v70 = v176;
    goto LABEL_72;
  }
  if (v177)
  {
    v71 = 5;
LABEL_72:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (SHIBYTE(v154) < 0)
    operator delete(v153[0]);
  v78 = *a3;
  v172[0] = &off_1EA99FBD8;
  v172[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceTranspose;
  v173 = v172;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v78 + 200))(v78, v172);
  v79 = v173;
  if (v173 == v172)
  {
    v80 = 4;
    v79 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_90;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_90:
  MIL::Validation::TensorDTypeConstraints::Make(&v185);
  v81 = v185;
  std::string::basic_string[abi:ne180100]<0>(v147, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v147, 0, (uint64_t *)&v178);
  v149 = v178;
  if (v178)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v178;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v150 = v82;
  v178 = 0;
  std::string::basic_string[abi:ne180100]<0>(v145, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v81 + 3))(v81, &v149, v145);
  if (v146 < 0)
    operator delete(v145[0]);
  v84 = v150;
  if (v150)
  {
    p_shared_owners = (unint64_t *)&v150->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v178;
  v178 = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  if (v148 < 0)
    operator delete(v147[0]);
  v88 = v185;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v178);
  v143 = v178;
  if (v178)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = v178;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v144 = v89;
  v178 = 0;
  std::string::basic_string[abi:ne180100]<0>(v141, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v88 + 3))(v88, &v143, v141);
  if (v142 < 0)
    operator delete(v141[0]);
  v91 = v144;
  if (v144)
  {
    v92 = (unint64_t *)&v144->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v178;
  v178 = 0;
  if (v94)
    (*((void (**)(std::__shared_weak_count_vtbl *))v94->~__shared_weak_count + 1))(v94);
  v95 = *a3;
  v139 = v185;
  if (v185)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v185;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = (std::__shared_weak_count_vtbl *)v97;
  }
  else
  {
    v96 = 0;
  }
  v140 = v96;
  v185 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v95 + 56))(v95, &v139);
  v98 = v140;
  if (v140)
  {
    v99 = (unint64_t *)&v140->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v185;
  v185 = 0;
  if (v101)
    (*((void (**)(void **))*v101 + 1))(v101);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v185);
  v102 = v185;
  std::string::basic_string[abi:ne180100]<0>(v135, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v135, 0, (uint64_t *)&v178);
  v137 = v178;
  if (v178)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = v178;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v138 = v103;
  v178 = 0;
  std::string::basic_string[abi:ne180100]<0>(v133, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v102 + 3))(v102, &v137, 0, v133);
  if (v134 < 0)
    operator delete(v133[0]);
  v105 = v138;
  if (v138)
  {
    v106 = (unint64_t *)&v138->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v178;
  v178 = 0;
  if (v108)
    (*((void (**)(std::__shared_weak_count_vtbl *))v108->~__shared_weak_count + 1))(v108);
  if (v136 < 0)
    operator delete(v135[0]);
  v109 = v185;
  std::string::basic_string[abi:ne180100]<0>(v129, "perm");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&v178);
  v131 = v178;
  if (v178)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = v178;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v132 = v110;
  v178 = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "D_In");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v109 + 3))(v109, &v131, 0, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v112 = v132;
  if (v132)
  {
    v113 = (unint64_t *)&v132->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v178;
  v178 = 0;
  if (v115)
    (*((void (**)(std::__shared_weak_count_vtbl *))v115->~__shared_weak_count + 1))(v115);
  if (v130 < 0)
    operator delete(v129[0]);
  v116 = *a3;
  v125 = v185;
  if (v185)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v185;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = (std::__shared_weak_count_vtbl *)v118;
  }
  else
  {
    v117 = 0;
  }
  v126 = v117;
  v185 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v116 + 56))(v116, &v125);
  v119 = v126;
  if (v126)
  {
    v120 = (unint64_t *)&v126->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v185;
  v185 = 0;
  if (v122)
    (*((void (**)(void **))*v122 + 1))(v122);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v171;
  if (v171)
  {
    v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v171);
    return MEMORY[0x1E0C023A0](v124, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07DEB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;

  v72 = *(_QWORD *)(v70 - 112);
  *(_QWORD *)(v70 - 112) = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = *v69;
  *v69 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::BaseActivation::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char **v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD *v60;
  unsigned __int8 *v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  uint64_t i;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t result;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  __n128 v134;
  __int128 v135;
  __int128 v136;
  void *v137[2];
  uint64_t v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  char **v143;
  __n128 v144;
  uint64_t v145;
  void *v146;
  void *v147;
  char *v148;
  _QWORD v149[3];
  uint64_t v150[3];
  uint64_t v151[3];
  void *v152[3];
  void *__p;
  void *v154;
  _QWORD *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  _BYTE v160[24];
  _BYTE *v161;
  std::__shared_weak_count_vtbl *v162;
  uint64_t v163;
  void (__cdecl **v164)(std::__shared_weak_count *__hidden);
  uint64_t v165[3];

  v165[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v145 = v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v146 = v10;
  *v10 = v9;
  v147 = v10 + 1;
  v148 = (char *)(v10 + 1);
  v162 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v146);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v154 = v12 + 1;
  v155 = v12 + 1;
  v163 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v162, 2, &v144);
  MIL::IRParameter::Make(&v144, &v141);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v141);
  v13 = v141;
  v141 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v15 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v154 = __p;
    operator delete(__p);
  }
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  v143 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v146 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v143, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v146, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v143, 1uLL);
  v18 = v143;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  __p = v20;
  *v20 = v19;
  v154 = v20 + 1;
  v155 = v20 + 1;
  v165[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v162 = v22;
  v22->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  v163 = (uint64_t)&v22->~__shared_weak_count_0;
  v164 = &v22->~__shared_weak_count_0;
  v165[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  MIL::IRParameter::MakeTypeSet((uint64_t)v165, 2, &v139);
  MIL::IRParameter::Make(&v139, &v140);
  v23 = v140;
  v141 = v140;
  if (v140)
  {
    v24 = (_QWORD *)operator new();
    v25 = v140;
    *v24 = &unk_1EA99F888;
    v24[1] = 0;
    v24[2] = 0;
    v24[3] = v25;
  }
  else
  {
    v24 = 0;
  }
  v142 = v24;
  v140 = 0;
  v26 = v18[2];
  v27 = v18[1];
  if (v27 >= v26)
  {
    v29 = (v27 - *v18) >> 4;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v31 = v26 - *v18;
    if (v31 >> 3 > v30)
      v30 = v31 >> 3;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
      v32 = 0xFFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    v149[1] = v18 + 2;
    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v32);
    v35 = (uint64_t *)&v33[16 * v29];
    *v35 = v23;
    v35[1] = (uint64_t)v24;
    v141 = 0;
    v142 = 0;
    v37 = *v18;
    v36 = v18[1];
    if (v36 == *v18)
    {
      v40 = v18[1];
      v38 = &v33[16 * v29];
    }
    else
    {
      v38 = &v33[16 * v29];
      do
      {
        v39 = *((_OWORD *)v36 - 1);
        v36 -= 16;
        *((_OWORD *)v38 - 1) = v39;
        v38 -= 16;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
      }
      while (v36 != v37);
      v40 = *v18;
      v36 = v18[1];
    }
    v28 = (char *)(v35 + 2);
    *v18 = v38;
    v146 = v40;
    v147 = v40;
    v18[1] = (char *)(v35 + 2);
    v148 = v36;
    v41 = v18[2];
    v18[2] = &v33[16 * v34];
    v149[0] = v41;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v146);
  }
  else
  {
    *(_QWORD *)v27 = v23;
    *((_QWORD *)v27 + 1) = v24;
    v28 = v27 + 16;
    v141 = 0;
    v142 = 0;
  }
  v18[1] = v28;
  v42 = v140;
  v140 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v44 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v162)
  {
    v163 = (uint64_t)v162;
    operator delete(v162);
  }
  if (__p)
  {
    v154 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v137 = *(_OWORD *)a2;
  v138 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v46 = v145;
  *(_QWORD *)&v136 = v145;
  if (v145)
  {
    v47 = (_QWORD *)operator new();
    *v47 = &unk_1EA99F8E8;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v46;
  }
  else
  {
    v47 = 0;
  }
  *((_QWORD *)&v136 + 1) = v47;
  v145 = 0;
  *(_QWORD *)&v135 = v143;
  if (v143)
  {
    v48 = (_QWORD *)operator new();
    v49 = v143;
    *v48 = &unk_1EA99F948;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v49;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v135 + 1) = v48;
  v143 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v160, a3);
  v159 = 0;
  MIL::IROperator::Make((__int128 *)v137, &v136, &v135, (uint64_t)v160, (uint64_t)v158, a4);
  v50 = v159;
  if (v159 == v158)
  {
    v51 = 4;
    v50 = v158;
  }
  else
  {
    if (!v159)
      goto LABEL_51;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_51:
  v52 = v161;
  if (v161 == v160)
  {
    v53 = 4;
    v52 = v160;
    goto LABEL_55;
  }
  if (v161)
  {
    v53 = 5;
LABEL_55:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
  if (*((_QWORD *)&v135 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (SHIBYTE(v138) < 0)
    operator delete(v137[0]);
  v162 = 0;
  v60 = (_OWORD *)operator new();
  *v60 = 0u;
  v60[1] = 0u;
  *((_DWORD *)v60 + 8) = 1065353216;
  v162 = (std::__shared_weak_count_vtbl *)v60;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v134);
  MIL::IRParameter::Make(&v134, (uint64_t *)&v146);
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v60, "minimum_compute_type", (uint64_t *)&v146);
  v62 = v146;
  v146 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v134.n128_u64[1];
  if (v134.n128_u64[1])
  {
    v64 = (unint64_t *)(v134.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 32))(*((_QWORD *)v61 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 48))(*((_QWORD *)v61 + 5), 1);
  v66 = *a4;
  v67 = v162;
  v132 = v162;
  if (v162)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v67;
  }
  else
  {
    v68 = 0;
  }
  v133 = v68;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v66 + 184))(v66, &v132);
  v69 = v133;
  if (v133)
  {
    p_shared_owners = (unint64_t *)&v133->__shared_owners_;
    do
      v71 = __ldaxr(p_shared_owners);
    while (__stlxr(v71 - 1, p_shared_owners));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v146, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v146, (uint64_t)v156);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v72 + 200))(v72, v156);
  v73 = v157;
  if (v157 == v156)
  {
    v74 = 4;
    v73 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_88;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_88:
  if (SHIBYTE(v148) < 0)
    operator delete(v146);
  MIL::Validation::TensorDTypeConstraints::Make(&v146);
  v75 = v146;
  std::string::basic_string[abi:ne180100]<0>(v128, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&__p);
  v130 = __p;
  if (__p)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = (std::__shared_weak_count_vtbl *)__p;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v131 = v76;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v75 + 24))(v75, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v78 = v131;
  if (v131)
  {
    v79 = (unint64_t *)&v131->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = __p;
  __p = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  if (v129 < 0)
    operator delete(v128[0]);
  v82 = v146;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v124 = __p;
  if (__p)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)__p;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v125 = v83;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v82 + 24))(v82, &v124, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v85 = v125;
  if (v125)
  {
    v86 = (unint64_t *)&v125->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = *a4;
  v120 = v146;
  if (v146)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = (std::__shared_weak_count_vtbl *)v146;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v121 = v90;
  v146 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v89 + 56))(v89, &v120);
  v92 = v121;
  if (v121)
  {
    v93 = (unint64_t *)&v121->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v146;
  v146 = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v141);
  v96 = v141;
  std::string::basic_string[abi:ne180100]<0>(v116, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v116, 1, v165);
  v118 = v165[0];
  if (v165[0])
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v165[0];
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = (std::__shared_weak_count_vtbl *)v98;
  }
  else
  {
    v97 = 0;
  }
  v119 = v97;
  v165[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v146, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v149, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v150, "int32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int8");
  std::string::basic_string[abi:ne180100]<0>(v152, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v146, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v96 + 24))(v96, &v118, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v152[i + 2]) < 0)
      operator delete(v152[i]);
  }
  v100 = v119;
  if (v119)
  {
    v101 = (unint64_t *)&v119->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v165[0];
  v165[0] = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  if (v117 < 0)
    operator delete(v116[0]);
  v104 = *a4;
  v114 = v141;
  if (v141)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v141;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v115 = v105;
  v141 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v104 + 56))(v104, &v114);
  v107 = v115;
  if (v115)
  {
    v108 = (unint64_t *)&v115->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v141;
  v141 = 0;
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  if (v162)
  {
    v111 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v162);
    MEMORY[0x1E0C023A0](v111, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v143, 0);
  result = v145;
  if (v145)
  {
    v113 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v145);
    return MEMORY[0x1E0C023A0](v113, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07DFCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 128), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::BaseActivationWithAlpha::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _OWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  void *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  void *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  uint64_t i;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t result;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void *v129[2];
  char v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  void *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  void *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  void *v141[2];
  char v142;
  void *v143;
  std::__shared_weak_count *v144;
  void *v145[2];
  char v146;
  void *v147[2];
  char v148;
  void *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  __n128 v153;
  __int128 v154;
  __int128 v155;
  void *v156[2];
  uint64_t v157;
  __n128 v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  char **v162;
  __n128 v163;
  __n128 v164;
  _QWORD *v165;
  void *Scalar;
  uint64_t v167;
  char *v168;
  _QWORD v169[3];
  uint64_t v170[3];
  uint64_t v171[3];
  void *v172[3];
  void *__p;
  void *v174;
  _QWORD *v175;
  _BYTE v176[24];
  _BYTE *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  std::__shared_weak_count_vtbl *v182;
  uint64_t v183;
  void (__cdecl **v184)(std::__shared_weak_count *__hidden);
  uint64_t v185[3];

  v185[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v165 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(8uLL);
  Scalar = v10;
  *(_QWORD *)v10 = v9;
  v167 = (uint64_t)(v10 + 8);
  v168 = v10 + 8;
  v182 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v175 = v12 + 1;
  v174 = v12 + 1;
  v183 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v182, 2, &v164);
  MIL::IRParameter::Make(&v164, &v160);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v160);
  v13 = v160;
  v160 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v15 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v174 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v167 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v165;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v167 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v163);
  MIL::IRParameter::Make(&v163, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v17, "alpha", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v21 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v162 = 0;
  v23 = operator new();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, (void **)v23);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v162, 1uLL);
  v24 = v162;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v175 = v26 + 1;
  v174 = v26 + 1;
  v185[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v182 = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v183 = (uint64_t)&v28->~__shared_weak_count_0;
  v184 = &v28->~__shared_weak_count_0;
  v185[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v182);
  MIL::IRParameter::MakeTypeSet((uint64_t)v185, 2, &v158);
  MIL::IRParameter::Make(&v158, &v159);
  v29 = v159;
  v160 = v159;
  if (v159)
  {
    v30 = (_QWORD *)operator new();
    v31 = v159;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v161 = v30;
  v159 = 0;
  v32 = v24[2];
  v33 = v24[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v24) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v24;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v169[1] = v24 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v24 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v160 = 0;
    v161 = 0;
    v43 = *v24;
    v42 = v24[1];
    if (v42 == *v24)
    {
      v46 = v24[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = *v24;
      v42 = v24[1];
    }
    v34 = (char *)(v41 + 2);
    *v24 = v44;
    Scalar = v46;
    v167 = (uint64_t)v46;
    v24[1] = (char *)(v41 + 2);
    v168 = v42;
    v47 = v24[2];
    v24[2] = &v39[16 * v40];
    v169[0] = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v160 = 0;
    v161 = 0;
  }
  v24[1] = v34;
  v48 = v159;
  v159 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v50 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v182)
  {
    v183 = (uint64_t)v182;
    operator delete(v182);
  }
  if (__p)
  {
    v174 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v156 = *(_OWORD *)a2;
  v157 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = (uint64_t)v165;
  *(_QWORD *)&v155 = v165;
  if (v165)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v155 + 1) = v53;
  v165 = 0;
  *(_QWORD *)&v154 = v162;
  if (v162)
  {
    v54 = (_QWORD *)operator new();
    v55 = v162;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v154 + 1) = v54;
  v162 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v180, a3);
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v156, &v155, &v154, (uint64_t)v180, (uint64_t)v178, a4);
  v56 = v179;
  if (v179 == v178)
  {
    v57 = 4;
    v56 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_58;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_58:
  v58 = v181;
  if (v181 == v180)
  {
    v59 = 4;
    v58 = v180;
    goto LABEL_62;
  }
  if (v181)
  {
    v59 = 5;
LABEL_62:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v157) < 0)
    operator delete(v156[0]);
  v182 = 0;
  v66 = (_OWORD *)operator new();
  *v66 = 0u;
  v66[1] = 0u;
  *((_DWORD *)v66 + 8) = 1065353216;
  v182 = (std::__shared_weak_count_vtbl *)v66;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&Scalar);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v66, "minimum_compute_type", (uint64_t *)&Scalar);
  v68 = Scalar;
  Scalar = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v70 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 48))(*((_QWORD *)v67 + 5), 1);
  v72 = *a4;
  v73 = v182;
  v151 = v182;
  if (v182)
  {
    v74 = (std::__shared_weak_count *)operator new();
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = v73;
  }
  else
  {
    v74 = 0;
  }
  v152 = v74;
  v182 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v72 + 184))(v72, &v151);
  v75 = v152;
  if (v152)
  {
    p_shared_owners = (unint64_t *)&v152->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v176);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v78 + 200))(v78, v176);
  v79 = v177;
  if (v177 == v176)
  {
    v80 = 4;
    v79 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_95;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_95:
  if (SHIBYTE(v168) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v81 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v147, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v147, 0, (uint64_t *)&__p);
  v149 = __p;
  if (__p)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = (std::__shared_weak_count_vtbl *)__p;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v150 = v82;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v145, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v81 + 24))(v81, &v149, v145);
  if (v146 < 0)
    operator delete(v145[0]);
  v84 = v150;
  if (v150)
  {
    v85 = (unint64_t *)&v150->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = __p;
  __p = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  if (v148 < 0)
    operator delete(v147[0]);
  v88 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v141, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v141, 0, (uint64_t *)&__p);
  v143 = __p;
  if (__p)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = (std::__shared_weak_count_vtbl *)__p;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v144 = v89;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v88 + 24))(v88, &v143, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v91 = v144;
  if (v144)
  {
    v92 = (unint64_t *)&v144->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = __p;
  __p = 0;
  if (v94)
    (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
  if (v142 < 0)
    operator delete(v141[0]);
  v95 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v137 = __p;
  if (__p)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = (std::__shared_weak_count_vtbl *)__p;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v97;
  }
  else
  {
    v96 = 0;
  }
  v138 = v96;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v135, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v95 + 24))(v95, &v137, v135);
  if (v136 < 0)
    operator delete(v135[0]);
  v98 = v138;
  if (v138)
  {
    v99 = (unint64_t *)&v138->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = __p;
  __p = 0;
  if (v101)
    (*(void (**)(void *))(*(_QWORD *)v101 + 8))(v101);
  v102 = *a4;
  v133 = Scalar;
  if (Scalar)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = (std::__shared_weak_count_vtbl *)Scalar;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v134 = v103;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v102 + 56))(v102, &v133);
  v105 = v134;
  if (v134)
  {
    v106 = (unint64_t *)&v134->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = Scalar;
  Scalar = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v160);
  v109 = v160;
  std::string::basic_string[abi:ne180100]<0>(v129, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v129, 1, v185);
  v131 = v185[0];
  if (v185[0])
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = v185[0];
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = (std::__shared_weak_count_vtbl *)v111;
  }
  else
  {
    v110 = 0;
  }
  v132 = v110;
  v185[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v169, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v170, "int32");
  std::string::basic_string[abi:ne180100]<0>(v171, "int8");
  std::string::basic_string[abi:ne180100]<0>(v172, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v109 + 24))(v109, &v131, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v172[i + 2]) < 0)
      operator delete(v172[i]);
  }
  v113 = v132;
  if (v132)
  {
    v114 = (unint64_t *)&v132->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v185[0];
  v185[0] = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  if (v130 < 0)
    operator delete(v129[0]);
  v117 = *a4;
  v127 = v160;
  if (v160)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v160;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = (std::__shared_weak_count_vtbl *)v119;
  }
  else
  {
    v118 = 0;
  }
  v128 = v118;
  v160 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v117 + 56))(v117, &v127);
  v120 = v128;
  if (v128)
  {
    v121 = (unint64_t *)&v128->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v160;
  v160 = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  if (v182)
  {
    v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v182);
    MEMORY[0x1E0C023A0](v124, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v165;
  if (v165)
  {
    v126 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    return MEMORY[0x1E0C023A0](v126, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07E0FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;

  if (a53)
    (*(void (**)(uint64_t))(*(_QWORD *)a53 + 8))(a53);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v61 - 128), 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::BaseActivationWithAlphaBeta::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  char *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char **v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _OWORD *v72;
  unsigned __int8 *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  void *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  uint64_t i;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t result;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  void *v148[2];
  char v149;
  void *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154[2];
  char v155;
  void *v156;
  std::__shared_weak_count *v157;
  void *v158[2];
  char v159;
  void *v160[2];
  char v161;
  void *v162;
  std::__shared_weak_count *v163;
  void *v164[2];
  char v165;
  void *v166[2];
  char v167;
  void *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  __n128 v172;
  __int128 v173;
  __int128 v174;
  void *v175[2];
  uint64_t v176;
  __n128 v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  char **v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  _QWORD *v185;
  void *Scalar;
  uint64_t v187;
  char *v188;
  _QWORD v189[3];
  uint64_t v190[3];
  uint64_t v191[3];
  void *v192[3];
  void *__p;
  void *v194;
  _QWORD *v195;
  _BYTE v196[24];
  _BYTE *v197;
  _BYTE v198[24];
  _BYTE *v199;
  _BYTE v200[24];
  _BYTE *v201;
  std::__shared_weak_count_vtbl *v202;
  uint64_t v203;
  void (__cdecl **v204)(std::__shared_weak_count *__hidden);
  uint64_t v205[3];

  v205[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v185 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(8uLL);
  Scalar = v10;
  *(_QWORD *)v10 = v9;
  v187 = (uint64_t)(v10 + 8);
  v188 = v10 + 8;
  v202 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v195 = v12 + 1;
  v194 = v12 + 1;
  v203 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v202, 2, &v184);
  MIL::IRParameter::Make(&v184, &v179);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v179);
  v13 = v179;
  v179 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v194 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v187 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v187 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v17, "alpha", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v21 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v185;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v187 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v182);
  MIL::IRParameter::Make(&v182, (uint64_t *)&__p);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v23, "beta", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v182.n128_u64[1];
  if (v182.n128_u64[1])
  {
    v27 = (unint64_t *)(v182.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v181 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v181, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v181, 1uLL);
  v30 = v181;
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  __p = v32;
  *v32 = v31;
  v195 = v32 + 1;
  v194 = v32 + 1;
  v205[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v202 = v34;
  v34->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v203 = (uint64_t)&v34->~__shared_weak_count_0;
  v204 = &v34->~__shared_weak_count_0;
  v205[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v202);
  MIL::IRParameter::MakeTypeSet((uint64_t)v205, 2, &v177);
  MIL::IRParameter::Make(&v177, &v178);
  v35 = v178;
  v179 = v178;
  if (v178)
  {
    v36 = (_QWORD *)operator new();
    v37 = v178;
    *v36 = &unk_1EA99F888;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v37;
  }
  else
  {
    v36 = 0;
  }
  v180 = v36;
  v178 = 0;
  v38 = v30[2];
  v39 = v30[1];
  if (v39 >= v38)
  {
    v41 = (v39 - *v30) >> 4;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v43 = v38 - *v30;
    if (v43 >> 3 > v42)
      v42 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    v189[1] = v30 + 2;
    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v30 + 2), v44);
    v47 = (uint64_t *)&v45[16 * v41];
    *v47 = v35;
    v47[1] = (uint64_t)v36;
    v179 = 0;
    v180 = 0;
    v49 = *v30;
    v48 = v30[1];
    if (v48 == *v30)
    {
      v52 = v30[1];
      v50 = &v45[16 * v41];
    }
    else
    {
      v50 = &v45[16 * v41];
      do
      {
        v51 = *((_OWORD *)v48 - 1);
        v48 -= 16;
        *((_OWORD *)v50 - 1) = v51;
        v50 -= 16;
        *(_QWORD *)v48 = 0;
        *((_QWORD *)v48 + 1) = 0;
      }
      while (v48 != v49);
      v52 = *v30;
      v48 = v30[1];
    }
    v40 = (char *)(v47 + 2);
    *v30 = v50;
    Scalar = v52;
    v187 = (uint64_t)v52;
    v30[1] = (char *)(v47 + 2);
    v188 = v48;
    v53 = v30[2];
    v30[2] = &v45[16 * v46];
    v189[0] = v53;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v39 = v35;
    *((_QWORD *)v39 + 1) = v36;
    v40 = v39 + 16;
    v179 = 0;
    v180 = 0;
  }
  v30[1] = v40;
  v54 = v178;
  v178 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v56 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v202)
  {
    v203 = (uint64_t)v202;
    operator delete(v202);
  }
  if (__p)
  {
    v194 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v175 = *(_OWORD *)a2;
  v176 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v58 = (uint64_t)v185;
  *(_QWORD *)&v174 = v185;
  if (v185)
  {
    v59 = (_QWORD *)operator new();
    *v59 = &unk_1EA99F8E8;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v58;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v174 + 1) = v59;
  v185 = 0;
  *(_QWORD *)&v173 = v181;
  if (v181)
  {
    v60 = (_QWORD *)operator new();
    v61 = v181;
    *v60 = &unk_1EA99F948;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v173 + 1) = v60;
  v181 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v200, a3);
  v199 = 0;
  MIL::IROperator::Make((__int128 *)v175, &v174, &v173, (uint64_t)v200, (uint64_t)v198, a4);
  v62 = v199;
  if (v199 == v198)
  {
    v63 = 4;
    v62 = v198;
  }
  else
  {
    if (!v199)
      goto LABEL_65;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_65:
  v64 = v201;
  if (v201 == v200)
  {
    v65 = 4;
    v64 = v200;
    goto LABEL_69;
  }
  if (v201)
  {
    v65 = 5;
LABEL_69:
    (*(void (**)(void))(*v64 + 8 * v65))();
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (*((_QWORD *)&v173 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
  if (*((_QWORD *)&v174 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (SHIBYTE(v176) < 0)
    operator delete(v175[0]);
  v202 = 0;
  v72 = (_OWORD *)operator new();
  *v72 = 0u;
  v72[1] = 0u;
  *((_DWORD *)v72 + 8) = 1065353216;
  v202 = (std::__shared_weak_count_vtbl *)v72;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v172);
  MIL::IRParameter::Make(&v172, (uint64_t *)&Scalar);
  v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v72, "minimum_compute_type", (uint64_t *)&Scalar);
  v74 = Scalar;
  Scalar = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v76 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 32))(*((_QWORD *)v73 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 48))(*((_QWORD *)v73 + 5), 1);
  v78 = *a4;
  v79 = v202;
  v170 = v202;
  if (v202)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v79;
  }
  else
  {
    v80 = 0;
  }
  v171 = v80;
  v202 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v78 + 184))(v78, &v170);
  v81 = v171;
  if (v171)
  {
    p_shared_owners = (unint64_t *)&v171->__shared_owners_;
    do
      v83 = __ldaxr(p_shared_owners);
    while (__stlxr(v83 - 1, p_shared_owners));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v196);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v84 + 200))(v84, v196);
  v85 = v197;
  if (v197 == v196)
  {
    v86 = 4;
    v85 = v196;
  }
  else
  {
    if (!v197)
      goto LABEL_102;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_102:
  if (SHIBYTE(v188) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v87 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v166, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v166, 0, (uint64_t *)&__p);
  v168 = __p;
  if (__p)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = (std::__shared_weak_count_vtbl *)__p;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v169 = v88;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v164, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v87 + 24))(v87, &v168, v164);
  if (v165 < 0)
    operator delete(v164[0]);
  v90 = v169;
  if (v169)
  {
    v91 = (unint64_t *)&v169->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = __p;
  __p = 0;
  if (v93)
    (*(void (**)(void *))(*(_QWORD *)v93 + 8))(v93);
  if (v167 < 0)
    operator delete(v166[0]);
  v94 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v160, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v160, 0, (uint64_t *)&__p);
  v162 = __p;
  if (__p)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)__p;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v163 = v95;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v158, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v94 + 24))(v94, &v162, v158);
  if (v159 < 0)
    operator delete(v158[0]);
  v97 = v163;
  if (v163)
  {
    v98 = (unint64_t *)&v163->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = __p;
  __p = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  if (v161 < 0)
    operator delete(v160[0]);
  v101 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v154, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v154, 0, (uint64_t *)&__p);
  v156 = __p;
  if (__p)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)__p;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v157 = v102;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v101 + 24))(v101, &v156, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v104 = v157;
  if (v157)
  {
    v105 = (unint64_t *)&v157->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = __p;
  __p = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  if (v155 < 0)
    operator delete(v154[0]);
  v108 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v150 = __p;
  if (__p)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)__p;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v151 = v109;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v148, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v108 + 24))(v108, &v150, v148);
  if (v149 < 0)
    operator delete(v148[0]);
  v111 = v151;
  if (v151)
  {
    v112 = (unint64_t *)&v151->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = __p;
  __p = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  v115 = *a4;
  v146 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = (std::__shared_weak_count_vtbl *)Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v147 = v116;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v115 + 56))(v115, &v146);
  v118 = v147;
  if (v147)
  {
    v119 = (unint64_t *)&v147->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*(void (**)(void *))(*(_QWORD *)v121 + 8))(v121);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v179);
  v122 = v179;
  std::string::basic_string[abi:ne180100]<0>(v142, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v142, 1, v205);
  v144 = v205[0];
  if (v205[0])
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v205[0];
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  }
  else
  {
    v123 = 0;
  }
  v145 = v123;
  v205[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v189, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int32");
  std::string::basic_string[abi:ne180100]<0>(v191, "int8");
  std::string::basic_string[abi:ne180100]<0>(v192, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v122 + 24))(v122, &v144, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v192[i + 2]) < 0)
      operator delete(v192[i]);
  }
  v126 = v145;
  if (v145)
  {
    v127 = (unint64_t *)&v145->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v205[0];
  v205[0] = 0;
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  if (v143 < 0)
    operator delete(v142[0]);
  v130 = *a4;
  v140 = v179;
  if (v179)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = v179;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = (std::__shared_weak_count_vtbl *)v132;
  }
  else
  {
    v131 = 0;
  }
  v141 = v131;
  v179 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v130 + 56))(v130, &v140);
  v133 = v141;
  if (v141)
  {
    v134 = (unint64_t *)&v141->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v179;
  v179 = 0;
  if (v136)
    (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
  if (v202)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v202);
    MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v181, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v139, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07E2520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  uint64_t a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;

  if (a61)
    (*(void (**)(uint64_t))(*(_QWORD *)a61 + 8))(a61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 128), 0);
  v73 = *v70;
  *v70 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ClampedReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E2B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::LinearActivation::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E2C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ScaledTanh::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E2D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::SigmoidHard::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E2E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ELU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlpha::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E2F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::LeakyReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlpha::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E3014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ThresholdedReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlpha::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E3114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ERF::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E3214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::GeLU::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  std::__shared_weak_count_vtbl *v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _OWORD *v64;
  unsigned __int8 *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t j;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void *v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  void *v144[2];
  char v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  __n128 v150;
  __int128 v151;
  __int128 v152;
  void *v153[2];
  uint64_t v154;
  __n128 v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  char **v159;
  __n128 v160;
  __n128 v161;
  _QWORD *v162;
  void *__p;
  void *v164;
  char *v165;
  _QWORD v166[3];
  _QWORD v167[3];
  uint64_t v168[3];
  _QWORD v169[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v171;
  void (__cdecl **v172)(std::__shared_weak_count *__hidden);
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _BYTE v177[24];
  _BYTE *v178;
  std::__shared_weak_count_vtbl *v179;
  uint64_t v180;
  void (__cdecl **v181)(std::__shared_weak_count *__hidden);
  uint64_t v182[3];

  v182[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v162 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v164 = v8 + 1;
  v165 = (char *)(v8 + 1);
  v179 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v171 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v172 = &v10->~__shared_weak_count_0;
  v180 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v179, 2, &v161);
  MIL::IRParameter::Make(&v161, &v157);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v157);
  v11 = v157;
  v157 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v13 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (Scalar)
  {
    v171 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v164 = __p;
    operator delete(__p);
  }
  v15 = v162;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v160);
  MIL::IRParameter::Make(&v160, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v15, "mode", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v160.n128_u64[1];
  if (v160.n128_u64[1])
  {
    v19 = (unint64_t *)(v160.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v159 = 0;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v159, (void **)v21);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v159, 1uLL);
  v22 = v159;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v24;
  v24->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v23;
  v171 = (std::__shared_weak_count_vtbl *)&v24->~__shared_weak_count_0;
  v172 = &v24->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v179 = v26;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v180 = (uint64_t)&v26->~__shared_weak_count_0;
  v181 = &v26->~__shared_weak_count_0;
  v182[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v179);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 2, &v155);
  MIL::IRParameter::Make(&v155, &v156);
  v27 = v156;
  v157 = v156;
  if (v156)
  {
    v28 = (_QWORD *)operator new();
    v29 = v156;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v158 = v28;
  v156 = 0;
  v30 = v22[2];
  v31 = v22[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v22) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v22;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v166[1] = v22 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v22 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v157 = 0;
    v158 = 0;
    v41 = *v22;
    v40 = v22[1];
    if (v40 == *v22)
    {
      v44 = v22[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = *v22;
      v40 = v22[1];
    }
    v32 = (char *)(v39 + 2);
    *v22 = v42;
    __p = v44;
    v164 = v44;
    v22[1] = (char *)(v39 + 2);
    v165 = v40;
    v45 = v22[2];
    v22[2] = &v37[16 * v38];
    v166[0] = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v157 = 0;
    v158 = 0;
  }
  v22[1] = v32;
  v46 = v156;
  v156 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v155.n128_u64[1];
  if (v155.n128_u64[1])
  {
    v48 = (unint64_t *)(v155.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v179)
  {
    v180 = (uint64_t)v179;
    operator delete(v179);
  }
  if (Scalar)
  {
    v171 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v153 = *(_OWORD *)a2;
  v154 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = (uint64_t)v162;
  *(_QWORD *)&v152 = v162;
  if (v162)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v152 + 1) = v51;
  v162 = 0;
  *(_QWORD *)&v151 = v159;
  if (v159)
  {
    v52 = (_QWORD *)operator new();
    v53 = v159;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v151 + 1) = v52;
  v159 = 0;
  v178 = 0;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v153, &v152, &v151, (uint64_t)v177, (uint64_t)v175, a3);
  v54 = v176;
  if (v176 == v175)
  {
    v55 = 4;
    v54 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_58;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_58:
  v56 = v178;
  if (v178 == v177)
  {
    v57 = 4;
    v56 = v177;
    goto LABEL_62;
  }
  if (v178)
  {
    v57 = 5;
LABEL_62:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v154) < 0)
    operator delete(v153[0]);
  v179 = 0;
  v64 = (_OWORD *)operator new();
  *v64 = 0u;
  v64[1] = 0u;
  *((_DWORD *)v64 + 8) = 1065353216;
  v179 = (std::__shared_weak_count_vtbl *)v64;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v150);
  MIL::IRParameter::Make(&v150, (uint64_t *)&__p);
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v64, "minimum_compute_type", (uint64_t *)&__p);
  v66 = __p;
  __p = 0;
  if (v66)
    (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v150.n128_u64[1];
  if (v150.n128_u64[1])
  {
    v68 = (unint64_t *)(v150.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v70 = *a3;
  v71 = v179;
  v148 = v179;
  if (v179)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v71;
  }
  else
  {
    v72 = 0;
  }
  v149 = v72;
  v179 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v70 + 184))(v70, &v148);
  v73 = v149;
  if (v149)
  {
    p_shared_owners = (unint64_t *)&v149->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v76 + 200))(v76, v173);
  v77 = v174;
  if (v174 == v173)
  {
    v78 = 4;
    v77 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_95;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_95:
  if (SHIBYTE(v165) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v144, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v144, 0, (uint64_t *)&Scalar);
  v146 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v147 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v142, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v79 + 24))(v79, &v146, v142);
  if (v143 < 0)
    operator delete(v142[0]);
  v82 = v147;
  if (v147)
  {
    v83 = (unint64_t *)&v147->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  if (v145 < 0)
    operator delete(v144[0]);
  v86 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v140 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v141 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v86 + 24))(v86, &v140, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v89 = v141;
  if (v141)
  {
    v90 = (unint64_t *)&v141->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  v93 = *a3;
  v136 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v137 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v136);
  v96 = v137;
  if (v137)
  {
    v97 = (unint64_t *)&v137->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v157);
  v100 = v157;
  std::string::basic_string[abi:ne180100]<0>(v132, "mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v132, 0, v182);
  v134 = v182[0];
  if (v182[0])
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v182[0];
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v135 = v101;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "EXACT");
  std::string::basic_string[abi:ne180100]<0>(v166, "SIGMOID_APPROXIMATION");
  std::string::basic_string[abi:ne180100]<0>(v167, "TANH_APPROXIMATION");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 3);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v134, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v104 = v135;
  if (v135)
  {
    v105 = (unint64_t *)&v135->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v182[0];
  v182[0] = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  if (v133 < 0)
    operator delete(v132[0]);
  v108 = v157;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v166, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v167, "int32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int8");
  std::string::basic_string[abi:ne180100]<0>(v169, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v108 + 24))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v169[j + 2]) < 0)
      operator delete((void *)v169[j]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v157;
  if (v157)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v157;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = (std::__shared_weak_count_vtbl *)v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v157 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v157;
  v157 = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  if (v179)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v179);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v159, 0);
  result = (uint64_t)v162;
  if (v162)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v162);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07E4198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;

  if (a51)
    (*(void (**)(uint64_t))(*(_QWORD *)a51 + 8))(a51);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 112), 0);
  v61 = *v58;
  *v58 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E474C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReLU6::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E484C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Sigmoid::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E494C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::SiLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E4A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Softplus::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E4B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Softsign::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07E4C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::PReLU::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char **v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _OWORD *v76;
  unsigned __int8 *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void *v111;
  void *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  uint64_t i;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154[2];
  char v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  void *v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  void *v162[2];
  char v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  void *v166[2];
  char v167;
  void *v168[2];
  char v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  __n128 v174;
  __int128 v175;
  __int128 v176;
  void *v177[2];
  uint64_t v178;
  __n128 v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  char **v183;
  __n128 v184;
  __n128 v185;
  _QWORD *v186;
  void *__p;
  void *v188;
  char *v189;
  _QWORD v190[3];
  uint64_t v191[3];
  uint64_t v192[3];
  _QWORD v193[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[3];
  _QWORD *v202;
  std::__shared_weak_count_vtbl *v203;
  uint64_t v204;
  const void *(__cdecl **v205)(const std::__shared_weak_count *__hidden, const std::type_info *);
  uint64_t v206[3];

  v206[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v186 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(0x18uLL);
  v188 = v10 + 3;
  v189 = (char *)(v10 + 3);
  *v10 = v7;
  v10[1] = v8;
  v10[2] = v9;
  __p = v10;
  v203 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v196 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  Scalar = v14;
  v204 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v203, 2, &v185);
  MIL::IRParameter::Make(&v185, &v181);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v181);
  v15 = v181;
  v181 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v17 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v188 = __p;
    operator delete(__p);
  }
  v19 = v186;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = operator new(8uLL);
  __p = v21;
  *v21 = v20;
  v188 = v21 + 1;
  v189 = (char *)(v21 + 1);
  v203 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v196 = &v23->~__shared_weak_count_0;
  v204 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v203, 2, &v184);
  MIL::IRParameter::Make(&v184, &v181);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "alpha", &v181);
  v25 = v181;
  v181 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v27 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v188 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v183 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v183, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v183, 1uLL);
  v30 = v183;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v34->__get_deleter;
  v196 = &v34->__get_deleter;
  v34->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v31;
  v34->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  v34->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v33;
  Scalar = v34;
  v206[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v204 = (uint64_t)&v38->__get_deleter;
  v205 = &v38->__get_deleter;
  v38->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v35;
  v38->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  v38->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v37;
  v203 = v38;
  v206[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v203);
  MIL::IRParameter::MakeTypeSet((uint64_t)v206, 2, &v179);
  MIL::IRParameter::Make(&v179, &v180);
  v39 = v180;
  v181 = v180;
  if (v180)
  {
    v40 = (_QWORD *)operator new();
    v41 = v180;
    *v40 = &unk_1EA99F888;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  v182 = v40;
  v180 = 0;
  v42 = v30[2];
  v43 = v30[1];
  if (v43 >= v42)
  {
    v45 = (v43 - *v30) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v47 = v42 - *v30;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v190[1] = v30 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v30 + 2), v48);
    v51 = (uint64_t *)&v49[16 * v45];
    *v51 = v39;
    v51[1] = (uint64_t)v40;
    v181 = 0;
    v182 = 0;
    v53 = *v30;
    v52 = v30[1];
    if (v52 == *v30)
    {
      v56 = v30[1];
      v54 = &v49[16 * v45];
    }
    else
    {
      v54 = &v49[16 * v45];
      do
      {
        v55 = *((_OWORD *)v52 - 1);
        v52 -= 16;
        *((_OWORD *)v54 - 1) = v55;
        v54 -= 16;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
      }
      while (v52 != v53);
      v56 = *v30;
      v52 = v30[1];
    }
    v44 = (char *)(v51 + 2);
    *v30 = v54;
    __p = v56;
    v188 = v56;
    v30[1] = (char *)(v51 + 2);
    v189 = v52;
    v57 = v30[2];
    v30[2] = &v49[16 * v50];
    v190[0] = v57;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v40;
    v44 = v43 + 16;
    v181 = 0;
    v182 = 0;
  }
  v30[1] = v44;
  v58 = v180;
  v180 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v179.n128_u64[1];
  if (v179.n128_u64[1])
  {
    v60 = (unint64_t *)(v179.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v203)
  {
    v204 = (uint64_t)v203;
    operator delete(v203);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v177 = *(_OWORD *)a2;
  v178 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v62 = (uint64_t)v186;
  *(_QWORD *)&v176 = v186;
  if (v186)
  {
    v63 = (_QWORD *)operator new();
    *v63 = &unk_1EA99F8E8;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v176 + 1) = v63;
  v186 = 0;
  *(_QWORD *)&v175 = v183;
  if (v183)
  {
    v64 = (_QWORD *)operator new();
    v65 = v183;
    *v64 = &unk_1EA99F948;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v175 + 1) = v64;
  v183 = 0;
  v201[0] = &unk_1EA99FAC8;
  v201[1] = MIL::Operators::Common::ios16::CustomValidators::ValidatePReLU;
  v202 = v201;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v177, &v176, &v175, (uint64_t)v201, (uint64_t)v199, a3);
  v66 = v200;
  if (v200 == v199)
  {
    v67 = 4;
    v66 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_62;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_62:
  v68 = v202;
  if (v202 == v201)
  {
    v69 = 4;
    v68 = v201;
    goto LABEL_66;
  }
  if (v202)
  {
    v69 = 5;
LABEL_66:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v178) < 0)
    operator delete(v177[0]);
  v203 = 0;
  v76 = (_OWORD *)operator new();
  *v76 = 0u;
  v76[1] = 0u;
  *((_DWORD *)v76 + 8) = 1065353216;
  v203 = (std::__shared_weak_count_vtbl *)v76;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v174);
  MIL::IRParameter::Make(&v174, (uint64_t *)&__p);
  v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v76, "minimum_compute_type", (uint64_t *)&__p);
  v78 = __p;
  __p = 0;
  if (v78)
    (*(void (**)(void *))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v80 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 32))(*((_QWORD *)v77 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 48))(*((_QWORD *)v77 + 5), 1);
  v82 = *a3;
  v83 = v203;
  v172 = v203;
  if (v203)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v83;
  }
  else
  {
    v84 = 0;
  }
  v173 = v84;
  v203 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v82 + 184))(v82, &v172);
  v85 = v173;
  if (v173)
  {
    p_shared_owners = (unint64_t *)&v173->__shared_owners_;
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v88 + 200))(v88, v197);
  v89 = v198;
  if (v198 == v197)
  {
    v90 = 4;
    v89 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_99;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_99:
  if (SHIBYTE(v189) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v91 = __p;
  std::string::basic_string[abi:ne180100]<0>(v168, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v168, 0, (uint64_t *)&Scalar);
  v170 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v171 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v166, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v91 + 24))(v91, &v170, v166);
  if (v167 < 0)
    operator delete(v166[0]);
  v94 = v171;
  if (v171)
  {
    v95 = (unint64_t *)&v171->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v169 < 0)
    operator delete(v168[0]);
  v98 = __p;
  std::string::basic_string[abi:ne180100]<0>(v162, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v162, 0, (uint64_t *)&Scalar);
  v164 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v165 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v98 + 24))(v98, &v164, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v101 = v165;
  if (v165)
  {
    v102 = (unint64_t *)&v165->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v163 < 0)
    operator delete(v162[0]);
  v105 = *a3;
  v158 = __p;
  if (__p)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = (std::__shared_weak_count_vtbl *)__p;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v159 = v106;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v105 + 56))(v105, &v158);
  v108 = v159;
  if (v159)
  {
    v109 = (unint64_t *)&v159->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = __p;
  __p = 0;
  if (v111)
    (*(void (**)(void *))(*(_QWORD *)v111 + 8))(v111);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v112 = __p;
  std::string::basic_string[abi:ne180100]<0>(v154, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v154, 0, (uint64_t *)&Scalar);
  v156 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v157 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v112 + 24))(v112, &v156, 0, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v115 = v157;
  if (v157)
  {
    v116 = (unint64_t *)&v157->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(std::__shared_weak_count_vtbl *))v118->~__shared_weak_count + 1))(v118);
  if (v155 < 0)
    operator delete(v154[0]);
  v119 = *a3;
  v150 = __p;
  if (__p)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)__p;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v151 = v120;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v119 + 56))(v119, &v150);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = __p;
  __p = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v181);
  v126 = v181;
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v146, 1, v206);
  v148 = v206[0];
  if (v206[0])
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v206[0];
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  }
  else
  {
    v127 = 0;
  }
  v149 = v127;
  v206[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v190, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v191, "int32");
  std::string::basic_string[abi:ne180100]<0>(v192, "int8");
  std::string::basic_string[abi:ne180100]<0>(v193, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v126 + 24))(v126, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v193[i + 2]) < 0)
      operator delete((void *)v193[i]);
  }
  v130 = v149;
  if (v149)
  {
    v131 = (unint64_t *)&v149->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v206[0];
  v206[0] = 0;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  if (v147 < 0)
    operator delete(v146[0]);
  v134 = *a3;
  v144 = v181;
  if (v181)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = v181;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = (std::__shared_weak_count_vtbl *)v136;
  }
  else
  {
    v135 = 0;
  }
  v145 = v135;
  v181 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v134 + 56))(v134, &v144);
  v137 = v145;
  if (v145)
  {
    v138 = (unint64_t *)&v145->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v181;
  v181 = 0;
  if (v140)
    (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
  if (v203)
  {
    v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v203);
    MEMORY[0x1E0C023A0](v141, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v183, 0);
  result = (uint64_t)v186;
  if (v186)
  {
    v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v186);
    return MEMORY[0x1E0C023A0](v143, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07E5D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v69;

  if (a59)
    (*(void (**)(uint64_t))(*(_QWORD *)a59 + 8))(a59);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v67 - 112), 0);
  v69 = *v66;
  *v66 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a66, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Softmax::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _OWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  void *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  void *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  uint64_t i;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t result;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  void *v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  void *v144[2];
  char v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  void *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  void *v154[2];
  char v155;
  void *v156[2];
  char v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  __n128 v162;
  __int128 v163;
  __int128 v164;
  void *v165[2];
  uint64_t v166;
  __n128 v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  char **v171;
  __n128 v172;
  __n128 v173;
  _QWORD *v174;
  void *__p;
  void *v176;
  char *v177;
  _QWORD v178[3];
  uint64_t v179[3];
  uint64_t v180[3];
  _QWORD v181[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _BYTE v187[24];
  _BYTE *v188;
  _BYTE v189[24];
  _BYTE *v190;
  std::__shared_weak_count_vtbl *v191;
  uint64_t v192;
  void (__cdecl **v193)(std::__shared_weak_count *__hidden);
  uint64_t v194[3];

  v194[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v174 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = operator new(0x10uLL);
  v176 = v9 + 2;
  v177 = (char *)(v9 + 2);
  *v9 = v7;
  v9[1] = v8;
  __p = v9;
  v191 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v12->__on_zero_shared;
  v184 = &v12->__on_zero_shared;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  Scalar = v12;
  v192 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v191, 2, &v173);
  MIL::IRParameter::Make(&v173, &v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v173.n128_u64[1];
  if (v173.n128_u64[1])
  {
    v15 = (unint64_t *)(v173.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v176 = __p;
    operator delete(__p);
  }
  v17 = v174;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v172);
  MIL::IRParameter::Make(&v172, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "axis", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v21 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v171 = 0;
  v23 = operator new();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v171, (void **)v23);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v171, 1uLL);
  v24 = v171;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v26;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v26->~__shared_weak_count_0;
  v184 = &v26->~__shared_weak_count_0;
  v194[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v191 = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v192 = (uint64_t)&v28->~__shared_weak_count_0;
  v193 = &v28->~__shared_weak_count_0;
  v194[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v191);
  MIL::IRParameter::MakeTypeSet((uint64_t)v194, 2, &v167);
  MIL::IRParameter::Make(&v167, &v168);
  v29 = v168;
  v169 = v168;
  if (v168)
  {
    v30 = (_QWORD *)operator new();
    v31 = v168;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v170 = v30;
  v168 = 0;
  v32 = v24[2];
  v33 = v24[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v24) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v24;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v178[1] = v24 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v24 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v169 = 0;
    v170 = 0;
    v43 = *v24;
    v42 = v24[1];
    if (v42 == *v24)
    {
      v46 = v24[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = *v24;
      v42 = v24[1];
    }
    v34 = (char *)(v41 + 2);
    *v24 = v44;
    __p = v46;
    v176 = v46;
    v24[1] = (char *)(v41 + 2);
    v177 = v42;
    v47 = v24[2];
    v24[2] = &v39[16 * v40];
    v178[0] = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v169 = 0;
    v170 = 0;
  }
  v24[1] = v34;
  v48 = v168;
  v168 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v50 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v191)
  {
    v192 = (uint64_t)v191;
    operator delete(v191);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v165 = *(_OWORD *)a2;
  v166 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = (uint64_t)v174;
  *(_QWORD *)&v164 = v174;
  if (v174)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v164 + 1) = v53;
  v174 = 0;
  *(_QWORD *)&v163 = v171;
  if (v171)
  {
    v54 = (_QWORD *)operator new();
    v55 = v171;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v163 + 1) = v54;
  v171 = 0;
  v190 = 0;
  v188 = 0;
  MIL::IROperator::Make((__int128 *)v165, &v164, &v163, (uint64_t)v189, (uint64_t)v187, a3);
  v56 = v188;
  if (v188 == v187)
  {
    v57 = 4;
    v56 = v187;
  }
  else
  {
    if (!v188)
      goto LABEL_58;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_58:
  v58 = v190;
  if (v190 == v189)
  {
    v59 = 4;
    v58 = v189;
    goto LABEL_62;
  }
  if (v190)
  {
    v59 = 5;
LABEL_62:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v166) < 0)
    operator delete(v165[0]);
  v191 = 0;
  v66 = (_OWORD *)operator new();
  *v66 = 0u;
  v66[1] = 0u;
  *((_DWORD *)v66 + 8) = 1065353216;
  v191 = (std::__shared_weak_count_vtbl *)v66;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v162);
  MIL::IRParameter::Make(&v162, (uint64_t *)&__p);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v66, "minimum_compute_type", (uint64_t *)&__p);
  v68 = __p;
  __p = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v162.n128_u64[1];
  if (v162.n128_u64[1])
  {
    v70 = (unint64_t *)(v162.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 48))(*((_QWORD *)v67 + 5), 1);
  v72 = *a3;
  v73 = v191;
  v160 = v191;
  if (v191)
  {
    v74 = (std::__shared_weak_count *)operator new();
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = v73;
  }
  else
  {
    v74 = 0;
  }
  v161 = v74;
  v191 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v72 + 184))(v72, &v160);
  v75 = v161;
  if (v161)
  {
    p_shared_owners = (unint64_t *)&v161->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v185);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v78 + 200))(v78, v185);
  v79 = v186;
  if (v186 == v185)
  {
    v80 = 4;
    v79 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_95;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_95:
  if (SHIBYTE(v177) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v81 = __p;
  std::string::basic_string[abi:ne180100]<0>(v156, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v156, 0, (uint64_t *)&Scalar);
  v158 = Scalar;
  if (Scalar)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = Scalar;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v159 = v82;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v154, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v81 + 24))(v81, &v158, v154);
  if (v155 < 0)
    operator delete(v154[0]);
  v84 = v159;
  if (v159)
  {
    v85 = (unint64_t *)&v159->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = Scalar;
  Scalar = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  if (v157 < 0)
    operator delete(v156[0]);
  v88 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v152 = Scalar;
  if (Scalar)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = Scalar;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v153 = v89;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v88 + 24))(v88, &v152, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v91 = v153;
  if (v153)
  {
    v92 = (unint64_t *)&v153->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = Scalar;
  Scalar = 0;
  if (v94)
    (*((void (**)(std::__shared_weak_count_vtbl *))v94->~__shared_weak_count + 1))(v94);
  v95 = *a3;
  v148 = __p;
  if (__p)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = (std::__shared_weak_count_vtbl *)__p;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v97;
  }
  else
  {
    v96 = 0;
  }
  v149 = v96;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v95 + 56))(v95, &v148);
  v98 = v149;
  if (v149)
  {
    v99 = (unint64_t *)&v149->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = __p;
  __p = 0;
  if (v101)
    (*(void (**)(void *))(*(_QWORD *)v101 + 8))(v101);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v102 = __p;
  std::string::basic_string[abi:ne180100]<0>(v144, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v144, 0, (uint64_t *)&Scalar);
  v146 = Scalar;
  if (Scalar)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = Scalar;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v147 = v103;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v142, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v102 + 24))(v102, &v146, 0, v142);
  if (v143 < 0)
    operator delete(v142[0]);
  v105 = v147;
  if (v147)
  {
    v106 = (unint64_t *)&v147->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = Scalar;
  Scalar = 0;
  if (v108)
    (*((void (**)(std::__shared_weak_count_vtbl *))v108->~__shared_weak_count + 1))(v108);
  if (v145 < 0)
    operator delete(v144[0]);
  v109 = *a3;
  v140 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v141 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v140);
  v112 = v141;
  if (v141)
  {
    v113 = (unint64_t *)&v141->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v169);
  v116 = v169;
  std::string::basic_string[abi:ne180100]<0>(v136, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v136, 1, v194);
  v138 = v194[0];
  if (v194[0])
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v194[0];
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = (std::__shared_weak_count_vtbl *)v118;
  }
  else
  {
    v117 = 0;
  }
  v139 = v117;
  v194[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v178, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v179, "int32");
  std::string::basic_string[abi:ne180100]<0>(v180, "int8");
  std::string::basic_string[abi:ne180100]<0>(v181, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v116 + 24))(v116, &v138, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v181[i + 2]) < 0)
      operator delete((void *)v181[i]);
  }
  v120 = v139;
  if (v139)
  {
    v121 = (unint64_t *)&v139->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v194[0];
  v194[0] = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  if (v137 < 0)
    operator delete(v136[0]);
  v124 = *a3;
  v134 = v169;
  if (v169)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = v169;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = (std::__shared_weak_count_vtbl *)v126;
  }
  else
  {
    v125 = 0;
  }
  v135 = v125;
  v169 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v124 + 56))(v124, &v134);
  v127 = v135;
  if (v135)
  {
    v128 = (unint64_t *)&v135->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v169;
  v169 = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  if (v191)
  {
    v131 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v191);
    MEMORY[0x1E0C023A0](v131, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v171, 0);
  result = (uint64_t)v174;
  if (v174)
  {
    v133 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v174);
    return MEMORY[0x1E0C023A0](v133, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07E7220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t *v62;
  uint64_t v63;
  uint64_t v65;

  if (a55)
    (*(void (**)(uint64_t))(*(_QWORD *)a55 + 8))(a55);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 112), 0);
  v65 = *v62;
  *v62 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::SoftplusParametric::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  char *v66;
  char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char **v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _OWORD *v86;
  unsigned __int8 *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void *v128;
  void *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  void *v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count_vtbl *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  uint64_t i;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t result;
  uint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  void *v170[2];
  char v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  void *v174;
  std::__shared_weak_count *v175;
  void *v176[2];
  char v177;
  void *v178[2];
  char v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  void *v184[2];
  char v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  void *v188;
  std::__shared_weak_count *v189;
  void *v190[2];
  char v191;
  void *v192[2];
  char v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  void *v198[2];
  char v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  void *v202[2];
  char v203;
  void *v204[2];
  char v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  __n128 v210;
  __int128 v211;
  __int128 v212;
  void *v213[2];
  uint64_t v214;
  __n128 v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char **v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  _QWORD *v223;
  void *__p;
  void *v225;
  char *v226;
  _QWORD v227[3];
  uint64_t v228[3];
  uint64_t v229[3];
  _QWORD v230[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v233;
  _BYTE v234[24];
  _BYTE *v235;
  _BYTE v236[24];
  _BYTE *v237;
  _QWORD v238[3];
  _QWORD *v239;
  std::__shared_weak_count_vtbl *v240;
  uint64_t v241;
  const void *(__cdecl **v242)(const std::__shared_weak_count *__hidden, const std::type_info *);
  uint64_t v243[3];

  v243[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v223 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v226 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  v225 = v10 + 24;
  v240 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v233 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  Scalar = v14;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v240, 2, &v222);
  MIL::IRParameter::Make(&v222, &v217);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v217);
  v15 = v217;
  v217 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v222.n128_u64[1];
  if (v222.n128_u64[1])
  {
    v17 = (unint64_t *)(v222.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v225 = __p;
    operator delete(__p);
  }
  v19 = v223;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (char *)operator new(8uLL);
  __p = v21;
  *(_QWORD *)v21 = v20;
  v226 = v21 + 8;
  v225 = v21 + 8;
  v240 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v233 = &v23->~__shared_weak_count_0;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v240, 2, &v221);
  MIL::IRParameter::Make(&v221, &v217);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "alpha", &v217);
  v25 = v217;
  v217 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v221.n128_u64[1];
  if (v221.n128_u64[1])
  {
    v27 = (unint64_t *)(v221.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v225 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v223;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (char *)operator new(8uLL);
  __p = v31;
  *(_QWORD *)v31 = v30;
  v226 = v31 + 8;
  v225 = v31 + 8;
  v240 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v33;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v33->~__shared_weak_count_0;
  v233 = &v33->~__shared_weak_count_0;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v240, 2, &v220);
  MIL::IRParameter::Make(&v220, &v217);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v29, "beta", &v217);
  v35 = v217;
  v217 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v220.n128_u64[1];
  if (v220.n128_u64[1])
  {
    v37 = (unint64_t *)(v220.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v225 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v219 = 0;
  v39 = operator new();
  *(_QWORD *)v39 = 0;
  *(_QWORD *)(v39 + 8) = 0;
  *(_QWORD *)(v39 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, (void **)v39);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v219, 1uLL);
  v40 = v219;
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v44->__get_deleter;
  v233 = &v44->__get_deleter;
  v44->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
  v44->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v42;
  v44->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v43;
  Scalar = v44;
  v243[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v241 = (uint64_t)&v48->__get_deleter;
  v242 = &v48->__get_deleter;
  v48->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v45;
  v48->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v46;
  v48->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v47;
  v240 = v48;
  v243[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v240);
  MIL::IRParameter::MakeTypeSet((uint64_t)v243, 2, &v215);
  MIL::IRParameter::Make(&v215, &v216);
  v49 = v216;
  v217 = v216;
  if (v216)
  {
    v50 = (_QWORD *)operator new();
    v51 = v216;
    *v50 = &unk_1EA99F888;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  v218 = v50;
  v216 = 0;
  v52 = v40[2];
  v53 = v40[1];
  if (v53 >= v52)
  {
    v55 = (v53 - *v40) >> 4;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v57 = v52 - *v40;
    if (v57 >> 3 > v56)
      v56 = v57 >> 3;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
      v58 = 0xFFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    v227[1] = v40 + 2;
    v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v40 + 2), v58);
    v61 = (uint64_t *)&v59[16 * v55];
    *v61 = v49;
    v61[1] = (uint64_t)v50;
    v218 = 0;
    v217 = 0;
    v63 = *v40;
    v62 = v40[1];
    if (v62 == *v40)
    {
      v66 = v40[1];
      v64 = &v59[16 * v55];
    }
    else
    {
      v64 = &v59[16 * v55];
      do
      {
        v65 = *((_OWORD *)v62 - 1);
        v62 -= 16;
        *((_OWORD *)v64 - 1) = v65;
        v64 -= 16;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
      }
      while (v62 != v63);
      v66 = *v40;
      v62 = v40[1];
    }
    v54 = (char *)(v61 + 2);
    *v40 = v64;
    v225 = v66;
    v40[1] = (char *)(v61 + 2);
    v226 = v62;
    v67 = v40[2];
    v40[2] = &v59[16 * v60];
    v227[0] = v67;
    __p = v66;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v53 = v49;
    *((_QWORD *)v53 + 1) = v50;
    v54 = v53 + 16;
    v218 = 0;
    v217 = 0;
  }
  v40[1] = v54;
  v68 = v216;
  v216 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v215.n128_u64[1];
  if (v215.n128_u64[1])
  {
    v70 = (unint64_t *)(v215.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v240)
  {
    v241 = (uint64_t)v240;
    operator delete(v240);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v213 = *(_OWORD *)a2;
  v214 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v72 = (uint64_t)v223;
  *(_QWORD *)&v212 = v223;
  if (v223)
  {
    v73 = (_QWORD *)operator new();
    *v73 = &unk_1EA99F8E8;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = v72;
  }
  else
  {
    v73 = 0;
  }
  *((_QWORD *)&v212 + 1) = v73;
  v223 = 0;
  *(_QWORD *)&v211 = v219;
  if (v219)
  {
    v74 = (_QWORD *)operator new();
    v75 = v219;
    *v74 = &unk_1EA99F948;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  *((_QWORD *)&v211 + 1) = v74;
  v219 = 0;
  v238[0] = &unk_1EA99FAC8;
  v238[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateSoftplusParametric;
  v239 = v238;
  v237 = 0;
  MIL::IROperator::Make((__int128 *)v213, &v212, &v211, (uint64_t)v238, (uint64_t)v236, a3);
  v76 = v237;
  if (v237 == v236)
  {
    v77 = 4;
    v76 = v236;
  }
  else
  {
    if (!v237)
      goto LABEL_73;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_73:
  v78 = v239;
  if (v239 == v238)
  {
    v79 = 4;
    v78 = v238;
    goto LABEL_77;
  }
  if (v239)
  {
    v79 = 5;
LABEL_77:
    (*(void (**)(void))(*v78 + 8 * v79))();
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
  if (*((_QWORD *)&v211 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
  if (*((_QWORD *)&v212 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (SHIBYTE(v214) < 0)
    operator delete(v213[0]);
  v240 = 0;
  v86 = (_OWORD *)operator new();
  *v86 = 0u;
  v86[1] = 0u;
  *((_DWORD *)v86 + 8) = 1065353216;
  v240 = (std::__shared_weak_count_vtbl *)v86;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v210);
  MIL::IRParameter::Make(&v210, (uint64_t *)&__p);
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v86, "minimum_compute_type", (uint64_t *)&__p);
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v210.n128_u64[1];
  if (v210.n128_u64[1])
  {
    v90 = (unint64_t *)(v210.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 32))(*((_QWORD *)v87 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 48))(*((_QWORD *)v87 + 5), 1);
  v92 = *a3;
  v93 = v240;
  v208 = v240;
  if (v240)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v93;
  }
  else
  {
    v94 = 0;
  }
  v209 = v94;
  v240 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v92 + 184))(v92, &v208);
  v95 = v209;
  if (v209)
  {
    p_shared_owners = (unint64_t *)&v209->__shared_owners_;
    do
      v97 = __ldaxr(p_shared_owners);
    while (__stlxr(v97 - 1, p_shared_owners));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v234);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v98 + 200))(v98, v234);
  v99 = v235;
  if (v235 == v234)
  {
    v100 = 4;
    v99 = v234;
  }
  else
  {
    if (!v235)
      goto LABEL_110;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_110:
  if (SHIBYTE(v226) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v204, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v204, 0, (uint64_t *)&Scalar);
  v206 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v207 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v202, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v101 + 24))(v101, &v206, v202);
  if (v203 < 0)
    operator delete(v202[0]);
  v104 = v207;
  if (v207)
  {
    v105 = (unint64_t *)&v207->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v205 < 0)
    operator delete(v204[0]);
  v108 = __p;
  std::string::basic_string[abi:ne180100]<0>(v198, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v198, 0, (uint64_t *)&Scalar);
  v200 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v201 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v108 + 24))(v108, &v200, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v111 = v201;
  if (v201)
  {
    v112 = (unint64_t *)&v201->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v199 < 0)
    operator delete(v198[0]);
  v115 = __p;
  std::string::basic_string[abi:ne180100]<0>(v192, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v192, 0, (uint64_t *)&Scalar);
  v194 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v195 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v190, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v115 + 24))(v115, &v194, v190);
  if (v191 < 0)
    operator delete(v190[0]);
  v118 = v195;
  if (v195)
  {
    v119 = (unint64_t *)&v195->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  if (v193 < 0)
    operator delete(v192[0]);
  v122 = *a3;
  v188 = __p;
  if (__p)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = (std::__shared_weak_count_vtbl *)__p;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v189 = v123;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v122 + 56))(v122, &v188);
  v125 = v189;
  if (v189)
  {
    v126 = (unint64_t *)&v189->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = __p;
  __p = 0;
  if (v128)
    (*(void (**)(void *))(*(_QWORD *)v128 + 8))(v128);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v129 = __p;
  std::string::basic_string[abi:ne180100]<0>(v184, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v184, 0, (uint64_t *)&Scalar);
  v186 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v187 = v130;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v129 + 24))(v129, &v186, 0, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v132 = v187;
  if (v187)
  {
    v133 = (unint64_t *)&v187->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  if (v185 < 0)
    operator delete(v184[0]);
  v136 = __p;
  std::string::basic_string[abi:ne180100]<0>(v178, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v178, 0, (uint64_t *)&Scalar);
  v180 = Scalar;
  if (Scalar)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = Scalar;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v181 = v137;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v176, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v136 + 24))(v136, &v180, 0, v176);
  if (v177 < 0)
    operator delete(v176[0]);
  v139 = v181;
  if (v181)
  {
    v140 = (unint64_t *)&v181->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = Scalar;
  Scalar = 0;
  if (v142)
    (*((void (**)(std::__shared_weak_count_vtbl *))v142->~__shared_weak_count + 1))(v142);
  if (v179 < 0)
    operator delete(v178[0]);
  v143 = *a3;
  v174 = __p;
  if (__p)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = (std::__shared_weak_count_vtbl *)__p;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v175 = v144;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v143 + 56))(v143, &v174);
  v146 = v175;
  if (v175)
  {
    v147 = (unint64_t *)&v175->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = __p;
  __p = 0;
  if (v149)
    (*(void (**)(void *))(*(_QWORD *)v149 + 8))(v149);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v217);
  v150 = v217;
  std::string::basic_string[abi:ne180100]<0>(v170, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v170, 1, v243);
  v172 = v243[0];
  if (v243[0])
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = v243[0];
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = (std::__shared_weak_count_vtbl *)v152;
  }
  else
  {
    v151 = 0;
  }
  v173 = v151;
  v243[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v227, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v228, "int32");
  std::string::basic_string[abi:ne180100]<0>(v229, "int8");
  std::string::basic_string[abi:ne180100]<0>(v230, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v150 + 24))(v150, &v172, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v230[i + 2]) < 0)
      operator delete((void *)v230[i]);
  }
  v154 = v173;
  if (v173)
  {
    v155 = (unint64_t *)&v173->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = v243[0];
  v243[0] = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  if (v171 < 0)
    operator delete(v170[0]);
  v158 = *a3;
  v168 = v217;
  if (v217)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = v217;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = (std::__shared_weak_count_vtbl *)v160;
  }
  else
  {
    v159 = 0;
  }
  v169 = v159;
  v217 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v158 + 56))(v158, &v168);
  v161 = v169;
  if (v169)
  {
    v162 = (unint64_t *)&v169->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v217;
  v217 = 0;
  if (v164)
    (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
  if (v240)
  {
    v165 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v240);
    MEMORY[0x1E0C023A0](v165, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, 0);
  result = (uint64_t)v223;
  if (v223)
  {
    v167 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v223);
    return MEMORY[0x1E0C023A0](v167, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07E8B10(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x210];
  STACK[0x210] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x220], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x258], 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MIL::Validation::OpAttributeConstraintTarget  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpAttributeConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpAttributeConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateConstexprAffineDequantize(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  void *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  MIL::IRValue *Attribute;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  MIL::IRTensorValueType *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::string *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  MIL::IRTensorValueType *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  MIL::IRTensorValueType *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  MIL::IRValueType *Type;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::string::size_type v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  uint64_t *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  void *v97[2];
  char v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  void *__p[2];
  char v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void *lpsrc;
  std::__shared_weak_count *v106;
  uint64_t v107;
  void *v108[2];
  char v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  __int128 v116;
  std::string::size_type v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120;
  std::__shared_weak_count *v121;
  void *v122;
  std::__shared_weak_count *v123;
  std::string v124;
  void *v125;
  std::__shared_weak_count *v126;

  std::string::basic_string[abi:ne180100]<0>(&v124, "quantized_data");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)&v124, &lpsrc);
  if (lpsrc
  {
    v125 = v5;
    v126 = v106;
    if (v106)
    {
      p_shared_owners = (unint64_t *)&v106->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v125 = 0;
    v126 = 0;
  }
  v8 = v106;
  if (v106)
  {
    v9 = (unint64_t *)&v106->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v124, "zero_point");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)&v124, &lpsrc);
  if (lpsrc
  {
    v122 = v11;
    v123 = v106;
    if (v106)
    {
      v12 = (unint64_t *)&v106->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    v122 = 0;
    v123 = 0;
  }
  v14 = v106;
  if (v106)
  {
    v15 = (unint64_t *)&v106->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v124, "scale");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)&v124, &lpsrc);
  if (lpsrc
  {
    v120 = v17;
    v121 = v106;
    if (v106)
    {
      v18 = (unint64_t *)&v106->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
  else
  {
    v120 = 0;
    v121 = 0;
  }
  v20 = v106;
  if (v106)
  {
    v21 = (unint64_t *)&v106->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v124, "axis");
  Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute((uint64_t)this, (unsigned __int8 *)&v124);
  v24 = (uint64_t *)MIL::IRValue::AsTensor(Attribute);
  v25 = *(int *)MIL::IRTensorValue::GetDataView<int>(v24);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  v26 = v125;
  v27 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void *))(*(_QWORD *)v125 + 32))(v125);
  v28 = MIL::IRTensorValueType::Rank(v27);
  if ((int)v25 >= 0)
    v29 = 0;
  else
    v29 = v28;
  if (v25 < -v28 || v28 <= v25)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v32 = (std::__shared_weak_count *)LocationPtr[1];
    v118 = *LocationPtr;
    v119 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    std::to_string(&v124, v25);
    v35 = std::string::insert(&v124, 0, "Attribute axis should be in the range -quantizedData.rank <= axis < quantizedData.rank. Provided axis = ");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v117 = v35->__r_.__value_.__r.__words[2];
    v116 = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a2, &v118, 322, &v116);
    if (SHIBYTE(v117) < 0)
      operator delete((void *)v116);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
    v37 = v119;
    if (!v119)
      goto LABEL_111;
    v38 = (unint64_t *)&v119->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
LABEL_63:
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    goto LABEL_111;
  }
  v40 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void *))(*(_QWORD *)v122 + 32))(v122);
  v41 = (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 32))(v26);
  v42 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 96))(v41);
  v43 = v29 + v25;
  v44 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v42 + 8 * v43));
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
  if (MIL::IRTensorValueType::Rank(v40) == 1
    && (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v40 + 16))(v40) != v45)
  {
    v73 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v74 = (std::__shared_weak_count *)v73[1];
    v114 = *v73;
    v115 = v74;
    if (v74)
    {
      v75 = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    std::string::basic_string[abi:ne180100]<0>(v112, "Attribute zeroPoint, if vector, needs to have same number of elements as quantizedData[axis]");
    MIL::ValidationResult::ValidationResult(a2, &v114, 322, v112);
    if (v113 < 0)
      operator delete(v112[0]);
    v37 = v115;
    if (!v115)
      goto LABEL_111;
    v77 = (unint64_t *)&v115->__shared_owners_;
    do
      v39 = __ldaxr(v77);
    while (__stlxr(v39 - 1, v77));
    goto LABEL_63;
  }
  v46 = v120;
  v47 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void *))(*(_QWORD *)v120 + 32))(v120);
  v48 = (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 32))(v26);
  v49 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 96))(v48);
  v50 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v49 + 8 * v43));
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 48))(v50);
  if (MIL::IRTensorValueType::Rank(v47) != 1
    || (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v47 + 16))(v47) == v51)
  {
    v52 = (*(uint64_t (**)(MIL::Operators::Common::ios16::CustomValidators *))(*(_QWORD *)this + 176))(this);
    if (*(_QWORD *)(v52 + 8) == *(_QWORD *)v52)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v52);
    v54 = MIL::IRValueType::AsTensorType(Type);
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 96))(v54);
    memset(&v124, 0, sizeof(v124));
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v124, *(const void **)v55, *(_QWORD *)(v55 + 8), (uint64_t)(*(_QWORD *)(v55 + 8) - *(_QWORD *)v55) >> 3);
    v56 = (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 32))(v26);
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 96))(v56);
    lpsrc = 0;
    v106 = 0;
    v107 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&lpsrc, *(const void **)v57, *(_QWORD *)(v57 + 8), (uint64_t)(*(_QWORD *)(v57 + 8) - *(_QWORD *)v57) >> 3);
    v58 = v124.__r_.__value_.__r.__words[0];
    if (v124.__r_.__value_.__l.__size_ - v124.__r_.__value_.__r.__words[0] == (char *)v106 - (_BYTE *)lpsrc)
    {
      if (v124.__r_.__value_.__l.__size_ == v124.__r_.__value_.__r.__words[0])
      {
LABEL_77:
        v63 = MIL::IRValueType::AsTensorType(Type);
        v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 88))(v63);
        v65 = (*(uint64_t (**)(void *))(*(_QWORD *)v46 + 32))(v46);
        if (v64 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 88))(v65))
        {
          MIL::ValidationResult::ValidationResult(a2);
LABEL_89:
          if (lpsrc)
          {
            v106 = (std::__shared_weak_count *)lpsrc;
            operator delete(lpsrc);
          }
          if (v124.__r_.__value_.__r.__words[0])
          {
            v124.__r_.__value_.__l.__size_ = v124.__r_.__value_.__r.__words[0];
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          goto LABEL_111;
        }
        v92 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v93 = (std::__shared_weak_count *)v92[1];
        v99 = *v92;
        v100 = v93;
        if (v93)
        {
          v94 = (unint64_t *)&v93->__shared_owners_;
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        std::string::basic_string[abi:ne180100]<0>(v97, "Attribute scale and output should have same dtype");
        MIL::ValidationResult::ValidationResult(a2, &v99, 306, v97);
        if (v98 < 0)
          operator delete(v97[0]);
        v70 = v100;
        if (!v100)
          goto LABEL_89;
        v96 = (unint64_t *)&v100->__shared_owners_;
        do
          v72 = __ldaxr(v96);
        while (__stlxr(v72 - 1, v96));
LABEL_87:
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
        goto LABEL_89;
      }
      v59 = 0;
      while ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v58 + 8 * v59) + 16))(*(_QWORD *)(v58 + 8 * v59)))
      {
        if (!(*(uint64_t (**)(_QWORD))(**((_QWORD **)lpsrc + v59) + 16))(*((_QWORD *)lpsrc + v59)))
          break;
        v60 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v124.__r_.__value_.__r.__words[0] + 8 * v59));
        v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 48))(v60);
        v62 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)lpsrc + v59));
        if (v61 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 48))(v62))
          break;
        ++v59;
        v58 = v124.__r_.__value_.__r.__words[0];
        if (v59 >= (uint64_t)(v124.__r_.__value_.__l.__size_ - v124.__r_.__value_.__r.__words[0]) >> 3)
          goto LABEL_77;
      }
    }
    v66 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v67 = (std::__shared_weak_count *)v66[1];
    v103 = *v66;
    v104 = v67;
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Attribute quantizedData and output should have same shape");
    MIL::ValidationResult::ValidationResult(a2, &v103, 322, __p);
    if (v102 < 0)
      operator delete(__p[0]);
    v70 = v104;
    if (!v104)
      goto LABEL_89;
    v71 = (unint64_t *)&v104->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    goto LABEL_87;
  }
  v78 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v79 = (std::__shared_weak_count *)v78[1];
  v110 = *v78;
  v111 = v79;
  if (v79)
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  std::string::basic_string[abi:ne180100]<0>(v108, "Attribute scale, if vector, needs to have same number of elements as quantizedData[axis]");
  MIL::ValidationResult::ValidationResult(a2, &v110, 322, v108);
  if (v109 < 0)
    operator delete(v108[0]);
  v37 = v111;
  if (v111)
  {
    v82 = (unint64_t *)&v111->__shared_owners_;
    do
      v39 = __ldaxr(v82);
    while (__stlxr(v39 - 1, v82));
    goto LABEL_63;
  }
LABEL_111:
  v83 = v121;
  if (v121)
  {
    v84 = (unint64_t *)&v121->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v123;
  if (v123)
  {
    v87 = (unint64_t *)&v123->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v126;
  if (v126)
  {
    v90 = (unint64_t *)&v126->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
}

void sub_1E07E9A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v43;
  void *v45;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  v45 = *(void **)(v43 - 104);
  if (v45)
  {
    *(_QWORD *)(v43 - 96) = v45;
    operator delete(v45);
  }
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v43 - 136);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v43 - 120);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v43 - 80);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  char **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  void **v29;
  char *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  char **v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  unsigned __int8 *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned __int8 *v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  unsigned __int8 *v82;
  void **v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  __n128 v101;
  __n128 v102;
  void *v103;
  void *v104;
  _QWORD *v105;
  __n128 v106;
  __n128 v107;
  __int128 v108;
  __int128 v109;
  void *__p[2];
  uint64_t v111;
  __n128 v112;
  void *v113;
  char **v114;
  uint64_t v115;
  _QWORD v116[3];
  _QWORD *v117;
  _QWORD v118[3];
  _QWORD *v119;
  _QWORD v120[3];
  _QWORD *v121;
  void *v122;
  uint64_t v123;
  _QWORD *v124;
  void *Scalar;
  void *v126;
  _QWORD *v127;
  uint64_t v128[2];
  void **v129;
  void **v130;
  uint64_t v131;
  char *v132;
  char **v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v114 = 0;
  v115 = 0;
  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  v129 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v114, (void **)v6);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v129, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v114, 1uLL);
  v7 = v114;
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = operator new(8uLL);
  Scalar = v9;
  *v9 = v8;
  v126 = v9 + 1;
  v127 = v9 + 1;
  v128[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = operator new(8uLL);
  v122 = v11;
  *v11 = v10;
  v123 = (uint64_t)(v11 + 1);
  v124 = v11 + 1;
  v128[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v122);
  MIL::IRParameter::MakeTypeSet((uint64_t)v128, 2, &v112);
  MIL::IRParameter::Make(&v112, (uint64_t *)&v113);
  v12 = v113;
  v103 = v113;
  if (v113)
  {
    v13 = (_QWORD *)operator new();
    v14 = v113;
    *v13 = &unk_1EA99F888;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = v14;
  }
  else
  {
    v13 = 0;
  }
  v104 = v13;
  v113 = 0;
  v15 = v7[2];
  v16 = v7[1];
  if (v16 >= v15)
  {
    v18 = (v16 - *v7) >> 4;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v20 = v15 - *v7;
    if (v20 >> 3 > v19)
      v19 = v20 >> 3;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    v133 = v7 + 2;
    v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v7 + 2), v21);
    v24 = &v22[16 * v18];
    *(_QWORD *)v24 = v12;
    *((_QWORD *)v24 + 1) = v13;
    v103 = 0;
    v104 = 0;
    v26 = *v7;
    v25 = v7[1];
    if (v25 == *v7)
    {
      v29 = (void **)v7[1];
      v27 = &v22[16 * v18];
    }
    else
    {
      v27 = &v22[16 * v18];
      do
      {
        v28 = *((_OWORD *)v25 - 1);
        v25 -= 16;
        *((_OWORD *)v27 - 1) = v28;
        v27 -= 16;
        *(_QWORD *)v25 = 0;
        *((_QWORD *)v25 + 1) = 0;
      }
      while (v25 != v26);
      v29 = (void **)*v7;
      v25 = v7[1];
    }
    v17 = v24 + 16;
    *v7 = v27;
    v129 = v29;
    v130 = v29;
    v7[1] = v24 + 16;
    v131 = (uint64_t)v25;
    v30 = v7[2];
    v7[2] = &v22[16 * v23];
    v132 = v30;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v129);
  }
  else
  {
    *(_QWORD *)v16 = v12;
    *((_QWORD *)v16 + 1) = v13;
    v17 = v16 + 16;
    v103 = 0;
    v104 = 0;
  }
  v7[1] = v17;
  v31 = v113;
  v113 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v112.n128_u64[1];
  if (v112.n128_u64[1])
  {
    v33 = (unint64_t *)(v112.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v122)
  {
    v123 = (uint64_t)v122;
    operator delete(v122);
  }
  if (Scalar)
  {
    v126 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v111 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v35 = v115;
  *(_QWORD *)&v109 = v115;
  if (v115)
  {
    v36 = (_QWORD *)operator new();
    *v36 = &unk_1EA99F8E8;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v35;
  }
  else
  {
    v36 = 0;
  }
  *((_QWORD *)&v109 + 1) = v36;
  v115 = 0;
  *(_QWORD *)&v108 = v114;
  if (v114)
  {
    v37 = (_QWORD *)operator new();
    v38 = v114;
    *v37 = &unk_1EA99F948;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  *((_QWORD *)&v108 + 1) = v37;
  v114 = 0;
  v120[0] = &unk_1EA99FAC8;
  v120[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateConstexprAffineDequantize;
  v121 = v120;
  v118[0] = &off_1EA9A0DD8;
  v118[1] = a1;
  v119 = v118;
  MIL::IROperator::Make((__int128 *)__p, &v109, &v108, (uint64_t)v120, (uint64_t)v118, a3);
  v39 = v119;
  if (v119 == v118)
  {
    v40 = 4;
    v39 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_40;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_40:
  v41 = v121;
  if (v121 == v120)
  {
    v42 = 4;
    v41 = v120;
    goto LABEL_44;
  }
  if (v121)
  {
    v42 = 5;
LABEL_44:
    (*(void (**)(void))(*v41 + 8 * v42))();
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
  if (*((_QWORD *)&v108 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (SHIBYTE(v111) < 0)
    operator delete(__p[0]);
  v49 = operator new();
  *(_OWORD *)v49 = 0u;
  *(_OWORD *)(v49 + 16) = 0u;
  *(_DWORD *)(v49 + 32) = 1065353216;
  v128[0] = v49;
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = (void **)operator new(8uLL);
  v129 = v51;
  *v51 = (void *)v50;
  v130 = v51 + 1;
  v131 = (uint64_t)(v51 + 1);
  v122 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v129);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  Scalar = v53;
  *v53 = v52;
  v126 = v53 + 1;
  v127 = v53 + 1;
  v123 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v122, 2, &v107);
  MIL::IRParameter::Make(&v107, (uint64_t *)&v103);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v49, "quantized_data", (uint64_t *)&v103);
  v55 = v103;
  v103 = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v107.n128_u64[1];
  if (v107.n128_u64[1])
  {
    v57 = (unint64_t *)(v107.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (Scalar)
  {
    v126 = Scalar;
    operator delete(Scalar);
  }
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  v59 = (_QWORD *)v128[0];
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  Scalar = v61;
  *v61 = v60;
  v126 = v61 + 1;
  v127 = v61 + 1;
  v129 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&Scalar);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  v122 = v63;
  *v63 = v62;
  v123 = (uint64_t)(v63 + 1);
  v124 = v63 + 1;
  v130 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v122);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  v103 = v65;
  *v65 = v64;
  v104 = v65 + 1;
  v105 = v65 + 1;
  v131 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v103);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v129, 3, &v106);
  MIL::IRParameter::Make(&v106, (uint64_t *)&v113);
  v66 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v59, "zero_point", (uint64_t *)&v113);
  v67 = v113;
  v113 = 0;
  if (v67)
    (*(void (**)(void *))(*(_QWORD *)v67 + 8))(v67);
  v68 = (std::__shared_weak_count *)v106.n128_u64[1];
  if (v106.n128_u64[1])
  {
    v69 = (unint64_t *)(v106.n128_u64[1] + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
  if (v122)
  {
    v123 = (uint64_t)v122;
    operator delete(v122);
  }
  if (Scalar)
  {
    v126 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 32))(*((_QWORD *)v66 + 5), 1);
  v71 = (_QWORD *)v128[0];
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = (void **)operator new(8uLL);
  v129 = v73;
  *v73 = (void *)v72;
  v130 = v73 + 1;
  v131 = (uint64_t)(v73 + 1);
  v122 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v129);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  Scalar = v75;
  *v75 = v74;
  v126 = v75 + 1;
  v127 = v75 + 1;
  v123 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v122, 2, &v102);
  MIL::IRParameter::Make(&v102, (uint64_t *)&v103);
  v76 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v71, "scale", (uint64_t *)&v103);
  v77 = v103;
  v103 = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = (std::__shared_weak_count *)v102.n128_u64[1];
  if (v102.n128_u64[1])
  {
    v79 = (unint64_t *)(v102.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (Scalar)
  {
    v126 = Scalar;
    operator delete(Scalar);
  }
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 32))(*((_QWORD *)v76 + 5), 1);
  v81 = (_QWORD *)v128[0];
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v101);
  MIL::IRParameter::Make(&v101, (uint64_t *)&v129);
  v82 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v81, "axis", (uint64_t *)&v129);
  v83 = v129;
  v129 = 0;
  if (v83)
    (*((void (**)(void **))*v83 + 1))(v83);
  v84 = (std::__shared_weak_count *)v101.n128_u64[1];
  if (v101.n128_u64[1])
  {
    v85 = (unint64_t *)(v101.n128_u64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v82 + 5) + 32))(*((_QWORD *)v82 + 5), 1);
  v87 = *a3;
  v88 = v128[0];
  v99 = v128[0];
  if (v128[0])
  {
    v89 = (std::__shared_weak_count *)operator new();
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = (std::__shared_weak_count_vtbl *)v88;
  }
  else
  {
    v89 = 0;
  }
  v100 = v89;
  v128[0] = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v87 + 184))(v87, &v99);
  v90 = v100;
  if (v100)
  {
    p_shared_owners = (unint64_t *)&v100->__shared_owners_;
    do
      v92 = __ldaxr(p_shared_owners);
    while (__stlxr(v92 - 1, p_shared_owners));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = *a3;
  v116[0] = &off_1EA9A0E58;
  v117 = v116;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v93 + 200))(v93, v116);
  v94 = v117;
  if (v117 == v116)
  {
    v95 = 4;
    v94 = v116;
  }
  else
  {
    if (!v117)
      goto LABEL_112;
    v95 = 5;
  }
  (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_112:
  if (v128[0])
  {
    v96 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v128[0]);
    MEMORY[0x1E0C023A0](v96, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v114, 0);
  result = v115;
  if (v115)
  {
    v98 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v115);
    return MEMORY[0x1E0C023A0](v98, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07EA6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,void **a36,uint64_t a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t *v47;
  uint64_t v48;
  uint64_t v50;

  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v48 - 128), 0);
  v50 = *v47;
  *v47 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a36, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a37, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ConstexprCast::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  char **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  char *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  char **v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  void *v73;
  std::__shared_weak_count *v74;
  __n128 v75;
  __n128 v76;
  __int128 v77;
  __int128 v78;
  void *v79[2];
  uint64_t v80;
  void *__p;
  void *v82;
  _QWORD *v83;
  __n128 v84;
  char **v85;
  uint64_t v86;
  void *v87;
  void *v88;
  char *v89;
  char *v90;
  char **v91;
  _QWORD v92[3];
  _QWORD *v93;
  _QWORD v94[3];
  _QWORD *v95;
  _BYTE v96[24];
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t Scalar;
  _QWORD *v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v85 = 0;
  v86 = 0;
  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  v87 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v85, (void **)v6);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v87, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v85, 1uLL);
  v7 = v85;
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = operator new(8uLL);
  __p = v9;
  *v9 = v8;
  v82 = v9 + 1;
  v83 = v9 + 1;
  v98 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v98, 1, &v84);
  MIL::IRParameter::Make(&v84, &v99);
  v10 = v99;
  Scalar = v99;
  if (v99)
  {
    v11 = (_QWORD *)operator new();
    v12 = v99;
    *v11 = &unk_1EA99F888;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v12;
  }
  else
  {
    v11 = 0;
  }
  v101 = v11;
  v99 = 0;
  v13 = v7[2];
  v14 = v7[1];
  if (v14 >= v13)
  {
    v16 = (v14 - *v7) >> 4;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v18 = v13 - *v7;
    if (v18 >> 3 > v17)
      v17 = v18 >> 3;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    v91 = v7 + 2;
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v7 + 2), v19);
    v22 = (uint64_t *)&v20[16 * v16];
    *v22 = v10;
    v22[1] = (uint64_t)v11;
    Scalar = 0;
    v101 = 0;
    v24 = *v7;
    v23 = v7[1];
    if (v23 == *v7)
    {
      v27 = v7[1];
      v25 = &v20[16 * v16];
    }
    else
    {
      v25 = &v20[16 * v16];
      do
      {
        v26 = *((_OWORD *)v23 - 1);
        v23 -= 16;
        *((_OWORD *)v25 - 1) = v26;
        v25 -= 16;
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
      }
      while (v23 != v24);
      v27 = *v7;
      v23 = v7[1];
    }
    v15 = (char *)(v22 + 2);
    *v7 = v25;
    v87 = v27;
    v88 = v27;
    v7[1] = (char *)(v22 + 2);
    v89 = v23;
    v28 = v7[2];
    v7[2] = &v20[16 * v21];
    v90 = v28;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v87);
  }
  else
  {
    *(_QWORD *)v14 = v10;
    *((_QWORD *)v14 + 1) = v11;
    v15 = v14 + 16;
    Scalar = 0;
    v101 = 0;
  }
  v7[1] = v15;
  v29 = v99;
  v99 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)v84.n128_u64[1];
  if (v84.n128_u64[1])
  {
    v31 = (unint64_t *)(v84.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (__p)
  {
    v82 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v79 = *(_OWORD *)a2;
  v80 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v33 = v86;
  *(_QWORD *)&v78 = v86;
  if (v86)
  {
    v34 = (_QWORD *)operator new();
    *v34 = &unk_1EA99F8E8;
    v34[1] = 0;
    v34[2] = 0;
    v34[3] = v33;
  }
  else
  {
    v34 = 0;
  }
  *((_QWORD *)&v78 + 1) = v34;
  v86 = 0;
  *(_QWORD *)&v77 = v85;
  if (v85)
  {
    v35 = (_QWORD *)operator new();
    v36 = v85;
    *v35 = &unk_1EA99F948;
    v35[1] = 0;
    v35[2] = 0;
    v35[3] = v36;
  }
  else
  {
    v35 = 0;
  }
  *((_QWORD *)&v77 + 1) = v35;
  v85 = 0;
  v97 = 0;
  v94[0] = &off_1EA9A0ED8;
  v94[1] = a1;
  v95 = v94;
  MIL::IROperator::Make((__int128 *)v79, &v78, &v77, (uint64_t)v96, (uint64_t)v94, a3);
  v37 = v95;
  if (v95 == v94)
  {
    v38 = 4;
    v37 = v94;
  }
  else
  {
    if (!v95)
      goto LABEL_38;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_38:
  v39 = v97;
  if (v97 == v96)
  {
    v40 = 4;
    v39 = v96;
    goto LABEL_42;
  }
  if (v97)
  {
    v40 = 5;
LABEL_42:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (SHIBYTE(v80) < 0)
    operator delete(v79[0]);
  v47 = (_OWORD *)operator new();
  *v47 = 0u;
  v47[1] = 0u;
  *((_DWORD *)v47 + 8) = 1065353216;
  __p = v47;
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v87 = v49;
  *v49 = v48;
  v88 = v49 + 1;
  v89 = (char *)(v49 + 1);
  v99 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v87);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v99, 1, &v76);
  MIL::IRParameter::Make(&v76, &Scalar);
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v47, "source_val", &Scalar);
  v51 = Scalar;
  Scalar = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v76.n128_u64[1];
  if (v76.n128_u64[1])
  {
    v53 = (unint64_t *)(v76.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  v55 = __p;
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v75);
  MIL::IRParameter::Make(&v75, (uint64_t *)&v87);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v55, "output_dtype", (uint64_t *)&v87);
  v57 = v87;
  v87 = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v75.n128_u64[1];
  if (v75.n128_u64[1])
  {
    v59 = (unint64_t *)(v75.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  v61 = *a3;
  v62 = (std::__shared_weak_count_vtbl *)__p;
  v73 = __p;
  if (__p)
  {
    v63 = (std::__shared_weak_count *)operator new();
    v63->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v63->__shared_owners_ = 0;
    v63->__shared_weak_owners_ = 0;
    v63[1].__vftable = v62;
  }
  else
  {
    v63 = 0;
  }
  v74 = v63;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v61 + 184))(v61, &v73);
  v64 = v74;
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = *a3;
  v92[0] = &off_1EA9A0F58;
  v93 = v92;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v67 + 200))(v67, v92);
  v68 = v93;
  if (v93 == v92)
  {
    v69 = 4;
    v68 = v92;
  }
  else
  {
    if (!v93)
      goto LABEL_84;
    v69 = 5;
  }
  (*(void (**)(_QWORD *))(*v68 + 8 * v69))(v68);
LABEL_84:
  if (__p)
  {
    v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v70, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v85, 0);
  result = v86;
  if (v86)
  {
    v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v86);
    return MEMORY[0x1E0C023A0](v72, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07EB108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void **a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t *v40;
  uint64_t v42;

  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a25, 0);
  v42 = *v40;
  *v40 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a30, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a31, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateConstexprLutToDense(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  MIL::IRValue *Attribute;
  uint64_t *v18;
  uint64_t Data;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  MIL::IRValueType *Type;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::string *v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  unint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66[2];
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  void *v70[2];
  char v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  void *v74[2];
  char v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void *v78[2];
  std::string::size_type v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  void *__p[2];
  char v83;
  unint64_t v84;
  void *v85;
  std::__shared_weak_count *v86;
  void *v87;
  std::__shared_weak_count *v88;
  _BYTE v89[32];
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)__p, v89);
  if (*(_QWORD *)v89
  {
    v87 = v5;
    v88 = *(std::__shared_weak_count **)&v89[8];
    if (*(_QWORD *)&v89[8])
    {
      v6 = (unint64_t *)(*(_QWORD *)&v89[8] + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    v87 = 0;
    v88 = 0;
  }
  v8 = *(std::__shared_weak_count **)&v89[8];
  if (*(_QWORD *)&v89[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&v89[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v83 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lut");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)__p, v89);
  if (*(_QWORD *)v89
  {
    v85 = v11;
    v86 = *(std::__shared_weak_count **)&v89[8];
    if (*(_QWORD *)&v89[8])
    {
      v12 = (unint64_t *)(*(_QWORD *)&v89[8] + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    v85 = 0;
    v86 = 0;
  }
  v14 = *(std::__shared_weak_count **)&v89[8];
  if (*(_QWORD *)&v89[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&v89[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v83 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute((uint64_t)this, (unsigned __int8 *)__p);
  v18 = (uint64_t *)MIL::IRValue::AsTensor(Attribute);
  Data = MIL::IRTensorValue::GetDataView<unsigned int>(v18);
  v21 = v20;
  if (v83 < 0)
    operator delete(__p[0]);
  v84 = 0;
  v22 = v85;
  v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v85 + 32))(v85);
  v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  *(_OWORD *)v89 = xmmword_1E0B0DB20;
  *(_OWORD *)&v89[16] = unk_1E0B0DB30;
  v90 = 256;
  std::unordered_set<unsigned long>::unordered_set((uint64_t)__p, (unint64_t *)v89, 5);
  if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(__p, &v84))
  {
    v24 = (*(uint64_t (**)(MIL::Operators::Common::ios16::CustomValidators *))(*(_QWORD *)this + 176))(this);
    if (*(_QWORD *)(v24 + 8) == *(_QWORD *)v24)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v24);
    v26 = MIL::IRValueType::AsTensorType(Type);
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
    v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 32))(v22);
    if (v27 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 88))(v28))
    {
      v29 = MIL::IRValueType::AsTensorType(Type);
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 96))(v29);
      memset(v89, 0, 24);
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v89, *(const void **)v30, *(_QWORD *)(v30 + 8), (uint64_t)(*(_QWORD *)(v30 + 8) - *(_QWORD *)v30) >> 3);
      if ((MIL::Operators::Common::Shared::MatchesExpectedShape((uint64_t *)v89, Data, v21) & 1) != 0)
      {
        v31 = log2((double)v84);
        v32 = (*(uint64_t (**)(void *))(*(_QWORD *)v87 + 32))(v87);
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        if (v33 == vcvtpd_u64_f64((double)(unint64_t)(*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)Type + 16))(Type)* 0.125* (double)(int)v31))
        {
          MIL::ValidationResult::ValidationResult(a2);
LABEL_77:
          if (*(_QWORD *)v89)
          {
            *(_QWORD *)&v89[8] = *(_QWORD *)v89;
            operator delete(*(void **)v89);
          }
          goto LABEL_79;
        }
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v56 = (std::__shared_weak_count *)LocationPtr[1];
        v68 = *LocationPtr;
        v69 = v56;
        if (v56)
        {
          p_shared_owners = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(p_shared_owners);
          while (__stxr(v58 + 1, p_shared_owners));
        }
        std::string::basic_string[abi:ne180100]<0>(v66, "Attribute indices and shape should satisfy indicesSize == std::ceil(nBits * (prod(shape) / 8.0))");
        MIL::ValidationResult::ValidationResult(a2, &v68, 322, v66);
        if (v67 < 0)
          operator delete(v66[0]);
        v52 = v69;
        if (!v69)
          goto LABEL_77;
        v59 = (unint64_t *)&v69->__shared_owners_;
        do
          v54 = __ldaxr(v59);
        while (__stlxr(v54 - 1, v59));
      }
      else
      {
        v48 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v49 = (std::__shared_weak_count *)v48[1];
        v72 = *v48;
        v73 = v49;
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        std::string::basic_string[abi:ne180100]<0>(v70, "Attribute shape and output's shape should match");
        MIL::ValidationResult::ValidationResult(a2, &v72, 322, v70);
        if (v71 < 0)
          operator delete(v70[0]);
        v52 = v73;
        if (!v73)
          goto LABEL_77;
        v53 = (unint64_t *)&v73->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
      }
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      goto LABEL_77;
    }
    v43 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v44 = (std::__shared_weak_count *)v43[1];
    v76 = *v43;
    v77 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    std::string::basic_string[abi:ne180100]<0>(v74, "Attribute lut and output should have same dtype");
    MIL::ValidationResult::ValidationResult(a2, &v76, 306, v74);
    if (v75 < 0)
      operator delete(v74[0]);
    v40 = v77;
    if (v77)
    {
      v47 = (unint64_t *)&v77->__shared_owners_;
      do
        v42 = __ldaxr(v47);
      while (__stlxr(v42 - 1, v47));
      goto LABEL_56;
    }
  }
  else
  {
    v34 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v35 = (std::__shared_weak_count *)v34[1];
    v80 = *v34;
    v81 = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    std::to_string((std::string *)v89, v84);
    v38 = std::string::insert((std::string *)v89, 0, "Attribute lut should have number of elements equal to one of {2, 4, 16, 64, 256}, but provided ");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v79 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)v78 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a2, &v80, 322, v78);
    if (SHIBYTE(v79) < 0)
      operator delete(v78[0]);
    if ((v89[23] & 0x80000000) != 0)
      operator delete(*(void **)v89);
    v40 = v81;
    if (v81)
    {
      v41 = (unint64_t *)&v81->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
LABEL_56:
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
LABEL_79:
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)__p);
  v60 = v86;
  if (v86)
  {
    v61 = (unint64_t *)&v86->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v88;
  if (v88)
  {
    v64 = (unint64_t *)&v88->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
}

void sub_1E07EB980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  void *v50;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  v50 = *(void **)(v48 - 128);
  if (v50)
  {
    *(_QWORD *)(v48 - 120) = v50;
    operator delete(v50);
  }
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a43);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v48 - 160);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v48 - 144);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ConstexprLutToDense::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  char **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  void **v33;
  char *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  char **v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  void **v55;
  unsigned __int8 *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void **v77;
  unsigned __int8 *v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t result;
  uint64_t v94;
  void *v95;
  std::__shared_weak_count *v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __int128 v100;
  __int128 v101;
  void *v102[2];
  uint64_t v103;
  void *__p;
  void *v105;
  _QWORD *v106;
  void *v107;
  void *v108;
  _QWORD *v109;
  void *v110;
  void *v111;
  _QWORD *v112;
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  char **v117;
  uint64_t v118;
  _QWORD v119[3];
  _QWORD *v120;
  _QWORD v121[3];
  _QWORD *v122;
  _QWORD v123[3];
  _QWORD *v124;
  void *v125;
  void *v126;
  _QWORD *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void **v132;
  void **v133;
  uint64_t v134;
  uint64_t v135;
  char **v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v117 = 0;
  v118 = 0;
  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  v132 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v117, (void **)v6);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v132, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v117, 1uLL);
  v7 = v117;
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = operator new(8uLL);
  v125 = v9;
  *v9 = v8;
  v126 = v9 + 1;
  v127 = v9 + 1;
  v128 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v125);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = operator new(8uLL);
  v110 = v11;
  *v11 = v10;
  v111 = v11 + 1;
  v112 = v11 + 1;
  v129 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v110);
  v12 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v13 = operator new(8uLL);
  v107 = v13;
  *v13 = v12;
  v108 = v13 + 1;
  v109 = v13 + 1;
  v130 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v107);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v105 = v15 + 1;
  v106 = v15 + 1;
  v131 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v128, 4, &v113);
  MIL::IRParameter::Make(&v113, &v114);
  v16 = v114;
  v115 = v114;
  if (v114)
  {
    v17 = (_QWORD *)operator new();
    v18 = v114;
    *v17 = &unk_1EA99F888;
    v17[1] = 0;
    v17[2] = 0;
    v17[3] = v18;
  }
  else
  {
    v17 = 0;
  }
  v116 = v17;
  v114 = 0;
  v19 = v7[2];
  v20 = v7[1];
  if (v20 >= v19)
  {
    v22 = (v20 - *v7) >> 4;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v24 = v19 - *v7;
    if (v24 >> 3 > v23)
      v23 = v24 >> 3;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
      v25 = 0xFFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    v136 = v7 + 2;
    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v7 + 2), v25);
    v28 = (uint64_t *)&v26[16 * v22];
    *v28 = v16;
    v28[1] = (uint64_t)v17;
    v115 = 0;
    v116 = 0;
    v30 = *v7;
    v29 = v7[1];
    if (v29 == *v7)
    {
      v33 = (void **)v7[1];
      v31 = &v26[16 * v22];
    }
    else
    {
      v31 = &v26[16 * v22];
      do
      {
        v32 = *((_OWORD *)v29 - 1);
        v29 -= 16;
        *((_OWORD *)v31 - 1) = v32;
        v31 -= 16;
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
      }
      while (v29 != v30);
      v33 = (void **)*v7;
      v29 = v7[1];
    }
    v21 = (char *)(v28 + 2);
    *v7 = v31;
    v132 = v33;
    v133 = v33;
    v7[1] = (char *)(v28 + 2);
    v134 = (uint64_t)v29;
    v34 = v7[2];
    v7[2] = &v26[16 * v27];
    v135 = (uint64_t)v34;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v132);
  }
  else
  {
    *(_QWORD *)v20 = v16;
    *((_QWORD *)v20 + 1) = v17;
    v21 = v20 + 16;
    v115 = 0;
    v116 = 0;
  }
  v7[1] = v21;
  v35 = v114;
  v114 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v113.n128_u64[1];
  if (v113.n128_u64[1])
  {
    v37 = (unint64_t *)(v113.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (__p)
  {
    v105 = __p;
    operator delete(__p);
  }
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  *(_OWORD *)v102 = *(_OWORD *)a2;
  v103 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v39 = v118;
  *(_QWORD *)&v101 = v118;
  if (v118)
  {
    v40 = (_QWORD *)operator new();
    *v40 = &unk_1EA99F8E8;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v39;
  }
  else
  {
    v40 = 0;
  }
  *((_QWORD *)&v101 + 1) = v40;
  v118 = 0;
  *(_QWORD *)&v100 = v117;
  if (v117)
  {
    v41 = (_QWORD *)operator new();
    v42 = v117;
    *v41 = &unk_1EA99F948;
    v41[1] = 0;
    v41[2] = 0;
    v41[3] = v42;
  }
  else
  {
    v41 = 0;
  }
  *((_QWORD *)&v100 + 1) = v41;
  v117 = 0;
  v123[0] = &unk_1EA99FAC8;
  v123[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateConstexprLutToDense;
  v124 = v123;
  v121[0] = &off_1EA9A0FD8;
  v121[1] = a1;
  v122 = v121;
  MIL::IROperator::Make((__int128 *)v102, &v101, &v100, (uint64_t)v123, (uint64_t)v121, a3);
  v43 = v122;
  if (v122 == v121)
  {
    v44 = 4;
    v43 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_44;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_44:
  v45 = v124;
  if (v124 == v123)
  {
    v46 = 4;
    v45 = v123;
    goto LABEL_48;
  }
  if (v124)
  {
    v46 = 5;
LABEL_48:
    (*(void (**)(void))(*v45 + 8 * v46))();
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (SHIBYTE(v103) < 0)
    operator delete(v102[0]);
  v53 = (_OWORD *)operator new();
  *v53 = 0u;
  v53[1] = 0u;
  *((_DWORD *)v53 + 8) = 1065353216;
  __p = v53;
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = (void **)operator new(8uLL);
  v132 = v55;
  *v55 = (void *)v54;
  v133 = v55 + 1;
  v134 = (uint64_t)(v55 + 1);
  v125 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v125, 1, &v99);
  MIL::IRParameter::Make(&v99, (uint64_t *)&v128);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v53, "indices", (uint64_t *)&v128);
  v57 = v128;
  v128 = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v99.n128_u64[1];
  if (v99.n128_u64[1])
  {
    v59 = (unint64_t *)(v99.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  v61 = __p;
  v62 = MIL::IRUnknownDimension::Make(a1, 0);
  v63 = operator new(8uLL);
  v128 = v63;
  *v63 = v62;
  v129 = (uint64_t)(v63 + 1);
  v130 = (uint64_t)(v63 + 1);
  v132 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v128);
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = operator new(8uLL);
  v125 = v65;
  *v65 = v64;
  v126 = v65 + 1;
  v127 = v65 + 1;
  v133 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v125);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = operator new(8uLL);
  v110 = v67;
  *v67 = v66;
  v111 = v67 + 1;
  v112 = v67 + 1;
  v134 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v110);
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v69 = operator new(8uLL);
  v107 = v69;
  *v69 = v68;
  v108 = v69 + 1;
  v109 = v69 + 1;
  v135 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v107);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v132, 4, &v98);
  MIL::IRParameter::Make(&v98, &v115);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v61, "lut", &v115);
  v71 = v115;
  v115 = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = (std::__shared_weak_count *)v98.n128_u64[1];
  if (v98.n128_u64[1])
  {
    v73 = (unint64_t *)(v98.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  if (v128)
  {
    v129 = (uint64_t)v128;
    operator delete(v128);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  v75 = __p;
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = (void **)operator new(8uLL);
  v132 = v77;
  *v77 = (void *)v76;
  v133 = v77 + 1;
  v134 = (uint64_t)(v77 + 1);
  v125 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v125, 1, &v97);
  MIL::IRParameter::Make(&v97, (uint64_t *)&v128);
  v78 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v75, "shape", (uint64_t *)&v128);
  v79 = v128;
  v128 = 0;
  if (v79)
    (*(void (**)(void *))(*(_QWORD *)v79 + 8))(v79);
  v80 = (std::__shared_weak_count *)v97.n128_u64[1];
  if (v97.n128_u64[1])
  {
    v81 = (unint64_t *)(v97.n128_u64[1] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 32))(*((_QWORD *)v78 + 5), 1);
  v83 = *a3;
  v84 = (std::__shared_weak_count_vtbl *)__p;
  v95 = __p;
  if (__p)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v84;
  }
  else
  {
    v85 = 0;
  }
  v96 = v85;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v83 + 184))(v83, &v95);
  v86 = v96;
  if (v96)
  {
    p_shared_owners = (unint64_t *)&v96->__shared_owners_;
    do
      v88 = __ldaxr(p_shared_owners);
    while (__stlxr(v88 - 1, p_shared_owners));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = *a3;
  v119[0] = &off_1EA9A1058;
  v120 = v119;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 200))(v89, v119);
  v90 = v120;
  if (v120 == v119)
  {
    v91 = 4;
    v90 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_107;
    v91 = 5;
  }
  (*(void (**)(_QWORD *))(*v90 + 8 * v91))(v90);
LABEL_107:
  if (__p)
  {
    v92 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v92, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v117, 0);
  result = v118;
  if (v118)
  {
    v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v118);
    return MEMORY[0x1E0C023A0](v94, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07EC520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,uint64_t a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t *v48;
  uint64_t v50;

  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a27, 0);
  v50 = *v48;
  *v48 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a41, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a42, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateConstexprSparseToDense(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  void *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  MIL::IRValue *Attribute;
  uint64_t *v18;
  uint64_t Data;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  MIL::IRValueType *Type;
  uint64_t v24;
  int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  int v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  void *v75[2];
  char v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  void *v79[2];
  char v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  void *__p[2];
  char v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  const void *v87;
  std::__shared_weak_count *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  const void *v92;
  std::__shared_weak_count *v93;
  void *v94;
  std::__shared_weak_count *v95;

  std::string::basic_string[abi:ne180100]<0>(&v89, "nonzero_data");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)&v89, &v92);
  if (v92
  {
    v94 = v5;
    v95 = v93;
    if (v93)
    {
      p_shared_owners = (unint64_t *)&v93->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v94 = 0;
    v95 = 0;
  }
  v8 = v93;
  if (v93)
  {
    v9 = (unint64_t *)&v93->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(v91) < 0)
    operator delete(v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "mask");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)&v89, &v87);
  if (v87
  {
    v92 = v11;
    v93 = v88;
    if (v88)
    {
      v12 = (unint64_t *)&v88->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    v92 = 0;
    v93 = 0;
  }
  v14 = v88;
  if (v88)
  {
    v15 = (unint64_t *)&v88->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v91) < 0)
    operator delete(v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "shape");
  Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute((uint64_t)this, (unsigned __int8 *)&v89);
  v18 = (uint64_t *)MIL::IRValue::AsTensor(Attribute);
  Data = MIL::IRTensorValue::GetDataView<unsigned int>(v18);
  v21 = v20;
  if (SHIBYTE(v91) < 0)
    operator delete(v89);
  v22 = (*(uint64_t (**)(MIL::Operators::Common::ios16::CustomValidators *))(*(_QWORD *)this + 176))(this);
  if (*(_QWORD *)(v22 + 8) == *(_QWORD *)v22)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v22);
  v24 = MIL::IRValueType::AsTensorType(Type);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 88))(v24);
  v26 = v94;
  v27 = (*(uint64_t (**)(void *))(*(_QWORD *)v94 + 32))(v94);
  if (v25 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 88))(v27))
  {
    v28 = MIL::IRValueType::AsTensorType(Type);
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 96))(v28);
    v89 = 0;
    v90 = 0;
    v91 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v89, *(const void **)v29, *(_QWORD *)(v29 + 8), (uint64_t)(*(_QWORD *)(v29 + 8) - *(_QWORD *)v29) >> 3);
    if ((MIL::Operators::Common::Shared::MatchesExpectedShape((uint64_t *)&v89, Data, v21) & 1) != 0)
    {
      v30 = (*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)Type + 16))(Type);
      v31 = (void *)v92;
      v32 = (*(uint64_t (**)(const void *))(*(_QWORD *)v92 + 32))(v92);
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32) == vcvtpd_u64_f64((double)v30 * 0.125))
      {
        v33 = (unsigned __int8 *)MIL::IRTensorValue::GetDataView<unsigned char>(v31);
        if (v34)
        {
          v35 = 0;
          v36 = 0;
          v37 = &v33[v34];
          do
          {
            if (v35 + 8 <= v30)
              v38 = 8;
            else
              v38 = v30 - v35;
            if (v38)
            {
              v39 = 0;
              do
                v36 += (*v33 >> v39++) & 1;
              while (v38 > v39);
            }
            v35 += v38;
            ++v33;
          }
          while (v33 != v37);
        }
        else
        {
          v36 = 0;
        }
        v59 = (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 32))(v26);
        if (v36 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59))
        {
          MIL::ValidationResult::ValidationResult(a2);
LABEL_86:
          if (v89)
          {
            v90 = v89;
            operator delete(v89);
          }
          goto LABEL_88;
        }
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v61 = (std::__shared_weak_count *)LocationPtr[1];
        v73 = *LocationPtr;
        v74 = v61;
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        std::string::basic_string[abi:ne180100]<0>(v71, "Number of set bits in attribute 'mask' must match the number of elements in attribute 'nonZeroData'");
        MIL::ValidationResult::ValidationResult(a2, &v73, 322, v71);
        if (v72 < 0)
          operator delete(v71[0]);
        v51 = v74;
        if (!v74)
          goto LABEL_86;
        v64 = (unint64_t *)&v74->__shared_owners_;
        do
          v53 = __ldaxr(v64);
        while (__stlxr(v53 - 1, v64));
      }
      else
      {
        v54 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v55 = (std::__shared_weak_count *)v54[1];
        v77 = *v54;
        v78 = v55;
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
        }
        std::string::basic_string[abi:ne180100]<0>(v75, "Attribute mask and shape should satisfy maskSize == std::ceil( prod(shape) / 8.0)");
        MIL::ValidationResult::ValidationResult(a2, &v77, 322, v75);
        if (v76 < 0)
          operator delete(v75[0]);
        v51 = v78;
        if (!v78)
          goto LABEL_86;
        v58 = (unint64_t *)&v78->__shared_owners_;
        do
          v53 = __ldaxr(v58);
        while (__stlxr(v53 - 1, v58));
      }
    }
    else
    {
      v47 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v48 = (std::__shared_weak_count *)v47[1];
      v81 = *v47;
      v82 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      std::string::basic_string[abi:ne180100]<0>(v79, "Attribute shape and output's shape should match");
      MIL::ValidationResult::ValidationResult(a2, &v81, 322, v79);
      if (v80 < 0)
        operator delete(v79[0]);
      v51 = v82;
      if (!v82)
        goto LABEL_86;
      v52 = (unint64_t *)&v82->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
    }
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
    goto LABEL_86;
  }
  v40 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v41 = (std::__shared_weak_count *)v40[1];
  v85 = *v40;
  v86 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Attribute nonZeroData and output should have same dtype");
  MIL::ValidationResult::ValidationResult(a2, &v85, 306, __p);
  if (v84 < 0)
    operator delete(__p[0]);
  v44 = v86;
  if (v86)
  {
    v45 = (unint64_t *)&v86->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
LABEL_88:
  v65 = v93;
  if (v93)
  {
    v66 = (unint64_t *)&v93->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v95;
  if (v95)
  {
    v69 = (unint64_t *)&v95->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

void sub_1E07ECE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  uint64_t v40;
  void *v42;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  v42 = *(void **)(v40 - 120);
  if (v42)
  {
    *(_QWORD *)(v40 - 112) = v42;
    operator delete(v42);
  }
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v40 - 96);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v40 - 80);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ConstexprSparseToDense::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  char **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  void **v33;
  char *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  char **v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void **v69;
  unsigned __int8 *v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void **v77;
  unsigned __int8 *v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t result;
  uint64_t v94;
  void *v95;
  std::__shared_weak_count *v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __int128 v100;
  __int128 v101;
  void *v102[2];
  uint64_t v103;
  void *__p;
  void *v105;
  _QWORD *v106;
  void *v107;
  void *v108;
  _QWORD *v109;
  void *v110;
  void *v111;
  _QWORD *v112;
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  char **v117;
  uint64_t v118;
  _QWORD v119[3];
  _QWORD *v120;
  _QWORD v121[3];
  _QWORD *v122;
  _QWORD v123[3];
  _QWORD *v124;
  void *v125;
  void *v126;
  _QWORD *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void **v132;
  void **v133;
  uint64_t v134;
  uint64_t v135;
  char **v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v117 = 0;
  v118 = 0;
  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  v132 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v117, (void **)v6);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v132, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v117, 1uLL);
  v7 = v117;
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = operator new(8uLL);
  v125 = v9;
  *v9 = v8;
  v126 = v9 + 1;
  v127 = v9 + 1;
  v128 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v125);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = operator new(8uLL);
  v110 = v11;
  *v11 = v10;
  v111 = v11 + 1;
  v112 = v11 + 1;
  v129 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v110);
  v12 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v13 = operator new(8uLL);
  v107 = v13;
  *v13 = v12;
  v108 = v13 + 1;
  v109 = v13 + 1;
  v130 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v107);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v105 = v15 + 1;
  v106 = v15 + 1;
  v131 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v128, 4, &v113);
  MIL::IRParameter::Make(&v113, &v114);
  v16 = v114;
  v115 = v114;
  if (v114)
  {
    v17 = (_QWORD *)operator new();
    v18 = v114;
    *v17 = &unk_1EA99F888;
    v17[1] = 0;
    v17[2] = 0;
    v17[3] = v18;
  }
  else
  {
    v17 = 0;
  }
  v116 = v17;
  v114 = 0;
  v19 = v7[2];
  v20 = v7[1];
  if (v20 >= v19)
  {
    v22 = (v20 - *v7) >> 4;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v24 = v19 - *v7;
    if (v24 >> 3 > v23)
      v23 = v24 >> 3;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
      v25 = 0xFFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    v136 = v7 + 2;
    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v7 + 2), v25);
    v28 = (uint64_t *)&v26[16 * v22];
    *v28 = v16;
    v28[1] = (uint64_t)v17;
    v115 = 0;
    v116 = 0;
    v30 = *v7;
    v29 = v7[1];
    if (v29 == *v7)
    {
      v33 = (void **)v7[1];
      v31 = &v26[16 * v22];
    }
    else
    {
      v31 = &v26[16 * v22];
      do
      {
        v32 = *((_OWORD *)v29 - 1);
        v29 -= 16;
        *((_OWORD *)v31 - 1) = v32;
        v31 -= 16;
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
      }
      while (v29 != v30);
      v33 = (void **)*v7;
      v29 = v7[1];
    }
    v21 = (char *)(v28 + 2);
    *v7 = v31;
    v132 = v33;
    v133 = v33;
    v7[1] = (char *)(v28 + 2);
    v134 = (uint64_t)v29;
    v34 = v7[2];
    v7[2] = &v26[16 * v27];
    v135 = (uint64_t)v34;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v132);
  }
  else
  {
    *(_QWORD *)v20 = v16;
    *((_QWORD *)v20 + 1) = v17;
    v21 = v20 + 16;
    v115 = 0;
    v116 = 0;
  }
  v7[1] = v21;
  v35 = v114;
  v114 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v113.n128_u64[1];
  if (v113.n128_u64[1])
  {
    v37 = (unint64_t *)(v113.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (__p)
  {
    v105 = __p;
    operator delete(__p);
  }
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  *(_OWORD *)v102 = *(_OWORD *)a2;
  v103 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v39 = v118;
  *(_QWORD *)&v101 = v118;
  if (v118)
  {
    v40 = (_QWORD *)operator new();
    *v40 = &unk_1EA99F8E8;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v39;
  }
  else
  {
    v40 = 0;
  }
  *((_QWORD *)&v101 + 1) = v40;
  v118 = 0;
  *(_QWORD *)&v100 = v117;
  if (v117)
  {
    v41 = (_QWORD *)operator new();
    v42 = v117;
    *v41 = &unk_1EA99F948;
    v41[1] = 0;
    v41[2] = 0;
    v41[3] = v42;
  }
  else
  {
    v41 = 0;
  }
  *((_QWORD *)&v100 + 1) = v41;
  v117 = 0;
  v123[0] = &unk_1EA99FAC8;
  v123[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateConstexprSparseToDense;
  v124 = v123;
  v121[0] = &off_1EA9A10D8;
  v121[1] = a1;
  v122 = v121;
  MIL::IROperator::Make((__int128 *)v102, &v101, &v100, (uint64_t)v123, (uint64_t)v121, a3);
  v43 = v122;
  if (v122 == v121)
  {
    v44 = 4;
    v43 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_44;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_44:
  v45 = v124;
  if (v124 == v123)
  {
    v46 = 4;
    v45 = v123;
    goto LABEL_48;
  }
  if (v124)
  {
    v46 = 5;
LABEL_48:
    (*(void (**)(void))(*v45 + 8 * v46))();
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (SHIBYTE(v103) < 0)
    operator delete(v102[0]);
  v53 = (_OWORD *)operator new();
  *v53 = 0u;
  v53[1] = 0u;
  *((_DWORD *)v53 + 8) = 1065353216;
  __p = v53;
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = operator new(8uLL);
  v128 = v55;
  *v55 = v54;
  v129 = (uint64_t)(v55 + 1);
  v130 = (uint64_t)(v55 + 1);
  v132 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v128);
  v56 = MIL::IRUnknownDimension::Make(a1, 0);
  v57 = operator new(8uLL);
  v125 = v57;
  *v57 = v56;
  v126 = v57 + 1;
  v127 = v57 + 1;
  v133 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v125);
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = operator new(8uLL);
  v110 = v59;
  *v59 = v58;
  v111 = v59 + 1;
  v112 = v59 + 1;
  v134 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v110);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = operator new(8uLL);
  v107 = v61;
  *v61 = v60;
  v108 = v61 + 1;
  v109 = v61 + 1;
  v135 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v107);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v132, 4, &v99);
  MIL::IRParameter::Make(&v99, &v115);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v53, "nonzero_data", &v115);
  v63 = v115;
  v115 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v99.n128_u64[1];
  if (v99.n128_u64[1])
  {
    v65 = (unint64_t *)(v99.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  if (v128)
  {
    v129 = (uint64_t)v128;
    operator delete(v128);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  v67 = __p;
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v69 = (void **)operator new(8uLL);
  v132 = v69;
  *v69 = (void *)v68;
  v133 = v69 + 1;
  v134 = (uint64_t)(v69 + 1);
  v125 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v125, 1, &v98);
  MIL::IRParameter::Make(&v98, (uint64_t *)&v128);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v67, "mask", (uint64_t *)&v128);
  v71 = v128;
  v128 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  v72 = (std::__shared_weak_count *)v98.n128_u64[1];
  if (v98.n128_u64[1])
  {
    v73 = (unint64_t *)(v98.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  v75 = __p;
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = (void **)operator new(8uLL);
  v132 = v77;
  *v77 = (void *)v76;
  v133 = v77 + 1;
  v134 = (uint64_t)(v77 + 1);
  v125 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v125, 1, &v97);
  MIL::IRParameter::Make(&v97, (uint64_t *)&v128);
  v78 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v75, "shape", (uint64_t *)&v128);
  v79 = v128;
  v128 = 0;
  if (v79)
    (*(void (**)(void *))(*(_QWORD *)v79 + 8))(v79);
  v80 = (std::__shared_weak_count *)v97.n128_u64[1];
  if (v97.n128_u64[1])
  {
    v81 = (unint64_t *)(v97.n128_u64[1] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 32))(*((_QWORD *)v78 + 5), 1);
  v83 = *a3;
  v84 = (std::__shared_weak_count_vtbl *)__p;
  v95 = __p;
  if (__p)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v84;
  }
  else
  {
    v85 = 0;
  }
  v96 = v85;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v83 + 184))(v83, &v95);
  v86 = v96;
  if (v96)
  {
    p_shared_owners = (unint64_t *)&v96->__shared_owners_;
    do
      v88 = __ldaxr(p_shared_owners);
    while (__stlxr(v88 - 1, p_shared_owners));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = *a3;
  v119[0] = &off_1EA9A1158;
  v120 = v119;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 200))(v89, v119);
  v90 = v120;
  if (v120 == v119)
  {
    v91 = 4;
    v90 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_107;
    v91 = 5;
  }
  (*(void (**)(_QWORD *))(*v90 + 8 * v91))(v90);
LABEL_107:
  if (__p)
  {
    v92 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v92, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v117, 0);
  result = v118;
  if (v118)
  {
    v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v118);
    return MEMORY[0x1E0C023A0](v94, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07ED9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,uint64_t a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t *v48;
  uint64_t v50;

  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a27, 0);
  v50 = *v48;
  *v48 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a41, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a42, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A0DD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A0DD8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::IRTensorValueType *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int Axis;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  MIL::IRNamedValueType ***v20;
  uint64_t Name;
  __int128 v22;
  std::__shared_weak_count_vtbl *v23;
  MIL::Operators::Common::ios16::ConstExprs::AffineDequantize *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *result;
  uint64_t v38;
  std::string v39;
  std::__shared_weak_count_vtbl *v40;
  MIL::Operators::Common::ios16::ConstExprs::AffineDequantize *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  void *v51;
  uint64_t v52;
  __int128 v53;

  std::string::basic_string[abi:ne180100]<0>(&v50, "quantized_data");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)&v50, &v53);
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  std::string::basic_string[abi:ne180100]<0>(&v50, "zero_point");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)&v50, &v49);
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  std::string::basic_string[abi:ne180100]<0>(&v50, "scale");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)&v50, &v48);
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  std::string::basic_string[abi:ne180100]<0>(&v50, "axis");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)&v50, &v46);
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  v6 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v53 + 32))(v53);
  v7 = MIL::IRTensorValueType::Rank(v6);
  v44 = v46;
  v45 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  Axis = MIL::Operators::Common::Shared::ValidateAndGetAxis(&v44);
  v11 = v45;
  if (v45)
  {
    v12 = (unint64_t *)&v45->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (Axis >= 0)
    v14 = 0;
  else
    v14 = v7;
  v43 = v14 + Axis;
  v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v53 + 32))(v53);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v50, *(const void **)v16, *(_QWORD *)(v16 + 8), (uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 3);
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v48 + 32))(v48);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 88))(v17);
  v42 = 0;
  v42 = MIL::IRTensorValueType::MakeWithShape(*(void (****)(MIL::MILContextImpl *__hidden))(a1 + 8), v18, (uint64_t)&v50);
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,unsigned long &>(&v42, &v53, &v48, &v49, &v43, (uint64_t *)&v41);
  v19 = v42;
  v40 = (std::__shared_weak_count_vtbl *)v41;
  v41 = 0;
  v20 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
  Name = MIL::IRNamedValueType::GetName(**v20);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v22 = *(_OWORD *)Name;
    v39.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v22;
  }
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v19, &v40, (uint64_t)&v39);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v23 = v40;
  v40 = 0;
  if (v23)
    (*((void (**)(std::__shared_weak_count_vtbl *))v23->~__shared_weak_count + 1))(v23);
  v24 = v41;
  v41 = 0;
  if (v24)
  {
    MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::~AffineDequantize(v24);
    MEMORY[0x1E0C023A0]();
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  v25 = v47;
  if (v47)
  {
    v26 = (unint64_t *)&v47->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  *a3 = v38;
  if (v38)
  {
    result = (_QWORD *)operator new();
    *result = &unk_1EA992A68;
    result[1] = 0;
    result[2] = 0;
    result[3] = v38;
  }
  else
  {
    result = 0;
  }
  a3[1] = result;
  return result;
}

void sub_1E07EE124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, MIL::Operators::Common::ios16::ConstExprs::AffineDequantize *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,unsigned long &>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v12 = operator new();
  v13 = *a1;
  v14 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v25 = *a3;
  v26 = v14;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v24 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::AffineDequantize(v12, v13, &v26, &v25, &v24, *a5);
  *a6 = v12;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1E07EE500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  MEMORY[0x1E0C023A0](v13, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A0E58;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0E58;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(void (****a1)(MIL::MILContextImpl *__hidden this)@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X4>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  void *exception;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  void *__p;
  void *v29;
  uint64_t v30;

  v8 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "quantized_data");
  v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    *(_QWORD *)&v27 = v8;
    *((_QWORD *)&v27 + 1) = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute quantized_data is undefined for constexpr_affine_dequantize");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v27, (uint64_t)&__p, 315);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
  if (!v10)
  {
    v24 = __cxa_allocate_exception(0x48uLL);
    *(_QWORD *)&v27 = v8;
    *((_QWORD *)&v27 + 1) = v7;
    if (v7)
    {
      v25 = (unint64_t *)&v7->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute scale is undefined for constexpr_affine_dequantize");
    MIL::ValidationError::ValidationError((uint64_t)v24, &v27, (uint64_t)&__p, 315);
  }
  v11 = MIL::IRValue::AsTensor(*((MIL::IRValue **)v9 + 5));
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
  __p = 0;
  v29 = 0;
  v30 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v13, *(_QWORD *)(v13 + 8), (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 3);
  v14 = MIL::IRValue::AsTensor(*((MIL::IRValue **)v10 + 5));
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
  v17 = MIL::IRTensorValueType::MakeWithShape(*a1, v16, (uint64_t)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v18 = (uint64_t *)operator new(8uLL);
  *a4 = v18;
  *v18++ = v17;
  a4[1] = v18;
  a4[2] = v18;
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    v19 = (unint64_t *)&v7->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07EE7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count *v17;
  void *v18;
  char v20;
  char v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (a17 < 0)
  {
    std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(&__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()();
    if ((v21 & 1) == 0)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A0ED8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A0ED8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()@<X0>(uint64_t a1@<X0>, MIL::IRObject *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  MIL::IRNamedValueType ***v15;
  uint64_t Name;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *result;
  void *exception;
  _QWORD *LocationPtr;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::string v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *__p;
  void *v37;
  uint64_t v38;
  __int128 v39;

  std::string::basic_string[abi:ne180100]<0>(&__p, "source_val");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr((uint64_t)a2, (unsigned __int8 *)&__p, &v39);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_dtype");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr((uint64_t)a2, (unsigned __int8 *)&__p, &v34);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v39 + 32))(v39);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  __p = 0;
  v37 = 0;
  v38 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  v8 = (const void **)MIL::IRValue::TryGetScalar<std::string>(v34);
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(a2);
    v28 = LocationPtr[1];
    *(_QWORD *)&v33 = *LocationPtr;
    *((_QWORD *)&v33 + 1) = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    std::string::basic_string[abi:ne180100]<0>(&v32, "Attribute output_dtype is not a scalar string");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v33, (uint64_t)&v32, 306);
  }
  v9 = MIL::StringToIRDataType(v8, 0);
  v10 = MIL::IRTensorValueType::MakeWithShape(*(void (****)(MIL::MILContextImpl *__hidden))(a1 + 8), v9, (uint64_t)&__p);
  v11 = operator new();
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v39;
  v39 = 0uLL;
  MIL::Operators::Common::ios16::ConstExprs::Cast::Cast(v11, v10, &v32);
  size = (std::__shared_weak_count *)v32.__r_.__value_.__l.__size_;
  if (v32.__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(v32.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_QWORD *)&v33 = v11;
  v15 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 176))(a2);
  Name = MIL::IRNamedValueType::GetName(**v15);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v17 = *(_OWORD *)Name;
    v32.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v17;
  }
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v10, (std::__shared_weak_count_vtbl **)&v33, (uint64_t)&v32);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v18 = v33;
  *(_QWORD *)&v33 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  v19 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *a3 = v31;
  if (v31)
  {
    result = (_QWORD *)operator new();
    *result = &unk_1EA992A68;
    result[1] = 0;
    result[2] = 0;
    result[3] = v31;
  }
  else
  {
    result = 0;
  }
  a3[1] = result;
  return result;
}

void sub_1E07EED30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  uint64_t v27;
  char v29;
  char v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;

  if (a16 < 0)
  {
    std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(&a11);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (__p)
      {
        a22 = (uint64_t)__p;
        operator delete(__p);
      }
      v31 = a20;
      if (a20)
      {
        p_shared_owners = (unint64_t *)&a20->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = *(std::__shared_weak_count **)(v27 - 56);
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()();
    if ((v30 & 1) == 0)
      goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A0F58;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0F58;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(void (****a1)(MIL::MILContextImpl *__hidden this)@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X4>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v7;
  void *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  const void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  void *exception;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26[3];
  std::string __p;

  v8 = *(void **)a2;
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "source_val");
  v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v26[0] = v8;
    v26[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute source_val is undefined for constexpr_cast");
    MIL::ValidationError::ValidationError((uint64_t)exception, (__int128 *)v26, (uint64_t)&__p, 315);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_dtype");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v10)
  {
    v23 = __cxa_allocate_exception(0x48uLL);
    v26[0] = v8;
    v26[1] = v7;
    if (v7)
    {
      v24 = (unint64_t *)&v7->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute output_dtype is undefined for constexpr_cast");
    MIL::ValidationError::ValidationError((uint64_t)v23, (__int128 *)v26, (uint64_t)&__p, 315);
  }
  v11 = (const void *)MIL::IRValue::AsTensor(*((MIL::IRValue **)v10 + 5));
  MIL::IRValue::GetScalar<std::string>(v11, &__p);
  v12 = MIL::StringToIRDataType((const void **)&__p.__r_.__value_.__l.__data_, 0);
  v13 = MIL::IRValue::AsTensor(*((MIL::IRValue **)v9 + 5));
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 96))(v14);
  memset(v26, 0, sizeof(v26));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v26, *(const void **)v15, *(_QWORD *)(v15 + 8), (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 3);
  v16 = MIL::IRTensorValueType::MakeWithShape(*a1, v12, (uint64_t)v26);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v17 = (uint64_t *)operator new(8uLL);
  *a4 = v17;
  *v17++ = v16;
  a4[1] = v17;
  a4[2] = v17;
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7)
  {
    v18 = (unint64_t *)&v7->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07EF228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count *v17;
  void *v18;
  char v20;
  char v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (a17 < 0)
  {
    std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(&a12);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()();
    if ((v21 & 1) == 0)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

uint64_t std::unordered_set<unsigned long>::unordered_set(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(a1, a2, a2);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_1E07EF424(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A0FD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A0FD8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  MIL::IRNamedValueType ***v14;
  uint64_t Name;
  __int128 v16;
  std::__shared_weak_count_vtbl *v17;
  MIL::Operators::Common::ios16::ConstExprs::LutToDense *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *result;
  uint64_t v29;
  std::string v30;
  std::__shared_weak_count_vtbl *v31;
  MIL::Operators::Common::ios16::ConstExprs::LutToDense *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  MIL::MILContext **v39[2];
  char v40;
  __int128 v41;

  std::string::basic_string[abi:ne180100]<0>(v39, "indices");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)v39, &v41);
  if (v40 < 0)
    operator delete(v39[0]);
  std::string::basic_string[abi:ne180100]<0>(v39, "lut");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)v39, &v38);
  if (v40 < 0)
    operator delete(v39[0]);
  std::string::basic_string[abi:ne180100]<0>(v39, "shape");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)v39, &v36);
  if (v40 < 0)
    operator delete(v39[0]);
  v34 = v36;
  v35 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  MIL::Operators::Common::Shared::ValidateAndGetShape(&v34, (uint64_t)v39);
  v8 = v35;
  if (v35)
  {
    v9 = (unint64_t *)&v35->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v38 + 32))(v38);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
  v33 = 0;
  v33 = MIL::IRTensorValueType::Make(*(void (****)(MIL::MILContextImpl *__hidden))(a1 + 8), v12, v39);
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::LutToDense,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(&v33, &v38, &v41, (uint64_t *)&v32);
  v13 = v33;
  v31 = (std::__shared_weak_count_vtbl *)v32;
  v32 = 0;
  v14 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
  Name = MIL::IRNamedValueType::GetName(**v14);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v16 = *(_OWORD *)Name;
    v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
  }
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v13, &v31, (uint64_t)&v30);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v17 = v31;
  v31 = 0;
  if (v17)
    (*((void (**)(std::__shared_weak_count_vtbl *))v17->~__shared_weak_count + 1))(v17);
  v18 = v32;
  v32 = 0;
  if (v18)
  {
    MIL::Operators::Common::ios16::ConstExprs::LutToDense::~LutToDense(v18);
    MEMORY[0x1E0C023A0]();
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  v19 = v37;
  if (v37)
  {
    v20 = (unint64_t *)&v37->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *a3 = v29;
  if (v29)
  {
    result = (_QWORD *)operator new();
    *result = &unk_1EA992A68;
    result[1] = 0;
    result[2] = 0;
    result[3] = v29;
  }
  else
  {
    result = 0;
  }
  a3[1] = result;
  return result;
}

void sub_1E07EF7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, MIL::Operators::Common::ios16::ConstExprs::LutToDense *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::LutToDense,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  v8 = operator new();
  v9 = *a1;
  v10 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v17 = *a3;
  v18 = v10;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  MIL::Operators::Common::ios16::ConstExprs::LutToDense::LutToDense(v8, v9, &v18, &v17);
  *a4 = v8;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1E07EFAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1E0C023A0](v11, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A1058;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A1058;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(void (****a1)(MIL::MILContextImpl *__hidden this)@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X4>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  unsigned int *Data;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  void *exception;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  void *__p;
  uint64_t *v44;
  uint64_t *v45;

  v8 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v41 = v7;
  std::string::basic_string[abi:ne180100]<0>(&__p, "lut");
  v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    *(_QWORD *)&v42 = v8;
    *((_QWORD *)&v42 + 1) = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute lut is undefined for constexpr_lut_to_dense");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v42, (uint64_t)&__p, 315);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  if (!v10)
  {
    v38 = __cxa_allocate_exception(0x48uLL);
    *(_QWORD *)&v42 = v8;
    *((_QWORD *)&v42 + 1) = v7;
    if (v7)
    {
      v39 = (unint64_t *)&v7->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute shape is undefined for constexpr_lut_to_dense");
    MIL::ValidationError::ValidationError((uint64_t)v38, &v42, (uint64_t)&__p, 315);
  }
  v11 = (uint64_t *)MIL::IRValue::AsTensor(*((MIL::IRValue **)v10 + 5));
  Data = (unsigned int *)MIL::IRTensorValue::GetDataView<unsigned int>(v11);
  v14 = v13;
  __p = 0;
  v44 = 0;
  v45 = 0;
  std::vector<std::string const*>::reserve(&__p, v13);
  if (v14)
  {
    v15 = &Data[v14];
    do
    {
      v16 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)*Data);
      v17 = v16;
      v18 = v44;
      if (v44 >= v45)
      {
        v20 = ((char *)v44 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v21 = ((char *)v45 - (_BYTE *)__p) >> 2;
        if (v21 <= v20 + 1)
          v21 = v20 + 1;
        if ((unint64_t)((char *)v45 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v45, v22);
        else
          v23 = 0;
        v24 = (uint64_t *)&v23[8 * v20];
        *v24 = v17;
        v19 = v24 + 1;
        v26 = (char *)__p;
        v25 = (char *)v44;
        if (v44 != __p)
        {
          do
          {
            v27 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v24 = v27;
          }
          while (v25 != v26);
          v25 = (char *)__p;
        }
        __p = v24;
        v44 = v19;
        v45 = (uint64_t *)&v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v44 = v16;
        v19 = v18 + 1;
      }
      v44 = v19;
      ++Data;
    }
    while (Data != v15);
  }
  v28 = MIL::IRValue::AsTensor(*((MIL::IRValue **)v9 + 5));
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 88))(v29);
  v31 = MIL::IRTensorValueType::MakeWithShape(*a1, v30, (uint64_t)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v32 = (uint64_t *)operator new(8uLL);
  *a4 = v32;
  *v32++ = v31;
  a4[1] = v32;
  a4[2] = v32;
  if (__p)
  {
    v44 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v41)
  {
    v33 = (unint64_t *)&v41->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_1E07EFEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  char v19;
  char v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a17 < 0)
  {
    std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(&__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      if (a9)
      {
        p_shared_owners = (unint64_t *)&a9->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
          std::__shared_weak_count::__release_weak(a9);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()();
    if ((v20 & 1) == 0)
      goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A10D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A10D8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  MIL::IRNamedValueType ***v14;
  uint64_t Name;
  __int128 v16;
  std::__shared_weak_count_vtbl *v17;
  MIL::Operators::Common::ios16::ConstExprs::SparseToDense *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *result;
  uint64_t v29;
  std::string v30;
  std::__shared_weak_count_vtbl *v31;
  MIL::Operators::Common::ios16::ConstExprs::SparseToDense *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  MIL::MILContext **v39[2];
  char v40;
  __int128 v41;

  std::string::basic_string[abi:ne180100]<0>(v39, "nonzero_data");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)v39, &v41);
  if (v40 < 0)
    operator delete(v39[0]);
  std::string::basic_string[abi:ne180100]<0>(v39, "mask");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)v39, &v38);
  if (v40 < 0)
    operator delete(v39[0]);
  std::string::basic_string[abi:ne180100]<0>(v39, "shape");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)v39, &v36);
  if (v40 < 0)
    operator delete(v39[0]);
  v34 = v36;
  v35 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  MIL::Operators::Common::Shared::ValidateAndGetShape(&v34, (uint64_t)v39);
  v8 = v35;
  if (v35)
  {
    v9 = (unint64_t *)&v35->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v41 + 32))(v41);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
  v33 = 0;
  v33 = MIL::IRTensorValueType::Make(*(void (****)(MIL::MILContextImpl *__hidden))(a1 + 8), v12, v39);
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::SparseToDense,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(&v33, &v41, &v38, (uint64_t *)&v32);
  v13 = v33;
  v31 = (std::__shared_weak_count_vtbl *)v32;
  v32 = 0;
  v14 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
  Name = MIL::IRNamedValueType::GetName(**v14);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v16 = *(_OWORD *)Name;
    v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
  }
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v13, &v31, (uint64_t)&v30);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v17 = v31;
  v31 = 0;
  if (v17)
    (*((void (**)(std::__shared_weak_count_vtbl *))v17->~__shared_weak_count + 1))(v17);
  v18 = v32;
  v32 = 0;
  if (v18)
  {
    MIL::Operators::Common::ios16::ConstExprs::SparseToDense::~SparseToDense(v18);
    MEMORY[0x1E0C023A0]();
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  v19 = v37;
  if (v37)
  {
    v20 = (unint64_t *)&v37->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *a3 = v29;
  if (v29)
  {
    result = (_QWORD *)operator new();
    *result = &unk_1EA992A68;
    result[1] = 0;
    result[2] = 0;
    result[3] = v29;
  }
  else
  {
    result = 0;
  }
  a3[1] = result;
  return result;
}

void sub_1E07F03F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, MIL::Operators::Common::ios16::ConstExprs::SparseToDense *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::SparseToDense,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  v8 = operator new();
  v9 = *a1;
  v10 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v17 = *a3;
  v18 = v10;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  MIL::Operators::Common::ios16::ConstExprs::SparseToDense::SparseToDense(v8, v9, &v18, &v17);
  *a4 = v8;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1E07F0714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1E0C023A0](v11, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A1158;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A1158;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(void (****a1)(MIL::MILContextImpl *__hidden this)@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X4>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  unsigned int *Data;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  void *exception;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  void *__p;
  uint64_t *v44;
  uint64_t *v45;

  v8 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v41 = v7;
  std::string::basic_string[abi:ne180100]<0>(&__p, "nonzero_data");
  v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    *(_QWORD *)&v42 = v8;
    *((_QWORD *)&v42 + 1) = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute nonzero_data is undefined for constexpr_sparse_to_dense");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v42, (uint64_t)&__p, 315);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  if (!v10)
  {
    v38 = __cxa_allocate_exception(0x48uLL);
    *(_QWORD *)&v42 = v8;
    *((_QWORD *)&v42 + 1) = v7;
    if (v7)
    {
      v39 = (unint64_t *)&v7->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute shape is undefined for constexpr_sparse_to_dense");
    MIL::ValidationError::ValidationError((uint64_t)v38, &v42, (uint64_t)&__p, 315);
  }
  v11 = (uint64_t *)MIL::IRValue::AsTensor(*((MIL::IRValue **)v10 + 5));
  Data = (unsigned int *)MIL::IRTensorValue::GetDataView<unsigned int>(v11);
  v14 = v13;
  __p = 0;
  v44 = 0;
  v45 = 0;
  std::vector<std::string const*>::reserve(&__p, v13);
  if (v14)
  {
    v15 = &Data[v14];
    do
    {
      v16 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)*Data);
      v17 = v16;
      v18 = v44;
      if (v44 >= v45)
      {
        v20 = ((char *)v44 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v21 = ((char *)v45 - (_BYTE *)__p) >> 2;
        if (v21 <= v20 + 1)
          v21 = v20 + 1;
        if ((unint64_t)((char *)v45 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v45, v22);
        else
          v23 = 0;
        v24 = (uint64_t *)&v23[8 * v20];
        *v24 = v17;
        v19 = v24 + 1;
        v26 = (char *)__p;
        v25 = (char *)v44;
        if (v44 != __p)
        {
          do
          {
            v27 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v24 = v27;
          }
          while (v25 != v26);
          v25 = (char *)__p;
        }
        __p = v24;
        v44 = v19;
        v45 = (uint64_t *)&v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v44 = v16;
        v19 = v18 + 1;
      }
      v44 = v19;
      ++Data;
    }
    while (Data != v15);
  }
  v28 = MIL::IRValue::AsTensor(*((MIL::IRValue **)v9 + 5));
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 88))(v29);
  v31 = MIL::IRTensorValueType::MakeWithShape(*a1, v30, (uint64_t)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v32 = (uint64_t *)operator new(8uLL);
  *a4 = v32;
  *v32++ = v31;
  a4[1] = v32;
  a4[2] = v32;
  if (__p)
  {
    v44 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v41)
  {
    v33 = (unint64_t *)&v41->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_1E07F0AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  char v19;
  char v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a17 < 0)
  {
    std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(&__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      if (a9)
      {
        p_shared_owners = (unint64_t *)&a9->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
          std::__shared_weak_count::__release_weak(a9);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()();
    if ((v20 & 1) == 0)
      goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

uint64_t MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a1 + 56) = a6;
  MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::ValidateArgsAndTypeConstraints((MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl *)a1);
  return a1;
}

void sub_1E07F0D20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl *this)
{
  MIL::IRTensorValueType *v2;
  MIL::IRTensorValueType *v3;
  MIL::IRTensorValueType *v4;
  MIL::IRTensorValueType *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  MIL::IRTensorValueType *v11;
  MIL::IRTensorValueType *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string *p_p;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::runtime_error *exception;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::runtime_error *v41;
  void *v42;
  char v43;
  std::string __p;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;

  std::string::basic_string[abi:ne180100]<0>(&v42, "Constexpr-AffineDequantize");
  v2 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  std::string::basic_string[abi:ne180100]<0>(&__p, "quantizedData");
  if (MIL::IRTensorValueType::Rank(v2) <= 0)
  {
    std::operator+<char>();
    v15 = std::string::append(&v46, ", parameter ");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v47, (const std::string::value_type *)p_p, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v48, " should have minimum rank equals to 1 but its provided rank is ");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = MIL::IRTensorValueType::Rank(v2);
    std::to_string(&v45, v23);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v45;
    else
      v24 = (std::string *)v45.__r_.__value_.__r.__words[0];
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    else
      v25 = v45.__r_.__value_.__l.__size_;
    v26 = std::string::append(&v49, (const std::string::value_type *)v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v50);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v3 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  std::string::basic_string[abi:ne180100]<0>(&v50, "scale");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsScalarOrVector(v3, (uint64_t)&v50);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v4 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  std::string::basic_string[abi:ne180100]<0>(&v50, "zeroPoint");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsScalarOrVector(v4, (uint64_t)&v50);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v5 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v6 = MIL::IRTensorValueType::Rank(v5);
  if (*((_QWORD *)this + 7) >= v6)
  {
    std::operator+<char>();
    v29 = std::string::append(&v46, ", parameter axis should be in the range 0 <= axis < quantizedData.rank(=");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v45, v6);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v45;
    else
      v31 = (std::string *)v45.__r_.__value_.__r.__words[0];
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    else
      v32 = v45.__r_.__value_.__l.__size_;
    v33 = std::string::append(&v47, (const std::string::value_type *)v31, v32);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append(&v48, ") but provided axis is ");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *((_QWORD *)this + 7));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &__p;
    else
      v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v38 = __p.__r_.__value_.__l.__size_;
    v39 = std::string::append(&v49, (const std::string::value_type *)v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, &v50);
    __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v9 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v8 + 8 * *((_QWORD *)this + 7)));
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  v11 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  std::string::basic_string[abi:ne180100]<0>(&v50, "scale");
  std::string::basic_string[abi:ne180100]<0>(&v49, "axisDim");
  MIL::Operators::Common::Shared::ConstExprs::AssertVectorSizeSameAsDimension(v11, v10, (uint64_t)&v50, (uint64_t)&v49);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v12 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  std::string::basic_string[abi:ne180100]<0>(&v50, "zeroPoint");
  std::string::basic_string[abi:ne180100]<0>(&v49, "axisDim");
  MIL::Operators::Common::Shared::ConstExprs::AssertVectorSizeSameAsDimension(v12, v10, (uint64_t)&v50, (uint64_t)&v49);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputShape(v13, *(_QWORD *)this);
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputDType(v14, *(_QWORD *)this);
  if (v43 < 0)
    operator delete(v42);
}

void sub_1E07F12BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 41) < 0)
    operator delete(*(void **)(v45 - 64));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  MIL::IRDimension **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  std::string::size_type v38;
  std::string::size_type v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  std::string::size_type v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  MIL::Operators::Common::Shared::ConstExprs *v51;
  unsigned int v52;
  float v53;
  _BYTE *v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  std::string::size_type v79;
  std::string::size_type v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  std::string::size_type v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  unint64_t v91;
  __int16 *v92;
  unsigned int v93;
  __int16 v94;
  _BYTE *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  std::string::size_type v105;
  std::string::size_type v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  std::string::size_type v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t v117;
  __int16 *v118;
  __int16 v119;
  _BYTE *v120;
  uint64_t Data;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  std::string::size_type v130;
  std::string::size_type v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  std::string::size_type v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unsigned int v141;
  unint64_t v142;
  MIL::Operators::Common::Shared::ConstExprs *v143;
  float v144;
  _BYTE *v145;
  uint64_t v146;
  std::string::size_type v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char v151;
  unint64_t v152;
  __int16 *v153;
  __int16 v154;
  _BYTE *v155;
  uint64_t v156;
  std::string::size_type v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char v161;
  unint64_t v162;
  __int16 *v163;
  unsigned int v164;
  __int16 v165;
  _BYTE *v166;
  uint64_t v167;
  std::string::size_type v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  MIL::Operators::Common::Shared::ConstExprs *v174;
  float v175;
  _BYTE *v176;
  uint64_t v177;
  std::string::size_type v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char v182;
  unint64_t v183;
  MIL::Operators::Common::Shared::ConstExprs *v184;
  unsigned int v185;
  float v186;
  _BYTE *v187;
  uint64_t v188;
  std::string::size_type v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  float v193;
  unint64_t v194;
  __int16 *v195;
  __int16 v196;
  _BYTE *v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  std::string::size_type v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  float v212;
  unint64_t v213;
  __int16 *v214;
  unsigned int v215;
  __int16 v216;
  _BYTE *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  std::string::size_type v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  float v239;
  unint64_t v240;
  MIL::Operators::Common::Shared::ConstExprs *v241;
  float v242;
  _BYTE *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  std::string::size_type v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  float v257;
  unint64_t v258;
  MIL::Operators::Common::Shared::ConstExprs *v259;
  unsigned int v260;
  float v261;
  _BYTE *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t *v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t *v276;
  std::runtime_error *exception;
  std::string *v278;
  __int128 v279;
  std::string *v280;
  __int128 v281;
  unint64_t *v282;
  unint64_t v283;
  std::runtime_error *v284;
  unint64_t *v285;
  unint64_t v286;
  std::runtime_error *v287;
  unint64_t *v288;
  unint64_t v289;
  std::runtime_error *v290;
  unint64_t *v291;
  unint64_t v292;
  std::runtime_error *v293;
  std::runtime_error *v294;
  std::string *v295;
  __int128 v296;
  std::string *v297;
  __int128 v298;
  std::runtime_error *v299;
  std::string *v300;
  __int128 v301;
  std::string *v302;
  __int128 v303;
  std::runtime_error *v304;
  std::string *v305;
  __int128 v306;
  std::string *v307;
  __int128 v308;
  std::runtime_error *v309;
  std::string *v310;
  __int128 v311;
  std::string *v312;
  __int128 v313;
  std::runtime_error *v314;
  std::string *v315;
  __int128 v316;
  std::string *v317;
  __int128 v318;
  std::runtime_error *v319;
  std::string *v320;
  __int128 v321;
  std::string *v322;
  __int128 v323;
  int v324;
  std::runtime_error *v325;
  std::string *v326;
  __int128 v327;
  std::string *v328;
  __int128 v329;
  int v330;
  std::runtime_error *v331;
  std::string *v332;
  __int128 v333;
  std::string *v334;
  __int128 v335;
  int v336;
  std::runtime_error *v337;
  std::string *v338;
  __int128 v339;
  std::string *v340;
  __int128 v341;
  int v342;
  std::runtime_error *v343;
  std::string *v344;
  __int128 v345;
  std::string *v346;
  __int128 v347;
  uint64_t v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  std::__shared_weak_count *v351;
  std::__shared_weak_count *v352;
  std::__shared_weak_count *v353;
  void *__p;
  _BYTE *v355;
  uint64_t v356;
  void *v357;
  MIL::IRDimension **v358;
  uint64_t v359;
  uint64_t *v360;
  std::__shared_weak_count *v361;
  uint64_t *v362;
  std::__shared_weak_count *v363;
  uint64_t *v364;
  std::__shared_weak_count *v365;
  std::string v366;
  std::string v367;
  std::string v368;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 96))(*(_QWORD *)this);
  v358 = 0;
  v359 = 0;
  v357 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v357, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3);
  v5 = v358;
  if (v358 == v357)
  {
    v8 = 1;
    v7 = 1;
  }
  else
  {
    v6 = (((char *)v358 - (_BYTE *)v357) >> 3) - 1;
    v7 = 1;
    v8 = 1;
    do
    {
      if (v6 == *((_QWORD *)this + 7))
        v7 = v8;
      v9 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v357 + v6));
      v8 *= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
      --v6;
    }
    while (v6 != -1);
    v5 = (MIL::IRDimension **)v357;
  }
  v10 = MIL::IRDimension::AsConstant(v5[*((_QWORD *)this + 7)]);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this);
  v13 = v12;
  if (v12 != 4)
  {
    if (v12 != 5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v366);
      v278 = std::string::insert(&v366, 0, "Constexpr-AffineDequantize: Unsupported ");
      v279 = *(_OWORD *)&v278->__r_.__value_.__l.__data_;
      v367.__r_.__value_.__r.__words[2] = v278->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v279;
      v278->__r_.__value_.__l.__size_ = 0;
      v278->__r_.__value_.__r.__words[2] = 0;
      v278->__r_.__value_.__r.__words[0] = 0;
      v280 = std::string::append(&v367, " output type");
      v281 = *(_OWORD *)&v280->__r_.__value_.__l.__data_;
      v368.__r_.__value_.__r.__words[2] = v280->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v281;
      v280->__r_.__value_.__l.__size_ = 0;
      v280->__r_.__value_.__r.__words[2] = 0;
      v280->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v368);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v14 = (uint64_t *)*((_QWORD *)this + 1);
    v348 = *(_QWORD *)this;
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v351 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v19 = (uint64_t *)*((_QWORD *)this + 3);
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    v350 = v18;
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = (uint64_t *)*((_QWORD *)this + 5);
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (v22)
    {
      v24 = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = (*(uint64_t (**)(uint64_t *))(*v14 + 32))(v14);
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
    v28 = v27;
    if (v27 == 9)
    {
      Data = MIL::IRTensorValue::GetDataView<signed char>(v14);
      v362 = v19;
      v363 = v18;
      if (v18)
      {
        v122 = (unint64_t *)&v18->__shared_owners_;
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      v360 = v23;
      v361 = v22;
      if (v22)
      {
        v124 = (unint64_t *)&v22->__shared_owners_;
        do
          v125 = __ldxr(v124);
        while (__stxr(v125 + 1, v124));
      }
      v126 = (*(uint64_t (**)(uint64_t *))(*v19 + 32))(v19);
      v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 88))(v126);
      v128 = v127;
      if (v127 != 5)
      {
        if (v127 == 4)
        {
          MIL::IRTensorValue::GetDataView<MIL::Fp16>(v19);
          v368.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
          v368.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
          if (v22)
          {
            v291 = (unint64_t *)&v22->__shared_owners_;
            do
              v292 = __ldxr(v291);
            while (__stxr(v292 + 1, v291));
          }
          v293 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v293, "Constexpr-AffineDequantize: output and scale type must be same.");
          __cxa_throw(v293, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v319 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v128, &v366);
        v320 = std::string::insert(&v366, 0, "Constexpr-AffineDequantize: Unsupported dType (");
        v321 = *(_OWORD *)&v320->__r_.__value_.__l.__data_;
        v367.__r_.__value_.__r.__words[2] = v320->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v321;
        v320->__r_.__value_.__l.__size_ = 0;
        v320->__r_.__value_.__r.__words[2] = 0;
        v320->__r_.__value_.__r.__words[0] = 0;
        v322 = std::string::append(&v367, ") for scale.");
        v323 = *(_OWORD *)&v322->__r_.__value_.__l.__data_;
        v368.__r_.__value_.__r.__words[2] = v322->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v323;
        v322->__r_.__value_.__l.__size_ = 0;
        v322->__r_.__value_.__r.__words[2] = 0;
        v322->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v319, &v368);
        __cxa_throw(v319, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v129 = MIL::IRTensorValue::GetDataView<float>(v19);
      v131 = v130;
      v364 = v23;
      v365 = v22;
      if (v22)
      {
        v132 = (unint64_t *)&v22->__shared_owners_;
        do
          v133 = __ldxr(v132);
        while (__stxr(v133 + 1, v132));
      }
      v134 = (*(uint64_t (**)(uint64_t *))(*v23 + 32))(v23);
      v135 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 88))(v134);
      switch(v135)
      {
        case 5:
          v234 = MIL::IRTensorValue::GetDataView<float>(v23);
          v368.__r_.__value_.__r.__words[0] = v129;
          v368.__r_.__value_.__l.__size_ = v131;
          v367.__r_.__value_.__r.__words[0] = v234;
          v367.__r_.__value_.__l.__size_ = v235;
          std::vector<float>::vector(&__p, v8);
          if (v355 != __p)
          {
            v236 = 0;
            v237 = v11 * v7;
            do
            {
              if (v367.__r_.__value_.__l.__size_ == 1)
                v238 = 0;
              else
                v238 = v236 % v237 / v7;
              v239 = *(float *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v367, v238);
              if (v368.__r_.__value_.__l.__size_ == 1)
                v240 = 0;
              else
                v240 = v236 % v237 / v7;
              v241 = (MIL::Operators::Common::Shared::ConstExprs *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v368, v240);
              v242 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(v241, (float)*(char *)(Data + v236), v239, *(float *)v241);
              v243 = __p;
              *((float *)__p + v236++) = v242;
            }
            while (v236 < (v355 - v243) >> 2);
          }
          break;
        case 9:
          v167 = MIL::IRTensorValue::GetDataView<signed char>(v23);
          v368.__r_.__value_.__r.__words[0] = v129;
          v368.__r_.__value_.__l.__size_ = v131;
          v367.__r_.__value_.__r.__words[0] = v167;
          v367.__r_.__value_.__l.__size_ = v168;
          std::vector<float>::vector(&__p, v8);
          if (v355 != __p)
          {
            v169 = 0;
            v170 = v11 * v7;
            do
            {
              if (v367.__r_.__value_.__l.__size_ == 1)
                v171 = 0;
              else
                v171 = v169 % v170 / v7;
              v172 = *(_BYTE *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v367, v171);
              if (v368.__r_.__value_.__l.__size_ == 1)
                v173 = 0;
              else
                v173 = v169 % v170 / v7;
              v174 = (MIL::Operators::Common::Shared::ConstExprs *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v368, v173);
              v175 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(v174, (float)*(char *)(Data + v169), (float)v172, *(float *)v174);
              v176 = __p;
              *((float *)__p + v169++) = v175;
            }
            while (v169 < (v355 - v176) >> 2);
          }
          break;
        case 14:
          v136 = MIL::IRTensorValue::GetDataView<unsigned char>(v23);
          v368.__r_.__value_.__r.__words[0] = v129;
          v368.__r_.__value_.__l.__size_ = v131;
          v367.__r_.__value_.__r.__words[0] = v136;
          v367.__r_.__value_.__l.__size_ = v137;
          std::vector<float>::vector(&__p, v8);
          if (v355 != __p)
          {
            v138 = 0;
            v139 = v11 * v7;
            do
            {
              if (v367.__r_.__value_.__l.__size_ == 1)
                v140 = 0;
              else
                v140 = v138 % v139 / v7;
              v141 = *(unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&v367, v140);
              if (v368.__r_.__value_.__l.__size_ == 1)
                v142 = 0;
              else
                v142 = v138 % v139 / v7;
              v143 = (MIL::Operators::Common::Shared::ConstExprs *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v368, v142);
              v144 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(v143, (float)*(char *)(Data + v138), (float)v141, *(float *)v143);
              v145 = __p;
              *((float *)__p + v138++) = v144;
            }
            while (v138 < (v355 - v145) >> 2);
          }
          break;
        default:
          v342 = v135;
          v343 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v342, &v366);
          v344 = std::string::insert(&v366, 0, "Constexpr-AffineDequantize: Unsupported dType (");
          v345 = *(_OWORD *)&v344->__r_.__value_.__l.__data_;
          v367.__r_.__value_.__r.__words[2] = v344->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v345;
          v344->__r_.__value_.__l.__size_ = 0;
          v344->__r_.__value_.__r.__words[2] = 0;
          v344->__r_.__value_.__r.__words[0] = 0;
          v346 = std::string::append(&v367, ") for zeroPoint.");
          v347 = *(_OWORD *)&v346->__r_.__value_.__l.__data_;
          v368.__r_.__value_.__r.__words[2] = v346->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v347;
          v346->__r_.__value_.__l.__size_ = 0;
          v346->__r_.__value_.__r.__words[2] = 0;
          v346->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v343, &v368);
          __cxa_throw(v343, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v22)
      {
        v244 = (unint64_t *)&v22->__shared_owners_;
        do
          v245 = __ldaxr(v244);
        while (__stlxr(v245 - 1, v244));
        if (!v245)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v246 = v361;
      if (v361)
      {
        v247 = (unint64_t *)&v361->__shared_owners_;
        do
          v248 = __ldaxr(v247);
        while (__stlxr(v248 - 1, v247));
        if (!v248)
        {
          ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
          std::__shared_weak_count::__release_weak(v246);
        }
      }
      v249 = v363;
      if (v363)
      {
        v250 = (unint64_t *)&v363->__shared_owners_;
        do
          v251 = __ldaxr(v250);
        while (__stlxr(v251 - 1, v250));
LABEL_275:
        if (!v251)
        {
          ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
          std::__shared_weak_count::__release_weak(v249);
        }
      }
    }
    else
    {
      if (v27 != 14)
      {
        v294 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v28, &v366);
        v295 = std::string::insert(&v366, 0, "Constexpr-AffineDequantize: Unsupported dType (");
        v296 = *(_OWORD *)&v295->__r_.__value_.__l.__data_;
        v367.__r_.__value_.__r.__words[2] = v295->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v296;
        v295->__r_.__value_.__l.__size_ = 0;
        v295->__r_.__value_.__r.__words[2] = 0;
        v295->__r_.__value_.__r.__words[0] = 0;
        v297 = std::string::append(&v367, ") for quantizedData.");
        v298 = *(_OWORD *)&v297->__r_.__value_.__l.__data_;
        v368.__r_.__value_.__r.__words[2] = v297->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v298;
        v297->__r_.__value_.__l.__size_ = 0;
        v297->__r_.__value_.__r.__words[2] = 0;
        v297->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v294, &v368);
        __cxa_throw(v294, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v29 = MIL::IRTensorValue::GetDataView<unsigned char>(v14);
      v362 = v19;
      v363 = v18;
      if (v18)
      {
        v30 = (unint64_t *)&v18->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v360 = v23;
      v361 = v22;
      if (v22)
      {
        v32 = (unint64_t *)&v22->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v34 = (*(uint64_t (**)(uint64_t *))(*v19 + 32))(v19);
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 88))(v34);
      v36 = v35;
      if (v35 != 5)
      {
        if (v35 == 4)
        {
          MIL::IRTensorValue::GetDataView<MIL::Fp16>(v19);
          v368.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
          v368.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
          if (v22)
          {
            v282 = (unint64_t *)&v22->__shared_owners_;
            do
              v283 = __ldxr(v282);
            while (__stxr(v283 + 1, v282));
          }
          v284 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v284, "Constexpr-AffineDequantize: output and scale type must be same.");
          __cxa_throw(v284, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v304 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v36, &v366);
        v305 = std::string::insert(&v366, 0, "Constexpr-AffineDequantize: Unsupported dType (");
        v306 = *(_OWORD *)&v305->__r_.__value_.__l.__data_;
        v367.__r_.__value_.__r.__words[2] = v305->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v306;
        v305->__r_.__value_.__l.__size_ = 0;
        v305->__r_.__value_.__r.__words[2] = 0;
        v305->__r_.__value_.__r.__words[0] = 0;
        v307 = std::string::append(&v367, ") for scale.");
        v308 = *(_OWORD *)&v307->__r_.__value_.__l.__data_;
        v368.__r_.__value_.__r.__words[2] = v307->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v308;
        v307->__r_.__value_.__l.__size_ = 0;
        v307->__r_.__value_.__r.__words[2] = 0;
        v307->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v304, &v368);
        __cxa_throw(v304, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v37 = MIL::IRTensorValue::GetDataView<float>(v19);
      v39 = v38;
      v364 = v23;
      v365 = v22;
      if (v22)
      {
        v40 = (unint64_t *)&v22->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v42 = (*(uint64_t (**)(uint64_t *))(*v23 + 32))(v23);
      v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 88))(v42);
      switch(v43)
      {
        case 5:
          v252 = MIL::IRTensorValue::GetDataView<float>(v23);
          v368.__r_.__value_.__r.__words[0] = v37;
          v368.__r_.__value_.__l.__size_ = v39;
          v367.__r_.__value_.__r.__words[0] = v252;
          v367.__r_.__value_.__l.__size_ = v253;
          std::vector<float>::vector(&__p, v8);
          if (v355 != __p)
          {
            v254 = 0;
            v255 = v11 * v7;
            do
            {
              if (v367.__r_.__value_.__l.__size_ == 1)
                v256 = 0;
              else
                v256 = v254 % v255 / v7;
              v257 = *(float *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v367, v256);
              if (v368.__r_.__value_.__l.__size_ == 1)
                v258 = 0;
              else
                v258 = v254 % v255 / v7;
              v259 = (MIL::Operators::Common::Shared::ConstExprs *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v368, v258);
              LOBYTE(v260) = *(_BYTE *)(v29 + v254);
              v261 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(v259, (float)v260, v257, *(float *)v259);
              v262 = __p;
              *((float *)__p + v254++) = v261;
            }
            while (v254 < (v355 - v262) >> 2);
          }
          break;
        case 9:
          v177 = MIL::IRTensorValue::GetDataView<signed char>(v23);
          v368.__r_.__value_.__r.__words[0] = v37;
          v368.__r_.__value_.__l.__size_ = v39;
          v367.__r_.__value_.__r.__words[0] = v177;
          v367.__r_.__value_.__l.__size_ = v178;
          std::vector<float>::vector(&__p, v8);
          if (v355 != __p)
          {
            v179 = 0;
            v180 = v11 * v7;
            do
            {
              if (v367.__r_.__value_.__l.__size_ == 1)
                v181 = 0;
              else
                v181 = v179 % v180 / v7;
              v182 = *(_BYTE *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v367, v181);
              if (v368.__r_.__value_.__l.__size_ == 1)
                v183 = 0;
              else
                v183 = v179 % v180 / v7;
              v184 = (MIL::Operators::Common::Shared::ConstExprs *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v368, v183);
              LOBYTE(v185) = *(_BYTE *)(v29 + v179);
              v186 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(v184, (float)v185, (float)v182, *(float *)v184);
              v187 = __p;
              *((float *)__p + v179++) = v186;
            }
            while (v179 < (v355 - v187) >> 2);
          }
          break;
        case 14:
          v44 = MIL::IRTensorValue::GetDataView<unsigned char>(v23);
          v368.__r_.__value_.__r.__words[0] = v37;
          v368.__r_.__value_.__l.__size_ = v39;
          v367.__r_.__value_.__r.__words[0] = v44;
          v367.__r_.__value_.__l.__size_ = v45;
          std::vector<float>::vector(&__p, v8);
          if (v355 != __p)
          {
            v46 = 0;
            v47 = v11 * v7;
            do
            {
              if (v367.__r_.__value_.__l.__size_ == 1)
                v48 = 0;
              else
                v48 = v46 % v47 / v7;
              v49 = *(unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&v367, v48);
              if (v368.__r_.__value_.__l.__size_ == 1)
                v50 = 0;
              else
                v50 = v46 % v47 / v7;
              v51 = (MIL::Operators::Common::Shared::ConstExprs *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v368, v50);
              LOBYTE(v52) = *(_BYTE *)(v29 + v46);
              v53 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(v51, (float)v52, (float)v49, *(float *)v51);
              v54 = __p;
              *((float *)__p + v46++) = v53;
            }
            while (v46 < (v355 - v54) >> 2);
          }
          break;
        default:
          v324 = v43;
          v325 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v324, &v366);
          v326 = std::string::insert(&v366, 0, "Constexpr-AffineDequantize: Unsupported dType (");
          v327 = *(_OWORD *)&v326->__r_.__value_.__l.__data_;
          v367.__r_.__value_.__r.__words[2] = v326->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v327;
          v326->__r_.__value_.__l.__size_ = 0;
          v326->__r_.__value_.__r.__words[2] = 0;
          v326->__r_.__value_.__r.__words[0] = 0;
          v328 = std::string::append(&v367, ") for zeroPoint.");
          v329 = *(_OWORD *)&v328->__r_.__value_.__l.__data_;
          v368.__r_.__value_.__r.__words[2] = v328->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v329;
          v328->__r_.__value_.__l.__size_ = 0;
          v328->__r_.__value_.__r.__words[2] = 0;
          v328->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v325, &v368);
          __cxa_throw(v325, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v22)
      {
        v263 = (unint64_t *)&v22->__shared_owners_;
        do
          v264 = __ldaxr(v263);
        while (__stlxr(v264 - 1, v263));
        if (!v264)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v265 = v361;
      if (v361)
      {
        v266 = (unint64_t *)&v361->__shared_owners_;
        do
          v267 = __ldaxr(v266);
        while (__stlxr(v267 - 1, v266));
        if (!v267)
        {
          ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
          std::__shared_weak_count::__release_weak(v265);
        }
      }
      v249 = v363;
      if (v363)
      {
        v268 = (unint64_t *)&v363->__shared_owners_;
        do
          v251 = __ldaxr(v268);
        while (__stlxr(v251 - 1, v268));
        goto LABEL_275;
      }
    }
    MIL::IRTensorValueType::MakeFloat32Value(v348, (uint64_t)&__p, &v356);
    v269 = v356;
    *a2 = v356;
    if (v269)
    {
      v270 = (_QWORD *)operator new();
      v271 = v356;
      *v270 = &unk_1EA992A68;
      v270[1] = 0;
      v270[2] = 0;
      v270[3] = v271;
    }
    else
    {
      v270 = 0;
    }
    a2[1] = v270;
    v356 = 0;
    if (__p)
    {
      v355 = __p;
      operator delete(__p);
    }
    if (v22)
    {
      v272 = (unint64_t *)&v22->__shared_owners_;
      do
        v273 = __ldaxr(v272);
      while (__stlxr(v273 - 1, v272));
      if (!v273)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v350)
    {
      v274 = (unint64_t *)&v350->__shared_owners_;
      do
        v275 = __ldaxr(v274);
      while (__stlxr(v275 - 1, v274));
      if (!v275)
      {
        ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
        std::__shared_weak_count::__release_weak(v350);
      }
    }
    v231 = v351;
    if (v351)
    {
      v276 = (unint64_t *)&v351->__shared_owners_;
      do
        v233 = __ldaxr(v276);
      while (__stlxr(v233 - 1, v276));
      goto LABEL_295;
    }
    goto LABEL_297;
  }
  v55 = (uint64_t *)*((_QWORD *)this + 1);
  v349 = *(_QWORD *)this;
  v56 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v353 = v56;
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v60 = (uint64_t *)*((_QWORD *)this + 3);
  v59 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v352 = v59;
  if (v59)
  {
    v61 = (unint64_t *)&v59->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v64 = (uint64_t *)*((_QWORD *)this + 5);
  v63 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v63)
  {
    v65 = (unint64_t *)&v63->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = (*(uint64_t (**)(uint64_t *))(*v55 + 32))(v55);
  v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 88))(v67);
  v69 = v68;
  if (v68 == 9)
  {
    v96 = MIL::IRTensorValue::GetDataView<signed char>(v55);
    v362 = v60;
    v363 = v59;
    if (v59)
    {
      v97 = (unint64_t *)&v59->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v360 = v64;
    v361 = v63;
    if (v63)
    {
      v99 = (unint64_t *)&v63->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v101 = (*(uint64_t (**)(uint64_t *))(*v60 + 32))(v60);
    v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 88))(v101);
    v103 = v102;
    if (v102 != 4)
    {
      if (v102 == 5)
      {
        MIL::IRTensorValue::GetDataView<float>(v60);
        v368.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
        v368.__r_.__value_.__l.__size_ = (std::string::size_type)v63;
        if (v63)
        {
          v288 = (unint64_t *)&v63->__shared_owners_;
          do
            v289 = __ldxr(v288);
          while (__stxr(v289 + 1, v288));
        }
        v290 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v290, "Constexpr-AffineDequantize: output and scale type must be same.");
        __cxa_throw(v290, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v314 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v103, &v366);
      v315 = std::string::insert(&v366, 0, "Constexpr-AffineDequantize: Unsupported dType (");
      v316 = *(_OWORD *)&v315->__r_.__value_.__l.__data_;
      v367.__r_.__value_.__r.__words[2] = v315->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v316;
      v315->__r_.__value_.__l.__size_ = 0;
      v315->__r_.__value_.__r.__words[2] = 0;
      v315->__r_.__value_.__r.__words[0] = 0;
      v317 = std::string::append(&v367, ") for scale.");
      v318 = *(_OWORD *)&v317->__r_.__value_.__l.__data_;
      v368.__r_.__value_.__r.__words[2] = v317->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v318;
      v317->__r_.__value_.__l.__size_ = 0;
      v317->__r_.__value_.__r.__words[2] = 0;
      v317->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v314, &v368);
      __cxa_throw(v314, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v104 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v60);
    v106 = v105;
    v364 = v64;
    v365 = v63;
    if (v63)
    {
      v107 = (unint64_t *)&v63->__shared_owners_;
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
    }
    v109 = (*(uint64_t (**)(uint64_t *))(*v64 + 32))(v64);
    v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 88))(v109);
    switch(v110)
    {
      case 5:
        v188 = MIL::IRTensorValue::GetDataView<float>(v64);
        v368.__r_.__value_.__r.__words[0] = v104;
        v368.__r_.__value_.__l.__size_ = v106;
        v367.__r_.__value_.__r.__words[0] = v188;
        v367.__r_.__value_.__l.__size_ = v189;
        std::vector<MIL::Fp16>::vector(&__p, v8);
        if (v355 != __p)
        {
          v190 = 0;
          v191 = v11 * v7;
          do
          {
            if (v367.__r_.__value_.__l.__size_ == 1)
              v192 = 0;
            else
              v192 = v190 % v191 / v7;
            v193 = *(float *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v367, v192);
            if (v368.__r_.__value_.__l.__size_ == 1)
              v194 = 0;
            else
              v194 = v190 % v191 / v7;
            v195 = (__int16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v368, v194);
            v196 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(*v195, (float)*(char *)(v96 + v190), v193);
            v197 = __p;
            *((_WORD *)__p + v190++) = v196;
          }
          while (v190 < (v355 - v197) >> 1);
        }
        break;
      case 9:
        v146 = MIL::IRTensorValue::GetDataView<signed char>(v64);
        v368.__r_.__value_.__r.__words[0] = v104;
        v368.__r_.__value_.__l.__size_ = v106;
        v367.__r_.__value_.__r.__words[0] = v146;
        v367.__r_.__value_.__l.__size_ = v147;
        std::vector<MIL::Fp16>::vector(&__p, v8);
        if (v355 != __p)
        {
          v148 = 0;
          v149 = v11 * v7;
          do
          {
            if (v367.__r_.__value_.__l.__size_ == 1)
              v150 = 0;
            else
              v150 = v148 % v149 / v7;
            v151 = *(_BYTE *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v367, v150);
            if (v368.__r_.__value_.__l.__size_ == 1)
              v152 = 0;
            else
              v152 = v148 % v149 / v7;
            v153 = (__int16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v368, v152);
            v154 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(*v153, (float)*(char *)(v96 + v148), (float)v151);
            v155 = __p;
            *((_WORD *)__p + v148++) = v154;
          }
          while (v148 < (v355 - v155) >> 1);
        }
        break;
      case 14:
        v111 = MIL::IRTensorValue::GetDataView<unsigned char>(v64);
        v368.__r_.__value_.__r.__words[0] = v104;
        v368.__r_.__value_.__l.__size_ = v106;
        v367.__r_.__value_.__r.__words[0] = v111;
        v367.__r_.__value_.__l.__size_ = v112;
        std::vector<MIL::Fp16>::vector(&__p, v8);
        if (v355 != __p)
        {
          v113 = 0;
          v114 = v11 * v7;
          do
          {
            if (v367.__r_.__value_.__l.__size_ == 1)
              v115 = 0;
            else
              v115 = v113 % v114 / v7;
            v116 = *(unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&v367, v115);
            if (v368.__r_.__value_.__l.__size_ == 1)
              v117 = 0;
            else
              v117 = v113 % v114 / v7;
            v118 = (__int16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v368, v117);
            v119 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(*v118, (float)*(char *)(v96 + v113), (float)v116);
            v120 = __p;
            *((_WORD *)__p + v113++) = v119;
          }
          while (v113 < (v355 - v120) >> 1);
        }
        break;
      default:
        v336 = v110;
        v337 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v336, &v366);
        v338 = std::string::insert(&v366, 0, "Constexpr-AffineDequantize: Unsupported dType (");
        v339 = *(_OWORD *)&v338->__r_.__value_.__l.__data_;
        v367.__r_.__value_.__r.__words[2] = v338->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v339;
        v338->__r_.__value_.__l.__size_ = 0;
        v338->__r_.__value_.__r.__words[2] = 0;
        v338->__r_.__value_.__r.__words[0] = 0;
        v340 = std::string::append(&v367, ") for zeroPoint.");
        v341 = *(_OWORD *)&v340->__r_.__value_.__l.__data_;
        v368.__r_.__value_.__r.__words[2] = v340->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v341;
        v340->__r_.__value_.__l.__size_ = 0;
        v340->__r_.__value_.__r.__words[2] = 0;
        v340->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v337, &v368);
        __cxa_throw(v337, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v198 = v349;
    if (v63)
    {
      v199 = (unint64_t *)&v63->__shared_owners_;
      do
        v200 = __ldaxr(v199);
      while (__stlxr(v200 - 1, v199));
      if (!v200)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v201 = v361;
    if (v361)
    {
      v202 = (unint64_t *)&v361->__shared_owners_;
      do
        v203 = __ldaxr(v202);
      while (__stlxr(v203 - 1, v202));
      if (!v203)
      {
        ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
        std::__shared_weak_count::__release_weak(v201);
      }
    }
    v204 = v363;
    if (v363)
    {
      v205 = (unint64_t *)&v363->__shared_owners_;
      do
        v206 = __ldaxr(v205);
      while (__stlxr(v206 - 1, v205));
LABEL_209:
      if (!v206)
      {
        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
        std::__shared_weak_count::__release_weak(v204);
      }
    }
  }
  else
  {
    if (v68 != 14)
    {
      v299 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v69, &v366);
      v300 = std::string::insert(&v366, 0, "Constexpr-AffineDequantize: Unsupported dType (");
      v301 = *(_OWORD *)&v300->__r_.__value_.__l.__data_;
      v367.__r_.__value_.__r.__words[2] = v300->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v301;
      v300->__r_.__value_.__l.__size_ = 0;
      v300->__r_.__value_.__r.__words[2] = 0;
      v300->__r_.__value_.__r.__words[0] = 0;
      v302 = std::string::append(&v367, ") for quantizedData.");
      v303 = *(_OWORD *)&v302->__r_.__value_.__l.__data_;
      v368.__r_.__value_.__r.__words[2] = v302->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v303;
      v302->__r_.__value_.__l.__size_ = 0;
      v302->__r_.__value_.__r.__words[2] = 0;
      v302->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v299, &v368);
      __cxa_throw(v299, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v70 = MIL::IRTensorValue::GetDataView<unsigned char>(v55);
    v362 = v60;
    v363 = v59;
    if (v59)
    {
      v71 = (unint64_t *)&v59->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    v360 = v64;
    v361 = v63;
    if (v63)
    {
      v73 = (unint64_t *)&v63->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    v75 = (*(uint64_t (**)(uint64_t *))(*v60 + 32))(v60);
    v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 88))(v75);
    v77 = v76;
    if (v76 != 4)
    {
      if (v76 == 5)
      {
        MIL::IRTensorValue::GetDataView<float>(v60);
        v368.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
        v368.__r_.__value_.__l.__size_ = (std::string::size_type)v63;
        if (v63)
        {
          v285 = (unint64_t *)&v63->__shared_owners_;
          do
            v286 = __ldxr(v285);
          while (__stxr(v286 + 1, v285));
        }
        v287 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v287, "Constexpr-AffineDequantize: output and scale type must be same.");
        __cxa_throw(v287, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v309 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v77, &v366);
      v310 = std::string::insert(&v366, 0, "Constexpr-AffineDequantize: Unsupported dType (");
      v311 = *(_OWORD *)&v310->__r_.__value_.__l.__data_;
      v367.__r_.__value_.__r.__words[2] = v310->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v311;
      v310->__r_.__value_.__l.__size_ = 0;
      v310->__r_.__value_.__r.__words[2] = 0;
      v310->__r_.__value_.__r.__words[0] = 0;
      v312 = std::string::append(&v367, ") for scale.");
      v313 = *(_OWORD *)&v312->__r_.__value_.__l.__data_;
      v368.__r_.__value_.__r.__words[2] = v312->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v313;
      v312->__r_.__value_.__l.__size_ = 0;
      v312->__r_.__value_.__r.__words[2] = 0;
      v312->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v309, &v368);
      __cxa_throw(v309, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v78 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v60);
    v80 = v79;
    v364 = v64;
    v365 = v63;
    if (v63)
    {
      v81 = (unint64_t *)&v63->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    v83 = (*(uint64_t (**)(uint64_t *))(*v64 + 32))(v64);
    v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 88))(v83);
    switch(v84)
    {
      case 5:
        v207 = MIL::IRTensorValue::GetDataView<float>(v64);
        v368.__r_.__value_.__r.__words[0] = v78;
        v368.__r_.__value_.__l.__size_ = v80;
        v367.__r_.__value_.__r.__words[0] = v207;
        v367.__r_.__value_.__l.__size_ = v208;
        std::vector<MIL::Fp16>::vector(&__p, v8);
        if (v355 != __p)
        {
          v209 = 0;
          v210 = v11 * v7;
          do
          {
            if (v367.__r_.__value_.__l.__size_ == 1)
              v211 = 0;
            else
              v211 = v209 % v210 / v7;
            v212 = *(float *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v367, v211);
            if (v368.__r_.__value_.__l.__size_ == 1)
              v213 = 0;
            else
              v213 = v209 % v210 / v7;
            v214 = (__int16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v368, v213);
            LOBYTE(v215) = *(_BYTE *)(v70 + v209);
            v216 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(*v214, (float)v215, v212);
            v217 = __p;
            *((_WORD *)__p + v209++) = v216;
          }
          while (v209 < (v355 - v217) >> 1);
        }
        break;
      case 9:
        v156 = MIL::IRTensorValue::GetDataView<signed char>(v64);
        v368.__r_.__value_.__r.__words[0] = v78;
        v368.__r_.__value_.__l.__size_ = v80;
        v367.__r_.__value_.__r.__words[0] = v156;
        v367.__r_.__value_.__l.__size_ = v157;
        std::vector<MIL::Fp16>::vector(&__p, v8);
        if (v355 != __p)
        {
          v158 = 0;
          v159 = v11 * v7;
          do
          {
            if (v367.__r_.__value_.__l.__size_ == 1)
              v160 = 0;
            else
              v160 = v158 % v159 / v7;
            v161 = *(_BYTE *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v367, v160);
            if (v368.__r_.__value_.__l.__size_ == 1)
              v162 = 0;
            else
              v162 = v158 % v159 / v7;
            v163 = (__int16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v368, v162);
            LOBYTE(v164) = *(_BYTE *)(v70 + v158);
            v165 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(*v163, (float)v164, (float)v161);
            v166 = __p;
            *((_WORD *)__p + v158++) = v165;
          }
          while (v158 < (v355 - v166) >> 1);
        }
        break;
      case 14:
        v85 = MIL::IRTensorValue::GetDataView<unsigned char>(v64);
        v368.__r_.__value_.__r.__words[0] = v78;
        v368.__r_.__value_.__l.__size_ = v80;
        v367.__r_.__value_.__r.__words[0] = v85;
        v367.__r_.__value_.__l.__size_ = v86;
        std::vector<MIL::Fp16>::vector(&__p, v8);
        if (v355 != __p)
        {
          v87 = 0;
          v88 = v11 * v7;
          do
          {
            if (v367.__r_.__value_.__l.__size_ == 1)
              v89 = 0;
            else
              v89 = v87 % v88 / v7;
            v90 = *(unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&v367, v89);
            if (v368.__r_.__value_.__l.__size_ == 1)
              v91 = 0;
            else
              v91 = v87 % v88 / v7;
            v92 = (__int16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v368, v91);
            LOBYTE(v93) = *(_BYTE *)(v70 + v87);
            v94 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(*v92, (float)v93, (float)v90);
            v95 = __p;
            *((_WORD *)__p + v87++) = v94;
          }
          while (v87 < (v355 - v95) >> 1);
        }
        break;
      default:
        v330 = v84;
        v331 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v330, &v366);
        v332 = std::string::insert(&v366, 0, "Constexpr-AffineDequantize: Unsupported dType (");
        v333 = *(_OWORD *)&v332->__r_.__value_.__l.__data_;
        v367.__r_.__value_.__r.__words[2] = v332->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v333;
        v332->__r_.__value_.__l.__size_ = 0;
        v332->__r_.__value_.__r.__words[2] = 0;
        v332->__r_.__value_.__r.__words[0] = 0;
        v334 = std::string::append(&v367, ") for zeroPoint.");
        v335 = *(_OWORD *)&v334->__r_.__value_.__l.__data_;
        v368.__r_.__value_.__r.__words[2] = v334->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v335;
        v334->__r_.__value_.__l.__size_ = 0;
        v334->__r_.__value_.__r.__words[2] = 0;
        v334->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v331, &v368);
        __cxa_throw(v331, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v198 = v349;
    if (v63)
    {
      v218 = (unint64_t *)&v63->__shared_owners_;
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v220 = v361;
    if (v361)
    {
      v221 = (unint64_t *)&v361->__shared_owners_;
      do
        v222 = __ldaxr(v221);
      while (__stlxr(v222 - 1, v221));
      if (!v222)
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
      }
    }
    v204 = v363;
    if (v363)
    {
      v223 = (unint64_t *)&v363->__shared_owners_;
      do
        v206 = __ldaxr(v223);
      while (__stlxr(v206 - 1, v223));
      goto LABEL_209;
    }
  }
  MIL::IRTensorValueType::MakeFloat16Value(v198, (uint64_t)&__p, &v356);
  v224 = v356;
  *a2 = v356;
  if (v224)
  {
    v225 = (_QWORD *)operator new();
    v226 = v356;
    *v225 = &unk_1EA992A68;
    v225[1] = 0;
    v225[2] = 0;
    v225[3] = v226;
  }
  else
  {
    v225 = 0;
  }
  a2[1] = v225;
  v356 = 0;
  if (__p)
  {
    v355 = __p;
    operator delete(__p);
  }
  if (v63)
  {
    v227 = (unint64_t *)&v63->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v352)
  {
    v229 = (unint64_t *)&v352->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
      std::__shared_weak_count::__release_weak(v352);
    }
  }
  v231 = v353;
  if (v353)
  {
    v232 = (unint64_t *)&v353->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
LABEL_295:
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
LABEL_297:
  if (v357)
  {
    v358 = (MIL::IRDimension **)v357;
    operator delete(v357);
  }
}

void sub_1E07F2E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  void *v34;
  int v35;
  uint64_t v36;

  if (*(char *)(v36 - 105) < 0)
    operator delete(*(void **)(v36 - 128));
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  if (*(char *)(v36 - 161) < 0)
  {
    operator delete(*(void **)(v36 - 184));
    if ((v35 & 1) == 0)
    {
LABEL_10:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
      if (__p)
      {
        a28 = (uint64_t)__p;
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v34);
  goto LABEL_10;
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::~AffineDequantize(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl>::operator()[abi:ne180100]((uint64_t)v2, v3);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
}

{
  MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::~AffineDequantize(this);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::AffineDequantize(_QWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v12 = a6;
  v13 = a2;
  v10 = MIL::AbstractConstExpr::AbstractConstExpr(a1);
  *v10 = &off_1EA9A11D8;
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,unsigned long &>(&v13, a3, a4, a5, &v12, v10 + 1);
  return a1;
}

void sub_1E07F3450(_Unwind_Exception *a1)
{
  MIL::AbstractConstExpr *v1;

  MIL::AbstractConstExpr::~AbstractConstExpr(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,unsigned long &>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v12 = operator new();
  v13 = *a1;
  v14 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v25 = *a3;
  v26 = v14;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v24 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::Impl(v12, v13, (uint64_t)&v26, (uint64_t)&v25, (uint64_t)&v24, *a5);
  *a6 = v12;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1E07F35CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  MEMORY[0x1E0C023A0](v13, 0x1060C406C0A727ELL);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl **this)
{
  MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::ValidateArgsAndTypeConstraints(this[1]);
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl **this@<X0>, _QWORD *a2@<X8>)
{
  MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::ComputeOutput(this[1], a2);
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl **this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::runtime_error *exception;

  if (a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "AffineDequantize has a single output.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::ComputeOutput(this[1], a3);
}

void sub_1E07F366C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + 2 * a2;
}

void sub_1E07F36DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<float const,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + 4 * a2;
}

void sub_1E07F374C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::default_delete<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 40);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 24);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 8);
    JUMPOUT(0x1E0C023A0);
  }
}

uint64_t MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::ValidateArgsAndTypeConstraints((MIL::Operators::Common::ios16::ConstExprs::Cast::Impl *)a1);
  return a1;
}

void sub_1E07F37E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::Cast::Impl *this)
{
  uint64_t v2;
  void *__p;
  char v4;

  std::string::basic_string[abi:ne180100]<0>(&__p, "Constexpr-Cast");
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputShape(v2, *(_QWORD *)this);
  if (v4 < 0)
    operator delete(__p);
}

void sub_1E07F385C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::Cast::Impl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  MIL::Fp16 *v7;
  unint64_t v8;
  unint64_t v9;
  float *v10;
  uint64_t v11;
  std::string::size_type v12;
  _QWORD *v13;
  std::string::size_type v14;
  int v15;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::runtime_error *v21;
  std::string v22;
  std::string v23;
  std::string __p;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  if (v5 != 4)
  {
    v15 = v5;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::IRDataTypeToString(v15, &v22);
    v17 = std::string::insert(&v22, 0, "Constexpr-Cast: Source type ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v23, " is not supported");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this) != 5)
  {
    v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Invalid output dtype for Constexpr-Cast");
    __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_QWORD **)this;
  v7 = (MIL::Fp16 *)MIL::IRTensorValue::GetDataView<MIL::Fp16>(*((uint64_t **)this + 1));
  v9 = v8;
  std::vector<float>::vector(&__p, v8);
  if (v9)
  {
    v10 = (float *)__p.__r_.__value_.__r.__words[0];
    v11 = 2 * v9;
    do
    {
      *v10++ = MIL::Fp16::GetFloat(v7);
      v7 = (MIL::Fp16 *)((char *)v7 + 2);
      v11 -= 2;
    }
    while (v11);
  }
  MIL::IRTensorValueType::MakeFloat32Value((uint64_t)v6, (uint64_t)&__p, &v23);
  v12 = v23.__r_.__value_.__r.__words[0];
  *a2 = v23.__r_.__value_.__r.__words[0];
  if (v12)
  {
    v13 = (_QWORD *)operator new();
    v14 = v23.__r_.__value_.__r.__words[0];
    *v13 = &unk_1EA992A68;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = v14;
  }
  else
  {
    v13 = 0;
  }
  a2[1] = v13;
  v23.__r_.__value_.__r.__words[0] = 0;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1E07F3A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::~Cast(MIL::Operators::Common::ios16::ConstExprs::Cast *this)
{
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::Cast::Impl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
}

{
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::Cast::Impl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
}

{
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::Cast::Impl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::Operators::Common::ios16::ConstExprs::Cast::Cast(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;

  *MIL::AbstractConstExpr::AbstractConstExpr(a1) = &off_1EA9A1228;
  v6 = operator new();
  v11 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::Impl(v6, a2, (uint64_t)&v11);
  a1[1] = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1E07F3C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MIL::AbstractConstExpr *v9;
  uint64_t v10;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1E0C023A0](v10, 0x60C40AA6EF139);
  MIL::AbstractConstExpr::~AbstractConstExpr(v9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::Cast::Impl **this)
{
  MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::ValidateArgsAndTypeConstraints(this[1]);
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::Cast::Impl **this@<X0>, _QWORD *a2@<X8>)
{
  MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::ComputeOutput(this[1], a2);
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::Cast::Impl **this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::runtime_error *exception;

  if (a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cast has a single output.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::ComputeOutput(this[1], a3);
}

void sub_1E07F3D14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::Cast::Impl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2 + 8);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl *this)
{
  MIL::IRTensorValueType *v2;
  MIL::IRTensorValueType *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::runtime_error *exception;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::runtime_error *v40;
  void *v41;
  char v42;
  std::string __p[2];
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string __val;
  std::string v50;
  std::string v51;
  std::string v52;
  _BYTE v53[32];
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v41, "Constexpr-LutToDense");
  v2 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  std::string::basic_string[abi:ne180100]<0>(__p, "lookupTable");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsVector(v2, (uint64_t)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v3 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsVector(v3, (uint64_t)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputDType(v4, *(_QWORD *)this);
  v5 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsShapeConstant((uint64_t)v5, (uint64_t)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  __val.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  *(_OWORD *)v53 = xmmword_1E0B0ED18;
  *(_OWORD *)&v53[16] = unk_1E0B0ED28;
  v54 = 256;
  std::unordered_set<unsigned long>::unordered_set((uint64_t)__p, (unint64_t *)v53, 5);
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(__p, (unint64_t *)&__val))
  {
    std::operator+<char>();
    v13 = std::string::append(&v51, ", number of palettes should be one of  {2, 4, 16, 64, 256} but provided number of palettes = ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v50, __val.__r_.__value_.__r.__words[0]);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v50;
    else
      v15 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    else
      size = v50.__r_.__value_.__l.__size_;
    v17 = std::string::append(&v52, (const std::string::value_type *)v15, size);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    *(_QWORD *)&v53[16] = *((_QWORD *)&v17->__r_.__value_.__l + 2);
    *(_OWORD *)v53 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, (const std::string *)v53);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)__p);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v9 = log2((double)v8);
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  if (v11 != vcvtpd_u64_f64((double)v12 * 0.125 * (double)(int)v9))
  {
    std::operator+<char>();
    v20 = std::string::append(&v47, " with nBits (=");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v46, (int)v9);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v46;
    else
      v22 = (std::string *)v46.__r_.__value_.__r.__words[0];
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    else
      v23 = v46.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v48, (const std::string::value_type *)v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    __val.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__val.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&__val, "), mismatch in indices size and the shape of output IRTensorValueType. Size of indices (=");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v45, v11);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v45;
    else
      v28 = (std::string *)v45.__r_.__value_.__r.__words[0];
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    else
      v29 = v45.__r_.__value_.__l.__size_;
    v30 = std::string::append(&v50, (const std::string::value_type *)v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v51, ") and the size of output IRTensorValueType (=");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v44, v12);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v44;
    else
      v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      v35 = v44.__r_.__value_.__l.__size_;
    v36 = std::string::append(&v52, (const std::string::value_type *)v34, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    *(_QWORD *)&v53[16] = *((_QWORD *)&v36->__r_.__value_.__l + 2);
    *(_OWORD *)v53 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append((std::string *)v53, ") should follow the equation: indicesSize == ceil(nBits * outputSize / 8.0)");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if ((v53[23] & 0x80000000) != 0)
      operator delete(*(void **)v53);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(__val.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__val.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v40, __p);
    __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v42 < 0)
    operator delete(v41);
}

void sub_1E07F42F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  MIL::IRDimension **v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension ***v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t Data;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  std::runtime_error *exception;
  void *__p;
  _BYTE *v59;
  uint64_t v60;
  void *v61;
  _BYTE *v62;
  uint64_t v63;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 96))(*(_QWORD *)this);
  v62 = 0;
  v63 = 0;
  v61 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v61, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3);
  v5 = (MIL::IRDimension **)v61;
  if (v62 == v61)
  {
    v7 = 1;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    do
    {
      v8 = MIL::IRDimension::AsConstant(v5[v6]);
      v7 *= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
      ++v6;
      v5 = (MIL::IRDimension **)v61;
    }
    while (v6 < (v62 - (_BYTE *)v61) >> 3);
  }
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v10 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v11 = MIL::IRDimension::AsConstant(**v10);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
  v13 = log2((double)v12);
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14);
  v16 = (unint64_t)v13;
  if (v15 > 8)
  {
    if (v15 == 9)
    {
      v46 = *(_QWORD **)this;
      Data = MIL::IRTensorValue::GetDataView<signed char>(*((uint64_t **)this + 1));
      v48 = MIL::IRTensorValue::GetDataView<unsigned char>(*((void **)this + 3));
      std::vector<signed char>::vector(&__p, v7);
      v49 = __p;
      if (v59 != __p)
      {
        v50 = 0;
        v51 = 0;
        do
        {
          if (v16)
          {
            v52 = 0;
            v53 = 0;
            do
            {
              v53 += ((*(unsigned __int8 *)(v48 + ((unint64_t)(v50 + v52) >> 3)) >> ((v50 + v52) & 7)) & 1) << v52;
              ++v52;
            }
            while (v16 != v52);
          }
          else
          {
            v53 = 0;
          }
          v49[v51++] = *(_BYTE *)(Data + v53);
          v49 = __p;
          v50 += v16;
        }
        while (v51 < v59 - (_BYTE *)__p);
      }
      MIL::IRTensorValueType::MakeInt8Value((uint64_t)v46, (uint64_t)&__p, &v60);
      v54 = v60;
      *a2 = v60;
      if (v54)
        goto LABEL_52;
      goto LABEL_53;
    }
    if (v15 == 14)
    {
      v27 = *(_QWORD **)this;
      v28 = MIL::IRTensorValue::GetDataView<unsigned char>(*((void **)this + 1));
      v29 = MIL::IRTensorValue::GetDataView<unsigned char>(*((void **)this + 3));
      std::vector<unsigned char>::vector(&__p, v7);
      v30 = __p;
      if (v59 != __p)
      {
        v31 = 0;
        v32 = 0;
        do
        {
          if (v16)
          {
            v33 = 0;
            v34 = 0;
            do
            {
              v34 += ((*(unsigned __int8 *)(v29 + ((unint64_t)(v31 + v33) >> 3)) >> ((v31 + v33) & 7)) & 1) << v33;
              ++v33;
            }
            while (v16 != v33);
          }
          else
          {
            v34 = 0;
          }
          v30[v32++] = *(_BYTE *)(v28 + v34);
          v30 = __p;
          v31 += v16;
        }
        while (v32 < v59 - (_BYTE *)__p);
      }
      MIL::IRTensorValueType::MakeUInt8Value((uint64_t)v27, (uint64_t)&__p, &v60);
      v35 = v60;
      *a2 = v60;
      if (v35)
        goto LABEL_52;
      goto LABEL_53;
    }
    goto LABEL_59;
  }
  if (v15 == 4)
  {
    v36 = *(_QWORD **)this;
    v37 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*((uint64_t **)this + 1));
    v38 = MIL::IRTensorValue::GetDataView<unsigned char>(*((void **)this + 3));
    std::vector<MIL::Fp16>::vector(&__p, v7);
    v39 = __p;
    if (v59 != __p)
    {
      v40 = 0;
      v41 = 0;
      v42 = (v59 - (_BYTE *)__p) >> 1;
      if (v42 <= 1)
        v42 = 1;
      do
      {
        if (v16)
        {
          v43 = 0;
          v44 = 0;
          do
          {
            v44 += ((*(unsigned __int8 *)(v38 + ((unint64_t)(v40 + v43) >> 3)) >> ((v40 + v43) & 7)) & 1) << v43;
            ++v43;
          }
          while (v16 != v43);
        }
        else
        {
          v44 = 0;
        }
        v39[v41++] = *(_WORD *)(v37 + 2 * v44);
        v40 += v16;
      }
      while (v41 != v42);
    }
    MIL::IRTensorValueType::MakeFloat16Value((uint64_t)v36, (uint64_t)&__p, &v60);
    v45 = v60;
    *a2 = v60;
    if (v45)
      goto LABEL_52;
    goto LABEL_53;
  }
  if (v15 != 5)
  {
LABEL_59:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid dtype for lookupTable");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v17 = *(_QWORD **)this;
  v18 = MIL::IRTensorValue::GetDataView<float>(*((uint64_t **)this + 1));
  v19 = MIL::IRTensorValue::GetDataView<unsigned char>(*((void **)this + 3));
  std::vector<float>::vector(&__p, v7);
  v20 = __p;
  if (v59 != __p)
  {
    v21 = 0;
    v22 = 0;
    v23 = (v59 - (_BYTE *)__p) >> 2;
    if (v23 <= 1)
      v23 = 1;
    do
    {
      if (v16)
      {
        v24 = 0;
        v25 = 0;
        do
        {
          v25 += ((*(unsigned __int8 *)(v19 + ((unint64_t)(v21 + v24) >> 3)) >> ((v21 + v24) & 7)) & 1) << v24;
          ++v24;
        }
        while (v16 != v24);
      }
      else
      {
        v25 = 0;
      }
      v20[v22++] = *(_DWORD *)(v18 + 4 * v25);
      v21 += v16;
    }
    while (v22 != v23);
  }
  MIL::IRTensorValueType::MakeFloat32Value((uint64_t)v17, (uint64_t)&__p, &v60);
  v26 = v60;
  *a2 = v60;
  if (v26)
  {
LABEL_52:
    v55 = (_QWORD *)operator new();
    v56 = v60;
    *v55 = &unk_1EA992A68;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v56;
    goto LABEL_54;
  }
LABEL_53:
  v55 = 0;
LABEL_54:
  a2[1] = v55;
  v60 = 0;
  if (__p)
  {
    v59 = __p;
    operator delete(__p);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
}

void sub_1E07F49C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::~LutToDense(MIL::Operators::Common::ios16::ConstExprs::LutToDense *this)
{
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
}

{
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
}

{
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::Operators::Common::ios16::ConstExprs::LutToDense::LutToDense(_QWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  _QWORD *v7;
  uint64_t v9;

  v9 = a2;
  v7 = MIL::AbstractConstExpr::AbstractConstExpr(a1);
  *v7 = &off_1EA9A1278;
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(&v9, a3, a4, v7 + 1);
  return a1;
}

void sub_1E07F4B4C(_Unwind_Exception *a1)
{
  MIL::AbstractConstExpr *v1;

  MIL::AbstractConstExpr::~AbstractConstExpr(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  v8 = operator new();
  v9 = *a1;
  v10 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v17 = *a3;
  v18 = v10;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::Impl(v8, v9, (uint64_t)&v18, (uint64_t)&v17);
  *a4 = v8;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1E07F4C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1E0C023A0](v11, 0x60C406B8A8D55);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl **this)
{
  MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::ValidateArgsAndTypeConstraints(this[1]);
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl **this@<X0>, _QWORD *a2@<X8>)
{
  MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::ComputeOutput(this[1], a2);
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl **this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::runtime_error *exception;

  if (a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "LutToDense has a single output.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::ComputeOutput(this[1], a3);
}

void sub_1E07F4CEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2 + 24);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2 + 8);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

uint64_t MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::ValidateArgsAndTypeConstraints((MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl *)a1);
  return a1;
}

void sub_1E07F4DA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl *this)
{
  uint64_t v2;
  int v3;
  MIL::IRTensorValueType *v4;
  MIL::IRTensorValueType *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::runtime_error *exception;
  _QWORD *v26;
  uint64_t v27;
  void *__p;
  char v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;

  std::string::basic_string[abi:ne180100]<0>(&__p, "Constexpr-SparseToDense");
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
  v4 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  std::string::basic_string[abi:ne180100]<0>(&v37, "nonZeroData");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsVector(v4, (uint64_t)&v37);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (v3 == 14)
  {
    v5 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
    std::string::basic_string[abi:ne180100]<0>(&v37, "mask if packed");
    MIL::Operators::Common::Shared::ConstExprs::AssertIsVector(v5, (uint64_t)&v37);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
  }
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputDType(v6, *(_QWORD *)this);
  v7 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v37, "output");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsShapeConstant((uint64_t)v7, (uint64_t)&v37);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (v3 == 14)
  {
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
    v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (v10 != vcvtpd_u64_f64((double)v8 * 0.125))
    {
      std::operator+<char>();
      v11 = std::string::append(&v32, ", mismatch in mask size and the shape of output IRTensorValueType. Size of mask (=");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v31, v10);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v31;
      else
        v13 = (std::string *)v31.__r_.__value_.__r.__words[0];
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      else
        size = v31.__r_.__value_.__l.__size_;
      v15 = std::string::append(&v33, (const std::string::value_type *)v13, size);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v17 = std::string::append(&v34, ") and the size of IRTensorValueType (=");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v30, v8);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v30;
      else
        v19 = (std::string *)v30.__r_.__value_.__r.__words[0];
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      else
        v20 = v30.__r_.__value_.__l.__size_;
      v21 = std::string::append(&v35, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v23 = std::string::append(&v36, ") should follow the equation: maskSize == ceil(outputSize / 8)");
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &v37);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else if (v3 == 21)
  {
    v26 = *(_QWORD **)this;
    v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
    std::string::basic_string[abi:ne180100]<0>(&v37, "output");
    std::string::basic_string[abi:ne180100]<0>(&v36, "mask");
    MIL::Operators::Common::Shared::ConstExprs::AssertConstantAndSameShape((uint64_t)v26, v27, (uint64_t)&v37, (uint64_t)&v36);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (v29 < 0)
    operator delete(__p);
}

void sub_1E07F5194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 41) < 0)
    operator delete(*(void **)(v45 - 64));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  MIL::IRDimension **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t Data;
  _WORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  void *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  size_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  uint64_t v95;
  size_t v96;
  unint64_t *v97;
  uint64_t v98;
  size_t v99;
  unint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  size_t v105;
  unint64_t *v106;
  std::runtime_error *v107;
  std::runtime_error *v108;
  std::runtime_error *v109;
  std::runtime_error *v110;
  std::runtime_error *exception;
  std::runtime_error *v112;
  std::runtime_error *v113;
  void *v114;
  _BYTE *v115;
  void *__p;
  _BYTE *v117;
  MIL::IRDimension **v118;
  MIL::IRDimension **v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 96))(*(_QWORD *)this);
  v119 = 0;
  v120 = 0;
  v118 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v118, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3);
  v5 = v118;
  if (v119 == v118)
  {
    v7 = 1;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    do
    {
      v8 = MIL::IRDimension::AsConstant(v5[v6]);
      v7 *= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
      ++v6;
      v5 = v118;
    }
    while (v6 < v119 - v118);
  }
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  switch(v10)
  {
    case 4:
      v11 = *(_QWORD **)this;
      v12 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*((uint64_t **)this + 1));
      v14 = (void *)*((_QWORD *)this + 3);
      v13 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 32))(v14);
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 88))(v17);
      if (v18 == 21)
      {
        v101 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v14);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Fp16>(v12, v101, v102, (uint64_t *)&__p);
      }
      else
      {
        if (v18 != 14)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Invalid dtype for mask");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        Data = MIL::IRTensorValue::GetDataView<unsigned char>(v14);
        std::vector<MIL::Fp16>::vector(&__p, v7);
        v20 = __p;
        if (v117 != __p)
        {
          v21 = 0;
          v22 = 0;
          v23 = (v117 - (_BYTE *)__p) >> 1;
          if (v23 <= 1)
            v23 = 1;
          do
          {
            if (((*(unsigned __int8 *)(Data + (v21 >> 3)) >> (v21 & 7)) & 1) != 0)
              v24 = *(_WORD *)(v12 + 2 * v22++);
            else
              v24 = 0;
            v20[v21++] = v24;
          }
          while (v23 != v21);
        }
      }
      MIL::IRTensorValueType::MakeFloat16Value((uint64_t)v11, (uint64_t)&__p, a2);
      if (__p)
      {
        v117 = __p;
        operator delete(__p);
      }
      if (!v13)
        goto LABEL_129;
      v103 = (unint64_t *)&v13->__shared_owners_;
      do
        v91 = __ldaxr(v103);
      while (__stlxr(v91 - 1, v103));
      goto LABEL_127;
    case 5:
      v50 = *(_QWORD **)this;
      v51 = MIL::IRTensorValue::GetDataView<float>(*((uint64_t **)this + 1));
      v52 = (void *)*((_QWORD *)this + 3);
      v13 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      if (v13)
      {
        v53 = (unint64_t *)&v13->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = (*(uint64_t (**)(void *))(*(_QWORD *)v52 + 32))(v52);
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 88))(v55);
      if (v56 == 21)
      {
        v92 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v52);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<float>(v51, v92, v93, (uint64_t *)&__p);
      }
      else
      {
        if (v56 != 14)
        {
          v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v109, "Invalid dtype for mask");
          __cxa_throw(v109, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v57 = MIL::IRTensorValue::GetDataView<unsigned char>(v52);
        std::vector<float>::vector(&__p, v7);
        v58 = __p;
        if (v117 != __p)
        {
          v59 = 0;
          v60 = 0;
          v61 = (v117 - (_BYTE *)__p) >> 2;
          if (v61 <= 1)
            v61 = 1;
          do
          {
            if (((*(unsigned __int8 *)(v57 + (v60 >> 3)) >> (v60 & 7)) & 1) != 0)
              v62 = *(_DWORD *)(v51 + 4 * v59++);
            else
              v62 = 0;
            v58[v60++] = v62;
          }
          while (v61 != v60);
        }
      }
      MIL::IRTensorValueType::MakeFloat32Value((uint64_t)v50, (uint64_t)&__p, a2);
      if (__p)
      {
        v117 = __p;
        operator delete(__p);
      }
      if (!v13)
        goto LABEL_129;
      v94 = (unint64_t *)&v13->__shared_owners_;
      do
        v91 = __ldaxr(v94);
      while (__stlxr(v91 - 1, v94));
      goto LABEL_127;
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
      goto LABEL_132;
    case 9:
      v76 = *(_QWORD **)this;
      v77 = MIL::IRTensorValue::GetDataView<signed char>(*((uint64_t **)this + 1));
      v78 = (void *)*((_QWORD *)this + 3);
      v13 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      if (v13)
      {
        v79 = (unint64_t *)&v13->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v81 = (*(uint64_t (**)(void *))(*(_QWORD *)v78 + 32))(v78);
      v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 88))(v81);
      if (v82 == 21)
      {
        v98 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v78);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<signed char>(v77, v98, v99, &__p);
      }
      else
      {
        if (v82 != 14)
        {
          v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v112, "Invalid dtype for mask");
          __cxa_throw(v112, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v83 = MIL::IRTensorValue::GetDataView<unsigned char>(v78);
        std::vector<signed char>::vector(&__p, v7);
        v84 = __p;
        if (v117 != __p)
        {
          v85 = 0;
          v86 = 0;
          do
          {
            if (((*(unsigned __int8 *)(v83 + (v86 >> 3)) >> (v86 & 7)) & 1) != 0)
              v87 = *(_BYTE *)(v77 + v85++);
            else
              v87 = 0;
            v84[v86++] = v87;
            v84 = __p;
          }
          while (v86 < v117 - (_BYTE *)__p);
        }
      }
      MIL::IRTensorValueType::MakeInt8Value((uint64_t)v76, (uint64_t)&__p, a2);
      if (__p)
      {
        v117 = __p;
        operator delete(__p);
      }
      if (!v13)
        goto LABEL_129;
      v100 = (unint64_t *)&v13->__shared_owners_;
      do
        v91 = __ldaxr(v100);
      while (__stlxr(v91 - 1, v100));
      goto LABEL_127;
    case 13:
      v63 = *(_QWORD **)this;
      v64 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*((const void **)this + 1));
      v66 = v65;
      v67 = (void *)*((_QWORD *)this + 3);
      v13 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      if (v13)
      {
        v68 = (unint64_t *)&v13->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v70 = (*(uint64_t (**)(void *))(*(_QWORD *)v67 + 32))(v67);
      v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 88))(v70);
      if (v71 == 21)
      {
        v95 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v67);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Int4>(v64, v66, v95, v96, &v114);
      }
      else
      {
        if (v71 != 14)
        {
          v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v110, "Invalid dtype for mask");
          __cxa_throw(v110, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v72 = MIL::IRTensorValue::GetDataView<unsigned char>(v67);
        v122 = v64;
        v123 = v66;
        std::vector<MIL::Int4>::vector(&v114, v7);
        if (v115 != v114)
        {
          v73 = 0;
          v74 = 0;
          do
          {
            if (((*(unsigned __int8 *)(v72 + (v74 >> 3)) >> (v74 & 7)) & 1) != 0)
            {
              v75 = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v122, v73++);
              *((_BYTE *)v114 + v74) = v75;
            }
            else
            {
              MIL::Int4::Int4((MIL::Int4 *)&v121, 0);
              *((_BYTE *)v114 + v74) = v121;
            }
            ++v74;
          }
          while (v74 < v115 - (_BYTE *)v114);
        }
      }
      MIL::PackSubByteVec((uint64_t *)&v114, &__p);
      MIL::IRTensorValueType::MakeInt4Value((uint64_t)v63, (uint64_t)&__p, a2);
      if (__p)
      {
        v117 = __p;
        operator delete(__p);
      }
      if (v114)
      {
        v115 = v114;
        operator delete(v114);
      }
      if (!v13)
        goto LABEL_129;
      v97 = (unint64_t *)&v13->__shared_owners_;
      do
        v91 = __ldaxr(v97);
      while (__stlxr(v91 - 1, v97));
      goto LABEL_127;
    case 14:
      v38 = *(_QWORD **)this;
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*((void **)this + 1));
      v40 = (void *)*((_QWORD *)this + 3);
      v13 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      if (v13)
      {
        v41 = (unint64_t *)&v13->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v43 = (*(uint64_t (**)(void *))(*(_QWORD *)v40 + 32))(v40);
      v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 88))(v43);
      if (v44 == 21)
      {
        v88 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v40);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(v39, v88, v89, &__p);
      }
      else
      {
        if (v44 != 14)
        {
          v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v108, "Invalid dtype for mask");
          __cxa_throw(v108, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v45 = MIL::IRTensorValue::GetDataView<unsigned char>(v40);
        std::vector<unsigned char>::vector(&__p, v7);
        v46 = __p;
        if (v117 != __p)
        {
          v47 = 0;
          v48 = 0;
          do
          {
            if (((*(unsigned __int8 *)(v45 + (v48 >> 3)) >> (v48 & 7)) & 1) != 0)
              v49 = *(_BYTE *)(v39 + v47++);
            else
              v49 = 0;
            v46[v48++] = v49;
            v46 = __p;
          }
          while (v48 < v117 - (_BYTE *)__p);
        }
      }
      MIL::IRTensorValueType::MakeUInt8Value((uint64_t)v38, (uint64_t)&__p, a2);
      if (__p)
      {
        v117 = __p;
        operator delete(__p);
      }
      if (!v13)
        goto LABEL_129;
      v90 = (unint64_t *)&v13->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      goto LABEL_127;
    default:
      if (v10 != 20)
      {
LABEL_132:
        v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v107, "Invalid dtype for argument nonZeroData");
        __cxa_throw(v107, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v25 = *(_QWORD **)this;
      v26 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*((const void **)this + 1));
      v28 = v27;
      v29 = (void *)*((_QWORD *)this + 3);
      v13 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      if (v13)
      {
        v30 = (unint64_t *)&v13->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v32 = (*(uint64_t (**)(void *))(*(_QWORD *)v29 + 32))(v29);
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 88))(v32);
      if (v33 == 21)
      {
        v104 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v29);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v26, v28, v104, v105, &v114);
      }
      else
      {
        if (v33 != 14)
        {
          v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v113, "Invalid dtype for mask");
          __cxa_throw(v113, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v34 = MIL::IRTensorValue::GetDataView<unsigned char>(v29);
        v122 = v26;
        v123 = v28;
        std::vector<MIL::UInt4>::vector(&v114, v7);
        if (v115 != v114)
        {
          v35 = 0;
          v36 = 0;
          do
          {
            if (((*(unsigned __int8 *)(v34 + (v36 >> 3)) >> (v36 & 7)) & 1) != 0)
            {
              v37 = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v122, v35++);
              *((_BYTE *)v114 + v36) = v37;
            }
            else
            {
              MIL::UInt4::UInt4((MIL::UInt4 *)&v121, 0);
              *((_BYTE *)v114 + v36) = v121;
            }
            ++v36;
          }
          while (v36 < v115 - (_BYTE *)v114);
        }
      }
      MIL::PackSubByteVec((uint64_t *)&v114, &__p);
      MIL::IRTensorValueType::MakeUInt4Value((uint64_t)v25, (uint64_t)&__p, a2);
      if (__p)
      {
        v117 = __p;
        operator delete(__p);
      }
      if (v114)
      {
        v115 = v114;
        operator delete(v114);
      }
      if (!v13)
        goto LABEL_129;
      v106 = (unint64_t *)&v13->__shared_owners_;
      do
        v91 = __ldaxr(v106);
      while (__stlxr(v91 - 1, v106));
LABEL_127:
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
LABEL_129:
      if (v118)
      {
        v119 = v118;
        operator delete(v118);
      }
      return;
  }
}

void sub_1E07F5CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  void *v25;
  uint64_t v26;
  void *v28;

  __cxa_free_exception(v25);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  v28 = *(void **)(v26 - 112);
  if (v28)
  {
    *(_QWORD *)(v26 - 104) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::SparseToDense::~SparseToDense(MIL::Operators::Common::ios16::ConstExprs::SparseToDense *this)
{
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
}

{
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
}

{
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::Operators::Common::ios16::ConstExprs::SparseToDense::SparseToDense(_QWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  _QWORD *v7;
  uint64_t v9;

  v9 = a2;
  v7 = MIL::AbstractConstExpr::AbstractConstExpr(a1);
  *v7 = &off_1EA9A12C8;
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(&v9, a3, a4, v7 + 1);
  return a1;
}

void sub_1E07F5F64(_Unwind_Exception *a1)
{
  MIL::AbstractConstExpr *v1;

  MIL::AbstractConstExpr::~AbstractConstExpr(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  v8 = operator new();
  v9 = *a1;
  v10 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v17 = *a3;
  v18 = v10;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::Impl(v8, v9, (uint64_t)&v18, (uint64_t)&v17);
  *a4 = v8;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1E07F606C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1E0C023A0](v11, 0x60C406B8A8D55);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::SparseToDense::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl **this)
{
  MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::ValidateArgsAndTypeConstraints(this[1]);
}

_QWORD *MIL::Operators::Common::ios16::ConstExprs::SparseToDense::ComputeOutput@<X0>(MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::ComputeOutput(this[1], &v6);
  v3 = v6;
  *a2 = v6;
  if (v3)
  {
    result = (_QWORD *)operator new();
    v5 = v6;
    *result = &unk_1EA992A68;
    result[1] = 0;
    result[2] = 0;
    result[3] = v5;
  }
  else
  {
    result = 0;
  }
  a2[1] = result;
  return result;
}

void sub_1E07F6124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::ios16::ConstExprs::SparseToDense::ComputeOutput@<X0>(MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl **this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  std::runtime_error *exception;
  uint64_t v8;

  if (a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "SparseToDense has a single output.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::ComputeOutput(this[1], &v8);
  v4 = v8;
  *a3 = v8;
  if (v4)
  {
    result = (_QWORD *)operator new();
    v6 = v8;
    *result = &unk_1EA992A68;
    result[1] = 0;
    result[2] = 0;
    result[3] = v6;
  }
  else
  {
    result = 0;
  }
  a3[1] = result;
  return result;
}

void sub_1E07F61F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, size_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  v10[0] = a3;
  v10[1] = a4;
  result = (uint64_t)std::vector<MIL::UInt4>::vector(a5, a4);
  if (a5[1] != *a5)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v10, v8);
      if (MIL::UInt1::GetInt((MIL::UInt1 *)&v9))
      {
        result = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(v11, v7++);
        *(_BYTE *)(*a5 + v8) = result;
      }
      else
      {
        result = MIL::UInt4::UInt4((MIL::UInt4 *)&v9, 0);
        *(_BYTE *)(*a5 + v8) = v9;
      }
      ++v8;
    }
    while (v8 < a5[1] - *a5);
  }
  return result;
}

void sub_1E07F62E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Int4>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, size_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  v10[0] = a3;
  v10[1] = a4;
  result = (uint64_t)std::vector<MIL::Int4>::vector(a5, a4);
  if (a5[1] != *a5)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v10, v8);
      if (MIL::UInt1::GetInt((MIL::UInt1 *)&v9))
      {
        result = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(v11, v7++);
        *(_BYTE *)(*a5 + v8) = result;
      }
      else
      {
        result = MIL::Int4::Int4((MIL::Int4 *)&v9, 0);
        *(_BYTE *)(*a5 + v8) = v9;
      }
      ++v8;
    }
    while (v8 < a5[1] - *a5);
  }
  return result;
}

void sub_1E07F63BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, size_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  result = std::vector<unsigned char>::vector(a4, a3);
  if (a4[1] != *a4)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v10 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v11, v7);
      result = (_QWORD *)MIL::UInt1::GetInt((MIL::UInt1 *)&v10);
      if ((_DWORD)result)
        v9 = *(_BYTE *)(a1 + v8++);
      else
        v9 = 0;
      *(_BYTE *)(*a4 + v7++) = v9;
    }
    while (v7 < a4[1] - *a4);
  }
  return result;
}

void sub_1E07F647C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<signed char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, size_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  result = std::vector<signed char>::vector(a4, a3);
  if (a4[1] != *a4)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v10 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v11, v7);
      result = (_QWORD *)MIL::UInt1::GetInt((MIL::UInt1 *)&v10);
      if ((_DWORD)result)
        v9 = *(_BYTE *)(a1 + v8++);
      else
        v9 = 0;
      *(_BYTE *)(*a4 + v7++) = v9;
    }
    while (v7 < a4[1] - *a4);
  }
  return result;
}

void sub_1E07F6534(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Fp16>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  result = std::vector<MIL::Fp16>::vector(a4, a3);
  if (a4[1] != *a4)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v11 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v12, v8);
      result = (_QWORD *)MIL::UInt1::GetInt((MIL::UInt1 *)&v11);
      if ((_DWORD)result)
      {
        v9 = *(_WORD *)(a1 + 2 * v7++);
        v10 = *a4;
        *(_WORD *)(*a4 + 2 * v8) = v9;
      }
      else
      {
        v10 = *a4;
        *(_WORD *)(*a4 + 2 * v8) = 0;
      }
      ++v8;
    }
    while (v8 < (a4[1] - v10) >> 1);
  }
  return result;
}

void sub_1E07F65F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  result = std::vector<float>::vector(a4, a3);
  if (a4[1] != *a4)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v11 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v12, v7);
      result = (_QWORD *)MIL::UInt1::GetInt((MIL::UInt1 *)&v11);
      if ((_DWORD)result)
        v9 = *(_DWORD *)(a1 + 4 * v8++);
      else
        v9 = 0;
      v10 = *a4;
      *(_DWORD *)(*a4 + 4 * v7++) = v9;
    }
    while (v7 < (a4[1] - v10) >> 2);
  }
  return result;
}

void sub_1E07F66A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::ValidateArgsAndTypeConstraints((MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl *)a1);
  return a1;
}

void sub_1E07F6714(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateConvTranspose(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::Operators::Common::Shared::ValidateConvolution(this, (const MIL::IROperation *)1, 1, a2);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceConv(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConv(a1, a3, a4);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 16))(*((_QWORD *)&v6 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v6 + 1));
    }
  }
}

void sub_1E07F67AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceConvTranspose(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConvTranspose(a1, a3, a4);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 16))(*((_QWORD *)&v6 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v6 + 1));
    }
  }
}

void sub_1E07F682C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Conv::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  unsigned __int8 *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  void *v106;
  _QWORD *v107;
  void *v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  _QWORD *v120;
  char *v121;
  __int128 v122;
  _QWORD *v123;
  uint64_t v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  void *v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  _OWORD *v143;
  unsigned __int8 *v144;
  void *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  unint64_t *p_shared_owners;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  void *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  void *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  void *v178;
  void *v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  void *v192;
  void *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void *v206;
  void *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  void *v213;
  void *v214;
  std::__shared_weak_count *v215;
  std::__shared_weak_count_vtbl *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  void *v220;
  void *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  void *v227;
  void *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  void *v234;
  void *v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  void *v241;
  void *v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  void *v255;
  void *v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count_vtbl *v258;
  uint64_t i;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count_vtbl *v263;
  void *v264;
  std::__shared_weak_count *v265;
  std::__shared_weak_count_vtbl *v266;
  uint64_t j;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count_vtbl *v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count_vtbl *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t result;
  uint64_t v281;
  void *v282;
  std::__shared_weak_count *v283;
  void *v284[2];
  char v285;
  std::__shared_weak_count_vtbl *v286;
  std::__shared_weak_count *v287;
  void *v288[2];
  char v289;
  std::__shared_weak_count_vtbl *v290;
  std::__shared_weak_count *v291;
  void *v292;
  std::__shared_weak_count *v293;
  void *v294[2];
  char v295;
  void *v296[2];
  char v297;
  void *v298;
  std::__shared_weak_count *v299;
  void *v300[2];
  char v301;
  void *v302[2];
  char v303;
  void *v304;
  std::__shared_weak_count *v305;
  void *v306[2];
  char v307;
  void *v308[2];
  char v309;
  void *v310;
  std::__shared_weak_count *v311;
  void *v312[2];
  char v313;
  void *v314[2];
  char v315;
  void *v316;
  std::__shared_weak_count *v317;
  void *v318[2];
  char v319;
  void *v320[2];
  char v321;
  void *v322;
  std::__shared_weak_count *v323;
  void *v324[2];
  char v325;
  void *v326[2];
  char v327;
  void *v328;
  std::__shared_weak_count *v329;
  void *v330;
  std::__shared_weak_count *v331;
  void *v332[2];
  char v333;
  void *v334;
  std::__shared_weak_count *v335;
  void *v336;
  std::__shared_weak_count *v337;
  void *v338[2];
  char v339;
  void *v340;
  std::__shared_weak_count *v341;
  void *v342[2];
  char v343;
  void *v344[2];
  char v345;
  void *v346;
  std::__shared_weak_count *v347;
  void *v348[2];
  char v349;
  void *v350[2];
  char v351;
  void *v352;
  std::__shared_weak_count *v353;
  void *v354[2];
  char v355;
  void *v356[2];
  char v357;
  void *v358;
  std::__shared_weak_count *v359;
  std::__shared_weak_count_vtbl *v360;
  std::__shared_weak_count *v361;
  __n128 v362;
  __int128 v363;
  __int128 v364;
  void *v365[2];
  uint64_t v366;
  __n128 v367;
  __n128 v368;
  __n128 v369;
  __n128 v370;
  __n128 v371;
  __n128 v372;
  __n128 v373;
  void *v374;
  void *v375;
  _QWORD *v376;
  void *v377;
  void *v378;
  _QWORD *v379;
  void *v380;
  void *v381;
  _QWORD *v382;
  __n128 v383;
  uint64_t v384;
  __n128 v385;
  _QWORD *v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD v393[3];
  _QWORD v394[3];
  void *v395[3];
  void *__p;
  void *v397;
  _QWORD *v398;
  _QWORD v399[3];
  _QWORD *v400;
  _BYTE v401[24];
  _BYTE *v402;
  _QWORD v403[3];
  _QWORD *v404;
  std::__shared_weak_count_vtbl *v405;
  uint64_t p_on_zero_shared_weak;
  void (__cdecl **v407)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v408;
  uint64_t p_get_deleter;
  _QWORD *v410;
  uint64_t v411;

  v411 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v386 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(0x18uLL);
  v389 = (uint64_t)(v10 + 3);
  *v10 = v7;
  v10[1] = v8;
  v10[2] = v9;
  v387 = v10;
  v388 = (uint64_t)(v10 + 3);
  v408 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v387);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v398 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v397 = v14 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v408, 2, &v385);
  MIL::IRParameter::Make(&v385, (uint64_t *)&v380);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v380);
  v15 = v380;
  v380 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v385.n128_u64[1];
  if (v385.n128_u64[1])
  {
    v17 = (unint64_t *)(v385.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v397 = __p;
    operator delete(__p);
  }
  if (v387)
  {
    v388 = (uint64_t)v387;
    operator delete(v387);
  }
  v19 = v386;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(0x18uLL);
  v398 = v23 + 3;
  *v23 = v20;
  v23[1] = v21;
  v23[2] = v22;
  __p = v23;
  v397 = v23 + 3;
  v387 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v27->__get_deleter;
  v410 = &v27->__get_deleter;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  v408 = v27;
  v388 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v408);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x20uLL);
  v382 = v32 + 4;
  *v32 = v28;
  v32[1] = v29;
  v32[2] = v30;
  v32[3] = v31;
  v380 = v32;
  v381 = v32 + 4;
  v389 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v380);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v37->__on_zero_shared_weak;
  v407 = &v37->__on_zero_shared_weak;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v37->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v37->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v35;
  v37->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v36;
  v405 = v37;
  v390 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v405);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x28uLL);
  v379 = v43 + 5;
  *v43 = v38;
  v43[1] = v39;
  v43[2] = v40;
  v43[3] = v41;
  v43[4] = v42;
  v377 = v43;
  v378 = v43 + 5;
  v391 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v377);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = operator new(0x28uLL);
  v376 = v49 + 5;
  *v49 = v44;
  v49[1] = v45;
  v49[2] = v46;
  v49[3] = v47;
  v49[4] = v48;
  v374 = v49;
  v375 = v49 + 5;
  v392 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v374);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v387, 6, &v383);
  MIL::IRParameter::Make(&v383, &v384);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v19, "weight", &v384);
  v50 = v384;
  v384 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v383.n128_u64[1];
  if (v383.n128_u64[1])
  {
    v52 = (unint64_t *)(v383.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v374)
  {
    v375 = v374;
    operator delete(v374);
  }
  if (v377)
  {
    v378 = v377;
    operator delete(v377);
  }
  if (v405)
  {
    p_on_zero_shared_weak = (uint64_t)v405;
    operator delete(v405);
  }
  if (v380)
  {
    v381 = v380;
    operator delete(v380);
  }
  if (v408)
  {
    p_get_deleter = (uint64_t)v408;
    operator delete(v408);
  }
  if (__p)
  {
    v397 = __p;
    operator delete(__p);
  }
  v54 = v386;
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v387 = v56;
  *v56 = v55;
  v389 = (uint64_t)(v56 + 1);
  v388 = (uint64_t)(v56 + 1);
  v408 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v387);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v398 = v58 + 1;
  v397 = v58 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v408, 2, &v373);
  MIL::IRParameter::Make(&v373, (uint64_t *)&v380);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v54, "bias", (uint64_t *)&v380);
  v60 = v380;
  v380 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v373.n128_u64[1];
  if (v373.n128_u64[1])
  {
    v62 = (unint64_t *)(v373.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v397 = __p;
    operator delete(__p);
  }
  if (v387)
  {
    v388 = (uint64_t)v387;
    operator delete(v387);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v386;
  v65 = MIL::IRUnknownDimension::Make(a1, 0);
  v66 = operator new(8uLL);
  v387 = v66;
  *v66 = v65;
  v389 = (uint64_t)(v66 + 1);
  v388 = (uint64_t)(v66 + 1);
  v408 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v387);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v408, 1, &v372);
  MIL::IRParameter::Make(&v372, (uint64_t *)&__p);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v64, "strides", (uint64_t *)&__p);
  v68 = __p;
  __p = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v372.n128_u64[1];
  if (v372.n128_u64[1])
  {
    v70 = (unint64_t *)(v372.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v387)
  {
    v388 = (uint64_t)v387;
    operator delete(v387);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  v72 = v386;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v371);
  MIL::IRParameter::Make(&v371, (uint64_t *)&v387);
  v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v72, "pad_type", (uint64_t *)&v387);
  v74 = v387;
  v387 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v371.n128_u64[1];
  if (v371.n128_u64[1])
  {
    v76 = (unint64_t *)(v371.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 32))(*((_QWORD *)v73 + 5), 1);
  v78 = v386;
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = operator new(8uLL);
  v387 = v80;
  *v80 = v79;
  v389 = (uint64_t)(v80 + 1);
  v388 = (uint64_t)(v80 + 1);
  v408 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v387);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v408, 1, &v370);
  MIL::IRParameter::Make(&v370, (uint64_t *)&__p);
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v78, "pad", (uint64_t *)&__p);
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = (std::__shared_weak_count *)v370.n128_u64[1];
  if (v370.n128_u64[1])
  {
    v84 = (unint64_t *)(v370.n128_u64[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v387)
  {
    v388 = (uint64_t)v387;
    operator delete(v387);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 32))(*((_QWORD *)v81 + 5), 1);
  v86 = v386;
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = operator new(8uLL);
  v387 = v88;
  *v88 = v87;
  v389 = (uint64_t)(v88 + 1);
  v388 = (uint64_t)(v88 + 1);
  v408 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v387);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v408, 1, &v369);
  MIL::IRParameter::Make(&v369, (uint64_t *)&__p);
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v86, "dilations", (uint64_t *)&__p);
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v369.n128_u64[1];
  if (v369.n128_u64[1])
  {
    v92 = (unint64_t *)(v369.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v387)
  {
    v388 = (uint64_t)v387;
    operator delete(v387);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 32))(*((_QWORD *)v89 + 5), 1);
  v94 = v386;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v368);
  MIL::IRParameter::Make(&v368, (uint64_t *)&v387);
  v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v94, "groups", (uint64_t *)&v387);
  v96 = v387;
  v387 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  v97 = (std::__shared_weak_count *)v368.n128_u64[1];
  if (v368.n128_u64[1])
  {
    v98 = (unint64_t *)(v368.n128_u64[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 32))(*((_QWORD *)v95 + 5), 1);
  v377 = 0;
  v100 = operator new();
  *(_QWORD *)v100 = 0;
  *(_QWORD *)(v100 + 8) = 0;
  *(_QWORD *)(v100 + 16) = 0;
  v387 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v377, (void **)v100);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v387, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v377, 1uLL);
  v101 = v377;
  v102 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v103 = operator new(8uLL);
  __p = v103;
  *v103 = v102;
  v398 = v103 + 1;
  v397 = v103 + 1;
  v405 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v104 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v105 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v408 = v105;
  v105->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v104;
  p_get_deleter = (uint64_t)&v105->~__shared_weak_count_0;
  v410 = &v105->~__shared_weak_count_0;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v408);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v405, 2, &v367);
  MIL::IRParameter::Make(&v367, (uint64_t *)&v374);
  v106 = v374;
  v380 = v374;
  if (v374)
  {
    v107 = (_QWORD *)operator new();
    v108 = v374;
    *v107 = &unk_1EA99F888;
    v107[1] = 0;
    v107[2] = 0;
    v107[3] = v108;
  }
  else
  {
    v107 = 0;
  }
  v381 = v107;
  v374 = 0;
  v109 = v101[2];
  v110 = (_QWORD *)v101[1];
  if ((unint64_t)v110 >= v109)
  {
    v112 = ((uint64_t)v110 - *v101) >> 4;
    v113 = v112 + 1;
    if ((unint64_t)(v112 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v114 = v109 - *v101;
    if (v114 >> 3 > v113)
      v113 = v114 >> 3;
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0)
      v115 = 0xFFFFFFFFFFFFFFFLL;
    else
      v115 = v113;
    v391 = (uint64_t)(v101 + 2);
    v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v101 + 2), v115);
    v118 = &v116[16 * v112];
    *(_QWORD *)v118 = v106;
    *((_QWORD *)v118 + 1) = v107;
    v381 = 0;
    v380 = 0;
    v120 = (_QWORD *)*v101;
    v119 = (_QWORD *)v101[1];
    if (v119 == (_QWORD *)*v101)
    {
      v123 = (_QWORD *)v101[1];
      v121 = &v116[16 * v112];
    }
    else
    {
      v121 = &v116[16 * v112];
      do
      {
        v122 = *((_OWORD *)v119 - 1);
        v119 -= 2;
        *((_OWORD *)v121 - 1) = v122;
        v121 -= 16;
        *v119 = 0;
        v119[1] = 0;
      }
      while (v119 != v120);
      v123 = (_QWORD *)*v101;
      v119 = (_QWORD *)v101[1];
    }
    v111 = v118 + 16;
    *v101 = v121;
    v388 = (uint64_t)v123;
    v101[1] = v118 + 16;
    v389 = (uint64_t)v119;
    v124 = v101[2];
    v101[2] = &v116[16 * v117];
    v390 = v124;
    v387 = v123;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v387);
  }
  else
  {
    *v110 = v106;
    v110[1] = v107;
    v111 = v110 + 2;
    v381 = 0;
    v380 = 0;
  }
  v101[1] = v111;
  v125 = v374;
  v374 = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  v126 = (std::__shared_weak_count *)v367.n128_u64[1];
  if (v367.n128_u64[1])
  {
    v127 = (unint64_t *)(v367.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (v408)
  {
    p_get_deleter = (uint64_t)v408;
    operator delete(v408);
  }
  if (__p)
  {
    v397 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v365 = *(_OWORD *)a2;
  v366 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v129 = (uint64_t)v386;
  *(_QWORD *)&v364 = v386;
  if (v386)
  {
    v130 = (_QWORD *)operator new();
    *v130 = &unk_1EA99F8E8;
    v130[1] = 0;
    v130[2] = 0;
    v130[3] = v129;
  }
  else
  {
    v130 = 0;
  }
  *((_QWORD *)&v364 + 1) = v130;
  v386 = 0;
  *(_QWORD *)&v363 = v377;
  if (v377)
  {
    v131 = (_QWORD *)operator new();
    v132 = v377;
    *v131 = &unk_1EA99F948;
    v131[1] = 0;
    v131[2] = 0;
    v131[3] = v132;
  }
  else
  {
    v131 = 0;
  }
  *((_QWORD *)&v363 + 1) = v131;
  v377 = 0;
  v403[0] = &unk_1EA99FAC8;
  v403[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateConv;
  v404 = v403;
  v402 = 0;
  MIL::IROperator::Make((__int128 *)v365, &v364, &v363, (uint64_t)v403, (uint64_t)v401, a3);
  v133 = v402;
  if (v402 == v401)
  {
    v134 = 4;
    v133 = v401;
  }
  else
  {
    if (!v402)
      goto LABEL_122;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_122:
  v135 = v404;
  if (v404 == v403)
  {
    v136 = 4;
    v135 = v403;
    goto LABEL_126;
  }
  if (v404)
  {
    v136 = 5;
LABEL_126:
    (*(void (**)(void))(*v135 + 8 * v136))();
  }
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v363 + 1);
  if (*((_QWORD *)&v363 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v363 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (std::__shared_weak_count *)*((_QWORD *)&v364 + 1);
  if (*((_QWORD *)&v364 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v364 + 1) + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  if (SHIBYTE(v366) < 0)
    operator delete(v365[0]);
  v408 = 0;
  v143 = (_OWORD *)operator new();
  *v143 = 0u;
  v143[1] = 0u;
  *((_DWORD *)v143 + 8) = 1065353216;
  v408 = (std::__shared_weak_count_vtbl *)v143;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v362);
  MIL::IRParameter::Make(&v362, (uint64_t *)&v387);
  v144 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v143, "minimum_compute_type", (uint64_t *)&v387);
  v145 = v387;
  v387 = 0;
  if (v145)
    (*(void (**)(void *))(*(_QWORD *)v145 + 8))(v145);
  v146 = (std::__shared_weak_count *)v362.n128_u64[1];
  if (v362.n128_u64[1])
  {
    v147 = (unint64_t *)(v362.n128_u64[1] + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v144 + 5) + 32))(*((_QWORD *)v144 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v144 + 5) + 48))(*((_QWORD *)v144 + 5), 1);
  v149 = *a3;
  v150 = v408;
  v360 = v408;
  if (v408)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v150;
  }
  else
  {
    v151 = 0;
  }
  v361 = v151;
  v408 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v149 + 184))(v149, &v360);
  v152 = v361;
  if (v361)
  {
    p_shared_owners = (unint64_t *)&v361->__shared_owners_;
    do
      v154 = __ldaxr(p_shared_owners);
    while (__stlxr(v154 - 1, p_shared_owners));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = *a3;
  v399[0] = &off_1EA99FBD8;
  v399[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceConv;
  v400 = v399;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v155 + 200))(v155, v399);
  v156 = v400;
  if (v400 == v399)
  {
    v157 = 4;
    v156 = v399;
  }
  else
  {
    if (!v400)
      goto LABEL_159;
    v157 = 5;
  }
  (*(void (**)(void))(*v156 + 8 * v157))();
LABEL_159:
  MIL::Validation::TensorDTypeConstraints::Make(&v387);
  v158 = v387;
  std::string::basic_string[abi:ne180100]<0>(v356, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v356, 0, (uint64_t *)&__p);
  v358 = __p;
  if (__p)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = (std::__shared_weak_count_vtbl *)__p;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v359 = v159;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v354, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v158 + 24))(v158, &v358, v354);
  if (v355 < 0)
    operator delete(v354[0]);
  v161 = v359;
  if (v359)
  {
    v162 = (unint64_t *)&v359->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = __p;
  __p = 0;
  if (v164)
    (*(void (**)(void *))(*(_QWORD *)v164 + 8))(v164);
  if (v357 < 0)
    operator delete(v356[0]);
  v165 = v387;
  std::string::basic_string[abi:ne180100]<0>(v350, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v350, 0, (uint64_t *)&__p);
  v352 = __p;
  if (__p)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = (std::__shared_weak_count_vtbl *)__p;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v353 = v166;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v348, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v165 + 24))(v165, &v352, v348);
  if (v349 < 0)
    operator delete(v348[0]);
  v168 = v353;
  if (v353)
  {
    v169 = (unint64_t *)&v353->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = __p;
  __p = 0;
  if (v171)
    (*(void (**)(void *))(*(_QWORD *)v171 + 8))(v171);
  if (v351 < 0)
    operator delete(v350[0]);
  v172 = v387;
  std::string::basic_string[abi:ne180100]<0>(v344, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v344, 1, (uint64_t *)&__p);
  v346 = __p;
  if (__p)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = (std::__shared_weak_count_vtbl *)__p;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v347 = v173;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v342, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v172 + 24))(v172, &v346, v342);
  if (v343 < 0)
    operator delete(v342[0]);
  v175 = v347;
  if (v347)
  {
    v176 = (unint64_t *)&v347->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = __p;
  __p = 0;
  if (v178)
    (*(void (**)(void *))(*(_QWORD *)v178 + 8))(v178);
  if (v345 < 0)
    operator delete(v344[0]);
  v179 = v387;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v340 = __p;
  if (__p)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = (std::__shared_weak_count_vtbl *)__p;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v341 = v180;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v338, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v179 + 24))(v179, &v340, v338);
  if (v339 < 0)
    operator delete(v338[0]);
  v182 = v341;
  if (v341)
  {
    v183 = (unint64_t *)&v341->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = __p;
  __p = 0;
  if (v185)
    (*(void (**)(void *))(*(_QWORD *)v185 + 8))(v185);
  v186 = *a3;
  v336 = v387;
  if (v387)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = (std::__shared_weak_count_vtbl *)v387;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v337 = v187;
  v387 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v186 + 56))(v186, &v336);
  v189 = v337;
  if (v337)
  {
    v190 = (unint64_t *)&v337->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = v387;
  v387 = 0;
  if (v192)
    (*(void (**)(void *))(*(_QWORD *)v192 + 8))(v192);
  MIL::Validation::TensorRankValueConstraints::Make(&v387);
  v193 = v387;
  std::string::basic_string[abi:ne180100]<0>(v332, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v332, 0, (uint64_t *)&__p);
  v334 = __p;
  if (__p)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = (std::__shared_weak_count_vtbl *)__p;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v195;
  }
  else
  {
    v194 = 0;
  }
  v335 = v194;
  __p = 0;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v193 + 32))(v193, &v334, 3, 5);
  v196 = v335;
  if (v335)
  {
    v197 = (unint64_t *)&v335->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = __p;
  __p = 0;
  if (v199)
    (*(void (**)(void *))(*(_QWORD *)v199 + 8))(v199);
  if (v333 < 0)
    operator delete(v332[0]);
  v200 = *a3;
  v330 = v387;
  if (v387)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = (std::__shared_weak_count_vtbl *)v387;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = v202;
  }
  else
  {
    v201 = 0;
  }
  v331 = v201;
  v387 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v200 + 56))(v200, &v330);
  v203 = v331;
  if (v331)
  {
    v204 = (unint64_t *)&v331->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v387;
  v387 = 0;
  if (v206)
    (*(void (**)(void *))(*(_QWORD *)v206 + 8))(v206);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v387);
  v207 = v387;
  std::string::basic_string[abi:ne180100]<0>(v326, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v326, 0, (uint64_t *)&__p);
  v328 = __p;
  if (__p)
  {
    v208 = (std::__shared_weak_count *)operator new();
    v209 = (std::__shared_weak_count_vtbl *)__p;
    v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v208->__shared_owners_ = 0;
    v208->__shared_weak_owners_ = 0;
    v208[1].__vftable = v209;
  }
  else
  {
    v208 = 0;
  }
  v329 = v208;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v324, "C_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v207 + 24))(v207, &v328, 1, v324);
  if (v325 < 0)
    operator delete(v324[0]);
  v210 = v329;
  if (v329)
  {
    v211 = (unint64_t *)&v329->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = __p;
  __p = 0;
  if (v213)
    (*(void (**)(void *))(*(_QWORD *)v213 + 8))(v213);
  if (v327 < 0)
    operator delete(v326[0]);
  v214 = v387;
  std::string::basic_string[abi:ne180100]<0>(v320, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v320, 0, (uint64_t *)&__p);
  v322 = __p;
  if (__p)
  {
    v215 = (std::__shared_weak_count *)operator new();
    v216 = (std::__shared_weak_count_vtbl *)__p;
    v215->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v215->__shared_owners_ = 0;
    v215->__shared_weak_owners_ = 0;
    v215[1].__vftable = v216;
  }
  else
  {
    v215 = 0;
  }
  v323 = v215;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v318, "S");
  (*(void (**)(void *, void **, uint64_t, uint64_t, void **))(*(_QWORD *)v214 + 32))(v214, &v322, 2, -1, v318);
  if (v319 < 0)
    operator delete(v318[0]);
  v217 = v323;
  if (v323)
  {
    v218 = (unint64_t *)&v323->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = __p;
  __p = 0;
  if (v220)
    (*(void (**)(void *))(*(_QWORD *)v220 + 8))(v220);
  if (v321 < 0)
    operator delete(v320[0]);
  v221 = v387;
  std::string::basic_string[abi:ne180100]<0>(v314, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v314, 1, (uint64_t *)&__p);
  v316 = __p;
  if (__p)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = (std::__shared_weak_count_vtbl *)__p;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v317 = v222;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v312, "C_out");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v221 + 24))(v221, &v316, 0, v312);
  if (v313 < 0)
    operator delete(v312[0]);
  v224 = v317;
  if (v317)
  {
    v225 = (unint64_t *)&v317->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = __p;
  __p = 0;
  if (v227)
    (*(void (**)(void *))(*(_QWORD *)v227 + 8))(v227);
  if (v315 < 0)
    operator delete(v314[0]);
  v228 = v387;
  std::string::basic_string[abi:ne180100]<0>(v308, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v308, 0, (uint64_t *)&__p);
  v310 = __p;
  if (__p)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = (std::__shared_weak_count_vtbl *)__p;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v311 = v229;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v306, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v228 + 24))(v228, &v310, 0, v306);
  if (v307 < 0)
    operator delete(v306[0]);
  v231 = v311;
  if (v311)
  {
    v232 = (unint64_t *)&v311->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = __p;
  __p = 0;
  if (v234)
    (*(void (**)(void *))(*(_QWORD *)v234 + 8))(v234);
  if (v309 < 0)
    operator delete(v308[0]);
  v235 = v387;
  std::string::basic_string[abi:ne180100]<0>(v302, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v302, 0, (uint64_t *)&__p);
  v304 = __p;
  if (__p)
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = (std::__shared_weak_count_vtbl *)__p;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = v237;
  }
  else
  {
    v236 = 0;
  }
  v305 = v236;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v300, "P");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v235 + 24))(v235, &v304, 0, v300);
  if (v301 < 0)
    operator delete(v300[0]);
  v238 = v305;
  if (v305)
  {
    v239 = (unint64_t *)&v305->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = __p;
  __p = 0;
  if (v241)
    (*(void (**)(void *))(*(_QWORD *)v241 + 8))(v241);
  if (v303 < 0)
    operator delete(v302[0]);
  v242 = v387;
  std::string::basic_string[abi:ne180100]<0>(v296, "dilations");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v296, 0, (uint64_t *)&__p);
  v298 = __p;
  if (__p)
  {
    v243 = (std::__shared_weak_count *)operator new();
    v244 = (std::__shared_weak_count_vtbl *)__p;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v243->__shared_owners_ = 0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = v244;
  }
  else
  {
    v243 = 0;
  }
  v299 = v243;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v294, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v242 + 24))(v242, &v298, 0, v294);
  if (v295 < 0)
    operator delete(v294[0]);
  v245 = v299;
  if (v299)
  {
    v246 = (unint64_t *)&v299->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = __p;
  __p = 0;
  if (v248)
    (*(void (**)(void *))(*(_QWORD *)v248 + 8))(v248);
  if (v297 < 0)
    operator delete(v296[0]);
  v249 = *a3;
  v292 = v387;
  if (v387)
  {
    v250 = (std::__shared_weak_count *)operator new();
    v251 = (std::__shared_weak_count_vtbl *)v387;
    v250->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v250->__shared_owners_ = 0;
    v250->__shared_weak_owners_ = 0;
    v250[1].__vftable = v251;
  }
  else
  {
    v250 = 0;
  }
  v293 = v250;
  v387 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v249 + 56))(v249, &v292);
  v252 = v293;
  if (v293)
  {
    v253 = (unint64_t *)&v293->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = v387;
  v387 = 0;
  if (v255)
    (*(void (**)(void *))(*(_QWORD *)v255 + 8))(v255);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v380);
  v256 = v380;
  std::string::basic_string[abi:ne180100]<0>(v288, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v288, 0, (uint64_t *)&v405);
  v290 = v405;
  if (v405)
  {
    v257 = (std::__shared_weak_count *)operator new();
    v258 = v405;
    v257->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v257->__shared_owners_ = 0;
    v257->__shared_weak_owners_ = 0;
    v257[1].__vftable = v258;
  }
  else
  {
    v257 = 0;
  }
  v291 = v257;
  v405 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v387, "custom");
  std::string::basic_string[abi:ne180100]<0>(&v390, "same");
  std::string::basic_string[abi:ne180100]<0>(v393, "same_lower");
  std::string::basic_string[abi:ne180100]<0>(v394, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v387, 4);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v256 + 24))(v256, &v290, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v394[i + 2]) < 0)
      operator delete((void *)v394[i]);
  }
  v260 = v291;
  if (v291)
  {
    v261 = (unint64_t *)&v291->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v263 = v405;
  v405 = 0;
  if (v263)
    (*((void (**)(std::__shared_weak_count_vtbl *))v263->~__shared_weak_count + 1))(v263);
  if (v289 < 0)
    operator delete(v288[0]);
  v264 = v380;
  std::string::basic_string[abi:ne180100]<0>(v284, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v284, 1, (uint64_t *)&v405);
  v286 = v405;
  if (v405)
  {
    v265 = (std::__shared_weak_count *)operator new();
    v266 = v405;
    v265->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v265->__shared_owners_ = 0;
    v265->__shared_weak_owners_ = 0;
    v265[1].__vftable = v266;
  }
  else
  {
    v265 = 0;
  }
  v287 = v265;
  v405 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v387, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v390, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v393, "int32");
  std::string::basic_string[abi:ne180100]<0>(v394, "int8");
  std::string::basic_string[abi:ne180100]<0>(v395, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v387, 5);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v264 + 24))(v264, &v286, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v395[j + 2]) < 0)
      operator delete(v395[j]);
  }
  v268 = v287;
  if (v287)
  {
    v269 = (unint64_t *)&v287->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v271 = v405;
  v405 = 0;
  if (v271)
    (*((void (**)(std::__shared_weak_count_vtbl *))v271->~__shared_weak_count + 1))(v271);
  if (v285 < 0)
    operator delete(v284[0]);
  v272 = *a3;
  v282 = v380;
  if (v380)
  {
    v273 = (std::__shared_weak_count *)operator new();
    v274 = (std::__shared_weak_count_vtbl *)v380;
    v273->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v273->__shared_owners_ = 0;
    v273->__shared_weak_owners_ = 0;
    v273[1].__vftable = v274;
  }
  else
  {
    v273 = 0;
  }
  v283 = v273;
  v380 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v272 + 56))(v272, &v282);
  v275 = v283;
  if (v283)
  {
    v276 = (unint64_t *)&v283->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v278 = v380;
  v380 = 0;
  if (v278)
    (*(void (**)(void *))(*(_QWORD *)v278 + 8))(v278);
  if (v408)
  {
    v279 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v408);
    MEMORY[0x1E0C023A0](v279, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v377, 0);
  result = (uint64_t)v386;
  if (v386)
  {
    v281 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v386);
    return MEMORY[0x1E0C023A0](v281, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07F8AA8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x420];
  STACK[0x420] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x408], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x460], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ConvTranspose::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  unsigned __int8 *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  unsigned __int8 *v103;
  void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  void *v114;
  _QWORD *v115;
  void *v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  _QWORD *v127;
  _QWORD *v128;
  char *v129;
  __int128 v130;
  _QWORD *v131;
  uint64_t v132;
  void *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  void *v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  _OWORD *v151;
  unsigned __int8 *v152;
  void *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count *v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  void *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  void *v172;
  void *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  void *v179;
  void *v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  void *v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  void *v200;
  void *v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  void *v214;
  void *v215;
  std::__shared_weak_count *v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  void *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  void *v228;
  void *v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  void *v235;
  void *v236;
  std::__shared_weak_count *v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  void *v242;
  void *v243;
  std::__shared_weak_count *v244;
  std::__shared_weak_count_vtbl *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  void *v249;
  void *v250;
  std::__shared_weak_count *v251;
  std::__shared_weak_count_vtbl *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  void *v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  void *v263;
  void *v264;
  std::__shared_weak_count *v265;
  std::__shared_weak_count_vtbl *v266;
  uint64_t i;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count_vtbl *v271;
  void *v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count_vtbl *v274;
  uint64_t j;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count_vtbl *v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  std::__shared_weak_count_vtbl *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t result;
  uint64_t v289;
  void *v290;
  std::__shared_weak_count *v291;
  void *v292[2];
  char v293;
  std::__shared_weak_count_vtbl *v294;
  std::__shared_weak_count *v295;
  void *v296[2];
  char v297;
  std::__shared_weak_count_vtbl *v298;
  std::__shared_weak_count *v299;
  void *v300;
  std::__shared_weak_count *v301;
  void *v302[2];
  char v303;
  void *v304[2];
  char v305;
  void *v306;
  std::__shared_weak_count *v307;
  void *v308[2];
  char v309;
  void *v310[2];
  char v311;
  void *v312;
  std::__shared_weak_count *v313;
  void *v314[2];
  char v315;
  void *v316[2];
  char v317;
  void *v318;
  std::__shared_weak_count *v319;
  void *v320[2];
  char v321;
  void *v322[2];
  char v323;
  void *v324;
  std::__shared_weak_count *v325;
  void *v326[2];
  char v327;
  void *v328[2];
  char v329;
  void *v330;
  std::__shared_weak_count *v331;
  void *v332[2];
  char v333;
  void *v334[2];
  char v335;
  void *v336;
  std::__shared_weak_count *v337;
  void *v338;
  std::__shared_weak_count *v339;
  void *v340[2];
  char v341;
  void *v342;
  std::__shared_weak_count *v343;
  void *v344;
  std::__shared_weak_count *v345;
  void *v346[2];
  char v347;
  void *v348;
  std::__shared_weak_count *v349;
  void *v350[2];
  char v351;
  void *v352[2];
  char v353;
  void *v354;
  std::__shared_weak_count *v355;
  void *v356[2];
  char v357;
  void *v358[2];
  char v359;
  void *v360;
  std::__shared_weak_count *v361;
  void *v362[2];
  char v363;
  void *v364[2];
  char v365;
  void *v366;
  std::__shared_weak_count *v367;
  std::__shared_weak_count_vtbl *v368;
  std::__shared_weak_count *v369;
  __n128 v370;
  __int128 v371;
  __int128 v372;
  void *v373[2];
  uint64_t v374;
  __n128 v375;
  __n128 v376;
  __n128 v377;
  __n128 v378;
  __n128 v379;
  __n128 v380;
  __n128 v381;
  __n128 v382;
  void *v383;
  void *v384;
  _QWORD *v385;
  void *v386;
  void *v387;
  _QWORD *v388;
  void *v389;
  void *v390;
  _QWORD *v391;
  __n128 v392;
  uint64_t v393;
  __n128 v394;
  _QWORD *v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD v402[3];
  _QWORD v403[3];
  void *v404[3];
  void *__p;
  void *v406;
  _QWORD *v407;
  _QWORD v408[3];
  _QWORD *v409;
  _BYTE v410[24];
  _BYTE *v411;
  _QWORD v412[3];
  _QWORD *v413;
  std::__shared_weak_count_vtbl *v414;
  uint64_t p_on_zero_shared_weak;
  void (__cdecl **v416)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v417;
  uint64_t p_get_deleter;
  _QWORD *v419;
  uint64_t v420;

  v420 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v395 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(0x18uLL);
  v398 = (uint64_t)(v10 + 3);
  *v10 = v7;
  v10[1] = v8;
  v10[2] = v9;
  v396 = v10;
  v397 = (uint64_t)(v10 + 3);
  v417 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v396);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v407 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v406 = v14 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v417, 2, &v394);
  MIL::IRParameter::Make(&v394, (uint64_t *)&v389);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v389);
  v15 = v389;
  v389 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v394.n128_u64[1];
  if (v394.n128_u64[1])
  {
    v17 = (unint64_t *)(v394.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v406 = __p;
    operator delete(__p);
  }
  if (v396)
  {
    v397 = (uint64_t)v396;
    operator delete(v396);
  }
  v19 = v395;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(0x18uLL);
  v407 = v23 + 3;
  *v23 = v20;
  v23[1] = v21;
  v23[2] = v22;
  __p = v23;
  v406 = v23 + 3;
  v396 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v27->__get_deleter;
  v419 = &v27->__get_deleter;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  v417 = v27;
  v397 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v417);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x20uLL);
  v391 = v32 + 4;
  *v32 = v28;
  v32[1] = v29;
  v32[2] = v30;
  v32[3] = v31;
  v389 = v32;
  v390 = v32 + 4;
  v398 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v389);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v37->__on_zero_shared_weak;
  v416 = &v37->__on_zero_shared_weak;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v37->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v37->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v35;
  v37->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v36;
  v414 = v37;
  v399 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v414);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x28uLL);
  v388 = v43 + 5;
  *v43 = v38;
  v43[1] = v39;
  v43[2] = v40;
  v43[3] = v41;
  v43[4] = v42;
  v386 = v43;
  v387 = v43 + 5;
  v400 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v386);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = operator new(0x28uLL);
  v385 = v49 + 5;
  *v49 = v44;
  v49[1] = v45;
  v49[2] = v46;
  v49[3] = v47;
  v49[4] = v48;
  v383 = v49;
  v384 = v49 + 5;
  v401 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v383);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v396, 6, &v392);
  MIL::IRParameter::Make(&v392, &v393);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v19, "weight", &v393);
  v50 = v393;
  v393 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v392.n128_u64[1];
  if (v392.n128_u64[1])
  {
    v52 = (unint64_t *)(v392.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v383)
  {
    v384 = v383;
    operator delete(v383);
  }
  if (v386)
  {
    v387 = v386;
    operator delete(v386);
  }
  if (v414)
  {
    p_on_zero_shared_weak = (uint64_t)v414;
    operator delete(v414);
  }
  if (v389)
  {
    v390 = v389;
    operator delete(v389);
  }
  if (v417)
  {
    p_get_deleter = (uint64_t)v417;
    operator delete(v417);
  }
  if (__p)
  {
    v406 = __p;
    operator delete(__p);
  }
  v54 = v395;
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v396 = v56;
  *v56 = v55;
  v398 = (uint64_t)(v56 + 1);
  v397 = (uint64_t)(v56 + 1);
  v417 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v396);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v407 = v58 + 1;
  v406 = v58 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v417, 2, &v382);
  MIL::IRParameter::Make(&v382, (uint64_t *)&v389);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v54, "bias", (uint64_t *)&v389);
  v60 = v389;
  v389 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v382.n128_u64[1];
  if (v382.n128_u64[1])
  {
    v62 = (unint64_t *)(v382.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v406 = __p;
    operator delete(__p);
  }
  if (v396)
  {
    v397 = (uint64_t)v396;
    operator delete(v396);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v395;
  v65 = MIL::IRUnknownDimension::Make(a1, 0);
  v66 = operator new(8uLL);
  v396 = v66;
  *v66 = v65;
  v398 = (uint64_t)(v66 + 1);
  v397 = (uint64_t)(v66 + 1);
  v417 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v396);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v417, 1, &v381);
  MIL::IRParameter::Make(&v381, (uint64_t *)&__p);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v64, "strides", (uint64_t *)&__p);
  v68 = __p;
  __p = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v381.n128_u64[1];
  if (v381.n128_u64[1])
  {
    v70 = (unint64_t *)(v381.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v396)
  {
    v397 = (uint64_t)v396;
    operator delete(v396);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  v72 = v395;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v380);
  MIL::IRParameter::Make(&v380, (uint64_t *)&v396);
  v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v72, "pad_type", (uint64_t *)&v396);
  v74 = v396;
  v396 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v380.n128_u64[1];
  if (v380.n128_u64[1])
  {
    v76 = (unint64_t *)(v380.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 32))(*((_QWORD *)v73 + 5), 1);
  v78 = v395;
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = operator new(8uLL);
  v396 = v80;
  *v80 = v79;
  v398 = (uint64_t)(v80 + 1);
  v397 = (uint64_t)(v80 + 1);
  v417 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v396);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v417, 1, &v379);
  MIL::IRParameter::Make(&v379, (uint64_t *)&__p);
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v78, "pad", (uint64_t *)&__p);
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = (std::__shared_weak_count *)v379.n128_u64[1];
  if (v379.n128_u64[1])
  {
    v84 = (unint64_t *)(v379.n128_u64[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v396)
  {
    v397 = (uint64_t)v396;
    operator delete(v396);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 32))(*((_QWORD *)v81 + 5), 1);
  v86 = v395;
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = operator new(8uLL);
  v396 = v88;
  *v88 = v87;
  v398 = (uint64_t)(v88 + 1);
  v397 = (uint64_t)(v88 + 1);
  v417 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v396);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v417, 1, &v378);
  MIL::IRParameter::Make(&v378, (uint64_t *)&__p);
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v86, "dilations", (uint64_t *)&__p);
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v378.n128_u64[1];
  if (v378.n128_u64[1])
  {
    v92 = (unint64_t *)(v378.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v396)
  {
    v397 = (uint64_t)v396;
    operator delete(v396);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 32))(*((_QWORD *)v89 + 5), 1);
  v94 = v395;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v377);
  MIL::IRParameter::Make(&v377, (uint64_t *)&v396);
  v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v94, "groups", (uint64_t *)&v396);
  v96 = v396;
  v396 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  v97 = (std::__shared_weak_count *)v377.n128_u64[1];
  if (v377.n128_u64[1])
  {
    v98 = (unint64_t *)(v377.n128_u64[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 32))(*((_QWORD *)v95 + 5), 1);
  v100 = v395;
  v101 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v102 = operator new(8uLL);
  v396 = v102;
  *v102 = v101;
  v398 = (uint64_t)(v102 + 1);
  v397 = (uint64_t)(v102 + 1);
  v417 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v396);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v417, 1, &v376);
  MIL::IRParameter::Make(&v376, (uint64_t *)&__p);
  v103 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v100, "output_shape", (uint64_t *)&__p);
  v104 = __p;
  __p = 0;
  if (v104)
    (*(void (**)(void *))(*(_QWORD *)v104 + 8))(v104);
  v105 = (std::__shared_weak_count *)v376.n128_u64[1];
  if (v376.n128_u64[1])
  {
    v106 = (unint64_t *)(v376.n128_u64[1] + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (v396)
  {
    v397 = (uint64_t)v396;
    operator delete(v396);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v103 + 5) + 32))(*((_QWORD *)v103 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v103 + 5) + 48))(*((_QWORD *)v103 + 5), 1);
  v386 = 0;
  v108 = operator new();
  *(_QWORD *)v108 = 0;
  *(_QWORD *)(v108 + 8) = 0;
  *(_QWORD *)(v108 + 16) = 0;
  v396 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v386, (void **)v108);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v396, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v386, 1uLL);
  v109 = v386;
  v110 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v111 = operator new(8uLL);
  __p = v111;
  *v111 = v110;
  v407 = v111 + 1;
  v406 = v111 + 1;
  v414 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v112 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v113 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v417 = v113;
  v113->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v112;
  p_get_deleter = (uint64_t)&v113->~__shared_weak_count_0;
  v419 = &v113->~__shared_weak_count_0;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v417);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v414, 2, &v375);
  MIL::IRParameter::Make(&v375, (uint64_t *)&v383);
  v114 = v383;
  v389 = v383;
  if (v383)
  {
    v115 = (_QWORD *)operator new();
    v116 = v383;
    *v115 = &unk_1EA99F888;
    v115[1] = 0;
    v115[2] = 0;
    v115[3] = v116;
  }
  else
  {
    v115 = 0;
  }
  v390 = v115;
  v383 = 0;
  v117 = v109[2];
  v118 = (_QWORD *)v109[1];
  if ((unint64_t)v118 >= v117)
  {
    v120 = ((uint64_t)v118 - *v109) >> 4;
    v121 = v120 + 1;
    if ((unint64_t)(v120 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v122 = v117 - *v109;
    if (v122 >> 3 > v121)
      v121 = v122 >> 3;
    if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF0)
      v123 = 0xFFFFFFFFFFFFFFFLL;
    else
      v123 = v121;
    v400 = (uint64_t)(v109 + 2);
    v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v109 + 2), v123);
    v126 = &v124[16 * v120];
    *(_QWORD *)v126 = v114;
    *((_QWORD *)v126 + 1) = v115;
    v390 = 0;
    v389 = 0;
    v128 = (_QWORD *)*v109;
    v127 = (_QWORD *)v109[1];
    if (v127 == (_QWORD *)*v109)
    {
      v131 = (_QWORD *)v109[1];
      v129 = &v124[16 * v120];
    }
    else
    {
      v129 = &v124[16 * v120];
      do
      {
        v130 = *((_OWORD *)v127 - 1);
        v127 -= 2;
        *((_OWORD *)v129 - 1) = v130;
        v129 -= 16;
        *v127 = 0;
        v127[1] = 0;
      }
      while (v127 != v128);
      v131 = (_QWORD *)*v109;
      v127 = (_QWORD *)v109[1];
    }
    v119 = v126 + 16;
    *v109 = v129;
    v397 = (uint64_t)v131;
    v109[1] = v126 + 16;
    v398 = (uint64_t)v127;
    v132 = v109[2];
    v109[2] = &v124[16 * v125];
    v399 = v132;
    v396 = v131;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v396);
  }
  else
  {
    *v118 = v114;
    v118[1] = v115;
    v119 = v118 + 2;
    v390 = 0;
    v389 = 0;
  }
  v109[1] = v119;
  v133 = v383;
  v383 = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  v134 = (std::__shared_weak_count *)v375.n128_u64[1];
  if (v375.n128_u64[1])
  {
    v135 = (unint64_t *)(v375.n128_u64[1] + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  if (v417)
  {
    p_get_deleter = (uint64_t)v417;
    operator delete(v417);
  }
  if (__p)
  {
    v406 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v373 = *(_OWORD *)a2;
  v374 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v137 = (uint64_t)v395;
  *(_QWORD *)&v372 = v395;
  if (v395)
  {
    v138 = (_QWORD *)operator new();
    *v138 = &unk_1EA99F8E8;
    v138[1] = 0;
    v138[2] = 0;
    v138[3] = v137;
  }
  else
  {
    v138 = 0;
  }
  *((_QWORD *)&v372 + 1) = v138;
  v395 = 0;
  *(_QWORD *)&v371 = v386;
  if (v386)
  {
    v139 = (_QWORD *)operator new();
    v140 = v386;
    *v139 = &unk_1EA99F948;
    v139[1] = 0;
    v139[2] = 0;
    v139[3] = v140;
  }
  else
  {
    v139 = 0;
  }
  *((_QWORD *)&v371 + 1) = v139;
  v386 = 0;
  v412[0] = &unk_1EA99FAC8;
  v412[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateConvTranspose;
  v413 = v412;
  v411 = 0;
  MIL::IROperator::Make((__int128 *)v373, &v372, &v371, (uint64_t)v412, (uint64_t)v410, a3);
  v141 = v411;
  if (v411 == v410)
  {
    v142 = 4;
    v141 = v410;
  }
  else
  {
    if (!v411)
      goto LABEL_131;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_131:
  v143 = v413;
  if (v413 == v412)
  {
    v144 = 4;
    v143 = v412;
    goto LABEL_135;
  }
  if (v413)
  {
    v144 = 5;
LABEL_135:
    (*(void (**)(void))(*v143 + 8 * v144))();
  }
  v145 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
  if (*((_QWORD *)&v371 + 1))
  {
    v146 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = (std::__shared_weak_count *)*((_QWORD *)&v372 + 1);
  if (*((_QWORD *)&v372 + 1))
  {
    v149 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  if (SHIBYTE(v374) < 0)
    operator delete(v373[0]);
  v417 = 0;
  v151 = (_OWORD *)operator new();
  *v151 = 0u;
  v151[1] = 0u;
  *((_DWORD *)v151 + 8) = 1065353216;
  v417 = (std::__shared_weak_count_vtbl *)v151;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v370);
  MIL::IRParameter::Make(&v370, (uint64_t *)&v396);
  v152 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v151, "minimum_compute_type", (uint64_t *)&v396);
  v153 = v396;
  v396 = 0;
  if (v153)
    (*(void (**)(void *))(*(_QWORD *)v153 + 8))(v153);
  v154 = (std::__shared_weak_count *)v370.n128_u64[1];
  if (v370.n128_u64[1])
  {
    v155 = (unint64_t *)(v370.n128_u64[1] + 8);
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v152 + 5) + 32))(*((_QWORD *)v152 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v152 + 5) + 48))(*((_QWORD *)v152 + 5), 1);
  v157 = *a3;
  v158 = v417;
  v368 = v417;
  if (v417)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v158;
  }
  else
  {
    v159 = 0;
  }
  v369 = v159;
  v417 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v157 + 184))(v157, &v368);
  v160 = v369;
  if (v369)
  {
    p_shared_owners = (unint64_t *)&v369->__shared_owners_;
    do
      v162 = __ldaxr(p_shared_owners);
    while (__stlxr(v162 - 1, p_shared_owners));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = *a3;
  v408[0] = &off_1EA99FBD8;
  v408[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceConvTranspose;
  v409 = v408;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v163 + 200))(v163, v408);
  v164 = v409;
  if (v409 == v408)
  {
    v165 = 4;
    v164 = v408;
  }
  else
  {
    if (!v409)
      goto LABEL_168;
    v165 = 5;
  }
  (*(void (**)(void))(*v164 + 8 * v165))();
LABEL_168:
  MIL::Validation::TensorDTypeConstraints::Make(&v396);
  v166 = v396;
  std::string::basic_string[abi:ne180100]<0>(v364, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v364, 0, (uint64_t *)&__p);
  v366 = __p;
  if (__p)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = (std::__shared_weak_count_vtbl *)__p;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v367 = v167;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v362, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v166 + 24))(v166, &v366, v362);
  if (v363 < 0)
    operator delete(v362[0]);
  v169 = v367;
  if (v367)
  {
    v170 = (unint64_t *)&v367->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = __p;
  __p = 0;
  if (v172)
    (*(void (**)(void *))(*(_QWORD *)v172 + 8))(v172);
  if (v365 < 0)
    operator delete(v364[0]);
  v173 = v396;
  std::string::basic_string[abi:ne180100]<0>(v358, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v358, 0, (uint64_t *)&__p);
  v360 = __p;
  if (__p)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v175 = (std::__shared_weak_count_vtbl *)__p;
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v175;
  }
  else
  {
    v174 = 0;
  }
  v361 = v174;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v356, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v173 + 24))(v173, &v360, v356);
  if (v357 < 0)
    operator delete(v356[0]);
  v176 = v361;
  if (v361)
  {
    v177 = (unint64_t *)&v361->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = __p;
  __p = 0;
  if (v179)
    (*(void (**)(void *))(*(_QWORD *)v179 + 8))(v179);
  if (v359 < 0)
    operator delete(v358[0]);
  v180 = v396;
  std::string::basic_string[abi:ne180100]<0>(v352, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v352, 1, (uint64_t *)&__p);
  v354 = __p;
  if (__p)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = (std::__shared_weak_count_vtbl *)__p;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = v182;
  }
  else
  {
    v181 = 0;
  }
  v355 = v181;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v350, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v180 + 24))(v180, &v354, v350);
  if (v351 < 0)
    operator delete(v350[0]);
  v183 = v355;
  if (v355)
  {
    v184 = (unint64_t *)&v355->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = __p;
  __p = 0;
  if (v186)
    (*(void (**)(void *))(*(_QWORD *)v186 + 8))(v186);
  if (v353 < 0)
    operator delete(v352[0]);
  v187 = v396;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v348 = __p;
  if (__p)
  {
    v188 = (std::__shared_weak_count *)operator new();
    v189 = (std::__shared_weak_count_vtbl *)__p;
    v188->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v188->__shared_owners_ = 0;
    v188->__shared_weak_owners_ = 0;
    v188[1].__vftable = v189;
  }
  else
  {
    v188 = 0;
  }
  v349 = v188;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v346, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v187 + 24))(v187, &v348, v346);
  if (v347 < 0)
    operator delete(v346[0]);
  v190 = v349;
  if (v349)
  {
    v191 = (unint64_t *)&v349->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = __p;
  __p = 0;
  if (v193)
    (*(void (**)(void *))(*(_QWORD *)v193 + 8))(v193);
  v194 = *a3;
  v344 = v396;
  if (v396)
  {
    v195 = (std::__shared_weak_count *)operator new();
    v196 = (std::__shared_weak_count_vtbl *)v396;
    v195->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v195->__shared_owners_ = 0;
    v195->__shared_weak_owners_ = 0;
    v195[1].__vftable = v196;
  }
  else
  {
    v195 = 0;
  }
  v345 = v195;
  v396 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v194 + 56))(v194, &v344);
  v197 = v345;
  if (v345)
  {
    v198 = (unint64_t *)&v345->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = v396;
  v396 = 0;
  if (v200)
    (*(void (**)(void *))(*(_QWORD *)v200 + 8))(v200);
  MIL::Validation::TensorRankValueConstraints::Make(&v396);
  v201 = v396;
  std::string::basic_string[abi:ne180100]<0>(v340, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v340, 0, (uint64_t *)&__p);
  v342 = __p;
  if (__p)
  {
    v202 = (std::__shared_weak_count *)operator new();
    v203 = (std::__shared_weak_count_vtbl *)__p;
    v202->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v202->__shared_owners_ = 0;
    v202->__shared_weak_owners_ = 0;
    v202[1].__vftable = v203;
  }
  else
  {
    v202 = 0;
  }
  v343 = v202;
  __p = 0;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v201 + 32))(v201, &v342, 3, 5);
  v204 = v343;
  if (v343)
  {
    v205 = (unint64_t *)&v343->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = __p;
  __p = 0;
  if (v207)
    (*(void (**)(void *))(*(_QWORD *)v207 + 8))(v207);
  if (v341 < 0)
    operator delete(v340[0]);
  v208 = *a3;
  v338 = v396;
  if (v396)
  {
    v209 = (std::__shared_weak_count *)operator new();
    v210 = (std::__shared_weak_count_vtbl *)v396;
    v209->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v209->__shared_owners_ = 0;
    v209->__shared_weak_owners_ = 0;
    v209[1].__vftable = v210;
  }
  else
  {
    v209 = 0;
  }
  v339 = v209;
  v396 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v208 + 56))(v208, &v338);
  v211 = v339;
  if (v339)
  {
    v212 = (unint64_t *)&v339->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = v396;
  v396 = 0;
  if (v214)
    (*(void (**)(void *))(*(_QWORD *)v214 + 8))(v214);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v396);
  v215 = v396;
  std::string::basic_string[abi:ne180100]<0>(v334, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v334, 0, (uint64_t *)&__p);
  v336 = __p;
  if (__p)
  {
    v216 = (std::__shared_weak_count *)operator new();
    v217 = (std::__shared_weak_count_vtbl *)__p;
    v216->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v216->__shared_owners_ = 0;
    v216->__shared_weak_owners_ = 0;
    v216[1].__vftable = v217;
  }
  else
  {
    v216 = 0;
  }
  v337 = v216;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v332, "C_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v215 + 24))(v215, &v336, 1, v332);
  if (v333 < 0)
    operator delete(v332[0]);
  v218 = v337;
  if (v337)
  {
    v219 = (unint64_t *)&v337->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v221 = __p;
  __p = 0;
  if (v221)
    (*(void (**)(void *))(*(_QWORD *)v221 + 8))(v221);
  if (v335 < 0)
    operator delete(v334[0]);
  v222 = v396;
  std::string::basic_string[abi:ne180100]<0>(v328, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v328, 0, (uint64_t *)&__p);
  v330 = __p;
  if (__p)
  {
    v223 = (std::__shared_weak_count *)operator new();
    v224 = (std::__shared_weak_count_vtbl *)__p;
    v223->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v223->__shared_owners_ = 0;
    v223->__shared_weak_owners_ = 0;
    v223[1].__vftable = v224;
  }
  else
  {
    v223 = 0;
  }
  v331 = v223;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v326, "S");
  (*(void (**)(void *, void **, uint64_t, uint64_t, void **))(*(_QWORD *)v222 + 32))(v222, &v330, 2, -1, v326);
  if (v327 < 0)
    operator delete(v326[0]);
  v225 = v331;
  if (v331)
  {
    v226 = (unint64_t *)&v331->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = __p;
  __p = 0;
  if (v228)
    (*(void (**)(void *))(*(_QWORD *)v228 + 8))(v228);
  if (v329 < 0)
    operator delete(v328[0]);
  v229 = v396;
  std::string::basic_string[abi:ne180100]<0>(v322, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v322, 1, (uint64_t *)&__p);
  v324 = __p;
  if (__p)
  {
    v230 = (std::__shared_weak_count *)operator new();
    v231 = (std::__shared_weak_count_vtbl *)__p;
    v230->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v230->__shared_owners_ = 0;
    v230->__shared_weak_owners_ = 0;
    v230[1].__vftable = v231;
  }
  else
  {
    v230 = 0;
  }
  v325 = v230;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v320, "C_out");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v229 + 24))(v229, &v324, 0, v320);
  if (v321 < 0)
    operator delete(v320[0]);
  v232 = v325;
  if (v325)
  {
    v233 = (unint64_t *)&v325->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v235 = __p;
  __p = 0;
  if (v235)
    (*(void (**)(void *))(*(_QWORD *)v235 + 8))(v235);
  if (v323 < 0)
    operator delete(v322[0]);
  v236 = v396;
  std::string::basic_string[abi:ne180100]<0>(v316, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v316, 0, (uint64_t *)&__p);
  v318 = __p;
  if (__p)
  {
    v237 = (std::__shared_weak_count *)operator new();
    v238 = (std::__shared_weak_count_vtbl *)__p;
    v237->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v237->__shared_owners_ = 0;
    v237->__shared_weak_owners_ = 0;
    v237[1].__vftable = v238;
  }
  else
  {
    v237 = 0;
  }
  v319 = v237;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v314, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v236 + 24))(v236, &v318, 0, v314);
  if (v315 < 0)
    operator delete(v314[0]);
  v239 = v319;
  if (v319)
  {
    v240 = (unint64_t *)&v319->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v242 = __p;
  __p = 0;
  if (v242)
    (*(void (**)(void *))(*(_QWORD *)v242 + 8))(v242);
  if (v317 < 0)
    operator delete(v316[0]);
  v243 = v396;
  std::string::basic_string[abi:ne180100]<0>(v310, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v310, 0, (uint64_t *)&__p);
  v312 = __p;
  if (__p)
  {
    v244 = (std::__shared_weak_count *)operator new();
    v245 = (std::__shared_weak_count_vtbl *)__p;
    v244->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v244->__shared_owners_ = 0;
    v244->__shared_weak_owners_ = 0;
    v244[1].__vftable = v245;
  }
  else
  {
    v244 = 0;
  }
  v313 = v244;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v308, "P");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v243 + 24))(v243, &v312, 0, v308);
  if (v309 < 0)
    operator delete(v308[0]);
  v246 = v313;
  if (v313)
  {
    v247 = (unint64_t *)&v313->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  v249 = __p;
  __p = 0;
  if (v249)
    (*(void (**)(void *))(*(_QWORD *)v249 + 8))(v249);
  if (v311 < 0)
    operator delete(v310[0]);
  v250 = v396;
  std::string::basic_string[abi:ne180100]<0>(v304, "dilations");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v304, 0, (uint64_t *)&__p);
  v306 = __p;
  if (__p)
  {
    v251 = (std::__shared_weak_count *)operator new();
    v252 = (std::__shared_weak_count_vtbl *)__p;
    v251->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v251->__shared_owners_ = 0;
    v251->__shared_weak_owners_ = 0;
    v251[1].__vftable = v252;
  }
  else
  {
    v251 = 0;
  }
  v307 = v251;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v302, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v250 + 24))(v250, &v306, 0, v302);
  if (v303 < 0)
    operator delete(v302[0]);
  v253 = v307;
  if (v307)
  {
    v254 = (unint64_t *)&v307->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  v256 = __p;
  __p = 0;
  if (v256)
    (*(void (**)(void *))(*(_QWORD *)v256 + 8))(v256);
  if (v305 < 0)
    operator delete(v304[0]);
  v257 = *a3;
  v300 = v396;
  if (v396)
  {
    v258 = (std::__shared_weak_count *)operator new();
    v259 = (std::__shared_weak_count_vtbl *)v396;
    v258->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v258->__shared_owners_ = 0;
    v258->__shared_weak_owners_ = 0;
    v258[1].__vftable = v259;
  }
  else
  {
    v258 = 0;
  }
  v301 = v258;
  v396 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v257 + 56))(v257, &v300);
  v260 = v301;
  if (v301)
  {
    v261 = (unint64_t *)&v301->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v263 = v396;
  v396 = 0;
  if (v263)
    (*(void (**)(void *))(*(_QWORD *)v263 + 8))(v263);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v389);
  v264 = v389;
  std::string::basic_string[abi:ne180100]<0>(v296, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v296, 0, (uint64_t *)&v414);
  v298 = v414;
  if (v414)
  {
    v265 = (std::__shared_weak_count *)operator new();
    v266 = v414;
    v265->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v265->__shared_owners_ = 0;
    v265->__shared_weak_owners_ = 0;
    v265[1].__vftable = v266;
  }
  else
  {
    v265 = 0;
  }
  v299 = v265;
  v414 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v396, "custom");
  std::string::basic_string[abi:ne180100]<0>(&v399, "same");
  std::string::basic_string[abi:ne180100]<0>(v402, "same_lower");
  std::string::basic_string[abi:ne180100]<0>(v403, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v396, 4);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v264 + 24))(v264, &v298, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v403[i + 2]) < 0)
      operator delete((void *)v403[i]);
  }
  v268 = v299;
  if (v299)
  {
    v269 = (unint64_t *)&v299->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v271 = v414;
  v414 = 0;
  if (v271)
    (*((void (**)(std::__shared_weak_count_vtbl *))v271->~__shared_weak_count + 1))(v271);
  if (v297 < 0)
    operator delete(v296[0]);
  v272 = v389;
  std::string::basic_string[abi:ne180100]<0>(v292, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v292, 1, (uint64_t *)&v414);
  v294 = v414;
  if (v414)
  {
    v273 = (std::__shared_weak_count *)operator new();
    v274 = v414;
    v273->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v273->__shared_owners_ = 0;
    v273->__shared_weak_owners_ = 0;
    v273[1].__vftable = v274;
  }
  else
  {
    v273 = 0;
  }
  v295 = v273;
  v414 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v396, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v399, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v402, "int32");
  std::string::basic_string[abi:ne180100]<0>(v403, "int8");
  std::string::basic_string[abi:ne180100]<0>(v404, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v396, 5);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v272 + 24))(v272, &v294, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v404[j + 2]) < 0)
      operator delete(v404[j]);
  }
  v276 = v295;
  if (v295)
  {
    v277 = (unint64_t *)&v295->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  v279 = v414;
  v414 = 0;
  if (v279)
    (*((void (**)(std::__shared_weak_count_vtbl *))v279->~__shared_weak_count + 1))(v279);
  if (v293 < 0)
    operator delete(v292[0]);
  v280 = *a3;
  v290 = v389;
  if (v389)
  {
    v281 = (std::__shared_weak_count *)operator new();
    v282 = (std::__shared_weak_count_vtbl *)v389;
    v281->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v281->__shared_owners_ = 0;
    v281->__shared_weak_owners_ = 0;
    v281[1].__vftable = v282;
  }
  else
  {
    v281 = 0;
  }
  v291 = v281;
  v389 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v280 + 56))(v280, &v290);
  v283 = v291;
  if (v291)
  {
    v284 = (unint64_t *)&v291->__shared_owners_;
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }
  v286 = v389;
  v389 = 0;
  if (v286)
    (*(void (**)(void *))(*(_QWORD *)v286 + 8))(v286);
  if (v417)
  {
    v287 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v417);
    MEMORY[0x1E0C023A0](v287, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v386, 0);
  result = (uint64_t)v395;
  if (v395)
  {
    v289 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v395);
    return MEMORY[0x1E0C023A0](v289, 0x10A0C408EF24B1CLL);
  }
  return result;
}

