void sub_1E0876F30(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x5A0];
  STACK[0x5A0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 104), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x5A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x630], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceBaseReduction(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBaseReduction(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0877C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction(a1, (uint64_t)&v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0877CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::BaseArgReduction::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  void ***v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count_vtbl *v38;
  _QWORD *v39;
  std::__shared_weak_count_vtbl *v40;
  unint64_t v41;
  void **v42;
  void **v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  void **v51;
  void **v52;
  char *v53;
  __int128 v54;
  void **v55;
  void **v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _OWORD *v75;
  unsigned __int8 *v76;
  void **v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void **v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void **v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  void **v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void **v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  uint64_t i;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count_vtbl *v132;
  uint64_t v133;
  uint64_t result;
  uint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void **v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  void **v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154[2];
  char v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  void *v158;
  std::__shared_weak_count *v159;
  __n128 v160;
  __int128 v161;
  __int128 v162;
  void *v163[2];
  uint64_t v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  void *__p;
  void *v169;
  _QWORD *v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  __n128 v174;
  std::__shared_weak_count_vtbl *v175;
  _QWORD *v176;
  void **v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD v180[3];
  uint64_t v181[3];
  uint64_t v182[3];
  _QWORD v183[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v186;
  _QWORD v187[3];
  _QWORD *v188;
  _BYTE v189[24];
  _BYTE *v190;
  _QWORD v191[3];
  _QWORD *v192;
  uint64_t v193[2];

  v193[1] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v176 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v11->__on_zero_shared;
  v186 = &v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  Scalar = v11;
  v177 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v172 = v14 + 2;
  v173 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v171 = v14;
  v178 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v171);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v169 = v17 + 2;
  v170 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v179 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v177, 3, &v174);
  MIL::IRParameter::Make(&v174, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v175);
  v18 = v175;
  v175 = 0;
  if (v18)
    (*((void (**)(std::__shared_weak_count_vtbl *))v18->~__shared_weak_count + 1))(v18);
  v19 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v20 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v169 = __p;
    operator delete(__p);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  v22 = v176;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v167);
  MIL::IRParameter::Make(&v167, (uint64_t *)&v177);
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v22, "axis", (uint64_t *)&v177);
  v24 = v177;
  v177 = 0;
  if (v24)
    (*((void (**)(void **))*v24 + 1))(v24);
  v25 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v26 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v23 + 5) + 32))(*((_QWORD *)v23 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v23 + 5) + 48))(*((_QWORD *)v23 + 5), 1);
  v28 = v176;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v166);
  MIL::IRParameter::Make(&v166, (uint64_t *)&v177);
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v28, "keep_dims", (uint64_t *)&v177);
  v30 = v177;
  v177 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = (std::__shared_weak_count *)v166.n128_u64[1];
  if (v166.n128_u64[1])
  {
    v32 = (unint64_t *)(v166.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  __p = 0;
  v34 = operator new();
  *(_QWORD *)v34 = 0;
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  v177 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v34);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v177, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v35 = (void ***)__p;
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v37;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v37->~__shared_weak_count_0;
  v186 = &v37->~__shared_weak_count_0;
  v193[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v193, 1, &v165);
  MIL::IRParameter::Make(&v165, (uint64_t *)&v175);
  v38 = v175;
  v171 = v175;
  if (v175)
  {
    v39 = (_QWORD *)operator new();
    v40 = v175;
    *v39 = &unk_1EA99F888;
    v39[1] = 0;
    v39[2] = 0;
    v39[3] = v40;
  }
  else
  {
    v39 = 0;
  }
  v172 = v39;
  v175 = 0;
  v41 = (unint64_t)v35[2];
  v42 = v35[1];
  if ((unint64_t)v42 >= v41)
  {
    v44 = ((char *)v42 - (char *)*v35) >> 4;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v46 = v41 - (_QWORD)*v35;
    if (v46 >> 3 > v45)
      v45 = v46 >> 3;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
      v47 = 0xFFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    v180[1] = v35 + 2;
    v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v35 + 2), v47);
    v50 = &v48[16 * v44];
    *(_QWORD *)v50 = v38;
    *((_QWORD *)v50 + 1) = v39;
    v171 = 0;
    v172 = 0;
    v52 = *v35;
    v51 = v35[1];
    if (v51 == *v35)
    {
      v55 = v35[1];
      v53 = &v48[16 * v44];
    }
    else
    {
      v53 = &v48[16 * v44];
      do
      {
        v54 = *((_OWORD *)v51 - 1);
        v51 -= 2;
        *((_OWORD *)v53 - 1) = v54;
        v53 -= 16;
        *v51 = 0;
        v51[1] = 0;
      }
      while (v51 != v52);
      v55 = *v35;
      v51 = v35[1];
    }
    v43 = (void **)(v50 + 16);
    *v35 = (void **)v53;
    v177 = v55;
    v178 = (uint64_t)v55;
    v35[1] = (void **)(v50 + 16);
    v179 = (uint64_t)v51;
    v56 = v35[2];
    v35[2] = (void **)&v48[16 * v49];
    v180[0] = v56;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v177);
  }
  else
  {
    *v42 = v38;
    v42[1] = v39;
    v43 = v42 + 2;
    v171 = 0;
    v172 = 0;
  }
  v35[1] = v43;
  v57 = v175;
  v175 = 0;
  if (v57)
    (*((void (**)(std::__shared_weak_count_vtbl *))v57->~__shared_weak_count + 1))(v57);
  v58 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v59 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v163 = *(_OWORD *)a2;
  v164 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v61 = (uint64_t)v176;
  *(_QWORD *)&v162 = v176;
  if (v176)
  {
    v62 = (_QWORD *)operator new();
    *v62 = &unk_1EA99F8E8;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v61;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v162 + 1) = v62;
  v176 = 0;
  *(_QWORD *)&v161 = __p;
  if (__p)
  {
    v63 = (_QWORD *)operator new();
    v64 = __p;
    *v63 = &unk_1EA99F948;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v64;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v161 + 1) = v63;
  __p = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v191, a3);
  }
  else
  {
    v191[0] = &unk_1EA99FAC8;
    v191[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateBaseArgReduction;
    v192 = v191;
  }
  v190 = 0;
  MIL::IROperator::Make((__int128 *)v163, &v162, &v161, (uint64_t)v191, (uint64_t)v189, a4);
  v65 = v190;
  if (v190 == v189)
  {
    v66 = 4;
    v65 = v189;
  }
  else
  {
    if (!v190)
      goto LABEL_68;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_68:
  v67 = v192;
  if (v192 == v191)
  {
    v68 = 4;
    v67 = v191;
    goto LABEL_72;
  }
  if (v192)
  {
    v68 = 5;
LABEL_72:
    (*(void (**)(void))(*v67 + 8 * v68))();
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (SHIBYTE(v164) < 0)
    operator delete(v163[0]);
  v171 = 0;
  v75 = (_OWORD *)operator new();
  *v75 = 0u;
  v75[1] = 0u;
  *((_DWORD *)v75 + 8) = 1065353216;
  v171 = v75;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v160);
  MIL::IRParameter::Make(&v160, (uint64_t *)&v177);
  v76 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v75, "minimum_compute_type", (uint64_t *)&v177);
  v77 = v177;
  v177 = 0;
  if (v77)
    (*((void (**)(void **))*v77 + 1))(v77);
  v78 = (std::__shared_weak_count *)v160.n128_u64[1];
  if (v160.n128_u64[1])
  {
    v79 = (unint64_t *)(v160.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 32))(*((_QWORD *)v76 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 48))(*((_QWORD *)v76 + 5), 1);
  v81 = *a4;
  v82 = (std::__shared_weak_count_vtbl *)v171;
  v158 = v171;
  if (v171)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v82;
  }
  else
  {
    v83 = 0;
  }
  v159 = v83;
  v171 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v81 + 184))(v81, &v158);
  v84 = v159;
  if (v159)
  {
    p_shared_owners = (unint64_t *)&v159->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = *a4;
  v187[0] = &off_1EA99FBD8;
  v187[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction;
  v188 = v187;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v87 + 200))(v87, v187);
  v88 = v188;
  if (v188 == v187)
  {
    v89 = 4;
    v88 = v187;
  }
  else
  {
    if (!v188)
      goto LABEL_105;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_105:
  MIL::Validation::TensorDTypeConstraints::Make(&v177);
  v90 = v177;
  std::string::basic_string[abi:ne180100]<0>(v154, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v154, 0, (uint64_t *)&Scalar);
  v156 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v157 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v156, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v93 = v157;
  if (v157)
  {
    v94 = (unint64_t *)&v157->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v155 < 0)
    operator delete(v154[0]);
  v97 = *a4;
  v150 = v177;
  if (v177)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v177;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v151 = v98;
  v177 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v97 + 56))(v97, &v150);
  v100 = v151;
  if (v151)
  {
    v101 = (unint64_t *)&v151->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v177;
  v177 = 0;
  if (v103)
    (*((void (**)(void **))*v103 + 1))(v103);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v177);
  v104 = v177;
  std::string::basic_string[abi:ne180100]<0>(v146, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v146, 0, (uint64_t *)&Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v149 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v104 + 3))(v104, &v148, 0, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v107 = v149;
  if (v149)
  {
    v108 = (unint64_t *)&v149->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v147 < 0)
    operator delete(v146[0]);
  v111 = *a4;
  v142 = v177;
  if (v177)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v177;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = (std::__shared_weak_count_vtbl *)v113;
  }
  else
  {
    v112 = 0;
  }
  v143 = v112;
  v177 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v111 + 56))(v111, &v142);
  v114 = v143;
  if (v143)
  {
    v115 = (unint64_t *)&v143->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v177;
  v177 = 0;
  if (v117)
    (*((void (**)(void **))*v117 + 1))(v117);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v175);
  v118 = v175;
  std::string::basic_string[abi:ne180100]<0>(v138, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v138, 1, v193);
  v140 = v193[0];
  if (v193[0])
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = v193[0];
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = (std::__shared_weak_count_vtbl *)v120;
  }
  else
  {
    v119 = 0;
  }
  v141 = v119;
  v193[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v177, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v180, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v181, "int32");
  std::string::basic_string[abi:ne180100]<0>(v182, "int8");
  std::string::basic_string[abi:ne180100]<0>(v183, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v177, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v118->~__shared_weak_count
   + 3))(v118, &v140, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v183[i + 2]) < 0)
      operator delete((void *)v183[i]);
  }
  v122 = v141;
  if (v141)
  {
    v123 = (unint64_t *)&v141->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v193[0];
  v193[0] = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  if (v139 < 0)
    operator delete(v138[0]);
  v126 = *a4;
  v136 = v175;
  if (v175)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v175;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v137 = v127;
  v175 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v126 + 56))(v126, &v136);
  v129 = v137;
  if (v137)
  {
    v130 = (unint64_t *)&v137->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v175;
  v175 = 0;
  if (v132)
    (*((void (**)(std::__shared_weak_count_vtbl *))v132->~__shared_weak_count + 1))(v132);
  if (v171)
  {
    v133 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v171);
    MEMORY[0x1E0C023A0](v133, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v176;
  if (v176)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v176);
    return MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0878CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t *v64;
  uint64_t v66;
  uint64_t v67;

  v66 = a63;
  a63 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a58, 0);
  v67 = *v64;
  *v64 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceArgmax::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseArgReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087922C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceArgmin::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseArgReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087932C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::BaseReduction::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  uint64_t v38;
  std::__shared_weak_count_vtbl *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  char **v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _OWORD *v81;
  unsigned __int8 *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  void *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  void *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count_vtbl *v123;
  void *v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void *v137;
  void *v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  uint64_t i;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t result;
  uint64_t v155;
  void *v156;
  std::__shared_weak_count *v157;
  void *v158[2];
  char v159;
  void *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  void *v164[2];
  char v165;
  void *v166[2];
  char v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  void *v170[2];
  char v171;
  void *v172[2];
  char v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  void *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  void *v184[2];
  char v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  __n128 v190;
  __int128 v191;
  __int128 v192;
  void *v193[2];
  uint64_t v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  __n128 v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  char **v202;
  __n128 v203;
  __n128 v204;
  void *__p;
  void *v206;
  _QWORD *v207;
  __n128 v208;
  _QWORD *v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD v213[3];
  uint64_t v214[3];
  uint64_t v215[3];
  _QWORD v216[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v219;
  _QWORD v220[3];
  _QWORD *v221;
  _BYTE v222[24];
  _BYTE *v223;
  _QWORD v224[3];
  _QWORD *v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count_vtbl *v227;
  _QWORD *v228;
  uint64_t v229;

  v229 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v209 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared;
  v219 = (uint64_t)&v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  Scalar = v11;
  v210 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v227 = (std::__shared_weak_count_vtbl *)&v14->__on_zero_shared;
  v228 = &v14->__on_zero_shared;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v226 = v14;
  v211 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v226);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v207 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v206 = v17 + 2;
  v212 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v210, 3, &v208);
  MIL::IRParameter::Make(&v208, (uint64_t *)&v195);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v195);
  v18 = v195;
  v195 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v208.n128_u64[1];
  if (v208.n128_u64[1])
  {
    v20 = (unint64_t *)(v208.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v206 = __p;
    operator delete(__p);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v22 = v209;
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = operator new(8uLL);
  v210 = v24;
  *v24 = v23;
  v212 = (uint64_t)(v24 + 1);
  v211 = (uint64_t)(v24 + 1);
  v226 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v210);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v226, 1, &v204);
  MIL::IRParameter::Make(&v204, (uint64_t *)&Scalar);
  v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v22, "axes", (uint64_t *)&Scalar);
  v26 = Scalar;
  Scalar = 0;
  if (v26)
    (*((void (**)(std::__shared_weak_count_vtbl *))v26->~__shared_weak_count + 1))(v26);
  v27 = (std::__shared_weak_count *)v204.n128_u64[1];
  if (v204.n128_u64[1])
  {
    v28 = (unint64_t *)(v204.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v210)
  {
    v211 = (uint64_t)v210;
    operator delete(v210);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v25 + 5) + 32))(*((_QWORD *)v25 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v25 + 5) + 48))(*((_QWORD *)v25 + 5), 1);
  v30 = v209;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v203);
  MIL::IRParameter::Make(&v203, (uint64_t *)&v210);
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v30, "keep_dims", (uint64_t *)&v210);
  v32 = v210;
  v210 = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  v33 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v34 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  v202 = 0;
  v36 = operator new();
  *(_QWORD *)v36 = 0;
  *(_QWORD *)(v36 + 8) = 0;
  *(_QWORD *)(v36 + 16) = 0;
  v210 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v202, (void **)v36);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v210, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v202, 1uLL);
  v37 = v202;
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v226 = v39;
  v39->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
  v227 = (std::__shared_weak_count_vtbl *)&v39->~__shared_weak_count_0;
  v228 = &v39->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v226);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  __p = v41;
  *v41 = v40;
  v207 = v41 + 1;
  v206 = v41 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v195 = v43;
  *v43 = v42;
  v196 = v43 + 1;
  v197 = v43 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v195);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v198);
  MIL::IRParameter::Make(&v198, &v199);
  v44 = v199;
  v200 = v199;
  if (v199)
  {
    v45 = (_QWORD *)operator new();
    v46 = v199;
    *v45 = &unk_1EA99F888;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v46;
  }
  else
  {
    v45 = 0;
  }
  v201 = v45;
  v199 = 0;
  v47 = v37[2];
  v48 = v37[1];
  if (v48 >= v47)
  {
    v50 = (v48 - *v37) >> 4;
    v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v52 = v47 - *v37;
    if (v52 >> 3 > v51)
      v51 = v52 >> 3;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
      v53 = 0xFFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    v213[1] = v37 + 2;
    v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v37 + 2), v53);
    v56 = (uint64_t *)&v54[16 * v50];
    *v56 = v44;
    v56[1] = (uint64_t)v45;
    v200 = 0;
    v201 = 0;
    v58 = *v37;
    v57 = v37[1];
    if (v57 == *v37)
    {
      v61 = v37[1];
      v59 = &v54[16 * v50];
    }
    else
    {
      v59 = &v54[16 * v50];
      do
      {
        v60 = *((_OWORD *)v57 - 1);
        v57 -= 16;
        *((_OWORD *)v59 - 1) = v60;
        v59 -= 16;
        *(_QWORD *)v57 = 0;
        *((_QWORD *)v57 + 1) = 0;
      }
      while (v57 != v58);
      v61 = *v37;
      v57 = v37[1];
    }
    v49 = (char *)(v56 + 2);
    *v37 = v59;
    v211 = (uint64_t)v61;
    v37[1] = (char *)(v56 + 2);
    v212 = (uint64_t)v57;
    v62 = v37[2];
    v37[2] = &v54[16 * v55];
    v213[0] = v62;
    v210 = v61;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v210);
  }
  else
  {
    *(_QWORD *)v48 = v44;
    *((_QWORD *)v48 + 1) = v45;
    v49 = v48 + 16;
    v200 = 0;
    v201 = 0;
  }
  v37[1] = v49;
  v63 = v199;
  v199 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v198.n128_u64[1];
  if (v198.n128_u64[1])
  {
    v65 = (unint64_t *)(v198.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (__p)
  {
    v206 = __p;
    operator delete(__p);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  *(_OWORD *)v193 = *(_OWORD *)a2;
  v194 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v67 = (uint64_t)v209;
  *(_QWORD *)&v192 = v209;
  if (v209)
  {
    v68 = (_QWORD *)operator new();
    *v68 = &unk_1EA99F8E8;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v67;
  }
  else
  {
    v68 = 0;
  }
  *((_QWORD *)&v192 + 1) = v68;
  v209 = 0;
  *(_QWORD *)&v191 = v202;
  if (v202)
  {
    v69 = (_QWORD *)operator new();
    v70 = v202;
    *v69 = &unk_1EA99F948;
    v69[1] = 0;
    v69[2] = 0;
    v69[3] = v70;
  }
  else
  {
    v69 = 0;
  }
  *((_QWORD *)&v191 + 1) = v69;
  v202 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v224, a3);
  }
  else
  {
    v224[0] = &unk_1EA99FAC8;
    v224[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateBaseReduction;
    v225 = v224;
  }
  v223 = 0;
  MIL::IROperator::Make((__int128 *)v193, &v192, &v191, (uint64_t)v224, (uint64_t)v222, a4);
  v71 = v223;
  if (v223 == v222)
  {
    v72 = 4;
    v71 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_74;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_74:
  v73 = v225;
  if (v225 == v224)
  {
    v74 = 4;
    v73 = v224;
    goto LABEL_78;
  }
  if (v225)
  {
    v74 = 5;
LABEL_78:
    (*(void (**)(void))(*v73 + 8 * v74))();
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
  if (*((_QWORD *)&v191 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (SHIBYTE(v194) < 0)
    operator delete(v193[0]);
  v226 = 0;
  v81 = (_OWORD *)operator new();
  *v81 = 0u;
  v81[1] = 0u;
  *((_DWORD *)v81 + 8) = 1065353216;
  v226 = (std::__shared_weak_count_vtbl *)v81;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v190);
  MIL::IRParameter::Make(&v190, (uint64_t *)&v210);
  v82 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v81, "minimum_compute_type", (uint64_t *)&v210);
  v83 = v210;
  v210 = 0;
  if (v83)
    (*(void (**)(void *))(*(_QWORD *)v83 + 8))(v83);
  v84 = (std::__shared_weak_count *)v190.n128_u64[1];
  if (v190.n128_u64[1])
  {
    v85 = (unint64_t *)(v190.n128_u64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v82 + 5) + 32))(*((_QWORD *)v82 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v82 + 5) + 48))(*((_QWORD *)v82 + 5), 1);
  v87 = *a4;
  v88 = v226;
  v188 = v226;
  if (v226)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v88;
  }
  else
  {
    v89 = 0;
  }
  v189 = v89;
  v226 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v87 + 184))(v87, &v188);
  v90 = v189;
  if (v189)
  {
    p_shared_owners = (unint64_t *)&v189->__shared_owners_;
    do
      v92 = __ldaxr(p_shared_owners);
    while (__stlxr(v92 - 1, p_shared_owners));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = *a4;
  v220[0] = &off_1EA99FBD8;
  v220[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceBaseReduction;
  v221 = v220;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v93 + 200))(v93, v220);
  v94 = v221;
  if (v221 == v220)
  {
    v95 = 4;
    v94 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_111;
    v95 = 5;
  }
  (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_111:
  MIL::Validation::TensorDTypeConstraints::Make(&v210);
  v96 = v210;
  std::string::basic_string[abi:ne180100]<0>(v184, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v184, 0, (uint64_t *)&Scalar);
  v186 = Scalar;
  if (Scalar)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = Scalar;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v187 = v97;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v96 + 24))(v96, &v186, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v99 = v187;
  if (v187)
  {
    v100 = (unint64_t *)&v187->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = Scalar;
  Scalar = 0;
  if (v102)
    (*((void (**)(std::__shared_weak_count_vtbl *))v102->~__shared_weak_count + 1))(v102);
  if (v185 < 0)
    operator delete(v184[0]);
  v103 = v210;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v180 = Scalar;
  if (Scalar)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = Scalar;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v181 = v104;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v103 + 24))(v103, &v180, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v106 = v181;
  if (v181)
  {
    v107 = (unint64_t *)&v181->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = Scalar;
  Scalar = 0;
  if (v109)
    (*((void (**)(std::__shared_weak_count_vtbl *))v109->~__shared_weak_count + 1))(v109);
  v110 = *a4;
  v176 = v210;
  if (v210)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)v210;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v177 = v111;
  v210 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v110 + 56))(v110, &v176);
  v113 = v177;
  if (v177)
  {
    v114 = (unint64_t *)&v177->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v210;
  v210 = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v210);
  v117 = v210;
  std::string::basic_string[abi:ne180100]<0>(v172, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v172, 0, (uint64_t *)&Scalar);
  v174 = Scalar;
  if (Scalar)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = Scalar;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v175 = v118;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v170, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v117 + 24))(v117, &v174, 0, v170);
  if (v171 < 0)
    operator delete(v170[0]);
  v120 = v175;
  if (v175)
  {
    v121 = (unint64_t *)&v175->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = Scalar;
  Scalar = 0;
  if (v123)
    (*((void (**)(std::__shared_weak_count_vtbl *))v123->~__shared_weak_count + 1))(v123);
  if (v173 < 0)
    operator delete(v172[0]);
  v124 = v210;
  std::string::basic_string[abi:ne180100]<0>(v166, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v166, 1, (uint64_t *)&Scalar);
  v168 = Scalar;
  if (Scalar)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = Scalar;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v169 = v125;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v164, "K");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v124 + 24))(v124, &v168, 0, v164);
  if (v165 < 0)
    operator delete(v164[0]);
  v127 = v169;
  if (v169)
  {
    v128 = (unint64_t *)&v169->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = Scalar;
  Scalar = 0;
  if (v130)
    (*((void (**)(std::__shared_weak_count_vtbl *))v130->~__shared_weak_count + 1))(v130);
  if (v167 < 0)
    operator delete(v166[0]);
  v131 = *a4;
  v162 = v210;
  if (v210)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = (std::__shared_weak_count_vtbl *)v210;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v163 = v132;
  v210 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v131 + 56))(v131, &v162);
  v134 = v163;
  if (v163)
  {
    v135 = (unint64_t *)&v163->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v210;
  v210 = 0;
  if (v137)
    (*(void (**)(void *))(*(_QWORD *)v137 + 8))(v137);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v138 = __p;
  std::string::basic_string[abi:ne180100]<0>(v158, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v158, 1, (uint64_t *)&v195);
  v160 = v195;
  if (v195)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = (std::__shared_weak_count_vtbl *)v195;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v161 = v139;
  v195 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v210, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v213, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v214, "int32");
  std::string::basic_string[abi:ne180100]<0>(v215, "int8");
  std::string::basic_string[abi:ne180100]<0>(v216, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v210, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v138 + 24))(v138, &v160, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v216[i + 2]) < 0)
      operator delete((void *)v216[i]);
  }
  v142 = v161;
  if (v161)
  {
    v143 = (unint64_t *)&v161->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v195;
  v195 = 0;
  if (v145)
    (*(void (**)(void *))(*(_QWORD *)v145 + 8))(v145);
  if (v159 < 0)
    operator delete(v158[0]);
  v146 = *a4;
  v156 = __p;
  if (__p)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)__p;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v157 = v147;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v146 + 56))(v146, &v156);
  v149 = v157;
  if (v157)
  {
    v150 = (unint64_t *)&v157->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = __p;
  __p = 0;
  if (v152)
    (*(void (**)(void *))(*(_QWORD *)v152 + 8))(v152);
  if (v226)
  {
    v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v226);
    MEMORY[0x1E0C023A0](v153, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v202, 0);
  result = (uint64_t)v209;
  if (v209)
  {
    v155 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v209);
    return MEMORY[0x1E0C023A0](v155, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E087A604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a68;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v71;
  uint64_t v72;

  v71 = STACK[0x200];
  STACK[0x200] = 0;
  if (v71)
    (*(void (**)(unint64_t))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v69 - 112), 0);
  v72 = *v68;
  *v68 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x228], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceL1Norm::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087AC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceL2Norm::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087AD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceLogSum::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087AE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceLogSumExp::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087AF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceMax::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087B050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceMean::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087B150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceMin::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087B250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceProd::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087B350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceSum::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087B450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceSumSquare::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087B550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::BaseScatter::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  std::__shared_weak_count_vtbl *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  char *v75;
  char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  char **v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _OWORD *v95;
  unsigned __int8 *v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  unint64_t *p_shared_owners;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  void *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count_vtbl *v116;
  void *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count_vtbl *v123;
  void *v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void *v137;
  void *v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count_vtbl *v144;
  void *v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count_vtbl *v151;
  void *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count_vtbl *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  void *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  uint64_t i;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  void *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  uint64_t j;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t result;
  uint64_t v191;
  void *v192;
  std::__shared_weak_count *v193;
  void *v194[2];
  char v195;
  void *v196;
  std::__shared_weak_count *v197;
  void *v198[2];
  char v199;
  void *v200;
  std::__shared_weak_count *v201;
  void *v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  void *v206[2];
  char v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  char v211;
  void *v212[2];
  char v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218[2];
  char v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  void *v222;
  std::__shared_weak_count *v223;
  void *v224[2];
  char v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  void *v228[2];
  char v229;
  void *v230[2];
  char v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  void *v234[2];
  char v235;
  void *v236[2];
  char v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  std::__shared_weak_count_vtbl *v240;
  std::__shared_weak_count *v241;
  __n128 v242;
  __int128 v243;
  __int128 v244;
  void *v245[2];
  uint64_t v246;
  void *v247;
  void *v248;
  _QWORD *v249;
  __n128 v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  char **v254;
  __n128 v255;
  __n128 v256;
  __n128 v257;
  void *__p;
  void *v259;
  _QWORD *v260;
  __n128 v261;
  _QWORD *v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD v266[3];
  _QWORD v267[3];
  _QWORD v268[3];
  _QWORD v269[3];
  uint64_t v270[3];
  _QWORD v271[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v274;
  _BYTE v275[24];
  _BYTE *v276;
  _BYTE v277[24];
  _BYTE *v278;
  _BYTE v279[24];
  _BYTE *v280;
  std::__shared_weak_count_vtbl *v281;
  std::__shared_weak_count_vtbl *v282;
  _QWORD *v283;
  uint64_t v284;

  v284 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v262 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared;
  v274 = (uint64_t)&v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  Scalar = v11;
  v263 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v282 = (std::__shared_weak_count_vtbl *)&v14->__on_zero_shared;
  v283 = &v14->__on_zero_shared;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v281 = v14;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v281);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v260 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v259 = v17 + 2;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 3, &v261);
  MIL::IRParameter::Make(&v261, (uint64_t *)&v247);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "data", (uint64_t *)&v247);
  v18 = v247;
  v247 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v261.n128_u64[1];
  if (v261.n128_u64[1])
  {
    v20 = (unint64_t *)(v261.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v281)
  {
    v282 = v281;
    operator delete(v281);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v22 = v262;
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(0x10uLL);
  v265 = (uint64_t)(v25 + 2);
  *v25 = v23;
  v25[1] = v24;
  v263 = v25;
  v264 = (uint64_t)(v25 + 2);
  v281 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v263);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v281, 1, &v257);
  MIL::IRParameter::Make(&v257, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v22, "indices", (uint64_t *)&Scalar);
  v26 = Scalar;
  Scalar = 0;
  if (v26)
    (*((void (**)(std::__shared_weak_count_vtbl *))v26->~__shared_weak_count + 1))(v26);
  v27 = (std::__shared_weak_count *)v257.n128_u64[1];
  if (v257.n128_u64[1])
  {
    v28 = (unint64_t *)(v257.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v263)
  {
    v264 = (uint64_t)v263;
    operator delete(v263);
  }
  v30 = v262;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v33->__on_zero_shared;
  v274 = (uint64_t)&v33->__on_zero_shared;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v31;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  Scalar = v33;
  v263 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v282 = (std::__shared_weak_count_vtbl *)&v36->__on_zero_shared;
  v283 = &v36->__on_zero_shared;
  v36->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v36->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v35;
  v281 = v36;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v281);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(0x10uLL);
  v260 = v39 + 2;
  *v39 = v37;
  v39[1] = v38;
  __p = v39;
  v259 = v39 + 2;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 3, &v256);
  MIL::IRParameter::Make(&v256, (uint64_t *)&v247);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v30, "updates", (uint64_t *)&v247);
  v40 = v247;
  v247 = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v256.n128_u64[1];
  if (v256.n128_u64[1])
  {
    v42 = (unint64_t *)(v256.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v281)
  {
    v282 = v281;
    operator delete(v281);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v44 = v262;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v255);
  MIL::IRParameter::Make(&v255, (uint64_t *)&v263);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v44, "mode", (uint64_t *)&v263);
  v46 = v263;
  v263 = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v255.n128_u64[1];
  if (v255.n128_u64[1])
  {
    v48 = (unint64_t *)(v255.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v254 = 0;
  v50 = operator new();
  *(_QWORD *)v50 = 0;
  *(_QWORD *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 16) = 0;
  v263 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v254, (void **)v50);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v263, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v254, 1uLL);
  v51 = v254;
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v281 = v53;
  v53->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v52;
  v282 = (std::__shared_weak_count_vtbl *)&v53->~__shared_weak_count_0;
  v283 = &v53->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v281);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(8uLL);
  __p = v55;
  *v55 = v54;
  v260 = v55 + 1;
  v259 = v55 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v56 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v57 = operator new(8uLL);
  v247 = v57;
  *v57 = v56;
  v249 = v57 + 1;
  v248 = v57 + 1;
  v274 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v247);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v250);
  MIL::IRParameter::Make(&v250, &v251);
  v58 = v251;
  v252 = v251;
  if (v251)
  {
    v59 = (_QWORD *)operator new();
    v60 = v251;
    *v59 = &unk_1EA99F888;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v60;
  }
  else
  {
    v59 = 0;
  }
  v253 = v59;
  v251 = 0;
  v61 = v51[2];
  v62 = v51[1];
  if (v62 >= v61)
  {
    v64 = (v62 - *v51) >> 4;
    v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v66 = v61 - *v51;
    if (v66 >> 3 > v65)
      v65 = v66 >> 3;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
      v67 = 0xFFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    v266[1] = v51 + 2;
    v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v51 + 2), v67);
    v70 = (uint64_t *)&v68[16 * v64];
    *v70 = v58;
    v70[1] = (uint64_t)v59;
    v253 = 0;
    v252 = 0;
    v72 = *v51;
    v71 = v51[1];
    if (v71 == *v51)
    {
      v75 = v51[1];
      v73 = &v68[16 * v64];
    }
    else
    {
      v73 = &v68[16 * v64];
      do
      {
        v74 = *((_OWORD *)v71 - 1);
        v71 -= 16;
        *((_OWORD *)v73 - 1) = v74;
        v73 -= 16;
        *(_QWORD *)v71 = 0;
        *((_QWORD *)v71 + 1) = 0;
      }
      while (v71 != v72);
      v75 = *v51;
      v71 = v51[1];
    }
    v63 = (char *)(v70 + 2);
    *v51 = v73;
    v264 = (uint64_t)v75;
    v51[1] = (char *)(v70 + 2);
    v265 = (uint64_t)v71;
    v76 = v51[2];
    v51[2] = &v68[16 * v69];
    v266[0] = v76;
    v263 = v75;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v263);
  }
  else
  {
    *(_QWORD *)v62 = v58;
    *((_QWORD *)v62 + 1) = v59;
    v63 = v62 + 16;
    v253 = 0;
    v252 = 0;
  }
  v51[1] = v63;
  v77 = v251;
  v251 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = (std::__shared_weak_count *)v250.n128_u64[1];
  if (v250.n128_u64[1])
  {
    v79 = (unint64_t *)(v250.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v281)
  {
    v282 = v281;
    operator delete(v281);
  }
  *(_OWORD *)v245 = *(_OWORD *)a2;
  v246 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v81 = (uint64_t)v262;
  *(_QWORD *)&v244 = v262;
  if (v262)
  {
    v82 = (_QWORD *)operator new();
    *v82 = &unk_1EA99F8E8;
    v82[1] = 0;
    v82[2] = 0;
    v82[3] = v81;
  }
  else
  {
    v82 = 0;
  }
  *((_QWORD *)&v244 + 1) = v82;
  v262 = 0;
  *(_QWORD *)&v243 = v254;
  if (v254)
  {
    v83 = (_QWORD *)operator new();
    v84 = v254;
    *v83 = &unk_1EA99F948;
    v83[1] = 0;
    v83[2] = 0;
    v83[3] = v84;
  }
  else
  {
    v83 = 0;
  }
  *((_QWORD *)&v243 + 1) = v83;
  v254 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v279, a3);
  v278 = 0;
  MIL::IROperator::Make((__int128 *)v245, &v244, &v243, (uint64_t)v279, (uint64_t)v277, a4);
  v85 = v278;
  if (v278 == v277)
  {
    v86 = 4;
    v85 = v277;
  }
  else
  {
    if (!v278)
      goto LABEL_84;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_84:
  v87 = v280;
  if (v280 == v279)
  {
    v88 = 4;
    v87 = v279;
    goto LABEL_88;
  }
  if (v280)
  {
    v88 = 5;
LABEL_88:
    (*(void (**)(void))(*v87 + 8 * v88))();
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
  if (*((_QWORD *)&v243 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
  if (*((_QWORD *)&v244 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (SHIBYTE(v246) < 0)
    operator delete(v245[0]);
  v281 = 0;
  v95 = (_OWORD *)operator new();
  *v95 = 0u;
  v95[1] = 0u;
  *((_DWORD *)v95 + 8) = 1065353216;
  v281 = (std::__shared_weak_count_vtbl *)v95;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v242);
  MIL::IRParameter::Make(&v242, (uint64_t *)&v263);
  v96 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v95, "minimum_compute_type", (uint64_t *)&v263);
  v97 = v263;
  v263 = 0;
  if (v97)
    (*(void (**)(void *))(*(_QWORD *)v97 + 8))(v97);
  v98 = (std::__shared_weak_count *)v242.n128_u64[1];
  if (v242.n128_u64[1])
  {
    v99 = (unint64_t *)(v242.n128_u64[1] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v96 + 5) + 32))(*((_QWORD *)v96 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v96 + 5) + 48))(*((_QWORD *)v96 + 5), 1);
  v101 = *a4;
  v102 = v281;
  v240 = v281;
  if (v281)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v102;
  }
  else
  {
    v103 = 0;
  }
  v241 = v103;
  v281 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v101 + 184))(v101, &v240);
  v104 = v241;
  if (v241)
  {
    p_shared_owners = (unint64_t *)&v241->__shared_owners_;
    do
      v106 = __ldaxr(p_shared_owners);
    while (__stlxr(v106 - 1, p_shared_owners));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v263, "data");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v263, (uint64_t)v275);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v107 + 200))(v107, v275);
  v108 = v276;
  if (v276 == v275)
  {
    v109 = 4;
    v108 = v275;
  }
  else
  {
    if (!v276)
      goto LABEL_121;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_121:
  if (SHIBYTE(v265) < 0)
    operator delete(v263);
  MIL::Validation::TensorDTypeConstraints::Make(&v263);
  v110 = v263;
  std::string::basic_string[abi:ne180100]<0>(v236, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v236, 0, (uint64_t *)&Scalar);
  v238 = Scalar;
  if (Scalar)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = Scalar;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v239 = v111;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v234, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v110 + 24))(v110, &v238, v234);
  if (v235 < 0)
    operator delete(v234[0]);
  v113 = v239;
  if (v239)
  {
    v114 = (unint64_t *)&v239->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = Scalar;
  Scalar = 0;
  if (v116)
    (*((void (**)(std::__shared_weak_count_vtbl *))v116->~__shared_weak_count + 1))(v116);
  if (v237 < 0)
    operator delete(v236[0]);
  v117 = v263;
  std::string::basic_string[abi:ne180100]<0>(v230, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v230, 0, (uint64_t *)&Scalar);
  v232 = Scalar;
  if (Scalar)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = Scalar;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v233 = v118;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v228, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v117 + 24))(v117, &v232, v228);
  if (v229 < 0)
    operator delete(v228[0]);
  v120 = v233;
  if (v233)
  {
    v121 = (unint64_t *)&v233->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = Scalar;
  Scalar = 0;
  if (v123)
    (*((void (**)(std::__shared_weak_count_vtbl *))v123->~__shared_weak_count + 1))(v123);
  if (v231 < 0)
    operator delete(v230[0]);
  v124 = v263;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v226 = Scalar;
  if (Scalar)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = Scalar;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v227 = v125;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v224, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v124 + 24))(v124, &v226, v224);
  if (v225 < 0)
    operator delete(v224[0]);
  v127 = v227;
  if (v227)
  {
    v128 = (unint64_t *)&v227->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = Scalar;
  Scalar = 0;
  if (v130)
    (*((void (**)(std::__shared_weak_count_vtbl *))v130->~__shared_weak_count + 1))(v130);
  v131 = *a4;
  v222 = v263;
  if (v263)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = (std::__shared_weak_count_vtbl *)v263;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v223 = v132;
  v263 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v131 + 56))(v131, &v222);
  v134 = v223;
  if (v223)
  {
    v135 = (unint64_t *)&v223->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v263;
  v263 = 0;
  if (v137)
    (*(void (**)(void *))(*(_QWORD *)v137 + 8))(v137);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v263);
  v138 = v263;
  std::string::basic_string[abi:ne180100]<0>(v218, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v218, 0, (uint64_t *)&Scalar);
  v220 = Scalar;
  if (Scalar)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = Scalar;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v221 = v139;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v216, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v138 + 24))(v138, &v220, 0, v216);
  if (v217 < 0)
    operator delete(v216[0]);
  v141 = v221;
  if (v221)
  {
    v142 = (unint64_t *)&v221->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = Scalar;
  Scalar = 0;
  if (v144)
    (*((void (**)(std::__shared_weak_count_vtbl *))v144->~__shared_weak_count + 1))(v144);
  if (v219 < 0)
    operator delete(v218[0]);
  v145 = v263;
  std::string::basic_string[abi:ne180100]<0>(v212, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v212, 0, (uint64_t *)&Scalar);
  v214 = Scalar;
  if (Scalar)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = Scalar;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v215 = v146;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v210, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v145 + 24))(v145, &v214, 0, v210);
  if (v211 < 0)
    operator delete(v210[0]);
  v148 = v215;
  if (v215)
  {
    v149 = (unint64_t *)&v215->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = Scalar;
  Scalar = 0;
  if (v151)
    (*((void (**)(std::__shared_weak_count_vtbl *))v151->~__shared_weak_count + 1))(v151);
  if (v213 < 0)
    operator delete(v212[0]);
  v152 = v263;
  std::string::basic_string[abi:ne180100]<0>(v206, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v206, 0, (uint64_t *)&Scalar);
  v208 = Scalar;
  if (Scalar)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = Scalar;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v209 = v153;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v204, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v152 + 24))(v152, &v208, 0, v204);
  if (v205 < 0)
    operator delete(v204[0]);
  v155 = v209;
  if (v209)
  {
    v156 = (unint64_t *)&v209->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = Scalar;
  Scalar = 0;
  if (v158)
    (*((void (**)(std::__shared_weak_count_vtbl *))v158->~__shared_weak_count + 1))(v158);
  if (v207 < 0)
    operator delete(v206[0]);
  v159 = *a4;
  v202 = v263;
  if (v263)
  {
    v160 = (std::__shared_weak_count *)operator new();
    v161 = (std::__shared_weak_count_vtbl *)v263;
    v160->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v160->__shared_owners_ = 0;
    v160->__shared_weak_owners_ = 0;
    v160[1].__vftable = v161;
  }
  else
  {
    v160 = 0;
  }
  v203 = v160;
  v263 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v159 + 56))(v159, &v202);
  v162 = v203;
  if (v203)
  {
    v163 = (unint64_t *)&v203->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = v263;
  v263 = 0;
  if (v165)
    (*(void (**)(void *))(*(_QWORD *)v165 + 8))(v165);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v166 = __p;
  std::string::basic_string[abi:ne180100]<0>(v198, "mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v198, 0, (uint64_t *)&v247);
  v200 = v247;
  if (v247)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = (std::__shared_weak_count_vtbl *)v247;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v201 = v167;
  v247 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v263, "add");
  std::string::basic_string[abi:ne180100]<0>(v266, "div");
  std::string::basic_string[abi:ne180100]<0>(v267, "max");
  std::string::basic_string[abi:ne180100]<0>(v268, "min");
  std::string::basic_string[abi:ne180100]<0>(v269, "mul");
  std::string::basic_string[abi:ne180100]<0>(v270, "sub");
  std::string::basic_string[abi:ne180100]<0>(v271, "update");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v263, 7);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v166 + 24))(v166, &v200, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v271[i + 2]) < 0)
      operator delete((void *)v271[i]);
  }
  v170 = v201;
  if (v201)
  {
    v171 = (unint64_t *)&v201->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = v247;
  v247 = 0;
  if (v173)
    (*(void (**)(void *))(*(_QWORD *)v173 + 8))(v173);
  if (v199 < 0)
    operator delete(v198[0]);
  v174 = __p;
  std::string::basic_string[abi:ne180100]<0>(v194, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v194, 1, (uint64_t *)&v247);
  v196 = v247;
  if (v247)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = (std::__shared_weak_count_vtbl *)v247;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v197 = v175;
  v247 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v263, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v266, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v267, "int32");
  std::string::basic_string[abi:ne180100]<0>(v268, "int8");
  std::string::basic_string[abi:ne180100]<0>(v269, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v263, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v174 + 24))(v174, &v196, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v269[j + 2]) < 0)
      operator delete((void *)v269[j]);
  }
  v178 = v197;
  if (v197)
  {
    v179 = (unint64_t *)&v197->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = v247;
  v247 = 0;
  if (v181)
    (*(void (**)(void *))(*(_QWORD *)v181 + 8))(v181);
  if (v195 < 0)
    operator delete(v194[0]);
  v182 = *a4;
  v192 = __p;
  if (__p)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = (std::__shared_weak_count_vtbl *)__p;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = v184;
  }
  else
  {
    v183 = 0;
  }
  v193 = v183;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v182 + 56))(v182, &v192);
  v185 = v193;
  if (v193)
  {
    v186 = (unint64_t *)&v193->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = __p;
  __p = 0;
  if (v188)
    (*(void (**)(void *))(*(_QWORD *)v188 + 8))(v188);
  if (v281)
  {
    v189 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v281);
    MEMORY[0x1E0C023A0](v189, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v254, 0);
  result = (uint64_t)v262;
  if (v262)
  {
    v191 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v262);
    return MEMORY[0x1E0C023A0](v191, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E087CD68(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x2C0];
  STACK[0x2C0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x288], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2E8], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::BaseScatterWithAxis::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char **v57;
  uint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  char *v81;
  char *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  char **v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _OWORD *v101;
  unsigned __int8 *v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  void *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  void *v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count_vtbl *v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void *v143;
  void *v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  void *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count_vtbl *v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  void *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  uint64_t i;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  void *v179;
  void *v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count_vtbl *v182;
  uint64_t j;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t result;
  uint64_t v197;
  void *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  void *v206;
  std::__shared_weak_count *v207;
  void *v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  char v211;
  void *v212[2];
  char v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218[2];
  char v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  void *v222[2];
  char v223;
  void *v224[2];
  char v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  void *v228;
  std::__shared_weak_count *v229;
  void *v230[2];
  char v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  void *v234[2];
  char v235;
  void *v236[2];
  char v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  void *v240[2];
  char v241;
  void *v242[2];
  char v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count_vtbl *v246;
  std::__shared_weak_count *v247;
  __n128 v248;
  __int128 v249;
  __int128 v250;
  void *v251[2];
  uint64_t v252;
  void *v253;
  void *v254;
  _QWORD *v255;
  __n128 v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  char **v260;
  __n128 v261;
  __n128 v262;
  __n128 v263;
  __n128 v264;
  void *__p;
  void *v266;
  _QWORD *v267;
  __n128 v268;
  _QWORD *v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD v273[3];
  _QWORD v274[3];
  _QWORD v275[3];
  _QWORD v276[3];
  uint64_t v277[3];
  _QWORD v278[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v281;
  _BYTE v282[24];
  _BYTE *v283;
  _BYTE v284[24];
  _BYTE *v285;
  _QWORD v286[3];
  _QWORD *v287;
  std::__shared_weak_count_vtbl *v288;
  std::__shared_weak_count_vtbl *v289;
  _QWORD *v290;
  uint64_t v291;

  v291 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v269 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared;
  v281 = (uint64_t)&v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  Scalar = v11;
  v270 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v289 = (std::__shared_weak_count_vtbl *)&v14->__on_zero_shared;
  v290 = &v14->__on_zero_shared;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v288 = v14;
  v271 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v288);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v267 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v266 = v17 + 2;
  v272 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v270, 3, &v268);
  MIL::IRParameter::Make(&v268, (uint64_t *)&v253);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "data", (uint64_t *)&v253);
  v18 = v253;
  v253 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v268.n128_u64[1];
  if (v268.n128_u64[1])
  {
    v20 = (unint64_t *)(v268.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v266 = __p;
    operator delete(__p);
  }
  if (v288)
  {
    v289 = v288;
    operator delete(v288);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v22 = v269;
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(0x10uLL);
  v272 = (uint64_t)(v25 + 2);
  *v25 = v23;
  v25[1] = v24;
  v270 = v25;
  v271 = (uint64_t)(v25 + 2);
  v288 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v270);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v288, 1, &v264);
  MIL::IRParameter::Make(&v264, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v22, "indices", (uint64_t *)&Scalar);
  v26 = Scalar;
  Scalar = 0;
  if (v26)
    (*((void (**)(std::__shared_weak_count_vtbl *))v26->~__shared_weak_count + 1))(v26);
  v27 = (std::__shared_weak_count *)v264.n128_u64[1];
  if (v264.n128_u64[1])
  {
    v28 = (unint64_t *)(v264.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v270)
  {
    v271 = (uint64_t)v270;
    operator delete(v270);
  }
  v30 = v269;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v33->__on_zero_shared;
  v281 = (uint64_t)&v33->__on_zero_shared;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v31;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  Scalar = v33;
  v270 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v289 = (std::__shared_weak_count_vtbl *)&v36->__on_zero_shared;
  v290 = &v36->__on_zero_shared;
  v36->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v36->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v35;
  v288 = v36;
  v271 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v288);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(0x10uLL);
  v267 = v39 + 2;
  *v39 = v37;
  v39[1] = v38;
  __p = v39;
  v266 = v39 + 2;
  v272 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v270, 3, &v263);
  MIL::IRParameter::Make(&v263, (uint64_t *)&v253);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v30, "updates", (uint64_t *)&v253);
  v40 = v253;
  v253 = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v263.n128_u64[1];
  if (v263.n128_u64[1])
  {
    v42 = (unint64_t *)(v263.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (__p)
  {
    v266 = __p;
    operator delete(__p);
  }
  if (v288)
  {
    v289 = v288;
    operator delete(v288);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v44 = v269;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v262);
  MIL::IRParameter::Make(&v262, (uint64_t *)&v270);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v44, "mode", (uint64_t *)&v270);
  v46 = v270;
  v270 = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v262.n128_u64[1];
  if (v262.n128_u64[1])
  {
    v48 = (unint64_t *)(v262.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v50 = v269;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v261);
  MIL::IRParameter::Make(&v261, (uint64_t *)&v270);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v50, "axis", (uint64_t *)&v270);
  v52 = v270;
  v270 = 0;
  if (v52)
    (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
  v53 = (std::__shared_weak_count *)v261.n128_u64[1];
  if (v261.n128_u64[1])
  {
    v54 = (unint64_t *)(v261.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v260 = 0;
  v56 = operator new();
  *(_QWORD *)v56 = 0;
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v56 + 16) = 0;
  v270 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v260, (void **)v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v270, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v260, 1uLL);
  v57 = v260;
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v288 = v59;
  v59->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v58;
  v289 = (std::__shared_weak_count_vtbl *)&v59->~__shared_weak_count_0;
  v290 = &v59->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v288);
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  __p = v61;
  *v61 = v60;
  v267 = v61 + 1;
  v266 = v61 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  v253 = v63;
  *v63 = v62;
  v255 = v63 + 1;
  v254 = v63 + 1;
  v281 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v253);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v256);
  MIL::IRParameter::Make(&v256, &v257);
  v64 = v257;
  v258 = v257;
  if (v257)
  {
    v65 = (_QWORD *)operator new();
    v66 = v257;
    *v65 = &unk_1EA99F888;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v66;
  }
  else
  {
    v65 = 0;
  }
  v259 = v65;
  v257 = 0;
  v67 = v57[2];
  v68 = v57[1];
  if (v68 >= v67)
  {
    v70 = (v68 - *v57) >> 4;
    v71 = v70 + 1;
    if ((unint64_t)(v70 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v72 = v67 - *v57;
    if (v72 >> 3 > v71)
      v71 = v72 >> 3;
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
      v73 = 0xFFFFFFFFFFFFFFFLL;
    else
      v73 = v71;
    v273[1] = v57 + 2;
    v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v57 + 2), v73);
    v76 = (uint64_t *)&v74[16 * v70];
    *v76 = v64;
    v76[1] = (uint64_t)v65;
    v259 = 0;
    v258 = 0;
    v78 = *v57;
    v77 = v57[1];
    if (v77 == *v57)
    {
      v81 = v57[1];
      v79 = &v74[16 * v70];
    }
    else
    {
      v79 = &v74[16 * v70];
      do
      {
        v80 = *((_OWORD *)v77 - 1);
        v77 -= 16;
        *((_OWORD *)v79 - 1) = v80;
        v79 -= 16;
        *(_QWORD *)v77 = 0;
        *((_QWORD *)v77 + 1) = 0;
      }
      while (v77 != v78);
      v81 = *v57;
      v77 = v57[1];
    }
    v69 = (char *)(v76 + 2);
    *v57 = v79;
    v271 = (uint64_t)v81;
    v57[1] = (char *)(v76 + 2);
    v272 = (uint64_t)v77;
    v82 = v57[2];
    v57[2] = &v74[16 * v75];
    v273[0] = v82;
    v270 = v81;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v270);
  }
  else
  {
    *(_QWORD *)v68 = v64;
    *((_QWORD *)v68 + 1) = v65;
    v69 = v68 + 16;
    v259 = 0;
    v258 = 0;
  }
  v57[1] = v69;
  v83 = v257;
  v257 = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = (std::__shared_weak_count *)v256.n128_u64[1];
  if (v256.n128_u64[1])
  {
    v85 = (unint64_t *)(v256.n128_u64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (__p)
  {
    v266 = __p;
    operator delete(__p);
  }
  if (v288)
  {
    v289 = v288;
    operator delete(v288);
  }
  *(_OWORD *)v251 = *(_OWORD *)a2;
  v252 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v87 = (uint64_t)v269;
  *(_QWORD *)&v250 = v269;
  if (v269)
  {
    v88 = (_QWORD *)operator new();
    *v88 = &unk_1EA99F8E8;
    v88[1] = 0;
    v88[2] = 0;
    v88[3] = v87;
  }
  else
  {
    v88 = 0;
  }
  *((_QWORD *)&v250 + 1) = v88;
  v269 = 0;
  *(_QWORD *)&v249 = v260;
  if (v260)
  {
    v89 = (_QWORD *)operator new();
    v90 = v260;
    *v89 = &unk_1EA99F948;
    v89[1] = 0;
    v89[2] = 0;
    v89[3] = v90;
  }
  else
  {
    v89 = 0;
  }
  *((_QWORD *)&v249 + 1) = v89;
  v260 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v286, a3);
  }
  else
  {
    v286[0] = &unk_1EA99FAC8;
    v286[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateBaseScatterWithAxis;
    v287 = v286;
  }
  v285 = 0;
  MIL::IROperator::Make((__int128 *)v251, &v250, &v249, (uint64_t)v286, (uint64_t)v284, a4);
  v91 = v285;
  if (v285 == v284)
  {
    v92 = 4;
    v91 = v284;
  }
  else
  {
    if (!v285)
      goto LABEL_94;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_94:
  v93 = v287;
  if (v287 == v286)
  {
    v94 = 4;
    v93 = v286;
    goto LABEL_98;
  }
  if (v287)
  {
    v94 = 5;
LABEL_98:
    (*(void (**)(void))(*v93 + 8 * v94))();
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v249 + 1);
  if (*((_QWORD *)&v249 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v249 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
  if (*((_QWORD *)&v250 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (SHIBYTE(v252) < 0)
    operator delete(v251[0]);
  v288 = 0;
  v101 = (_OWORD *)operator new();
  *v101 = 0u;
  v101[1] = 0u;
  *((_DWORD *)v101 + 8) = 1065353216;
  v288 = (std::__shared_weak_count_vtbl *)v101;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v248);
  MIL::IRParameter::Make(&v248, (uint64_t *)&v270);
  v102 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v101, "minimum_compute_type", (uint64_t *)&v270);
  v103 = v270;
  v270 = 0;
  if (v103)
    (*(void (**)(void *))(*(_QWORD *)v103 + 8))(v103);
  v104 = (std::__shared_weak_count *)v248.n128_u64[1];
  if (v248.n128_u64[1])
  {
    v105 = (unint64_t *)(v248.n128_u64[1] + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v102 + 5) + 32))(*((_QWORD *)v102 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v102 + 5) + 48))(*((_QWORD *)v102 + 5), 1);
  v107 = *a4;
  v108 = v288;
  v246 = v288;
  if (v288)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v108;
  }
  else
  {
    v109 = 0;
  }
  v247 = v109;
  v288 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v107 + 184))(v107, &v246);
  v110 = v247;
  if (v247)
  {
    p_shared_owners = (unint64_t *)&v247->__shared_owners_;
    do
      v112 = __ldaxr(p_shared_owners);
    while (__stlxr(v112 - 1, p_shared_owners));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v270, "data");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v270, (uint64_t)v282);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v113 + 200))(v113, v282);
  v114 = v283;
  if (v283 == v282)
  {
    v115 = 4;
    v114 = v282;
  }
  else
  {
    if (!v283)
      goto LABEL_131;
    v115 = 5;
  }
  (*(void (**)(void))(*v114 + 8 * v115))();
LABEL_131:
  if (SHIBYTE(v272) < 0)
    operator delete(v270);
  MIL::Validation::TensorDTypeConstraints::Make(&v270);
  v116 = v270;
  std::string::basic_string[abi:ne180100]<0>(v242, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v242, 0, (uint64_t *)&Scalar);
  v244 = Scalar;
  if (Scalar)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = Scalar;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v245 = v117;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v240, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v116 + 24))(v116, &v244, v240);
  if (v241 < 0)
    operator delete(v240[0]);
  v119 = v245;
  if (v245)
  {
    v120 = (unint64_t *)&v245->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = Scalar;
  Scalar = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v243 < 0)
    operator delete(v242[0]);
  v123 = v270;
  std::string::basic_string[abi:ne180100]<0>(v236, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v236, 0, (uint64_t *)&Scalar);
  v238 = Scalar;
  if (Scalar)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = Scalar;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v239 = v124;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v234, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v123 + 24))(v123, &v238, v234);
  if (v235 < 0)
    operator delete(v234[0]);
  v126 = v239;
  if (v239)
  {
    v127 = (unint64_t *)&v239->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = Scalar;
  Scalar = 0;
  if (v129)
    (*((void (**)(std::__shared_weak_count_vtbl *))v129->~__shared_weak_count + 1))(v129);
  if (v237 < 0)
    operator delete(v236[0]);
  v130 = v270;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v232 = Scalar;
  if (Scalar)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = Scalar;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v233 = v131;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v230, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v130 + 24))(v130, &v232, v230);
  if (v231 < 0)
    operator delete(v230[0]);
  v133 = v233;
  if (v233)
  {
    v134 = (unint64_t *)&v233->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = Scalar;
  Scalar = 0;
  if (v136)
    (*((void (**)(std::__shared_weak_count_vtbl *))v136->~__shared_weak_count + 1))(v136);
  v137 = *a4;
  v228 = v270;
  if (v270)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = (std::__shared_weak_count_vtbl *)v270;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v229 = v138;
  v270 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v137 + 56))(v137, &v228);
  v140 = v229;
  if (v229)
  {
    v141 = (unint64_t *)&v229->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v270;
  v270 = 0;
  if (v143)
    (*(void (**)(void *))(*(_QWORD *)v143 + 8))(v143);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v270);
  v144 = v270;
  std::string::basic_string[abi:ne180100]<0>(v224, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v224, 0, (uint64_t *)&Scalar);
  v226 = Scalar;
  if (Scalar)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = Scalar;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v227 = v145;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v222, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v144 + 24))(v144, &v226, 0, v222);
  if (v223 < 0)
    operator delete(v222[0]);
  v147 = v227;
  if (v227)
  {
    v148 = (unint64_t *)&v227->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = Scalar;
  Scalar = 0;
  if (v150)
    (*((void (**)(std::__shared_weak_count_vtbl *))v150->~__shared_weak_count + 1))(v150);
  if (v225 < 0)
    operator delete(v224[0]);
  v151 = v270;
  std::string::basic_string[abi:ne180100]<0>(v218, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v218, 0, (uint64_t *)&Scalar);
  v220 = Scalar;
  if (Scalar)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = Scalar;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v221 = v152;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v216, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v151 + 24))(v151, &v220, 0, v216);
  if (v217 < 0)
    operator delete(v216[0]);
  v154 = v221;
  if (v221)
  {
    v155 = (unint64_t *)&v221->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = Scalar;
  Scalar = 0;
  if (v157)
    (*((void (**)(std::__shared_weak_count_vtbl *))v157->~__shared_weak_count + 1))(v157);
  if (v219 < 0)
    operator delete(v218[0]);
  v158 = v270;
  std::string::basic_string[abi:ne180100]<0>(v212, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v212, 0, (uint64_t *)&Scalar);
  v214 = Scalar;
  if (Scalar)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = Scalar;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v215 = v159;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v210, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v158 + 24))(v158, &v214, 0, v210);
  if (v211 < 0)
    operator delete(v210[0]);
  v161 = v215;
  if (v215)
  {
    v162 = (unint64_t *)&v215->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = Scalar;
  Scalar = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v213 < 0)
    operator delete(v212[0]);
  v165 = *a4;
  v208 = v270;
  if (v270)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = (std::__shared_weak_count_vtbl *)v270;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v209 = v166;
  v270 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v165 + 56))(v165, &v208);
  v168 = v209;
  if (v209)
  {
    v169 = (unint64_t *)&v209->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v270;
  v270 = 0;
  if (v171)
    (*(void (**)(void *))(*(_QWORD *)v171 + 8))(v171);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v172 = __p;
  std::string::basic_string[abi:ne180100]<0>(v204, "mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v204, 0, (uint64_t *)&v253);
  v206 = v253;
  if (v253)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = (std::__shared_weak_count_vtbl *)v253;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v207 = v173;
  v253 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v270, "add");
  std::string::basic_string[abi:ne180100]<0>(v273, "div");
  std::string::basic_string[abi:ne180100]<0>(v274, "max");
  std::string::basic_string[abi:ne180100]<0>(v275, "min");
  std::string::basic_string[abi:ne180100]<0>(v276, "mul");
  std::string::basic_string[abi:ne180100]<0>(v277, "sub");
  std::string::basic_string[abi:ne180100]<0>(v278, "update");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v270, 7);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v172 + 24))(v172, &v206, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v278[i + 2]) < 0)
      operator delete((void *)v278[i]);
  }
  v176 = v207;
  if (v207)
  {
    v177 = (unint64_t *)&v207->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = v253;
  v253 = 0;
  if (v179)
    (*(void (**)(void *))(*(_QWORD *)v179 + 8))(v179);
  if (v205 < 0)
    operator delete(v204[0]);
  v180 = __p;
  std::string::basic_string[abi:ne180100]<0>(v200, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v200, 1, (uint64_t *)&v253);
  v202 = v253;
  if (v253)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = (std::__shared_weak_count_vtbl *)v253;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = v182;
  }
  else
  {
    v181 = 0;
  }
  v203 = v181;
  v253 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v270, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v273, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v274, "int32");
  std::string::basic_string[abi:ne180100]<0>(v275, "int8");
  std::string::basic_string[abi:ne180100]<0>(v276, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v270, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v180 + 24))(v180, &v202, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v276[j + 2]) < 0)
      operator delete((void *)v276[j]);
  }
  v184 = v203;
  if (v203)
  {
    v185 = (unint64_t *)&v203->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = v253;
  v253 = 0;
  if (v187)
    (*(void (**)(void *))(*(_QWORD *)v187 + 8))(v187);
  if (v201 < 0)
    operator delete(v200[0]);
  v188 = *a4;
  v198 = __p;
  if (__p)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = (std::__shared_weak_count_vtbl *)__p;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v199 = v189;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v188 + 56))(v188, &v198);
  v191 = v199;
  if (v199)
  {
    v192 = (unint64_t *)&v199->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = __p;
  __p = 0;
  if (v194)
    (*(void (**)(void *))(*(_QWORD *)v194 + 8))(v194);
  if (v288)
  {
    v195 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v288);
    MEMORY[0x1E0C023A0](v195, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v260, 0);
  result = (uint64_t)v269;
  if (v269)
  {
    v197 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v269);
    return MEMORY[0x1E0C023A0](v197, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E087ED74(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x2D0];
  STACK[0x2D0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x288], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2F8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Scatter::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseScatterWithAxis::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087F5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ScatterAlongAxis::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseScatterWithAxis::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087F6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ScatterNd::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseScatter::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E087F7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateTopk(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  const void *ParameterValue;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t *LocationPtr;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v21 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v8 = MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v21 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "k");
  v9 = MIL::IROperation::GetParameterValue(this);
  v10 = *(_DWORD *)MIL::IRValue::TryGetScalar<int>(v9);
  if (v21 < 0)
    operator delete(__p[0]);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v12 = LocationPtr[1];
  v18 = *LocationPtr;
  v19 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  MIL::Operators::Common::Shared::ValidateTopkInputs(v6, v8, v10, &v18, a2);
  v15 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1E087F974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceFillLike(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  MIL::IRValue *SingleValue;
  uint64_t v9;
  void (***v10)(MIL::MILContextImpl *__hidden);
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *__p;
  void *v17;
  uint64_t v18;

  std::string::basic_string[abi:ne180100]<0>(&__p, "ref_tensor");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v9 = MIL::IRValue::AsTensor(SingleValue);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  v10 = *a1;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v17 = 0;
  v18 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v13, *(_QWORD *)(v13 + 8), (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 3);
  v14 = MIL::IRTensorValueType::MakeWithShape(v10, v12, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = (uint64_t *)operator new(8uLL);
  *a3 = v15;
  *v15++ = v14;
  a3[1] = v15;
  a3[2] = v15;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_1E087FAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceTopk(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v7 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  MIL::Operators::Common::Shared::ValueTypeInferenceTopkCommon(a1, (uint64_t *)&v7, a3, a4);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1E087FB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Cumsum::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char **v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  char *v63;
  char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  char **v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _OWORD *v83;
  unsigned __int8 *v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  void *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  void *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void *v118;
  void *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  void *v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  uint64_t i;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t result;
  uint64_t v150;
  void *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155;
  std::__shared_weak_count *v156;
  void *v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165;
  std::__shared_weak_count *v166;
  void *v167[2];
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void *v177;
  std::__shared_weak_count *v178;
  __n128 v179;
  __int128 v180;
  __int128 v181;
  void *v182[2];
  uint64_t v183;
  void *v184;
  void *v185;
  _QWORD *v186;
  __n128 v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  char **v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  void *__p;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  __n128 v201;
  _QWORD *v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD v206[3];
  uint64_t v207[3];
  uint64_t v208[3];
  _QWORD v209[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v212;
  _BYTE v213[24];
  _BYTE *v214;
  _BYTE v215[24];
  _BYTE *v216;
  _BYTE v217[24];
  _BYTE *v218;
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v202 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v212 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v203 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v199 = v12 + 2;
  v200 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v198 = v12;
  v204 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v198);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v196 = v15 + 2;
  v197 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v205 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v203, 3, &v201);
  MIL::IRParameter::Make(&v201, (uint64_t *)&v184);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v184);
  v16 = v184;
  v184 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v201.n128_u64[1];
  if (v201.n128_u64[1])
  {
    v18 = (unint64_t *)(v201.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v196 = __p;
    operator delete(__p);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v202;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v194);
  MIL::IRParameter::Make(&v194, (uint64_t *)&v203);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v20, "axis", (uint64_t *)&v203);
  v22 = v203;
  v203 = 0;
  if (v22)
    (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)v194.n128_u64[1];
  if (v194.n128_u64[1])
  {
    v24 = (unint64_t *)(v194.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 32))(*((_QWORD *)v21 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 48))(*((_QWORD *)v21 + 5), 1);
  v26 = v202;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v203);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v26, "exclusive", (uint64_t *)&v203);
  v28 = v203;
  v203 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v30 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  v32 = v202;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v192);
  MIL::IRParameter::Make(&v192, (uint64_t *)&v203);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v32, "reverse", (uint64_t *)&v203);
  v34 = v203;
  v203 = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v192.n128_u64[1];
  if (v192.n128_u64[1])
  {
    v36 = (unint64_t *)(v192.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v191 = 0;
  v38 = operator new();
  *(_QWORD *)v38 = 0;
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)(v38 + 16) = 0;
  v203 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v191, (void **)v38);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v203, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v191, 1uLL);
  v39 = v191;
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v198 = v41;
  *v41 = v40;
  v199 = v41 + 1;
  v200 = v41 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v198);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  __p = v43;
  *v43 = v42;
  v196 = v43 + 1;
  v197 = v43 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v184 = v45;
  *v45 = v44;
  v185 = v45 + 1;
  v186 = v45 + 1;
  v212 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v184);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v187);
  MIL::IRParameter::Make(&v187, &v188);
  v46 = v188;
  v189 = v188;
  if (v188)
  {
    v47 = (_QWORD *)operator new();
    v48 = v188;
    *v47 = &unk_1EA99F888;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v48;
  }
  else
  {
    v47 = 0;
  }
  v190 = v47;
  v188 = 0;
  v49 = v39[2];
  v50 = v39[1];
  if (v50 >= v49)
  {
    v52 = (v50 - *v39) >> 4;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v54 = v49 - *v39;
    if (v54 >> 3 > v53)
      v53 = v54 >> 3;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
      v55 = 0xFFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    v206[1] = v39 + 2;
    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v39 + 2), v55);
    v58 = (uint64_t *)&v56[16 * v52];
    *v58 = v46;
    v58[1] = (uint64_t)v47;
    v189 = 0;
    v190 = 0;
    v60 = *v39;
    v59 = v39[1];
    if (v59 == *v39)
    {
      v63 = v39[1];
      v61 = &v56[16 * v52];
    }
    else
    {
      v61 = &v56[16 * v52];
      do
      {
        v62 = *((_OWORD *)v59 - 1);
        v59 -= 16;
        *((_OWORD *)v61 - 1) = v62;
        v61 -= 16;
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = 0;
      }
      while (v59 != v60);
      v63 = *v39;
      v59 = v39[1];
    }
    v51 = (char *)(v58 + 2);
    *v39 = v61;
    v204 = (uint64_t)v63;
    v39[1] = (char *)(v58 + 2);
    v205 = (uint64_t)v59;
    v64 = v39[2];
    v39[2] = &v56[16 * v57];
    v206[0] = v64;
    v203 = v63;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v203);
  }
  else
  {
    *(_QWORD *)v50 = v46;
    *((_QWORD *)v50 + 1) = v47;
    v51 = v50 + 16;
    v189 = 0;
    v190 = 0;
  }
  v39[1] = v51;
  v65 = v188;
  v188 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v187.n128_u64[1];
  if (v187.n128_u64[1])
  {
    v67 = (unint64_t *)(v187.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  if (__p)
  {
    v196 = __p;
    operator delete(__p);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  *(_OWORD *)v182 = *(_OWORD *)a2;
  v183 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v69 = (uint64_t)v202;
  *(_QWORD *)&v181 = v202;
  if (v202)
  {
    v70 = (_QWORD *)operator new();
    *v70 = &unk_1EA99F8E8;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v69;
  }
  else
  {
    v70 = 0;
  }
  *((_QWORD *)&v181 + 1) = v70;
  v202 = 0;
  *(_QWORD *)&v180 = v191;
  if (v191)
  {
    v71 = (_QWORD *)operator new();
    v72 = v191;
    *v71 = &unk_1EA99F948;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v180 + 1) = v71;
  v191 = 0;
  v218 = 0;
  v216 = 0;
  MIL::IROperator::Make((__int128 *)v182, &v181, &v180, (uint64_t)v217, (uint64_t)v215, a3);
  v73 = v216;
  if (v216 == v215)
  {
    v74 = 4;
    v73 = v215;
  }
  else
  {
    if (!v216)
      goto LABEL_76;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_76:
  v75 = v218;
  if (v218 == v217)
  {
    v76 = 4;
    v75 = v217;
    goto LABEL_80;
  }
  if (v218)
  {
    v76 = 5;
LABEL_80:
    (*(void (**)(void))(*v75 + 8 * v76))();
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
  if (*((_QWORD *)&v180 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  if (*((_QWORD *)&v181 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (SHIBYTE(v183) < 0)
    operator delete(v182[0]);
  v198 = 0;
  v83 = (_OWORD *)operator new();
  *v83 = 0u;
  v83[1] = 0u;
  *((_DWORD *)v83 + 8) = 1065353216;
  v198 = v83;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v179);
  MIL::IRParameter::Make(&v179, (uint64_t *)&v203);
  v84 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v83, "minimum_compute_type", (uint64_t *)&v203);
  v85 = v203;
  v203 = 0;
  if (v85)
    (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
  v86 = (std::__shared_weak_count *)v179.n128_u64[1];
  if (v179.n128_u64[1])
  {
    v87 = (unint64_t *)(v179.n128_u64[1] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v84 + 5) + 32))(*((_QWORD *)v84 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v84 + 5) + 48))(*((_QWORD *)v84 + 5), 1);
  v89 = *a3;
  v90 = (std::__shared_weak_count_vtbl *)v198;
  v177 = v198;
  if (v198)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v90;
  }
  else
  {
    v91 = 0;
  }
  v178 = v91;
  v198 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v89 + 184))(v89, &v177);
  v92 = v178;
  if (v178)
  {
    p_shared_owners = (unint64_t *)&v178->__shared_owners_;
    do
      v94 = __ldaxr(p_shared_owners);
    while (__stlxr(v94 - 1, p_shared_owners));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v203, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v203, (uint64_t)v213);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v95 + 200))(v95, v213);
  v96 = v214;
  if (v214 == v213)
  {
    v97 = 4;
    v96 = v213;
  }
  else
  {
    if (!v214)
      goto LABEL_113;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_113:
  if (SHIBYTE(v205) < 0)
    operator delete(v203);
  MIL::Validation::TensorDTypeConstraints::Make(&v203);
  v98 = v203;
  std::string::basic_string[abi:ne180100]<0>(v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, (uint64_t *)&Scalar);
  v175 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v176 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v98 + 24))(v98, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v101 = v176;
  if (v176)
  {
    v102 = (unint64_t *)&v176->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v174 < 0)
    operator delete(v173[0]);
  v105 = v203;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v169 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v170 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v167, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v105 + 24))(v105, &v169, v167);
  if (v168 < 0)
    operator delete(v167[0]);
  v108 = v170;
  if (v170)
  {
    v109 = (unint64_t *)&v170->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  v112 = *a3;
  v165 = v203;
  if (v203)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = (std::__shared_weak_count_vtbl *)v203;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v166 = v113;
  v203 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v112 + 56))(v112, &v165);
  v115 = v166;
  if (v166)
  {
    v116 = (unint64_t *)&v166->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v203;
  v203 = 0;
  if (v118)
    (*(void (**)(void *))(*(_QWORD *)v118 + 8))(v118);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v203);
  v119 = v203;
  std::string::basic_string[abi:ne180100]<0>(v161, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v161, 0, (uint64_t *)&Scalar);
  v163 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v164 = v120;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v159, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v119 + 24))(v119, &v163, 0, v159);
  if (v160 < 0)
    operator delete(v159[0]);
  v122 = v164;
  if (v164)
  {
    v123 = (unint64_t *)&v164->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  if (v162 < 0)
    operator delete(v161[0]);
  v126 = *a3;
  v157 = v203;
  if (v203)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)v203;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v158 = v127;
  v203 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v126 + 56))(v126, &v157);
  v129 = v158;
  if (v158)
  {
    v130 = (unint64_t *)&v158->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v203;
  v203 = 0;
  if (v132)
    (*(void (**)(void *))(*(_QWORD *)v132 + 8))(v132);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v133 = __p;
  std::string::basic_string[abi:ne180100]<0>(v153, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v153, 1, (uint64_t *)&v184);
  v155 = v184;
  if (v184)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)v184;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v156 = v134;
  v184 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v203, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v206, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v207, "int32");
  std::string::basic_string[abi:ne180100]<0>(v208, "int8");
  std::string::basic_string[abi:ne180100]<0>(v209, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v203, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v133 + 24))(v133, &v155, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v209[i + 2]) < 0)
      operator delete((void *)v209[i]);
  }
  v137 = v156;
  if (v156)
  {
    v138 = (unint64_t *)&v156->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v184;
  v184 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v154 < 0)
    operator delete(v153[0]);
  v141 = *a3;
  v151 = __p;
  if (__p)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)__p;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v152 = v142;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v141 + 56))(v141, &v151);
  v144 = v152;
  if (v152)
  {
    v145 = (unint64_t *)&v152->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = __p;
  __p = 0;
  if (v147)
    (*(void (**)(void *))(*(_QWORD *)v147 + 8))(v147);
  if (v198)
  {
    v148 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v198);
    MEMORY[0x1E0C023A0](v148, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v191, 0);
  result = (uint64_t)v202;
  if (v202)
  {
    v150 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v202);
    return MEMORY[0x1E0C023A0](v150, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0880D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *a70;
  uint64_t *v70;
  void *v72;
  uint64_t v73;

  v72 = a67;
  a67 = 0;
  if (v72)
    (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a70, 0);
  v73 = *v70;
  *v70 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x210], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::FillLike::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  void **v52;
  char *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char **v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  void **v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count_vtbl *v88;
  void **v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  void **v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void **v102;
  uint64_t result;
  uint64_t v104;
  void **v105;
  std::__shared_weak_count *v106;
  void *v107[2];
  char v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  void *v111[2];
  char v112;
  void *v113[2];
  char v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  void *v119[2];
  char v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  __int128 v123;
  __int128 v124;
  void *v125[2];
  uint64_t v126;
  void *v127;
  void *v128;
  _QWORD *v129;
  __n128 v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  char **v134;
  __n128 v135;
  void *__p;
  void *v137;
  _QWORD *v138;
  void *v139;
  void *v140;
  _QWORD *v141;
  void *v142;
  void *v143;
  _QWORD *v144;
  __n128 v145;
  _QWORD *v146;
  _QWORD v147[3];
  _QWORD *v148;
  _BYTE v149[24];
  _BYTE *v150;
  _BYTE v151[24];
  _BYTE *v152;
  std::__shared_weak_count_vtbl *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void **Scalar;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char **v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v153 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v154 = (uint64_t)&v8->~__shared_weak_count_0;
  v155 = (uint64_t)&v8->~__shared_weak_count_0;
  Scalar = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v153);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v142 = v10;
  *v10 = v9;
  v143 = v10 + 1;
  v144 = v10 + 1;
  v158 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v142);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v139 = v12;
  *v12 = v11;
  v140 = v12 + 1;
  v141 = v12 + 1;
  v159 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v139);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v137 = v14 + 1;
  v138 = v14 + 1;
  v160 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v145);
  MIL::IRParameter::Make(&v145, (uint64_t *)&v127);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "ref_tensor", (uint64_t *)&v127);
  v15 = v127;
  v127 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v17 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v137 = __p;
    operator delete(__p);
  }
  if (v139)
  {
    v140 = v139;
    operator delete(v139);
  }
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (v153)
  {
    v154 = (uint64_t)v153;
    operator delete(v153);
  }
  v19 = v146;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v158 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  v159 = MIL::IRTensorValueType::MakeScalar(a1, 11);
  v160 = MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v153);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "value", (uint64_t *)&v153);
  v21 = v153;
  v153 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v23 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v134 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v134, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v134, 1uLL);
  v26 = v134;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v142 = v28;
  *v28 = v27;
  v143 = v28 + 1;
  v144 = v28 + 1;
  v153 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v142);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v139 = v30;
  *v30 = v29;
  v140 = v30 + 1;
  v141 = v30 + 1;
  v154 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v139);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  __p = v32;
  *v32 = v31;
  v137 = v32 + 1;
  v138 = v32 + 1;
  v155 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v127 = v34;
  *v34 = v33;
  v128 = v34 + 1;
  v129 = v34 + 1;
  v156 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v127);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v153, 4, &v130);
  MIL::IRParameter::Make(&v130, &v131);
  v35 = v131;
  v132 = v131;
  if (v131)
  {
    v36 = (_QWORD *)operator new();
    v37 = v131;
    *v36 = &unk_1EA99F888;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v37;
  }
  else
  {
    v36 = 0;
  }
  v133 = v36;
  v131 = 0;
  v38 = v26[2];
  v39 = v26[1];
  if (v39 >= v38)
  {
    v41 = (v39 - *v26) >> 4;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v43 = v38 - *v26;
    if (v43 >> 3 > v42)
      v42 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    v161 = v26 + 2;
    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v44);
    v47 = (uint64_t *)&v45[16 * v41];
    *v47 = v35;
    v47[1] = (uint64_t)v36;
    v132 = 0;
    v133 = 0;
    v49 = *v26;
    v48 = v26[1];
    if (v48 == *v26)
    {
      v52 = (void **)v26[1];
      v50 = &v45[16 * v41];
    }
    else
    {
      v50 = &v45[16 * v41];
      do
      {
        v51 = *((_OWORD *)v48 - 1);
        v48 -= 16;
        *((_OWORD *)v50 - 1) = v51;
        v50 -= 16;
        *(_QWORD *)v48 = 0;
        *((_QWORD *)v48 + 1) = 0;
      }
      while (v48 != v49);
      v52 = (void **)*v26;
      v48 = v26[1];
    }
    v40 = (char *)(v47 + 2);
    *v26 = v50;
    Scalar = v52;
    v158 = (uint64_t)v52;
    v26[1] = (char *)(v47 + 2);
    v159 = (uint64_t)v48;
    v53 = v26[2];
    v26[2] = &v45[16 * v46];
    v160 = (uint64_t)v53;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v39 = v35;
    *((_QWORD *)v39 + 1) = v36;
    v40 = v39 + 16;
    v132 = 0;
    v133 = 0;
  }
  v26[1] = v40;
  v54 = v131;
  v131 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v130.n128_u64[1];
  if (v130.n128_u64[1])
  {
    v56 = (unint64_t *)(v130.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  if (__p)
  {
    v137 = __p;
    operator delete(__p);
  }
  if (v139)
  {
    v140 = v139;
    operator delete(v139);
  }
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  *(_OWORD *)v125 = *(_OWORD *)a2;
  v126 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v58 = (uint64_t)v146;
  *(_QWORD *)&v124 = v146;
  if (v146)
  {
    v59 = (_QWORD *)operator new();
    *v59 = &unk_1EA99F8E8;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v58;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v124 + 1) = v59;
  v146 = 0;
  *(_QWORD *)&v123 = v134;
  if (v134)
  {
    v60 = (_QWORD *)operator new();
    v61 = v134;
    *v60 = &unk_1EA99F948;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v123 + 1) = v60;
  v134 = 0;
  v152 = 0;
  v150 = 0;
  MIL::IROperator::Make((__int128 *)v125, &v124, &v123, (uint64_t)v151, (uint64_t)v149, a3);
  v62 = v150;
  if (v150 == v149)
  {
    v63 = 4;
    v62 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_66;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_66:
  v64 = v152;
  if (v152 == v151)
  {
    v65 = 4;
    v64 = v151;
    goto LABEL_70;
  }
  if (v152)
  {
    v65 = 5;
LABEL_70:
    (*(void (**)(void))(*v64 + 8 * v65))();
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
  if (*((_QWORD *)&v123 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (SHIBYTE(v126) < 0)
    operator delete(v125[0]);
  v72 = *a3;
  v147[0] = &off_1EA99FBD8;
  v147[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceFillLike;
  v148 = v147;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v72 + 200))(v72, v147);
  v73 = v148;
  if (v148 == v147)
  {
    v74 = 4;
    v73 = v147;
  }
  else
  {
    if (!v148)
      goto LABEL_88;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_88:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v75 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v119, "ref_tensor");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v119, 0, (uint64_t *)&v153);
  v121 = v153;
  if (v153)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = v153;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v122 = v76;
  v153 = 0;
  std::string::basic_string[abi:ne180100]<0>(v117, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v75 + 3))(v75, &v121, v117);
  if (v118 < 0)
    operator delete(v117[0]);
  v78 = v122;
  if (v122)
  {
    p_shared_owners = (unint64_t *)&v122->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v153;
  v153 = 0;
  if (v81)
    (*((void (**)(std::__shared_weak_count_vtbl *))v81->~__shared_weak_count + 1))(v81);
  if (v120 < 0)
    operator delete(v119[0]);
  v82 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v113, "value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v113, 0, (uint64_t *)&v153);
  v115 = v153;
  if (v153)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = v153;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v116 = v83;
  v153 = 0;
  std::string::basic_string[abi:ne180100]<0>(v111, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v82 + 3))(v82, &v115, v111);
  if (v112 < 0)
    operator delete(v111[0]);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v153;
  v153 = 0;
  if (v88)
    (*((void (**)(std::__shared_weak_count_vtbl *))v88->~__shared_weak_count + 1))(v88);
  if (v114 < 0)
    operator delete(v113[0]);
  v89 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v153);
  v109 = v153;
  if (v153)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v153;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v110 = v90;
  v153 = 0;
  std::string::basic_string[abi:ne180100]<0>(v107, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v89 + 3))(v89, &v109, v107);
  if (v108 < 0)
    operator delete(v107[0]);
  v92 = v110;
  if (v110)
  {
    v93 = (unint64_t *)&v110->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v153;
  v153 = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  v96 = *a3;
  v105 = Scalar;
  if (Scalar)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = Scalar;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = (std::__shared_weak_count_vtbl *)v98;
  }
  else
  {
    v97 = 0;
  }
  v106 = v97;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v96 + 56))(v96, &v105);
  v99 = v106;
  if (v106)
  {
    v100 = (unint64_t *)&v106->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = Scalar;
  Scalar = 0;
  if (v102)
    (*((void (**)(void **))*v102 + 1))(v102);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v134, 0);
  result = (uint64_t)v146;
  if (v146)
  {
    v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v146);
    return MEMORY[0x1E0C023A0](v104, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0881EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48)
{
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;

  v51 = *(_QWORD *)(v49 - 112);
  *(_QWORD *)(v49 - 112) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *v48;
  *v48 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v49 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::NonMaximumSuppression::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count_vtbl *v66;
  _QWORD *v67;
  std::__shared_weak_count_vtbl *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  __int128 v82;
  char *v83;
  char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  char **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count_vtbl *v98;
  _QWORD *v99;
  std::__shared_weak_count_vtbl *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  __int128 v114;
  char *v115;
  char *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  char **v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  std::__shared_weak_count_vtbl *v125;
  _QWORD *v126;
  std::__shared_weak_count_vtbl *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  __int128 v141;
  char *v142;
  char *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  char **v148;
  uint64_t v149;
  _QWORD *v150;
  std::__shared_weak_count_vtbl *v151;
  _QWORD *v152;
  std::__shared_weak_count_vtbl *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  __int128 v167;
  char *v168;
  char *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  char **v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  _OWORD *v188;
  unsigned __int8 *v189;
  void *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count *v197;
  unint64_t *p_shared_owners;
  unint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  void *v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  void *v209;
  void *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  void *v216;
  void *v217;
  std::__shared_weak_count *v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  void *v223;
  void *v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  void *v230;
  void *v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count_vtbl *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  void *v237;
  void *v238;
  std::__shared_weak_count *v239;
  std::__shared_weak_count_vtbl *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  void *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  void *v251;
  void *v252;
  std::__shared_weak_count *v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  void *v258;
  void *v259;
  std::__shared_weak_count *v260;
  std::__shared_weak_count_vtbl *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  void *v265;
  void *v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count_vtbl *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  void *v272;
  void *v273;
  std::__shared_weak_count *v274;
  std::__shared_weak_count_vtbl *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  void *v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  std::__shared_weak_count_vtbl *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  void *v286;
  std::__shared_weak_count_vtbl *v287;
  std::__shared_weak_count *v288;
  uint64_t v289;
  uint64_t i;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count_vtbl *v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count_vtbl *v301;
  uint64_t v302;
  uint64_t result;
  uint64_t v304;
  std::__shared_weak_count_vtbl *v305;
  std::__shared_weak_count *v306;
  void *v307[2];
  char v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  void *v311;
  std::__shared_weak_count *v312;
  void *v313[2];
  char v314;
  void *v315;
  std::__shared_weak_count *v316;
  void *v317[2];
  char v318;
  void *v319[2];
  char v320;
  void *v321;
  std::__shared_weak_count *v322;
  void *v323[2];
  char v324;
  void *v325[2];
  char v326;
  void *v327;
  std::__shared_weak_count *v328;
  void *v329[2];
  char v330;
  void *v331[2];
  char v332;
  void *v333;
  std::__shared_weak_count *v334;
  void *v335;
  std::__shared_weak_count *v336;
  void *v337[2];
  char v338;
  void *v339;
  std::__shared_weak_count *v340;
  void *v341[2];
  char v342;
  void *v343;
  std::__shared_weak_count *v344;
  void *v345[2];
  char v346;
  void *v347[2];
  char v348;
  void *v349;
  std::__shared_weak_count *v350;
  void *v351[2];
  char v352;
  void *v353[2];
  char v354;
  void *v355;
  std::__shared_weak_count *v356;
  void *v357[2];
  char v358;
  void *v359[2];
  char v360;
  void *v361;
  std::__shared_weak_count *v362;
  void *v363[2];
  char v364;
  void *v365[2];
  char v366;
  void *v367;
  std::__shared_weak_count *v368;
  std::__shared_weak_count_vtbl *v369;
  std::__shared_weak_count *v370;
  __n128 v371;
  __int128 v372;
  __int128 v373;
  void *v374[2];
  uint64_t v375;
  __n128 v376;
  __n128 v377;
  __n128 v378;
  __n128 v379;
  std::__shared_weak_count_vtbl *v380;
  std::__shared_weak_count_vtbl *v381;
  _QWORD *v382;
  char **v383;
  __n128 v384;
  __n128 v385;
  __n128 v386;
  __n128 v387;
  __n128 v388;
  __n128 v389;
  _QWORD *v390;
  void *Scalar;
  uint64_t v392;
  char *v393;
  char *v394;
  char **v395;
  uint64_t v396[3];
  uint64_t v397[3];
  void *v398[3];
  void *__p;
  void *v400;
  _QWORD *v401;
  _QWORD v402[3];
  _QWORD *v403;
  _BYTE v404[24];
  _BYTE *v405;
  _QWORD v406[3];
  _QWORD *v407;
  std::__shared_weak_count_vtbl *v408;
  uint64_t p_get_deleter;
  const void *(__cdecl **v410)(const std::__shared_weak_count *__hidden, const std::type_info *);
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;

  v413 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v390 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v10 = (char *)operator new(0x18uLL);
  v393 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  Scalar = v10;
  v392 = (uint64_t)(v10 + 24);
  v408 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v14 = operator new(0x18uLL);
  v401 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v400 = v14 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v408, 2, &v389);
  MIL::IRParameter::Make(&v389, (uint64_t *)&v381);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "boxes", (uint64_t *)&v381);
  v15 = v381;
  v381 = 0;
  if (v15)
    (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 1))(v15);
  v16 = (std::__shared_weak_count *)v389.n128_u64[1];
  if (v389.n128_u64[1])
  {
    v17 = (unint64_t *)(v389.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v400 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v392 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v390;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (char *)operator new(0x18uLL);
  v393 = v23 + 24;
  *(_QWORD *)v23 = v20;
  *((_QWORD *)v23 + 1) = v21;
  *((_QWORD *)v23 + 2) = v22;
  Scalar = v23;
  v392 = (uint64_t)(v23 + 24);
  v408 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = operator new(0x18uLL);
  v401 = v27 + 3;
  *v27 = v24;
  v27[1] = v25;
  v27[2] = v26;
  __p = v27;
  v400 = v27 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v408, 2, &v388);
  MIL::IRParameter::Make(&v388, (uint64_t *)&v381);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v19, "scores", (uint64_t *)&v381);
  v28 = v381;
  v381 = 0;
  if (v28)
    (*((void (**)(std::__shared_weak_count_vtbl *))v28->~__shared_weak_count + 1))(v28);
  v29 = (std::__shared_weak_count *)v388.n128_u64[1];
  if (v388.n128_u64[1])
  {
    v30 = (unint64_t *)(v388.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v400 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v392 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v32 = v390;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v392 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v387);
  MIL::IRParameter::Make(&v387, (uint64_t *)&__p);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v32, "iou_threshold", (uint64_t *)&__p);
  v34 = __p;
  __p = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v387.n128_u64[1];
  if (v387.n128_u64[1])
  {
    v36 = (unint64_t *)(v387.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v38 = v390;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v392 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v386);
  MIL::IRParameter::Make(&v386, (uint64_t *)&__p);
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v38, "score_threshold", (uint64_t *)&__p);
  v40 = __p;
  __p = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v386.n128_u64[1];
  if (v386.n128_u64[1])
  {
    v42 = (unint64_t *)(v386.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  v44 = v390;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v385);
  MIL::IRParameter::Make(&v385, (uint64_t *)&Scalar);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v44, "max_boxes", (uint64_t *)&Scalar);
  v46 = Scalar;
  Scalar = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v385.n128_u64[1];
  if (v385.n128_u64[1])
  {
    v48 = (unint64_t *)(v385.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v50 = v390;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v384);
  MIL::IRParameter::Make(&v384, (uint64_t *)&Scalar);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[22],std::unique_ptr<MIL::IRParameter>>(v50, "per_class_suppression", (uint64_t *)&Scalar);
  v52 = Scalar;
  Scalar = 0;
  if (v52)
    (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
  v53 = (std::__shared_weak_count *)v384.n128_u64[1];
  if (v384.n128_u64[1])
  {
    v54 = (unint64_t *)(v384.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v383 = 0;
  v56 = operator new();
  *(_QWORD *)v56 = 0;
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v56 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v383, (void **)v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v383, 4uLL);
  v57 = v383;
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v61 = operator new(0x18uLL);
  v401 = v61 + 3;
  *v61 = v58;
  v61[1] = v59;
  v61[2] = v60;
  __p = v61;
  v400 = v61 + 3;
  v411 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v62 = MIL::IRUnknownDimension::Make(a1, 0);
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v65 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v65->__get_deleter;
  v410 = &v65->__get_deleter;
  v65->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v62;
  v65->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v63;
  v65->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v64;
  v408 = v65;
  v412 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v408);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v411, 2, &v379);
  MIL::IRParameter::Make(&v379, (uint64_t *)&v380);
  v66 = v380;
  v381 = v380;
  if (v380)
  {
    v67 = (_QWORD *)operator new();
    v68 = v380;
    *v67 = &unk_1EA99F888;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  v382 = v67;
  v380 = 0;
  v69 = v57[2];
  v70 = v57[1];
  if (v70 >= v69)
  {
    v72 = (v70 - *v57) >> 4;
    v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v74 = v69 - *v57;
    if (v74 >> 3 > v73)
      v73 = v74 >> 3;
    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
      v75 = 0xFFFFFFFFFFFFFFFLL;
    else
      v75 = v73;
    v395 = v57 + 2;
    v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v57 + 2), v75);
    v78 = &v76[16 * v72];
    *(_QWORD *)v78 = v66;
    *((_QWORD *)v78 + 1) = v67;
    v382 = 0;
    v381 = 0;
    v80 = *v57;
    v79 = v57[1];
    if (v79 == *v57)
    {
      v83 = v57[1];
      v81 = &v76[16 * v72];
    }
    else
    {
      v81 = &v76[16 * v72];
      do
      {
        v82 = *((_OWORD *)v79 - 1);
        v79 -= 16;
        *((_OWORD *)v81 - 1) = v82;
        v81 -= 16;
        *(_QWORD *)v79 = 0;
        *((_QWORD *)v79 + 1) = 0;
      }
      while (v79 != v80);
      v83 = *v57;
      v79 = v57[1];
    }
    v71 = v78 + 16;
    *v57 = v81;
    v392 = (uint64_t)v83;
    v57[1] = v78 + 16;
    v393 = v79;
    v84 = v57[2];
    v57[2] = &v76[16 * v77];
    v394 = v84;
    Scalar = v83;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v70 = v66;
    *((_QWORD *)v70 + 1) = v67;
    v71 = v70 + 16;
    v382 = 0;
    v381 = 0;
  }
  v57[1] = v71;
  v85 = (uint64_t)v380;
  v380 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = (std::__shared_weak_count *)v379.n128_u64[1];
  if (v379.n128_u64[1])
  {
    v87 = (unint64_t *)(v379.n128_u64[1] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v408)
  {
    p_get_deleter = (uint64_t)v408;
    operator delete(v408);
  }
  if (__p)
  {
    v400 = __p;
    operator delete(__p);
  }
  v89 = v383;
  v90 = MIL::IRUnknownDimension::Make(a1, 0);
  v91 = MIL::IRUnknownDimension::Make(a1, 0);
  v92 = MIL::IRUnknownDimension::Make(a1, 0);
  v93 = operator new(0x18uLL);
  v401 = v93 + 3;
  *v93 = v90;
  v93[1] = v91;
  v93[2] = v92;
  __p = v93;
  v400 = v93 + 3;
  v411 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v94 = MIL::IRUnknownDimension::Make(a1, 0);
  v95 = MIL::IRUnknownDimension::Make(a1, 0);
  v96 = MIL::IRUnknownDimension::Make(a1, 0);
  v97 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v97->__get_deleter;
  v410 = &v97->__get_deleter;
  v97->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v94;
  v97->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v95;
  v97->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v96;
  v408 = v97;
  v412 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v408);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v411, 2, &v378);
  MIL::IRParameter::Make(&v378, (uint64_t *)&v380);
  v98 = v380;
  v381 = v380;
  if (v380)
  {
    v99 = (_QWORD *)operator new();
    v100 = v380;
    *v99 = &unk_1EA99F888;
    v99[1] = 0;
    v99[2] = 0;
    v99[3] = v100;
  }
  else
  {
    v99 = 0;
  }
  v382 = v99;
  v380 = 0;
  v101 = v89[2];
  v102 = v89[1];
  if (v102 >= v101)
  {
    v104 = (v102 - *v89) >> 4;
    v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v106 = v101 - *v89;
    if (v106 >> 3 > v105)
      v105 = v106 >> 3;
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0)
      v107 = 0xFFFFFFFFFFFFFFFLL;
    else
      v107 = v105;
    v395 = v89 + 2;
    v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v89 + 2), v107);
    v110 = &v108[16 * v104];
    *(_QWORD *)v110 = v98;
    *((_QWORD *)v110 + 1) = v99;
    v382 = 0;
    v381 = 0;
    v112 = *v89;
    v111 = v89[1];
    if (v111 == *v89)
    {
      v115 = v89[1];
      v113 = &v108[16 * v104];
    }
    else
    {
      v113 = &v108[16 * v104];
      do
      {
        v114 = *((_OWORD *)v111 - 1);
        v111 -= 16;
        *((_OWORD *)v113 - 1) = v114;
        v113 -= 16;
        *(_QWORD *)v111 = 0;
        *((_QWORD *)v111 + 1) = 0;
      }
      while (v111 != v112);
      v115 = *v89;
      v111 = v89[1];
    }
    v103 = v110 + 16;
    *v89 = v113;
    v392 = (uint64_t)v115;
    v89[1] = v110 + 16;
    v393 = v111;
    v116 = v89[2];
    v89[2] = &v108[16 * v109];
    v394 = v116;
    Scalar = v115;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v102 = v98;
    *((_QWORD *)v102 + 1) = v99;
    v103 = v102 + 16;
    v382 = 0;
    v381 = 0;
  }
  v89[1] = v103;
  v117 = (uint64_t)v380;
  v380 = 0;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = (std::__shared_weak_count *)v378.n128_u64[1];
  if (v378.n128_u64[1])
  {
    v119 = (unint64_t *)(v378.n128_u64[1] + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (v408)
  {
    p_get_deleter = (uint64_t)v408;
    operator delete(v408);
  }
  if (__p)
  {
    v400 = __p;
    operator delete(__p);
  }
  v121 = v383;
  v122 = MIL::IRUnknownDimension::Make(a1, 0);
  v123 = MIL::IRUnknownDimension::Make(a1, 0);
  v124 = operator new(0x10uLL);
  v401 = v124 + 2;
  *v124 = v122;
  v124[1] = v123;
  __p = v124;
  v400 = v124 + 2;
  v411 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v411, 1, &v377);
  MIL::IRParameter::Make(&v377, (uint64_t *)&v381);
  v125 = v381;
  v408 = v381;
  if (v381)
  {
    v126 = (_QWORD *)operator new();
    v127 = v381;
    *v126 = &unk_1EA99F888;
    v126[1] = 0;
    v126[2] = 0;
    v126[3] = v127;
  }
  else
  {
    v126 = 0;
  }
  p_get_deleter = (uint64_t)v126;
  v381 = 0;
  v128 = v121[2];
  v129 = v121[1];
  if (v129 >= v128)
  {
    v131 = (v129 - *v121) >> 4;
    v132 = v131 + 1;
    if ((unint64_t)(v131 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v133 = v128 - *v121;
    if (v133 >> 3 > v132)
      v132 = v133 >> 3;
    if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF0)
      v134 = 0xFFFFFFFFFFFFFFFLL;
    else
      v134 = v132;
    v395 = v121 + 2;
    v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v121 + 2), v134);
    v137 = &v135[16 * v131];
    *(_QWORD *)v137 = v125;
    *((_QWORD *)v137 + 1) = v126;
    v408 = 0;
    p_get_deleter = 0;
    v139 = *v121;
    v138 = v121[1];
    if (v138 == *v121)
    {
      v142 = v121[1];
      v140 = &v135[16 * v131];
    }
    else
    {
      v140 = &v135[16 * v131];
      do
      {
        v141 = *((_OWORD *)v138 - 1);
        v138 -= 16;
        *((_OWORD *)v140 - 1) = v141;
        v140 -= 16;
        *(_QWORD *)v138 = 0;
        *((_QWORD *)v138 + 1) = 0;
      }
      while (v138 != v139);
      v142 = *v121;
      v138 = v121[1];
    }
    v130 = v137 + 16;
    *v121 = v140;
    v392 = (uint64_t)v142;
    v121[1] = v137 + 16;
    v393 = v138;
    v143 = v121[2];
    v121[2] = &v135[16 * v136];
    v394 = v143;
    Scalar = v142;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v129 = v125;
    *((_QWORD *)v129 + 1) = v126;
    v130 = v129 + 16;
    v408 = 0;
    p_get_deleter = 0;
  }
  v121[1] = v130;
  v144 = v381;
  v381 = 0;
  if (v144)
    (*((void (**)(std::__shared_weak_count_vtbl *))v144->~__shared_weak_count + 1))(v144);
  v145 = (std::__shared_weak_count *)v377.n128_u64[1];
  if (v377.n128_u64[1])
  {
    v146 = (unint64_t *)(v377.n128_u64[1] + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  if (__p)
  {
    v400 = __p;
    operator delete(__p);
  }
  v148 = v383;
  v149 = MIL::IRUnknownDimension::Make(a1, 0);
  v150 = operator new(8uLL);
  __p = v150;
  *v150 = v149;
  v401 = v150 + 1;
  v400 = v150 + 1;
  v411 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v411, 1, &v376);
  MIL::IRParameter::Make(&v376, (uint64_t *)&v381);
  v151 = v381;
  v408 = v381;
  if (v381)
  {
    v152 = (_QWORD *)operator new();
    v153 = v381;
    *v152 = &unk_1EA99F888;
    v152[1] = 0;
    v152[2] = 0;
    v152[3] = v153;
  }
  else
  {
    v152 = 0;
  }
  p_get_deleter = (uint64_t)v152;
  v381 = 0;
  v154 = v148[2];
  v155 = v148[1];
  if (v155 >= v154)
  {
    v157 = (v155 - *v148) >> 4;
    v158 = v157 + 1;
    if ((unint64_t)(v157 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v159 = v154 - *v148;
    if (v159 >> 3 > v158)
      v158 = v159 >> 3;
    if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF0)
      v160 = 0xFFFFFFFFFFFFFFFLL;
    else
      v160 = v158;
    v395 = v148 + 2;
    v161 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v148 + 2), v160);
    v163 = &v161[16 * v157];
    *(_QWORD *)v163 = v151;
    *((_QWORD *)v163 + 1) = v152;
    v408 = 0;
    p_get_deleter = 0;
    v165 = *v148;
    v164 = v148[1];
    if (v164 == *v148)
    {
      v168 = v148[1];
      v166 = &v161[16 * v157];
    }
    else
    {
      v166 = &v161[16 * v157];
      do
      {
        v167 = *((_OWORD *)v164 - 1);
        v164 -= 16;
        *((_OWORD *)v166 - 1) = v167;
        v166 -= 16;
        *(_QWORD *)v164 = 0;
        *((_QWORD *)v164 + 1) = 0;
      }
      while (v164 != v165);
      v168 = *v148;
      v164 = v148[1];
    }
    v156 = v163 + 16;
    *v148 = v166;
    v392 = (uint64_t)v168;
    v148[1] = v163 + 16;
    v393 = v164;
    v169 = v148[2];
    v148[2] = &v161[16 * v162];
    v394 = v169;
    Scalar = v168;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v155 = v151;
    *((_QWORD *)v155 + 1) = v152;
    v156 = v155 + 16;
    v408 = 0;
    p_get_deleter = 0;
  }
  v148[1] = v156;
  v170 = v381;
  v381 = 0;
  if (v170)
    (*((void (**)(std::__shared_weak_count_vtbl *))v170->~__shared_weak_count + 1))(v170);
  v171 = (std::__shared_weak_count *)v376.n128_u64[1];
  if (v376.n128_u64[1])
  {
    v172 = (unint64_t *)(v376.n128_u64[1] + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  if (__p)
  {
    v400 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v374 = *(_OWORD *)a2;
  v375 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v174 = (uint64_t)v390;
  *(_QWORD *)&v373 = v390;
  if (v390)
  {
    v175 = (_QWORD *)operator new();
    *v175 = &unk_1EA99F8E8;
    v175[1] = 0;
    v175[2] = 0;
    v175[3] = v174;
  }
  else
  {
    v175 = 0;
  }
  *((_QWORD *)&v373 + 1) = v175;
  v390 = 0;
  *(_QWORD *)&v372 = v383;
  if (v383)
  {
    v176 = (_QWORD *)operator new();
    v177 = v383;
    *v176 = &unk_1EA99F948;
    v176[1] = 0;
    v176[2] = 0;
    v176[3] = v177;
  }
  else
  {
    v176 = 0;
  }
  *((_QWORD *)&v372 + 1) = v176;
  v383 = 0;
  v406[0] = &unk_1EA99FAC8;
  v406[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateNonMaximumSuppression;
  v407 = v406;
  v405 = 0;
  MIL::IROperator::Make((__int128 *)v374, &v373, &v372, (uint64_t)v406, (uint64_t)v404, a3);
  v178 = v405;
  if (v405 == v404)
  {
    v179 = 4;
    v178 = v404;
  }
  else
  {
    if (!v405)
      goto LABEL_170;
    v179 = 5;
  }
  (*(void (**)(void))(*v178 + 8 * v179))();
LABEL_170:
  v180 = v407;
  if (v407 == v406)
  {
    v181 = 4;
    v180 = v406;
    goto LABEL_174;
  }
  if (v407)
  {
    v181 = 5;
LABEL_174:
    (*(void (**)(void))(*v180 + 8 * v181))();
  }
  v182 = (std::__shared_weak_count *)*((_QWORD *)&v372 + 1);
  if (*((_QWORD *)&v372 + 1))
  {
    v183 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 8);
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
  if (*((_QWORD *)&v373 + 1))
  {
    v186 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  if (SHIBYTE(v375) < 0)
    operator delete(v374[0]);
  v408 = 0;
  v188 = (_OWORD *)operator new();
  *v188 = 0u;
  v188[1] = 0u;
  *((_DWORD *)v188 + 8) = 1065353216;
  v408 = (std::__shared_weak_count_vtbl *)v188;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v371);
  MIL::IRParameter::Make(&v371, (uint64_t *)&Scalar);
  v189 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v188, "minimum_compute_type", (uint64_t *)&Scalar);
  v190 = Scalar;
  Scalar = 0;
  if (v190)
    (*(void (**)(void *))(*(_QWORD *)v190 + 8))(v190);
  v191 = (std::__shared_weak_count *)v371.n128_u64[1];
  if (v371.n128_u64[1])
  {
    v192 = (unint64_t *)(v371.n128_u64[1] + 8);
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v189 + 5) + 32))(*((_QWORD *)v189 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v189 + 5) + 48))(*((_QWORD *)v189 + 5), 1);
  v194 = *a3;
  v195 = v408;
  v369 = v408;
  if (v408)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v195;
  }
  else
  {
    v196 = 0;
  }
  v370 = v196;
  v408 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v194 + 184))(v194, &v369);
  v197 = v370;
  if (v370)
  {
    p_shared_owners = (unint64_t *)&v370->__shared_owners_;
    do
      v199 = __ldaxr(p_shared_owners);
    while (__stlxr(v199 - 1, p_shared_owners));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = *a3;
  v402[0] = &off_1EA99FBD8;
  v402[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceNonMaximumSuppression;
  v403 = v402;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v200 + 200))(v200, v402);
  v201 = v403;
  if (v403 == v402)
  {
    v202 = 4;
    v201 = v402;
  }
  else
  {
    if (!v403)
      goto LABEL_207;
    v202 = 5;
  }
  (*(void (**)(void))(*v201 + 8 * v202))();
LABEL_207:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v203 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v365, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v365, 0, (uint64_t *)&__p);
  v367 = __p;
  if (__p)
  {
    v204 = (std::__shared_weak_count *)operator new();
    v205 = (std::__shared_weak_count_vtbl *)__p;
    v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v204->__shared_owners_ = 0;
    v204->__shared_weak_owners_ = 0;
    v204[1].__vftable = v205;
  }
  else
  {
    v204 = 0;
  }
  v368 = v204;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v363, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v203 + 24))(v203, &v367, v363);
  if (v364 < 0)
    operator delete(v363[0]);
  v206 = v368;
  if (v368)
  {
    v207 = (unint64_t *)&v368->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = __p;
  __p = 0;
  if (v209)
    (*(void (**)(void *))(*(_QWORD *)v209 + 8))(v209);
  if (v366 < 0)
    operator delete(v365[0]);
  v210 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v359, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v359, 0, (uint64_t *)&__p);
  v361 = __p;
  if (__p)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = (std::__shared_weak_count_vtbl *)__p;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = v212;
  }
  else
  {
    v211 = 0;
  }
  v362 = v211;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v357, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v210 + 24))(v210, &v361, v357);
  if (v358 < 0)
    operator delete(v357[0]);
  v213 = v362;
  if (v362)
  {
    v214 = (unint64_t *)&v362->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = __p;
  __p = 0;
  if (v216)
    (*(void (**)(void *))(*(_QWORD *)v216 + 8))(v216);
  if (v360 < 0)
    operator delete(v359[0]);
  v217 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v353, "iou_threshold");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v353, 0, (uint64_t *)&__p);
  v355 = __p;
  if (__p)
  {
    v218 = (std::__shared_weak_count *)operator new();
    v219 = (std::__shared_weak_count_vtbl *)__p;
    v218->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v218->__shared_owners_ = 0;
    v218->__shared_weak_owners_ = 0;
    v218[1].__vftable = v219;
  }
  else
  {
    v218 = 0;
  }
  v356 = v218;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v351, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v217 + 24))(v217, &v355, v351);
  if (v352 < 0)
    operator delete(v351[0]);
  v220 = v356;
  if (v356)
  {
    v221 = (unint64_t *)&v356->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = __p;
  __p = 0;
  if (v223)
    (*(void (**)(void *))(*(_QWORD *)v223 + 8))(v223);
  if (v354 < 0)
    operator delete(v353[0]);
  v224 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v347, "score_threshold");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v347, 0, (uint64_t *)&__p);
  v349 = __p;
  if (__p)
  {
    v225 = (std::__shared_weak_count *)operator new();
    v226 = (std::__shared_weak_count_vtbl *)__p;
    v225->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v225->__shared_owners_ = 0;
    v225->__shared_weak_owners_ = 0;
    v225[1].__vftable = v226;
  }
  else
  {
    v225 = 0;
  }
  v350 = v225;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v345, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v224 + 24))(v224, &v349, v345);
  if (v346 < 0)
    operator delete(v345[0]);
  v227 = v350;
  if (v350)
  {
    v228 = (unint64_t *)&v350->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = __p;
  __p = 0;
  if (v230)
    (*(void (**)(void *))(*(_QWORD *)v230 + 8))(v230);
  if (v348 < 0)
    operator delete(v347[0]);
  v231 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v343 = __p;
  if (__p)
  {
    v232 = (std::__shared_weak_count *)operator new();
    v233 = (std::__shared_weak_count_vtbl *)__p;
    v232->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v232->__shared_owners_ = 0;
    v232->__shared_weak_owners_ = 0;
    v232[1].__vftable = v233;
  }
  else
  {
    v232 = 0;
  }
  v344 = v232;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v341, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v231 + 24))(v231, &v343, v341);
  if (v342 < 0)
    operator delete(v341[0]);
  v234 = v344;
  if (v344)
  {
    v235 = (unint64_t *)&v344->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v237 = __p;
  __p = 0;
  if (v237)
    (*(void (**)(void *))(*(_QWORD *)v237 + 8))(v237);
  v238 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v339 = __p;
  if (__p)
  {
    v239 = (std::__shared_weak_count *)operator new();
    v240 = (std::__shared_weak_count_vtbl *)__p;
    v239->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v239->__shared_owners_ = 0;
    v239->__shared_weak_owners_ = 0;
    v239[1].__vftable = v240;
  }
  else
  {
    v239 = 0;
  }
  v340 = v239;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v337, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v238 + 24))(v238, &v339, v337);
  if (v338 < 0)
    operator delete(v337[0]);
  v241 = v340;
  if (v340)
  {
    v242 = (unint64_t *)&v340->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = __p;
  __p = 0;
  if (v244)
    (*(void (**)(void *))(*(_QWORD *)v244 + 8))(v244);
  v245 = *a3;
  v335 = Scalar;
  if (Scalar)
  {
    v246 = (std::__shared_weak_count *)operator new();
    v247 = (std::__shared_weak_count_vtbl *)Scalar;
    v246->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v246->__shared_owners_ = 0;
    v246->__shared_weak_owners_ = 0;
    v246[1].__vftable = v247;
  }
  else
  {
    v246 = 0;
  }
  v336 = v246;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v245 + 56))(v245, &v335);
  v248 = v336;
  if (v336)
  {
    v249 = (unint64_t *)&v336->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v251 = Scalar;
  Scalar = 0;
  if (v251)
    (*(void (**)(void *))(*(_QWORD *)v251 + 8))(v251);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v252 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v331, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v331, 0, (uint64_t *)&__p);
  v333 = __p;
  if (__p)
  {
    v253 = (std::__shared_weak_count *)operator new();
    v254 = (std::__shared_weak_count_vtbl *)__p;
    v253->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v253->__shared_owners_ = 0;
    v253->__shared_weak_owners_ = 0;
    v253[1].__vftable = v254;
  }
  else
  {
    v253 = 0;
  }
  v334 = v253;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v329, "N");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v252 + 24))(v252, &v333, 1, v329);
  if (v330 < 0)
    operator delete(v329[0]);
  v255 = v334;
  if (v334)
  {
    v256 = (unint64_t *)&v334->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  v258 = __p;
  __p = 0;
  if (v258)
    (*(void (**)(void *))(*(_QWORD *)v258 + 8))(v258);
  if (v332 < 0)
    operator delete(v331[0]);
  v259 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v325, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v325, 0, (uint64_t *)&__p);
  v327 = __p;
  if (__p)
  {
    v260 = (std::__shared_weak_count *)operator new();
    v261 = (std::__shared_weak_count_vtbl *)__p;
    v260->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v260->__shared_owners_ = 0;
    v260->__shared_weak_owners_ = 0;
    v260[1].__vftable = v261;
  }
  else
  {
    v260 = 0;
  }
  v328 = v260;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v323, "N");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v259 + 24))(v259, &v327, 1, v323);
  if (v324 < 0)
    operator delete(v323[0]);
  v262 = v328;
  if (v328)
  {
    v263 = (unint64_t *)&v328->__shared_owners_;
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = __p;
  __p = 0;
  if (v265)
    (*(void (**)(void *))(*(_QWORD *)v265 + 8))(v265);
  if (v326 < 0)
    operator delete(v325[0]);
  v266 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v319, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v319, 0, (uint64_t *)&__p);
  v321 = __p;
  if (__p)
  {
    v267 = (std::__shared_weak_count *)operator new();
    v268 = (std::__shared_weak_count_vtbl *)__p;
    v267->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v267->__shared_owners_ = 0;
    v267->__shared_weak_owners_ = 0;
    v267[1].__vftable = v268;
  }
  else
  {
    v267 = 0;
  }
  v322 = v267;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v317, "K");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v266 + 24))(v266, &v321, 2, v317);
  if (v318 < 0)
    operator delete(v317[0]);
  v269 = v322;
  if (v322)
  {
    v270 = (unint64_t *)&v322->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  v272 = __p;
  __p = 0;
  if (v272)
    (*(void (**)(void *))(*(_QWORD *)v272 + 8))(v272);
  if (v320 < 0)
    operator delete(v319[0]);
  v273 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v315 = __p;
  if (__p)
  {
    v274 = (std::__shared_weak_count *)operator new();
    v275 = (std::__shared_weak_count_vtbl *)__p;
    v274->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v274->__shared_owners_ = 0;
    v274->__shared_weak_owners_ = 0;
    v274[1].__vftable = v275;
  }
  else
  {
    v274 = 0;
  }
  v316 = v274;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v313, "K");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v273 + 24))(v273, &v315, 2, v313);
  if (v314 < 0)
    operator delete(v313[0]);
  v276 = v316;
  if (v316)
  {
    v277 = (unint64_t *)&v316->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  v279 = __p;
  __p = 0;
  if (v279)
    (*(void (**)(void *))(*(_QWORD *)v279 + 8))(v279);
  v280 = *a3;
  v311 = Scalar;
  if (Scalar)
  {
    v281 = (std::__shared_weak_count *)operator new();
    v282 = (std::__shared_weak_count_vtbl *)Scalar;
    v281->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v281->__shared_owners_ = 0;
    v281->__shared_weak_owners_ = 0;
    v281[1].__vftable = v282;
  }
  else
  {
    v281 = 0;
  }
  v312 = v281;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v280 + 56))(v280, &v311);
  v283 = v312;
  if (v312)
  {
    v284 = (unint64_t *)&v312->__shared_owners_;
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }
  v286 = Scalar;
  Scalar = 0;
  if (v286)
    (*(void (**)(void *))(*(_QWORD *)v286 + 8))(v286);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v381);
  v287 = v381;
  std::string::basic_string[abi:ne180100]<0>(v307, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v307, 1, &v411);
  v309 = v411;
  if (v411)
  {
    v288 = (std::__shared_weak_count *)operator new();
    v289 = v411;
    v288->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v288->__shared_owners_ = 0;
    v288->__shared_weak_owners_ = 0;
    v288[1].__vftable = (std::__shared_weak_count_vtbl *)v289;
  }
  else
  {
    v288 = 0;
  }
  v310 = v288;
  v411 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v394, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v396, "int32");
  std::string::basic_string[abi:ne180100]<0>(v397, "int8");
  std::string::basic_string[abi:ne180100]<0>(v398, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **, uint64_t))v287->~__shared_weak_count + 3))(v287, &v309, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v398[i + 2]) < 0)
      operator delete(v398[i]);
  }
  v291 = v310;
  if (v310)
  {
    v292 = (unint64_t *)&v310->__shared_owners_;
    do
      v293 = __ldaxr(v292);
    while (__stlxr(v293 - 1, v292));
    if (!v293)
    {
      ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
      std::__shared_weak_count::__release_weak(v291);
    }
  }
  v294 = v411;
  v411 = 0;
  if (v294)
    (*(void (**)(uint64_t))(*(_QWORD *)v294 + 8))(v294);
  if (v308 < 0)
    operator delete(v307[0]);
  v295 = *a3;
  v305 = v381;
  if (v381)
  {
    v296 = (std::__shared_weak_count *)operator new();
    v297 = v381;
    v296->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v296->__shared_owners_ = 0;
    v296->__shared_weak_owners_ = 0;
    v296[1].__vftable = v297;
  }
  else
  {
    v296 = 0;
  }
  v306 = v296;
  v381 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v295 + 56))(v295, &v305);
  v298 = v306;
  if (v306)
  {
    v299 = (unint64_t *)&v306->__shared_owners_;
    do
      v300 = __ldaxr(v299);
    while (__stlxr(v300 - 1, v299));
    if (!v300)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  v301 = v381;
  v381 = 0;
  if (v301)
    (*((void (**)(std::__shared_weak_count_vtbl *))v301->~__shared_weak_count + 1))(v301);
  if (v408)
  {
    v302 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v408);
    MEMORY[0x1E0C023A0](v302, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v383, 0);
  result = (uint64_t)v390;
  if (v390)
  {
    v304 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v390);
    return MEMORY[0x1E0C023A0](v304, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08843D8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x330];
  STACK[0x330] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 128), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x340], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3A8], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Topk::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  void **v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count_vtbl *v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  uint64_t result;
  uint64_t v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  void *v81[2];
  char v82;
  void *v83[2];
  char v84;
  void *v85;
  std::__shared_weak_count *v86;
  void **v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void *v91[2];
  uint64_t v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  void *__p;
  void *v99;
  _QWORD *v100;
  void *v101;
  void *v102;
  _QWORD *v103;
  __n128 v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD v107[3];
  _QWORD *v108;
  _BYTE v109[24];
  _BYTE *v110;
  _QWORD v111[3];
  _QWORD *v112;
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v114;
  void (__cdecl **v115)(std::__shared_weak_count *__hidden);
  void **v116[4];

  v116[3] = *(void ***)MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v106 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v114 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v115 = &v8->~__shared_weak_count_0;
  v116[0] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v101 = v10;
  *v10 = v9;
  v102 = v10 + 1;
  v103 = v10 + 1;
  v116[1] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v101);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v99 = v12 + 1;
  v100 = v12 + 1;
  v116[2] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)v116, 3, &v104);
  MIL::IRParameter::Make(&v104, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v13 = v105;
  v105 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v104.n128_u64[1];
  if (v104.n128_u64[1])
  {
    v15 = (unint64_t *)(v104.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v99 = __p;
    operator delete(__p);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (Scalar)
  {
    v114 = Scalar;
    operator delete(Scalar);
  }
  v17 = v106;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v97);
  MIL::IRParameter::Make(&v97, (uint64_t *)v116);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "k", (uint64_t *)v116);
  v18 = v116[0];
  v116[0] = 0;
  if (v18)
    (*((void (**)(void **))*v18 + 1))(v18);
  v19 = (std::__shared_weak_count *)v97.n128_u64[1];
  if (v97.n128_u64[1])
  {
    v20 = (unint64_t *)(v97.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v106;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v96);
  MIL::IRParameter::Make(&v96, (uint64_t *)v116);
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v22, "axis", (uint64_t *)v116);
  v24 = v116[0];
  v116[0] = 0;
  if (v24)
    (*((void (**)(void **))*v24 + 1))(v24);
  v25 = (std::__shared_weak_count *)v96.n128_u64[1];
  if (v96.n128_u64[1])
  {
    v26 = (unint64_t *)(v96.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v23 + 5) + 32))(*((_QWORD *)v23 + 5), 1);
  v28 = v106;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v95);
  MIL::IRParameter::Make(&v95, (uint64_t *)v116);
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v28, "ascending", (uint64_t *)v116);
  v30 = v116[0];
  v116[0] = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = (std::__shared_weak_count *)v95.n128_u64[1];
  if (v95.n128_u64[1])
  {
    v32 = (unint64_t *)(v95.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  v34 = v106;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v94);
  MIL::IRParameter::Make(&v94, (uint64_t *)v116);
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v34, "sort", (uint64_t *)v116);
  v36 = v116[0];
  v116[0] = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = (std::__shared_weak_count *)v94.n128_u64[1];
  if (v94.n128_u64[1])
  {
    v38 = (unint64_t *)(v94.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v40 = v106;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v93);
  MIL::IRParameter::Make(&v93, (uint64_t *)v116);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v40, "return_indices", (uint64_t *)v116);
  v42 = v116[0];
  v116[0] = 0;
  if (v42)
    (*((void (**)(void **))*v42 + 1))(v42);
  v43 = (std::__shared_weak_count *)v93.n128_u64[1];
  if (v93.n128_u64[1])
  {
    v44 = (unint64_t *)(v93.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 48))(*((_QWORD *)v41 + 5), 1);
  v116[0] = 0;
  *(_OWORD *)v91 = *(_OWORD *)a2;
  v92 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v46 = (uint64_t)v106;
  v89 = (uint64_t)v106;
  if (v106)
  {
    v47 = (std::__shared_weak_count *)operator new();
    v47->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v47->__shared_owners_ = 0;
    v47->__shared_weak_owners_ = 0;
    v47[1].__vftable = (std::__shared_weak_count_vtbl *)v46;
    v90 = v47;
    v106 = 0;
    v87 = v116[0];
    if (v116[0])
    {
      v48 = (std::__shared_weak_count *)operator new();
      v49 = v116[0];
      v48->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F948;
      v48->__shared_owners_ = 0;
      v48->__shared_weak_owners_ = 0;
      v48[1].__vftable = (std::__shared_weak_count_vtbl *)v49;
    }
    else
    {
      v48 = 0;
    }
  }
  else
  {
    v48 = 0;
    v90 = 0;
    v106 = 0;
    v87 = 0;
  }
  v88 = v48;
  v116[0] = 0;
  v111[0] = &unk_1EA99FAC8;
  v111[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateTopk;
  v112 = v111;
  v110 = 0;
  MIL::IROperator::Make((__int128 *)v91, 4, 6, 1, 2, (uint64_t)&v89, (uint64_t)&v87, (uint64_t)v111, a3, (uint64_t)v109);
  v50 = v110;
  if (v110 == v109)
  {
    v51 = 4;
    v50 = v109;
  }
  else
  {
    if (!v110)
      goto LABEL_59;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_59:
  v52 = v112;
  if (v112 == v111)
  {
    v53 = 4;
    v52 = v111;
    goto LABEL_63;
  }
  if (v112)
  {
    v53 = 5;
LABEL_63:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }
  v54 = v88;
  if (v88)
  {
    p_shared_owners = (unint64_t *)&v88->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v90;
  if (v90)
  {
    v58 = (unint64_t *)&v90->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (SHIBYTE(v92) < 0)
    operator delete(v91[0]);
  v60 = *a3;
  v107[0] = &off_1EA99FBD8;
  v107[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceTopk;
  v108 = v107;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v60 + 200))(v60, v107);
  v61 = v108;
  if (v108 == v107)
  {
    v62 = 4;
    v61 = v107;
  }
  else
  {
    if (!v108)
      goto LABEL_81;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_81:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v63 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v83, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v83, 0, (uint64_t *)&v101);
  v85 = v101;
  if (v101)
  {
    v64 = (std::__shared_weak_count *)operator new();
    v65 = (std::__shared_weak_count_vtbl *)v101;
    v64->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v64->__shared_owners_ = 0;
    v64->__shared_weak_owners_ = 0;
    v64[1].__vftable = v65;
  }
  else
  {
    v64 = 0;
  }
  v86 = v64;
  v101 = 0;
  std::string::basic_string[abi:ne180100]<0>(v81, "T");
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, void **))v63->~__shared_weak_count + 3))(v63, &v85, v81);
  if (v82 < 0)
    operator delete(v81[0]);
  v66 = v86;
  if (v86)
  {
    v67 = (unint64_t *)&v86->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v101;
  v101 = 0;
  if (v69)
    (*(void (**)(void *))(*(_QWORD *)v69 + 8))(v69);
  if (v84 < 0)
    operator delete(v83[0]);
  v70 = *a3;
  v79 = Scalar;
  if (Scalar)
  {
    v71 = (std::__shared_weak_count *)operator new();
    v72 = Scalar;
    v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71[1].__vftable = v72;
  }
  else
  {
    v71 = 0;
  }
  v80 = v71;
  Scalar = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v70 + 56))(v70, &v79);
  v73 = v80;
  if (v80)
  {
    v74 = (unint64_t *)&v80->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = Scalar;
  Scalar = 0;
  if (v76)
    (*((void (**)(std::__shared_weak_count_vtbl *))v76->~__shared_weak_count + 1))(v76);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](v116, 0);
  result = (uint64_t)v106;
  if (v106)
  {
    v78 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v106);
    return MEMORY[0x1E0C023A0](v78, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0885618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  uint64_t v51;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (a36 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v51 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 208), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateReshape(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  MIL::IRValueType *v7;
  uint64_t v8;
  uint64_t ParameterValue;
  MIL::IRValue *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type size;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  unint64_t *v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  void *__p[2];
  std::string::size_type v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  void *v59[2];
  char v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *v63[2];
  char v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t Data;
  uint64_t v68;
  std::string v69;

  std::string::basic_string[abi:ne180100]<0>(&v69, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v69, "shape");
  v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v69, "shape");
  ParameterValue = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&v69, 0);
  v10 = (MIL::IRValue *)ParameterValue;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v69.__r_.__value_.__l.__data_);
    if (!v10)
    {
LABEL_40:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  else if (!ParameterValue)
  {
    goto LABEL_40;
  }
  v11 = (uint64_t *)MIL::IRValue::AsTensor(v10);
  Data = MIL::IRTensorValue::GetDataView<int>(v11);
  v68 = v12;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) < 6)
  {
    if (!v68)
      goto LABEL_72;
    v20 = 0;
    v21 = (int *)Data;
    v22 = 4 * v68;
    do
    {
      v23 = *v21++;
      if (v23 == -1)
        ++v20;
      v22 -= 4;
    }
    while (v22);
    if (v20 >= 2)
    {
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v25 = (std::__shared_weak_count *)LocationPtr[1];
      v61 = *LocationPtr;
      v62 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v59, "Only 1 dimension can be set to -1 (infer size from other dims based off of the # of elements in the input tensor).");
      MIL::ValidationResult::ValidationResult(a2, &v61, 315, v59);
      if (v60 < 0)
        operator delete(v59[0]);
      v17 = v62;
      if (v62)
      {
        v28 = (unint64_t *)&v62->__shared_owners_;
        do
          v19 = __ldaxr(v28);
        while (__stlxr(v19 - 1, v28));
        goto LABEL_68;
      }
    }
    else
    {
LABEL_72:
      if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 104))(v6)
        || !MIL::Validation::IsZeroOutOfRangeForReshape(&Data, v6))
      {
        goto LABEL_40;
      }
      v29 = 4 * v68;
      while (v29)
      {
        v30 = *(_DWORD *)(Data - 4 + v29);
        v29 -= 4;
        if (!v30)
        {
          v31 = Data + v29 + 4;
          goto LABEL_42;
        }
      }
      v31 = Data;
LABEL_42:
      v32 = (v31 - Data) >> 2;
      v33 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v34 = (std::__shared_weak_count *)v33[1];
      v57 = *v33;
      v58 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      std::to_string(&v51, v32 + 1);
      v37 = std::string::insert(&v51, 0, "Input shape must be at least rank ");
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      v39 = std::string::append(&v52, " for target dim ");
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v50, v32);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v50;
      else
        v41 = (std::string *)v50.__r_.__value_.__r.__words[0];
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      else
        size = v50.__r_.__value_.__l.__size_;
      v43 = std::string::append(&v53, (const std::string::value_type *)v41, size);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = std::string::append(&v54, " to be set to 0 ");
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      v47 = std::string::append(&v69, "(copy the dim at the same index from x's shape).");
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v56 = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a2, &v57, 315, __p);
      if (SHIBYTE(v56) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      v17 = v58;
      if (v58)
      {
        v49 = (unint64_t *)&v58->__shared_owners_;
        do
          v19 = __ldaxr(v49);
        while (__stlxr(v19 - 1, v49));
        goto LABEL_68;
      }
    }
  }
  else
  {
    v13 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v14 = (std::__shared_weak_count *)v13[1];
    v65 = *v13;
    v66 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    std::string::basic_string[abi:ne180100]<0>(v63, "Rank of the shape parameter must be between 0 and 5 (inclusive) in reshape");
    MIL::ValidationResult::ValidationResult(a2, &v65, 315, v63);
    if (v64 < 0)
      operator delete(v63[0]);
    v17 = v66;
    if (v66)
    {
      v18 = (unint64_t *)&v66->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
LABEL_68:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1E0885DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49)
{
  uint64_t v49;

  if (a47 < 0)
    operator delete(__p);
  if (*(char *)(v49 - 57) < 0)
    operator delete(*(void **)(v49 - 80));
  if (a40 < 0)
    operator delete(a35);
  if (a14 < 0)
    operator delete(a9);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceReshape(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::ValueTypeInferenceUtils::ValueTypeInferenceReshapeCommon(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0885F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::CustomValidators::ValidateReshapeLike@<X0>(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  _QWORD *LocationPtr;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;
  void *__p;
  void *v15;
  uint64_t v16;
  int v17;
  _QWORD v18[6];
  int v19;
  _OWORD v20[2];
  int v21;

  memset(v20, 0, sizeof(v20));
  v21 = 1065353216;
  MIL::Validation::OpToTypeInferenceParams(this, (uint64_t)v20, (MIL::ValidationResult *)v18);
  if (((*(uint64_t (**)(_QWORD *))(v18[0] + 16))(v18) & 1) != 0)
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v18);
    v17 = 0;
    __p = 0;
    v15 = 0;
    v16 = 0;
    LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
    v6 = LocationPtr[1];
    *(_QWORD *)&v13 = *LocationPtr;
    *((_QWORD *)&v13 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (((*(uint64_t (**)(_QWORD *))(v18[0] + 16))(v18) & 1) != 0)
    {
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v18);
      MIL::ValidationResult::ValidationResult(a2);
    }
    else
    {
      MIL::MILResult::MILResult((std::string *)a2, (uint64_t)v18);
      *(_QWORD *)a2 = &off_1EA99F170;
      *((_DWORD *)a2 + 12) = v19;
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v18);
    }
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
  }
  else
  {
    MIL::MILResult::MILResult((std::string *)a2, (uint64_t)v18);
    *(_QWORD *)a2 = &off_1EA99F170;
    *((_DWORD *)a2 + 12) = v19;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v18);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v20);
}

void sub_1E08860D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v16 - 64);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ValueTypeInferenceReshapeLike(__int128 *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  MIL::IRValueType *ValueType;
  MIL::IRTensorValueType *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  const void *Value;
  int v28;
  int v29;
  uint64_t v30;
  const void *v31;
  int v32;
  int v33;
  const void *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  MIL::ValidationResult *v53;
  __int128 *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  uint64_t v61;
  BOOL HasUnknownDims;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  unint64_t *v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  unint64_t *v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  std::string::size_type size;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  std::string::size_type v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  unint64_t *v102;
  MIL::ValidationResult *v103;
  __int128 *v104;
  _QWORD *v105;
  unint64_t __val;
  void *v107[2];
  char v108;
  __int128 v109;
  void *v110;
  char v111;
  __int128 v112;
  std::string __p[3];
  void *v114;
  char v115;
  uint64_t v116;
  void *v117[2];
  char v118;
  __int128 v119;
  void *v120[2];
  char v121;
  __int128 v122;
  std::string v123;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string v127;
  std::string v128;
  std::string v129;
  __int128 v130;
  std::string::size_type v131;
  __int128 v132;
  __int128 v133;
  std::string::size_type v134;
  __int128 v135;
  __int128 v136;
  std::string::size_type v137;
  __int128 v138;
  void *v139[2];
  char v140;
  __int128 v141;
  void *v142[2];
  char v143;
  __int128 v144;
  std::string v145;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v11 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  *a3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "ref_tensors");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "begins");
  v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "ends");
  v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "end_masks");
  if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v145, "end_masks");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v145);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v16 = v15 + 40;
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v145.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = 0;
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v17 = *((_QWORD *)v12 + 5);
  v18 = *((_QWORD *)v12 + 6);
  v19 = (v18 - v17) >> 4;
  if (v19 != (uint64_t)(*((_QWORD *)v13 + 6) - *((_QWORD *)v13 + 5)) >> 4
    || v19 != (uint64_t)(*((_QWORD *)v14 + 6) - *((_QWORD *)v14 + 5)) >> 4
    || v16 && v19 != (uint64_t)(v16[1] - *v16) >> 4)
  {
    v144 = *a1;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    std::string::basic_string[abi:ne180100]<0>(v142, "ref_tensors must be the same length as begins, ends, and end_masks.");
    MIL::ValidationResult::ValidationResult(a5, &v144, 315, v142);
    if (v143 < 0)
      operator delete(v142[0]);
    v56 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
    if (!*((_QWORD *)&v144 + 1))
      return;
    v57 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
LABEL_81:
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
    return;
  }
  v104 = a1;
  v105 = v16;
  v103 = a5;
  if (v18 == v17)
  {
LABEL_70:
    v50 = *(_QWORD **)a4;
    v51 = *(_QWORD **)(a4 + 8);
    v52 = 1;
    if (v50 == v51)
    {
      v53 = v103;
      v54 = v104;
    }
    else
    {
      v53 = v103;
      v54 = v104;
      do
      {
        v55 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v50 + 16))(*v50);
        if (v55)
          v52 *= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 48))(v55);
        ++v50;
      }
      while (v50 != v51);
    }
    v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
    HasUnknownDims = MIL::ValueTypeInferenceUtils::ShapeHasUnknownDims(v61);
    v63 = *(_QWORD *)v11;
    if (HasUnknownDims)
    {
      v64 = (*(uint64_t (**)(uint64_t))(v63 + 96))(v11);
      v65 = *(_QWORD **)v64;
      v66 = *(_QWORD **)(v64 + 8);
      v67 = 1;
      while (v65 != v66)
      {
        v68 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v65 + 16))(*v65);
        if (v68)
          v67 *= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 48))(v68);
        ++v65;
      }
      if (v52 < v67)
      {
        v109 = *v54;
        *(_QWORD *)v54 = 0;
        *((_QWORD *)v54 + 1) = 0;
        std::string::basic_string[abi:ne180100]<0>(v107, "Input has a greater number of elements than the output tensor can have.");
        MIL::ValidationResult::ValidationResult(v53, &v109, 315, v107);
        if (v108 < 0)
          operator delete(v107[0]);
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
        if (!*((_QWORD *)&v109 + 1))
          return;
        v73 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
        do
          v58 = __ldaxr(v73);
        while (__stlxr(v58 - 1, v73));
        goto LABEL_81;
      }
    }
    else if ((*(uint64_t (**)(uint64_t))(v63 + 16))(v11) != v52)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"cannot reshape tensor of size ", 30);
      v69 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" into a shape of different size ", 32);
      std::ostream::operator<<();
      v112 = *v54;
      *(_QWORD *)v54 = 0;
      *((_QWORD *)v54 + 1) = 0;
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(v53, &v112, 315, &v110);
      if (v111 < 0)
        operator delete(v110);
      v70 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
      if (*((_QWORD *)&v112 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                                + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      __p[0].__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
      if (v115 < 0)
        operator delete(v114);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1E0C022F8](&v116);
      return;
    }
    MIL::ValidationResult::ValidationResult(v53);
    return;
  }
  v20 = 0;
  while (1)
  {
    v21 = 16 * v20;
    ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(v17 + 16 * v20));
    v23 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ValueType);
    v24 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v23 + 96))(v23);
    v25 = *((_QWORD *)v13 + 5);
    if (v20 >= (*((_QWORD *)v13 + 6) - v25) >> 4)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v26 = (_QWORD *)v24;
    Value = (const void *)MIL::IRTypedArgument::GetValue(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(v25 + 16 * v20));
    v28 = MIL::IRValue::GetScalar<int>(Value);
    v29 = v28;
    if (v28 < 0)
      v29 = v28 + ((v26[1] - *v26) >> 3);
    v30 = *((_QWORD *)v14 + 5);
    __val = v20;
    if (v20 >= (*((_QWORD *)v14 + 6) - v30) >> 4)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v31 = (const void *)MIL::IRTypedArgument::GetValue(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(v30 + 16 * v20));
    v32 = MIL::IRValue::GetScalar<int>(v31);
    v33 = v32;
    if (v32 < 0)
      v33 = v32 + ((v26[1] - *v26) >> 3);
    if (v105)
    {
      if (__val >= (uint64_t)(v105[1] - *v105) >> 4)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v34 = (const void *)MIL::IRTypedArgument::GetValue(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(*v105 + v21));
      if (MIL::IRValue::GetScalar<BOOL>(v34))
      {
        if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v23 + 104))(v23) & 1) == 0)
        {
          v141 = *v104;
          *(_QWORD *)v104 = 0;
          *((_QWORD *)v104 + 1) = 0;
          std::string::basic_string[abi:ne180100]<0>(v139, "If end_mask is true, the corresponding ref_tensor must have fixed rank.");
          MIL::ValidationResult::ValidationResult(v103, &v141, 315, v139);
          if (v140 < 0)
            operator delete(v139[0]);
          std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v141);
          return;
        }
        v33 = MIL::IRTensorValueType::Rank(v23);
      }
    }
    if (v29 < 0
      || (*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v23 + 104))(v23)
      && v29 >= (int)MIL::IRTensorValueType::Rank(v23))
    {
      break;
    }
    if (v33 < 0
      || (*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v23 + 104))(v23)
      && v33 > (int)MIL::IRTensorValueType::Rank(v23))
    {
      v135 = *v104;
      *(_QWORD *)v104 = 0;
      *((_QWORD *)v104 + 1) = 0;
      std::to_string(&v145, __val);
      v79 = std::string::insert(&v145, 0, "ends[");
      v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      v81 = std::string::append(__p, "] is out of range");
      v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v134 = v81->__r_.__value_.__r.__words[2];
      v133 = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(v103, &v135, 315, &v133);
      if (SHIBYTE(v134) < 0)
        operator delete((void *)v133);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v145.__r_.__value_.__l.__data_);
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      if (*((_QWORD *)&v135 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
        do
          v58 = __ldaxr(v83);
        while (__stlxr(v58 - 1, v83));
        goto LABEL_81;
      }
      return;
    }
    if (v29 > v33)
    {
      v132 = *v104;
      *(_QWORD *)v104 = 0;
      *((_QWORD *)v104 + 1) = 0;
      std::to_string(&v125, __val);
      v84 = std::string::insert(&v125, 0, "ends[");
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v126.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      v86 = std::string::append(&v126, "] is greater than begins[");
      v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      v127.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v87;
      v86->__r_.__value_.__l.__size_ = 0;
      v86->__r_.__value_.__r.__words[2] = 0;
      v86->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v124, __val);
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v88 = &v124;
      else
        v88 = (std::string *)v124.__r_.__value_.__r.__words[0];
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      else
        size = v124.__r_.__value_.__l.__size_;
      v90 = std::string::append(&v127, (const std::string::value_type *)v88, size);
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v128.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      v92 = std::string::append(&v128, "] ");
      v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v129.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      v94 = std::string::append(&v129, "(or begin_masks[");
      v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      v145.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v123, __val);
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v96 = &v123;
      else
        v96 = (std::string *)v123.__r_.__value_.__r.__words[0];
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v97 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      else
        v97 = v123.__r_.__value_.__l.__size_;
      v98 = std::string::append(&v145, (const std::string::value_type *)v96, v97);
      v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v99;
      v98->__r_.__value_.__l.__size_ = 0;
      v98->__r_.__value_.__r.__words[2] = 0;
      v98->__r_.__value_.__r.__words[0] = 0;
      v100 = std::string::append(__p, "]).");
      v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
      v131 = v100->__r_.__value_.__r.__words[2];
      v130 = v101;
      v100->__r_.__value_.__l.__size_ = 0;
      v100->__r_.__value_.__r.__words[2] = 0;
      v100->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(v103, &v132, 315, &v130);
      if (SHIBYTE(v131) < 0)
        operator delete((void *)v130);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v123.__r_.__value_.__l.__data_);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v145.__r_.__value_.__l.__data_);
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v128.__r_.__value_.__l.__data_);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v127.__r_.__value_.__l.__data_);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
      if (*((_QWORD *)&v132 + 1))
      {
        v102 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
        do
          v58 = __ldaxr(v102);
        while (__stlxr(v58 - 1, v102));
        goto LABEL_81;
      }
      return;
    }
    if (v29)
    {
      v35 = 0;
      while (1)
      {
        if (v35 >= (uint64_t)(v26[1] - *v26) >> 3)
LABEL_181:
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*v26 + 8 * v35) + 32))(*(_QWORD *)(*v26 + 8 * v35)))
          break;
        if (v29 == ++v35)
          goto LABEL_48;
      }
      v122 = *v104;
      *(_QWORD *)v104 = 0;
      *((_QWORD *)v104 + 1) = 0;
      std::string::basic_string[abi:ne180100]<0>(v120, "Variadic dimensions are not supported if they come before the selected dims in the shape of a ref_tensor.");
      MIL::ValidationResult::ValidationResult(v103, &v122, 315, v120);
      if (v121 < 0)
        operator delete(v120[0]);
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
      if (*((_QWORD *)&v122 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
        do
          v58 = __ldaxr(v59);
        while (__stlxr(v58 - 1, v59));
        goto LABEL_81;
      }
      return;
    }
LABEL_48:
    if (v29 < v33)
    {
      v36 = v29;
      while (1)
      {
        if (v36 >= (uint64_t)(v26[1] - *v26) >> 3)
          goto LABEL_181;
        v37 = *(_QWORD *)(*v26 + 8 * v36);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37))
          break;
        v39 = *(_QWORD **)(a4 + 8);
        v38 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v39 >= v38)
        {
          v41 = ((uint64_t)v39 - *(_QWORD *)a4) >> 3;
          if ((unint64_t)(v41 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v42 = v38 - *(_QWORD *)a4;
          v43 = v42 >> 2;
          if (v42 >> 2 <= (unint64_t)(v41 + 1))
            v43 = v41 + 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a4 + 16, v44);
          else
            v45 = 0;
          v46 = &v45[8 * v41];
          *(_QWORD *)v46 = v37;
          v40 = v46 + 8;
          v48 = *(_QWORD **)a4;
          v47 = *(_QWORD **)(a4 + 8);
          if (v47 != *(_QWORD **)a4)
          {
            do
            {
              v49 = *--v47;
              *((_QWORD *)v46 - 1) = v49;
              v46 -= 8;
            }
            while (v47 != v48);
            v47 = *(_QWORD **)a4;
          }
          *(_QWORD *)a4 = v46;
          *(_QWORD *)(a4 + 8) = v40;
          *(_QWORD *)(a4 + 16) = &v45[8 * v44];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *v39 = v37;
          v40 = v39 + 1;
        }
        *(_QWORD *)(a4 + 8) = v40;
        if (v33 <= (int)++v36)
          goto LABEL_69;
      }
      v119 = *v104;
      *(_QWORD *)v104 = 0;
      *((_QWORD *)v104 + 1) = 0;
      std::string::basic_string[abi:ne180100]<0>(v117, "The destination shape cannot have unknown dimensions.");
      MIL::ValidationResult::ValidationResult(v103, &v119, 315, v117);
      if (v118 < 0)
        operator delete(v117[0]);
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
      if (*((_QWORD *)&v119 + 1))
      {
        v60 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
        do
          v58 = __ldaxr(v60);
        while (__stlxr(v58 - 1, v60));
        goto LABEL_81;
      }
      return;
    }
LABEL_69:
    v20 = __val + 1;
    v17 = *((_QWORD *)v12 + 5);
    if (__val + 1 >= (*((_QWORD *)v12 + 6) - v17) >> 4)
      goto LABEL_70;
  }
  v138 = *v104;
  *(_QWORD *)v104 = 0;
  *((_QWORD *)v104 + 1) = 0;
  std::to_string(&v145, __val);
  v74 = std::string::insert(&v145, 0, "begins[");
  v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  v76 = std::string::append(__p, "] is out of range");
  v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v137 = v76->__r_.__value_.__r.__words[2];
  v136 = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(v103, &v138, 315, &v136);
  if (SHIBYTE(v137) < 0)
    operator delete((void *)v136);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
  if (*((_QWORD *)&v138 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
    do
      v58 = __ldaxr(v78);
    while (__stlxr(v58 - 1, v78));
    goto LABEL_81;
  }
}

void sub_1E0886E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 193) < 0)
    operator delete(*(void **)(v1 - 216));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1 - 192);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceReshapeLike(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *exception;
  __int128 v15;
  void (**v16)(MIL::ValidationResult *__hidden);
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  void *v28;
  void *v29;
  uint64_t v30;
  int v31;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  MIL::UnknownLocation::Make(&v21);
  *(_QWORD *)&v22 = v21;
  if (v21)
  {
    v6 = (_QWORD *)operator new();
    v7 = v21;
    *v6 = &unk_1EA9940C8;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v7;
  }
  else
  {
    v6 = 0;
  }
  v31 = 0;
  *((_QWORD *)&v22 + 1) = v6;
  v21 = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v21;
  v21 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v23))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v15 = v24;
    v24 = 0uLL;
    v17 = v15;
    v18 = v25;
    v19 = v26;
    v25 = 0uLL;
    v26 = 0;
    v16 = &off_1EA99F170;
    v20 = v27;
    MIL::ValidationError::ValidationError(exception, &v16);
  }
  v12 = MIL::IRTensorValueType::MakeWithShape(*a1, v31, (uint64_t)&v28);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = (uint64_t *)operator new(8uLL);
  *a3 = v13;
  *v13++ = v12;
  a3[1] = v13;
  a3[2] = v13;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v23);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_1E08872B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)va);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)va1);
  v4 = *(void **)(v2 - 64);
  if (v4)
  {
    *(_QWORD *)(v2 - 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidatePixelUnshuffle(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  const void *ParameterValue;
  unsigned int v8;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15[2];
  void *__p[2];
  char v17;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v17 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "downscale_factor");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v8 = MIL::IRValue::GetScalar<unsigned int>(ParameterValue);
  if (v17 < 0)
    operator delete(__p[0]);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v10 = (std::__shared_weak_count *)LocationPtr[1];
  v15[0] = *LocationPtr;
  v15[1] = (uint64_t)v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1E0887450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ValidatePixelUnshuffleInputs(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  void *v25[2];
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  if (a2)
  {
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if (v7[1] - *v7 <= 0x18uLL
      || (v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v7 + 24) + 16))(*(_QWORD *)(*v7 + 24)),
          v7[1] - *v7 <= 0x10uLL))
    {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    v9 = v8;
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v7 + 16) + 16))(*(_QWORD *)(*v7 + 16));
    if (v9 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) % (unint64_t)a2)
    {
      v11 = (std::__shared_weak_count *)a3[1];
      v31 = *a3;
      v32 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "width dimension is not divisible by downscale_factor.");
      MIL::ValidationResult::ValidationResult(a4, &v31, 315, __p);
      if (v30 < 0)
        operator delete(__p[0]);
      v14 = v32;
      if (v32)
      {
        v15 = (unint64_t *)&v32->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
LABEL_34:
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      if (!v10 || !((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10) % (unint64_t)a2))
      {
        MIL::ValidationResult::ValidationResult(a4);
        return;
      }
      v17 = (std::__shared_weak_count *)a3[1];
      v27 = *a3;
      v28 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      std::string::basic_string[abi:ne180100]<0>(v25, "height dimension is not divisible by downscale_factor.");
      MIL::ValidationResult::ValidationResult(a4, &v27, 315, v25);
      if (v26 < 0)
        operator delete(v25[0]);
      v14 = v28;
      if (v28)
      {
        v20 = (unint64_t *)&v28->__shared_owners_;
        do
          v16 = __ldaxr(v20);
        while (__stlxr(v16 - 1, v20));
        goto LABEL_34;
      }
    }
  }
  else
  {
    v21 = (std::__shared_weak_count *)a3[1];
    v35 = *a3;
    v36 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    std::string::basic_string[abi:ne180100]<0>(v33, "downscale_factor must be greater than or equal to 1.");
    MIL::ValidationResult::ValidationResult(a4, &v35, 315, v33);
    if (v34 < 0)
      operator delete(v33[0]);
    v14 = v36;
    if (v36)
    {
      v24 = (unint64_t *)&v36->__shared_owners_;
      do
        v16 = __ldaxr(v24);
      while (__stlxr(v16 - 1, v24));
      goto LABEL_34;
    }
  }
}

void sub_1E08876F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferencePixelUnshuffle(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  uint64_t v9;
  const void *SingleValue;
  unsigned int v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count_vtbl *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  void *exception;
  void *v71;
  void *v72;
  char v73;
  uint64_t v74;
  __int128 v75;
  std::runtime_error v76;
  uint64_t v77;
  void *__p[2];
  char v79;
  void *v80;
  char v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  char *v85;
  std::string v86[2];
  int v87;
  uint64_t v88[2];
  _BYTE v89[48];
  int v90;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v79 < 0)
    operator delete(__p[0]);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  std::string::basic_string[abi:ne180100]<0>(__p, "downscale_factor");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)__p);
  v11 = MIL::IRValue::GetScalar<unsigned int>(SingleValue);
  if (v79 < 0)
    operator delete(__p[0]);
  MIL::UnknownLocation::Make(__p);
  v88[0] = (uint64_t)__p[0];
  if (__p[0])
  {
    v12 = (std::__shared_weak_count *)operator new();
    v13 = (std::__shared_weak_count_vtbl *)__p[0];
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v13;
  }
  else
  {
    v12 = 0;
  }
  v88[1] = (uint64_t)v12;
  __p[0] = 0;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = __p[0];
  __p[0] = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v89))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v86, (uint64_t)v89);
    v86[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v87 = v90;
    MIL::ValidationError::ValidationError(exception, v86);
  }
  if (*(_QWORD *)(v9 + 8) == *(_QWORD *)v9)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v17 = **(_QWORD **)v9;
  v18 = (uint64_t *)operator new(8uLL);
  v83 = v18;
  *v18 = v17;
  v84 = v18 + 1;
  v85 = (char *)(v18 + 1);
  if (*(_QWORD *)(v9 + 8) - *(_QWORD *)v9 <= 8uLL)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v9 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v9 + 8));
  if (v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19);
    v21 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v20 * v11 * v11));
    v22 = v84;
    if (v84 >= (uint64_t *)v85)
    {
      v23 = v84 - v83;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v24 = (v85 - (char *)v83) >> 2;
      if (v24 <= v23 + 1)
        v24 = v23 + 1;
      if ((unint64_t)(v85 - (char *)v83) >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v85, v25);
      else
        v26 = 0;
      v32 = (uint64_t *)&v26[8 * v23];
      v33 = &v26[8 * v25];
      *v32 = v21;
      v27 = v32 + 1;
      v35 = (char *)v83;
      v34 = (char *)v84;
      if (v84 == v83)
        goto LABEL_46;
      do
      {
        v36 = *((_QWORD *)v34 - 1);
        v34 -= 8;
        *--v32 = v36;
      }
      while (v34 != v35);
LABEL_45:
      v34 = (char *)v83;
LABEL_46:
      v83 = v32;
      v84 = v27;
      v85 = v33;
      if (v34)
        operator delete(v34);
      goto LABEL_48;
    }
  }
  else
  {
    v21 = MIL::IRUnknownDimension::Make(*a1, 0);
    v22 = v84;
    if (v84 >= (uint64_t *)v85)
    {
      v28 = v84 - v83;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v29 = (v85 - (char *)v83) >> 2;
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      if ((unint64_t)(v85 - (char *)v83) >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v85, v30);
      else
        v31 = 0;
      v32 = (uint64_t *)&v31[8 * v28];
      v33 = &v31[8 * v30];
      *v32 = v21;
      v27 = v32 + 1;
      v37 = (char *)v83;
      v34 = (char *)v84;
      if (v84 == v83)
        goto LABEL_46;
      do
      {
        v38 = *((_QWORD *)v34 - 1);
        v34 -= 8;
        *--v32 = v38;
      }
      while (v34 != v37);
      goto LABEL_45;
    }
  }
  *v22 = v21;
  v27 = v22 + 1;
LABEL_48:
  v84 = v27;
  v39 = (void *)*MEMORY[0x1E0DE4F60];
  v71 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v40 = 2;
  v41 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  do
  {
    if (v40 >= (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v42 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v9 + 8 * v40) + 16))(*(_QWORD *)(*(_QWORD *)v9 + 8 * v40));
    if (v42)
    {
      v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42);
      v44 = v43 / v11;
      if (v43 % v11)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"dimension at index ", 19);
        v45 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" of size ", 9);
        v46 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" is not divisible by downscale_factor", 37);
        MIL::UnknownLocation::Make(&v74);
        *(_QWORD *)&v75 = v74;
        if (v74)
        {
          v47 = (_QWORD *)operator new();
          v48 = v74;
          *v47 = &unk_1EA9940C8;
          v47[1] = 0;
          v47[2] = 0;
          v47[3] = v48;
        }
        else
        {
          v47 = 0;
        }
        *((_QWORD *)&v75 + 1) = v47;
        v74 = 0;
        std::stringbuf::str();
        MIL::ValidationError::ValidationError((uint64_t)&v76, &v75, (uint64_t)&v72, 315);
        v76.__vftable = (std::runtime_error_vtbl *)&off_1EA99F108;
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v77);
        std::runtime_error::~runtime_error(&v76);
        if (v73 < 0)
          operator delete(v72);
        v55 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
        if (*((_QWORD *)&v75 + 1))
        {
          v56 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        v58 = v74;
        v74 = 0;
        if (v58)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
        __p[0] = v39;
        *(void **)((char *)__p + *((_QWORD *)v39 - 3)) = v71;
        __p[1] = v41;
        if (v81 < 0)
          operator delete(v80);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1E0C022F8](&v82);
      }
      v49 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v44);
      v50 = v84;
      if (v84 < (uint64_t *)v85)
      {
LABEL_77:
        *v50 = v49;
        v59 = v50 + 1;
        goto LABEL_96;
      }
      v60 = v84 - v83;
      if ((unint64_t)(v60 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v61 = (v85 - (char *)v83) >> 2;
      if (v61 <= v60 + 1)
        v61 = v60 + 1;
      if ((unint64_t)(v85 - (char *)v83) >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v53 = v61;
      if (v53)
        v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v85, v53);
      else
        v54 = 0;
      v62 = (uint64_t *)&v54[8 * v60];
      *v62 = v49;
      v59 = v62 + 1;
      v64 = (char *)v83;
      v63 = (char *)v84;
      if (v84 != v83)
      {
        do
        {
          v65 = *((_QWORD *)v63 - 1);
          v63 -= 8;
          *--v62 = v65;
        }
        while (v63 != v64);
LABEL_93:
        v63 = (char *)v83;
      }
    }
    else
    {
      v49 = MIL::IRUnknownDimension::Make(*a1, 0);
      v50 = v84;
      if (v84 < (uint64_t *)v85)
        goto LABEL_77;
      v51 = v84 - v83;
      if ((unint64_t)(v51 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v52 = (v85 - (char *)v83) >> 2;
      if (v52 <= v51 + 1)
        v52 = v51 + 1;
      if ((unint64_t)(v85 - (char *)v83) >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v53 = v52;
      if (v53)
        v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v85, v53);
      else
        v54 = 0;
      v62 = (uint64_t *)&v54[8 * v51];
      *v62 = v49;
      v59 = v62 + 1;
      v66 = (char *)v83;
      v63 = (char *)v84;
      if (v84 != v83)
      {
        do
        {
          v67 = *((_QWORD *)v63 - 1);
          v63 -= 8;
          *--v62 = v67;
        }
        while (v63 != v66);
        goto LABEL_93;
      }
    }
    v83 = v62;
    v84 = v59;
    v85 = &v54[8 * v53];
    if (v63)
      operator delete(v63);
LABEL_96:
    v84 = v59;
    ++v40;
  }
  while (v40 != 4);
  v68 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&v83);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v69 = (uint64_t *)operator new(8uLL);
  *a3 = v69;
  *v69++ = v68;
  a3[1] = v69;
  a3[2] = v69;
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v89);
}

void sub_1E0887F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v40 - 216));
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v40 - 144));
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::PixelUnshuffle::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char **v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  void *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  void *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  void *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  void *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  void *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count_vtbl *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  uint64_t result;
  uint64_t v150;
  void *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  void *v157[2];
  char v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  void *v179[2];
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  __int128 v195;
  __int128 v196;
  void *v197[2];
  uint64_t v198;
  __n128 v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  char **v203;
  __n128 v204;
  __n128 v205;
  _QWORD *v206;
  void *__p;
  void *v208;
  char *v209;
  char *v210;
  char **v211;
  _QWORD v212[3];
  _QWORD *v213;
  _BYTE v214[24];
  _BYTE *v215;
  _QWORD v216[3];
  _QWORD *v217;
  void *v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD v221[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared_weak;
  void (__cdecl **v224)(std::__shared_weak_count *__hidden);
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v206 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = (char *)operator new(0x20uLL);
  v209 = v11 + 32;
  *(_QWORD *)v11 = v7;
  *((_QWORD *)v11 + 1) = v8;
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = v10;
  __p = v11;
  v208 = v11 + 32;
  v218 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (std::__shared_weak_count_vtbl *)&v16->__on_zero_shared_weak;
  v224 = &v16->__on_zero_shared_weak;
  v16->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v14;
  v16->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v15;
  Scalar = v16;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v218, 2, &v205);
  MIL::IRParameter::Make(&v205, &v201);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v201);
  v17 = v201;
  v201 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v205.n128_u64[1];
  if (v205.n128_u64[1])
  {
    v19 = (unint64_t *)(v205.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v208 = __p;
    operator delete(__p);
  }
  v21 = v206;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 16);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v204);
  MIL::IRParameter::Make(&v204, (uint64_t *)&__p);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v21, "downscale_factor", (uint64_t *)&__p);
  v23 = __p;
  __p = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v204.n128_u64[1];
  if (v204.n128_u64[1])
  {
    v25 = (unint64_t *)(v204.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 32))(*((_QWORD *)v22 + 5), 1);
  v203 = 0;
  v27 = operator new();
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v203, (void **)v27);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v203, 1uLL);
  v28 = v203;
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (std::__shared_weak_count_vtbl *)&v33->__on_zero_shared_weak;
  v224 = &v33->__on_zero_shared_weak;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v33->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v31;
  v33->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v32;
  Scalar = v33;
  v221[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = operator new(0x20uLL);
  v219 = (uint64_t)(v38 + 4);
  v220 = v38 + 4;
  *v38 = v34;
  v38[1] = v35;
  v38[2] = v36;
  v38[3] = v37;
  v218 = v38;
  v221[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v218);
  MIL::IRParameter::MakeTypeSet((uint64_t)v221, 2, &v199);
  MIL::IRParameter::Make(&v199, &v200);
  v39 = v200;
  v201 = v200;
  if (v200)
  {
    v40 = (_QWORD *)operator new();
    v41 = v200;
    *v40 = &unk_1EA99F888;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  v202 = v40;
  v200 = 0;
  v42 = v28[2];
  v43 = v28[1];
  if (v43 >= v42)
  {
    v45 = (v43 - *v28) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v47 = v42 - *v28;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v211 = v28 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v28 + 2), v48);
    v51 = (uint64_t *)&v49[16 * v45];
    *v51 = v39;
    v51[1] = (uint64_t)v40;
    v202 = 0;
    v201 = 0;
    v53 = *v28;
    v52 = v28[1];
    if (v52 == *v28)
    {
      v56 = v28[1];
      v54 = &v49[16 * v45];
    }
    else
    {
      v54 = &v49[16 * v45];
      do
      {
        v55 = *((_OWORD *)v52 - 1);
        v52 -= 16;
        *((_OWORD *)v54 - 1) = v55;
        v54 -= 16;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
      }
      while (v52 != v53);
      v56 = *v28;
      v52 = v28[1];
    }
    v44 = (char *)(v51 + 2);
    *v28 = v54;
    v208 = v56;
    v28[1] = (char *)(v51 + 2);
    v209 = v52;
    v57 = v28[2];
    v28[2] = &v49[16 * v50];
    v210 = v57;
    __p = v56;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v40;
    v44 = v43 + 16;
    v202 = 0;
    v201 = 0;
  }
  v28[1] = v44;
  v58 = v200;
  v200 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v199.n128_u64[1];
  if (v199.n128_u64[1])
  {
    v60 = (unint64_t *)(v199.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v218)
  {
    v219 = (uint64_t)v218;
    operator delete(v218);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v197 = *(_OWORD *)a2;
  v198 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v62 = (uint64_t)v206;
  *(_QWORD *)&v196 = v206;
  if (v206)
  {
    v63 = (_QWORD *)operator new();
    *v63 = &unk_1EA99F8E8;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v196 + 1) = v63;
  v206 = 0;
  *(_QWORD *)&v195 = v203;
  if (v203)
  {
    v64 = (_QWORD *)operator new();
    v65 = v203;
    *v64 = &unk_1EA99F948;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v195 + 1) = v64;
  v203 = 0;
  v216[0] = &unk_1EA99FAC8;
  v216[1] = MIL::Operators::Common::ios16::CustomValidators::ValidatePixelUnshuffle;
  v217 = v216;
  v215 = 0;
  MIL::IROperator::Make((__int128 *)v197, &v196, &v195, (uint64_t)v216, (uint64_t)v214, a3);
  v66 = v215;
  if (v215 == v214)
  {
    v67 = 4;
    v66 = v214;
  }
  else
  {
    if (!v215)
      goto LABEL_58;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_58:
  v68 = v217;
  if (v217 == v216)
  {
    v69 = 4;
    v68 = v216;
    goto LABEL_62;
  }
  if (v217)
  {
    v69 = 5;
LABEL_62:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
  if (*((_QWORD *)&v195 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
  if (*((_QWORD *)&v196 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v198) < 0)
    operator delete(v197[0]);
  v76 = *a3;
  v212[0] = &off_1EA99FBD8;
  v212[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferencePixelUnshuffle;
  v213 = v212;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 200))(v76, v212);
  v77 = v213;
  if (v213 == v212)
  {
    v78 = 4;
    v77 = v212;
  }
  else
  {
    if (!v213)
      goto LABEL_80;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v191, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v191, 0, (uint64_t *)&Scalar);
  v193 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v194 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v79 + 24))(v79, &v193, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v82 = v194;
  if (v194)
  {
    p_shared_owners = (unint64_t *)&v194->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  if (v192 < 0)
    operator delete(v191[0]);
  v86 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v187 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v188 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v86 + 24))(v86, &v187, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v89 = v188;
  if (v188)
  {
    v90 = (unint64_t *)&v188->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  v93 = *a3;
  v183 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v184 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v183);
  v96 = v184;
  if (v184)
  {
    v97 = (unint64_t *)&v184->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v100 = __p;
  std::string::basic_string[abi:ne180100]<0>(v179, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v179, 0, (uint64_t *)&Scalar);
  v181 = Scalar;
  if (Scalar)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = Scalar;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v182 = v101;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v100 + 24))(v100, &v181, 1, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v103 = v182;
  if (v182)
  {
    v104 = (unint64_t *)&v182->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = Scalar;
  Scalar = 0;
  if (v106)
    (*((void (**)(std::__shared_weak_count_vtbl *))v106->~__shared_weak_count + 1))(v106);
  if (v180 < 0)
    operator delete(v179[0]);
  v107 = __p;
  std::string::basic_string[abi:ne180100]<0>(v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, (uint64_t *)&Scalar);
  v175 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v176 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "D_in1");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v107 + 24))(v107, &v175, 2, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v110 = v176;
  if (v176)
  {
    v111 = (unint64_t *)&v176->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  if (v174 < 0)
    operator delete(v173[0]);
  v114 = __p;
  std::string::basic_string[abi:ne180100]<0>(v167, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&Scalar);
  v169 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v170 = v115;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "D_in2");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v114 + 24))(v114, &v169, 3, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v117 = v170;
  if (v170)
  {
    v118 = (unint64_t *)&v170->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*((void (**)(std::__shared_weak_count_vtbl *))v120->~__shared_weak_count + 1))(v120);
  if (v168 < 0)
    operator delete(v167[0]);
  v121 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v163 = Scalar;
  if (Scalar)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = Scalar;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v164 = v122;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "C_out");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, &v163, 1, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v124 = v164;
  if (v164)
  {
    v125 = (unint64_t *)&v164->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = Scalar;
  Scalar = 0;
  if (v127)
    (*((void (**)(std::__shared_weak_count_vtbl *))v127->~__shared_weak_count + 1))(v127);
  v128 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v159 = Scalar;
  if (Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v160 = v129;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v157, "D_out1");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v128 + 24))(v128, &v159, 2, v157);
  if (v158 < 0)
    operator delete(v157[0]);
  v131 = v160;
  if (v160)
  {
    v132 = (unint64_t *)&v160->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = Scalar;
  Scalar = 0;
  if (v134)
    (*((void (**)(std::__shared_weak_count_vtbl *))v134->~__shared_weak_count + 1))(v134);
  v135 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v155 = Scalar;
  if (Scalar)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = Scalar;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v156 = v136;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "D_out2");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v135 + 24))(v135, &v155, 3, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v138 = v156;
  if (v156)
  {
    v139 = (unint64_t *)&v156->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = Scalar;
  Scalar = 0;
  if (v141)
    (*((void (**)(std::__shared_weak_count_vtbl *))v141->~__shared_weak_count + 1))(v141);
  v142 = *a3;
  v151 = __p;
  if (__p)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = (std::__shared_weak_count_vtbl *)__p;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v152 = v143;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v142 + 56))(v142, &v151);
  v145 = v152;
  if (v152)
  {
    v146 = (unint64_t *)&v152->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = __p;
  __p = 0;
  if (v148)
    (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v203, 0);
  result = (uint64_t)v206;
  if (v206)
  {
    v150 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v206);
    return MEMORY[0x1E0C023A0](v150, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08891B0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x250];
  STACK[0x250] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x220], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x248], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Reshape::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  void **v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void **v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void **v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void **v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void **v110;
  uint64_t result;
  uint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  void *v115[2];
  char v116;
  void *v117[2];
  char v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  void **v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  __int128 v133;
  __int128 v134;
  void *v135[2];
  uint64_t v136;
  void *v137;
  void *v138;
  _QWORD *v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  void *__p;
  void *v147;
  _QWORD *v148;
  void *v149;
  void *v150;
  _QWORD *v151;
  __n128 v152;
  _QWORD *v153;
  _QWORD v154[3];
  _QWORD *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _QWORD v158[3];
  _QWORD *v159;
  std::__shared_weak_count_vtbl *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  void *v165;
  _QWORD *v166;
  void **v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  char **v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v153 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v160 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v161 = (uint64_t)&v8->~__shared_weak_count_0;
  v162 = (uint64_t)&v8->~__shared_weak_count_0;
  v167 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v164 = v10;
  *v10 = v9;
  v165 = v10 + 1;
  v166 = v10 + 1;
  v168 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v164);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v149 = v12;
  *v12 = v11;
  v150 = v12 + 1;
  v151 = v12 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v149);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v147 = v14 + 1;
  v148 = v14 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 4, &v152);
  MIL::IRParameter::Make(&v152, (uint64_t *)&v137);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v137);
  v15 = v137;
  v137 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v17 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v147 = __p;
    operator delete(__p);
  }
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (v160)
  {
    v161 = (uint64_t)v160;
    operator delete(v160);
  }
  v19 = v153;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (void **)operator new(8uLL);
  v167 = v21;
  *v21 = (void *)v20;
  v168 = v21 + 1;
  v169 = (uint64_t)(v21 + 1);
  v164 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v167);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 1, &v145);
  MIL::IRParameter::Make(&v145, (uint64_t *)&v160);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "shape", (uint64_t *)&v160);
  v22 = v160;
  v160 = 0;
  if (v22)
    (*((void (**)(std::__shared_weak_count_vtbl *))v22->~__shared_weak_count + 1))(v22);
  v23 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v24 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  v144 = 0;
  v26 = operator new();
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v167 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v26);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v167, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v27 = v144;
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v164 = v29;
  *v29 = v28;
  v165 = v29 + 1;
  v166 = v29 + 1;
  v160 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v164);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v149 = v31;
  *v31 = v30;
  v150 = v31 + 1;
  v151 = v31 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v149);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v147 = v33 + 1;
  v148 = v33 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v137 = v35;
  *v35 = v34;
  v138 = v35 + 1;
  v139 = v35 + 1;
  v163 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v137);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 4, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v36 = v141;
  v142 = v141;
  if (v141)
  {
    v37 = (_QWORD *)operator new();
    v38 = v141;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v143 = v37;
  v141 = 0;
  v39 = v27[2];
  v40 = v27[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v27) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v27;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v171 = v27 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v27 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v142 = 0;
    v143 = 0;
    v50 = *v27;
    v49 = v27[1];
    if (v49 == *v27)
    {
      v53 = (void **)v27[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = (void **)*v27;
      v49 = v27[1];
    }
    v41 = (char *)(v48 + 2);
    *v27 = v51;
    v167 = v53;
    v168 = v53;
    v27[1] = (char *)(v48 + 2);
    v169 = (uint64_t)v49;
    v54 = v27[2];
    v27[2] = &v46[16 * v47];
    v170 = (uint64_t)v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v167);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v142 = 0;
    v143 = 0;
  }
  v27[1] = v41;
  v55 = v141;
  v141 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v57 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  if (__p)
  {
    v147 = __p;
    operator delete(__p);
  }
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  *(_OWORD *)v135 = *(_OWORD *)a2;
  v136 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v153;
  *(_QWORD *)&v134 = v153;
  if (v153)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v134 + 1) = v60;
  v153 = 0;
  *(_QWORD *)&v133 = v144;
  if (v144)
  {
    v61 = (_QWORD *)operator new();
    v62 = v144;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v133 + 1) = v61;
  v144 = 0;
  v158[0] = &unk_1EA99FAC8;
  v158[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateReshape;
  v159 = v158;
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v135, &v134, &v133, (uint64_t)v158, (uint64_t)v156, a3);
  v63 = v157;
  if (v157 == v156)
  {
    v64 = 4;
    v63 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v159;
  if (v159 == v158)
  {
    v66 = 4;
    v65 = v158;
    goto LABEL_72;
  }
  if (v159)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
  if (*((_QWORD *)&v133 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  if (*((_QWORD *)&v134 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v136) < 0)
    operator delete(v135[0]);
  v73 = *a3;
  v154[0] = &off_1EA99FBD8;
  v154[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceReshape;
  v155 = v154;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v154);
  v74 = v155;
  if (v155 == v154)
  {
    v75 = 4;
    v74 = v154;
  }
  else
  {
    if (!v155)
      goto LABEL_90;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_90:
  MIL::Validation::TensorDTypeConstraints::Make(&v167);
  v76 = v167;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&v160);
  v131 = v160;
  if (v160)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = v160;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v76 + 3))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    p_shared_owners = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v160;
  v160 = 0;
  if (v82)
    (*((void (**)(std::__shared_weak_count_vtbl *))v82->~__shared_weak_count + 1))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v167;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v160);
  v125 = v160;
  if (v160)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v160;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v160;
  v160 = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  v90 = *a3;
  v121 = v167;
  if (v167)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v167;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v167 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v167;
  v167 = 0;
  if (v96)
    (*((void (**)(void **))*v96 + 1))(v96);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v167);
  v97 = v167;
  std::string::basic_string[abi:ne180100]<0>(v117, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v117, 0, (uint64_t *)&v160);
  v119 = v160;
  if (v160)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v160;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v115, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v97 + 3))(v97, &v119, 0, v115);
  if (v116 < 0)
    operator delete(v115[0]);
  v100 = v120;
  if (v120)
  {
    v101 = (unint64_t *)&v120->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v160;
  v160 = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  if (v118 < 0)
    operator delete(v117[0]);
  v104 = *a3;
  v113 = v167;
  if (v167)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v167;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v114 = v105;
  v167 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v113);
  v107 = v114;
  if (v114)
  {
    v108 = (unint64_t *)&v114->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v167;
  v167 = 0;
  if (v110)
    (*((void (**)(void **))*v110 + 1))(v110);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = (uint64_t)v153;
  if (v153)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v153);
    return MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E088A340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;

  v64 = *(_QWORD *)(v62 - 112);
  *(_QWORD *)(v62 - 112) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *v61;
  *v61 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ReshapeLike::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  void **v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  void **v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  void **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char **v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  void **v78;
  char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  char **v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void **v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *p_shared_owners;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void **v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void **v128;
  uint64_t result;
  uint64_t v130;
  void **v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137[2];
  char v138;
  void *v139[2];
  char v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  void *v153;
  void *v154;
  _QWORD *v155;
  __n128 v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  char **v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  void *__p;
  void *v166;
  _QWORD *v167;
  void *v168;
  void *v169;
  _QWORD *v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  __n128 v174;
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _QWORD v180[3];
  _QWORD *v181;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void **v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char **v190;
  uint64_t v191;

  v191 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v175 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v183 = (uint64_t)&v8->~__shared_weak_count_0;
  v184 = (uint64_t)&v8->~__shared_weak_count_0;
  v186 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v171 = v10;
  *v10 = v9;
  v172 = v10 + 1;
  v173 = v10 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v171);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v168 = v12;
  *v12 = v11;
  v169 = v12 + 1;
  v170 = v12 + 1;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v168);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v166 = v14 + 1;
  v167 = v14 + 1;
  v189 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 4, &v174);
  MIL::IRParameter::Make(&v174, (uint64_t *)&v153);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v153);
  v15 = v153;
  v153 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v17 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v166 = __p;
    operator delete(__p);
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (Scalar)
  {
    v183 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v175;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v183 = (uint64_t)&v21->~__shared_weak_count_0;
  v184 = (uint64_t)&v21->~__shared_weak_count_0;
  v186 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v171 = v23;
  *v23 = v22;
  v172 = v23 + 1;
  v173 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v171);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v168 = v25;
  *v25 = v24;
  v169 = v25 + 1;
  v170 = v25 + 1;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v168);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v166 = v27 + 1;
  v167 = v27 + 1;
  v189 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 4, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v153);
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v19, "ref_tensors", (uint64_t *)&v153);
  v29 = v153;
  v153 = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v31 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (__p)
  {
    v166 = __p;
    operator delete(__p);
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (Scalar)
  {
    v183 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 64))(*((_QWORD *)v28 + 5), 1);
  v33 = v175;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v163);
  MIL::IRParameter::Make(&v163, (uint64_t *)&v186);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v33, "begins", (uint64_t *)&v186);
  v35 = v186;
  v186 = 0;
  if (v35)
    (*((void (**)(void **))*v35 + 1))(v35);
  v36 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v37 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 64))(*((_QWORD *)v34 + 5), 1);
  v39 = v175;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v162);
  MIL::IRParameter::Make(&v162, (uint64_t *)&v186);
  v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v39, "ends", (uint64_t *)&v186);
  v41 = v186;
  v186 = 0;
  if (v41)
    (*((void (**)(void **))*v41 + 1))(v41);
  v42 = (std::__shared_weak_count *)v162.n128_u64[1];
  if (v162.n128_u64[1])
  {
    v43 = (unint64_t *)(v162.n128_u64[1] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 32))(*((_QWORD *)v40 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 64))(*((_QWORD *)v40 + 5), 1);
  v45 = v175;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v186);
  v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v45, "end_masks", (uint64_t *)&v186);
  v47 = v186;
  v186 = 0;
  if (v47)
    (*((void (**)(void **))*v47 + 1))(v47);
  v48 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v49 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v46 + 5) + 32))(*((_QWORD *)v46 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v46 + 5) + 48))(*((_QWORD *)v46 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v46 + 5) + 64))(*((_QWORD *)v46 + 5), 1);
  v160 = 0;
  v51 = operator new();
  *(_QWORD *)v51 = 0;
  *(_QWORD *)(v51 + 8) = 0;
  *(_QWORD *)(v51 + 16) = 0;
  v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, (void **)v51);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v160, 1uLL);
  v52 = v160;
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v171 = v54;
  *v54 = v53;
  v172 = v54 + 1;
  v173 = v54 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v171);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v168 = v56;
  *v56 = v55;
  v169 = v56 + 1;
  v170 = v56 + 1;
  v183 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v168);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v166 = v58 + 1;
  v167 = v58 + 1;
  v184 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v153 = v60;
  *v60 = v59;
  v154 = v60 + 1;
  v155 = v60 + 1;
  v185 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v153);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v156);
  MIL::IRParameter::Make(&v156, &v157);
  v61 = v157;
  v158 = v157;
  if (v157)
  {
    v62 = (_QWORD *)operator new();
    v63 = v157;
    *v62 = &unk_1EA99F888;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  v159 = v62;
  v157 = 0;
  v64 = v52[2];
  v65 = v52[1];
  if (v65 >= v64)
  {
    v67 = (v65 - *v52) >> 4;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v69 = v64 - *v52;
    if (v69 >> 3 > v68)
      v68 = v69 >> 3;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
      v70 = 0xFFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    v190 = v52 + 2;
    v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v52 + 2), v70);
    v73 = (uint64_t *)&v71[16 * v67];
    *v73 = v61;
    v73[1] = (uint64_t)v62;
    v158 = 0;
    v159 = 0;
    v75 = *v52;
    v74 = v52[1];
    if (v74 == *v52)
    {
      v78 = (void **)v52[1];
      v76 = &v71[16 * v67];
    }
    else
    {
      v76 = &v71[16 * v67];
      do
      {
        v77 = *((_OWORD *)v74 - 1);
        v74 -= 16;
        *((_OWORD *)v76 - 1) = v77;
        v76 -= 16;
        *(_QWORD *)v74 = 0;
        *((_QWORD *)v74 + 1) = 0;
      }
      while (v74 != v75);
      v78 = (void **)*v52;
      v74 = v52[1];
    }
    v66 = (char *)(v73 + 2);
    *v52 = v76;
    v186 = v78;
    v187 = (uint64_t)v78;
    v52[1] = (char *)(v73 + 2);
    v188 = (uint64_t)v74;
    v79 = v52[2];
    v52[2] = &v71[16 * v72];
    v189 = (uint64_t)v79;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v65 = v61;
    *((_QWORD *)v65 + 1) = v62;
    v66 = v65 + 16;
    v158 = 0;
    v159 = 0;
  }
  v52[1] = v66;
  v80 = v157;
  v157 = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = (std::__shared_weak_count *)v156.n128_u64[1];
  if (v156.n128_u64[1])
  {
    v82 = (unint64_t *)(v156.n128_u64[1] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (__p)
  {
    v166 = __p;
    operator delete(__p);
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v84 = (uint64_t)v175;
  *(_QWORD *)&v150 = v175;
  if (v175)
  {
    v85 = (_QWORD *)operator new();
    *v85 = &unk_1EA99F8E8;
    v85[1] = 0;
    v85[2] = 0;
    v85[3] = v84;
  }
  else
  {
    v85 = 0;
  }
  *((_QWORD *)&v150 + 1) = v85;
  v175 = 0;
  *(_QWORD *)&v149 = v160;
  if (v160)
  {
    v86 = (_QWORD *)operator new();
    v87 = v160;
    *v86 = &unk_1EA99F948;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v87;
  }
  else
  {
    v86 = 0;
  }
  *((_QWORD *)&v149 + 1) = v86;
  v160 = 0;
  v180[0] = &unk_1EA99FAC8;
  v180[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateReshapeLike;
  v181 = v180;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v88 = v179;
  if (v179 == v178)
  {
    v89 = 4;
    v88 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_95;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_95:
  v90 = v181;
  if (v181 == v180)
  {
    v91 = 4;
    v90 = v180;
    goto LABEL_99;
  }
  if (v181)
  {
    v91 = 5;
LABEL_99:
    (*(void (**)(void))(*v90 + 8 * v91))();
  }
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v98 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceReshapeLike;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v98 + 200))(v98, v176);
  v99 = v177;
  if (v177 == v176)
  {
    v100 = 4;
    v99 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_117;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_117:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v101 = v186;
  std::string::basic_string[abi:ne180100]<0>(v145, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v145, 0, (uint64_t *)&Scalar);
  v147 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v148 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v101 + 3))(v101, &v147, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v104 = v148;
  if (v148)
  {
    p_shared_owners = (unint64_t *)&v148->__shared_owners_;
    do
      v106 = __ldaxr(p_shared_owners);
    while (__stlxr(v106 - 1, p_shared_owners));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v146 < 0)
    operator delete(v145[0]);
  v108 = v186;
  std::string::basic_string[abi:ne180100]<0>(v139, "ref_tensors");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v139, 0, (uint64_t *)&Scalar);
  v141 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v142 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v137, "R");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v108 + 3))(v108, &v141, v137);
  if (v138 < 0)
    operator delete(v137[0]);
  v111 = v142;
  if (v142)
  {
    v112 = (unint64_t *)&v142->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v140 < 0)
    operator delete(v139[0]);
  v115 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v136 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v133, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v115 + 3))(v115, &v135, v133);
  if (v134 < 0)
    operator delete(v133[0]);
  v118 = v136;
  if (v136)
  {
    v119 = (unint64_t *)&v136->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  v122 = *a3;
  v131 = v186;
  if (v186)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v186;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  }
  else
  {
    v123 = 0;
  }
  v132 = v123;
  v186 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v122 + 56))(v122, &v131);
  v125 = v132;
  if (v132)
  {
    v126 = (unint64_t *)&v132->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v186;
  v186 = 0;
  if (v128)
    (*((void (**)(void **))*v128 + 1))(v128);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  result = (uint64_t)v175;
  if (v175)
  {
    v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v175);
    return MEMORY[0x1E0C023A0](v130, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E088B6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48)
{
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;

  v51 = *(_QWORD *)(v49 - 112);
  *(_QWORD *)(v49 - 112) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *v48;
  *v48 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v49 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::BaseActivation::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char **v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD *v60;
  unsigned __int8 *v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  uint64_t i;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t result;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  __n128 v134;
  __int128 v135;
  __int128 v136;
  void *v137[2];
  uint64_t v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  char **v143;
  __n128 v144;
  uint64_t v145;
  void *v146;
  void *v147;
  char *v148;
  _QWORD v149[3];
  uint64_t v150[3];
  uint64_t v151[3];
  void *v152[3];
  void *__p;
  void *v154;
  _QWORD *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  _BYTE v160[24];
  _BYTE *v161;
  std::__shared_weak_count_vtbl *v162;
  uint64_t v163;
  void (__cdecl **v164)(std::__shared_weak_count *__hidden);
  uint64_t v165[3];

  v165[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v145 = v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v146 = v10;
  *v10 = v9;
  v147 = v10 + 1;
  v148 = (char *)(v10 + 1);
  v162 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v146);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v154 = v12 + 1;
  v155 = v12 + 1;
  v163 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v162, 2, &v144);
  MIL::IRParameter::Make(&v144, &v141);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v141);
  v13 = v141;
  v141 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v15 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v154 = __p;
    operator delete(__p);
  }
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  v143 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v146 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v143, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v146, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v143, 1uLL);
  v18 = v143;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  __p = v20;
  *v20 = v19;
  v154 = v20 + 1;
  v155 = v20 + 1;
  v165[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v162 = v22;
  v22->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  v163 = (uint64_t)&v22->~__shared_weak_count_0;
  v164 = &v22->~__shared_weak_count_0;
  v165[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  MIL::IRParameter::MakeTypeSet((uint64_t)v165, 2, &v139);
  MIL::IRParameter::Make(&v139, &v140);
  v23 = v140;
  v141 = v140;
  if (v140)
  {
    v24 = (_QWORD *)operator new();
    v25 = v140;
    *v24 = &unk_1EA99F888;
    v24[1] = 0;
    v24[2] = 0;
    v24[3] = v25;
  }
  else
  {
    v24 = 0;
  }
  v142 = v24;
  v140 = 0;
  v26 = v18[2];
  v27 = v18[1];
  if (v27 >= v26)
  {
    v29 = (v27 - *v18) >> 4;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v31 = v26 - *v18;
    if (v31 >> 3 > v30)
      v30 = v31 >> 3;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
      v32 = 0xFFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    v149[1] = v18 + 2;
    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v32);
    v35 = (uint64_t *)&v33[16 * v29];
    *v35 = v23;
    v35[1] = (uint64_t)v24;
    v141 = 0;
    v142 = 0;
    v37 = *v18;
    v36 = v18[1];
    if (v36 == *v18)
    {
      v40 = v18[1];
      v38 = &v33[16 * v29];
    }
    else
    {
      v38 = &v33[16 * v29];
      do
      {
        v39 = *((_OWORD *)v36 - 1);
        v36 -= 16;
        *((_OWORD *)v38 - 1) = v39;
        v38 -= 16;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
      }
      while (v36 != v37);
      v40 = *v18;
      v36 = v18[1];
    }
    v28 = (char *)(v35 + 2);
    *v18 = v38;
    v146 = v40;
    v147 = v40;
    v18[1] = (char *)(v35 + 2);
    v148 = v36;
    v41 = v18[2];
    v18[2] = &v33[16 * v34];
    v149[0] = v41;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v146);
  }
  else
  {
    *(_QWORD *)v27 = v23;
    *((_QWORD *)v27 + 1) = v24;
    v28 = v27 + 16;
    v141 = 0;
    v142 = 0;
  }
  v18[1] = v28;
  v42 = v140;
  v140 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v44 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v162)
  {
    v163 = (uint64_t)v162;
    operator delete(v162);
  }
  if (__p)
  {
    v154 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v137 = *(_OWORD *)a2;
  v138 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v46 = v145;
  *(_QWORD *)&v136 = v145;
  if (v145)
  {
    v47 = (_QWORD *)operator new();
    *v47 = &unk_1EA99F8E8;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v46;
  }
  else
  {
    v47 = 0;
  }
  *((_QWORD *)&v136 + 1) = v47;
  v145 = 0;
  *(_QWORD *)&v135 = v143;
  if (v143)
  {
    v48 = (_QWORD *)operator new();
    v49 = v143;
    *v48 = &unk_1EA99F948;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v49;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v135 + 1) = v48;
  v143 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v160, a3);
  v159 = 0;
  MIL::IROperator::Make((__int128 *)v137, &v136, &v135, (uint64_t)v160, (uint64_t)v158, a4);
  v50 = v159;
  if (v159 == v158)
  {
    v51 = 4;
    v50 = v158;
  }
  else
  {
    if (!v159)
      goto LABEL_51;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_51:
  v52 = v161;
  if (v161 == v160)
  {
    v53 = 4;
    v52 = v160;
    goto LABEL_55;
  }
  if (v161)
  {
    v53 = 5;
LABEL_55:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
  if (*((_QWORD *)&v135 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (SHIBYTE(v138) < 0)
    operator delete(v137[0]);
  v162 = 0;
  v60 = (_OWORD *)operator new();
  *v60 = 0u;
  v60[1] = 0u;
  *((_DWORD *)v60 + 8) = 1065353216;
  v162 = (std::__shared_weak_count_vtbl *)v60;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v134);
  MIL::IRParameter::Make(&v134, (uint64_t *)&v146);
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v60, "minimum_compute_type", (uint64_t *)&v146);
  v62 = v146;
  v146 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v134.n128_u64[1];
  if (v134.n128_u64[1])
  {
    v64 = (unint64_t *)(v134.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 32))(*((_QWORD *)v61 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 48))(*((_QWORD *)v61 + 5), 1);
  v66 = *a4;
  v67 = v162;
  v132 = v162;
  if (v162)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v67;
  }
  else
  {
    v68 = 0;
  }
  v133 = v68;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v66 + 184))(v66, &v132);
  v69 = v133;
  if (v133)
  {
    p_shared_owners = (unint64_t *)&v133->__shared_owners_;
    do
      v71 = __ldaxr(p_shared_owners);
    while (__stlxr(v71 - 1, p_shared_owners));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v146, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v146, (uint64_t)v156);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v72 + 200))(v72, v156);
  v73 = v157;
  if (v157 == v156)
  {
    v74 = 4;
    v73 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_88;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_88:
  if (SHIBYTE(v148) < 0)
    operator delete(v146);
  MIL::Validation::TensorDTypeConstraints::Make(&v146);
  v75 = v146;
  std::string::basic_string[abi:ne180100]<0>(v128, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&__p);
  v130 = __p;
  if (__p)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = (std::__shared_weak_count_vtbl *)__p;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v131 = v76;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v75 + 24))(v75, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v78 = v131;
  if (v131)
  {
    v79 = (unint64_t *)&v131->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = __p;
  __p = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  if (v129 < 0)
    operator delete(v128[0]);
  v82 = v146;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v124 = __p;
  if (__p)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)__p;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v125 = v83;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v82 + 24))(v82, &v124, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v85 = v125;
  if (v125)
  {
    v86 = (unint64_t *)&v125->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = *a4;
  v120 = v146;
  if (v146)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = (std::__shared_weak_count_vtbl *)v146;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v121 = v90;
  v146 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v89 + 56))(v89, &v120);
  v92 = v121;
  if (v121)
  {
    v93 = (unint64_t *)&v121->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v146;
  v146 = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v141);
  v96 = v141;
  std::string::basic_string[abi:ne180100]<0>(v116, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v116, 1, v165);
  v118 = v165[0];
  if (v165[0])
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v165[0];
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = (std::__shared_weak_count_vtbl *)v98;
  }
  else
  {
    v97 = 0;
  }
  v119 = v97;
  v165[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v146, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v149, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v150, "int32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int8");
  std::string::basic_string[abi:ne180100]<0>(v152, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v146, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v96 + 24))(v96, &v118, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v152[i + 2]) < 0)
      operator delete(v152[i]);
  }
  v100 = v119;
  if (v119)
  {
    v101 = (unint64_t *)&v119->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v165[0];
  v165[0] = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  if (v117 < 0)
    operator delete(v116[0]);
  v104 = *a4;
  v114 = v141;
  if (v141)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v141;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v115 = v105;
  v141 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v104 + 56))(v104, &v114);
  v107 = v115;
  if (v115)
  {
    v108 = (unint64_t *)&v115->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v141;
  v141 = 0;
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  if (v162)
  {
    v111 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v162);
    MEMORY[0x1E0C023A0](v111, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v143, 0);
  result = v145;
  if (v145)
  {
    v113 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v145);
    return MEMORY[0x1E0C023A0](v113, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E088C878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 128), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::BaseActivationWithAlpha::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _OWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  void *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  void *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  uint64_t i;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t result;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void *v129[2];
  char v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  void *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  void *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  void *v141[2];
  char v142;
  void *v143;
  std::__shared_weak_count *v144;
  void *v145[2];
  char v146;
  void *v147[2];
  char v148;
  void *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  __n128 v153;
  __int128 v154;
  __int128 v155;
  void *v156[2];
  uint64_t v157;
  __n128 v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  char **v162;
  __n128 v163;
  __n128 v164;
  _QWORD *v165;
  void *Scalar;
  uint64_t v167;
  char *v168;
  _QWORD v169[3];
  uint64_t v170[3];
  uint64_t v171[3];
  void *v172[3];
  void *__p;
  void *v174;
  _QWORD *v175;
  _BYTE v176[24];
  _BYTE *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  std::__shared_weak_count_vtbl *v182;
  uint64_t v183;
  void (__cdecl **v184)(std::__shared_weak_count *__hidden);
  uint64_t v185[3];

  v185[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v165 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(8uLL);
  Scalar = v10;
  *(_QWORD *)v10 = v9;
  v167 = (uint64_t)(v10 + 8);
  v168 = v10 + 8;
  v182 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v175 = v12 + 1;
  v174 = v12 + 1;
  v183 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v182, 2, &v164);
  MIL::IRParameter::Make(&v164, &v160);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v160);
  v13 = v160;
  v160 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v15 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v174 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v167 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v165;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v167 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v163);
  MIL::IRParameter::Make(&v163, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v17, "alpha", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v21 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v162 = 0;
  v23 = operator new();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, (void **)v23);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v162, 1uLL);
  v24 = v162;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v175 = v26 + 1;
  v174 = v26 + 1;
  v185[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v182 = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v183 = (uint64_t)&v28->~__shared_weak_count_0;
  v184 = &v28->~__shared_weak_count_0;
  v185[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v182);
  MIL::IRParameter::MakeTypeSet((uint64_t)v185, 2, &v158);
  MIL::IRParameter::Make(&v158, &v159);
  v29 = v159;
  v160 = v159;
  if (v159)
  {
    v30 = (_QWORD *)operator new();
    v31 = v159;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v161 = v30;
  v159 = 0;
  v32 = v24[2];
  v33 = v24[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v24) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v24;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v169[1] = v24 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v24 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v160 = 0;
    v161 = 0;
    v43 = *v24;
    v42 = v24[1];
    if (v42 == *v24)
    {
      v46 = v24[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = *v24;
      v42 = v24[1];
    }
    v34 = (char *)(v41 + 2);
    *v24 = v44;
    Scalar = v46;
    v167 = (uint64_t)v46;
    v24[1] = (char *)(v41 + 2);
    v168 = v42;
    v47 = v24[2];
    v24[2] = &v39[16 * v40];
    v169[0] = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v160 = 0;
    v161 = 0;
  }
  v24[1] = v34;
  v48 = v159;
  v159 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v50 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v182)
  {
    v183 = (uint64_t)v182;
    operator delete(v182);
  }
  if (__p)
  {
    v174 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v156 = *(_OWORD *)a2;
  v157 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = (uint64_t)v165;
  *(_QWORD *)&v155 = v165;
  if (v165)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v155 + 1) = v53;
  v165 = 0;
  *(_QWORD *)&v154 = v162;
  if (v162)
  {
    v54 = (_QWORD *)operator new();
    v55 = v162;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v154 + 1) = v54;
  v162 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v180, a3);
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v156, &v155, &v154, (uint64_t)v180, (uint64_t)v178, a4);
  v56 = v179;
  if (v179 == v178)
  {
    v57 = 4;
    v56 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_58;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_58:
  v58 = v181;
  if (v181 == v180)
  {
    v59 = 4;
    v58 = v180;
    goto LABEL_62;
  }
  if (v181)
  {
    v59 = 5;
LABEL_62:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v157) < 0)
    operator delete(v156[0]);
  v182 = 0;
  v66 = (_OWORD *)operator new();
  *v66 = 0u;
  v66[1] = 0u;
  *((_DWORD *)v66 + 8) = 1065353216;
  v182 = (std::__shared_weak_count_vtbl *)v66;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&Scalar);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v66, "minimum_compute_type", (uint64_t *)&Scalar);
  v68 = Scalar;
  Scalar = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v70 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 48))(*((_QWORD *)v67 + 5), 1);
  v72 = *a4;
  v73 = v182;
  v151 = v182;
  if (v182)
  {
    v74 = (std::__shared_weak_count *)operator new();
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = v73;
  }
  else
  {
    v74 = 0;
  }
  v152 = v74;
  v182 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v72 + 184))(v72, &v151);
  v75 = v152;
  if (v152)
  {
    p_shared_owners = (unint64_t *)&v152->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v176);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v78 + 200))(v78, v176);
  v79 = v177;
  if (v177 == v176)
  {
    v80 = 4;
    v79 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_95;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_95:
  if (SHIBYTE(v168) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v81 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v147, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v147, 0, (uint64_t *)&__p);
  v149 = __p;
  if (__p)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = (std::__shared_weak_count_vtbl *)__p;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v150 = v82;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v145, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v81 + 24))(v81, &v149, v145);
  if (v146 < 0)
    operator delete(v145[0]);
  v84 = v150;
  if (v150)
  {
    v85 = (unint64_t *)&v150->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = __p;
  __p = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  if (v148 < 0)
    operator delete(v147[0]);
  v88 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v141, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v141, 0, (uint64_t *)&__p);
  v143 = __p;
  if (__p)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = (std::__shared_weak_count_vtbl *)__p;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v144 = v89;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "U");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v88 + 24))(v88, &v143, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v91 = v144;
  if (v144)
  {
    v92 = (unint64_t *)&v144->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = __p;
  __p = 0;
  if (v94)
    (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
  if (v142 < 0)
    operator delete(v141[0]);
  v95 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v137 = __p;
  if (__p)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = (std::__shared_weak_count_vtbl *)__p;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v97;
  }
  else
  {
    v96 = 0;
  }
  v138 = v96;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v135, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v95 + 24))(v95, &v137, v135);
  if (v136 < 0)
    operator delete(v135[0]);
  v98 = v138;
  if (v138)
  {
    v99 = (unint64_t *)&v138->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = __p;
  __p = 0;
  if (v101)
    (*(void (**)(void *))(*(_QWORD *)v101 + 8))(v101);
  v102 = *a4;
  v133 = Scalar;
  if (Scalar)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = (std::__shared_weak_count_vtbl *)Scalar;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v134 = v103;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v102 + 56))(v102, &v133);
  v105 = v134;
  if (v134)
  {
    v106 = (unint64_t *)&v134->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = Scalar;
  Scalar = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v160);
  v109 = v160;
  std::string::basic_string[abi:ne180100]<0>(v129, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v129, 1, v185);
  v131 = v185[0];
  if (v185[0])
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = v185[0];
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = (std::__shared_weak_count_vtbl *)v111;
  }
  else
  {
    v110 = 0;
  }
  v132 = v110;
  v185[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v169, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v170, "int32");
  std::string::basic_string[abi:ne180100]<0>(v171, "int8");
  std::string::basic_string[abi:ne180100]<0>(v172, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v109 + 24))(v109, &v131, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v172[i + 2]) < 0)
      operator delete(v172[i]);
  }
  v113 = v132;
  if (v132)
  {
    v114 = (unint64_t *)&v132->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v185[0];
  v185[0] = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  if (v130 < 0)
    operator delete(v129[0]);
  v117 = *a4;
  v127 = v160;
  if (v160)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v160;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = (std::__shared_weak_count_vtbl *)v119;
  }
  else
  {
    v118 = 0;
  }
  v128 = v118;
  v160 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v117 + 56))(v117, &v127);
  v120 = v128;
  if (v128)
  {
    v121 = (unint64_t *)&v128->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v160;
  v160 = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  if (v182)
  {
    v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v182);
    MEMORY[0x1E0C023A0](v124, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v165;
  if (v165)
  {
    v126 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    return MEMORY[0x1E0C023A0](v126, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E088DB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;

  if (a53)
    (*(void (**)(uint64_t))(*(_QWORD *)a53 + 8))(a53);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v61 - 128), 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::BaseActivationWithAlphaBeta::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  char *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char **v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _OWORD *v72;
  unsigned __int8 *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  void *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  uint64_t i;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t result;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  void *v148[2];
  char v149;
  void *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154[2];
  char v155;
  void *v156;
  std::__shared_weak_count *v157;
  void *v158[2];
  char v159;
  void *v160[2];
  char v161;
  void *v162;
  std::__shared_weak_count *v163;
  void *v164[2];
  char v165;
  void *v166[2];
  char v167;
  void *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  __n128 v172;
  __int128 v173;
  __int128 v174;
  void *v175[2];
  uint64_t v176;
  __n128 v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  char **v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  _QWORD *v185;
  void *Scalar;
  uint64_t v187;
  char *v188;
  _QWORD v189[3];
  uint64_t v190[3];
  uint64_t v191[3];
  void *v192[3];
  void *__p;
  void *v194;
  _QWORD *v195;
  _BYTE v196[24];
  _BYTE *v197;
  _BYTE v198[24];
  _BYTE *v199;
  _BYTE v200[24];
  _BYTE *v201;
  std::__shared_weak_count_vtbl *v202;
  uint64_t v203;
  void (__cdecl **v204)(std::__shared_weak_count *__hidden);
  uint64_t v205[3];

  v205[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v185 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(8uLL);
  Scalar = v10;
  *(_QWORD *)v10 = v9;
  v187 = (uint64_t)(v10 + 8);
  v188 = v10 + 8;
  v202 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v195 = v12 + 1;
  v194 = v12 + 1;
  v203 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v202, 2, &v184);
  MIL::IRParameter::Make(&v184, &v179);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v179);
  v13 = v179;
  v179 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v194 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v187 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v187 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v17, "alpha", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v21 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v185;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v187 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v182);
  MIL::IRParameter::Make(&v182, (uint64_t *)&__p);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v23, "beta", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v182.n128_u64[1];
  if (v182.n128_u64[1])
  {
    v27 = (unint64_t *)(v182.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v181 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v181, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v181, 1uLL);
  v30 = v181;
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  __p = v32;
  *v32 = v31;
  v195 = v32 + 1;
  v194 = v32 + 1;
  v205[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v202 = v34;
  v34->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v203 = (uint64_t)&v34->~__shared_weak_count_0;
  v204 = &v34->~__shared_weak_count_0;
  v205[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v202);
  MIL::IRParameter::MakeTypeSet((uint64_t)v205, 2, &v177);
  MIL::IRParameter::Make(&v177, &v178);
  v35 = v178;
  v179 = v178;
  if (v178)
  {
    v36 = (_QWORD *)operator new();
    v37 = v178;
    *v36 = &unk_1EA99F888;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v37;
  }
  else
  {
    v36 = 0;
  }
  v180 = v36;
  v178 = 0;
  v38 = v30[2];
  v39 = v30[1];
  if (v39 >= v38)
  {
    v41 = (v39 - *v30) >> 4;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v43 = v38 - *v30;
    if (v43 >> 3 > v42)
      v42 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    v189[1] = v30 + 2;
    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v30 + 2), v44);
    v47 = (uint64_t *)&v45[16 * v41];
    *v47 = v35;
    v47[1] = (uint64_t)v36;
    v179 = 0;
    v180 = 0;
    v49 = *v30;
    v48 = v30[1];
    if (v48 == *v30)
    {
      v52 = v30[1];
      v50 = &v45[16 * v41];
    }
    else
    {
      v50 = &v45[16 * v41];
      do
      {
        v51 = *((_OWORD *)v48 - 1);
        v48 -= 16;
        *((_OWORD *)v50 - 1) = v51;
        v50 -= 16;
        *(_QWORD *)v48 = 0;
        *((_QWORD *)v48 + 1) = 0;
      }
      while (v48 != v49);
      v52 = *v30;
      v48 = v30[1];
    }
    v40 = (char *)(v47 + 2);
    *v30 = v50;
    Scalar = v52;
    v187 = (uint64_t)v52;
    v30[1] = (char *)(v47 + 2);
    v188 = v48;
    v53 = v30[2];
    v30[2] = &v45[16 * v46];
    v189[0] = v53;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v39 = v35;
    *((_QWORD *)v39 + 1) = v36;
    v40 = v39 + 16;
    v179 = 0;
    v180 = 0;
  }
  v30[1] = v40;
  v54 = v178;
  v178 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v56 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v202)
  {
    v203 = (uint64_t)v202;
    operator delete(v202);
  }
  if (__p)
  {
    v194 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v175 = *(_OWORD *)a2;
  v176 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v58 = (uint64_t)v185;
  *(_QWORD *)&v174 = v185;
  if (v185)
  {
    v59 = (_QWORD *)operator new();
    *v59 = &unk_1EA99F8E8;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v58;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v174 + 1) = v59;
  v185 = 0;
  *(_QWORD *)&v173 = v181;
  if (v181)
  {
    v60 = (_QWORD *)operator new();
    v61 = v181;
    *v60 = &unk_1EA99F948;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v173 + 1) = v60;
  v181 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v200, a3);
  v199 = 0;
  MIL::IROperator::Make((__int128 *)v175, &v174, &v173, (uint64_t)v200, (uint64_t)v198, a4);
  v62 = v199;
  if (v199 == v198)
  {
    v63 = 4;
    v62 = v198;
  }
  else
  {
    if (!v199)
      goto LABEL_65;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_65:
  v64 = v201;
  if (v201 == v200)
  {
    v65 = 4;
    v64 = v200;
    goto LABEL_69;
  }
  if (v201)
  {
    v65 = 5;
LABEL_69:
    (*(void (**)(void))(*v64 + 8 * v65))();
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (*((_QWORD *)&v173 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
  if (*((_QWORD *)&v174 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (SHIBYTE(v176) < 0)
    operator delete(v175[0]);
  v202 = 0;
  v72 = (_OWORD *)operator new();
  *v72 = 0u;
  v72[1] = 0u;
  *((_DWORD *)v72 + 8) = 1065353216;
  v202 = (std::__shared_weak_count_vtbl *)v72;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v172);
  MIL::IRParameter::Make(&v172, (uint64_t *)&Scalar);
  v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v72, "minimum_compute_type", (uint64_t *)&Scalar);
  v74 = Scalar;
  Scalar = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v76 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 32))(*((_QWORD *)v73 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 48))(*((_QWORD *)v73 + 5), 1);
  v78 = *a4;
  v79 = v202;
  v170 = v202;
  if (v202)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v79;
  }
  else
  {
    v80 = 0;
  }
  v171 = v80;
  v202 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v78 + 184))(v78, &v170);
  v81 = v171;
  if (v171)
  {
    p_shared_owners = (unint64_t *)&v171->__shared_owners_;
    do
      v83 = __ldaxr(p_shared_owners);
    while (__stlxr(v83 - 1, p_shared_owners));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v196);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v84 + 200))(v84, v196);
  v85 = v197;
  if (v197 == v196)
  {
    v86 = 4;
    v85 = v196;
  }
  else
  {
    if (!v197)
      goto LABEL_102;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_102:
  if (SHIBYTE(v188) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v87 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v166, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v166, 0, (uint64_t *)&__p);
  v168 = __p;
  if (__p)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = (std::__shared_weak_count_vtbl *)__p;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v169 = v88;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v164, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v87 + 24))(v87, &v168, v164);
  if (v165 < 0)
    operator delete(v164[0]);
  v90 = v169;
  if (v169)
  {
    v91 = (unint64_t *)&v169->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = __p;
  __p = 0;
  if (v93)
    (*(void (**)(void *))(*(_QWORD *)v93 + 8))(v93);
  if (v167 < 0)
    operator delete(v166[0]);
  v94 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v160, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v160, 0, (uint64_t *)&__p);
  v162 = __p;
  if (__p)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)__p;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v163 = v95;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v158, "U");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v94 + 24))(v94, &v162, v158);
  if (v159 < 0)
    operator delete(v158[0]);
  v97 = v163;
  if (v163)
  {
    v98 = (unint64_t *)&v163->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = __p;
  __p = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  if (v161 < 0)
    operator delete(v160[0]);
  v101 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v154, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v154, 0, (uint64_t *)&__p);
  v156 = __p;
  if (__p)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)__p;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v157 = v102;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "U");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v101 + 24))(v101, &v156, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v104 = v157;
  if (v157)
  {
    v105 = (unint64_t *)&v157->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = __p;
  __p = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  if (v155 < 0)
    operator delete(v154[0]);
  v108 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v150 = __p;
  if (__p)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)__p;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v151 = v109;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v148, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v108 + 24))(v108, &v150, v148);
  if (v149 < 0)
    operator delete(v148[0]);
  v111 = v151;
  if (v151)
  {
    v112 = (unint64_t *)&v151->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = __p;
  __p = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  v115 = *a4;
  v146 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = (std::__shared_weak_count_vtbl *)Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v147 = v116;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v115 + 56))(v115, &v146);
  v118 = v147;
  if (v147)
  {
    v119 = (unint64_t *)&v147->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*(void (**)(void *))(*(_QWORD *)v121 + 8))(v121);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v179);
  v122 = v179;
  std::string::basic_string[abi:ne180100]<0>(v142, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v142, 1, v205);
  v144 = v205[0];
  if (v205[0])
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v205[0];
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  }
  else
  {
    v123 = 0;
  }
  v145 = v123;
  v205[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v189, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int32");
  std::string::basic_string[abi:ne180100]<0>(v191, "int8");
  std::string::basic_string[abi:ne180100]<0>(v192, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v122 + 24))(v122, &v144, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v192[i + 2]) < 0)
      operator delete(v192[i]);
  }
  v126 = v145;
  if (v145)
  {
    v127 = (unint64_t *)&v145->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v205[0];
  v205[0] = 0;
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  if (v143 < 0)
    operator delete(v142[0]);
  v130 = *a4;
  v140 = v179;
  if (v179)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = v179;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = (std::__shared_weak_count_vtbl *)v132;
  }
  else
  {
    v131 = 0;
  }
  v141 = v131;
  v179 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v130 + 56))(v130, &v140);
  v133 = v141;
  if (v141)
  {
    v134 = (unint64_t *)&v141->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v179;
  v179 = 0;
  if (v136)
    (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
  if (v202)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v202);
    MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v181, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v139, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E088F0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  uint64_t a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;

  if (a61)
    (*(void (**)(uint64_t))(*(_QWORD *)a61 + 8))(a61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 128), 0);
  v73 = *v70;
  *v70 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ClampedReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E088F6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::LinearActivation::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E088F7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ScaledTanh::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E088F8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::SigmoidHard::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E088F9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ELU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlpha::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E088FAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::LeakyReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlpha::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E088FBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ThresholdedReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlpha::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E088FCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::PReLU::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char **v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _OWORD *v76;
  unsigned __int8 *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void *v111;
  void *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  uint64_t i;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154[2];
  char v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  void *v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  void *v162[2];
  char v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  void *v166[2];
  char v167;
  void *v168[2];
  char v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  __n128 v174;
  __int128 v175;
  __int128 v176;
  void *v177[2];
  uint64_t v178;
  __n128 v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  char **v183;
  __n128 v184;
  __n128 v185;
  _QWORD *v186;
  void *__p;
  void *v188;
  char *v189;
  _QWORD v190[3];
  uint64_t v191[3];
  uint64_t v192[3];
  _QWORD v193[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[3];
  _QWORD *v202;
  std::__shared_weak_count_vtbl *v203;
  uint64_t v204;
  const void *(__cdecl **v205)(const std::__shared_weak_count *__hidden, const std::type_info *);
  uint64_t v206[3];

  v206[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v186 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(0x18uLL);
  v188 = v10 + 3;
  v189 = (char *)(v10 + 3);
  *v10 = v7;
  v10[1] = v8;
  v10[2] = v9;
  __p = v10;
  v203 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v196 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  Scalar = v14;
  v204 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v203, 2, &v185);
  MIL::IRParameter::Make(&v185, &v181);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v181);
  v15 = v181;
  v181 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v17 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v188 = __p;
    operator delete(__p);
  }
  v19 = v186;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = operator new(8uLL);
  __p = v21;
  *v21 = v20;
  v188 = v21 + 1;
  v189 = (char *)(v21 + 1);
  v203 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v196 = &v23->~__shared_weak_count_0;
  v204 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v203, 2, &v184);
  MIL::IRParameter::Make(&v184, &v181);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "alpha", &v181);
  v25 = v181;
  v181 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v27 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v188 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v183 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v183, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v183, 1uLL);
  v30 = v183;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v34->__get_deleter;
  v196 = &v34->__get_deleter;
  v34->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v31;
  v34->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  v34->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v33;
  Scalar = v34;
  v206[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v204 = (uint64_t)&v38->__get_deleter;
  v205 = &v38->__get_deleter;
  v38->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v35;
  v38->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  v38->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v37;
  v203 = v38;
  v206[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v203);
  MIL::IRParameter::MakeTypeSet((uint64_t)v206, 2, &v179);
  MIL::IRParameter::Make(&v179, &v180);
  v39 = v180;
  v181 = v180;
  if (v180)
  {
    v40 = (_QWORD *)operator new();
    v41 = v180;
    *v40 = &unk_1EA99F888;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  v182 = v40;
  v180 = 0;
  v42 = v30[2];
  v43 = v30[1];
  if (v43 >= v42)
  {
    v45 = (v43 - *v30) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v47 = v42 - *v30;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v190[1] = v30 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v30 + 2), v48);
    v51 = (uint64_t *)&v49[16 * v45];
    *v51 = v39;
    v51[1] = (uint64_t)v40;
    v181 = 0;
    v182 = 0;
    v53 = *v30;
    v52 = v30[1];
    if (v52 == *v30)
    {
      v56 = v30[1];
      v54 = &v49[16 * v45];
    }
    else
    {
      v54 = &v49[16 * v45];
      do
      {
        v55 = *((_OWORD *)v52 - 1);
        v52 -= 16;
        *((_OWORD *)v54 - 1) = v55;
        v54 -= 16;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
      }
      while (v52 != v53);
      v56 = *v30;
      v52 = v30[1];
    }
    v44 = (char *)(v51 + 2);
    *v30 = v54;
    __p = v56;
    v188 = v56;
    v30[1] = (char *)(v51 + 2);
    v189 = v52;
    v57 = v30[2];
    v30[2] = &v49[16 * v50];
    v190[0] = v57;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v40;
    v44 = v43 + 16;
    v181 = 0;
    v182 = 0;
  }
  v30[1] = v44;
  v58 = v180;
  v180 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v179.n128_u64[1];
  if (v179.n128_u64[1])
  {
    v60 = (unint64_t *)(v179.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v203)
  {
    v204 = (uint64_t)v203;
    operator delete(v203);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v177 = *(_OWORD *)a2;
  v178 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v62 = (uint64_t)v186;
  *(_QWORD *)&v176 = v186;
  if (v186)
  {
    v63 = (_QWORD *)operator new();
    *v63 = &unk_1EA99F8E8;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v176 + 1) = v63;
  v186 = 0;
  *(_QWORD *)&v175 = v183;
  if (v183)
  {
    v64 = (_QWORD *)operator new();
    v65 = v183;
    *v64 = &unk_1EA99F948;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v175 + 1) = v64;
  v183 = 0;
  v201[0] = &unk_1EA99FAC8;
  v201[1] = MIL::Operators::Common::ios17::CustomValidators::ValidatePReLU;
  v202 = v201;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v177, &v176, &v175, (uint64_t)v201, (uint64_t)v199, a3);
  v66 = v200;
  if (v200 == v199)
  {
    v67 = 4;
    v66 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_62;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_62:
  v68 = v202;
  if (v202 == v201)
  {
    v69 = 4;
    v68 = v201;
    goto LABEL_66;
  }
  if (v202)
  {
    v69 = 5;
LABEL_66:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v178) < 0)
    operator delete(v177[0]);
  v203 = 0;
  v76 = (_OWORD *)operator new();
  *v76 = 0u;
  v76[1] = 0u;
  *((_DWORD *)v76 + 8) = 1065353216;
  v203 = (std::__shared_weak_count_vtbl *)v76;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v174);
  MIL::IRParameter::Make(&v174, (uint64_t *)&__p);
  v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v76, "minimum_compute_type", (uint64_t *)&__p);
  v78 = __p;
  __p = 0;
  if (v78)
    (*(void (**)(void *))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v80 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 32))(*((_QWORD *)v77 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 48))(*((_QWORD *)v77 + 5), 1);
  v82 = *a3;
  v83 = v203;
  v172 = v203;
  if (v203)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v83;
  }
  else
  {
    v84 = 0;
  }
  v173 = v84;
  v203 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v82 + 184))(v82, &v172);
  v85 = v173;
  if (v173)
  {
    p_shared_owners = (unint64_t *)&v173->__shared_owners_;
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v88 + 200))(v88, v197);
  v89 = v198;
  if (v198 == v197)
  {
    v90 = 4;
    v89 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_99;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_99:
  if (SHIBYTE(v189) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v91 = __p;
  std::string::basic_string[abi:ne180100]<0>(v168, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v168, 0, (uint64_t *)&Scalar);
  v170 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v171 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v166, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v91 + 24))(v91, &v170, v166);
  if (v167 < 0)
    operator delete(v166[0]);
  v94 = v171;
  if (v171)
  {
    v95 = (unint64_t *)&v171->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v169 < 0)
    operator delete(v168[0]);
  v98 = __p;
  std::string::basic_string[abi:ne180100]<0>(v162, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v162, 0, (uint64_t *)&Scalar);
  v164 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v165 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v98 + 24))(v98, &v164, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v101 = v165;
  if (v165)
  {
    v102 = (unint64_t *)&v165->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v163 < 0)
    operator delete(v162[0]);
  v105 = *a3;
  v158 = __p;
  if (__p)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = (std::__shared_weak_count_vtbl *)__p;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v159 = v106;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v105 + 56))(v105, &v158);
  v108 = v159;
  if (v159)
  {
    v109 = (unint64_t *)&v159->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = __p;
  __p = 0;
  if (v111)
    (*(void (**)(void *))(*(_QWORD *)v111 + 8))(v111);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v112 = __p;
  std::string::basic_string[abi:ne180100]<0>(v154, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v154, 0, (uint64_t *)&Scalar);
  v156 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v157 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v112 + 24))(v112, &v156, 0, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v115 = v157;
  if (v157)
  {
    v116 = (unint64_t *)&v157->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(std::__shared_weak_count_vtbl *))v118->~__shared_weak_count + 1))(v118);
  if (v155 < 0)
    operator delete(v154[0]);
  v119 = *a3;
  v150 = __p;
  if (__p)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)__p;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v151 = v120;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v119 + 56))(v119, &v150);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = __p;
  __p = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v181);
  v126 = v181;
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v146, 1, v206);
  v148 = v206[0];
  if (v206[0])
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v206[0];
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  }
  else
  {
    v127 = 0;
  }
  v149 = v127;
  v206[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v190, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v191, "int32");
  std::string::basic_string[abi:ne180100]<0>(v192, "int8");
  std::string::basic_string[abi:ne180100]<0>(v193, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v126 + 24))(v126, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v193[i + 2]) < 0)
      operator delete((void *)v193[i]);
  }
  v130 = v149;
  if (v149)
  {
    v131 = (unint64_t *)&v149->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v206[0];
  v206[0] = 0;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  if (v147 < 0)
    operator delete(v146[0]);
  v134 = *a3;
  v144 = v181;
  if (v181)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = v181;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = (std::__shared_weak_count_vtbl *)v136;
  }
  else
  {
    v135 = 0;
  }
  v145 = v135;
  v181 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v134 + 56))(v134, &v144);
  v137 = v145;
  if (v145)
  {
    v138 = (unint64_t *)&v145->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v181;
  v181 = 0;
  if (v140)
    (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
  if (v203)
  {
    v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v203);
    MEMORY[0x1E0C023A0](v141, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v183, 0);
  result = (uint64_t)v186;
  if (v186)
  {
    v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v186);
    return MEMORY[0x1E0C023A0](v143, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0890E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v69;

  if (a59)
    (*(void (**)(uint64_t))(*(_QWORD *)a59 + 8))(a59);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v67 - 112), 0);
  v69 = *v66;
  *v66 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a66, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::SoftplusParametric::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  char *v66;
  char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char **v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _OWORD *v86;
  unsigned __int8 *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void *v128;
  void *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  void *v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count_vtbl *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  uint64_t i;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t result;
  uint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  void *v170[2];
  char v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  void *v174;
  std::__shared_weak_count *v175;
  void *v176[2];
  char v177;
  void *v178[2];
  char v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  void *v184[2];
  char v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  void *v188;
  std::__shared_weak_count *v189;
  void *v190[2];
  char v191;
  void *v192[2];
  char v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  void *v198[2];
  char v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  void *v202[2];
  char v203;
  void *v204[2];
  char v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  __n128 v210;
  __int128 v211;
  __int128 v212;
  void *v213[2];
  uint64_t v214;
  __n128 v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char **v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  _QWORD *v223;
  void *__p;
  void *v225;
  char *v226;
  _QWORD v227[3];
  uint64_t v228[3];
  uint64_t v229[3];
  _QWORD v230[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v233;
  _BYTE v234[24];
  _BYTE *v235;
  _BYTE v236[24];
  _BYTE *v237;
  _QWORD v238[3];
  _QWORD *v239;
  std::__shared_weak_count_vtbl *v240;
  uint64_t v241;
  const void *(__cdecl **v242)(const std::__shared_weak_count *__hidden, const std::type_info *);
  uint64_t v243[3];

  v243[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v223 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v226 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  v225 = v10 + 24;
  v240 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v233 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  Scalar = v14;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v240, 2, &v222);
  MIL::IRParameter::Make(&v222, &v217);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v217);
  v15 = v217;
  v217 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v222.n128_u64[1];
  if (v222.n128_u64[1])
  {
    v17 = (unint64_t *)(v222.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v225 = __p;
    operator delete(__p);
  }
  v19 = v223;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (char *)operator new(8uLL);
  __p = v21;
  *(_QWORD *)v21 = v20;
  v226 = v21 + 8;
  v225 = v21 + 8;
  v240 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v233 = &v23->~__shared_weak_count_0;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v240, 2, &v221);
  MIL::IRParameter::Make(&v221, &v217);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "alpha", &v217);
  v25 = v217;
  v217 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v221.n128_u64[1];
  if (v221.n128_u64[1])
  {
    v27 = (unint64_t *)(v221.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v225 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v223;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (char *)operator new(8uLL);
  __p = v31;
  *(_QWORD *)v31 = v30;
  v226 = v31 + 8;
  v225 = v31 + 8;
  v240 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v33;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v33->~__shared_weak_count_0;
  v233 = &v33->~__shared_weak_count_0;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v240, 2, &v220);
  MIL::IRParameter::Make(&v220, &v217);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v29, "beta", &v217);
  v35 = v217;
  v217 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v220.n128_u64[1];
  if (v220.n128_u64[1])
  {
    v37 = (unint64_t *)(v220.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v225 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v219 = 0;
  v39 = operator new();
  *(_QWORD *)v39 = 0;
  *(_QWORD *)(v39 + 8) = 0;
  *(_QWORD *)(v39 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, (void **)v39);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v219, 1uLL);
  v40 = v219;
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v44->__get_deleter;
  v233 = &v44->__get_deleter;
  v44->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
  v44->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v42;
  v44->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v43;
  Scalar = v44;
  v243[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v241 = (uint64_t)&v48->__get_deleter;
  v242 = &v48->__get_deleter;
  v48->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v45;
  v48->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v46;
  v48->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v47;
  v240 = v48;
  v243[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v240);
  MIL::IRParameter::MakeTypeSet((uint64_t)v243, 2, &v215);
  MIL::IRParameter::Make(&v215, &v216);
  v49 = v216;
  v217 = v216;
  if (v216)
  {
    v50 = (_QWORD *)operator new();
    v51 = v216;
    *v50 = &unk_1EA99F888;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  v218 = v50;
  v216 = 0;
  v52 = v40[2];
  v53 = v40[1];
  if (v53 >= v52)
  {
    v55 = (v53 - *v40) >> 4;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v57 = v52 - *v40;
    if (v57 >> 3 > v56)
      v56 = v57 >> 3;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
      v58 = 0xFFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    v227[1] = v40 + 2;
    v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v40 + 2), v58);
    v61 = (uint64_t *)&v59[16 * v55];
    *v61 = v49;
    v61[1] = (uint64_t)v50;
    v218 = 0;
    v217 = 0;
    v63 = *v40;
    v62 = v40[1];
    if (v62 == *v40)
    {
      v66 = v40[1];
      v64 = &v59[16 * v55];
    }
    else
    {
      v64 = &v59[16 * v55];
      do
      {
        v65 = *((_OWORD *)v62 - 1);
        v62 -= 16;
        *((_OWORD *)v64 - 1) = v65;
        v64 -= 16;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
      }
      while (v62 != v63);
      v66 = *v40;
      v62 = v40[1];
    }
    v54 = (char *)(v61 + 2);
    *v40 = v64;
    v225 = v66;
    v40[1] = (char *)(v61 + 2);
    v226 = v62;
    v67 = v40[2];
    v40[2] = &v59[16 * v60];
    v227[0] = v67;
    __p = v66;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v53 = v49;
    *((_QWORD *)v53 + 1) = v50;
    v54 = v53 + 16;
    v218 = 0;
    v217 = 0;
  }
  v40[1] = v54;
  v68 = v216;
  v216 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v215.n128_u64[1];
  if (v215.n128_u64[1])
  {
    v70 = (unint64_t *)(v215.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v240)
  {
    v241 = (uint64_t)v240;
    operator delete(v240);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v213 = *(_OWORD *)a2;
  v214 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v72 = (uint64_t)v223;
  *(_QWORD *)&v212 = v223;
  if (v223)
  {
    v73 = (_QWORD *)operator new();
    *v73 = &unk_1EA99F8E8;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = v72;
  }
  else
  {
    v73 = 0;
  }
  *((_QWORD *)&v212 + 1) = v73;
  v223 = 0;
  *(_QWORD *)&v211 = v219;
  if (v219)
  {
    v74 = (_QWORD *)operator new();
    v75 = v219;
    *v74 = &unk_1EA99F948;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  *((_QWORD *)&v211 + 1) = v74;
  v219 = 0;
  v238[0] = &unk_1EA99FAC8;
  v238[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateSoftplusParametric;
  v239 = v238;
  v237 = 0;
  MIL::IROperator::Make((__int128 *)v213, &v212, &v211, (uint64_t)v238, (uint64_t)v236, a3);
  v76 = v237;
  if (v237 == v236)
  {
    v77 = 4;
    v76 = v236;
  }
  else
  {
    if (!v237)
      goto LABEL_73;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_73:
  v78 = v239;
  if (v239 == v238)
  {
    v79 = 4;
    v78 = v238;
    goto LABEL_77;
  }
  if (v239)
  {
    v79 = 5;
LABEL_77:
    (*(void (**)(void))(*v78 + 8 * v79))();
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
  if (*((_QWORD *)&v211 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
  if (*((_QWORD *)&v212 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (SHIBYTE(v214) < 0)
    operator delete(v213[0]);
  v240 = 0;
  v86 = (_OWORD *)operator new();
  *v86 = 0u;
  v86[1] = 0u;
  *((_DWORD *)v86 + 8) = 1065353216;
  v240 = (std::__shared_weak_count_vtbl *)v86;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v210);
  MIL::IRParameter::Make(&v210, (uint64_t *)&__p);
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v86, "minimum_compute_type", (uint64_t *)&__p);
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v210.n128_u64[1];
  if (v210.n128_u64[1])
  {
    v90 = (unint64_t *)(v210.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 32))(*((_QWORD *)v87 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 48))(*((_QWORD *)v87 + 5), 1);
  v92 = *a3;
  v93 = v240;
  v208 = v240;
  if (v240)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v93;
  }
  else
  {
    v94 = 0;
  }
  v209 = v94;
  v240 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v92 + 184))(v92, &v208);
  v95 = v209;
  if (v209)
  {
    p_shared_owners = (unint64_t *)&v209->__shared_owners_;
    do
      v97 = __ldaxr(p_shared_owners);
    while (__stlxr(v97 - 1, p_shared_owners));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v234);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v98 + 200))(v98, v234);
  v99 = v235;
  if (v235 == v234)
  {
    v100 = 4;
    v99 = v234;
  }
  else
  {
    if (!v235)
      goto LABEL_110;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_110:
  if (SHIBYTE(v226) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v204, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v204, 0, (uint64_t *)&Scalar);
  v206 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v207 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v202, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v101 + 24))(v101, &v206, v202);
  if (v203 < 0)
    operator delete(v202[0]);
  v104 = v207;
  if (v207)
  {
    v105 = (unint64_t *)&v207->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v205 < 0)
    operator delete(v204[0]);
  v108 = __p;
  std::string::basic_string[abi:ne180100]<0>(v198, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v198, 0, (uint64_t *)&Scalar);
  v200 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v201 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v108 + 24))(v108, &v200, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v111 = v201;
  if (v201)
  {
    v112 = (unint64_t *)&v201->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v199 < 0)
    operator delete(v198[0]);
  v115 = __p;
  std::string::basic_string[abi:ne180100]<0>(v192, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v192, 0, (uint64_t *)&Scalar);
  v194 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v195 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v190, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v115 + 24))(v115, &v194, v190);
  if (v191 < 0)
    operator delete(v190[0]);
  v118 = v195;
  if (v195)
  {
    v119 = (unint64_t *)&v195->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  if (v193 < 0)
    operator delete(v192[0]);
  v122 = *a3;
  v188 = __p;
  if (__p)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = (std::__shared_weak_count_vtbl *)__p;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v189 = v123;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v122 + 56))(v122, &v188);
  v125 = v189;
  if (v189)
  {
    v126 = (unint64_t *)&v189->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = __p;
  __p = 0;
  if (v128)
    (*(void (**)(void *))(*(_QWORD *)v128 + 8))(v128);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v129 = __p;
  std::string::basic_string[abi:ne180100]<0>(v184, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v184, 0, (uint64_t *)&Scalar);
  v186 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v187 = v130;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v129 + 24))(v129, &v186, 0, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v132 = v187;
  if (v187)
  {
    v133 = (unint64_t *)&v187->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  if (v185 < 0)
    operator delete(v184[0]);
  v136 = __p;
  std::string::basic_string[abi:ne180100]<0>(v178, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v178, 0, (uint64_t *)&Scalar);
  v180 = Scalar;
  if (Scalar)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = Scalar;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v181 = v137;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v176, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v136 + 24))(v136, &v180, 0, v176);
  if (v177 < 0)
    operator delete(v176[0]);
  v139 = v181;
  if (v181)
  {
    v140 = (unint64_t *)&v181->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = Scalar;
  Scalar = 0;
  if (v142)
    (*((void (**)(std::__shared_weak_count_vtbl *))v142->~__shared_weak_count + 1))(v142);
  if (v179 < 0)
    operator delete(v178[0]);
  v143 = *a3;
  v174 = __p;
  if (__p)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = (std::__shared_weak_count_vtbl *)__p;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v175 = v144;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v143 + 56))(v143, &v174);
  v146 = v175;
  if (v175)
  {
    v147 = (unint64_t *)&v175->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = __p;
  __p = 0;
  if (v149)
    (*(void (**)(void *))(*(_QWORD *)v149 + 8))(v149);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v217);
  v150 = v217;
  std::string::basic_string[abi:ne180100]<0>(v170, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v170, 1, v243);
  v172 = v243[0];
  if (v243[0])
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = v243[0];
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = (std::__shared_weak_count_vtbl *)v152;
  }
  else
  {
    v151 = 0;
  }
  v173 = v151;
  v243[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v227, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v228, "int32");
  std::string::basic_string[abi:ne180100]<0>(v229, "int8");
  std::string::basic_string[abi:ne180100]<0>(v230, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v150 + 24))(v150, &v172, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v230[i + 2]) < 0)
      operator delete((void *)v230[i]);
  }
  v154 = v173;
  if (v173)
  {
    v155 = (unint64_t *)&v173->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = v243[0];
  v243[0] = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  if (v171 < 0)
    operator delete(v170[0]);
  v158 = *a3;
  v168 = v217;
  if (v217)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = v217;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = (std::__shared_weak_count_vtbl *)v160;
  }
  else
  {
    v159 = 0;
  }
  v169 = v159;
  v217 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v158 + 56))(v158, &v168);
  v161 = v169;
  if (v169)
  {
    v162 = (unint64_t *)&v169->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v217;
  v217 = 0;
  if (v164)
    (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
  if (v240)
  {
    v165 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v240);
    MEMORY[0x1E0C023A0](v165, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, 0);
  result = (uint64_t)v223;
  if (v223)
  {
    v167 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v223);
    return MEMORY[0x1E0C023A0](v167, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0892720(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x210];
  STACK[0x210] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x220], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x258], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Conv::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  unsigned __int8 *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  void *v106;
  _QWORD *v107;
  void *v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  _QWORD *v120;
  char *v121;
  __int128 v122;
  _QWORD *v123;
  uint64_t v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  void *v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  _OWORD *v143;
  unsigned __int8 *v144;
  void *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  unint64_t *p_shared_owners;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  void *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  void *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  void *v178;
  void *v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  void *v192;
  void *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void *v206;
  void *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  void *v213;
  void *v214;
  std::__shared_weak_count *v215;
  std::__shared_weak_count_vtbl *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  void *v220;
  void *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  void *v227;
  void *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  void *v234;
  void *v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  void *v241;
  void *v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  void *v255;
  void *v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count_vtbl *v258;
  uint64_t i;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count_vtbl *v263;
  void *v264;
  std::__shared_weak_count *v265;
  std::__shared_weak_count_vtbl *v266;
  uint64_t j;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count_vtbl *v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count_vtbl *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t result;
  uint64_t v281;
  void *v282;
  std::__shared_weak_count *v283;
  void *v284[2];
  char v285;
  std::__shared_weak_count_vtbl *v286;
  std::__shared_weak_count *v287;
  void *v288[2];
  char v289;
  std::__shared_weak_count_vtbl *v290;
  std::__shared_weak_count *v291;
  void *v292;
  std::__shared_weak_count *v293;
  void *v294[2];
  char v295;
  void *v296[2];
  char v297;
  void *v298;
  std::__shared_weak_count *v299;
  void *v300[2];
  char v301;
  void *v302[2];
  char v303;
  void *v304;
  std::__shared_weak_count *v305;
  void *v306[2];
  char v307;
  void *v308[2];
  char v309;
  void *v310;
  std::__shared_weak_count *v311;
  void *v312[2];
  char v313;
  void *v314[2];
  char v315;
  void *v316;
  std::__shared_weak_count *v317;
  void *v318[2];
  char v319;
  void *v320[2];
  char v321;
  void *v322;
  std::__shared_weak_count *v323;
  void *v324[2];
  char v325;
  void *v326[2];
  char v327;
  void *v328;
  std::__shared_weak_count *v329;
  void *v330;
  std::__shared_weak_count *v331;
  void *v332[2];
  char v333;
  void *v334;
  std::__shared_weak_count *v335;
  void *v336;
  std::__shared_weak_count *v337;
  void *v338[2];
  char v339;
  void *v340;
  std::__shared_weak_count *v341;
  void *v342[2];
  char v343;
  void *v344[2];
  char v345;
  void *v346;
  std::__shared_weak_count *v347;
  void *v348[2];
  char v349;
  void *v350[2];
  char v351;
  void *v352;
  std::__shared_weak_count *v353;
  void *v354[2];
  char v355;
  void *v356[2];
  char v357;
  void *v358;
  std::__shared_weak_count *v359;
  std::__shared_weak_count_vtbl *v360;
  std::__shared_weak_count *v361;
  __n128 v362;
  __int128 v363;
  __int128 v364;
  void *v365[2];
  uint64_t v366;
  __n128 v367;
  __n128 v368;
  __n128 v369;
  __n128 v370;
  __n128 v371;
  __n128 v372;
  __n128 v373;
  void *v374;
  void *v375;
  _QWORD *v376;
  void *v377;
  void *v378;
  _QWORD *v379;
  void *v380;
  void *v381;
  _QWORD *v382;
  __n128 v383;
  uint64_t v384;
  __n128 v385;
  _QWORD *v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD v393[3];
  _QWORD v394[3];
  void *v395[3];
  void *__p;
  void *v397;
  _QWORD *v398;
  _QWORD v399[3];
  _QWORD *v400;
  _BYTE v401[24];
  _BYTE *v402;
  _QWORD v403[3];
  _QWORD *v404;
  std::__shared_weak_count_vtbl *v405;
  uint64_t p_on_zero_shared_weak;
  void (__cdecl **v407)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v408;
  uint64_t p_get_deleter;
  _QWORD *v410;
  uint64_t v411;

  v411 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v386 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(0x18uLL);
  v389 = (uint64_t)(v10 + 3);
  *v10 = v7;
  v10[1] = v8;
  v10[2] = v9;
  v387 = v10;
  v388 = (uint64_t)(v10 + 3);
  v408 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v387);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v398 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v397 = v14 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v408, 2, &v385);
  MIL::IRParameter::Make(&v385, (uint64_t *)&v380);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v380);
  v15 = v380;
  v380 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v385.n128_u64[1];
  if (v385.n128_u64[1])
  {
    v17 = (unint64_t *)(v385.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v397 = __p;
    operator delete(__p);
  }
  if (v387)
  {
    v388 = (uint64_t)v387;
    operator delete(v387);
  }
  v19 = v386;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(0x18uLL);
  v398 = v23 + 3;
  *v23 = v20;
  v23[1] = v21;
  v23[2] = v22;
  __p = v23;
  v397 = v23 + 3;
  v387 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v27->__get_deleter;
  v410 = &v27->__get_deleter;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  v408 = v27;
  v388 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v408);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x20uLL);
  v382 = v32 + 4;
  *v32 = v28;
  v32[1] = v29;
  v32[2] = v30;
  v32[3] = v31;
  v380 = v32;
  v381 = v32 + 4;
  v389 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v380);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v37->__on_zero_shared_weak;
  v407 = &v37->__on_zero_shared_weak;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v37->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v37->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v35;
  v37->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v36;
  v405 = v37;
  v390 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v405);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x28uLL);
  v379 = v43 + 5;
  *v43 = v38;
  v43[1] = v39;
  v43[2] = v40;
  v43[3] = v41;
  v43[4] = v42;
  v377 = v43;
  v378 = v43 + 5;
  v391 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v377);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = operator new(0x28uLL);
  v376 = v49 + 5;
  *v49 = v44;
  v49[1] = v45;
  v49[2] = v46;
  v49[3] = v47;
  v49[4] = v48;
  v374 = v49;
  v375 = v49 + 5;
  v392 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v374);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v387, 6, &v383);
  MIL::IRParameter::Make(&v383, &v384);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v19, "weight", &v384);
  v50 = v384;
  v384 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v383.n128_u64[1];
  if (v383.n128_u64[1])
  {
    v52 = (unint64_t *)(v383.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v374)
  {
    v375 = v374;
    operator delete(v374);
  }
  if (v377)
  {
    v378 = v377;
    operator delete(v377);
  }
  if (v405)
  {
    p_on_zero_shared_weak = (uint64_t)v405;
    operator delete(v405);
  }
  if (v380)
  {
    v381 = v380;
    operator delete(v380);
  }
  if (v408)
  {
    p_get_deleter = (uint64_t)v408;
    operator delete(v408);
  }
  if (__p)
  {
    v397 = __p;
    operator delete(__p);
  }
  v54 = v386;
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v387 = v56;
  *v56 = v55;
  v389 = (uint64_t)(v56 + 1);
  v388 = (uint64_t)(v56 + 1);
  v408 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v387);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v398 = v58 + 1;
  v397 = v58 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v408, 2, &v373);
  MIL::IRParameter::Make(&v373, (uint64_t *)&v380);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v54, "bias", (uint64_t *)&v380);
  v60 = v380;
  v380 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v373.n128_u64[1];
  if (v373.n128_u64[1])
  {
    v62 = (unint64_t *)(v373.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v397 = __p;
    operator delete(__p);
  }
  if (v387)
  {
    v388 = (uint64_t)v387;
    operator delete(v387);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v386;
  v65 = MIL::IRUnknownDimension::Make(a1, 0);
  v66 = operator new(8uLL);
  v387 = v66;
  *v66 = v65;
  v389 = (uint64_t)(v66 + 1);
  v388 = (uint64_t)(v66 + 1);
  v408 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v387);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v408, 1, &v372);
  MIL::IRParameter::Make(&v372, (uint64_t *)&__p);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v64, "strides", (uint64_t *)&__p);
  v68 = __p;
  __p = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v372.n128_u64[1];
  if (v372.n128_u64[1])
  {
    v70 = (unint64_t *)(v372.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v387)
  {
    v388 = (uint64_t)v387;
    operator delete(v387);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  v72 = v386;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v371);
  MIL::IRParameter::Make(&v371, (uint64_t *)&v387);
  v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v72, "pad_type", (uint64_t *)&v387);
  v74 = v387;
  v387 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v371.n128_u64[1];
  if (v371.n128_u64[1])
  {
    v76 = (unint64_t *)(v371.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 32))(*((_QWORD *)v73 + 5), 1);
  v78 = v386;
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = operator new(8uLL);
  v387 = v80;
  *v80 = v79;
  v389 = (uint64_t)(v80 + 1);
  v388 = (uint64_t)(v80 + 1);
  v408 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v387);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v408, 1, &v370);
  MIL::IRParameter::Make(&v370, (uint64_t *)&__p);
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v78, "pad", (uint64_t *)&__p);
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = (std::__shared_weak_count *)v370.n128_u64[1];
  if (v370.n128_u64[1])
  {
    v84 = (unint64_t *)(v370.n128_u64[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v387)
  {
    v388 = (uint64_t)v387;
    operator delete(v387);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 32))(*((_QWORD *)v81 + 5), 1);
  v86 = v386;
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = operator new(8uLL);
  v387 = v88;
  *v88 = v87;
  v389 = (uint64_t)(v88 + 1);
  v388 = (uint64_t)(v88 + 1);
  v408 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v387);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v408, 1, &v369);
  MIL::IRParameter::Make(&v369, (uint64_t *)&__p);
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v86, "dilations", (uint64_t *)&__p);
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v369.n128_u64[1];
  if (v369.n128_u64[1])
  {
    v92 = (unint64_t *)(v369.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v387)
  {
    v388 = (uint64_t)v387;
    operator delete(v387);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 32))(*((_QWORD *)v89 + 5), 1);
  v94 = v386;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v368);
  MIL::IRParameter::Make(&v368, (uint64_t *)&v387);
  v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v94, "groups", (uint64_t *)&v387);
  v96 = v387;
  v387 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  v97 = (std::__shared_weak_count *)v368.n128_u64[1];
  if (v368.n128_u64[1])
  {
    v98 = (unint64_t *)(v368.n128_u64[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 32))(*((_QWORD *)v95 + 5), 1);
  v377 = 0;
  v100 = operator new();
  *(_QWORD *)v100 = 0;
  *(_QWORD *)(v100 + 8) = 0;
  *(_QWORD *)(v100 + 16) = 0;
  v387 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v377, (void **)v100);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v387, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v377, 1uLL);
  v101 = v377;
  v102 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v103 = operator new(8uLL);
  __p = v103;
  *v103 = v102;
  v398 = v103 + 1;
  v397 = v103 + 1;
  v405 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v104 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v105 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v408 = v105;
  v105->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v104;
  p_get_deleter = (uint64_t)&v105->~__shared_weak_count_0;
  v410 = &v105->~__shared_weak_count_0;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v408);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v405, 2, &v367);
  MIL::IRParameter::Make(&v367, (uint64_t *)&v374);
  v106 = v374;
  v380 = v374;
  if (v374)
  {
    v107 = (_QWORD *)operator new();
    v108 = v374;
    *v107 = &unk_1EA99F888;
    v107[1] = 0;
    v107[2] = 0;
    v107[3] = v108;
  }
  else
  {
    v107 = 0;
  }
  v381 = v107;
  v374 = 0;
  v109 = v101[2];
  v110 = (_QWORD *)v101[1];
  if ((unint64_t)v110 >= v109)
  {
    v112 = ((uint64_t)v110 - *v101) >> 4;
    v113 = v112 + 1;
    if ((unint64_t)(v112 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v114 = v109 - *v101;
    if (v114 >> 3 > v113)
      v113 = v114 >> 3;
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0)
      v115 = 0xFFFFFFFFFFFFFFFLL;
    else
      v115 = v113;
    v391 = (uint64_t)(v101 + 2);
    v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v101 + 2), v115);
    v118 = &v116[16 * v112];
    *(_QWORD *)v118 = v106;
    *((_QWORD *)v118 + 1) = v107;
    v381 = 0;
    v380 = 0;
    v120 = (_QWORD *)*v101;
    v119 = (_QWORD *)v101[1];
    if (v119 == (_QWORD *)*v101)
    {
      v123 = (_QWORD *)v101[1];
      v121 = &v116[16 * v112];
    }
    else
    {
      v121 = &v116[16 * v112];
      do
      {
        v122 = *((_OWORD *)v119 - 1);
        v119 -= 2;
        *((_OWORD *)v121 - 1) = v122;
        v121 -= 16;
        *v119 = 0;
        v119[1] = 0;
      }
      while (v119 != v120);
      v123 = (_QWORD *)*v101;
      v119 = (_QWORD *)v101[1];
    }
    v111 = v118 + 16;
    *v101 = v121;
    v388 = (uint64_t)v123;
    v101[1] = v118 + 16;
    v389 = (uint64_t)v119;
    v124 = v101[2];
    v101[2] = &v116[16 * v117];
    v390 = v124;
    v387 = v123;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v387);
  }
  else
  {
    *v110 = v106;
    v110[1] = v107;
    v111 = v110 + 2;
    v381 = 0;
    v380 = 0;
  }
  v101[1] = v111;
  v125 = v374;
  v374 = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  v126 = (std::__shared_weak_count *)v367.n128_u64[1];
  if (v367.n128_u64[1])
  {
    v127 = (unint64_t *)(v367.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (v408)
  {
    p_get_deleter = (uint64_t)v408;
    operator delete(v408);
  }
  if (__p)
  {
    v397 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v365 = *(_OWORD *)a2;
  v366 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v129 = (uint64_t)v386;
  *(_QWORD *)&v364 = v386;
  if (v386)
  {
    v130 = (_QWORD *)operator new();
    *v130 = &unk_1EA99F8E8;
    v130[1] = 0;
    v130[2] = 0;
    v130[3] = v129;
  }
  else
  {
    v130 = 0;
  }
  *((_QWORD *)&v364 + 1) = v130;
  v386 = 0;
  *(_QWORD *)&v363 = v377;
  if (v377)
  {
    v131 = (_QWORD *)operator new();
    v132 = v377;
    *v131 = &unk_1EA99F948;
    v131[1] = 0;
    v131[2] = 0;
    v131[3] = v132;
  }
  else
  {
    v131 = 0;
  }
  *((_QWORD *)&v363 + 1) = v131;
  v377 = 0;
  v403[0] = &unk_1EA99FAC8;
  v403[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateConv;
  v404 = v403;
  v402 = 0;
  MIL::IROperator::Make((__int128 *)v365, &v364, &v363, (uint64_t)v403, (uint64_t)v401, a3);
  v133 = v402;
  if (v402 == v401)
  {
    v134 = 4;
    v133 = v401;
  }
  else
  {
    if (!v402)
      goto LABEL_122;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_122:
  v135 = v404;
  if (v404 == v403)
  {
    v136 = 4;
    v135 = v403;
    goto LABEL_126;
  }
  if (v404)
  {
    v136 = 5;
LABEL_126:
    (*(void (**)(void))(*v135 + 8 * v136))();
  }
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v363 + 1);
  if (*((_QWORD *)&v363 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v363 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (std::__shared_weak_count *)*((_QWORD *)&v364 + 1);
  if (*((_QWORD *)&v364 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v364 + 1) + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  if (SHIBYTE(v366) < 0)
    operator delete(v365[0]);
  v408 = 0;
  v143 = (_OWORD *)operator new();
  *v143 = 0u;
  v143[1] = 0u;
  *((_DWORD *)v143 + 8) = 1065353216;
  v408 = (std::__shared_weak_count_vtbl *)v143;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v362);
  MIL::IRParameter::Make(&v362, (uint64_t *)&v387);
  v144 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v143, "minimum_compute_type", (uint64_t *)&v387);
  v145 = v387;
  v387 = 0;
  if (v145)
    (*(void (**)(void *))(*(_QWORD *)v145 + 8))(v145);
  v146 = (std::__shared_weak_count *)v362.n128_u64[1];
  if (v362.n128_u64[1])
  {
    v147 = (unint64_t *)(v362.n128_u64[1] + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v144 + 5) + 32))(*((_QWORD *)v144 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v144 + 5) + 48))(*((_QWORD *)v144 + 5), 1);
  v149 = *a3;
  v150 = v408;
  v360 = v408;
  if (v408)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v150;
  }
  else
  {
    v151 = 0;
  }
  v361 = v151;
  v408 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v149 + 184))(v149, &v360);
  v152 = v361;
  if (v361)
  {
    p_shared_owners = (unint64_t *)&v361->__shared_owners_;
    do
      v154 = __ldaxr(p_shared_owners);
    while (__stlxr(v154 - 1, p_shared_owners));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = *a3;
  v399[0] = &off_1EA99FBD8;
  v399[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceConv;
  v400 = v399;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v155 + 200))(v155, v399);
  v156 = v400;
  if (v400 == v399)
  {
    v157 = 4;
    v156 = v399;
  }
  else
  {
    if (!v400)
      goto LABEL_159;
    v157 = 5;
  }
  (*(void (**)(void))(*v156 + 8 * v157))();
LABEL_159:
  MIL::Validation::TensorDTypeConstraints::Make(&v387);
  v158 = v387;
  std::string::basic_string[abi:ne180100]<0>(v356, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v356, 0, (uint64_t *)&__p);
  v358 = __p;
  if (__p)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = (std::__shared_weak_count_vtbl *)__p;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v359 = v159;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v354, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v158 + 24))(v158, &v358, v354);
  if (v355 < 0)
    operator delete(v354[0]);
  v161 = v359;
  if (v359)
  {
    v162 = (unint64_t *)&v359->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = __p;
  __p = 0;
  if (v164)
    (*(void (**)(void *))(*(_QWORD *)v164 + 8))(v164);
  if (v357 < 0)
    operator delete(v356[0]);
  v165 = v387;
  std::string::basic_string[abi:ne180100]<0>(v350, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v350, 0, (uint64_t *)&__p);
  v352 = __p;
  if (__p)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = (std::__shared_weak_count_vtbl *)__p;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v353 = v166;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v348, "U");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v165 + 24))(v165, &v352, v348);
  if (v349 < 0)
    operator delete(v348[0]);
  v168 = v353;
  if (v353)
  {
    v169 = (unint64_t *)&v353->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = __p;
  __p = 0;
  if (v171)
    (*(void (**)(void *))(*(_QWORD *)v171 + 8))(v171);
  if (v351 < 0)
    operator delete(v350[0]);
  v172 = v387;
  std::string::basic_string[abi:ne180100]<0>(v344, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v344, 1, (uint64_t *)&__p);
  v346 = __p;
  if (__p)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = (std::__shared_weak_count_vtbl *)__p;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v347 = v173;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v342, "U");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v172 + 24))(v172, &v346, v342);
  if (v343 < 0)
    operator delete(v342[0]);
  v175 = v347;
  if (v347)
  {
    v176 = (unint64_t *)&v347->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = __p;
  __p = 0;
  if (v178)
    (*(void (**)(void *))(*(_QWORD *)v178 + 8))(v178);
  if (v345 < 0)
    operator delete(v344[0]);
  v179 = v387;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v340 = __p;
  if (__p)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = (std::__shared_weak_count_vtbl *)__p;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v341 = v180;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v338, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v179 + 24))(v179, &v340, v338);
  if (v339 < 0)
    operator delete(v338[0]);
  v182 = v341;
  if (v341)
  {
    v183 = (unint64_t *)&v341->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = __p;
  __p = 0;
  if (v185)
    (*(void (**)(void *))(*(_QWORD *)v185 + 8))(v185);
  v186 = *a3;
  v336 = v387;
  if (v387)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = (std::__shared_weak_count_vtbl *)v387;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v337 = v187;
  v387 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v186 + 56))(v186, &v336);
  v189 = v337;
  if (v337)
  {
    v190 = (unint64_t *)&v337->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = v387;
  v387 = 0;
  if (v192)
    (*(void (**)(void *))(*(_QWORD *)v192 + 8))(v192);
  MIL::Validation::TensorRankValueConstraints::Make(&v387);
  v193 = v387;
  std::string::basic_string[abi:ne180100]<0>(v332, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v332, 0, (uint64_t *)&__p);
  v334 = __p;
  if (__p)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = (std::__shared_weak_count_vtbl *)__p;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v195;
  }
  else
  {
    v194 = 0;
  }
  v335 = v194;
  __p = 0;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v193 + 32))(v193, &v334, 3, 5);
  v196 = v335;
  if (v335)
  {
    v197 = (unint64_t *)&v335->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = __p;
  __p = 0;
  if (v199)
    (*(void (**)(void *))(*(_QWORD *)v199 + 8))(v199);
  if (v333 < 0)
    operator delete(v332[0]);
  v200 = *a3;
  v330 = v387;
  if (v387)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = (std::__shared_weak_count_vtbl *)v387;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = v202;
  }
  else
  {
    v201 = 0;
  }
  v331 = v201;
  v387 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v200 + 56))(v200, &v330);
  v203 = v331;
  if (v331)
  {
    v204 = (unint64_t *)&v331->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v387;
  v387 = 0;
  if (v206)
    (*(void (**)(void *))(*(_QWORD *)v206 + 8))(v206);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v387);
  v207 = v387;
  std::string::basic_string[abi:ne180100]<0>(v326, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v326, 0, (uint64_t *)&__p);
  v328 = __p;
  if (__p)
  {
    v208 = (std::__shared_weak_count *)operator new();
    v209 = (std::__shared_weak_count_vtbl *)__p;
    v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v208->__shared_owners_ = 0;
    v208->__shared_weak_owners_ = 0;
    v208[1].__vftable = v209;
  }
  else
  {
    v208 = 0;
  }
  v329 = v208;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v324, "C_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v207 + 24))(v207, &v328, 1, v324);
  if (v325 < 0)
    operator delete(v324[0]);
  v210 = v329;
  if (v329)
  {
    v211 = (unint64_t *)&v329->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = __p;
  __p = 0;
  if (v213)
    (*(void (**)(void *))(*(_QWORD *)v213 + 8))(v213);
  if (v327 < 0)
    operator delete(v326[0]);
  v214 = v387;
  std::string::basic_string[abi:ne180100]<0>(v320, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v320, 0, (uint64_t *)&__p);
  v322 = __p;
  if (__p)
  {
    v215 = (std::__shared_weak_count *)operator new();
    v216 = (std::__shared_weak_count_vtbl *)__p;
    v215->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v215->__shared_owners_ = 0;
    v215->__shared_weak_owners_ = 0;
    v215[1].__vftable = v216;
  }
  else
  {
    v215 = 0;
  }
  v323 = v215;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v318, "S");
  (*(void (**)(void *, void **, uint64_t, uint64_t, void **))(*(_QWORD *)v214 + 32))(v214, &v322, 2, -1, v318);
  if (v319 < 0)
    operator delete(v318[0]);
  v217 = v323;
  if (v323)
  {
    v218 = (unint64_t *)&v323->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = __p;
  __p = 0;
  if (v220)
    (*(void (**)(void *))(*(_QWORD *)v220 + 8))(v220);
  if (v321 < 0)
    operator delete(v320[0]);
  v221 = v387;
  std::string::basic_string[abi:ne180100]<0>(v314, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v314, 1, (uint64_t *)&__p);
  v316 = __p;
  if (__p)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = (std::__shared_weak_count_vtbl *)__p;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v317 = v222;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v312, "C_out");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v221 + 24))(v221, &v316, 0, v312);
  if (v313 < 0)
    operator delete(v312[0]);
  v224 = v317;
  if (v317)
  {
    v225 = (unint64_t *)&v317->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = __p;
  __p = 0;
  if (v227)
    (*(void (**)(void *))(*(_QWORD *)v227 + 8))(v227);
  if (v315 < 0)
    operator delete(v314[0]);
  v228 = v387;
  std::string::basic_string[abi:ne180100]<0>(v308, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v308, 0, (uint64_t *)&__p);
  v310 = __p;
  if (__p)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = (std::__shared_weak_count_vtbl *)__p;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v311 = v229;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v306, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v228 + 24))(v228, &v310, 0, v306);
  if (v307 < 0)
    operator delete(v306[0]);
  v231 = v311;
  if (v311)
  {
    v232 = (unint64_t *)&v311->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = __p;
  __p = 0;
  if (v234)
    (*(void (**)(void *))(*(_QWORD *)v234 + 8))(v234);
  if (v309 < 0)
    operator delete(v308[0]);
  v235 = v387;
  std::string::basic_string[abi:ne180100]<0>(v302, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v302, 0, (uint64_t *)&__p);
  v304 = __p;
  if (__p)
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = (std::__shared_weak_count_vtbl *)__p;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = v237;
  }
  else
  {
    v236 = 0;
  }
  v305 = v236;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v300, "P");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v235 + 24))(v235, &v304, 0, v300);
  if (v301 < 0)
    operator delete(v300[0]);
  v238 = v305;
  if (v305)
  {
    v239 = (unint64_t *)&v305->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = __p;
  __p = 0;
  if (v241)
    (*(void (**)(void *))(*(_QWORD *)v241 + 8))(v241);
  if (v303 < 0)
    operator delete(v302[0]);
  v242 = v387;
  std::string::basic_string[abi:ne180100]<0>(v296, "dilations");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v296, 0, (uint64_t *)&__p);
  v298 = __p;
  if (__p)
  {
    v243 = (std::__shared_weak_count *)operator new();
    v244 = (std::__shared_weak_count_vtbl *)__p;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v243->__shared_owners_ = 0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = v244;
  }
  else
  {
    v243 = 0;
  }
  v299 = v243;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v294, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v242 + 24))(v242, &v298, 0, v294);
  if (v295 < 0)
    operator delete(v294[0]);
  v245 = v299;
  if (v299)
  {
    v246 = (unint64_t *)&v299->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = __p;
  __p = 0;
  if (v248)
    (*(void (**)(void *))(*(_QWORD *)v248 + 8))(v248);
  if (v297 < 0)
    operator delete(v296[0]);
  v249 = *a3;
  v292 = v387;
  if (v387)
  {
    v250 = (std::__shared_weak_count *)operator new();
    v251 = (std::__shared_weak_count_vtbl *)v387;
    v250->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v250->__shared_owners_ = 0;
    v250->__shared_weak_owners_ = 0;
    v250[1].__vftable = v251;
  }
  else
  {
    v250 = 0;
  }
  v293 = v250;
  v387 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v249 + 56))(v249, &v292);
  v252 = v293;
  if (v293)
  {
    v253 = (unint64_t *)&v293->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = v387;
  v387 = 0;
  if (v255)
    (*(void (**)(void *))(*(_QWORD *)v255 + 8))(v255);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v380);
  v256 = v380;
  std::string::basic_string[abi:ne180100]<0>(v288, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v288, 0, (uint64_t *)&v405);
  v290 = v405;
  if (v405)
  {
    v257 = (std::__shared_weak_count *)operator new();
    v258 = v405;
    v257->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v257->__shared_owners_ = 0;
    v257->__shared_weak_owners_ = 0;
    v257[1].__vftable = v258;
  }
  else
  {
    v257 = 0;
  }
  v291 = v257;
  v405 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v387, "custom");
  std::string::basic_string[abi:ne180100]<0>(&v390, "same");
  std::string::basic_string[abi:ne180100]<0>(v393, "same_lower");
  std::string::basic_string[abi:ne180100]<0>(v394, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v387, 4);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v256 + 24))(v256, &v290, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v394[i + 2]) < 0)
      operator delete((void *)v394[i]);
  }
  v260 = v291;
  if (v291)
  {
    v261 = (unint64_t *)&v291->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v263 = v405;
  v405 = 0;
  if (v263)
    (*((void (**)(std::__shared_weak_count_vtbl *))v263->~__shared_weak_count + 1))(v263);
  if (v289 < 0)
    operator delete(v288[0]);
  v264 = v380;
  std::string::basic_string[abi:ne180100]<0>(v284, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v284, 1, (uint64_t *)&v405);
  v286 = v405;
  if (v405)
  {
    v265 = (std::__shared_weak_count *)operator new();
    v266 = v405;
    v265->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v265->__shared_owners_ = 0;
    v265->__shared_weak_owners_ = 0;
    v265[1].__vftable = v266;
  }
  else
  {
    v265 = 0;
  }
  v287 = v265;
  v405 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v387, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v390, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v393, "int32");
  std::string::basic_string[abi:ne180100]<0>(v394, "int8");
  std::string::basic_string[abi:ne180100]<0>(v395, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v387, 5);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v264 + 24))(v264, &v286, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v395[j + 2]) < 0)
      operator delete(v395[j]);
  }
  v268 = v287;
  if (v287)
  {
    v269 = (unint64_t *)&v287->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v271 = v405;
  v405 = 0;
  if (v271)
    (*((void (**)(std::__shared_weak_count_vtbl *))v271->~__shared_weak_count + 1))(v271);
  if (v285 < 0)
    operator delete(v284[0]);
  v272 = *a3;
  v282 = v380;
  if (v380)
  {
    v273 = (std::__shared_weak_count *)operator new();
    v274 = (std::__shared_weak_count_vtbl *)v380;
    v273->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v273->__shared_owners_ = 0;
    v273->__shared_weak_owners_ = 0;
    v273[1].__vftable = v274;
  }
  else
  {
    v273 = 0;
  }
  v283 = v273;
  v380 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v272 + 56))(v272, &v282);
  v275 = v283;
  if (v283)
  {
    v276 = (unint64_t *)&v283->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v278 = v380;
  v380 = 0;
  if (v278)
    (*(void (**)(void *))(*(_QWORD *)v278 + 8))(v278);
  if (v408)
  {
    v279 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v408);
    MEMORY[0x1E0C023A0](v279, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v377, 0);
  result = (uint64_t)v386;
  if (v386)
  {
    v281 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v386);
    return MEMORY[0x1E0C023A0](v281, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0894F7C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x420];
  STACK[0x420] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x408], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x460], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::ConvTranspose::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  unsigned __int8 *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  unsigned __int8 *v103;
  void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  void *v114;
  _QWORD *v115;
  void *v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  _QWORD *v127;
  _QWORD *v128;
  char *v129;
  __int128 v130;
  _QWORD *v131;
  uint64_t v132;
  void *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  void *v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  _OWORD *v151;
  unsigned __int8 *v152;
  void *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count *v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  void *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  void *v172;
  void *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  void *v179;
  void *v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  void *v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  void *v200;
  void *v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  void *v214;
  void *v215;
  std::__shared_weak_count *v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  void *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  void *v228;
  void *v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  void *v235;
  void *v236;
  std::__shared_weak_count *v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  void *v242;
  void *v243;
  std::__shared_weak_count *v244;
  std::__shared_weak_count_vtbl *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  void *v249;
  void *v250;
  std::__shared_weak_count *v251;
  std::__shared_weak_count_vtbl *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  void *v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  void *v263;
  void *v264;
  std::__shared_weak_count *v265;
  std::__shared_weak_count_vtbl *v266;
  uint64_t i;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count_vtbl *v271;
  void *v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count_vtbl *v274;
  uint64_t j;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count_vtbl *v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  std::__shared_weak_count_vtbl *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t result;
  uint64_t v289;
  void *v290;
  std::__shared_weak_count *v291;
  void *v292[2];
  char v293;
  std::__shared_weak_count_vtbl *v294;
  std::__shared_weak_count *v295;
  void *v296[2];
  char v297;
  std::__shared_weak_count_vtbl *v298;
  std::__shared_weak_count *v299;
  void *v300;
  std::__shared_weak_count *v301;
  void *v302[2];
  char v303;
  void *v304[2];
  char v305;
  void *v306;
  std::__shared_weak_count *v307;
  void *v308[2];
  char v309;
  void *v310[2];
  char v311;
  void *v312;
  std::__shared_weak_count *v313;
  void *v314[2];
  char v315;
  void *v316[2];
  char v317;
  void *v318;
  std::__shared_weak_count *v319;
  void *v320[2];
  char v321;
  void *v322[2];
  char v323;
  void *v324;
  std::__shared_weak_count *v325;
  void *v326[2];
  char v327;
  void *v328[2];
  char v329;
  void *v330;
  std::__shared_weak_count *v331;
  void *v332[2];
  char v333;
  void *v334[2];
  char v335;
  void *v336;
  std::__shared_weak_count *v337;
  void *v338;
  std::__shared_weak_count *v339;
  void *v340[2];
  char v341;
  void *v342;
  std::__shared_weak_count *v343;
  void *v344;
  std::__shared_weak_count *v345;
  void *v346[2];
  char v347;
  void *v348;
  std::__shared_weak_count *v349;
  void *v350[2];
  char v351;
  void *v352[2];
  char v353;
  void *v354;
  std::__shared_weak_count *v355;
  void *v356[2];
  char v357;
  void *v358[2];
  char v359;
  void *v360;
  std::__shared_weak_count *v361;
  void *v362[2];
  char v363;
  void *v364[2];
  char v365;
  void *v366;
  std::__shared_weak_count *v367;
  std::__shared_weak_count_vtbl *v368;
  std::__shared_weak_count *v369;
  __n128 v370;
  __int128 v371;
  __int128 v372;
  void *v373[2];
  uint64_t v374;
  __n128 v375;
  __n128 v376;
  __n128 v377;
  __n128 v378;
  __n128 v379;
  __n128 v380;
  __n128 v381;
  __n128 v382;
  void *v383;
  void *v384;
  _QWORD *v385;
  void *v386;
  void *v387;
  _QWORD *v388;
  void *v389;
  void *v390;
  _QWORD *v391;
  __n128 v392;
  uint64_t v393;
  __n128 v394;
  _QWORD *v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD v402[3];
  _QWORD v403[3];
  void *v404[3];
  void *__p;
  void *v406;
  _QWORD *v407;
  _QWORD v408[3];
  _QWORD *v409;
  _BYTE v410[24];
  _BYTE *v411;
  _QWORD v412[3];
  _QWORD *v413;
  std::__shared_weak_count_vtbl *v414;
  uint64_t p_on_zero_shared_weak;
  void (__cdecl **v416)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v417;
  uint64_t p_get_deleter;
  _QWORD *v419;
  uint64_t v420;

  v420 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v395 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(0x18uLL);
  v398 = (uint64_t)(v10 + 3);
  *v10 = v7;
  v10[1] = v8;
  v10[2] = v9;
  v396 = v10;
  v397 = (uint64_t)(v10 + 3);
  v417 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v396);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v407 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v406 = v14 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v417, 2, &v394);
  MIL::IRParameter::Make(&v394, (uint64_t *)&v389);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v389);
  v15 = v389;
  v389 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v394.n128_u64[1];
  if (v394.n128_u64[1])
  {
    v17 = (unint64_t *)(v394.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v406 = __p;
    operator delete(__p);
  }
  if (v396)
  {
    v397 = (uint64_t)v396;
    operator delete(v396);
  }
  v19 = v395;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(0x18uLL);
  v407 = v23 + 3;
  *v23 = v20;
  v23[1] = v21;
  v23[2] = v22;
  __p = v23;
  v406 = v23 + 3;
  v396 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v27->__get_deleter;
  v419 = &v27->__get_deleter;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  v417 = v27;
  v397 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v417);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x20uLL);
  v391 = v32 + 4;
  *v32 = v28;
  v32[1] = v29;
  v32[2] = v30;
  v32[3] = v31;
  v389 = v32;
  v390 = v32 + 4;
  v398 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v389);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v37->__on_zero_shared_weak;
  v416 = &v37->__on_zero_shared_weak;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v37->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v37->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v35;
  v37->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v36;
  v414 = v37;
  v399 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v414);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x28uLL);
  v388 = v43 + 5;
  *v43 = v38;
  v43[1] = v39;
  v43[2] = v40;
  v43[3] = v41;
  v43[4] = v42;
  v386 = v43;
  v387 = v43 + 5;
  v400 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v386);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = operator new(0x28uLL);
  v385 = v49 + 5;
  *v49 = v44;
  v49[1] = v45;
  v49[2] = v46;
  v49[3] = v47;
  v49[4] = v48;
  v383 = v49;
  v384 = v49 + 5;
  v401 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v383);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v396, 6, &v392);
  MIL::IRParameter::Make(&v392, &v393);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v19, "weight", &v393);
  v50 = v393;
  v393 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v392.n128_u64[1];
  if (v392.n128_u64[1])
  {
    v52 = (unint64_t *)(v392.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v383)
  {
    v384 = v383;
    operator delete(v383);
  }
  if (v386)
  {
    v387 = v386;
    operator delete(v386);
  }
  if (v414)
  {
    p_on_zero_shared_weak = (uint64_t)v414;
    operator delete(v414);
  }
  if (v389)
  {
    v390 = v389;
    operator delete(v389);
  }
  if (v417)
  {
    p_get_deleter = (uint64_t)v417;
    operator delete(v417);
  }
  if (__p)
  {
    v406 = __p;
    operator delete(__p);
  }
  v54 = v395;
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v396 = v56;
  *v56 = v55;
  v398 = (uint64_t)(v56 + 1);
  v397 = (uint64_t)(v56 + 1);
  v417 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v396);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v407 = v58 + 1;
  v406 = v58 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v417, 2, &v382);
  MIL::IRParameter::Make(&v382, (uint64_t *)&v389);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v54, "bias", (uint64_t *)&v389);
  v60 = v389;
  v389 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v382.n128_u64[1];
  if (v382.n128_u64[1])
  {
    v62 = (unint64_t *)(v382.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v406 = __p;
    operator delete(__p);
  }
  if (v396)
  {
    v397 = (uint64_t)v396;
    operator delete(v396);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v395;
  v65 = MIL::IRUnknownDimension::Make(a1, 0);
  v66 = operator new(8uLL);
  v396 = v66;
  *v66 = v65;
  v398 = (uint64_t)(v66 + 1);
  v397 = (uint64_t)(v66 + 1);
  v417 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v396);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v417, 1, &v381);
  MIL::IRParameter::Make(&v381, (uint64_t *)&__p);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v64, "strides", (uint64_t *)&__p);
  v68 = __p;
  __p = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v381.n128_u64[1];
  if (v381.n128_u64[1])
  {
    v70 = (unint64_t *)(v381.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v396)
  {
    v397 = (uint64_t)v396;
    operator delete(v396);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  v72 = v395;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v380);
  MIL::IRParameter::Make(&v380, (uint64_t *)&v396);
  v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v72, "pad_type", (uint64_t *)&v396);
  v74 = v396;
  v396 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v380.n128_u64[1];
  if (v380.n128_u64[1])
  {
    v76 = (unint64_t *)(v380.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 32))(*((_QWORD *)v73 + 5), 1);
  v78 = v395;
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = operator new(8uLL);
  v396 = v80;
  *v80 = v79;
  v398 = (uint64_t)(v80 + 1);
  v397 = (uint64_t)(v80 + 1);
  v417 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v396);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v417, 1, &v379);
  MIL::IRParameter::Make(&v379, (uint64_t *)&__p);
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v78, "pad", (uint64_t *)&__p);
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = (std::__shared_weak_count *)v379.n128_u64[1];
  if (v379.n128_u64[1])
  {
    v84 = (unint64_t *)(v379.n128_u64[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v396)
  {
    v397 = (uint64_t)v396;
    operator delete(v396);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 32))(*((_QWORD *)v81 + 5), 1);
  v86 = v395;
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = operator new(8uLL);
  v396 = v88;
  *v88 = v87;
  v398 = (uint64_t)(v88 + 1);
  v397 = (uint64_t)(v88 + 1);
  v417 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v396);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v417, 1, &v378);
  MIL::IRParameter::Make(&v378, (uint64_t *)&__p);
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v86, "dilations", (uint64_t *)&__p);
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v378.n128_u64[1];
  if (v378.n128_u64[1])
  {
    v92 = (unint64_t *)(v378.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v396)
  {
    v397 = (uint64_t)v396;
    operator delete(v396);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 32))(*((_QWORD *)v89 + 5), 1);
  v94 = v395;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v377);
  MIL::IRParameter::Make(&v377, (uint64_t *)&v396);
  v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v94, "groups", (uint64_t *)&v396);
  v96 = v396;
  v396 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  v97 = (std::__shared_weak_count *)v377.n128_u64[1];
  if (v377.n128_u64[1])
  {
    v98 = (unint64_t *)(v377.n128_u64[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 32))(*((_QWORD *)v95 + 5), 1);
  v100 = v395;
  v101 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v102 = operator new(8uLL);
  v396 = v102;
  *v102 = v101;
  v398 = (uint64_t)(v102 + 1);
  v397 = (uint64_t)(v102 + 1);
  v417 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v396);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v417, 1, &v376);
  MIL::IRParameter::Make(&v376, (uint64_t *)&__p);
  v103 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v100, "output_shape", (uint64_t *)&__p);
  v104 = __p;
  __p = 0;
  if (v104)
    (*(void (**)(void *))(*(_QWORD *)v104 + 8))(v104);
  v105 = (std::__shared_weak_count *)v376.n128_u64[1];
  if (v376.n128_u64[1])
  {
    v106 = (unint64_t *)(v376.n128_u64[1] + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (v396)
  {
    v397 = (uint64_t)v396;
    operator delete(v396);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v103 + 5) + 32))(*((_QWORD *)v103 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v103 + 5) + 48))(*((_QWORD *)v103 + 5), 1);
  v386 = 0;
  v108 = operator new();
  *(_QWORD *)v108 = 0;
  *(_QWORD *)(v108 + 8) = 0;
  *(_QWORD *)(v108 + 16) = 0;
  v396 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v386, (void **)v108);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v396, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v386, 1uLL);
  v109 = v386;
  v110 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v111 = operator new(8uLL);
  __p = v111;
  *v111 = v110;
  v407 = v111 + 1;
  v406 = v111 + 1;
  v414 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v112 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v113 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v417 = v113;
  v113->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v112;
  p_get_deleter = (uint64_t)&v113->~__shared_weak_count_0;
  v419 = &v113->~__shared_weak_count_0;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v417);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v414, 2, &v375);
  MIL::IRParameter::Make(&v375, (uint64_t *)&v383);
  v114 = v383;
  v389 = v383;
  if (v383)
  {
    v115 = (_QWORD *)operator new();
    v116 = v383;
    *v115 = &unk_1EA99F888;
    v115[1] = 0;
    v115[2] = 0;
    v115[3] = v116;
  }
  else
  {
    v115 = 0;
  }
  v390 = v115;
  v383 = 0;
  v117 = v109[2];
  v118 = (_QWORD *)v109[1];
  if ((unint64_t)v118 >= v117)
  {
    v120 = ((uint64_t)v118 - *v109) >> 4;
    v121 = v120 + 1;
    if ((unint64_t)(v120 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v122 = v117 - *v109;
    if (v122 >> 3 > v121)
      v121 = v122 >> 3;
    if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF0)
      v123 = 0xFFFFFFFFFFFFFFFLL;
    else
      v123 = v121;
    v400 = (uint64_t)(v109 + 2);
    v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v109 + 2), v123);
    v126 = &v124[16 * v120];
    *(_QWORD *)v126 = v114;
    *((_QWORD *)v126 + 1) = v115;
    v390 = 0;
    v389 = 0;
    v128 = (_QWORD *)*v109;
    v127 = (_QWORD *)v109[1];
    if (v127 == (_QWORD *)*v109)
    {
      v131 = (_QWORD *)v109[1];
      v129 = &v124[16 * v120];
    }
    else
    {
      v129 = &v124[16 * v120];
      do
      {
        v130 = *((_OWORD *)v127 - 1);
        v127 -= 2;
        *((_OWORD *)v129 - 1) = v130;
        v129 -= 16;
        *v127 = 0;
        v127[1] = 0;
      }
      while (v127 != v128);
      v131 = (_QWORD *)*v109;
      v127 = (_QWORD *)v109[1];
    }
    v119 = v126 + 16;
    *v109 = v129;
    v397 = (uint64_t)v131;
    v109[1] = v126 + 16;
    v398 = (uint64_t)v127;
    v132 = v109[2];
    v109[2] = &v124[16 * v125];
    v399 = v132;
    v396 = v131;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v396);
  }
  else
  {
    *v118 = v114;
    v118[1] = v115;
    v119 = v118 + 2;
    v390 = 0;
    v389 = 0;
  }
  v109[1] = v119;
  v133 = v383;
  v383 = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  v134 = (std::__shared_weak_count *)v375.n128_u64[1];
  if (v375.n128_u64[1])
  {
    v135 = (unint64_t *)(v375.n128_u64[1] + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  if (v417)
  {
    p_get_deleter = (uint64_t)v417;
    operator delete(v417);
  }
  if (__p)
  {
    v406 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v373 = *(_OWORD *)a2;
  v374 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v137 = (uint64_t)v395;
  *(_QWORD *)&v372 = v395;
  if (v395)
  {
    v138 = (_QWORD *)operator new();
    *v138 = &unk_1EA99F8E8;
    v138[1] = 0;
    v138[2] = 0;
    v138[3] = v137;
  }
  else
  {
    v138 = 0;
  }
  *((_QWORD *)&v372 + 1) = v138;
  v395 = 0;
  *(_QWORD *)&v371 = v386;
  if (v386)
  {
    v139 = (_QWORD *)operator new();
    v140 = v386;
    *v139 = &unk_1EA99F948;
    v139[1] = 0;
    v139[2] = 0;
    v139[3] = v140;
  }
  else
  {
    v139 = 0;
  }
  *((_QWORD *)&v371 + 1) = v139;
  v386 = 0;
  v412[0] = &unk_1EA99FAC8;
  v412[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateConvTranspose;
  v413 = v412;
  v411 = 0;
  MIL::IROperator::Make((__int128 *)v373, &v372, &v371, (uint64_t)v412, (uint64_t)v410, a3);
  v141 = v411;
  if (v411 == v410)
  {
    v142 = 4;
    v141 = v410;
  }
  else
  {
    if (!v411)
      goto LABEL_131;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_131:
  v143 = v413;
  if (v413 == v412)
  {
    v144 = 4;
    v143 = v412;
    goto LABEL_135;
  }
  if (v413)
  {
    v144 = 5;
LABEL_135:
    (*(void (**)(void))(*v143 + 8 * v144))();
  }
  v145 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
  if (*((_QWORD *)&v371 + 1))
  {
    v146 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = (std::__shared_weak_count *)*((_QWORD *)&v372 + 1);
  if (*((_QWORD *)&v372 + 1))
  {
    v149 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  if (SHIBYTE(v374) < 0)
    operator delete(v373[0]);
  v417 = 0;
  v151 = (_OWORD *)operator new();
  *v151 = 0u;
  v151[1] = 0u;
  *((_DWORD *)v151 + 8) = 1065353216;
  v417 = (std::__shared_weak_count_vtbl *)v151;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v370);
  MIL::IRParameter::Make(&v370, (uint64_t *)&v396);
  v152 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v151, "minimum_compute_type", (uint64_t *)&v396);
  v153 = v396;
  v396 = 0;
  if (v153)
    (*(void (**)(void *))(*(_QWORD *)v153 + 8))(v153);
  v154 = (std::__shared_weak_count *)v370.n128_u64[1];
  if (v370.n128_u64[1])
  {
    v155 = (unint64_t *)(v370.n128_u64[1] + 8);
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v152 + 5) + 32))(*((_QWORD *)v152 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v152 + 5) + 48))(*((_QWORD *)v152 + 5), 1);
  v157 = *a3;
  v158 = v417;
  v368 = v417;
  if (v417)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v158;
  }
  else
  {
    v159 = 0;
  }
  v369 = v159;
  v417 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v157 + 184))(v157, &v368);
  v160 = v369;
  if (v369)
  {
    p_shared_owners = (unint64_t *)&v369->__shared_owners_;
    do
      v162 = __ldaxr(p_shared_owners);
    while (__stlxr(v162 - 1, p_shared_owners));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = *a3;
  v408[0] = &off_1EA99FBD8;
  v408[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceConvTranspose;
  v409 = v408;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v163 + 200))(v163, v408);
  v164 = v409;
  if (v409 == v408)
  {
    v165 = 4;
    v164 = v408;
  }
  else
  {
    if (!v409)
      goto LABEL_168;
    v165 = 5;
  }
  (*(void (**)(void))(*v164 + 8 * v165))();
LABEL_168:
  MIL::Validation::TensorDTypeConstraints::Make(&v396);
  v166 = v396;
  std::string::basic_string[abi:ne180100]<0>(v364, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v364, 0, (uint64_t *)&__p);
  v366 = __p;
  if (__p)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = (std::__shared_weak_count_vtbl *)__p;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v367 = v167;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v362, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v166 + 24))(v166, &v366, v362);
  if (v363 < 0)
    operator delete(v362[0]);
  v169 = v367;
  if (v367)
  {
    v170 = (unint64_t *)&v367->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = __p;
  __p = 0;
  if (v172)
    (*(void (**)(void *))(*(_QWORD *)v172 + 8))(v172);
  if (v365 < 0)
    operator delete(v364[0]);
  v173 = v396;
  std::string::basic_string[abi:ne180100]<0>(v358, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v358, 0, (uint64_t *)&__p);
  v360 = __p;
  if (__p)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v175 = (std::__shared_weak_count_vtbl *)__p;
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v175;
  }
  else
  {
    v174 = 0;
  }
  v361 = v174;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v356, "U");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v173 + 24))(v173, &v360, v356);
  if (v357 < 0)
    operator delete(v356[0]);
  v176 = v361;
  if (v361)
  {
    v177 = (unint64_t *)&v361->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = __p;
  __p = 0;
  if (v179)
    (*(void (**)(void *))(*(_QWORD *)v179 + 8))(v179);
  if (v359 < 0)
    operator delete(v358[0]);
  v180 = v396;
  std::string::basic_string[abi:ne180100]<0>(v352, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v352, 1, (uint64_t *)&__p);
  v354 = __p;
  if (__p)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = (std::__shared_weak_count_vtbl *)__p;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = v182;
  }
  else
  {
    v181 = 0;
  }
  v355 = v181;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v350, "U");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v180 + 24))(v180, &v354, v350);
  if (v351 < 0)
    operator delete(v350[0]);
  v183 = v355;
  if (v355)
  {
    v184 = (unint64_t *)&v355->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = __p;
  __p = 0;
  if (v186)
    (*(void (**)(void *))(*(_QWORD *)v186 + 8))(v186);
  if (v353 < 0)
    operator delete(v352[0]);
  v187 = v396;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v348 = __p;
  if (__p)
  {
    v188 = (std::__shared_weak_count *)operator new();
    v189 = (std::__shared_weak_count_vtbl *)__p;
    v188->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v188->__shared_owners_ = 0;
    v188->__shared_weak_owners_ = 0;
    v188[1].__vftable = v189;
  }
  else
  {
    v188 = 0;
  }
  v349 = v188;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v346, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v187 + 24))(v187, &v348, v346);
  if (v347 < 0)
    operator delete(v346[0]);
  v190 = v349;
  if (v349)
  {
    v191 = (unint64_t *)&v349->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = __p;
  __p = 0;
  if (v193)
    (*(void (**)(void *))(*(_QWORD *)v193 + 8))(v193);
  v194 = *a3;
  v344 = v396;
  if (v396)
  {
    v195 = (std::__shared_weak_count *)operator new();
    v196 = (std::__shared_weak_count_vtbl *)v396;
    v195->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v195->__shared_owners_ = 0;
    v195->__shared_weak_owners_ = 0;
    v195[1].__vftable = v196;
  }
  else
  {
    v195 = 0;
  }
  v345 = v195;
  v396 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v194 + 56))(v194, &v344);
  v197 = v345;
  if (v345)
  {
    v198 = (unint64_t *)&v345->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = v396;
  v396 = 0;
  if (v200)
    (*(void (**)(void *))(*(_QWORD *)v200 + 8))(v200);
  MIL::Validation::TensorRankValueConstraints::Make(&v396);
  v201 = v396;
  std::string::basic_string[abi:ne180100]<0>(v340, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v340, 0, (uint64_t *)&__p);
  v342 = __p;
  if (__p)
  {
    v202 = (std::__shared_weak_count *)operator new();
    v203 = (std::__shared_weak_count_vtbl *)__p;
    v202->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v202->__shared_owners_ = 0;
    v202->__shared_weak_owners_ = 0;
    v202[1].__vftable = v203;
  }
  else
  {
    v202 = 0;
  }
  v343 = v202;
  __p = 0;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v201 + 32))(v201, &v342, 3, 5);
  v204 = v343;
  if (v343)
  {
    v205 = (unint64_t *)&v343->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = __p;
  __p = 0;
  if (v207)
    (*(void (**)(void *))(*(_QWORD *)v207 + 8))(v207);
  if (v341 < 0)
    operator delete(v340[0]);
  v208 = *a3;
  v338 = v396;
  if (v396)
  {
    v209 = (std::__shared_weak_count *)operator new();
    v210 = (std::__shared_weak_count_vtbl *)v396;
    v209->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v209->__shared_owners_ = 0;
    v209->__shared_weak_owners_ = 0;
    v209[1].__vftable = v210;
  }
  else
  {
    v209 = 0;
  }
  v339 = v209;
  v396 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v208 + 56))(v208, &v338);
  v211 = v339;
  if (v339)
  {
    v212 = (unint64_t *)&v339->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = v396;
  v396 = 0;
  if (v214)
    (*(void (**)(void *))(*(_QWORD *)v214 + 8))(v214);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v396);
  v215 = v396;
  std::string::basic_string[abi:ne180100]<0>(v334, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v334, 0, (uint64_t *)&__p);
  v336 = __p;
  if (__p)
  {
    v216 = (std::__shared_weak_count *)operator new();
    v217 = (std::__shared_weak_count_vtbl *)__p;
    v216->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v216->__shared_owners_ = 0;
    v216->__shared_weak_owners_ = 0;
    v216[1].__vftable = v217;
  }
  else
  {
    v216 = 0;
  }
  v337 = v216;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v332, "C_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v215 + 24))(v215, &v336, 1, v332);
  if (v333 < 0)
    operator delete(v332[0]);
  v218 = v337;
  if (v337)
  {
    v219 = (unint64_t *)&v337->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v221 = __p;
  __p = 0;
  if (v221)
    (*(void (**)(void *))(*(_QWORD *)v221 + 8))(v221);
  if (v335 < 0)
    operator delete(v334[0]);
  v222 = v396;
  std::string::basic_string[abi:ne180100]<0>(v328, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v328, 0, (uint64_t *)&__p);
  v330 = __p;
  if (__p)
  {
    v223 = (std::__shared_weak_count *)operator new();
    v224 = (std::__shared_weak_count_vtbl *)__p;
    v223->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v223->__shared_owners_ = 0;
    v223->__shared_weak_owners_ = 0;
    v223[1].__vftable = v224;
  }
  else
  {
    v223 = 0;
  }
  v331 = v223;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v326, "S");
  (*(void (**)(void *, void **, uint64_t, uint64_t, void **))(*(_QWORD *)v222 + 32))(v222, &v330, 2, -1, v326);
  if (v327 < 0)
    operator delete(v326[0]);
  v225 = v331;
  if (v331)
  {
    v226 = (unint64_t *)&v331->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = __p;
  __p = 0;
  if (v228)
    (*(void (**)(void *))(*(_QWORD *)v228 + 8))(v228);
  if (v329 < 0)
    operator delete(v328[0]);
  v229 = v396;
  std::string::basic_string[abi:ne180100]<0>(v322, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v322, 1, (uint64_t *)&__p);
  v324 = __p;
  if (__p)
  {
    v230 = (std::__shared_weak_count *)operator new();
    v231 = (std::__shared_weak_count_vtbl *)__p;
    v230->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v230->__shared_owners_ = 0;
    v230->__shared_weak_owners_ = 0;
    v230[1].__vftable = v231;
  }
  else
  {
    v230 = 0;
  }
  v325 = v230;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v320, "C_out");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v229 + 24))(v229, &v324, 0, v320);
  if (v321 < 0)
    operator delete(v320[0]);
  v232 = v325;
  if (v325)
  {
    v233 = (unint64_t *)&v325->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v235 = __p;
  __p = 0;
  if (v235)
    (*(void (**)(void *))(*(_QWORD *)v235 + 8))(v235);
  if (v323 < 0)
    operator delete(v322[0]);
  v236 = v396;
  std::string::basic_string[abi:ne180100]<0>(v316, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v316, 0, (uint64_t *)&__p);
  v318 = __p;
  if (__p)
  {
    v237 = (std::__shared_weak_count *)operator new();
    v238 = (std::__shared_weak_count_vtbl *)__p;
    v237->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v237->__shared_owners_ = 0;
    v237->__shared_weak_owners_ = 0;
    v237[1].__vftable = v238;
  }
  else
  {
    v237 = 0;
  }
  v319 = v237;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v314, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v236 + 24))(v236, &v318, 0, v314);
  if (v315 < 0)
    operator delete(v314[0]);
  v239 = v319;
  if (v319)
  {
    v240 = (unint64_t *)&v319->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v242 = __p;
  __p = 0;
  if (v242)
    (*(void (**)(void *))(*(_QWORD *)v242 + 8))(v242);
  if (v317 < 0)
    operator delete(v316[0]);
  v243 = v396;
  std::string::basic_string[abi:ne180100]<0>(v310, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v310, 0, (uint64_t *)&__p);
  v312 = __p;
  if (__p)
  {
    v244 = (std::__shared_weak_count *)operator new();
    v245 = (std::__shared_weak_count_vtbl *)__p;
    v244->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v244->__shared_owners_ = 0;
    v244->__shared_weak_owners_ = 0;
    v244[1].__vftable = v245;
  }
  else
  {
    v244 = 0;
  }
  v313 = v244;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v308, "P");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v243 + 24))(v243, &v312, 0, v308);
  if (v309 < 0)
    operator delete(v308[0]);
  v246 = v313;
  if (v313)
  {
    v247 = (unint64_t *)&v313->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  v249 = __p;
  __p = 0;
  if (v249)
    (*(void (**)(void *))(*(_QWORD *)v249 + 8))(v249);
  if (v311 < 0)
    operator delete(v310[0]);
  v250 = v396;
  std::string::basic_string[abi:ne180100]<0>(v304, "dilations");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v304, 0, (uint64_t *)&__p);
  v306 = __p;
  if (__p)
  {
    v251 = (std::__shared_weak_count *)operator new();
    v252 = (std::__shared_weak_count_vtbl *)__p;
    v251->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v251->__shared_owners_ = 0;
    v251->__shared_weak_owners_ = 0;
    v251[1].__vftable = v252;
  }
  else
  {
    v251 = 0;
  }
  v307 = v251;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v302, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v250 + 24))(v250, &v306, 0, v302);
  if (v303 < 0)
    operator delete(v302[0]);
  v253 = v307;
  if (v307)
  {
    v254 = (unint64_t *)&v307->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  v256 = __p;
  __p = 0;
  if (v256)
    (*(void (**)(void *))(*(_QWORD *)v256 + 8))(v256);
  if (v305 < 0)
    operator delete(v304[0]);
  v257 = *a3;
  v300 = v396;
  if (v396)
  {
    v258 = (std::__shared_weak_count *)operator new();
    v259 = (std::__shared_weak_count_vtbl *)v396;
    v258->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v258->__shared_owners_ = 0;
    v258->__shared_weak_owners_ = 0;
    v258[1].__vftable = v259;
  }
  else
  {
    v258 = 0;
  }
  v301 = v258;
  v396 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v257 + 56))(v257, &v300);
  v260 = v301;
  if (v301)
  {
    v261 = (unint64_t *)&v301->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v263 = v396;
  v396 = 0;
  if (v263)
    (*(void (**)(void *))(*(_QWORD *)v263 + 8))(v263);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v389);
  v264 = v389;
  std::string::basic_string[abi:ne180100]<0>(v296, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v296, 0, (uint64_t *)&v414);
  v298 = v414;
  if (v414)
  {
    v265 = (std::__shared_weak_count *)operator new();
    v266 = v414;
    v265->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v265->__shared_owners_ = 0;
    v265->__shared_weak_owners_ = 0;
    v265[1].__vftable = v266;
  }
  else
  {
    v265 = 0;
  }
  v299 = v265;
  v414 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v396, "custom");
  std::string::basic_string[abi:ne180100]<0>(&v399, "same");
  std::string::basic_string[abi:ne180100]<0>(v402, "same_lower");
  std::string::basic_string[abi:ne180100]<0>(v403, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v396, 4);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v264 + 24))(v264, &v298, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v403[i + 2]) < 0)
      operator delete((void *)v403[i]);
  }
  v268 = v299;
  if (v299)
  {
    v269 = (unint64_t *)&v299->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v271 = v414;
  v414 = 0;
  if (v271)
    (*((void (**)(std::__shared_weak_count_vtbl *))v271->~__shared_weak_count + 1))(v271);
  if (v297 < 0)
    operator delete(v296[0]);
  v272 = v389;
  std::string::basic_string[abi:ne180100]<0>(v292, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v292, 1, (uint64_t *)&v414);
  v294 = v414;
  if (v414)
  {
    v273 = (std::__shared_weak_count *)operator new();
    v274 = v414;
    v273->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v273->__shared_owners_ = 0;
    v273->__shared_weak_owners_ = 0;
    v273[1].__vftable = v274;
  }
  else
  {
    v273 = 0;
  }
  v295 = v273;
  v414 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v396, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v399, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v402, "int32");
  std::string::basic_string[abi:ne180100]<0>(v403, "int8");
  std::string::basic_string[abi:ne180100]<0>(v404, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v396, 5);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v272 + 24))(v272, &v294, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v404[j + 2]) < 0)
      operator delete(v404[j]);
  }
  v276 = v295;
  if (v295)
  {
    v277 = (unint64_t *)&v295->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  v279 = v414;
  v414 = 0;
  if (v279)
    (*((void (**)(std::__shared_weak_count_vtbl *))v279->~__shared_weak_count + 1))(v279);
  if (v293 < 0)
    operator delete(v292[0]);
  v280 = *a3;
  v290 = v389;
  if (v389)
  {
    v281 = (std::__shared_weak_count *)operator new();
    v282 = (std::__shared_weak_count_vtbl *)v389;
    v281->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v281->__shared_owners_ = 0;
    v281->__shared_weak_owners_ = 0;
    v281[1].__vftable = v282;
  }
  else
  {
    v281 = 0;
  }
  v291 = v281;
  v389 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v280 + 56))(v280, &v290);
  v283 = v291;
  if (v291)
  {
    v284 = (unint64_t *)&v291->__shared_owners_;
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }
  v286 = v389;
  v389 = 0;
  if (v286)
    (*(void (**)(void *))(*(_QWORD *)v286 + 8))(v286);
  if (v417)
  {
    v287 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v417);
    MEMORY[0x1E0C023A0](v287, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v386, 0);
  result = (uint64_t)v395;
  if (v395)
  {
    v289 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v395);
    return MEMORY[0x1E0C023A0](v289, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0897D54(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x430];
  STACK[0x430] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x418], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x470], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, (uint64_t)&v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0898884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::ElementwiseBinary::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  char *v55;
  char *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  char **v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _OWORD *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t i;
  uint64_t v91;
  std::__shared_weak_count *v92;
  std::string *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::string *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t j;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t result;
  uint64_t v136;
  void *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  void *v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  void *v145[2];
  char v146;
  std::string *v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  void *v151[2];
  char v152;
  std::string *v153;
  std::__shared_weak_count *v154;
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  std::string *v159;
  std::__shared_weak_count *v160;
  void *v161;
  std::__shared_weak_count *v162;
  __n128 v163;
  __int128 v164;
  __int128 v165;
  void *v166[2];
  uint64_t v167;
  void *v168;
  void *v169;
  _QWORD *v170;
  __n128 v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  char **v175;
  __n128 v176;
  void *__p;
  void *v178;
  _QWORD *v179;
  void *p_Scalar;
  void *v181;
  _QWORD *v182;
  __n128 v183;
  _QWORD *v184;
  __int128 v185;
  uint64_t v186;
  _QWORD v187[3];
  __int128 v188;
  uint64_t v189[3];
  _QWORD v190[3];
  std::string *Scalar;
  std::string *v192;
  __int128 *v193;
  _BYTE v194[24];
  _BYTE *v195;
  _BYTE v196[24];
  _BYTE *v197;
  _BYTE v198[24];
  _BYTE *v199;
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v184 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v10;
  *(_QWORD *)v10 = v9;
  v192 = (std::string *)((char *)v10 + 8);
  v193 = (__int128 *)((char *)v10 + 8);
  *(_QWORD *)&v185 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  p_Scalar = v12;
  *v12 = v11;
  v181 = v12 + 1;
  v182 = v12 + 1;
  *((_QWORD *)&v185 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v178 = v14 + 1;
  v179 = v14 + 1;
  v186 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 3, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v168);
  v15 = v168;
  v168 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v17 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v181 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v192 = Scalar;
    operator delete(Scalar);
  }
  v19 = v184;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v21;
  *(_QWORD *)v21 = v20;
  v192 = (std::string *)((char *)v21 + 8);
  v193 = (__int128 *)((char *)v21 + 8);
  *(_QWORD *)&v185 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  p_Scalar = v23;
  *v23 = v22;
  v181 = v23 + 1;
  v182 = v23 + 1;
  *((_QWORD *)&v185 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = v24;
  v178 = v25 + 1;
  v179 = v25 + 1;
  v186 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 3, &v176);
  MIL::IRParameter::Make(&v176, (uint64_t *)&v168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v168);
  v26 = v168;
  v168 = 0;
  if (v26)
    (*(void (**)(void *))(*(_QWORD *)v26 + 8))(v26);
  v27 = (std::__shared_weak_count *)v176.n128_u64[1];
  if (v176.n128_u64[1])
  {
    v28 = (unint64_t *)(v176.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v181 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v192 = Scalar;
    operator delete(Scalar);
  }
  v175 = 0;
  v30 = operator new();
  *(_QWORD *)v30 = 0;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)&v185 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v175, (void **)v30);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v185, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v175, 1uLL);
  v31 = v175;
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  p_Scalar = v33;
  *v33 = v32;
  v181 = v33 + 1;
  v182 = v33 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  __p = v35;
  *v35 = v34;
  v178 = v35 + 1;
  v179 = v35 + 1;
  v192 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v168 = v37;
  *v37 = v36;
  v169 = v37 + 1;
  v170 = v37 + 1;
  v193 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v168);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v171);
  MIL::IRParameter::Make(&v171, &v172);
  v38 = v172;
  v173 = v172;
  if (v172)
  {
    v39 = (_QWORD *)operator new();
    v40 = v172;
    *v39 = &unk_1EA99F888;
    v39[1] = 0;
    v39[2] = 0;
    v39[3] = v40;
  }
  else
  {
    v39 = 0;
  }
  v174 = v39;
  v172 = 0;
  v41 = v31[2];
  v42 = v31[1];
  if (v42 >= v41)
  {
    v44 = (v42 - *v31) >> 4;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v46 = v41 - *v31;
    if (v46 >> 3 > v45)
      v45 = v46 >> 3;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
      v47 = 0xFFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    v187[1] = v31 + 2;
    v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v31 + 2), v47);
    v50 = (uint64_t *)&v48[16 * v44];
    *v50 = v38;
    v50[1] = (uint64_t)v39;
    v173 = 0;
    v174 = 0;
    v52 = *v31;
    v51 = v31[1];
    if (v51 == *v31)
    {
      v55 = v31[1];
      v53 = &v48[16 * v44];
    }
    else
    {
      v53 = &v48[16 * v44];
      do
      {
        v54 = *((_OWORD *)v51 - 1);
        v51 -= 16;
        *((_OWORD *)v53 - 1) = v54;
        v53 -= 16;
        *(_QWORD *)v51 = 0;
        *((_QWORD *)v51 + 1) = 0;
      }
      while (v51 != v52);
      v55 = *v31;
      v51 = v31[1];
    }
    v43 = (char *)(v50 + 2);
    *v31 = v53;
    *(_QWORD *)&v185 = v55;
    *((_QWORD *)&v185 + 1) = v55;
    v31[1] = (char *)(v50 + 2);
    v186 = (uint64_t)v51;
    v56 = v31[2];
    v31[2] = &v48[16 * v49];
    v187[0] = v56;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v185);
  }
  else
  {
    *(_QWORD *)v42 = v38;
    *((_QWORD *)v42 + 1) = v39;
    v43 = v42 + 16;
    v173 = 0;
    v174 = 0;
  }
  v31[1] = v43;
  v57 = v172;
  v172 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v171.n128_u64[1];
  if (v171.n128_u64[1])
  {
    v59 = (unint64_t *)(v171.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v181 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v166 = *(_OWORD *)a2;
  v167 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v61 = (uint64_t)v184;
  *(_QWORD *)&v165 = v184;
  if (v184)
  {
    v62 = (_QWORD *)operator new();
    *v62 = &unk_1EA99F8E8;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v61;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v165 + 1) = v62;
  v184 = 0;
  *(_QWORD *)&v164 = v175;
  if (v175)
  {
    v63 = (_QWORD *)operator new();
    v64 = v175;
    *v63 = &unk_1EA99F948;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v64;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v164 + 1) = v63;
  v175 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v198, a3);
  v197 = 0;
  MIL::IROperator::Make((__int128 *)v166, &v165, &v164, (uint64_t)v198, (uint64_t)v196, a4);
  v65 = v197;
  if (v197 == v196)
  {
    v66 = 4;
    v65 = v196;
  }
  else
  {
    if (!v197)
      goto LABEL_68;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_68:
  v67 = v199;
  if (v199 == v198)
  {
    v68 = 4;
    v67 = v198;
    goto LABEL_72;
  }
  if (v199)
  {
    v68 = 5;
LABEL_72:
    (*(void (**)(void))(*v67 + 8 * v68))();
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (SHIBYTE(v167) < 0)
    operator delete(v166[0]);
  __p = 0;
  v75 = (_OWORD *)operator new();
  *v75 = 0u;
  v75[1] = 0u;
  *((_DWORD *)v75 + 8) = 1065353216;
  __p = v75;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v163);
  MIL::IRParameter::Make(&v163, (uint64_t *)&v185);
  v76 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v75, "minimum_compute_type", (uint64_t *)&v185);
  v77 = v185;
  *(_QWORD *)&v185 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v79 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 32))(*((_QWORD *)v76 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 48))(*((_QWORD *)v76 + 5), 1);
  v81 = *a4;
  v82 = (std::__shared_weak_count_vtbl *)__p;
  v161 = __p;
  if (__p)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v82;
  }
  else
  {
    v83 = 0;
  }
  v162 = v83;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v81 + 184))(v81, &v161);
  v84 = v162;
  if (v162)
  {
    p_shared_owners = (unint64_t *)&v162->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v185, "x");
  std::string::basic_string[abi:ne180100]<0>(v187, "y");
  Scalar = 0;
  v192 = 0;
  v193 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v181) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v192 = Scalar;
  v193 = (__int128 *)&Scalar[2];
  v192 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v193, &v185, &v188, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v194);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v87 + 200))(v87, v194);
  v88 = v195;
  if (v195 == v194)
  {
    v89 = 4;
    v88 = v194;
    goto LABEL_104;
  }
  if (v195)
  {
    v89 = 5;
LABEL_104:
    (*(void (**)(void))(*v88 + 8 * v89))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v187[i + 2]) < 0)
      operator delete((void *)v187[i]);
  }
  MIL::Validation::TensorDTypeConstraints::Make(&v185);
  v91 = v185;
  std::string::basic_string[abi:ne180100]<0>(v157, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v157, 0, (uint64_t *)&Scalar);
  v159 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = (std::__shared_weak_count_vtbl *)v93;
  }
  else
  {
    v92 = 0;
  }
  v160 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v155, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v91 + 24))(v91, &v159, v155);
  if (v156 < 0)
    operator delete(v155[0]);
  v94 = v160;
  if (v160)
  {
    v95 = (unint64_t *)&v160->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*(void (**)(std::string *))(v97->__r_.__value_.__r.__words[0] + 8))(v97);
  if (v158 < 0)
    operator delete(v157[0]);
  v98 = v185;
  std::string::basic_string[abi:ne180100]<0>(v151, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v151, 0, (uint64_t *)&Scalar);
  v153 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v154 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v98 + 24))(v98, &v153, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v101 = v154;
  if (v154)
  {
    v102 = (unint64_t *)&v154->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*(void (**)(std::string *))(v104->__r_.__value_.__r.__words[0] + 8))(v104);
  if (v152 < 0)
    operator delete(v151[0]);
  v105 = v185;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v147 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v148 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v145, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v105 + 24))(v105, &v147, v145);
  if (v146 < 0)
    operator delete(v145[0]);
  v108 = v148;
  if (v148)
  {
    v109 = (unint64_t *)&v148->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*(void (**)(std::string *))(v111->__r_.__value_.__r.__words[0] + 8))(v111);
  v112 = *a4;
  v143 = v185;
  if ((_QWORD)v185)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = (std::__shared_weak_count_vtbl *)v185;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v144 = v113;
  *(_QWORD *)&v185 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v112 + 56))(v112, &v143);
  v115 = v144;
  if (v144)
  {
    v116 = (unint64_t *)&v144->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v185;
  *(_QWORD *)&v185 = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v119 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v139, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v139, 1, (uint64_t *)&v168);
  v141 = v168;
  if (v168)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v168;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v142 = v120;
  v168 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v185, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v187, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v188, "int32");
  std::string::basic_string[abi:ne180100]<0>(v189, "int8");
  std::string::basic_string[abi:ne180100]<0>(v190, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v185, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v119 + 24))(v119, &v141, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v190[j + 2]) < 0)
      operator delete((void *)v190[j]);
  }
  v123 = v142;
  if (v142)
  {
    v124 = (unint64_t *)&v142->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v168;
  v168 = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  if (v140 < 0)
    operator delete(v139[0]);
  v127 = *a4;
  v137 = p_Scalar;
  if (p_Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v138 = v128;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v127 + 56))(v127, &v137);
  v130 = v138;
  if (v138)
  {
    v131 = (unint64_t *)&v138->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = p_Scalar;
  p_Scalar = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (__p)
  {
    v134 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v134, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v175, 0);
  result = (uint64_t)v184;
  if (v184)
  {
    v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v184);
    return MEMORY[0x1E0C023A0](v136, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E089993C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Add::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v201[0] = &unk_1EA99FAC8;
  v201[1] = MIL::Validation::ValidateViaTypeInference;
  v202 = v201;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAdd;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E089AFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::ElementwiseBinaryBoolOutput::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void ***v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count_vtbl *v34;
  _QWORD *v35;
  std::__shared_weak_count_vtbl *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void **v47;
  void **v48;
  char *v49;
  __int128 v50;
  void **v51;
  void **v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _OWORD *v71;
  unsigned __int8 *v72;
  void **v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void **v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void **v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void **v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  uint64_t i;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  uint64_t result;
  uint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  void **v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  void *v135[2];
  char v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  void *v141[2];
  char v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  void *v145;
  std::__shared_weak_count *v146;
  __n128 v147;
  __int128 v148;
  __int128 v149;
  void *v150[2];
  uint64_t v151;
  __n128 v152;
  __n128 v153;
  void *__p;
  void *v155;
  _QWORD *v156;
  void *v157;
  void *v158;
  _QWORD *v159;
  __n128 v160;
  std::__shared_weak_count_vtbl *v161;
  _QWORD *v162;
  void **v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[3];
  uint64_t v167[3];
  uint64_t v168[3];
  _QWORD v169[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v171;
  void (__cdecl **v172)(std::__shared_weak_count *__hidden);
  _QWORD v173[3];
  _QWORD *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _BYTE v177[24];
  _BYTE *v178;
  uint64_t v179[2];

  v179[1] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v162 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v171 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v172 = &v10->~__shared_weak_count_0;
  v163 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v157 = v12;
  *v12 = v11;
  v158 = v12 + 1;
  v159 = v12 + 1;
  v164 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v157);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v155 = v14 + 1;
  v156 = v14 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v163, 3, &v160);
  MIL::IRParameter::Make(&v160, (uint64_t *)&v161);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v161);
  v15 = v161;
  v161 = 0;
  if (v15)
    (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 1))(v15);
  v16 = (std::__shared_weak_count *)v160.n128_u64[1];
  if (v160.n128_u64[1])
  {
    v17 = (unint64_t *)(v160.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v157)
  {
    v158 = v157;
    operator delete(v157);
  }
  if (Scalar)
  {
    v171 = Scalar;
    operator delete(Scalar);
  }
  v19 = v162;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v171 = (std::__shared_weak_count_vtbl *)&v21->~__shared_weak_count_0;
  v172 = &v21->~__shared_weak_count_0;
  v163 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v157 = v23;
  *v23 = v22;
  v158 = v23 + 1;
  v159 = v23 + 1;
  v164 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v157);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = v24;
  v155 = v25 + 1;
  v156 = v25 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v163, 3, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v161);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v161);
  v26 = v161;
  v161 = 0;
  if (v26)
    (*((void (**)(std::__shared_weak_count_vtbl *))v26->~__shared_weak_count + 1))(v26);
  v27 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v28 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v157)
  {
    v158 = v157;
    operator delete(v157);
  }
  if (Scalar)
  {
    v171 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v30 = operator new();
  *(_QWORD *)v30 = 0;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  v163 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v30);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v163, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v31 = (void ***)__p;
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v33;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  v171 = (std::__shared_weak_count_vtbl *)&v33->~__shared_weak_count_0;
  v172 = &v33->~__shared_weak_count_0;
  v179[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v179, 1, &v152);
  MIL::IRParameter::Make(&v152, (uint64_t *)&v161);
  v34 = v161;
  v157 = v161;
  if (v161)
  {
    v35 = (_QWORD *)operator new();
    v36 = v161;
    *v35 = &unk_1EA99F888;
    v35[1] = 0;
    v35[2] = 0;
    v35[3] = v36;
  }
  else
  {
    v35 = 0;
  }
  v158 = v35;
  v161 = 0;
  v37 = (unint64_t)v31[2];
  v38 = v31[1];
  if ((unint64_t)v38 >= v37)
  {
    v40 = ((char *)v38 - (char *)*v31) >> 4;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v42 = v37 - (_QWORD)*v31;
    if (v42 >> 3 > v41)
      v41 = v42 >> 3;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
      v43 = 0xFFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    v166[1] = v31 + 2;
    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v31 + 2), v43);
    v46 = &v44[16 * v40];
    *(_QWORD *)v46 = v34;
    *((_QWORD *)v46 + 1) = v35;
    v157 = 0;
    v158 = 0;
    v48 = *v31;
    v47 = v31[1];
    if (v47 == *v31)
    {
      v51 = v31[1];
      v49 = &v44[16 * v40];
    }
    else
    {
      v49 = &v44[16 * v40];
      do
      {
        v50 = *((_OWORD *)v47 - 1);
        v47 -= 2;
        *((_OWORD *)v49 - 1) = v50;
        v49 -= 16;
        *v47 = 0;
        v47[1] = 0;
      }
      while (v47 != v48);
      v51 = *v31;
      v47 = v31[1];
    }
    v39 = (void **)(v46 + 16);
    *v31 = (void **)v49;
    v163 = v51;
    v164 = (uint64_t)v51;
    v31[1] = (void **)(v46 + 16);
    v165 = (uint64_t)v47;
    v52 = v31[2];
    v31[2] = (void **)&v44[16 * v45];
    v166[0] = v52;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v163);
  }
  else
  {
    *v38 = v34;
    v38[1] = v35;
    v39 = v38 + 2;
    v157 = 0;
    v158 = 0;
  }
  v31[1] = v39;
  v53 = v161;
  v161 = 0;
  if (v53)
    (*((void (**)(std::__shared_weak_count_vtbl *))v53->~__shared_weak_count + 1))(v53);
  v54 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v55 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (Scalar)
  {
    v171 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v150 = *(_OWORD *)a2;
  v151 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v57 = (uint64_t)v162;
  *(_QWORD *)&v149 = v162;
  if (v162)
  {
    v58 = (_QWORD *)operator new();
    *v58 = &unk_1EA99F8E8;
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = v57;
  }
  else
  {
    v58 = 0;
  }
  *((_QWORD *)&v149 + 1) = v58;
  v162 = 0;
  *(_QWORD *)&v148 = __p;
  if (__p)
  {
    v59 = (_QWORD *)operator new();
    v60 = __p;
    *v59 = &unk_1EA99F948;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v60;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v148 + 1) = v59;
  __p = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v177, a3);
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v150, &v149, &v148, (uint64_t)v177, (uint64_t)v175, a4);
  v61 = v176;
  if (v176 == v175)
  {
    v62 = 4;
    v61 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_64;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_64:
  v63 = v178;
  if (v178 == v177)
  {
    v64 = 4;
    v63 = v177;
    goto LABEL_68;
  }
  if (v178)
  {
    v64 = 5;
LABEL_68:
    (*(void (**)(void))(*v63 + 8 * v64))();
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
  if (*((_QWORD *)&v148 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (SHIBYTE(v151) < 0)
    operator delete(v150[0]);
  v157 = 0;
  v71 = (_OWORD *)operator new();
  *v71 = 0u;
  v71[1] = 0u;
  *((_DWORD *)v71 + 8) = 1065353216;
  v157 = v71;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v163);
  v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v71, "minimum_compute_type", (uint64_t *)&v163);
  v73 = v163;
  v163 = 0;
  if (v73)
    (*((void (**)(void **))*v73 + 1))(v73);
  v74 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v75 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 32))(*((_QWORD *)v72 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 48))(*((_QWORD *)v72 + 5), 1);
  v77 = *a4;
  v78 = (std::__shared_weak_count_vtbl *)v157;
  v145 = v157;
  if (v157)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v78;
  }
  else
  {
    v79 = 0;
  }
  v146 = v79;
  v157 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v77 + 184))(v77, &v145);
  v80 = v146;
  if (v146)
  {
    p_shared_owners = (unint64_t *)&v146->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = *a4;
  v173[0] = &off_1EA99FBD8;
  v173[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v174 = v173;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v83 + 200))(v83, v173);
  v84 = v174;
  if (v174 == v173)
  {
    v85 = 4;
    v84 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_101;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_101:
  MIL::Validation::TensorDTypeConstraints::Make(&v163);
  v86 = v163;
  std::string::basic_string[abi:ne180100]<0>(v141, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v141, 0, (uint64_t *)&Scalar);
  v143 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v144 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v86 + 3))(v86, &v143, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v89 = v144;
  if (v144)
  {
    v90 = (unint64_t *)&v144->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  if (v142 < 0)
    operator delete(v141[0]);
  v93 = v163;
  std::string::basic_string[abi:ne180100]<0>(v135, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v135, 0, (uint64_t *)&Scalar);
  v137 = Scalar;
  if (Scalar)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = Scalar;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v138 = v94;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v133, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v93 + 3))(v93, &v137, v133);
  if (v134 < 0)
    operator delete(v133[0]);
  v96 = v138;
  if (v138)
  {
    v97 = (unint64_t *)&v138->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*((void (**)(std::__shared_weak_count_vtbl *))v99->~__shared_weak_count + 1))(v99);
  if (v136 < 0)
    operator delete(v135[0]);
  v100 = *a4;
  v131 = v163;
  if (v163)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v163;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v132 = v101;
  v163 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v100 + 56))(v100, &v131);
  v103 = v132;
  if (v132)
  {
    v104 = (unint64_t *)&v132->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v163;
  v163 = 0;
  if (v106)
    (*((void (**)(void **))*v106 + 1))(v106);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v161);
  v107 = v161;
  std::string::basic_string[abi:ne180100]<0>(v127, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v127, 1, v179);
  v129 = v179[0];
  if (v179[0])
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = v179[0];
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
  }
  else
  {
    v108 = 0;
  }
  v130 = v108;
  v179[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v166, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v167, "int32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int8");
  std::string::basic_string[abi:ne180100]<0>(v169, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v163, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v107->~__shared_weak_count
   + 3))(v107, &v129, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v169[i + 2]) < 0)
      operator delete((void *)v169[i]);
  }
  v111 = v130;
  if (v130)
  {
    v112 = (unint64_t *)&v130->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v179[0];
  v179[0] = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  if (v128 < 0)
    operator delete(v127[0]);
  v115 = *a4;
  v125 = v161;
  if (v161)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = v161;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v126 = v116;
  v161 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v115 + 56))(v115, &v125);
  v118 = v126;
  if (v126)
  {
    v119 = (unint64_t *)&v126->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v161;
  v161 = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  if (v157)
  {
    v122 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v157);
    MEMORY[0x1E0C023A0](v122, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v162;
  if (v162)
  {
    v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v162);
    return MEMORY[0x1E0C023A0](v124, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E089C3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::ElementwiseBinaryLogical::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  char **v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  void *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count_vtbl *v84;
  void *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  uint64_t i;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t result;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  void *v119[2];
  char v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  __n128 v144;
  uint64_t v145;
  char **v146;
  __n128 v147;
  __n128 v148;
  _QWORD *v149;
  void *__p;
  void *v151;
  char *v152;
  _QWORD v153[3];
  uint64_t v154[3];
  uint64_t v155[3];
  _QWORD v156[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v158;
  void (__cdecl **v159)(std::__shared_weak_count *__hidden);
  _QWORD v160[3];
  _QWORD *v161;
  _BYTE v162[24];
  _BYTE *v163;
  _BYTE v164[24];
  _BYTE *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v149 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v151 = v10 + 1;
  v152 = (char *)(v10 + 1);
  v167 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&Scalar);
  v11 = Scalar;
  Scalar = 0;
  if (v11)
    (*((void (**)(std::__shared_weak_count_vtbl *))v11->~__shared_weak_count + 1))(v11);
  v12 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v13 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v151 = __p;
    operator delete(__p);
  }
  v15 = v149;
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(8uLL);
  __p = v17;
  *v17 = v16;
  v151 = v17 + 1;
  v152 = (char *)(v17 + 1);
  v167 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 1, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v15, "y", (uint64_t *)&Scalar);
  v18 = Scalar;
  Scalar = 0;
  if (v18)
    (*((void (**)(std::__shared_weak_count_vtbl *))v18->~__shared_weak_count + 1))(v18);
  v19 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v20 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v151 = __p;
    operator delete(__p);
  }
  v146 = 0;
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v146, (void **)v22);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v146, 1uLL);
  v23 = v146;
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v25;
  v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v158 = (std::__shared_weak_count_vtbl *)&v25->~__shared_weak_count_0;
  v159 = &v25->~__shared_weak_count_0;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v166, 1, &v144);
  MIL::IRParameter::Make(&v144, &v145);
  v26 = v145;
  v167 = v145;
  if (v145)
  {
    v27 = (_QWORD *)operator new();
    v28 = v145;
    *v27 = &unk_1EA99F888;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = v28;
  }
  else
  {
    v27 = 0;
  }
  v168 = v27;
  v145 = 0;
  v29 = v23[2];
  v30 = v23[1];
  if (v30 >= v29)
  {
    v32 = (v30 - *v23) >> 4;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v34 = v29 - *v23;
    if (v34 >> 3 > v33)
      v33 = v34 >> 3;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    v153[1] = v23 + 2;
    v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v23 + 2), v35);
    v38 = (uint64_t *)&v36[16 * v32];
    *v38 = v26;
    v38[1] = (uint64_t)v27;
    v167 = 0;
    v168 = 0;
    v40 = *v23;
    v39 = v23[1];
    if (v39 == *v23)
    {
      v43 = v23[1];
      v41 = &v36[16 * v32];
    }
    else
    {
      v41 = &v36[16 * v32];
      do
      {
        v42 = *((_OWORD *)v39 - 1);
        v39 -= 16;
        *((_OWORD *)v41 - 1) = v42;
        v41 -= 16;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
      }
      while (v39 != v40);
      v43 = *v23;
      v39 = v23[1];
    }
    v31 = (char *)(v38 + 2);
    *v23 = v41;
    __p = v43;
    v151 = v43;
    v23[1] = (char *)(v38 + 2);
    v152 = v39;
    v44 = v23[2];
    v23[2] = &v36[16 * v37];
    v153[0] = v44;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v30 = v26;
    *((_QWORD *)v30 + 1) = v27;
    v31 = v30 + 16;
    v167 = 0;
    v168 = 0;
  }
  v23[1] = v31;
  v45 = v145;
  v145 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v47 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (Scalar)
  {
    v158 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v49 = (uint64_t)v149;
  *(_QWORD *)&v141 = v149;
  if (v149)
  {
    v50 = (_QWORD *)operator new();
    *v50 = &unk_1EA99F8E8;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v49;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v141 + 1) = v50;
  v149 = 0;
  *(_QWORD *)&v140 = v146;
  if (v146)
  {
    v51 = (_QWORD *)operator new();
    v52 = v146;
    *v51 = &unk_1EA99F948;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v52;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v140 + 1) = v51;
  v146 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v164, a3);
  v163 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v164, (uint64_t)v162, a4);
  v53 = v163;
  if (v163 == v162)
  {
    v54 = 4;
    v53 = v162;
  }
  else
  {
    if (!v163)
      goto LABEL_56;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_56:
  v55 = v165;
  if (v165 == v164)
  {
    v56 = 4;
    v55 = v164;
    goto LABEL_60;
  }
  if (v165)
  {
    v56 = 5;
LABEL_60:
    (*(void (**)(void))(*v55 + 8 * v56))();
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v167 = 0;
  v63 = operator new();
  *(_OWORD *)v63 = 0u;
  *(_OWORD *)(v63 + 16) = 0u;
  *(_DWORD *)(v63 + 32) = 1065353216;
  v167 = v63;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&__p);
  v64 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v63, "minimum_compute_type", (uint64_t *)&__p);
  v65 = __p;
  __p = 0;
  if (v65)
    (*(void (**)(void *))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v67 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v64 + 5) + 32))(*((_QWORD *)v64 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v64 + 5) + 48))(*((_QWORD *)v64 + 5), 1);
  v69 = *a4;
  v70 = v167;
  v137 = v167;
  if (v167)
  {
    v71 = (std::__shared_weak_count *)operator new();
    v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71[1].__vftable = (std::__shared_weak_count_vtbl *)v70;
  }
  else
  {
    v71 = 0;
  }
  v138 = v71;
  v167 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v69 + 184))(v69, &v137);
  v72 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *a4;
  v160[0] = &off_1EA99FBD8;
  v160[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v161 = v160;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v75 + 200))(v75, v160);
  v76 = v161;
  if (v161 == v160)
  {
    v77 = 4;
    v76 = v160;
  }
  else
  {
    if (!v161)
      goto LABEL_93;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_93:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v78 = __p;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = Scalar;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v136 = v79;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v78 + 24))(v78, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v81 = v136;
  if (v136)
  {
    v82 = (unint64_t *)&v136->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = Scalar;
  Scalar = 0;
  if (v84)
    (*((void (**)(std::__shared_weak_count_vtbl *))v84->~__shared_weak_count + 1))(v84);
  if (v134 < 0)
    operator delete(v133[0]);
  v85 = __p;
  std::string::basic_string[abi:ne180100]<0>(v127, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v127, 0, (uint64_t *)&Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = Scalar;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v130 = v86;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v125, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v85 + 24))(v85, &v129, v125);
  if (v126 < 0)
    operator delete(v125[0]);
  v88 = v130;
  if (v130)
  {
    v89 = (unint64_t *)&v130->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = Scalar;
  Scalar = 0;
  if (v91)
    (*((void (**)(std::__shared_weak_count_vtbl *))v91->~__shared_weak_count + 1))(v91);
  if (v128 < 0)
    operator delete(v127[0]);
  v92 = *a4;
  v123 = __p;
  if (__p)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = (std::__shared_weak_count_vtbl *)__p;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v124 = v93;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v92 + 56))(v92, &v123);
  v95 = v124;
  if (v124)
  {
    v96 = (unint64_t *)&v124->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = __p;
  __p = 0;
  if (v98)
    (*(void (**)(void *))(*(_QWORD *)v98 + 8))(v98);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v145);
  v99 = v145;
  std::string::basic_string[abi:ne180100]<0>(v119, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v119, 1, &v166);
  v121 = v166;
  if (v166)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = v166;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v122 = v100;
  v166 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v153, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v154, "int32");
  std::string::basic_string[abi:ne180100]<0>(v155, "int8");
  std::string::basic_string[abi:ne180100]<0>(v156, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v99 + 24))(v99, &v121, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v156[i + 2]) < 0)
      operator delete((void *)v156[i]);
  }
  v103 = v122;
  if (v122)
  {
    v104 = (unint64_t *)&v122->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v166;
  v166 = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  if (v120 < 0)
    operator delete(v119[0]);
  v107 = *a4;
  v117 = v145;
  if (v145)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = v145;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
  }
  else
  {
    v108 = 0;
  }
  v118 = v108;
  v145 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v107 + 56))(v107, &v117);
  v110 = v118;
  if (v118)
  {
    v111 = (unint64_t *)&v118->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v145;
  v145 = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  if (v167)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v167);
    MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v146, 0);
  result = (uint64_t)v149;
  if (v149)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v149);
    return MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E089D584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;

  if (a48)
    (*(void (**)(uint64_t))(*(_QWORD *)a48 + 8))(a48);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 104), 0);
  v57 = *v54;
  *v54 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::LogicalAnd::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __n128 v140;
  __int128 v141;
  __int128 v142;
  void *v143[2];
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  char **v147;
  __n128 v148;
  __n128 v149;
  _QWORD *v150;
  void *__p;
  void *v152;
  char *v153;
  _QWORD v154[3];
  uint64_t v155[3];
  uint64_t v156[3];
  void *v157[3];
  void *Scalar;
  void *v159;
  _QWORD *v160;
  _QWORD v161[3];
  _QWORD *v162;
  _QWORD v163[3];
  _QWORD *v164;
  _BYTE v165[24];
  _BYTE *v166;
  _QWORD v167[3];
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v150 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v152 = v8 + 1;
  v153 = (char *)(v8 + 1);
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v149);
  MIL::IRParameter::Make(&v149, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v11 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v13 = v150;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v152 = v15 + 1;
  v153 = (char *)(v15 + 1);
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "y", (uint64_t *)&Scalar);
  v16 = Scalar;
  Scalar = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v18 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v147 = 0;
  v20 = operator new();
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, (void **)v20);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v147, 1uLL);
  v21 = v147;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  Scalar = v23;
  *v23 = v22;
  v159 = v23 + 1;
  v160 = v23 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 1, &v145);
  MIL::IRParameter::Make(&v145, &v146);
  v24 = v146;
  v170 = v146;
  if (v146)
  {
    v25 = (_QWORD *)operator new();
    v26 = v146;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v171 = v25;
  v146 = 0;
  v27 = v21[2];
  v28 = v21[1];
  if (v28 >= v27)
  {
    v30 = (v28 - *v21) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - *v21;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v154[1] = v21 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v21 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v170 = 0;
    v171 = 0;
    v38 = *v21;
    v37 = v21[1];
    if (v37 == *v21)
    {
      v41 = v21[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *v21;
      v37 = v21[1];
    }
    v29 = (char *)(v36 + 2);
    *v21 = v39;
    __p = v41;
    v152 = v41;
    v21[1] = (char *)(v36 + 2);
    v153 = v37;
    v42 = v21[2];
    v21[2] = &v34[16 * v35];
    v154[0] = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v28 = v24;
    *((_QWORD *)v28 + 1) = v25;
    v29 = v28 + 16;
    v170 = 0;
    v171 = 0;
  }
  v21[1] = v29;
  v43 = v146;
  v146 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v45 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (Scalar)
  {
    v159 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v143 = *(_OWORD *)a2;
  v144 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v150;
  *(_QWORD *)&v142 = v150;
  if (v150)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v142 + 1) = v48;
  v150 = 0;
  *(_QWORD *)&v141 = v147;
  if (v147)
  {
    v49 = (_QWORD *)operator new();
    v50 = v147;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v147 = 0;
  v167[0] = &unk_1EA99FAC8;
  v167[1] = MIL::Validation::ValidateViaTypeInference;
  v168 = v167;
  v166 = 0;
  MIL::IROperator::Make((__int128 *)v143, &v142, &v141, (uint64_t)v167, (uint64_t)v165, a3);
  v51 = v166;
  if (v166 == v165)
  {
    v52 = 4;
    v51 = v165;
  }
  else
  {
    if (!v166)
      goto LABEL_56;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_56:
  v53 = v168;
  if (v168 == v167)
  {
    v54 = 4;
    v53 = v167;
    goto LABEL_60;
  }
  if (v168)
  {
    v54 = 5;
LABEL_60:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v144) < 0)
    operator delete(v143[0]);
  v170 = 0;
  v61 = operator new();
  *(_OWORD *)v61 = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_DWORD *)(v61 + 32) = 1065353216;
  v170 = v61;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v61, "minimum_compute_type", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v65 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 48))(*((_QWORD *)v62 + 5), 1);
  v67 = *a3;
  v68 = v170;
  v138 = v170;
  if (v170)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
  }
  else
  {
    v69 = 0;
  }
  v139 = v69;
  v170 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 184))(v67, &v138);
  v70 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *a3;
  v163[0] = &off_1EA99FBD8;
  v163[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v164 = v163;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v163);
  v74 = v164;
  if (v164 == v163)
  {
    v75 = 4;
    v74 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_93;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_93:
  v76 = *a3;
  v161[0] = &off_1EA9A00F8;
  v161[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalAnd;
  v162 = v161;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 216))(v76, v161);
  v77 = v162;
  if (v162 == v161)
  {
    v78 = 4;
    v77 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_98;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_98:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = (std::__shared_weak_count_vtbl *)Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v137 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v79 + 24))(v79, &v136, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v82 = v137;
  if (v137)
  {
    v83 = (unint64_t *)&v137->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
  if (v135 < 0)
    operator delete(v134[0]);
  v86 = __p;
  std::string::basic_string[abi:ne180100]<0>(v128, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&Scalar);
  v130 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v131 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v86 + 24))(v86, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v131;
  if (v131)
  {
    v90 = (unint64_t *)&v131->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v129 < 0)
    operator delete(v128[0]);
  v93 = *a3;
  v124 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v146);
  v100 = v146;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, &v169);
  v122 = v169;
  if (v169)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v169;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v154, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v155, "int32");
  std::string::basic_string[abi:ne180100]<0>(v156, "int8");
  std::string::basic_string[abi:ne180100]<0>(v157, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v157[i + 2]) < 0)
      operator delete(v157[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v169;
  v169 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a3;
  v118 = v146;
  if (v146)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v146;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  v146 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v146;
  v146 = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  if (v170)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v170);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  result = (uint64_t)v150;
  if (v150)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v150);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E089E75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;

  if (a48)
    (*(void (**)(uint64_t))(*(_QWORD *)a48 + 8))(a48);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 88), 0);
  v57 = *v54;
  *v54 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::LogicalOr::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __n128 v140;
  __int128 v141;
  __int128 v142;
  void *v143[2];
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  char **v147;
  __n128 v148;
  __n128 v149;
  _QWORD *v150;
  void *__p;
  void *v152;
  char *v153;
  _QWORD v154[3];
  uint64_t v155[3];
  uint64_t v156[3];
  void *v157[3];
  void *Scalar;
  void *v159;
  _QWORD *v160;
  _QWORD v161[3];
  _QWORD *v162;
  _QWORD v163[3];
  _QWORD *v164;
  _BYTE v165[24];
  _BYTE *v166;
  _QWORD v167[3];
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v150 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v152 = v8 + 1;
  v153 = (char *)(v8 + 1);
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v149);
  MIL::IRParameter::Make(&v149, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v11 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v13 = v150;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v152 = v15 + 1;
  v153 = (char *)(v15 + 1);
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "y", (uint64_t *)&Scalar);
  v16 = Scalar;
  Scalar = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v18 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v147 = 0;
  v20 = operator new();
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, (void **)v20);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v147, 1uLL);
  v21 = v147;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  Scalar = v23;
  *v23 = v22;
  v159 = v23 + 1;
  v160 = v23 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 1, &v145);
  MIL::IRParameter::Make(&v145, &v146);
  v24 = v146;
  v170 = v146;
  if (v146)
  {
    v25 = (_QWORD *)operator new();
    v26 = v146;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v171 = v25;
  v146 = 0;
  v27 = v21[2];
  v28 = v21[1];
  if (v28 >= v27)
  {
    v30 = (v28 - *v21) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - *v21;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v154[1] = v21 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v21 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v170 = 0;
    v171 = 0;
    v38 = *v21;
    v37 = v21[1];
    if (v37 == *v21)
    {
      v41 = v21[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *v21;
      v37 = v21[1];
    }
    v29 = (char *)(v36 + 2);
    *v21 = v39;
    __p = v41;
    v152 = v41;
    v21[1] = (char *)(v36 + 2);
    v153 = v37;
    v42 = v21[2];
    v21[2] = &v34[16 * v35];
    v154[0] = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v28 = v24;
    *((_QWORD *)v28 + 1) = v25;
    v29 = v28 + 16;
    v170 = 0;
    v171 = 0;
  }
  v21[1] = v29;
  v43 = v146;
  v146 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v45 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (Scalar)
  {
    v159 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v143 = *(_OWORD *)a2;
  v144 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v150;
  *(_QWORD *)&v142 = v150;
  if (v150)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v142 + 1) = v48;
  v150 = 0;
  *(_QWORD *)&v141 = v147;
  if (v147)
  {
    v49 = (_QWORD *)operator new();
    v50 = v147;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v147 = 0;
  v167[0] = &unk_1EA99FAC8;
  v167[1] = MIL::Validation::ValidateViaTypeInference;
  v168 = v167;
  v166 = 0;
  MIL::IROperator::Make((__int128 *)v143, &v142, &v141, (uint64_t)v167, (uint64_t)v165, a3);
  v51 = v166;
  if (v166 == v165)
  {
    v52 = 4;
    v51 = v165;
  }
  else
  {
    if (!v166)
      goto LABEL_56;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_56:
  v53 = v168;
  if (v168 == v167)
  {
    v54 = 4;
    v53 = v167;
    goto LABEL_60;
  }
  if (v168)
  {
    v54 = 5;
LABEL_60:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v144) < 0)
    operator delete(v143[0]);
  v170 = 0;
  v61 = operator new();
  *(_OWORD *)v61 = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_DWORD *)(v61 + 32) = 1065353216;
  v170 = v61;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v61, "minimum_compute_type", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v65 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 48))(*((_QWORD *)v62 + 5), 1);
  v67 = *a3;
  v68 = v170;
  v138 = v170;
  if (v170)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
  }
  else
  {
    v69 = 0;
  }
  v139 = v69;
  v170 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 184))(v67, &v138);
  v70 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *a3;
  v163[0] = &off_1EA99FBD8;
  v163[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v164 = v163;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v163);
  v74 = v164;
  if (v164 == v163)
  {
    v75 = 4;
    v74 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_93;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_93:
  v76 = *a3;
  v161[0] = &off_1EA9A00F8;
  v161[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalOr;
  v162 = v161;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 216))(v76, v161);
  v77 = v162;
  if (v162 == v161)
  {
    v78 = 4;
    v77 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_98;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_98:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = (std::__shared_weak_count_vtbl *)Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v137 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v79 + 24))(v79, &v136, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v82 = v137;
  if (v137)
  {
    v83 = (unint64_t *)&v137->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
  if (v135 < 0)
    operator delete(v134[0]);
  v86 = __p;
  std::string::basic_string[abi:ne180100]<0>(v128, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&Scalar);
  v130 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v131 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v86 + 24))(v86, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v131;
  if (v131)
  {
    v90 = (unint64_t *)&v131->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v129 < 0)
    operator delete(v128[0]);
  v93 = *a3;
  v124 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v146);
  v100 = v146;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, &v169);
  v122 = v169;
  if (v169)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v169;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v154, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v155, "int32");
  std::string::basic_string[abi:ne180100]<0>(v156, "int8");
  std::string::basic_string[abi:ne180100]<0>(v157, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v157[i + 2]) < 0)
      operator delete(v157[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v169;
  v169 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a3;
  v118 = v146;
  if (v146)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v146;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  v146 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v146;
  v146 = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  if (v170)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v170);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  result = (uint64_t)v150;
  if (v150)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v150);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E089F954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;

  if (a48)
    (*(void (**)(uint64_t))(*(_QWORD *)a48 + 8))(a48);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 88), 0);
  v57 = *v54;
  *v54 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::LogicalXor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __n128 v140;
  __int128 v141;
  __int128 v142;
  void *v143[2];
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  char **v147;
  __n128 v148;
  __n128 v149;
  _QWORD *v150;
  void *__p;
  void *v152;
  char *v153;
  _QWORD v154[3];
  uint64_t v155[3];
  uint64_t v156[3];
  void *v157[3];
  void *Scalar;
  void *v159;
  _QWORD *v160;
  _QWORD v161[3];
  _QWORD *v162;
  _QWORD v163[3];
  _QWORD *v164;
  _BYTE v165[24];
  _BYTE *v166;
  _QWORD v167[3];
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v150 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v152 = v8 + 1;
  v153 = (char *)(v8 + 1);
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v149);
  MIL::IRParameter::Make(&v149, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v11 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v13 = v150;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v152 = v15 + 1;
  v153 = (char *)(v15 + 1);
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "y", (uint64_t *)&Scalar);
  v16 = Scalar;
  Scalar = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v18 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v147 = 0;
  v20 = operator new();
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, (void **)v20);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v147, 1uLL);
  v21 = v147;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  Scalar = v23;
  *v23 = v22;
  v159 = v23 + 1;
  v160 = v23 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 1, &v145);
  MIL::IRParameter::Make(&v145, &v146);
  v24 = v146;
  v170 = v146;
  if (v146)
  {
    v25 = (_QWORD *)operator new();
    v26 = v146;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v171 = v25;
  v146 = 0;
  v27 = v21[2];
  v28 = v21[1];
  if (v28 >= v27)
  {
    v30 = (v28 - *v21) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - *v21;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v154[1] = v21 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v21 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v170 = 0;
    v171 = 0;
    v38 = *v21;
    v37 = v21[1];
    if (v37 == *v21)
    {
      v41 = v21[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *v21;
      v37 = v21[1];
    }
    v29 = (char *)(v36 + 2);
    *v21 = v39;
    __p = v41;
    v152 = v41;
    v21[1] = (char *)(v36 + 2);
    v153 = v37;
    v42 = v21[2];
    v21[2] = &v34[16 * v35];
    v154[0] = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v28 = v24;
    *((_QWORD *)v28 + 1) = v25;
    v29 = v28 + 16;
    v170 = 0;
    v171 = 0;
  }
  v21[1] = v29;
  v43 = v146;
  v146 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v45 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (Scalar)
  {
    v159 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v143 = *(_OWORD *)a2;
  v144 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v150;
  *(_QWORD *)&v142 = v150;
  if (v150)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v142 + 1) = v48;
  v150 = 0;
  *(_QWORD *)&v141 = v147;
  if (v147)
  {
    v49 = (_QWORD *)operator new();
    v50 = v147;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v147 = 0;
  v167[0] = &unk_1EA99FAC8;
  v167[1] = MIL::Validation::ValidateViaTypeInference;
  v168 = v167;
  v166 = 0;
  MIL::IROperator::Make((__int128 *)v143, &v142, &v141, (uint64_t)v167, (uint64_t)v165, a3);
  v51 = v166;
  if (v166 == v165)
  {
    v52 = 4;
    v51 = v165;
  }
  else
  {
    if (!v166)
      goto LABEL_56;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_56:
  v53 = v168;
  if (v168 == v167)
  {
    v54 = 4;
    v53 = v167;
    goto LABEL_60;
  }
  if (v168)
  {
    v54 = 5;
LABEL_60:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v144) < 0)
    operator delete(v143[0]);
  v170 = 0;
  v61 = operator new();
  *(_OWORD *)v61 = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_DWORD *)(v61 + 32) = 1065353216;
  v170 = v61;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v61, "minimum_compute_type", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v65 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 48))(*((_QWORD *)v62 + 5), 1);
  v67 = *a3;
  v68 = v170;
  v138 = v170;
  if (v170)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
  }
  else
  {
    v69 = 0;
  }
  v139 = v69;
  v170 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 184))(v67, &v138);
  v70 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *a3;
  v163[0] = &off_1EA99FBD8;
  v163[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v164 = v163;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v163);
  v74 = v164;
  if (v164 == v163)
  {
    v75 = 4;
    v74 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_93;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_93:
  v76 = *a3;
  v161[0] = &off_1EA9A00F8;
  v161[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalXor;
  v162 = v161;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 216))(v76, v161);
  v77 = v162;
  if (v162 == v161)
  {
    v78 = 4;
    v77 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_98;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_98:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = (std::__shared_weak_count_vtbl *)Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v137 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v79 + 24))(v79, &v136, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v82 = v137;
  if (v137)
  {
    v83 = (unint64_t *)&v137->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
  if (v135 < 0)
    operator delete(v134[0]);
  v86 = __p;
  std::string::basic_string[abi:ne180100]<0>(v128, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&Scalar);
  v130 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v131 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v86 + 24))(v86, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v131;
  if (v131)
  {
    v90 = (unint64_t *)&v131->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v129 < 0)
    operator delete(v128[0]);
  v93 = *a3;
  v124 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v146);
  v100 = v146;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, &v169);
  v122 = v169;
  if (v169)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v169;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v154, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v155, "int32");
  std::string::basic_string[abi:ne180100]<0>(v156, "int8");
  std::string::basic_string[abi:ne180100]<0>(v157, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v157[i + 2]) < 0)
      operator delete(v157[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v169;
  v169 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a3;
  v118 = v146;
  if (v146)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v146;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  v146 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v146;
  v146 = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  if (v170)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v170);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  result = (uint64_t)v150;
  if (v150)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v150);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08A0B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;

  if (a48)
    (*(void (**)(uint64_t))(*(_QWORD *)a48 + 8))(a48);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 88), 0);
  v57 = *v54;
  *v54 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Equal::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t i;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  __n128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  __n128 v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  std::__shared_weak_count_vtbl *v162;
  _QWORD *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168[3];
  uint64_t v169[3];
  _QWORD v170[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v172;
  void (__cdecl **v173)(std::__shared_weak_count *__hidden);
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _QWORD v180[3];
  _QWORD *v181;
  uint64_t v182[2];

  v182[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v172 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v173 = &v8->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v158 = v10;
  *v10 = v9;
  v159 = v10 + 1;
  v160 = v10 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v156 = v12 + 1;
  v157 = v12 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v15 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v172 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v173 = &v19->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v158 = v21;
  *v21 = v20;
  v159 = v21 + 1;
  v160 = v21 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v156 = v23 + 1;
  v157 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v162);
  v24 = v162;
  v162 = 0;
  if (v24)
    (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  v25 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v26 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v164 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v164, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v172 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v173 = &v31->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v162);
  v32 = v162;
  v158 = v162;
  if (v162)
  {
    v33 = (_QWORD *)operator new();
    v34 = v162;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v159 = v33;
  v162 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v167[1] = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v158 = 0;
    v159 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v164 = v49;
    v165 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v166 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v167[0] = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v164);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v158 = 0;
    v159 = 0;
  }
  v29[1] = v37;
  v51 = v162;
  v162 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  v52 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v53 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v163;
  *(_QWORD *)&v150 = v163;
  if (v163)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v150 + 1) = v56;
  v163 = 0;
  *(_QWORD *)&v149 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v149 + 1) = v57;
  __p = 0;
  v180[0] = &unk_1EA99FAC8;
  v180[1] = MIL::Validation::ValidateViaTypeInference;
  v181 = v180;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v59 = v179;
  if (v179 == v178)
  {
    v60 = 4;
    v59 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v181;
  if (v181 == v180)
  {
    v62 = 4;
    v61 = v180;
    goto LABEL_68;
  }
  if (v181)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v158 = 0;
  v69 = (_OWORD *)operator new();
  *v69 = 0u;
  v69[1] = 0u;
  *((_DWORD *)v69 + 8) = 1065353216;
  v158 = v69;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v164);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v69, "minimum_compute_type", (uint64_t *)&v164);
  v71 = v164;
  v164 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v73 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = *a3;
  v76 = (std::__shared_weak_count_vtbl *)v158;
  v146 = v158;
  if (v158)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v76;
  }
  else
  {
    v77 = 0;
  }
  v147 = v77;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 184))(v75, &v146);
  v78 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v176);
  v82 = v177;
  if (v177 == v176)
  {
    v83 = 4;
    v82 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_101;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_101:
  v84 = *a3;
  v174[0] = &off_1EA9A00F8;
  v174[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceEqual;
  v175 = v174;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 216))(v84, v174);
  v85 = v175;
  if (v175 == v174)
  {
    v86 = 4;
    v85 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v164);
  v87 = v164;
  std::string::basic_string[abi:ne180100]<0>(v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v145 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v90 = v145;
  if (v145)
  {
    v91 = (unint64_t *)&v145->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v164;
  std::string::basic_string[abi:ne180100]<0>(v136, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v139 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v137 < 0)
    operator delete(v136[0]);
  v101 = *a3;
  v132 = v164;
  if (v164)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v164;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v164 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v164;
  v164 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v162);
  v108 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v164, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v167, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int8");
  std::string::basic_string[abi:ne180100]<0>(v170, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v164, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v108->~__shared_weak_count
   + 3))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v170[i + 2]) < 0)
      operator delete((void *)v170[i]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v162;
  if (v162)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v162;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v162;
  v162 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v158)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08A1E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Greater::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t i;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  __n128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  __n128 v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  std::__shared_weak_count_vtbl *v162;
  _QWORD *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168[3];
  uint64_t v169[3];
  _QWORD v170[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v172;
  void (__cdecl **v173)(std::__shared_weak_count *__hidden);
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _QWORD v180[3];
  _QWORD *v181;
  uint64_t v182[2];

  v182[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v172 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v173 = &v8->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v158 = v10;
  *v10 = v9;
  v159 = v10 + 1;
  v160 = v10 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v156 = v12 + 1;
  v157 = v12 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v15 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v172 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v173 = &v19->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v158 = v21;
  *v21 = v20;
  v159 = v21 + 1;
  v160 = v21 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v156 = v23 + 1;
  v157 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v162);
  v24 = v162;
  v162 = 0;
  if (v24)
    (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  v25 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v26 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v164 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v164, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v172 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v173 = &v31->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v162);
  v32 = v162;
  v158 = v162;
  if (v162)
  {
    v33 = (_QWORD *)operator new();
    v34 = v162;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v159 = v33;
  v162 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v167[1] = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v158 = 0;
    v159 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v164 = v49;
    v165 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v166 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v167[0] = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v164);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v158 = 0;
    v159 = 0;
  }
  v29[1] = v37;
  v51 = v162;
  v162 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  v52 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v53 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v163;
  *(_QWORD *)&v150 = v163;
  if (v163)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v150 + 1) = v56;
  v163 = 0;
  *(_QWORD *)&v149 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v149 + 1) = v57;
  __p = 0;
  v180[0] = &unk_1EA99FAC8;
  v180[1] = MIL::Validation::ValidateViaTypeInference;
  v181 = v180;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v59 = v179;
  if (v179 == v178)
  {
    v60 = 4;
    v59 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v181;
  if (v181 == v180)
  {
    v62 = 4;
    v61 = v180;
    goto LABEL_68;
  }
  if (v181)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v158 = 0;
  v69 = (_OWORD *)operator new();
  *v69 = 0u;
  v69[1] = 0u;
  *((_DWORD *)v69 + 8) = 1065353216;
  v158 = v69;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v164);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v69, "minimum_compute_type", (uint64_t *)&v164);
  v71 = v164;
  v164 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v73 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = *a3;
  v76 = (std::__shared_weak_count_vtbl *)v158;
  v146 = v158;
  if (v158)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v76;
  }
  else
  {
    v77 = 0;
  }
  v147 = v77;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 184))(v75, &v146);
  v78 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v176);
  v82 = v177;
  if (v177 == v176)
  {
    v83 = 4;
    v82 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_101;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_101:
  v84 = *a3;
  v174[0] = &off_1EA9A00F8;
  v174[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreater;
  v175 = v174;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 216))(v84, v174);
  v85 = v175;
  if (v175 == v174)
  {
    v86 = 4;
    v85 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v164);
  v87 = v164;
  std::string::basic_string[abi:ne180100]<0>(v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v145 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v90 = v145;
  if (v145)
  {
    v91 = (unint64_t *)&v145->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v164;
  std::string::basic_string[abi:ne180100]<0>(v136, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v139 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v137 < 0)
    operator delete(v136[0]);
  v101 = *a3;
  v132 = v164;
  if (v164)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v164;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v164 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v164;
  v164 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v162);
  v108 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v164, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v167, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int8");
  std::string::basic_string[abi:ne180100]<0>(v170, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v164, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v108->~__shared_weak_count
   + 3))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v170[i + 2]) < 0)
      operator delete((void *)v170[i]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v162;
  if (v162)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v162;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v162;
  v162 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v158)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08A31D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::GreaterEqual::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t i;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  __n128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  __n128 v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  std::__shared_weak_count_vtbl *v162;
  _QWORD *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168[3];
  uint64_t v169[3];
  _QWORD v170[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v172;
  void (__cdecl **v173)(std::__shared_weak_count *__hidden);
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _QWORD v180[3];
  _QWORD *v181;
  uint64_t v182[2];

  v182[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v172 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v173 = &v8->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v158 = v10;
  *v10 = v9;
  v159 = v10 + 1;
  v160 = v10 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v156 = v12 + 1;
  v157 = v12 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v15 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v172 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v173 = &v19->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v158 = v21;
  *v21 = v20;
  v159 = v21 + 1;
  v160 = v21 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v156 = v23 + 1;
  v157 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v162);
  v24 = v162;
  v162 = 0;
  if (v24)
    (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  v25 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v26 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v164 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v164, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v172 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v173 = &v31->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v162);
  v32 = v162;
  v158 = v162;
  if (v162)
  {
    v33 = (_QWORD *)operator new();
    v34 = v162;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v159 = v33;
  v162 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v167[1] = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v158 = 0;
    v159 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v164 = v49;
    v165 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v166 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v167[0] = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v164);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v158 = 0;
    v159 = 0;
  }
  v29[1] = v37;
  v51 = v162;
  v162 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  v52 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v53 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v163;
  *(_QWORD *)&v150 = v163;
  if (v163)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v150 + 1) = v56;
  v163 = 0;
  *(_QWORD *)&v149 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v149 + 1) = v57;
  __p = 0;
  v180[0] = &unk_1EA99FAC8;
  v180[1] = MIL::Validation::ValidateViaTypeInference;
  v181 = v180;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v59 = v179;
  if (v179 == v178)
  {
    v60 = 4;
    v59 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v181;
  if (v181 == v180)
  {
    v62 = 4;
    v61 = v180;
    goto LABEL_68;
  }
  if (v181)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v158 = 0;
  v69 = (_OWORD *)operator new();
  *v69 = 0u;
  v69[1] = 0u;
  *((_DWORD *)v69 + 8) = 1065353216;
  v158 = v69;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v164);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v69, "minimum_compute_type", (uint64_t *)&v164);
  v71 = v164;
  v164 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v73 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = *a3;
  v76 = (std::__shared_weak_count_vtbl *)v158;
  v146 = v158;
  if (v158)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v76;
  }
  else
  {
    v77 = 0;
  }
  v147 = v77;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 184))(v75, &v146);
  v78 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v176);
  v82 = v177;
  if (v177 == v176)
  {
    v83 = 4;
    v82 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_101;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_101:
  v84 = *a3;
  v174[0] = &off_1EA9A00F8;
  v174[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreaterEqual;
  v175 = v174;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 216))(v84, v174);
  v85 = v175;
  if (v175 == v174)
  {
    v86 = 4;
    v85 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v164);
  v87 = v164;
  std::string::basic_string[abi:ne180100]<0>(v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v145 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v90 = v145;
  if (v145)
  {
    v91 = (unint64_t *)&v145->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v164;
  std::string::basic_string[abi:ne180100]<0>(v136, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v139 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v137 < 0)
    operator delete(v136[0]);
  v101 = *a3;
  v132 = v164;
  if (v164)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v164;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v164 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v164;
  v164 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v162);
  v108 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v164, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v167, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int8");
  std::string::basic_string[abi:ne180100]<0>(v170, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v164, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v108->~__shared_weak_count
   + 3))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v170[i + 2]) < 0)
      operator delete((void *)v170[i]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v162;
  if (v162)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v162;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v162;
  v162 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v158)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08A4544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Less::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t i;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  __n128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  __n128 v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  std::__shared_weak_count_vtbl *v162;
  _QWORD *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168[3];
  uint64_t v169[3];
  _QWORD v170[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v172;
  void (__cdecl **v173)(std::__shared_weak_count *__hidden);
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _QWORD v180[3];
  _QWORD *v181;
  uint64_t v182[2];

  v182[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v172 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v173 = &v8->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v158 = v10;
  *v10 = v9;
  v159 = v10 + 1;
  v160 = v10 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v156 = v12 + 1;
  v157 = v12 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v15 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v172 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v173 = &v19->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v158 = v21;
  *v21 = v20;
  v159 = v21 + 1;
  v160 = v21 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v156 = v23 + 1;
  v157 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v162);
  v24 = v162;
  v162 = 0;
  if (v24)
    (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  v25 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v26 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v164 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v164, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v172 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v173 = &v31->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v162);
  v32 = v162;
  v158 = v162;
  if (v162)
  {
    v33 = (_QWORD *)operator new();
    v34 = v162;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v159 = v33;
  v162 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v167[1] = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v158 = 0;
    v159 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v164 = v49;
    v165 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v166 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v167[0] = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v164);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v158 = 0;
    v159 = 0;
  }
  v29[1] = v37;
  v51 = v162;
  v162 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  v52 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v53 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v163;
  *(_QWORD *)&v150 = v163;
  if (v163)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v150 + 1) = v56;
  v163 = 0;
  *(_QWORD *)&v149 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v149 + 1) = v57;
  __p = 0;
  v180[0] = &unk_1EA99FAC8;
  v180[1] = MIL::Validation::ValidateViaTypeInference;
  v181 = v180;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v59 = v179;
  if (v179 == v178)
  {
    v60 = 4;
    v59 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v181;
  if (v181 == v180)
  {
    v62 = 4;
    v61 = v180;
    goto LABEL_68;
  }
  if (v181)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v158 = 0;
  v69 = (_OWORD *)operator new();
  *v69 = 0u;
  v69[1] = 0u;
  *((_DWORD *)v69 + 8) = 1065353216;
  v158 = v69;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v164);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v69, "minimum_compute_type", (uint64_t *)&v164);
  v71 = v164;
  v164 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v73 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = *a3;
  v76 = (std::__shared_weak_count_vtbl *)v158;
  v146 = v158;
  if (v158)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v76;
  }
  else
  {
    v77 = 0;
  }
  v147 = v77;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 184))(v75, &v146);
  v78 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v176);
  v82 = v177;
  if (v177 == v176)
  {
    v83 = 4;
    v82 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_101;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_101:
  v84 = *a3;
  v174[0] = &off_1EA9A00F8;
  v174[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLess;
  v175 = v174;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 216))(v84, v174);
  v85 = v175;
  if (v175 == v174)
  {
    v86 = 4;
    v85 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v164);
  v87 = v164;
  std::string::basic_string[abi:ne180100]<0>(v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v145 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v90 = v145;
  if (v145)
  {
    v91 = (unint64_t *)&v145->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v164;
  std::string::basic_string[abi:ne180100]<0>(v136, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v139 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v137 < 0)
    operator delete(v136[0]);
  v101 = *a3;
  v132 = v164;
  if (v164)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v164;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v164 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v164;
  v164 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v162);
  v108 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v164, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v167, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int8");
  std::string::basic_string[abi:ne180100]<0>(v170, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v164, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v108->~__shared_weak_count
   + 3))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v170[i + 2]) < 0)
      operator delete((void *)v170[i]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v162;
  if (v162)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v162;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v162;
  v162 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v158)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08A58B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::LessEqual::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t i;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  __n128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  __n128 v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  std::__shared_weak_count_vtbl *v162;
  _QWORD *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168[3];
  uint64_t v169[3];
  _QWORD v170[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v172;
  void (__cdecl **v173)(std::__shared_weak_count *__hidden);
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _QWORD v180[3];
  _QWORD *v181;
  uint64_t v182[2];

  v182[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v172 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v173 = &v8->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v158 = v10;
  *v10 = v9;
  v159 = v10 + 1;
  v160 = v10 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v156 = v12 + 1;
  v157 = v12 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v15 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v172 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v173 = &v19->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v158 = v21;
  *v21 = v20;
  v159 = v21 + 1;
  v160 = v21 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v156 = v23 + 1;
  v157 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v162);
  v24 = v162;
  v162 = 0;
  if (v24)
    (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  v25 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v26 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v164 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v164, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v172 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v173 = &v31->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v162);
  v32 = v162;
  v158 = v162;
  if (v162)
  {
    v33 = (_QWORD *)operator new();
    v34 = v162;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v159 = v33;
  v162 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v167[1] = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v158 = 0;
    v159 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v164 = v49;
    v165 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v166 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v167[0] = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v164);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v158 = 0;
    v159 = 0;
  }
  v29[1] = v37;
  v51 = v162;
  v162 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  v52 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v53 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v163;
  *(_QWORD *)&v150 = v163;
  if (v163)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v150 + 1) = v56;
  v163 = 0;
  *(_QWORD *)&v149 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v149 + 1) = v57;
  __p = 0;
  v180[0] = &unk_1EA99FAC8;
  v180[1] = MIL::Validation::ValidateViaTypeInference;
  v181 = v180;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v59 = v179;
  if (v179 == v178)
  {
    v60 = 4;
    v59 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v181;
  if (v181 == v180)
  {
    v62 = 4;
    v61 = v180;
    goto LABEL_68;
  }
  if (v181)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v158 = 0;
  v69 = (_OWORD *)operator new();
  *v69 = 0u;
  v69[1] = 0u;
  *((_DWORD *)v69 + 8) = 1065353216;
  v158 = v69;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v164);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v69, "minimum_compute_type", (uint64_t *)&v164);
  v71 = v164;
  v164 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v73 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = *a3;
  v76 = (std::__shared_weak_count_vtbl *)v158;
  v146 = v158;
  if (v158)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v76;
  }
  else
  {
    v77 = 0;
  }
  v147 = v77;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 184))(v75, &v146);
  v78 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v176);
  v82 = v177;
  if (v177 == v176)
  {
    v83 = 4;
    v82 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_101;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_101:
  v84 = *a3;
  v174[0] = &off_1EA9A00F8;
  v174[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLessEqual;
  v175 = v174;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 216))(v84, v174);
  v85 = v175;
  if (v175 == v174)
  {
    v86 = 4;
    v85 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v164);
  v87 = v164;
  std::string::basic_string[abi:ne180100]<0>(v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v145 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v90 = v145;
  if (v145)
  {
    v91 = (unint64_t *)&v145->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v164;
  std::string::basic_string[abi:ne180100]<0>(v136, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v139 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v137 < 0)
    operator delete(v136[0]);
  v101 = *a3;
  v132 = v164;
  if (v164)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v164;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v164 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v164;
  v164 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v162);
  v108 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v164, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v167, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int8");
  std::string::basic_string[abi:ne180100]<0>(v170, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v164, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v108->~__shared_weak_count
   + 3))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v170[i + 2]) < 0)
      operator delete((void *)v170[i]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v162;
  if (v162)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v162;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v162;
  v162 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v158)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08A6C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::NotEqual::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t i;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  __n128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  __n128 v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  std::__shared_weak_count_vtbl *v162;
  _QWORD *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168[3];
  uint64_t v169[3];
  _QWORD v170[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v172;
  void (__cdecl **v173)(std::__shared_weak_count *__hidden);
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _QWORD v180[3];
  _QWORD *v181;
  uint64_t v182[2];

  v182[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v172 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v173 = &v8->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v158 = v10;
  *v10 = v9;
  v159 = v10 + 1;
  v160 = v10 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v156 = v12 + 1;
  v157 = v12 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v15 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v172 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v173 = &v19->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v158 = v21;
  *v21 = v20;
  v159 = v21 + 1;
  v160 = v21 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v156 = v23 + 1;
  v157 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v162);
  v24 = v162;
  v162 = 0;
  if (v24)
    (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  v25 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v26 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v164 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v164, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v172 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v173 = &v31->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v162);
  v32 = v162;
  v158 = v162;
  if (v162)
  {
    v33 = (_QWORD *)operator new();
    v34 = v162;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v159 = v33;
  v162 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v167[1] = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v158 = 0;
    v159 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v164 = v49;
    v165 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v166 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v167[0] = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v164);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v158 = 0;
    v159 = 0;
  }
  v29[1] = v37;
  v51 = v162;
  v162 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  v52 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v53 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v163;
  *(_QWORD *)&v150 = v163;
  if (v163)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v150 + 1) = v56;
  v163 = 0;
  *(_QWORD *)&v149 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v149 + 1) = v57;
  __p = 0;
  v180[0] = &unk_1EA99FAC8;
  v180[1] = MIL::Validation::ValidateViaTypeInference;
  v181 = v180;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v59 = v179;
  if (v179 == v178)
  {
    v60 = 4;
    v59 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v181;
  if (v181 == v180)
  {
    v62 = 4;
    v61 = v180;
    goto LABEL_68;
  }
  if (v181)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v158 = 0;
  v69 = (_OWORD *)operator new();
  *v69 = 0u;
  v69[1] = 0u;
  *((_DWORD *)v69 + 8) = 1065353216;
  v158 = v69;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v164);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v69, "minimum_compute_type", (uint64_t *)&v164);
  v71 = v164;
  v164 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v73 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = *a3;
  v76 = (std::__shared_weak_count_vtbl *)v158;
  v146 = v158;
  if (v158)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v76;
  }
  else
  {
    v77 = 0;
  }
  v147 = v77;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 184))(v75, &v146);
  v78 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v176);
  v82 = v177;
  if (v177 == v176)
  {
    v83 = 4;
    v82 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_101;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_101:
  v84 = *a3;
  v174[0] = &off_1EA9A00F8;
  v174[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceNotEqual;
  v175 = v174;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 216))(v84, v174);
  v85 = v175;
  if (v175 == v174)
  {
    v86 = 4;
    v85 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v164);
  v87 = v164;
  std::string::basic_string[abi:ne180100]<0>(v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v145 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v90 = v145;
  if (v145)
  {
    v91 = (unint64_t *)&v145->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v164;
  std::string::basic_string[abi:ne180100]<0>(v136, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v139 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v137 < 0)
    operator delete(v136[0]);
  v101 = *a3;
  v132 = v164;
  if (v164)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v164;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v164 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v164;
  v164 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v162);
  v108 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v164, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v167, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int8");
  std::string::basic_string[abi:ne180100]<0>(v170, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v164, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v108->~__shared_weak_count
   + 3))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v170[i + 2]) < 0)
      operator delete((void *)v170[i]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v162;
  if (v162)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v162;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v162;
  v162 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v158)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08A7F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::FloorDiv::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v201[0] = &unk_1EA99FAC8;
  v201[1] = MIL::Validation::ValidateViaTypeInference;
  v202 = v201;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceFloorDiv;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08A9518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Maximum::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v201[0] = &unk_1EA99FAC8;
  v201[1] = MIL::Validation::ValidateViaTypeInference;
  v202 = v201;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMaximum;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08AABB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Minimum::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v201[0] = &unk_1EA99FAC8;
  v201[1] = MIL::Validation::ValidateViaTypeInference;
  v202 = v201;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMinimum;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08AC248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Mod::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v201[0] = &unk_1EA99FAC8;
  v201[1] = MIL::Validation::ValidateViaTypeInference;
  v202 = v201;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMod;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08AD8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Mul::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v201[0] = &unk_1EA99FAC8;
  v201[1] = MIL::Validation::ValidateViaTypeInference;
  v202 = v201;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMul;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08AEF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Pow::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v201[0] = &unk_1EA99FAC8;
  v201[1] = MIL::Validation::ValidateViaTypeInference;
  v202 = v201;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferencePow;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08B0610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::RealDiv::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v201[0] = &unk_1EA99FAC8;
  v201[1] = MIL::Validation::ValidateViaTypeInference;
  v202 = v201;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRealDiv;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08B1CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Sub::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v201[0] = &unk_1EA99FAC8;
  v201[1] = MIL::Validation::ValidateViaTypeInference;
  v202 = v201;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSub;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08B3340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceCast(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCast(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E08B3950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceCast(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCast(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08B39E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateClip(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  const void *ParameterValue;
  const void *v6;
  MIL::IRValueType *v7;
  uint64_t v8;
  int v9;
  float Float;
  float v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  void *v24[2];
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *v32[2];
  char v33;

  std::string::basic_string[abi:ne180100]<0>(v32, "alpha");
  ParameterValue = (const void *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v32, 0);
  if (v33 < 0)
    operator delete(v32[0]);
  std::string::basic_string[abi:ne180100]<0>(v32, "beta");
  v6 = (const void *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v32, 0);
  if (v33 < 0)
  {
    operator delete(v32[0]);
    if (!ParameterValue)
    {
LABEL_13:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  else if (!ParameterValue)
  {
    goto LABEL_13;
  }
  if (!v6)
    goto LABEL_13;
  v7 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(_QWORD *)ParameterValue + 32))(ParameterValue);
  v8 = MIL::IRValueType::AsTensorType(v7);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
  if (v9 == 4)
  {
    LOWORD(v32[0]) = MIL::IRValue::GetScalar<MIL::Fp16>(ParameterValue);
    Float = MIL::Fp16::GetFloat((MIL::Fp16 *)v32);
    LOWORD(v32[0]) = MIL::IRValue::GetScalar<MIL::Fp16>(v6);
    v11 = MIL::Fp16::GetFloat((MIL::Fp16 *)v32);
LABEL_12:
    if (v11 > Float)
      goto LABEL_13;
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v20 = (std::__shared_weak_count *)LocationPtr[1];
    v26 = *LocationPtr;
    v27 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v24, "Invalid alpha, beta input values for clip");
    MIL::ValidationResult::ValidationResult(a2, &v26, 319, v24);
    if (v25 < 0)
      operator delete(v24[0]);
    v16 = v27;
    if (v27)
    {
      v23 = (unint64_t *)&v27->__shared_owners_;
      do
        v18 = __ldaxr(v23);
      while (__stlxr(v18 - 1, v23));
LABEL_32:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      return;
    }
    return;
  }
  if (v9 == 5)
  {
    Float = MIL::IRValue::GetScalar<float>(ParameterValue);
    v11 = MIL::IRValue::GetScalar<float>(v6);
    goto LABEL_12;
  }
  v12 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v13 = (std::__shared_weak_count *)v12[1];
  v30 = *v12;
  v31 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Unexpected dType for clip input alpha.");
  MIL::ValidationResult::ValidationResult(a2, &v30, 319, __p);
  if (v29 < 0)
    operator delete(__p[0]);
  v16 = v31;
  if (v31)
  {
    v17 = (unint64_t *)&v31->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    goto LABEL_32;
  }
}

void sub_1E08B3C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceClip(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceClip(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08B3D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Cast::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  void **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  char *v68;
  char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  char **v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _OWORD *v88;
  unsigned __int8 *v89;
  void **v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  void **v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  char *v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  void **v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void **v126;
  void *v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  uint64_t i;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  void *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  uint64_t j;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t result;
  uint64_t v152;
  void *v153;
  std::__shared_weak_count *v154;
  void *v155[2];
  char v156;
  void *v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  void *v161;
  std::__shared_weak_count *v162;
  void **v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  char *v167;
  std::__shared_weak_count *v168;
  void *v169[2];
  char v170;
  void *v171[2];
  char v172;
  char *v173;
  std::__shared_weak_count *v174;
  void *v175;
  std::__shared_weak_count *v176;
  __n128 v177;
  __int128 v178;
  __int128 v179;
  void *v180[2];
  uint64_t v181;
  void *v182;
  void *v183;
  _QWORD *v184;
  __n128 v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  char **v189;
  __n128 v190;
  void *__p;
  void *v192;
  _QWORD *v193;
  void *v194;
  void *v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  void *v200;
  void *v201;
  _QWORD *v202;
  void *v203;
  void *v204;
  _QWORD *v205;
  void *v206;
  void *v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  _QWORD *v211;
  __n128 v212;
  _QWORD *v213;
  void **v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD v222[3];
  _QWORD v223[3];
  _QWORD v224[3];
  _QWORD v225[3];
  _QWORD v226[3];
  _QWORD v227[3];
  _QWORD *v228;
  _QWORD v229[3];
  _QWORD *v230;
  _BYTE v231[24];
  _BYTE *v232;
  _QWORD v233[3];
  _QWORD *v234;
  char *Scalar;
  char *v236;
  char *v237;
  char *v238;
  char **v239;
  uint64_t v240;

  v240 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v213 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v236 = v8 + 8;
  v237 = v8 + 8;
  v214 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v209 = v10;
  *v10 = v9;
  v211 = v10 + 1;
  v210 = v10 + 1;
  v215 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v209);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v206 = v12;
  *v12 = v11;
  v208 = v12 + 1;
  v207 = v12 + 1;
  v216 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v206);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v203 = v14;
  *v14 = v13;
  v204 = v14 + 1;
  v205 = v14 + 1;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v203);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v200 = v16;
  *v16 = v15;
  v201 = v16 + 1;
  v202 = v16 + 1;
  v218 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v200);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v197 = v18;
  *v18 = v17;
  v198 = v18 + 1;
  v199 = v18 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v197);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v194 = v20;
  *v20 = v19;
  v195 = v20 + 1;
  v196 = v20 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v194);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v192 = v22 + 1;
  v193 = v22 + 1;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v214, 8, &v212);
  MIL::IRParameter::Make(&v212, (uint64_t *)&v182);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v182);
  v23 = v182;
  v182 = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v212.n128_u64[1];
  if (v212.n128_u64[1])
  {
    v25 = (unint64_t *)(v212.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p)
  {
    v192 = __p;
    operator delete(__p);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (Scalar)
  {
    v236 = Scalar;
    operator delete(Scalar);
  }
  v27 = v213;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v190);
  MIL::IRParameter::Make(&v190, (uint64_t *)&v214);
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v27, "dtype", (uint64_t *)&v214);
  v29 = v214;
  v214 = 0;
  if (v29)
    (*((void (**)(void **))*v29 + 1))(v29);
  v30 = (std::__shared_weak_count *)v190.n128_u64[1];
  if (v190.n128_u64[1])
  {
    v31 = (unint64_t *)(v190.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v189 = 0;
  v33 = operator new();
  *(_QWORD *)v33 = 0;
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 16) = 0;
  v214 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v189, (void **)v33);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v214, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v189, 1uLL);
  v34 = v189;
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v209 = v36;
  *v36 = v35;
  v211 = v36 + 1;
  v210 = v36 + 1;
  v214 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v209);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v206 = v38;
  *v38 = v37;
  v208 = v38 + 1;
  v207 = v38 + 1;
  v215 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v206);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v203 = v40;
  *v40 = v39;
  v204 = v40 + 1;
  v205 = v40 + 1;
  v216 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v203);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v200 = v42;
  *v42 = v41;
  v201 = v42 + 1;
  v202 = v42 + 1;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v200);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v197 = v44;
  *v44 = v43;
  v198 = v44 + 1;
  v199 = v44 + 1;
  v218 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v197);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v194 = v46;
  *v46 = v45;
  v195 = v46 + 1;
  v196 = v46 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v194);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  __p = v48;
  *v48 = v47;
  v192 = v48 + 1;
  v193 = v48 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v182 = v50;
  *v50 = v49;
  v183 = v50 + 1;
  v184 = v50 + 1;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v182);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v214, 8, &v185);
  MIL::IRParameter::Make(&v185, &v186);
  v51 = v186;
  v187 = v186;
  if (v186)
  {
    v52 = (_QWORD *)operator new();
    v53 = v186;
    *v52 = &unk_1EA99F888;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  v188 = v52;
  v186 = 0;
  v54 = v34[2];
  v55 = v34[1];
  if (v55 >= v54)
  {
    v57 = (v55 - *v34) >> 4;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v59 = v54 - *v34;
    if (v59 >> 3 > v58)
      v58 = v59 >> 3;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
      v60 = 0xFFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    v239 = v34 + 2;
    v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v34 + 2), v60);
    v63 = (uint64_t *)&v61[16 * v57];
    *v63 = v51;
    v63[1] = (uint64_t)v52;
    v187 = 0;
    v188 = 0;
    v65 = *v34;
    v64 = v34[1];
    if (v64 == *v34)
    {
      v68 = v34[1];
      v66 = &v61[16 * v57];
    }
    else
    {
      v66 = &v61[16 * v57];
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v64 -= 16;
        *((_OWORD *)v66 - 1) = v67;
        v66 -= 16;
        *(_QWORD *)v64 = 0;
        *((_QWORD *)v64 + 1) = 0;
      }
      while (v64 != v65);
      v68 = *v34;
      v64 = v34[1];
    }
    v56 = (char *)(v63 + 2);
    *v34 = v66;
    Scalar = v68;
    v236 = v68;
    v34[1] = (char *)(v63 + 2);
    v237 = v64;
    v69 = v34[2];
    v34[2] = &v61[16 * v62];
    v238 = v69;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v55 = v51;
    *((_QWORD *)v55 + 1) = v52;
    v56 = v55 + 16;
    v187 = 0;
    v188 = 0;
  }
  v34[1] = v56;
  v70 = v186;
  v186 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v72 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  if (__p)
  {
    v192 = __p;
    operator delete(__p);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  *(_OWORD *)v180 = *(_OWORD *)a2;
  v181 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v74 = (uint64_t)v213;
  *(_QWORD *)&v179 = v213;
  if (v213)
  {
    v75 = (_QWORD *)operator new();
    *v75 = &unk_1EA99F8E8;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = v74;
  }
  else
  {
    v75 = 0;
  }
  *((_QWORD *)&v179 + 1) = v75;
  v213 = 0;
  *(_QWORD *)&v178 = v189;
  if (v189)
  {
    v76 = (_QWORD *)operator new();
    v77 = v189;
    *v76 = &unk_1EA99F948;
    v76[1] = 0;
    v76[2] = 0;
    v76[3] = v77;
  }
  else
  {
    v76 = 0;
  }
  *((_QWORD *)&v178 + 1) = v76;
  v189 = 0;
  v233[0] = &unk_1EA99FAC8;
  v233[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateCast;
  v234 = v233;
  v232 = 0;
  MIL::IROperator::Make((__int128 *)v180, &v179, &v178, (uint64_t)v233, (uint64_t)v231, a3);
  v78 = v232;
  if (v232 == v231)
  {
    v79 = 4;
    v78 = v231;
  }
  else
  {
    if (!v232)
      goto LABEL_82;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_82:
  v80 = v234;
  if (v234 == v233)
  {
    v81 = 4;
    v80 = v233;
    goto LABEL_86;
  }
  if (v234)
  {
    v81 = 5;
LABEL_86:
    (*(void (**)(void))(*v80 + 8 * v81))();
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  if (*((_QWORD *)&v178 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
  if (*((_QWORD *)&v179 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (SHIBYTE(v181) < 0)
    operator delete(v180[0]);
  v209 = 0;
  v88 = (_OWORD *)operator new();
  *v88 = 0u;
  v88[1] = 0u;
  *((_DWORD *)v88 + 8) = 1065353216;
  v209 = v88;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v214);
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v88, "minimum_compute_type", (uint64_t *)&v214);
  v90 = v214;
  v214 = 0;
  if (v90)
    (*((void (**)(void **))*v90 + 1))(v90);
  v91 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v92 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 32))(*((_QWORD *)v89 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 48))(*((_QWORD *)v89 + 5), 1);
  v94 = *a3;
  v95 = (std::__shared_weak_count_vtbl *)v209;
  v175 = v209;
  if (v209)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v95;
  }
  else
  {
    v96 = 0;
  }
  v176 = v96;
  v209 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 184))(v94, &v175);
  v97 = v176;
  if (v176)
  {
    p_shared_owners = (unint64_t *)&v176->__shared_owners_;
    do
      v99 = __ldaxr(p_shared_owners);
    while (__stlxr(v99 - 1, p_shared_owners));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = *a3;
  v229[0] = &off_1EA99FBD8;
  v229[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceCast;
  v230 = v229;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v100 + 200))(v100, v229);
  v101 = v230;
  if (v230 == v229)
  {
    v102 = 4;
    v101 = v229;
  }
  else
  {
    if (!v230)
      goto LABEL_119;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_119:
  v103 = *a3;
  v227[0] = &off_1EA9A00F8;
  v227[1] = MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceCast;
  v228 = v227;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v103 + 216))(v103, v227);
  v104 = v228;
  if (v228 == v227)
  {
    v105 = 4;
    v104 = v227;
  }
  else
  {
    if (!v228)
      goto LABEL_124;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_124:
  MIL::Validation::TensorDTypeConstraints::Make(&v214);
  v106 = v214;
  std::string::basic_string[abi:ne180100]<0>(v171, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v171, 0, (uint64_t *)&Scalar);
  v173 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v174 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v169, "T");
  (*((void (**)(void **, char **, void **))*v106 + 3))(v106, &v173, v169);
  if (v170 < 0)
    operator delete(v169[0]);
  v109 = v174;
  if (v174)
  {
    v110 = (unint64_t *)&v174->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(char *))(*(_QWORD *)v112 + 8))(v112);
  if (v172 < 0)
    operator delete(v171[0]);
  v113 = v214;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v167 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v168 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "T_Out");
  (*((void (**)(void **, char **, void **))*v113 + 3))(v113, &v167, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v116 = v168;
  if (v168)
  {
    v117 = (unint64_t *)&v168->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*(void (**)(char *))(*(_QWORD *)v119 + 8))(v119);
  v120 = *a3;
  v163 = v214;
  if (v214)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = v214;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = (std::__shared_weak_count_vtbl *)v122;
  }
  else
  {
    v121 = 0;
  }
  v164 = v121;
  v214 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v120 + 56))(v120, &v163);
  v123 = v164;
  if (v164)
  {
    v124 = (unint64_t *)&v164->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v214;
  v214 = 0;
  if (v126)
    (*((void (**)(void **))*v126 + 1))(v126);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v206);
  v127 = v206;
  std::string::basic_string[abi:ne180100]<0>(v159, "dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v159, 0, (uint64_t *)&v203);
  v161 = v203;
  if (v203)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = (std::__shared_weak_count_vtbl *)v203;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v162 = v128;
  v203 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v214, "BOOL");
  std::string::basic_string[abi:ne180100]<0>(&v217, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v220, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v222, "int16");
  std::string::basic_string[abi:ne180100]<0>(v223, "int32");
  std::string::basic_string[abi:ne180100]<0>(v224, "int8");
  std::string::basic_string[abi:ne180100]<0>(v225, "uint16");
  std::string::basic_string[abi:ne180100]<0>(v226, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v214, 8);
  (*(void (**)(void *, void **, char **, uint64_t))(*(_QWORD *)v127 + 24))(v127, &v161, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v226[i + 2]) < 0)
      operator delete((void *)v226[i]);
  }
  v131 = v162;
  if (v162)
  {
    v132 = (unint64_t *)&v162->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v203;
  v203 = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (v160 < 0)
    operator delete(v159[0]);
  v135 = v206;
  std::string::basic_string[abi:ne180100]<0>(v155, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v155, 1, (uint64_t *)&v203);
  v157 = v203;
  if (v203)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = (std::__shared_weak_count_vtbl *)v203;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v158 = v136;
  v203 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v214, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v217, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v220, "int16");
  std::string::basic_string[abi:ne180100]<0>(v222, "int32");
  std::string::basic_string[abi:ne180100]<0>(v223, "int8");
  std::string::basic_string[abi:ne180100]<0>(v224, "uint16");
  std::string::basic_string[abi:ne180100]<0>(v225, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v214, 7);
  (*(void (**)(void *, void **, char **, uint64_t))(*(_QWORD *)v135 + 24))(v135, &v157, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -21; j -= 3)
  {
    if (SHIBYTE(v225[j + 2]) < 0)
      operator delete((void *)v225[j]);
  }
  v139 = v158;
  if (v158)
  {
    v140 = (unint64_t *)&v158->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v203;
  v203 = 0;
  if (v142)
    (*(void (**)(void *))(*(_QWORD *)v142 + 8))(v142);
  if (v156 < 0)
    operator delete(v155[0]);
  v143 = *a3;
  v153 = v206;
  if (v206)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = (std::__shared_weak_count_vtbl *)v206;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v154 = v144;
  v206 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v143 + 56))(v143, &v153);
  v146 = v154;
  if (v154)
  {
    v147 = (unint64_t *)&v154->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v206;
  v206 = 0;
  if (v149)
    (*(void (**)(void *))(*(_QWORD *)v149 + 8))(v149);
  if (v209)
  {
    v150 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v209);
    MEMORY[0x1E0C023A0](v150, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v189, 0);
  result = (uint64_t)v213;
  if (v213)
  {
    v152 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v213);
    return MEMORY[0x1E0C023A0](v152, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08B50DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void **a56)
{
  uint64_t *v56;
  unint64_t v58;
  uint64_t v59;

  v58 = STACK[0x208];
  STACK[0x208] = 0;
  if (v58)
    (*(void (**)(unint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x220], 0);
  v59 = *v56;
  *v56 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x248], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::ElementwiseUnary::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char **v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD *v60;
  unsigned __int8 *v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  uint64_t i;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t result;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  __n128 v134;
  __int128 v135;
  __int128 v136;
  void *v137[2];
  uint64_t v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  char **v143;
  __n128 v144;
  uint64_t v145;
  void *v146;
  void *v147;
  char *v148;
  _QWORD v149[3];
  uint64_t v150[3];
  uint64_t v151[3];
  void *v152[3];
  void *__p;
  void *v154;
  _QWORD *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  _BYTE v160[24];
  _BYTE *v161;
  std::__shared_weak_count_vtbl *v162;
  uint64_t v163;
  void (__cdecl **v164)(std::__shared_weak_count *__hidden);
  uint64_t v165[3];

  v165[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v145 = v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v146 = v10;
  *v10 = v9;
  v147 = v10 + 1;
  v148 = (char *)(v10 + 1);
  v162 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v146);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v154 = v12 + 1;
  v155 = v12 + 1;
  v163 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v162, 2, &v144);
  MIL::IRParameter::Make(&v144, &v141);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v141);
  v13 = v141;
  v141 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v15 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v154 = __p;
    operator delete(__p);
  }
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  v143 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v146 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v143, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v146, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v143, 1uLL);
  v18 = v143;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  __p = v20;
  *v20 = v19;
  v154 = v20 + 1;
  v155 = v20 + 1;
  v165[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v162 = v22;
  v22->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  v163 = (uint64_t)&v22->~__shared_weak_count_0;
  v164 = &v22->~__shared_weak_count_0;
  v165[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  MIL::IRParameter::MakeTypeSet((uint64_t)v165, 2, &v139);
  MIL::IRParameter::Make(&v139, &v140);
  v23 = v140;
  v141 = v140;
  if (v140)
  {
    v24 = (_QWORD *)operator new();
    v25 = v140;
    *v24 = &unk_1EA99F888;
    v24[1] = 0;
    v24[2] = 0;
    v24[3] = v25;
  }
  else
  {
    v24 = 0;
  }
  v142 = v24;
  v140 = 0;
  v26 = v18[2];
  v27 = v18[1];
  if (v27 >= v26)
  {
    v29 = (v27 - *v18) >> 4;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v31 = v26 - *v18;
    if (v31 >> 3 > v30)
      v30 = v31 >> 3;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
      v32 = 0xFFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    v149[1] = v18 + 2;
    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v32);
    v35 = (uint64_t *)&v33[16 * v29];
    *v35 = v23;
    v35[1] = (uint64_t)v24;
    v141 = 0;
    v142 = 0;
    v37 = *v18;
    v36 = v18[1];
    if (v36 == *v18)
    {
      v40 = v18[1];
      v38 = &v33[16 * v29];
    }
    else
    {
      v38 = &v33[16 * v29];
      do
      {
        v39 = *((_OWORD *)v36 - 1);
        v36 -= 16;
        *((_OWORD *)v38 - 1) = v39;
        v38 -= 16;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
      }
      while (v36 != v37);
      v40 = *v18;
      v36 = v18[1];
    }
    v28 = (char *)(v35 + 2);
    *v18 = v38;
    v146 = v40;
    v147 = v40;
    v18[1] = (char *)(v35 + 2);
    v148 = v36;
    v41 = v18[2];
    v18[2] = &v33[16 * v34];
    v149[0] = v41;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v146);
  }
  else
  {
    *(_QWORD *)v27 = v23;
    *((_QWORD *)v27 + 1) = v24;
    v28 = v27 + 16;
    v141 = 0;
    v142 = 0;
  }
  v18[1] = v28;
  v42 = v140;
  v140 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v44 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v162)
  {
    v163 = (uint64_t)v162;
    operator delete(v162);
  }
  if (__p)
  {
    v154 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v137 = *(_OWORD *)a2;
  v138 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v46 = v145;
  *(_QWORD *)&v136 = v145;
  if (v145)
  {
    v47 = (_QWORD *)operator new();
    *v47 = &unk_1EA99F8E8;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v46;
  }
  else
  {
    v47 = 0;
  }
  *((_QWORD *)&v136 + 1) = v47;
  v145 = 0;
  *(_QWORD *)&v135 = v143;
  if (v143)
  {
    v48 = (_QWORD *)operator new();
    v49 = v143;
    *v48 = &unk_1EA99F948;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v49;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v135 + 1) = v48;
  v143 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v160, a3);
  v159 = 0;
  MIL::IROperator::Make((__int128 *)v137, &v136, &v135, (uint64_t)v160, (uint64_t)v158, a4);
  v50 = v159;
  if (v159 == v158)
  {
    v51 = 4;
    v50 = v158;
  }
  else
  {
    if (!v159)
      goto LABEL_51;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_51:
  v52 = v161;
  if (v161 == v160)
  {
    v53 = 4;
    v52 = v160;
    goto LABEL_55;
  }
  if (v161)
  {
    v53 = 5;
LABEL_55:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
  if (*((_QWORD *)&v135 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (SHIBYTE(v138) < 0)
    operator delete(v137[0]);
  v162 = 0;
  v60 = (_OWORD *)operator new();
  *v60 = 0u;
  v60[1] = 0u;
  *((_DWORD *)v60 + 8) = 1065353216;
  v162 = (std::__shared_weak_count_vtbl *)v60;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v134);
  MIL::IRParameter::Make(&v134, (uint64_t *)&v146);
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v60, "minimum_compute_type", (uint64_t *)&v146);
  v62 = v146;
  v146 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v134.n128_u64[1];
  if (v134.n128_u64[1])
  {
    v64 = (unint64_t *)(v134.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 32))(*((_QWORD *)v61 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 48))(*((_QWORD *)v61 + 5), 1);
  v66 = *a4;
  v67 = v162;
  v132 = v162;
  if (v162)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v67;
  }
  else
  {
    v68 = 0;
  }
  v133 = v68;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v66 + 184))(v66, &v132);
  v69 = v133;
  if (v133)
  {
    p_shared_owners = (unint64_t *)&v133->__shared_owners_;
    do
      v71 = __ldaxr(p_shared_owners);
    while (__stlxr(v71 - 1, p_shared_owners));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v146, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v146, (uint64_t)v156);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v72 + 200))(v72, v156);
  v73 = v157;
  if (v157 == v156)
  {
    v74 = 4;
    v73 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_88;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_88:
  if (SHIBYTE(v148) < 0)
    operator delete(v146);
  MIL::Validation::TensorDTypeConstraints::Make(&v146);
  v75 = v146;
  std::string::basic_string[abi:ne180100]<0>(v128, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&__p);
  v130 = __p;
  if (__p)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = (std::__shared_weak_count_vtbl *)__p;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v131 = v76;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v75 + 24))(v75, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v78 = v131;
  if (v131)
  {
    v79 = (unint64_t *)&v131->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = __p;
  __p = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  if (v129 < 0)
    operator delete(v128[0]);
  v82 = v146;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v124 = __p;
  if (__p)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)__p;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v125 = v83;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v82 + 24))(v82, &v124, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v85 = v125;
  if (v125)
  {
    v86 = (unint64_t *)&v125->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = *a4;
  v120 = v146;
  if (v146)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = (std::__shared_weak_count_vtbl *)v146;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v121 = v90;
  v146 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v89 + 56))(v89, &v120);
  v92 = v121;
  if (v121)
  {
    v93 = (unint64_t *)&v121->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v146;
  v146 = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v141);
  v96 = v141;
  std::string::basic_string[abi:ne180100]<0>(v116, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v116, 1, v165);
  v118 = v165[0];
  if (v165[0])
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v165[0];
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = (std::__shared_weak_count_vtbl *)v98;
  }
  else
  {
    v97 = 0;
  }
  v119 = v97;
  v165[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v146, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v149, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v150, "int32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int8");
  std::string::basic_string[abi:ne180100]<0>(v152, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v146, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v96 + 24))(v96, &v118, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v152[i + 2]) < 0)
      operator delete(v152[i]);
  }
  v100 = v119;
  if (v119)
  {
    v101 = (unint64_t *)&v119->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v165[0];
  v165[0] = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  if (v117 < 0)
    operator delete(v116[0]);
  v104 = *a4;
  v114 = v141;
  if (v141)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v141;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v115 = v105;
  v141 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v104 + 56))(v104, &v114);
  v107 = v115;
  if (v115)
  {
    v108 = (unint64_t *)&v115->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v141;
  v141 = 0;
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  if (v162)
  {
    v111 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v162);
    MEMORY[0x1E0C023A0](v111, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v143, 0);
  result = v145;
  if (v145)
  {
    v113 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v145);
    return MEMORY[0x1E0C023A0](v113, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08B648C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 128), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Acos::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAcos;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08B763C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Acosh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAcosh;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08B8820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Asin::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAsin;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08B9A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Asinh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAsinh;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08BABE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Atan::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAtan;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08BBDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Atanh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAtanh;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08BCFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Ceil::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCeil;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08BE194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Clip::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char **v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _OWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  void *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  void *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  uint64_t i;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t result;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  void *v141[2];
  char v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  void *v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149;
  std::__shared_weak_count *v150;
  void *v151[2];
  char v152;
  void *v153[2];
  char v154;
  void *v155;
  std::__shared_weak_count *v156;
  void *v157[2];
  char v158;
  void *v159[2];
  char v160;
  void *v161;
  std::__shared_weak_count *v162;
  void *v163[2];
  char v164;
  void *v165[2];
  char v166;
  void *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  __n128 v171;
  __int128 v172;
  __int128 v173;
  void *v174[2];
  uint64_t v175;
  __n128 v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  char **v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  _QWORD *v184;
  void *Scalar;
  uint64_t v186;
  char *v187;
  _QWORD v188[3];
  uint64_t v189[3];
  uint64_t v190[3];
  void *v191[3];
  void *__p;
  void *v193;
  _QWORD *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[3];
  _QWORD *v202;
  std::__shared_weak_count_vtbl *v203;
  uint64_t v204;
  void (__cdecl **v205)(std::__shared_weak_count *__hidden);
  uint64_t v206[3];

  v206[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v184 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v186 = (uint64_t)(v8 + 8);
  v187 = v8 + 8;
  v203 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v194 = v10 + 1;
  v193 = v10 + 1;
  v204 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v203, 2, &v183);
  MIL::IRParameter::Make(&v183, &v178);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v178);
  v11 = v178;
  v178 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v13 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v193 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v186 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v15 = v184;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v186 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v182);
  MIL::IRParameter::Make(&v182, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v15, "alpha", (uint64_t *)&__p);
  v16 = __p;
  __p = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v182.n128_u64[1];
  if (v182.n128_u64[1])
  {
    v18 = (unint64_t *)(v182.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v184;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v186 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v181);
  MIL::IRParameter::Make(&v181, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v20, "beta", (uint64_t *)&__p);
  v21 = __p;
  __p = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v181.n128_u64[1];
  if (v181.n128_u64[1])
  {
    v23 = (unint64_t *)(v181.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v180 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v180, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v180, 1uLL);
  v26 = v180;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  __p = v28;
  *v28 = v27;
  v194 = v28 + 1;
  v193 = v28 + 1;
  v206[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v203 = v30;
  v30->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v204 = (uint64_t)&v30->~__shared_weak_count_0;
  v205 = &v30->~__shared_weak_count_0;
  v206[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v203);
  MIL::IRParameter::MakeTypeSet((uint64_t)v206, 2, &v176);
  MIL::IRParameter::Make(&v176, &v177);
  v31 = v177;
  v178 = v177;
  if (v177)
  {
    v32 = (_QWORD *)operator new();
    v33 = v177;
    *v32 = &unk_1EA99F888;
    v32[1] = 0;
    v32[2] = 0;
    v32[3] = v33;
  }
  else
  {
    v32 = 0;
  }
  v179 = v32;
  v177 = 0;
  v34 = v26[2];
  v35 = v26[1];
  if (v35 >= v34)
  {
    v37 = (v35 - *v26) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v39 = v34 - *v26;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    v188[1] = v26 + 2;
    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v40);
    v43 = (uint64_t *)&v41[16 * v37];
    *v43 = v31;
    v43[1] = (uint64_t)v32;
    v178 = 0;
    v179 = 0;
    v45 = *v26;
    v44 = v26[1];
    if (v44 == *v26)
    {
      v48 = v26[1];
      v46 = &v41[16 * v37];
    }
    else
    {
      v46 = &v41[16 * v37];
      do
      {
        v47 = *((_OWORD *)v44 - 1);
        v44 -= 16;
        *((_OWORD *)v46 - 1) = v47;
        v46 -= 16;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
      }
      while (v44 != v45);
      v48 = *v26;
      v44 = v26[1];
    }
    v36 = (char *)(v43 + 2);
    *v26 = v46;
    Scalar = v48;
    v186 = (uint64_t)v48;
    v26[1] = (char *)(v43 + 2);
    v187 = v44;
    v49 = v26[2];
    v26[2] = &v41[16 * v42];
    v188[0] = v49;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = v32;
    v36 = v35 + 16;
    v178 = 0;
    v179 = 0;
  }
  v26[1] = v36;
  v50 = v177;
  v177 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v176.n128_u64[1];
  if (v176.n128_u64[1])
  {
    v52 = (unint64_t *)(v176.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v203)
  {
    v204 = (uint64_t)v203;
    operator delete(v203);
  }
  if (__p)
  {
    v193 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v174 = *(_OWORD *)a2;
  v175 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v54 = (uint64_t)v184;
  *(_QWORD *)&v173 = v184;
  if (v184)
  {
    v55 = (_QWORD *)operator new();
    *v55 = &unk_1EA99F8E8;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v54;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v173 + 1) = v55;
  v184 = 0;
  *(_QWORD *)&v172 = v180;
  if (v180)
  {
    v56 = (_QWORD *)operator new();
    v57 = v180;
    *v56 = &unk_1EA99F948;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v172 + 1) = v56;
  v180 = 0;
  v201[0] = &unk_1EA99FAC8;
  v201[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateClip;
  v202 = v201;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v174, &v173, &v172, (uint64_t)v201, (uint64_t)v199, a3);
  v58 = v200;
  if (v200 == v199)
  {
    v59 = 4;
    v58 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_65;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_65:
  v60 = v202;
  if (v202 == v201)
  {
    v61 = 4;
    v60 = v201;
    goto LABEL_69;
  }
  if (v202)
  {
    v61 = 5;
LABEL_69:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (*((_QWORD *)&v173 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v175) < 0)
    operator delete(v174[0]);
  v203 = 0;
  v68 = (_OWORD *)operator new();
  *v68 = 0u;
  v68[1] = 0u;
  *((_DWORD *)v68 + 8) = 1065353216;
  v203 = (std::__shared_weak_count_vtbl *)v68;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v171);
  MIL::IRParameter::Make(&v171, (uint64_t *)&Scalar);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v68, "minimum_compute_type", (uint64_t *)&Scalar);
  v70 = Scalar;
  Scalar = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v171.n128_u64[1];
  if (v171.n128_u64[1])
  {
    v72 = (unint64_t *)(v171.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = *a3;
  v75 = v203;
  v169 = v203;
  if (v203)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v75;
  }
  else
  {
    v76 = 0;
  }
  v170 = v76;
  v203 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v74 + 184))(v74, &v169);
  v77 = v170;
  if (v170)
  {
    p_shared_owners = (unint64_t *)&v170->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v80 + 200))(v80, v197);
  v81 = v198;
  if (v198 == v197)
  {
    v82 = 4;
    v81 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_102;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_102:
  if (SHIBYTE(v187) < 0)
    operator delete(Scalar);
  v83 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceClip;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v83 + 216))(v83, v195);
  v84 = v196;
  if (v196 == v195)
  {
    v85 = 4;
    v84 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_109;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_109:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v86 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v165, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v165, 0, (uint64_t *)&__p);
  v167 = __p;
  if (__p)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)__p;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v168 = v87;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v163, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v86 + 24))(v86, &v167, v163);
  if (v164 < 0)
    operator delete(v163[0]);
  v89 = v168;
  if (v168)
  {
    v90 = (unint64_t *)&v168->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = __p;
  __p = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v166 < 0)
    operator delete(v165[0]);
  v93 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v159, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v159, 0, (uint64_t *)&__p);
  v161 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v162 = v94;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v157, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v93 + 24))(v93, &v161, v157);
  if (v158 < 0)
    operator delete(v157[0]);
  v96 = v162;
  if (v162)
  {
    v97 = (unint64_t *)&v162->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  if (v160 < 0)
    operator delete(v159[0]);
  v100 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v153, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v153, 0, (uint64_t *)&__p);
  v155 = __p;
  if (__p)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)__p;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v156 = v101;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v151, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v100 + 24))(v100, &v155, v151);
  if (v152 < 0)
    operator delete(v151[0]);
  v103 = v156;
  if (v156)
  {
    v104 = (unint64_t *)&v156->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = __p;
  __p = 0;
  if (v106)
    (*(void (**)(void *))(*(_QWORD *)v106 + 8))(v106);
  if (v154 < 0)
    operator delete(v153[0]);
  v107 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v149 = __p;
  if (__p)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = (std::__shared_weak_count_vtbl *)__p;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v150 = v108;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v107 + 24))(v107, &v149, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v110 = v150;
  if (v150)
  {
    v111 = (unint64_t *)&v150->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = __p;
  __p = 0;
  if (v113)
    (*(void (**)(void *))(*(_QWORD *)v113 + 8))(v113);
  v114 = *a3;
  v145 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v146 = v115;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v114 + 56))(v114, &v145);
  v117 = v146;
  if (v146)
  {
    v118 = (unint64_t *)&v146->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v178);
  v121 = v178;
  std::string::basic_string[abi:ne180100]<0>(v141, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v141, 1, v206);
  v143 = v206[0];
  if (v206[0])
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = v206[0];
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = (std::__shared_weak_count_vtbl *)v123;
  }
  else
  {
    v122 = 0;
  }
  v144 = v122;
  v206[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v121 + 24))(v121, &v143, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v191[i + 2]) < 0)
      operator delete(v191[i]);
  }
  v125 = v144;
  if (v144)
  {
    v126 = (unint64_t *)&v144->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v206[0];
  v206[0] = 0;
  if (v128)
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  if (v142 < 0)
    operator delete(v141[0]);
  v129 = *a3;
  v139 = v178;
  if (v178)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = v178;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = (std::__shared_weak_count_vtbl *)v131;
  }
  else
  {
    v130 = 0;
  }
  v140 = v130;
  v178 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v129 + 56))(v129, &v139);
  v132 = v140;
  if (v140)
  {
    v133 = (unint64_t *)&v140->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v178;
  v178 = 0;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  if (v203)
  {
    v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v203);
    MEMORY[0x1E0C023A0](v136, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v180, 0);
  result = (uint64_t)v184;
  if (v184)
  {
    v138 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v184);
    return MEMORY[0x1E0C023A0](v138, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08BF6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  uint64_t a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;

  if (a61)
    (*(void (**)(uint64_t))(*(_QWORD *)a61 + 8))(a61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 112), 0);
  v73 = *v70;
  *v70 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Cos::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCos;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08C09D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Cosh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCosh;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08C1BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::ElementwiseUnaryWithEpsilon::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _OWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  void *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  void *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  uint64_t i;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t result;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void *v129[2];
  char v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  void *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  void *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  void *v141[2];
  char v142;
  void *v143;
  std::__shared_weak_count *v144;
  void *v145[2];
  char v146;
  void *v147[2];
  char v148;
  void *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  __n128 v153;
  __int128 v154;
  __int128 v155;
  void *v156[2];
  uint64_t v157;
  __n128 v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  char **v162;
  __n128 v163;
  __n128 v164;
  _QWORD *v165;
  void *Scalar;
  uint64_t v167;
  char *v168;
  _QWORD v169[3];
  uint64_t v170[3];
  uint64_t v171[3];
  void *v172[3];
  void *__p;
  void *v174;
  _QWORD *v175;
  _BYTE v176[24];
  _BYTE *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  std::__shared_weak_count_vtbl *v182;
  uint64_t v183;
  void (__cdecl **v184)(std::__shared_weak_count *__hidden);
  uint64_t v185[3];

  v185[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v165 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(8uLL);
  Scalar = v10;
  *(_QWORD *)v10 = v9;
  v167 = (uint64_t)(v10 + 8);
  v168 = v10 + 8;
  v182 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v175 = v12 + 1;
  v174 = v12 + 1;
  v183 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v182, 2, &v164);
  MIL::IRParameter::Make(&v164, &v160);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v160);
  v13 = v160;
  v160 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v15 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v174 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v167 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v165;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v167 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v163);
  MIL::IRParameter::Make(&v163, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v17, "epsilon", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v21 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v162 = 0;
  v23 = operator new();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, (void **)v23);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v162, 1uLL);
  v24 = v162;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v175 = v26 + 1;
  v174 = v26 + 1;
  v185[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v182 = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v183 = (uint64_t)&v28->~__shared_weak_count_0;
  v184 = &v28->~__shared_weak_count_0;
  v185[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v182);
  MIL::IRParameter::MakeTypeSet((uint64_t)v185, 2, &v158);
  MIL::IRParameter::Make(&v158, &v159);
  v29 = v159;
  v160 = v159;
  if (v159)
  {
    v30 = (_QWORD *)operator new();
    v31 = v159;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v161 = v30;
  v159 = 0;
  v32 = v24[2];
  v33 = v24[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v24) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v24;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v169[1] = v24 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v24 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v160 = 0;
    v161 = 0;
    v43 = *v24;
    v42 = v24[1];
    if (v42 == *v24)
    {
      v46 = v24[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = *v24;
      v42 = v24[1];
    }
    v34 = (char *)(v41 + 2);
    *v24 = v44;
    Scalar = v46;
    v167 = (uint64_t)v46;
    v24[1] = (char *)(v41 + 2);
    v168 = v42;
    v47 = v24[2];
    v24[2] = &v39[16 * v40];
    v169[0] = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v160 = 0;
    v161 = 0;
  }
  v24[1] = v34;
  v48 = v159;
  v159 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v50 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v182)
  {
    v183 = (uint64_t)v182;
    operator delete(v182);
  }
  if (__p)
  {
    v174 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v156 = *(_OWORD *)a2;
  v157 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = (uint64_t)v165;
  *(_QWORD *)&v155 = v165;
  if (v165)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v155 + 1) = v53;
  v165 = 0;
  *(_QWORD *)&v154 = v162;
  if (v162)
  {
    v54 = (_QWORD *)operator new();
    v55 = v162;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v154 + 1) = v54;
  v162 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v180, a3);
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v156, &v155, &v154, (uint64_t)v180, (uint64_t)v178, a4);
  v56 = v179;
  if (v179 == v178)
  {
    v57 = 4;
    v56 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_58;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_58:
  v58 = v181;
  if (v181 == v180)
  {
    v59 = 4;
    v58 = v180;
    goto LABEL_62;
  }
  if (v181)
  {
    v59 = 5;
LABEL_62:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v157) < 0)
    operator delete(v156[0]);
  v182 = 0;
  v66 = (_OWORD *)operator new();
  *v66 = 0u;
  v66[1] = 0u;
  *((_DWORD *)v66 + 8) = 1065353216;
  v182 = (std::__shared_weak_count_vtbl *)v66;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&Scalar);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v66, "minimum_compute_type", (uint64_t *)&Scalar);
  v68 = Scalar;
  Scalar = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v70 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 48))(*((_QWORD *)v67 + 5), 1);
  v72 = *a4;
  v73 = v182;
  v151 = v182;
  if (v182)
  {
    v74 = (std::__shared_weak_count *)operator new();
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = v73;
  }
  else
  {
    v74 = 0;
  }
  v152 = v74;
  v182 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v72 + 184))(v72, &v151);
  v75 = v152;
  if (v152)
  {
    p_shared_owners = (unint64_t *)&v152->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v176);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v78 + 200))(v78, v176);
  v79 = v177;
  if (v177 == v176)
  {
    v80 = 4;
    v79 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_95;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_95:
  if (SHIBYTE(v168) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v81 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v147, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v147, 0, (uint64_t *)&__p);
  v149 = __p;
  if (__p)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = (std::__shared_weak_count_vtbl *)__p;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v150 = v82;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v145, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v81 + 24))(v81, &v149, v145);
  if (v146 < 0)
    operator delete(v145[0]);
  v84 = v150;
  if (v150)
  {
    v85 = (unint64_t *)&v150->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = __p;
  __p = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  if (v148 < 0)
    operator delete(v147[0]);
  v88 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v141, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v141, 0, (uint64_t *)&__p);
  v143 = __p;
  if (__p)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = (std::__shared_weak_count_vtbl *)__p;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v144 = v89;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "U");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v88 + 24))(v88, &v143, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v91 = v144;
  if (v144)
  {
    v92 = (unint64_t *)&v144->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = __p;
  __p = 0;
  if (v94)
    (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
  if (v142 < 0)
    operator delete(v141[0]);
  v95 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v137 = __p;
  if (__p)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = (std::__shared_weak_count_vtbl *)__p;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v97;
  }
  else
  {
    v96 = 0;
  }
  v138 = v96;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v135, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v95 + 24))(v95, &v137, v135);
  if (v136 < 0)
    operator delete(v135[0]);
  v98 = v138;
  if (v138)
  {
    v99 = (unint64_t *)&v138->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = __p;
  __p = 0;
  if (v101)
    (*(void (**)(void *))(*(_QWORD *)v101 + 8))(v101);
  v102 = *a4;
  v133 = Scalar;
  if (Scalar)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = (std::__shared_weak_count_vtbl *)Scalar;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v134 = v103;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v102 + 56))(v102, &v133);
  v105 = v134;
  if (v134)
  {
    v106 = (unint64_t *)&v134->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = Scalar;
  Scalar = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v160);
  v109 = v160;
  std::string::basic_string[abi:ne180100]<0>(v129, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v129, 1, v185);
  v131 = v185[0];
  if (v185[0])
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = v185[0];
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = (std::__shared_weak_count_vtbl *)v111;
  }
  else
  {
    v110 = 0;
  }
  v132 = v110;
  v185[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v169, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v170, "int32");
  std::string::basic_string[abi:ne180100]<0>(v171, "int8");
  std::string::basic_string[abi:ne180100]<0>(v172, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v109 + 24))(v109, &v131, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v172[i + 2]) < 0)
      operator delete(v172[i]);
  }
  v113 = v132;
  if (v132)
  {
    v114 = (unint64_t *)&v132->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v185[0];
  v185[0] = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  if (v130 < 0)
    operator delete(v129[0]);
  v117 = *a4;
  v127 = v160;
  if (v160)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v160;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = (std::__shared_weak_count_vtbl *)v119;
  }
  else
  {
    v118 = 0;
  }
  v128 = v118;
  v160 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v117 + 56))(v117, &v127);
  v120 = v128;
  if (v128)
  {
    v121 = (unint64_t *)&v128->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v160;
  v160 = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  if (v182)
  {
    v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v182);
    MEMORY[0x1E0C023A0](v124, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v165;
  if (v165)
  {
    v126 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    return MEMORY[0x1E0C023A0](v126, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08C2EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;

  if (a53)
    (*(void (**)(uint64_t))(*(_QWORD *)a53 + 8))(a53);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v61 - 128), 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Inverse::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::ElementwiseUnaryWithEpsilon::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E08C3454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Log::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::ElementwiseUnaryWithEpsilon::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E08C3554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Rsqrt::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::ElementwiseUnaryWithEpsilon::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E08C3654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::ElementwiseUnaryWithInt::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _OWORD *v64;
  unsigned __int8 *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  void *v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  void *v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  void *v136;
  std::__shared_weak_count *v137;
  __n128 v138;
  __int128 v139;
  __int128 v140;
  void *v141[2];
  uint64_t v142;
  void *v143;
  void *v144;
  _QWORD *v145;
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  char **v150;
  void *__p;
  void *v152;
  _QWORD *v153;
  void *v154;
  void *v155;
  _QWORD *v156;
  __n128 v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[3];
  uint64_t v163[3];
  uint64_t v164[3];
  _QWORD v165[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v167;
  uint64_t v168;
  _BYTE v169[24];
  _BYTE *v170;
  _BYTE v171[24];
  _BYTE *v172;
  _BYTE v173[24];
  _BYTE *v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v158 = v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v167 = (uint64_t)&v10->~__shared_weak_count_0;
  v168 = (uint64_t)&v10->~__shared_weak_count_0;
  v159 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v154 = v12;
  *v12 = v11;
  v155 = v12 + 1;
  v156 = v12 + 1;
  v160 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v154);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v152 = v14 + 1;
  v153 = v14 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v159, 3, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&v143);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v143);
  v15 = v143;
  v143 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v17 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  if (Scalar)
  {
    v167 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v150 = 0;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v159 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v150, (void **)v19);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v159, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v150, 1uLL);
  v20 = v150;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v154 = v22;
  *v22 = v21;
  v155 = v22 + 1;
  v156 = v22 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v154);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v152 = v24 + 1;
  v153 = v24 + 1;
  v167 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v143 = v26;
  *v26 = v25;
  v144 = v26 + 1;
  v145 = v26 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v143);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v146);
  MIL::IRParameter::Make(&v146, &v147);
  v27 = v147;
  v148 = v147;
  if (v147)
  {
    v28 = (_QWORD *)operator new();
    v29 = v147;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v149 = v28;
  v147 = 0;
  v30 = v20[2];
  v31 = v20[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v20) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v20;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v162[1] = v20 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v148 = 0;
    v149 = 0;
    v41 = *v20;
    v40 = v20[1];
    if (v40 == *v20)
    {
      v44 = v20[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = *v20;
      v40 = v20[1];
    }
    v32 = (char *)(v39 + 2);
    *v20 = v42;
    v159 = v44;
    v160 = (uint64_t)v44;
    v20[1] = (char *)(v39 + 2);
    v161 = (uint64_t)v40;
    v45 = v20[2];
    v20[2] = &v37[16 * v38];
    v162[0] = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v159);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v148 = 0;
    v149 = 0;
  }
  v20[1] = v32;
  v46 = v147;
  v147 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v146.n128_u64[1];
  if (v146.n128_u64[1])
  {
    v48 = (unint64_t *)(v146.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  *(_OWORD *)v141 = *(_OWORD *)a2;
  v142 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = v158;
  *(_QWORD *)&v140 = v158;
  if (v158)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v140 + 1) = v51;
  v158 = 0;
  *(_QWORD *)&v139 = v150;
  if (v150)
  {
    v52 = (_QWORD *)operator new();
    v53 = v150;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v139 + 1) = v52;
  v150 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v173, a3);
  v172 = 0;
  MIL::IROperator::Make((__int128 *)v141, &v140, &v139, (uint64_t)v173, (uint64_t)v171, a4);
  v54 = v172;
  if (v172 == v171)
  {
    v55 = 4;
    v54 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_55;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_55:
  v56 = v174;
  if (v174 == v173)
  {
    v57 = 4;
    v56 = v173;
    goto LABEL_59;
  }
  if (v174)
  {
    v57 = 5;
LABEL_59:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v142) < 0)
    operator delete(v141[0]);
  v154 = 0;
  v64 = (_OWORD *)operator new();
  *v64 = 0u;
  v64[1] = 0u;
  *((_DWORD *)v64 + 8) = 1065353216;
  v154 = v64;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v138);
  MIL::IRParameter::Make(&v138, (uint64_t *)&v159);
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v64, "minimum_compute_type", (uint64_t *)&v159);
  v66 = v159;
  v159 = 0;
  if (v66)
    (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v138.n128_u64[1];
  if (v138.n128_u64[1])
  {
    v68 = (unint64_t *)(v138.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v70 = *a4;
  v71 = (std::__shared_weak_count_vtbl *)v154;
  v136 = v154;
  if (v154)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v71;
  }
  else
  {
    v72 = 0;
  }
  v137 = v72;
  v154 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v70 + 184))(v70, &v136);
  v73 = v137;
  if (v137)
  {
    p_shared_owners = (unint64_t *)&v137->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v159, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v159, (uint64_t)v169);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v76 + 200))(v76, v169);
  v77 = v170;
  if (v170 == v169)
  {
    v78 = 4;
    v77 = v169;
  }
  else
  {
    if (!v170)
      goto LABEL_92;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_92:
  if (SHIBYTE(v161) < 0)
    operator delete(v159);
  MIL::Validation::TensorDTypeConstraints::Make(&v159);
  v79 = v159;
  std::string::basic_string[abi:ne180100]<0>(v132, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v132, 0, (uint64_t *)&Scalar);
  v134 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v135 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v79 + 24))(v79, &v134, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v82 = v135;
  if (v135)
  {
    v83 = (unint64_t *)&v135->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  if (v133 < 0)
    operator delete(v132[0]);
  v86 = v159;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v128 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v129 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v86 + 24))(v86, &v128, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v129;
  if (v129)
  {
    v90 = (unint64_t *)&v129->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  v93 = *a4;
  v124 = v159;
  if (v159)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)v159;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  v159 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v159;
  v159 = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v100 = __p;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, (uint64_t *)&v143);
  v122 = v143;
  if (v143)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)v143;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v143 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v159, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v162, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v163, "int32");
  std::string::basic_string[abi:ne180100]<0>(v164, "int8");
  std::string::basic_string[abi:ne180100]<0>(v165, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v159, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v165[i + 2]) < 0)
      operator delete((void *)v165[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v143;
  v143 = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a4;
  v118 = __p;
  if (__p)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)__p;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = __p;
  __p = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  if (v154)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v154);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v150, 0);
  result = v158;
  if (v158)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v158);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08C4464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t *v59;
  void *v61;
  uint64_t v62;

  v61 = a51;
  a51 = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v62 = *v59;
  *v59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Abs::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  _QWORD v166[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _QWORD v176[3];
  _QWORD *v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v168 = (uint64_t)&v8->~__shared_weak_count_0;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v176[0] = &unk_1EA99FAC8;
  v176[1] = MIL::Validation::ValidateViaTypeInference;
  v177 = v176;
  v175 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v176, (uint64_t)v174, a3);
  v52 = v175;
  if (v175 == v174)
  {
    v53 = 4;
    v52 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v177;
  if (v177 == v176)
  {
    v55 = 4;
    v54 = v176;
    goto LABEL_59;
  }
  if (v177)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v172);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v172);
  v75 = v173;
  if (v173 == v172)
  {
    v76 = 4;
    v75 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v170[0] = &off_1EA9A00F8;
  v170[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAbs;
  v171 = v170;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v170);
  v78 = v171;
  if (v171 == v170)
  {
    v79 = 4;
    v78 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v164, "int32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int8");
  std::string::basic_string[abi:ne180100]<0>(v166, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v166[i + 2]) < 0)
      operator delete((void *)v166[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08C56E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t *v59;
  void *v61;
  uint64_t v62;

  v61 = a51;
  a51 = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v62 = *v59;
  *v59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Exp2::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  _QWORD v166[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _QWORD v176[3];
  _QWORD *v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v168 = (uint64_t)&v8->~__shared_weak_count_0;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v176[0] = &unk_1EA99FAC8;
  v176[1] = MIL::Validation::ValidateViaTypeInference;
  v177 = v176;
  v175 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v176, (uint64_t)v174, a3);
  v52 = v175;
  if (v175 == v174)
  {
    v53 = 4;
    v52 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v177;
  if (v177 == v176)
  {
    v55 = 4;
    v54 = v176;
    goto LABEL_59;
  }
  if (v177)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v172);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v172);
  v75 = v173;
  if (v173 == v172)
  {
    v76 = 4;
    v75 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v170[0] = &off_1EA9A00F8;
  v170[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceExp2;
  v171 = v170;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v170);
  v78 = v171;
  if (v171 == v170)
  {
    v79 = 4;
    v78 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v164, "int32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int8");
  std::string::basic_string[abi:ne180100]<0>(v166, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v166[i + 2]) < 0)
      operator delete((void *)v166[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08C6998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t *v59;
  void *v61;
  uint64_t v62;

  v61 = a51;
  a51 = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v62 = *v59;
  *v59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Sign::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  _QWORD v166[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _QWORD v176[3];
  _QWORD *v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v168 = (uint64_t)&v8->~__shared_weak_count_0;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v176[0] = &unk_1EA99FAC8;
  v176[1] = MIL::Validation::ValidateViaTypeInference;
  v177 = v176;
  v175 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v176, (uint64_t)v174, a3);
  v52 = v175;
  if (v175 == v174)
  {
    v53 = 4;
    v52 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v177;
  if (v177 == v176)
  {
    v55 = 4;
    v54 = v176;
    goto LABEL_59;
  }
  if (v177)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v172);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v172);
  v75 = v173;
  if (v173 == v172)
  {
    v76 = 4;
    v75 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v170[0] = &off_1EA9A00F8;
  v170[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSign;
  v171 = v170;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v170);
  v78 = v171;
  if (v171 == v170)
  {
    v79 = 4;
    v78 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v164, "int32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int8");
  std::string::basic_string[abi:ne180100]<0>(v166, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v166[i + 2]) < 0)
      operator delete((void *)v166[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08C7C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t *v59;
  void *v61;
  uint64_t v62;

  v61 = a51;
  a51 = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v62 = *v59;
  *v59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Square::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  _QWORD v166[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _QWORD v176[3];
  _QWORD *v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v168 = (uint64_t)&v8->~__shared_weak_count_0;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v176[0] = &unk_1EA99FAC8;
  v176[1] = MIL::Validation::ValidateViaTypeInference;
  v177 = v176;
  v175 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v176, (uint64_t)v174, a3);
  v52 = v175;
  if (v175 == v174)
  {
    v53 = 4;
    v52 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v177;
  if (v177 == v176)
  {
    v55 = 4;
    v54 = v176;
    goto LABEL_59;
  }
  if (v177)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v172);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v172);
  v75 = v173;
  if (v173 == v172)
  {
    v76 = 4;
    v75 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v170[0] = &off_1EA9A00F8;
  v170[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSquare;
  v171 = v170;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v170);
  v78 = v171;
  if (v171 == v170)
  {
    v79 = 4;
    v78 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v164, "int32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int8");
  std::string::basic_string[abi:ne180100]<0>(v166, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v166[i + 2]) < 0)
      operator delete((void *)v166[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08C8F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t *v59;
  void *v61;
  uint64_t v62;

  v61 = a51;
  a51 = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v62 = *v59;
  *v59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Threshold::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  char *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char **v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _OWORD *v67;
  unsigned __int8 *v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  void *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  void *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  void *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  uint64_t i;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t result;
  uint64_t v130;
  void *v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  void *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  void *v151[2];
  char v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  void *v155;
  std::__shared_weak_count *v156;
  __n128 v157;
  __int128 v158;
  __int128 v159;
  void *v160[2];
  uint64_t v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  char **v169;
  __n128 v170;
  void *__p;
  void *v172;
  _QWORD *v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  __n128 v177;
  _QWORD *v178;
  void *Scalar;
  uint64_t v180;
  uint64_t v181;
  _QWORD v182[3];
  uint64_t v183[3];
  uint64_t v184[3];
  _QWORD v185[3];
  std::__shared_weak_count_vtbl *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD v189[3];
  _QWORD *v190;
  _BYTE v191[24];
  _BYTE *v192;
  _BYTE v193[24];
  _BYTE *v194;
  _QWORD v195[3];
  _QWORD *v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v178 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v186 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v187 = (uint64_t)&v8->~__shared_weak_count_0;
  v188 = (uint64_t)&v8->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v186);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v174 = v10;
  *v10 = v9;
  v175 = v10 + 1;
  v176 = v10 + 1;
  v180 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v174);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v172 = v12 + 1;
  v173 = v12 + 1;
  v181 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v15 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v172 = __p;
    operator delete(__p);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v186)
  {
    v187 = (uint64_t)v186;
    operator delete(v186);
  }
  v17 = v178;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v180 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  v181 = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v186);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v17, "alpha", (uint64_t *)&v186);
  v18 = v186;
  v186 = 0;
  if (v18)
    (*((void (**)(std::__shared_weak_count_vtbl *))v18->~__shared_weak_count + 1))(v18);
  v19 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v20 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v169 = 0;
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v169, (void **)v22);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v169, 1uLL);
  v23 = v169;
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v174 = v25;
  *v25 = v24;
  v175 = v25 + 1;
  v176 = v25 + 1;
  v186 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v174);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v172 = v27 + 1;
  v173 = v27 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v162 = v29;
  *v29 = v28;
  v163 = v29 + 1;
  v164 = v29 + 1;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v162);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v165);
  MIL::IRParameter::Make(&v165, &v166);
  v30 = v166;
  v167 = v166;
  if (v166)
  {
    v31 = (_QWORD *)operator new();
    v32 = v166;
    *v31 = &unk_1EA99F888;
    v31[1] = 0;
    v31[2] = 0;
    v31[3] = v32;
  }
  else
  {
    v31 = 0;
  }
  v168 = v31;
  v166 = 0;
  v33 = v23[2];
  v34 = v23[1];
  if (v34 >= v33)
  {
    v36 = (v34 - *v23) >> 4;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v38 = v33 - *v23;
    if (v38 >> 3 > v37)
      v37 = v38 >> 3;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
      v39 = 0xFFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    v182[1] = v23 + 2;
    v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v23 + 2), v39);
    v42 = (uint64_t *)&v40[16 * v36];
    *v42 = v30;
    v42[1] = (uint64_t)v31;
    v167 = 0;
    v168 = 0;
    v44 = *v23;
    v43 = v23[1];
    if (v43 == *v23)
    {
      v47 = v23[1];
      v45 = &v40[16 * v36];
    }
    else
    {
      v45 = &v40[16 * v36];
      do
      {
        v46 = *((_OWORD *)v43 - 1);
        v43 -= 16;
        *((_OWORD *)v45 - 1) = v46;
        v45 -= 16;
        *(_QWORD *)v43 = 0;
        *((_QWORD *)v43 + 1) = 0;
      }
      while (v43 != v44);
      v47 = *v23;
      v43 = v23[1];
    }
    v35 = (char *)(v42 + 2);
    *v23 = v45;
    Scalar = v47;
    v180 = (uint64_t)v47;
    v23[1] = (char *)(v42 + 2);
    v181 = (uint64_t)v43;
    v48 = v23[2];
    v23[2] = &v40[16 * v41];
    v182[0] = v48;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v34 = v30;
    *((_QWORD *)v34 + 1) = v31;
    v35 = v34 + 16;
    v167 = 0;
    v168 = 0;
  }
  v23[1] = v35;
  v49 = v166;
  v166 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v51 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (__p)
  {
    v172 = __p;
    operator delete(__p);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  *(_OWORD *)v160 = *(_OWORD *)a2;
  v161 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v53 = (uint64_t)v178;
  *(_QWORD *)&v159 = v178;
  if (v178)
  {
    v54 = (_QWORD *)operator new();
    *v54 = &unk_1EA99F8E8;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v53;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v159 + 1) = v54;
  v178 = 0;
  *(_QWORD *)&v158 = v169;
  if (v169)
  {
    v55 = (_QWORD *)operator new();
    v56 = v169;
    *v55 = &unk_1EA99F948;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v56;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v158 + 1) = v55;
  v169 = 0;
  v195[0] = &unk_1EA99FAC8;
  v195[1] = MIL::Validation::ValidateViaTypeInference;
  v196 = v195;
  v194 = 0;
  MIL::IROperator::Make((__int128 *)v160, &v159, &v158, (uint64_t)v195, (uint64_t)v193, a3);
  v57 = v194;
  if (v194 == v193)
  {
    v58 = 4;
    v57 = v193;
  }
  else
  {
    if (!v194)
      goto LABEL_62;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_62:
  v59 = v196;
  if (v196 == v195)
  {
    v60 = 4;
    v59 = v195;
    goto LABEL_66;
  }
  if (v196)
  {
    v60 = 5;
LABEL_66:
    (*(void (**)(void))(*v59 + 8 * v60))();
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
  if (*((_QWORD *)&v158 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
  if (*((_QWORD *)&v159 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (SHIBYTE(v161) < 0)
    operator delete(v160[0]);
  v174 = 0;
  v67 = (_OWORD *)operator new();
  *v67 = 0u;
  v67[1] = 0u;
  *((_DWORD *)v67 + 8) = 1065353216;
  v174 = v67;
  v186 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&Scalar);
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v67, "minimum_compute_type", (uint64_t *)&Scalar);
  v69 = Scalar;
  Scalar = 0;
  if (v69)
    (*(void (**)(void *))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v71 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v68 + 5) + 32))(*((_QWORD *)v68 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v68 + 5) + 48))(*((_QWORD *)v68 + 5), 1);
  v73 = *a3;
  v74 = (std::__shared_weak_count_vtbl *)v174;
  v155 = v174;
  if (v174)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = v74;
  }
  else
  {
    v75 = 0;
  }
  v156 = v75;
  v174 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v73 + 184))(v73, &v155);
  v76 = v156;
  if (v156)
  {
    p_shared_owners = (unint64_t *)&v156->__shared_owners_;
    do
      v78 = __ldaxr(p_shared_owners);
    while (__stlxr(v78 - 1, p_shared_owners));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v191);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v79 + 200))(v79, v191);
  v80 = v192;
  if (v192 == v191)
  {
    v81 = 4;
    v80 = v191;
  }
  else
  {
    if (!v192)
      goto LABEL_99;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_99:
  if (SHIBYTE(v181) < 0)
    operator delete(Scalar);
  v82 = *a3;
  v189[0] = &off_1EA9A00F8;
  v189[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceThreshold;
  v190 = v189;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v82 + 216))(v82, v189);
  v83 = v190;
  if (v190 == v189)
  {
    v84 = 4;
    v83 = v189;
  }
  else
  {
    if (!v190)
      goto LABEL_106;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v85 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v151, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v151, 0, (uint64_t *)&v186);
  v153 = v186;
  if (v186)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = v186;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v154 = v86;
  v186 = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v85 + 24))(v85, &v153, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v88 = v154;
  if (v154)
  {
    v89 = (unint64_t *)&v154->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v186;
  v186 = 0;
  if (v91)
    (*((void (**)(std::__shared_weak_count_vtbl *))v91->~__shared_weak_count + 1))(v91);
  if (v152 < 0)
    operator delete(v151[0]);
  v92 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v145, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v145, 0, (uint64_t *)&v186);
  v147 = v186;
  if (v186)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = v186;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v148 = v93;
  v186 = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v92 + 24))(v92, &v147, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v95 = v148;
  if (v148)
  {
    v96 = (unint64_t *)&v148->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v186;
  v186 = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  if (v146 < 0)
    operator delete(v145[0]);
  v99 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v186);
  v141 = v186;
  if (v186)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = v186;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v142 = v100;
  v186 = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v99 + 24))(v99, &v141, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v102 = v142;
  if (v142)
  {
    v103 = (unint64_t *)&v142->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v186;
  v186 = 0;
  if (v105)
    (*((void (**)(std::__shared_weak_count_vtbl *))v105->~__shared_weak_count + 1))(v105);
  v106 = *a3;
  v137 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v138 = v107;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v106 + 56))(v106, &v137);
  v109 = v138;
  if (v138)
  {
    v110 = (unint64_t *)&v138->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v113 = __p;
  std::string::basic_string[abi:ne180100]<0>(v133, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v133, 1, (uint64_t *)&v162);
  v135 = v162;
  if (v162)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v162;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v136 = v114;
  v162 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v182, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v183, "int32");
  std::string::basic_string[abi:ne180100]<0>(v184, "int8");
  std::string::basic_string[abi:ne180100]<0>(v185, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v186, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v113 + 24))(v113, &v135, &v186, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v186);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v185[i + 2]) < 0)
      operator delete((void *)v185[i]);
  }
  v117 = v136;
  if (v136)
  {
    v118 = (unint64_t *)&v136->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v162;
  v162 = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  if (v134 < 0)
    operator delete(v133[0]);
  v121 = *a3;
  v131 = __p;
  if (__p)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)__p;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v132 = v122;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, &v131);
  v124 = v132;
  if (v132)
  {
    v125 = (unint64_t *)&v132->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = __p;
  __p = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v174)
  {
    v128 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v174);
    MEMORY[0x1E0C023A0](v128, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v169, 0);
  result = (uint64_t)v178;
  if (v178)
  {
    v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v178);
    return MEMORY[0x1E0C023A0](v130, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08CA368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a61;
  a61 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Exp::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceExp;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08CB620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Floor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceFloor;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08CC804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Round::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceRound;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08CD9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Sin::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSin;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08CEBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Sinh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSinh;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08CFDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Sqrt::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSqrt;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08D0F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Tan::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceTan;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08D2178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Tanh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Validation::ValidateViaTypeInference;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceTanh;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08D335C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::LogicalNot::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  char **v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t i;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t result;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void *v92[2];
  char v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  __n128 v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  char **v105;
  __n128 v106;
  uint64_t v107;
  void *__p;
  void *v109;
  char *v110;
  _QWORD v111[3];
  uint64_t v112[3];
  uint64_t v113[3];
  void *v114[3];
  void *Scalar;
  void *v116;
  _QWORD *v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v107 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v109 = v8 + 1;
  v110 = (char *)(v8 + 1);
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v127, 1, &v106);
  MIL::IRParameter::Make(&v106, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v106.n128_u64[1];
  if (v106.n128_u64[1])
  {
    v11 = (unint64_t *)(v106.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  v105 = 0;
  v13 = operator new();
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v105, (void **)v13);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v105, 1uLL);
  v14 = v105;
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  Scalar = v16;
  *v16 = v15;
  v116 = v16 + 1;
  v117 = v16 + 1;
  v126 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 1, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v17 = v104;
  v127 = v104;
  if (v104)
  {
    v18 = (_QWORD *)operator new();
    v19 = v104;
    *v18 = &unk_1EA99F888;
    v18[1] = 0;
    v18[2] = 0;
    v18[3] = v19;
  }
  else
  {
    v18 = 0;
  }
  v128 = v18;
  v104 = 0;
  v20 = v14[2];
  v21 = v14[1];
  if (v21 >= v20)
  {
    v23 = (v21 - *v14) >> 4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v25 = v20 - *v14;
    if (v25 >> 3 > v24)
      v24 = v25 >> 3;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    v111[1] = v14 + 2;
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v14 + 2), v26);
    v29 = (uint64_t *)&v27[16 * v23];
    *v29 = v17;
    v29[1] = (uint64_t)v18;
    v127 = 0;
    v128 = 0;
    v31 = *v14;
    v30 = v14[1];
    if (v30 == *v14)
    {
      v34 = v14[1];
      v32 = &v27[16 * v23];
    }
    else
    {
      v32 = &v27[16 * v23];
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v30 -= 16;
        *((_OWORD *)v32 - 1) = v33;
        v32 -= 16;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
      }
      while (v30 != v31);
      v34 = *v14;
      v30 = v14[1];
    }
    v22 = (char *)(v29 + 2);
    *v14 = v32;
    __p = v34;
    v109 = v34;
    v14[1] = (char *)(v29 + 2);
    v110 = v30;
    v35 = v14[2];
    v14[2] = &v27[16 * v28];
    v111[0] = v35;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v21 = v17;
    *((_QWORD *)v21 + 1) = v18;
    v22 = v21 + 16;
    v127 = 0;
    v128 = 0;
  }
  v14[1] = v22;
  v36 = v104;
  v104 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v38 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (Scalar)
  {
    v116 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v40 = v107;
  *(_QWORD *)&v100 = v107;
  if (v107)
  {
    v41 = (_QWORD *)operator new();
    *v41 = &unk_1EA99F8E8;
    v41[1] = 0;
    v41[2] = 0;
    v41[3] = v40;
  }
  else
  {
    v41 = 0;
  }
  *((_QWORD *)&v100 + 1) = v41;
  v107 = 0;
  *(_QWORD *)&v99 = v105;
  if (v105)
  {
    v42 = (_QWORD *)operator new();
    v43 = v105;
    *v42 = &unk_1EA99F948;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  *((_QWORD *)&v99 + 1) = v42;
  v105 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v44 = v123;
  if (v123 == v122)
  {
    v45 = 4;
    v44 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  v46 = v125;
  if (v125 == v124)
  {
    v47 = 4;
    v46 = v124;
    goto LABEL_51;
  }
  if (v125)
  {
    v47 = 5;
LABEL_51:
    (*(void (**)(void))(*v46 + 8 * v47))();
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v127 = 0;
  v54 = operator new();
  *(_OWORD *)v54 = 0u;
  *(_OWORD *)(v54 + 16) = 0u;
  *(_DWORD *)(v54 + 32) = 1065353216;
  v127 = v54;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v98);
  MIL::IRParameter::Make(&v98, (uint64_t *)&__p);
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v54, "minimum_compute_type", (uint64_t *)&__p);
  v56 = __p;
  __p = 0;
  if (v56)
    (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v98.n128_u64[1];
  if (v98.n128_u64[1])
  {
    v58 = (unint64_t *)(v98.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 32))(*((_QWORD *)v55 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 48))(*((_QWORD *)v55 + 5), 1);
  v60 = *a3;
  v61 = v127;
  v96 = v127;
  if (v127)
  {
    v62 = (std::__shared_weak_count *)operator new();
    v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v62->__shared_owners_ = 0;
    v62->__shared_weak_owners_ = 0;
    v62[1].__vftable = (std::__shared_weak_count_vtbl *)v61;
  }
  else
  {
    v62 = 0;
  }
  v97 = v62;
  v127 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v60 + 184))(v60, &v96);
  v63 = v97;
  if (v97)
  {
    p_shared_owners = (unint64_t *)&v97->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v66 + 200))(v66, v120);
  v67 = v121;
  if (v121 == v120)
  {
    v68 = 4;
    v67 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_84;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_84:
  if (SHIBYTE(v110) < 0)
    operator delete(__p);
  v69 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalNot;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v69 + 216))(v69, v118);
  v70 = v119;
  if (v119 == v118)
  {
    v71 = 4;
    v70 = v118;
    goto LABEL_90;
  }
  if (v119)
  {
    v71 = 5;
LABEL_90:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  MIL::Validation::PossibleStringValuesConstraints::Make(&v104);
  v72 = v104;
  std::string::basic_string[abi:ne180100]<0>(v92, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v92, 1, &v126);
  v94 = v126;
  if (v126)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = v126;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
  }
  else
  {
    v73 = 0;
  }
  v95 = v73;
  v126 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v111, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v112, "int32");
  std::string::basic_string[abi:ne180100]<0>(v113, "int8");
  std::string::basic_string[abi:ne180100]<0>(v114, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v72 + 24))(v72, &v94, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v114[i + 2]) < 0)
      operator delete(v114[i]);
  }
  v76 = v95;
  if (v95)
  {
    v77 = (unint64_t *)&v95->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v126;
  v126 = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  if (v93 < 0)
    operator delete(v92[0]);
  v80 = *a3;
  v90 = v104;
  if (v104)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v104;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v91 = v81;
  v104 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v80 + 56))(v80, &v90);
  v83 = v91;
  if (v91)
  {
    v84 = (unint64_t *)&v91->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v104;
  v104 = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  if (v127)
  {
    v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v127);
    MEMORY[0x1E0C023A0](v87, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v105, 0);
  result = v107;
  if (v107)
  {
    v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v107);
    return MEMORY[0x1E0C023A0](v89, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08D41EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,void **a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t *v62;
  uint64_t v63;
  uint64_t v65;

  if (a36)
    (*(void (**)(uint64_t))(*(_QWORD *)a36 + 8))(a36);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 88), 0);
  v65 = *v62;
  *v62 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a37, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a42, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::BaseGather::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  char *v88;
  char *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  char **v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *p_shared_owners;
  unint64_t v113;
  char *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  char *v121;
  void **v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  void **v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void **v135;
  void **v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  void **v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  void **v149;
  uint64_t result;
  uint64_t v151;
  void **v152;
  std::__shared_weak_count *v153;
  void *v154[2];
  char v155;
  void *v156[2];
  char v157;
  char *v158;
  std::__shared_weak_count *v159;
  void **v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  char *v164;
  std::__shared_weak_count *v165;
  void *v166[2];
  char v167;
  void *v168[2];
  char v169;
  char *v170;
  std::__shared_weak_count *v171;
  void *v172[2];
  char v173;
  void *v174[2];
  char v175;
  char *v176;
  std::__shared_weak_count *v177;
  __int128 v178;
  __int128 v179;
  void *v180[2];
  uint64_t v181;
  void *v182;
  void *v183;
  _QWORD *v184;
  __n128 v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  char **v189;
  __n128 v190;
  __n128 v191;
  void *__p;
  void *v193;
  _QWORD *v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  void *v204;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  __n128 v210;
  _QWORD *v211;
  _BYTE v212[24];
  _BYTE *v213;
  _BYTE v214[24];
  _BYTE *v215;
  void **v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *Scalar;
  char *v224;
  char *v225;
  char *v226;
  char **v227;
  uint64_t v228;

  v228 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v211 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (char *)operator new(0x10uLL);
  v224 = v11 + 16;
  v225 = v11 + 16;
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  Scalar = v11;
  v216 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v209 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v207 = v14;
  v208 = v14 + 2;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v207);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v206 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  v204 = v17;
  v205 = v17 + 2;
  v218 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v204);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(0x10uLL);
  v203 = v20 + 2;
  *v20 = v18;
  v20[1] = v19;
  v201 = v20;
  v202 = v20 + 2;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v201);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(0x10uLL);
  v199 = v23 + 2;
  v200 = v23 + 2;
  *v23 = v21;
  v23[1] = v22;
  v198 = v23;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v198);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(0x10uLL);
  v196 = v26 + 2;
  v197 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v195 = v26;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v195);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v193 = v29 + 2;
  v194 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  __p = v29;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v216, 7, &v210);
  MIL::IRParameter::Make(&v210, (uint64_t *)&v182);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v182);
  v30 = v182;
  v182 = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v210.n128_u64[1];
  if (v210.n128_u64[1])
  {
    v32 = (unint64_t *)(v210.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p)
  {
    v193 = __p;
    operator delete(__p);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (Scalar)
  {
    v224 = Scalar;
    operator delete(Scalar);
  }
  v34 = v211;
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = (char *)operator new(8uLL);
  Scalar = v36;
  *(_QWORD *)v36 = v35;
  v224 = v36 + 8;
  v225 = v36 + 8;
  v216 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v207 = v38;
  *v38 = v37;
  v209 = v38 + 1;
  v208 = v38 + 1;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v207);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v204 = v40;
  *v40 = v39;
  v206 = v40 + 1;
  v205 = v40 + 1;
  v218 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v204);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v201 = v42;
  *v42 = v41;
  v203 = v42 + 1;
  v202 = v42 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v201);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v198 = v44;
  *v44 = v43;
  v199 = v44 + 1;
  v200 = v44 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v198);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v216, 5, &v191);
  MIL::IRParameter::Make(&v191, (uint64_t *)&v195);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v34, "indices", (uint64_t *)&v195);
  v45 = v195;
  v195 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v191.n128_u64[1];
  if (v191.n128_u64[1])
  {
    v47 = (unint64_t *)(v191.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (Scalar)
  {
    v224 = Scalar;
    operator delete(Scalar);
  }
  v49 = v211;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v190);
  MIL::IRParameter::Make(&v190, (uint64_t *)&v216);
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v49, "validate_indices", (uint64_t *)&v216);
  v51 = v216;
  v216 = 0;
  if (v51)
    (*((void (**)(void **))*v51 + 1))(v51);
  v52 = (std::__shared_weak_count *)v190.n128_u64[1];
  if (v190.n128_u64[1])
  {
    v53 = (unint64_t *)(v190.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  v189 = 0;
  v55 = operator new();
  *(_QWORD *)v55 = 0;
  *(_QWORD *)(v55 + 8) = 0;
  *(_QWORD *)(v55 + 16) = 0;
  v216 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v189, (void **)v55);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v216, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v189, 1uLL);
  v56 = v189;
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v207 = v58;
  *v58 = v57;
  v209 = v58 + 1;
  v208 = v58 + 1;
  v216 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v207);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v204 = v60;
  *v60 = v59;
  v206 = v60 + 1;
  v205 = v60 + 1;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v204);
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v201 = v62;
  *v62 = v61;
  v203 = v62 + 1;
  v202 = v62 + 1;
  v218 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v201);
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v198 = v64;
  *v64 = v63;
  v199 = v64 + 1;
  v200 = v64 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v198);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v195 = v66;
  *v66 = v65;
  v196 = v66 + 1;
  v197 = v66 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v195);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  __p = v68;
  *v68 = v67;
  v193 = v68 + 1;
  v194 = v68 + 1;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v182 = v70;
  *v70 = v69;
  v183 = v70 + 1;
  v184 = v70 + 1;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v182);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v216, 7, &v185);
  MIL::IRParameter::Make(&v185, &v186);
  v71 = v186;
  v187 = v186;
  if (v186)
  {
    v72 = (_QWORD *)operator new();
    v73 = v186;
    *v72 = &unk_1EA99F888;
    v72[1] = 0;
    v72[2] = 0;
    v72[3] = v73;
  }
  else
  {
    v72 = 0;
  }
  v188 = v72;
  v186 = 0;
  v74 = v56[2];
  v75 = v56[1];
  if (v75 >= v74)
  {
    v77 = (v75 - *v56) >> 4;
    v78 = v77 + 1;
    if ((unint64_t)(v77 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v79 = v74 - *v56;
    if (v79 >> 3 > v78)
      v78 = v79 >> 3;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
      v80 = 0xFFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    v227 = v56 + 2;
    v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v56 + 2), v80);
    v83 = (uint64_t *)&v81[16 * v77];
    *v83 = v71;
    v83[1] = (uint64_t)v72;
    v187 = 0;
    v188 = 0;
    v85 = *v56;
    v84 = v56[1];
    if (v84 == *v56)
    {
      v88 = v56[1];
      v86 = &v81[16 * v77];
    }
    else
    {
      v86 = &v81[16 * v77];
      do
      {
        v87 = *((_OWORD *)v84 - 1);
        v84 -= 16;
        *((_OWORD *)v86 - 1) = v87;
        v86 -= 16;
        *(_QWORD *)v84 = 0;
        *((_QWORD *)v84 + 1) = 0;
      }
      while (v84 != v85);
      v88 = *v56;
      v84 = v56[1];
    }
    v76 = (char *)(v83 + 2);
    *v56 = v86;
    Scalar = v88;
    v224 = v88;
    v56[1] = (char *)(v83 + 2);
    v225 = v84;
    v89 = v56[2];
    v56[2] = &v81[16 * v82];
    v226 = v89;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v75 = v71;
    *((_QWORD *)v75 + 1) = v72;
    v76 = v75 + 16;
    v187 = 0;
    v188 = 0;
  }
  v56[1] = v76;
  v90 = v186;
  v186 = 0;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v92 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  if (__p)
  {
    v193 = __p;
    operator delete(__p);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  *(_OWORD *)v180 = *(_OWORD *)a2;
  v181 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v94 = (uint64_t)v211;
  *(_QWORD *)&v179 = v211;
  if (v211)
  {
    v95 = (_QWORD *)operator new();
    *v95 = &unk_1EA99F8E8;
    v95[1] = 0;
    v95[2] = 0;
    v95[3] = v94;
  }
  else
  {
    v95 = 0;
  }
  *((_QWORD *)&v179 + 1) = v95;
  v211 = 0;
  *(_QWORD *)&v178 = v189;
  if (v189)
  {
    v96 = (_QWORD *)operator new();
    v97 = v189;
    *v96 = &unk_1EA99F948;
    v96[1] = 0;
    v96[2] = 0;
    v96[3] = v97;
  }
  else
  {
    v96 = 0;
  }
  *((_QWORD *)&v178 + 1) = v96;
  v189 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v214, a3);
  v213 = 0;
  MIL::IROperator::Make((__int128 *)v180, &v179, &v178, (uint64_t)v214, (uint64_t)v212, a4);
  v98 = v213;
  if (v213 == v212)
  {
    v99 = 4;
    v98 = v212;
  }
  else
  {
    if (!v213)
      goto LABEL_95;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_95:
  v100 = v215;
  if (v215 == v214)
  {
    v101 = 4;
    v100 = v214;
    goto LABEL_99;
  }
  if (v215)
  {
    v101 = 5;
LABEL_99:
    (*(void (**)(void))(*v100 + 8 * v101))();
  }
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  if (*((_QWORD *)&v178 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
  if (*((_QWORD *)&v179 + 1))
  {
    v106 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (SHIBYTE(v181) < 0)
    operator delete(v180[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&v216);
  v108 = v216;
  std::string::basic_string[abi:ne180100]<0>(v174, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v174, 0, (uint64_t *)&Scalar);
  v176 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v177 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v172, "U");
  (*((void (**)(void **, char **, void **))*v108 + 3))(v108, &v176, v172);
  if (v173 < 0)
    operator delete(v172[0]);
  v111 = v177;
  if (v177)
  {
    p_shared_owners = (unint64_t *)&v177->__shared_owners_;
    do
      v113 = __ldaxr(p_shared_owners);
    while (__stlxr(v113 - 1, p_shared_owners));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*(void (**)(char *))(*(_QWORD *)v114 + 8))(v114);
  if (v175 < 0)
    operator delete(v174[0]);
  v115 = v216;
  std::string::basic_string[abi:ne180100]<0>(v168, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v168, 0, (uint64_t *)&Scalar);
  v170 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = (std::__shared_weak_count_vtbl *)Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v171 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v166, "I");
  (*((void (**)(void **, char **, void **))*v115 + 3))(v115, &v170, v166);
  if (v167 < 0)
    operator delete(v166[0]);
  v118 = v171;
  if (v171)
  {
    v119 = (unint64_t *)&v171->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*(void (**)(char *))(*(_QWORD *)v121 + 8))(v121);
  if (v169 < 0)
    operator delete(v168[0]);
  v122 = v216;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v164 = Scalar;
  if (Scalar)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = (std::__shared_weak_count_vtbl *)Scalar;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v165 = v123;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "U");
  (*((void (**)(void **, char **, void **))*v122 + 3))(v122, &v164, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v125 = v165;
  if (v165)
  {
    v126 = (unint64_t *)&v165->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = Scalar;
  Scalar = 0;
  if (v128)
    (*(void (**)(char *))(*(_QWORD *)v128 + 8))(v128);
  v129 = *a4;
  v160 = v216;
  if (v216)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = v216;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = (std::__shared_weak_count_vtbl *)v131;
  }
  else
  {
    v130 = 0;
  }
  v161 = v130;
  v216 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v129 + 56))(v129, &v160);
  v132 = v161;
  if (v161)
  {
    v133 = (unint64_t *)&v161->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v216;
  v216 = 0;
  if (v135)
    (*((void (**)(void **))*v135 + 1))(v135);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v216);
  v136 = v216;
  std::string::basic_string[abi:ne180100]<0>(v156, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v156, 0, (uint64_t *)&Scalar);
  v158 = Scalar;
  if (Scalar)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = (std::__shared_weak_count_vtbl *)Scalar;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v159 = v137;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v154, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v136 + 3))(v136, &v158, 0, v154);
  if (v155 < 0)
    operator delete(v154[0]);
  v139 = v159;
  if (v159)
  {
    v140 = (unint64_t *)&v159->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = Scalar;
  Scalar = 0;
  if (v142)
    (*(void (**)(char *))(*(_QWORD *)v142 + 8))(v142);
  if (v157 < 0)
    operator delete(v156[0]);
  v143 = *a4;
  v152 = v216;
  if (v216)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = v216;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = (std::__shared_weak_count_vtbl *)v145;
  }
  else
  {
    v144 = 0;
  }
  v153 = v144;
  v216 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v143 + 56))(v143, &v152);
  v146 = v153;
  if (v153)
  {
    v147 = (unint64_t *)&v153->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v216;
  v216 = 0;
  if (v149)
    (*((void (**)(void **))*v149 + 1))(v149);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v189, 0);
  result = (uint64_t)v211;
  if (v211)
  {
    v151 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v211);
    return MEMORY[0x1E0C023A0](v151, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08D56B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 168);
  *(_QWORD *)(v59 - 168) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 240), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::BaseGatherWithAxis::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void **v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char **v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  char *v94;
  char *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  char **v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  char *v120;
  void **v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  char *v127;
  void **v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  void **v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void **v141;
  void **v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  void **v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void **v155;
  uint64_t result;
  uint64_t v157;
  void **v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  void *v162[2];
  char v163;
  char *v164;
  std::__shared_weak_count *v165;
  void **v166;
  std::__shared_weak_count *v167;
  void *v168[2];
  char v169;
  char *v170;
  std::__shared_weak_count *v171;
  void *v172[2];
  char v173;
  void *v174[2];
  char v175;
  char *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  void *v180[2];
  char v181;
  char *v182;
  std::__shared_weak_count *v183;
  __int128 v184;
  __int128 v185;
  void *v186[2];
  uint64_t v187;
  void *v188;
  void *v189;
  _QWORD *v190;
  __n128 v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  char **v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  void *__p;
  void *v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  _QWORD *v204;
  void *v205;
  void *v206;
  _QWORD *v207;
  void *v208;
  void *v209;
  _QWORD *v210;
  void *v211;
  void *v212;
  _QWORD *v213;
  void *v214;
  void *v215;
  _QWORD *v216;
  __n128 v217;
  _QWORD *v218;
  _BYTE v219[24];
  _BYTE *v220;
  _BYTE v221[24];
  _BYTE *v222;
  void **v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *Scalar;
  char *v231;
  char *v232;
  char *v233;
  char **v234;
  uint64_t v235;

  v235 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v218 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (char *)operator new(0x10uLL);
  v231 = v11 + 16;
  v232 = v11 + 16;
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  Scalar = v11;
  v223 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v216 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v214 = v14;
  v215 = v14 + 2;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v214);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v213 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  v211 = v17;
  v212 = v17 + 2;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v211);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(0x10uLL);
  v210 = v20 + 2;
  *v20 = v18;
  v20[1] = v19;
  v208 = v20;
  v209 = v20 + 2;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v208);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(0x10uLL);
  v206 = v23 + 2;
  v207 = v23 + 2;
  *v23 = v21;
  v23[1] = v22;
  v205 = v23;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v205);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(0x10uLL);
  v203 = v26 + 2;
  v204 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v202 = v26;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v202);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v200 = v29 + 2;
  v201 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  __p = v29;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v223, 7, &v217);
  MIL::IRParameter::Make(&v217, (uint64_t *)&v188);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v188);
  v30 = v188;
  v188 = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v217.n128_u64[1];
  if (v217.n128_u64[1])
  {
    v32 = (unint64_t *)(v217.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p)
  {
    v200 = __p;
    operator delete(__p);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (Scalar)
  {
    v231 = Scalar;
    operator delete(Scalar);
  }
  v34 = v218;
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = (char *)operator new(8uLL);
  Scalar = v36;
  *(_QWORD *)v36 = v35;
  v231 = v36 + 8;
  v232 = v36 + 8;
  v223 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v214 = v38;
  *v38 = v37;
  v216 = v38 + 1;
  v215 = v38 + 1;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v214);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v211 = v40;
  *v40 = v39;
  v213 = v40 + 1;
  v212 = v40 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v211);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v208 = v42;
  *v42 = v41;
  v210 = v42 + 1;
  v209 = v42 + 1;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v208);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v205 = v44;
  *v44 = v43;
  v206 = v44 + 1;
  v207 = v44 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v205);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v223, 5, &v198);
  MIL::IRParameter::Make(&v198, (uint64_t *)&v202);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v34, "indices", (uint64_t *)&v202);
  v45 = v202;
  v202 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v198.n128_u64[1];
  if (v198.n128_u64[1])
  {
    v47 = (unint64_t *)(v198.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (Scalar)
  {
    v231 = Scalar;
    operator delete(Scalar);
  }
  v49 = v218;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v197);
  MIL::IRParameter::Make(&v197, (uint64_t *)&v223);
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v49, "validate_indices", (uint64_t *)&v223);
  v51 = v223;
  v223 = 0;
  if (v51)
    (*((void (**)(void **))*v51 + 1))(v51);
  v52 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v53 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  v55 = v218;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v196);
  MIL::IRParameter::Make(&v196, (uint64_t *)&v223);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v55, "axis", (uint64_t *)&v223);
  v57 = v223;
  v223 = 0;
  if (v57)
    (*((void (**)(void **))*v57 + 1))(v57);
  v58 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v59 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  v195 = 0;
  v61 = operator new();
  *(_QWORD *)v61 = 0;
  *(_QWORD *)(v61 + 8) = 0;
  *(_QWORD *)(v61 + 16) = 0;
  v223 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, (void **)v61);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v223, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v195, 1uLL);
  v62 = v195;
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v214 = v64;
  *v64 = v63;
  v216 = v64 + 1;
  v215 = v64 + 1;
  v223 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v214);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v211 = v66;
  *v66 = v65;
  v213 = v66 + 1;
  v212 = v66 + 1;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v211);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v208 = v68;
  *v68 = v67;
  v210 = v68 + 1;
  v209 = v68 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v208);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v205 = v70;
  *v70 = v69;
  v206 = v70 + 1;
  v207 = v70 + 1;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v205);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v202 = v72;
  *v72 = v71;
  v203 = v72 + 1;
  v204 = v72 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v202);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  __p = v74;
  *v74 = v73;
  v200 = v74 + 1;
  v201 = v74 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v75 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v76 = operator new(8uLL);
  v188 = v76;
  *v76 = v75;
  v189 = v76 + 1;
  v190 = v76 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v188);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v223, 7, &v191);
  MIL::IRParameter::Make(&v191, &v192);
  v77 = v192;
  v193 = v192;
  if (v192)
  {
    v78 = (_QWORD *)operator new();
    v79 = v192;
    *v78 = &unk_1EA99F888;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v79;
  }
  else
  {
    v78 = 0;
  }
  v194 = v78;
  v192 = 0;
  v80 = v62[2];
  v81 = v62[1];
  if (v81 >= v80)
  {
    v83 = (v81 - *v62) >> 4;
    v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v85 = v80 - *v62;
    if (v85 >> 3 > v84)
      v84 = v85 >> 3;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
      v86 = 0xFFFFFFFFFFFFFFFLL;
    else
      v86 = v84;
    v234 = v62 + 2;
    v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v62 + 2), v86);
    v89 = (uint64_t *)&v87[16 * v83];
    *v89 = v77;
    v89[1] = (uint64_t)v78;
    v193 = 0;
    v194 = 0;
    v91 = *v62;
    v90 = v62[1];
    if (v90 == *v62)
    {
      v94 = v62[1];
      v92 = &v87[16 * v83];
    }
    else
    {
      v92 = &v87[16 * v83];
      do
      {
        v93 = *((_OWORD *)v90 - 1);
        v90 -= 16;
        *((_OWORD *)v92 - 1) = v93;
        v92 -= 16;
        *(_QWORD *)v90 = 0;
        *((_QWORD *)v90 + 1) = 0;
      }
      while (v90 != v91);
      v94 = *v62;
      v90 = v62[1];
    }
    v82 = (char *)(v89 + 2);
    *v62 = v92;
    Scalar = v94;
    v231 = v94;
    v62[1] = (char *)(v89 + 2);
    v232 = v90;
    v95 = v62[2];
    v62[2] = &v87[16 * v88];
    v233 = v95;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v81 = v77;
    *((_QWORD *)v81 + 1) = v78;
    v82 = v81 + 16;
    v193 = 0;
    v194 = 0;
  }
  v62[1] = v82;
  v96 = v192;
  v192 = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = (std::__shared_weak_count *)v191.n128_u64[1];
  if (v191.n128_u64[1])
  {
    v98 = (unint64_t *)(v191.n128_u64[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (v188)
  {
    v189 = v188;
    operator delete(v188);
  }
  if (__p)
  {
    v200 = __p;
    operator delete(__p);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  *(_OWORD *)v186 = *(_OWORD *)a2;
  v187 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v100 = (uint64_t)v218;
  *(_QWORD *)&v185 = v218;
  if (v218)
  {
    v101 = (_QWORD *)operator new();
    *v101 = &unk_1EA99F8E8;
    v101[1] = 0;
    v101[2] = 0;
    v101[3] = v100;
  }
  else
  {
    v101 = 0;
  }
  *((_QWORD *)&v185 + 1) = v101;
  v218 = 0;
  *(_QWORD *)&v184 = v195;
  if (v195)
  {
    v102 = (_QWORD *)operator new();
    v103 = v195;
    *v102 = &unk_1EA99F948;
    v102[1] = 0;
    v102[2] = 0;
    v102[3] = v103;
  }
  else
  {
    v102 = 0;
  }
  *((_QWORD *)&v184 + 1) = v102;
  v195 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v221, a3);
  v220 = 0;
  MIL::IROperator::Make((__int128 *)v186, &v185, &v184, (uint64_t)v221, (uint64_t)v219, a4);
  v104 = v220;
  if (v220 == v219)
  {
    v105 = 4;
    v104 = v219;
  }
  else
  {
    if (!v220)
      goto LABEL_102;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_102:
  v106 = v222;
  if (v222 == v221)
  {
    v107 = 4;
    v106 = v221;
    goto LABEL_106;
  }
  if (v222)
  {
    v107 = 5;
LABEL_106:
    (*(void (**)(void))(*v106 + 8 * v107))();
  }
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  if (*((_QWORD *)&v185 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (SHIBYTE(v187) < 0)
    operator delete(v186[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&v223);
  v114 = v223;
  std::string::basic_string[abi:ne180100]<0>(v180, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v180, 0, (uint64_t *)&Scalar);
  v182 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v183 = v115;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "U");
  (*((void (**)(void **, char **, void **))*v114 + 3))(v114, &v182, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v117 = v183;
  if (v183)
  {
    p_shared_owners = (unint64_t *)&v183->__shared_owners_;
    do
      v119 = __ldaxr(p_shared_owners);
    while (__stlxr(v119 - 1, p_shared_owners));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*(void (**)(char *))(*(_QWORD *)v120 + 8))(v120);
  if (v181 < 0)
    operator delete(v180[0]);
  v121 = v223;
  std::string::basic_string[abi:ne180100]<0>(v174, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v174, 0, (uint64_t *)&Scalar);
  v176 = Scalar;
  if (Scalar)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)Scalar;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v177 = v122;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v172, "I");
  (*((void (**)(void **, char **, void **))*v121 + 3))(v121, &v176, v172);
  if (v173 < 0)
    operator delete(v172[0]);
  v124 = v177;
  if (v177)
  {
    v125 = (unint64_t *)&v177->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = Scalar;
  Scalar = 0;
  if (v127)
    (*(void (**)(char *))(*(_QWORD *)v127 + 8))(v127);
  if (v175 < 0)
    operator delete(v174[0]);
  v128 = v223;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v170 = Scalar;
  if (Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v171 = v129;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v168, "U");
  (*((void (**)(void **, char **, void **))*v128 + 3))(v128, &v170, v168);
  if (v169 < 0)
    operator delete(v168[0]);
  v131 = v171;
  if (v171)
  {
    v132 = (unint64_t *)&v171->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = Scalar;
  Scalar = 0;
  if (v134)
    (*(void (**)(char *))(*(_QWORD *)v134 + 8))(v134);
  v135 = *a4;
  v166 = v223;
  if (v223)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = v223;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = (std::__shared_weak_count_vtbl *)v137;
  }
  else
  {
    v136 = 0;
  }
  v167 = v136;
  v223 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v135 + 56))(v135, &v166);
  v138 = v167;
  if (v167)
  {
    v139 = (unint64_t *)&v167->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v223;
  v223 = 0;
  if (v141)
    (*((void (**)(void **))*v141 + 1))(v141);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v223);
  v142 = v223;
  std::string::basic_string[abi:ne180100]<0>(v162, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v162, 0, (uint64_t *)&Scalar);
  v164 = Scalar;
  if (Scalar)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = (std::__shared_weak_count_vtbl *)Scalar;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v165 = v143;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v142 + 3))(v142, &v164, 0, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v145 = v165;
  if (v165)
  {
    v146 = (unint64_t *)&v165->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = Scalar;
  Scalar = 0;
  if (v148)
    (*(void (**)(char *))(*(_QWORD *)v148 + 8))(v148);
  if (v163 < 0)
    operator delete(v162[0]);
  v149 = *a4;
  v158 = v223;
  if (v223)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = v223;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = (std::__shared_weak_count_vtbl *)v151;
  }
  else
  {
    v150 = 0;
  }
  v159 = v150;
  v223 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v149 + 56))(v149, &v158);
  v152 = v159;
  if (v159)
  {
    v153 = (unint64_t *)&v159->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = v223;
  v223 = 0;
  if (v155)
    (*((void (**)(void **))*v155 + 1))(v155);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, 0);
  result = (uint64_t)v218;
  if (v218)
  {
    v157 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v218);
    return MEMORY[0x1E0C023A0](v157, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08D6E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 168);
  *(_QWORD *)(v59 - 168) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 240), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Gather::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  void **v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t *v93;
  char *v94;
  char *v95;
  char *v96;
  __int128 v97;
  char *v98;
  char *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  char **v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  void **v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *p_shared_owners;
  unint64_t v126;
  char *v127;
  void **v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  char *v134;
  void **v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  void **v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void **v148;
  void **v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  void **v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void **v162;
  uint64_t result;
  uint64_t v164;
  void **v165;
  std::__shared_weak_count *v166;
  void *v167[2];
  char v168;
  void *v169[2];
  char v170;
  char *v171;
  std::__shared_weak_count *v172;
  void **v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  char *v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  void *v181[2];
  char v182;
  char *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  void *v187[2];
  char v188;
  char *v189;
  std::__shared_weak_count *v190;
  __int128 v191;
  __int128 v192;
  void *v193[2];
  uint64_t v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  __n128 v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  char **v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __n128 v206;
  void *__p;
  void *v208;
  _QWORD *v209;
  void *v210;
  void *v211;
  _QWORD *v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  void *v216;
  void *v217;
  _QWORD *v218;
  void *v219;
  void *v220;
  _QWORD *v221;
  void *v222;
  void *v223;
  _QWORD *v224;
  __n128 v225;
  _QWORD *v226;
  _QWORD v227[3];
  _QWORD *v228;
  _BYTE v229[24];
  _BYTE *v230;
  _QWORD v231[3];
  _QWORD *v232;
  void **v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *Scalar;
  char *v241;
  char *v242;
  char *v243;
  char **v244;
  uint64_t v245;

  v245 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v226 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v241 = v9 + 16;
  v242 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = v9;
  v233 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v224 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v222 = v12;
  v223 = v12 + 2;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v222);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v221 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v219 = v15;
  v220 = v15 + 2;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v219);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v218 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v216 = v18;
  v217 = v18 + 2;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v216);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v215 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v213 = v21;
  v214 = v21 + 2;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v213);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v211 = v24 + 2;
  v212 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v210 = v24;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v210);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v208 = v27 + 2;
  v209 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  __p = v27;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v233, 7, &v225);
  MIL::IRParameter::Make(&v225, (uint64_t *)&v195);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v195);
  v28 = v195;
  v195 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v225.n128_u64[1];
  if (v225.n128_u64[1])
  {
    v30 = (unint64_t *)(v225.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v208 = __p;
    operator delete(__p);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (Scalar)
  {
    v241 = Scalar;
    operator delete(Scalar);
  }
  v32 = v226;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (char *)operator new(8uLL);
  Scalar = v34;
  *(_QWORD *)v34 = v33;
  v241 = v34 + 8;
  v242 = v34 + 8;
  v233 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v222 = v36;
  *v36 = v35;
  v224 = v36 + 1;
  v223 = v36 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v222);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v219 = v38;
  *v38 = v37;
  v221 = v38 + 1;
  v220 = v38 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v219);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v216 = v40;
  *v40 = v39;
  v218 = v40 + 1;
  v217 = v40 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v216);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v213 = v42;
  *v42 = v41;
  v215 = v42 + 1;
  v214 = v42 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v213);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v233, 5, &v206);
  MIL::IRParameter::Make(&v206, (uint64_t *)&v210);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v32, "indices", (uint64_t *)&v210);
  v43 = v210;
  v210 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v206.n128_u64[1];
  if (v206.n128_u64[1])
  {
    v45 = (unint64_t *)(v206.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (Scalar)
  {
    v241 = Scalar;
    operator delete(Scalar);
  }
  v47 = v226;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v205);
  MIL::IRParameter::Make(&v205, (uint64_t *)&v233);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v47, "validate_indices", (uint64_t *)&v233);
  v49 = v233;
  v233 = 0;
  if (v49)
    (*((void (**)(void **))*v49 + 1))(v49);
  v50 = (std::__shared_weak_count *)v205.n128_u64[1];
  if (v205.n128_u64[1])
  {
    v51 = (unint64_t *)(v205.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v53 = v226;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v204);
  MIL::IRParameter::Make(&v204, (uint64_t *)&v233);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v53, "axis", (uint64_t *)&v233);
  v55 = v233;
  v233 = 0;
  if (v55)
    (*((void (**)(void **))*v55 + 1))(v55);
  v56 = (std::__shared_weak_count *)v204.n128_u64[1];
  if (v204.n128_u64[1])
  {
    v57 = (unint64_t *)(v204.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  v59 = v226;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v203);
  MIL::IRParameter::Make(&v203, (uint64_t *)&v233);
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v59, "batch_dims", (uint64_t *)&v233);
  v61 = v233;
  v233 = 0;
  if (v61)
    (*((void (**)(void **))*v61 + 1))(v61);
  v62 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v63 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 48))(*((_QWORD *)v60 + 5), 1);
  v202 = 0;
  v65 = operator new();
  *(_QWORD *)v65 = 0;
  *(_QWORD *)(v65 + 8) = 0;
  *(_QWORD *)(v65 + 16) = 0;
  v233 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v202, (void **)v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v233, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v202, 1uLL);
  v66 = v202;
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v222 = v68;
  *v68 = v67;
  v224 = v68 + 1;
  v223 = v68 + 1;
  v233 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v222);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v219 = v70;
  *v70 = v69;
  v221 = v70 + 1;
  v220 = v70 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v219);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v216 = v72;
  *v72 = v71;
  v218 = v72 + 1;
  v217 = v72 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v216);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v213 = v74;
  *v74 = v73;
  v215 = v74 + 1;
  v214 = v74 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v213);
  v75 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v76 = operator new(8uLL);
  v210 = v76;
  *v76 = v75;
  v211 = v76 + 1;
  v212 = v76 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v210);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(8uLL);
  __p = v78;
  *v78 = v77;
  v208 = v78 + 1;
  v209 = v78 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(8uLL);
  v195 = v80;
  *v80 = v79;
  v196 = v80 + 1;
  v197 = v80 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v195);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v233, 7, &v198);
  MIL::IRParameter::Make(&v198, &v199);
  v81 = v199;
  v200 = v199;
  if (v199)
  {
    v82 = (_QWORD *)operator new();
    v83 = v199;
    *v82 = &unk_1EA99F888;
    v82[1] = 0;
    v82[2] = 0;
    v82[3] = v83;
  }
  else
  {
    v82 = 0;
  }
  v201 = v82;
  v199 = 0;
  v84 = v66[2];
  v85 = v66[1];
  if (v85 >= v84)
  {
    v87 = (v85 - *v66) >> 4;
    v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v89 = v84 - *v66;
    if (v89 >> 3 > v88)
      v88 = v89 >> 3;
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0)
      v90 = 0xFFFFFFFFFFFFFFFLL;
    else
      v90 = v88;
    v244 = v66 + 2;
    v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v66 + 2), v90);
    v93 = (uint64_t *)&v91[16 * v87];
    *v93 = v81;
    v93[1] = (uint64_t)v82;
    v200 = 0;
    v201 = 0;
    v95 = *v66;
    v94 = v66[1];
    if (v94 == *v66)
    {
      v98 = v66[1];
      v96 = &v91[16 * v87];
    }
    else
    {
      v96 = &v91[16 * v87];
      do
      {
        v97 = *((_OWORD *)v94 - 1);
        v94 -= 16;
        *((_OWORD *)v96 - 1) = v97;
        v96 -= 16;
        *(_QWORD *)v94 = 0;
        *((_QWORD *)v94 + 1) = 0;
      }
      while (v94 != v95);
      v98 = *v66;
      v94 = v66[1];
    }
    v86 = (char *)(v93 + 2);
    *v66 = v96;
    Scalar = v98;
    v241 = v98;
    v66[1] = (char *)(v93 + 2);
    v242 = v94;
    v99 = v66[2];
    v66[2] = &v91[16 * v92];
    v243 = v99;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v85 = v81;
    *((_QWORD *)v85 + 1) = v82;
    v86 = v85 + 16;
    v200 = 0;
    v201 = 0;
  }
  v66[1] = v86;
  v100 = v199;
  v199 = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v101 = (std::__shared_weak_count *)v198.n128_u64[1];
  if (v198.n128_u64[1])
  {
    v102 = (unint64_t *)(v198.n128_u64[1] + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (__p)
  {
    v208 = __p;
    operator delete(__p);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  *(_OWORD *)v193 = *(_OWORD *)a2;
  v194 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v104 = (uint64_t)v226;
  *(_QWORD *)&v192 = v226;
  if (v226)
  {
    v105 = (_QWORD *)operator new();
    *v105 = &unk_1EA99F8E8;
    v105[1] = 0;
    v105[2] = 0;
    v105[3] = v104;
  }
  else
  {
    v105 = 0;
  }
  *((_QWORD *)&v192 + 1) = v105;
  v226 = 0;
  *(_QWORD *)&v191 = v202;
  if (v202)
  {
    v106 = (_QWORD *)operator new();
    v107 = v202;
    *v106 = &unk_1EA99F948;
    v106[1] = 0;
    v106[2] = 0;
    v106[3] = v107;
  }
  else
  {
    v106 = 0;
  }
  *((_QWORD *)&v191 + 1) = v106;
  v202 = 0;
  v231[0] = &unk_1EA99FAC8;
  v231[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateGather;
  v232 = v231;
  v230 = 0;
  MIL::IROperator::Make((__int128 *)v193, &v192, &v191, (uint64_t)v231, (uint64_t)v229, a3);
  v108 = v230;
  if (v230 == v229)
  {
    v109 = 4;
    v108 = v229;
  }
  else
  {
    if (!v230)
      goto LABEL_109;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_109:
  v110 = v232;
  if (v232 == v231)
  {
    v111 = 4;
    v110 = v231;
    goto LABEL_113;
  }
  if (v232)
  {
    v111 = 5;
LABEL_113:
    (*(void (**)(void))(*v110 + 8 * v111))();
  }
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
  if (*((_QWORD *)&v191 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v116 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  if (SHIBYTE(v194) < 0)
    operator delete(v193[0]);
  v118 = *a3;
  v227[0] = &off_1EA99FBD8;
  v227[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGather;
  v228 = v227;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v118 + 200))(v118, v227);
  v119 = v228;
  if (v228 == v227)
  {
    v120 = 4;
    v119 = v227;
  }
  else
  {
    if (!v228)
      goto LABEL_131;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_131:
  MIL::Validation::TensorDTypeConstraints::Make(&v233);
  v121 = v233;
  std::string::basic_string[abi:ne180100]<0>(v187, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v187, 0, (uint64_t *)&Scalar);
  v189 = Scalar;
  if (Scalar)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)Scalar;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v190 = v122;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "U");
  (*((void (**)(void **, char **, void **))*v121 + 3))(v121, &v189, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v124 = v190;
  if (v190)
  {
    p_shared_owners = (unint64_t *)&v190->__shared_owners_;
    do
      v126 = __ldaxr(p_shared_owners);
    while (__stlxr(v126 - 1, p_shared_owners));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = Scalar;
  Scalar = 0;
  if (v127)
    (*(void (**)(char *))(*(_QWORD *)v127 + 8))(v127);
  if (v188 < 0)
    operator delete(v187[0]);
  v128 = v233;
  std::string::basic_string[abi:ne180100]<0>(v181, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v181, 0, (uint64_t *)&Scalar);
  v183 = Scalar;
  if (Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v184 = v129;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "I");
  (*((void (**)(void **, char **, void **))*v128 + 3))(v128, &v183, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v131 = v184;
  if (v184)
  {
    v132 = (unint64_t *)&v184->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = Scalar;
  Scalar = 0;
  if (v134)
    (*(void (**)(char *))(*(_QWORD *)v134 + 8))(v134);
  if (v182 < 0)
    operator delete(v181[0]);
  v135 = v233;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v177 = Scalar;
  if (Scalar)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = (std::__shared_weak_count_vtbl *)Scalar;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v178 = v136;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v175, "U");
  (*((void (**)(void **, char **, void **))*v135 + 3))(v135, &v177, v175);
  if (v176 < 0)
    operator delete(v175[0]);
  v138 = v178;
  if (v178)
  {
    v139 = (unint64_t *)&v178->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = Scalar;
  Scalar = 0;
  if (v141)
    (*(void (**)(char *))(*(_QWORD *)v141 + 8))(v141);
  v142 = *a3;
  v173 = v233;
  if (v233)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = v233;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = (std::__shared_weak_count_vtbl *)v144;
  }
  else
  {
    v143 = 0;
  }
  v174 = v143;
  v233 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v142 + 56))(v142, &v173);
  v145 = v174;
  if (v174)
  {
    v146 = (unint64_t *)&v174->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v233;
  v233 = 0;
  if (v148)
    (*((void (**)(void **))*v148 + 1))(v148);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v233);
  v149 = v233;
  std::string::basic_string[abi:ne180100]<0>(v169, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v169, 0, (uint64_t *)&Scalar);
  v171 = Scalar;
  if (Scalar)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = (std::__shared_weak_count_vtbl *)Scalar;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v172 = v150;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v167, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v149 + 3))(v149, &v171, 0, v167);
  if (v168 < 0)
    operator delete(v167[0]);
  v152 = v172;
  if (v172)
  {
    v153 = (unint64_t *)&v172->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = Scalar;
  Scalar = 0;
  if (v155)
    (*(void (**)(char *))(*(_QWORD *)v155 + 8))(v155);
  if (v170 < 0)
    operator delete(v169[0]);
  v156 = *a3;
  v165 = v233;
  if (v233)
  {
    v157 = (std::__shared_weak_count *)operator new();
    v158 = v233;
    v157->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v157->__shared_owners_ = 0;
    v157->__shared_weak_owners_ = 0;
    v157[1].__vftable = (std::__shared_weak_count_vtbl *)v158;
  }
  else
  {
    v157 = 0;
  }
  v166 = v157;
  v233 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v156 + 56))(v156, &v165);
  v159 = v166;
  if (v166)
  {
    v160 = (unint64_t *)&v166->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = v233;
  v233 = 0;
  if (v162)
    (*((void (**)(void **))*v162 + 1))(v162);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v202, 0);
  result = (uint64_t)v226;
  if (v226)
  {
    v164 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v226);
    return MEMORY[0x1E0C023A0](v164, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08D8740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 168);
  *(_QWORD *)(v59 - 168) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x270], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::GatherAlongAxis::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  char **v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  char *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  char **v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  char *v121;
  void **v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void **v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void **v142;
  void **v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void **v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void **v156;
  uint64_t result;
  uint64_t v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  void *v163[2];
  char v164;
  char *v165;
  std::__shared_weak_count *v166;
  void **v167;
  std::__shared_weak_count *v168;
  void *v169[2];
  char v170;
  char *v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  void *v175[2];
  char v176;
  char *v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  void *v181[2];
  char v182;
  char *v183;
  std::__shared_weak_count *v184;
  __int128 v185;
  __int128 v186;
  void *v187[2];
  uint64_t v188;
  void *v189;
  void *v190;
  _QWORD *v191;
  __n128 v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  char **v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  void *__p;
  void *v201;
  _QWORD *v202;
  void *v203;
  void *v204;
  _QWORD *v205;
  void *v206;
  void *v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  _QWORD *v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  void *v215;
  void *v216;
  _QWORD *v217;
  __n128 v218;
  _QWORD *v219;
  _QWORD v220[3];
  _QWORD *v221;
  _BYTE v222[24];
  _BYTE *v223;
  _QWORD v224[3];
  _QWORD *v225;
  void **v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *Scalar;
  char *v234;
  char *v235;
  char *v236;
  char **v237;
  uint64_t v238;

  v238 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v219 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v234 = v9 + 16;
  v235 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = v9;
  v226 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v217 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v215 = v12;
  v216 = v12 + 2;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v215);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v214 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v212 = v15;
  v213 = v15 + 2;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v212);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v211 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v209 = v18;
  v210 = v18 + 2;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v209);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v207 = v21 + 2;
  v208 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v206 = v21;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v206);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v204 = v24 + 2;
  v205 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v203 = v24;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v203);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v201 = v27 + 2;
  v202 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  __p = v27;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v226, 7, &v218);
  MIL::IRParameter::Make(&v218, (uint64_t *)&v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v189);
  v28 = v189;
  v189 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v218.n128_u64[1];
  if (v218.n128_u64[1])
  {
    v30 = (unint64_t *)(v218.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v201 = __p;
    operator delete(__p);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (Scalar)
  {
    v234 = Scalar;
    operator delete(Scalar);
  }
  v32 = v219;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (char *)operator new(8uLL);
  Scalar = v34;
  *(_QWORD *)v34 = v33;
  v234 = v34 + 8;
  v235 = v34 + 8;
  v226 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v215 = v36;
  *v36 = v35;
  v217 = v36 + 1;
  v216 = v36 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v215);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v212 = v38;
  *v38 = v37;
  v214 = v38 + 1;
  v213 = v38 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v212);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v209 = v40;
  *v40 = v39;
  v211 = v40 + 1;
  v210 = v40 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v209);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v206 = v42;
  *v42 = v41;
  v207 = v42 + 1;
  v208 = v42 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v206);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v226, 5, &v199);
  MIL::IRParameter::Make(&v199, (uint64_t *)&v203);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v32, "indices", (uint64_t *)&v203);
  v43 = v203;
  v203 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v199.n128_u64[1];
  if (v199.n128_u64[1])
  {
    v45 = (unint64_t *)(v199.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (Scalar)
  {
    v234 = Scalar;
    operator delete(Scalar);
  }
  v47 = v219;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v198);
  MIL::IRParameter::Make(&v198, (uint64_t *)&v226);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v47, "validate_indices", (uint64_t *)&v226);
  v49 = v226;
  v226 = 0;
  if (v49)
    (*((void (**)(void **))*v49 + 1))(v49);
  v50 = (std::__shared_weak_count *)v198.n128_u64[1];
  if (v198.n128_u64[1])
  {
    v51 = (unint64_t *)(v198.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v53 = v219;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v197);
  MIL::IRParameter::Make(&v197, (uint64_t *)&v226);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v53, "axis", (uint64_t *)&v226);
  v55 = v226;
  v226 = 0;
  if (v55)
    (*((void (**)(void **))*v55 + 1))(v55);
  v56 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v57 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  v196 = 0;
  v59 = operator new();
  *(_QWORD *)v59 = 0;
  *(_QWORD *)(v59 + 8) = 0;
  *(_QWORD *)(v59 + 16) = 0;
  v226 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v196, (void **)v59);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v226, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v196, 1uLL);
  v60 = v196;
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v215 = v62;
  *v62 = v61;
  v217 = v62 + 1;
  v216 = v62 + 1;
  v226 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v215);
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v212 = v64;
  *v64 = v63;
  v214 = v64 + 1;
  v213 = v64 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v212);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v209 = v66;
  *v66 = v65;
  v211 = v66 + 1;
  v210 = v66 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v209);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v206 = v68;
  *v68 = v67;
  v207 = v68 + 1;
  v208 = v68 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v206);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v203 = v70;
  *v70 = v69;
  v204 = v70 + 1;
  v205 = v70 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v203);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  __p = v72;
  *v72 = v71;
  v201 = v72 + 1;
  v202 = v72 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v189 = v74;
  *v74 = v73;
  v190 = v74 + 1;
  v191 = v74 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v189);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v226, 7, &v192);
  MIL::IRParameter::Make(&v192, &v193);
  v75 = v193;
  v194 = v193;
  if (v193)
  {
    v76 = (_QWORD *)operator new();
    v77 = v193;
    *v76 = &unk_1EA99F888;
    v76[1] = 0;
    v76[2] = 0;
    v76[3] = v77;
  }
  else
  {
    v76 = 0;
  }
  v195 = v76;
  v193 = 0;
  v78 = v60[2];
  v79 = v60[1];
  if (v79 >= v78)
  {
    v81 = (v79 - *v60) >> 4;
    v82 = v81 + 1;
    if ((unint64_t)(v81 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v83 = v78 - *v60;
    if (v83 >> 3 > v82)
      v82 = v83 >> 3;
    if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF0)
      v84 = 0xFFFFFFFFFFFFFFFLL;
    else
      v84 = v82;
    v237 = v60 + 2;
    v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v60 + 2), v84);
    v87 = (uint64_t *)&v85[16 * v81];
    *v87 = v75;
    v87[1] = (uint64_t)v76;
    v194 = 0;
    v195 = 0;
    v89 = *v60;
    v88 = v60[1];
    if (v88 == *v60)
    {
      v92 = v60[1];
      v90 = &v85[16 * v81];
    }
    else
    {
      v90 = &v85[16 * v81];
      do
      {
        v91 = *((_OWORD *)v88 - 1);
        v88 -= 16;
        *((_OWORD *)v90 - 1) = v91;
        v90 -= 16;
        *(_QWORD *)v88 = 0;
        *((_QWORD *)v88 + 1) = 0;
      }
      while (v88 != v89);
      v92 = *v60;
      v88 = v60[1];
    }
    v80 = (char *)(v87 + 2);
    *v60 = v90;
    Scalar = v92;
    v234 = v92;
    v60[1] = (char *)(v87 + 2);
    v235 = v88;
    v93 = v60[2];
    v60[2] = &v85[16 * v86];
    v236 = v93;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v79 = v75;
    *((_QWORD *)v79 + 1) = v76;
    v80 = v79 + 16;
    v194 = 0;
    v195 = 0;
  }
  v60[1] = v80;
  v94 = v193;
  v193 = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  v95 = (std::__shared_weak_count *)v192.n128_u64[1];
  if (v192.n128_u64[1])
  {
    v96 = (unint64_t *)(v192.n128_u64[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  if (__p)
  {
    v201 = __p;
    operator delete(__p);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  *(_OWORD *)v187 = *(_OWORD *)a2;
  v188 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v98 = (uint64_t)v219;
  *(_QWORD *)&v186 = v219;
  if (v219)
  {
    v99 = (_QWORD *)operator new();
    *v99 = &unk_1EA99F8E8;
    v99[1] = 0;
    v99[2] = 0;
    v99[3] = v98;
  }
  else
  {
    v99 = 0;
  }
  *((_QWORD *)&v186 + 1) = v99;
  v219 = 0;
  *(_QWORD *)&v185 = v196;
  if (v196)
  {
    v100 = (_QWORD *)operator new();
    v101 = v196;
    *v100 = &unk_1EA99F948;
    v100[1] = 0;
    v100[2] = 0;
    v100[3] = v101;
  }
  else
  {
    v100 = 0;
  }
  *((_QWORD *)&v185 + 1) = v100;
  v196 = 0;
  v224[0] = &unk_1EA99FAC8;
  v224[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateGatherAlongAxis;
  v225 = v224;
  v223 = 0;
  MIL::IROperator::Make((__int128 *)v187, &v186, &v185, (uint64_t)v224, (uint64_t)v222, a3);
  v102 = v223;
  if (v223 == v222)
  {
    v103 = 4;
    v102 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_102;
    v103 = 5;
  }
  (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_102:
  v104 = v225;
  if (v225 == v224)
  {
    v105 = 4;
    v104 = v224;
    goto LABEL_106;
  }
  if (v225)
  {
    v105 = 5;
LABEL_106:
    (*(void (**)(void))(*v104 + 8 * v105))();
  }
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  if (*((_QWORD *)&v185 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (SHIBYTE(v188) < 0)
    operator delete(v187[0]);
  v112 = *a3;
  v220[0] = &off_1EA99FBD8;
  v220[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGatherAlongAxis;
  v221 = v220;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v112 + 200))(v112, v220);
  v113 = v221;
  if (v221 == v220)
  {
    v114 = 4;
    v113 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_124;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_124:
  MIL::Validation::TensorDTypeConstraints::Make(&v226);
  v115 = v226;
  std::string::basic_string[abi:ne180100]<0>(v181, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v181, 0, (uint64_t *)&Scalar);
  v183 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = (std::__shared_weak_count_vtbl *)Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v184 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "U");
  (*((void (**)(void **, char **, void **))*v115 + 3))(v115, &v183, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v118 = v184;
  if (v184)
  {
    p_shared_owners = (unint64_t *)&v184->__shared_owners_;
    do
      v120 = __ldaxr(p_shared_owners);
    while (__stlxr(v120 - 1, p_shared_owners));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*(void (**)(char *))(*(_QWORD *)v121 + 8))(v121);
  if (v182 < 0)
    operator delete(v181[0]);
  v122 = v226;
  std::string::basic_string[abi:ne180100]<0>(v175, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v175, 0, (uint64_t *)&Scalar);
  v177 = Scalar;
  if (Scalar)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = (std::__shared_weak_count_vtbl *)Scalar;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v178 = v123;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "I");
  (*((void (**)(void **, char **, void **))*v122 + 3))(v122, &v177, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v125 = v178;
  if (v178)
  {
    v126 = (unint64_t *)&v178->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = Scalar;
  Scalar = 0;
  if (v128)
    (*(void (**)(char *))(*(_QWORD *)v128 + 8))(v128);
  if (v176 < 0)
    operator delete(v175[0]);
  v129 = v226;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v171 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = (std::__shared_weak_count_vtbl *)Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v172 = v130;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v169, "U");
  (*((void (**)(void **, char **, void **))*v129 + 3))(v129, &v171, v169);
  if (v170 < 0)
    operator delete(v169[0]);
  v132 = v172;
  if (v172)
  {
    v133 = (unint64_t *)&v172->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*(void (**)(char *))(*(_QWORD *)v135 + 8))(v135);
  v136 = *a3;
  v167 = v226;
  if (v226)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = v226;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = (std::__shared_weak_count_vtbl *)v138;
  }
  else
  {
    v137 = 0;
  }
  v168 = v137;
  v226 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v136 + 56))(v136, &v167);
  v139 = v168;
  if (v168)
  {
    v140 = (unint64_t *)&v168->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v226;
  v226 = 0;
  if (v142)
    (*((void (**)(void **))*v142 + 1))(v142);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v226);
  v143 = v226;
  std::string::basic_string[abi:ne180100]<0>(v163, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v163, 0, (uint64_t *)&Scalar);
  v165 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = (std::__shared_weak_count_vtbl *)Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v166 = v144;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v143 + 3))(v143, &v165, 0, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v146 = v166;
  if (v166)
  {
    v147 = (unint64_t *)&v166->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*(void (**)(char *))(*(_QWORD *)v149 + 8))(v149);
  if (v164 < 0)
    operator delete(v163[0]);
  v150 = *a3;
  v159 = v226;
  if (v226)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = v226;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = (std::__shared_weak_count_vtbl *)v152;
  }
  else
  {
    v151 = 0;
  }
  v160 = v151;
  v226 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v150 + 56))(v150, &v159);
  v153 = v160;
  if (v160)
  {
    v154 = (unint64_t *)&v160->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = v226;
  v226 = 0;
  if (v156)
    (*((void (**)(void **))*v156 + 1))(v156);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v196, 0);
  result = (uint64_t)v219;
  if (v219)
  {
    v158 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v219);
    return MEMORY[0x1E0C023A0](v158, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08D9FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 168);
  *(_QWORD *)(v59 - 168) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x260], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::GatherNd::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  char **v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  char *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  char **v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  char *v121;
  void **v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void **v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void **v142;
  void **v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void **v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void **v156;
  uint64_t result;
  uint64_t v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  void *v163[2];
  char v164;
  char *v165;
  std::__shared_weak_count *v166;
  void **v167;
  std::__shared_weak_count *v168;
  void *v169[2];
  char v170;
  char *v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  void *v175[2];
  char v176;
  char *v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  void *v181[2];
  char v182;
  char *v183;
  std::__shared_weak_count *v184;
  __int128 v185;
  __int128 v186;
  void *v187[2];
  uint64_t v188;
  void *v189;
  void *v190;
  _QWORD *v191;
  __n128 v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  char **v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  void *__p;
  void *v201;
  _QWORD *v202;
  void *v203;
  void *v204;
  _QWORD *v205;
  void *v206;
  void *v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  _QWORD *v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  void *v215;
  void *v216;
  _QWORD *v217;
  __n128 v218;
  _QWORD *v219;
  _QWORD v220[3];
  _QWORD *v221;
  _BYTE v222[24];
  _BYTE *v223;
  _QWORD v224[3];
  _QWORD *v225;
  void **v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *Scalar;
  char *v234;
  char *v235;
  char *v236;
  char **v237;
  uint64_t v238;

  v238 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v219 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v234 = v9 + 16;
  v235 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = v9;
  v226 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v217 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v215 = v12;
  v216 = v12 + 2;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v215);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v214 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v212 = v15;
  v213 = v15 + 2;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v212);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v211 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v209 = v18;
  v210 = v18 + 2;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v209);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v207 = v21 + 2;
  v208 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v206 = v21;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v206);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v204 = v24 + 2;
  v205 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v203 = v24;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v203);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v201 = v27 + 2;
  v202 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  __p = v27;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v226, 7, &v218);
  MIL::IRParameter::Make(&v218, (uint64_t *)&v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v189);
  v28 = v189;
  v189 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v218.n128_u64[1];
  if (v218.n128_u64[1])
  {
    v30 = (unint64_t *)(v218.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v201 = __p;
    operator delete(__p);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (Scalar)
  {
    v234 = Scalar;
    operator delete(Scalar);
  }
  v32 = v219;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (char *)operator new(8uLL);
  Scalar = v34;
  *(_QWORD *)v34 = v33;
  v234 = v34 + 8;
  v235 = v34 + 8;
  v226 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v215 = v36;
  *v36 = v35;
  v217 = v36 + 1;
  v216 = v36 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v215);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v212 = v38;
  *v38 = v37;
  v214 = v38 + 1;
  v213 = v38 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v212);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v209 = v40;
  *v40 = v39;
  v211 = v40 + 1;
  v210 = v40 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v209);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v206 = v42;
  *v42 = v41;
  v207 = v42 + 1;
  v208 = v42 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v206);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v226, 5, &v199);
  MIL::IRParameter::Make(&v199, (uint64_t *)&v203);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v32, "indices", (uint64_t *)&v203);
  v43 = v203;
  v203 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v199.n128_u64[1];
  if (v199.n128_u64[1])
  {
    v45 = (unint64_t *)(v199.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (Scalar)
  {
    v234 = Scalar;
    operator delete(Scalar);
  }
  v47 = v219;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v198);
  MIL::IRParameter::Make(&v198, (uint64_t *)&v226);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v47, "validate_indices", (uint64_t *)&v226);
  v49 = v226;
  v226 = 0;
  if (v49)
    (*((void (**)(void **))*v49 + 1))(v49);
  v50 = (std::__shared_weak_count *)v198.n128_u64[1];
  if (v198.n128_u64[1])
  {
    v51 = (unint64_t *)(v198.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v53 = v219;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v197);
  MIL::IRParameter::Make(&v197, (uint64_t *)&v226);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v53, "batch_dims", (uint64_t *)&v226);
  v55 = v226;
  v226 = 0;
  if (v55)
    (*((void (**)(void **))*v55 + 1))(v55);
  v56 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v57 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 48))(*((_QWORD *)v54 + 5), 1);
  v196 = 0;
  v59 = operator new();
  *(_QWORD *)v59 = 0;
  *(_QWORD *)(v59 + 8) = 0;
  *(_QWORD *)(v59 + 16) = 0;
  v226 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v196, (void **)v59);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v226, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v196, 1uLL);
  v60 = v196;
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v215 = v62;
  *v62 = v61;
  v217 = v62 + 1;
  v216 = v62 + 1;
  v226 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v215);
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v212 = v64;
  *v64 = v63;
  v214 = v64 + 1;
  v213 = v64 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v212);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v209 = v66;
  *v66 = v65;
  v211 = v66 + 1;
  v210 = v66 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v209);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v206 = v68;
  *v68 = v67;
  v207 = v68 + 1;
  v208 = v68 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v206);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v203 = v70;
  *v70 = v69;
  v204 = v70 + 1;
  v205 = v70 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v203);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  __p = v72;
  *v72 = v71;
  v201 = v72 + 1;
  v202 = v72 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v189 = v74;
  *v74 = v73;
  v190 = v74 + 1;
  v191 = v74 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v189);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v226, 7, &v192);
  MIL::IRParameter::Make(&v192, &v193);
  v75 = v193;
  v194 = v193;
  if (v193)
  {
    v76 = (_QWORD *)operator new();
    v77 = v193;
    *v76 = &unk_1EA99F888;
    v76[1] = 0;
    v76[2] = 0;
    v76[3] = v77;
  }
  else
  {
    v76 = 0;
  }
  v195 = v76;
  v193 = 0;
  v78 = v60[2];
  v79 = v60[1];
  if (v79 >= v78)
  {
    v81 = (v79 - *v60) >> 4;
    v82 = v81 + 1;
    if ((unint64_t)(v81 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v83 = v78 - *v60;
    if (v83 >> 3 > v82)
      v82 = v83 >> 3;
    if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF0)
      v84 = 0xFFFFFFFFFFFFFFFLL;
    else
      v84 = v82;
    v237 = v60 + 2;
    v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v60 + 2), v84);
    v87 = (uint64_t *)&v85[16 * v81];
    *v87 = v75;
    v87[1] = (uint64_t)v76;
    v194 = 0;
    v195 = 0;
    v89 = *v60;
    v88 = v60[1];
    if (v88 == *v60)
    {
      v92 = v60[1];
      v90 = &v85[16 * v81];
    }
    else
    {
      v90 = &v85[16 * v81];
      do
      {
        v91 = *((_OWORD *)v88 - 1);
        v88 -= 16;
        *((_OWORD *)v90 - 1) = v91;
        v90 -= 16;
        *(_QWORD *)v88 = 0;
        *((_QWORD *)v88 + 1) = 0;
      }
      while (v88 != v89);
      v92 = *v60;
      v88 = v60[1];
    }
    v80 = (char *)(v87 + 2);
    *v60 = v90;
    Scalar = v92;
    v234 = v92;
    v60[1] = (char *)(v87 + 2);
    v235 = v88;
    v93 = v60[2];
    v60[2] = &v85[16 * v86];
    v236 = v93;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v79 = v75;
    *((_QWORD *)v79 + 1) = v76;
    v80 = v79 + 16;
    v194 = 0;
    v195 = 0;
  }
  v60[1] = v80;
  v94 = v193;
  v193 = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  v95 = (std::__shared_weak_count *)v192.n128_u64[1];
  if (v192.n128_u64[1])
  {
    v96 = (unint64_t *)(v192.n128_u64[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  if (__p)
  {
    v201 = __p;
    operator delete(__p);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  *(_OWORD *)v187 = *(_OWORD *)a2;
  v188 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v98 = (uint64_t)v219;
  *(_QWORD *)&v186 = v219;
  if (v219)
  {
    v99 = (_QWORD *)operator new();
    *v99 = &unk_1EA99F8E8;
    v99[1] = 0;
    v99[2] = 0;
    v99[3] = v98;
  }
  else
  {
    v99 = 0;
  }
  *((_QWORD *)&v186 + 1) = v99;
  v219 = 0;
  *(_QWORD *)&v185 = v196;
  if (v196)
  {
    v100 = (_QWORD *)operator new();
    v101 = v196;
    *v100 = &unk_1EA99F948;
    v100[1] = 0;
    v100[2] = 0;
    v100[3] = v101;
  }
  else
  {
    v100 = 0;
  }
  *((_QWORD *)&v185 + 1) = v100;
  v196 = 0;
  v224[0] = &unk_1EA99FAC8;
  v224[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateGatherNd;
  v225 = v224;
  v223 = 0;
  MIL::IROperator::Make((__int128 *)v187, &v186, &v185, (uint64_t)v224, (uint64_t)v222, a3);
  v102 = v223;
  if (v223 == v222)
  {
    v103 = 4;
    v102 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_102;
    v103 = 5;
  }
  (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_102:
  v104 = v225;
  if (v225 == v224)
  {
    v105 = 4;
    v104 = v224;
    goto LABEL_106;
  }
  if (v225)
  {
    v105 = 5;
LABEL_106:
    (*(void (**)(void))(*v104 + 8 * v105))();
  }
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  if (*((_QWORD *)&v185 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (SHIBYTE(v188) < 0)
    operator delete(v187[0]);
  v112 = *a3;
  v220[0] = &off_1EA99FBD8;
  v220[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGatherNd;
  v221 = v220;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v112 + 200))(v112, v220);
  v113 = v221;
  if (v221 == v220)
  {
    v114 = 4;
    v113 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_124;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_124:
  MIL::Validation::TensorDTypeConstraints::Make(&v226);
  v115 = v226;
  std::string::basic_string[abi:ne180100]<0>(v181, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v181, 0, (uint64_t *)&Scalar);
  v183 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = (std::__shared_weak_count_vtbl *)Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v184 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "U");
  (*((void (**)(void **, char **, void **))*v115 + 3))(v115, &v183, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v118 = v184;
  if (v184)
  {
    p_shared_owners = (unint64_t *)&v184->__shared_owners_;
    do
      v120 = __ldaxr(p_shared_owners);
    while (__stlxr(v120 - 1, p_shared_owners));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*(void (**)(char *))(*(_QWORD *)v121 + 8))(v121);
  if (v182 < 0)
    operator delete(v181[0]);
  v122 = v226;
  std::string::basic_string[abi:ne180100]<0>(v175, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v175, 0, (uint64_t *)&Scalar);
  v177 = Scalar;
  if (Scalar)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = (std::__shared_weak_count_vtbl *)Scalar;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v178 = v123;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "I");
  (*((void (**)(void **, char **, void **))*v122 + 3))(v122, &v177, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v125 = v178;
  if (v178)
  {
    v126 = (unint64_t *)&v178->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = Scalar;
  Scalar = 0;
  if (v128)
    (*(void (**)(char *))(*(_QWORD *)v128 + 8))(v128);
  if (v176 < 0)
    operator delete(v175[0]);
  v129 = v226;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v171 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = (std::__shared_weak_count_vtbl *)Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v172 = v130;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v169, "U");
  (*((void (**)(void **, char **, void **))*v129 + 3))(v129, &v171, v169);
  if (v170 < 0)
    operator delete(v169[0]);
  v132 = v172;
  if (v172)
  {
    v133 = (unint64_t *)&v172->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*(void (**)(char *))(*(_QWORD *)v135 + 8))(v135);
  v136 = *a3;
  v167 = v226;
  if (v226)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = v226;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = (std::__shared_weak_count_vtbl *)v138;
  }
  else
  {
    v137 = 0;
  }
  v168 = v137;
  v226 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v136 + 56))(v136, &v167);
  v139 = v168;
  if (v168)
  {
    v140 = (unint64_t *)&v168->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v226;
  v226 = 0;
  if (v142)
    (*((void (**)(void **))*v142 + 1))(v142);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v226);
  v143 = v226;
  std::string::basic_string[abi:ne180100]<0>(v163, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v163, 0, (uint64_t *)&Scalar);
  v165 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = (std::__shared_weak_count_vtbl *)Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v166 = v144;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v143 + 3))(v143, &v165, 0, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v146 = v166;
  if (v166)
  {
    v147 = (unint64_t *)&v166->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*(void (**)(char *))(*(_QWORD *)v149 + 8))(v149);
  if (v164 < 0)
    operator delete(v163[0]);
  v150 = *a3;
  v159 = v226;
  if (v226)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = v226;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = (std::__shared_weak_count_vtbl *)v152;
  }
  else
  {
    v151 = 0;
  }
  v160 = v151;
  v226 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v150 + 56))(v150, &v159);
  v153 = v160;
  if (v160)
  {
    v154 = (unint64_t *)&v160->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = v226;
  v226 = 0;
  if (v156)
    (*((void (**)(void **))*v156 + 1))(v156);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v196, 0);
  result = (uint64_t)v219;
  if (v219)
  {
    v158 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v219);
    return MEMORY[0x1E0C023A0](v158, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08DB860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 168);
  *(_QWORD *)(v59 - 168) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x260], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateCropResize(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  const void *ParameterValue;
  int v6;
  MIL::IRValueType *ParameterType;
  uint64_t v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  int v11;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD **v19;
  uint64_t v20;
  _QWORD **v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL IsParameterSet;
  char v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34[2];
  char v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void *v42[2];
  char v43;

  std::string::basic_string[abi:ne180100]<0>(v42, "normalized_coordinates");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v6 = MIL::IRValue::GetScalar<BOOL>(ParameterValue);
  if (v43 < 0)
    operator delete((void *)v42[0]);
  std::string::basic_string[abi:ne180100]<0>(v42, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v43 < 0)
    operator delete((void *)v42[0]);
  std::string::basic_string[abi:ne180100]<0>(v42, "boxes");
  v9 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v10 = MIL::IRValueType::AsTensorType(v9);
  if (v43 < 0)
    operator delete((void *)v42[0]);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  if (v6 && (v11 & 0xFFFFFFFE) != 4)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v13 = (std::__shared_weak_count *)LocationPtr[1];
    v40 = *LocationPtr;
    v41 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "If \"normalized_coordinates\" is set, then \"boxes\" must have fp16 or fp32 data type");
    MIL::ValidationResult::ValidationResult(a2, &v40, 315, __p);
    if (v39 < 0)
      operator delete(__p[0]);
    v16 = v41;
    if (v41)
    {
      v17 = (unint64_t *)&v41->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_17:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      return;
    }
    return;
  }
  v19 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v19 + 16))(**v19);
  v21 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 96))(v10);
  v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v21 + 16))(**v21);
  if (v20)
    v23 = v22 == 0;
  else
    v23 = 1;
  if (v23)
  {
LABEL_28:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  v24 = v22;
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24);
  std::string::basic_string[abi:ne180100]<0>(v42, "box_indices");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, v42);
  v28 = v26 <= v25 || IsParameterSet;
  if (v43 < 0)
  {
    operator delete((void *)v42[0]);
    if ((v28 & 1) != 0)
      goto LABEL_28;
  }
  else if ((v28 & 1) != 0)
  {
    goto LABEL_28;
  }
  v29 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v30 = (std::__shared_weak_count *)v29[1];
  v36 = *v29;
  v37 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "B dimension of \"x\" may not be greater than the N dimension of \"boxes\" when \"box_indices\" is set to default, otherwise \"box_indices\" would point outside of \"x\"s bounds.");
  MIL::ValidationResult::ValidationResult(a2, &v36, 315, v34);
  if (v35 < 0)
    operator delete(v34[0]);
  v16 = v37;
  if (v37)
  {
    v33 = (unint64_t *)&v37->__shared_owners_;
    do
      v18 = __ldaxr(v33);
    while (__stlxr(v18 - 1, v33));
    goto LABEL_17;
  }
}

void sub_1E08DC0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceCropResize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  MIL::IRValueType *v8;
  uint64_t v9;
  int v10;
  MIL::IRValue *SingleValue;
  const void *v12;
  int v13;
  MIL::IRValue *v14;
  const void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  void *__p;
  void *v25;
  _QWORD *v26;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "boxes");
  v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v9 = MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "target_height");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v12 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  v13 = MIL::IRValue::GetScalar<int>(v12);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "target_width");
  v14 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v15 = (const void *)MIL::IRValue::AsTensor(v14);
  v16 = MIL::IRValue::GetScalar<int>(v15);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  v17 = **(_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v18 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7) + 8);
  v19 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v13);
  v20 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v16);
  v21 = operator new(0x20uLL);
  v25 = v21 + 4;
  v26 = v21 + 4;
  *v21 = v17;
  v21[1] = v18;
  v21[2] = v19;
  v21[3] = v20;
  __p = v21;
  v22 = MIL::IRTensorValueType::MakeWithShape(*a1, v10, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v23 = (uint64_t *)operator new(8uLL);
  *a3 = v23;
  *v23++ = v22;
  a3[1] = v23;
  a3[2] = v23;
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_1E08DC33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateResize(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  const void *ParameterValue;
  unsigned int v6;
  MIL::IRValueType *ParameterType;
  uint64_t v8;
  unint64_t v9;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  MIL::IRValueType *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  const void *v34;
  const void *v35;
  std::string *v36;
  std::string::size_type size;
  std::string::size_type v38;
  std::string *v40;
  int data;
  int v42;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51[2];
  char v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  char v56;
  std::string v57;
  void *v58[2];
  char v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  void *__p[2];
  char v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void *v66[2];
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::string v70;

  std::string::basic_string[abi:ne180100]<0>(&v70, "resized_dims");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v6 = MIL::IRValue::GetScalar<unsigned int>(ParameterValue);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v70, "shape");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  if (v9 < v6)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v11 = (std::__shared_weak_count *)LocationPtr[1];
    v68 = *LocationPtr;
    v69 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v66, "resized_dims must be <= the size of the input shape");
    MIL::ValidationResult::ValidationResult(a2, &v68, 315, v66);
    if (v67 < 0)
      operator delete(v66[0]);
    v14 = v69;
    if (v69)
    {
      v15 = (unint64_t *)&v69->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
LABEL_42:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      return;
    }
    return;
  }
  v17 = v9;
  std::string::basic_string[abi:ne180100]<0>(&v70, "x");
  v18 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v19 = MIL::IRValueType::AsTensorType(v18);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 104))(v19))
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
    memset(&v70, 0, sizeof(v70));
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v70, *(const void **)v20, *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 3);
    if (v17 > (uint64_t)(v70.__r_.__value_.__l.__size_ - v70.__r_.__value_.__r.__words[0]) >> 3)
    {
      v21 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v22 = (std::__shared_weak_count *)v21[1];
      v64 = *v21;
      v65 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "shape size must be <= the rank of the input shape");
      MIL::ValidationResult::ValidationResult(a2, &v64, 315, __p);
      if (v63 < 0)
        operator delete(__p[0]);
      v25 = v65;
      if (v65)
      {
        v26 = (unint64_t *)&v65->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = (void *)v70.__r_.__value_.__r.__words[0];
      if (!v70.__r_.__value_.__r.__words[0])
        return;
      v70.__r_.__value_.__l.__size_ = v70.__r_.__value_.__r.__words[0];
      goto LABEL_62;
    }
    if (v70.__r_.__value_.__r.__words[0])
    {
      v70.__r_.__value_.__l.__size_ = v70.__r_.__value_.__r.__words[0];
      operator delete(v70.__r_.__value_.__l.__data_);
    }
  }
  if (v6 < 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v57, "interpolation_mode");
    v34 = (const void *)MIL::IROperation::GetParameterValue(this);
    MIL::IRValue::GetScalar<std::string>(v34, &v70);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v55, "sampling_mode");
    v35 = (const void *)MIL::IROperation::GetParameterValue(this);
    MIL::IRValue::GetScalar<std::string>(v35, &v57);
    if (v56 < 0)
      operator delete(v55);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v70.__r_.__value_.__l.__size_ != 16)
        goto LABEL_57;
      v36 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) != 16)
        goto LABEL_57;
      v36 = &v70;
    }
    v38 = v36->__r_.__value_.__r.__words[0];
    size = v36->__r_.__value_.__l.__size_;
    if (v38 != 0x5F5453455241454ELL || size != 0x524F42484749454ELL)
      goto LABEL_57;
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v57.__r_.__value_.__l.__size_ == 7)
      {
        v40 = (std::string *)v57.__r_.__value_.__r.__words[0];
LABEL_69:
        data = (int)v40->__r_.__value_.__l.__data_;
        v42 = *(_DWORD *)((char *)v40->__r_.__value_.__r.__words + 3);
        if (data != 1095124292 || v42 != 1414288705)
          goto LABEL_73;
LABEL_57:
        MIL::ValidationResult::ValidationResult(a2);
LABEL_58:
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v28 = (void *)v70.__r_.__value_.__r.__words[0];
LABEL_62:
        operator delete(v28);
        return;
      }
    }
    else if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) == 7)
    {
      v40 = &v57;
      goto LABEL_69;
    }
LABEL_73:
    v44 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v45 = (std::__shared_weak_count *)v44[1];
    v53 = *v44;
    v54 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    std::string::basic_string[abi:ne180100]<0>(v51, "non-default sampling_mode is unsupported with interpolation_mode == NEAREST_NEIGHBOR");
    MIL::ValidationResult::ValidationResult(a2, &v53, 315, v51);
    if (v52 < 0)
      operator delete(v51[0]);
    v48 = v54;
    if (v54)
    {
      v49 = (unint64_t *)&v54->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    goto LABEL_58;
  }
  v29 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v30 = (std::__shared_weak_count *)v29[1];
  v60 = *v29;
  v61 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  std::string::basic_string[abi:ne180100]<0>(v58, "resized_dims is only supported for value <= 2");
  MIL::ValidationResult::ValidationResult(a2, &v60, 315, v58);
  if (v59 < 0)
    operator delete(v58[0]);
  v14 = v61;
  if (v61)
  {
    v33 = (unint64_t *)&v61->__shared_owners_;
    do
      v16 = __ldaxr(v33);
    while (__stlxr(v16 - 1, v33));
    goto LABEL_42;
  }
}

void sub_1E08DC868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v43 - 49) < 0)
    operator delete(*(void **)(v43 - 72));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceResize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v8;
  int v9;
  uint64_t v10;
  MIL::IRValueType *v11;
  uint64_t v12;
  const void *SingleValue;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD **v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  BOOL IsValue;
  MIL::IRValue *v26;
  uint64_t v27;
  __int128 v28;
  unsigned int i;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int j;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t **v54;
  unsigned int v55;
  char *v56;
  std::string::size_type v57;
  std::string::size_type v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  std::string::size_type v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::string::size_type v69;
  std::string::size_type v70;
  __int128 v71;
  uint64_t v72;
  unsigned int v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  MIL::MILContext *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t *v112;
  std::string::size_type v113;
  char *v114;
  std::string::size_type v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  void *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  std::string *v123;
  __int128 v124;
  void *exception;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  __int128 v136;
  std::string *v137;
  std::string::size_type size;
  std::string *v139;
  __int128 v140;
  std::string *v141;
  __int128 v142;
  void *v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  unint64_t v148;
  _QWORD *v149;
  void *__p[2];
  _QWORD *__pa;
  int v152;
  __int128 v154;
  std::string::size_type v155;
  __int128 v156;
  _QWORD v157[3];
  __int128 v158;
  __int128 v159;
  std::string::size_type v160;
  __int128 v161;
  _QWORD v162[3];
  __int128 v163;
  void *v164;
  uint64_t *v165;
  char *v166;
  std::string v167;
  std::string v168;
  std::string v169;
  std::string v170;
  std::string v171;

  std::string::basic_string[abi:ne180100]<0>(&v171, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v171);
  v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  v9 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v8 + 88))(v8);
  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v8 + 96))(v8);
  v164 = 0;
  v165 = 0;
  v166 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v171, "shape");
  v11 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v171);
  v12 = MIL::IRValueType::AsTensorType(v11);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v171, "resized_dims");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v171);
  v14 = MIL::IRValue::GetScalar<unsigned int>(SingleValue);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  if (v14 >= 3)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v126 = a2[1];
    *(_QWORD *)&v163 = *a2;
    *((_QWORD *)&v163 + 1) = v126;
    if (v126)
    {
      v127 = (unint64_t *)(v126 + 8);
      do
        v128 = __ldxr(v127);
      while (__stxr(v128 + 1, v127));
    }
    std::string::basic_string[abi:ne180100]<0>(v162, "resized_dims is only supported for value <= 2");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v163, (uint64_t)v162, 315);
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v8 + 104))(v8) & 1) == 0)
  {
    if (&v164 != (void **)v10)
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v164, *(char **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
    v19 = MIL::IRTensorValueType::MakeWithShape(*a1, v9, (uint64_t)&v164);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v20 = operator new(8uLL);
LABEL_162:
    *a4 = v20;
    *v20 = v19;
    v107 = v20 + 1;
    a4[1] = v107;
    a4[2] = v107;
    goto LABEL_163;
  }
  v15 = MIL::IRTensorValueType::Rank(v8);
  v16 = v15;
  if (HIDWORD(v15) || v15 < v14)
  {
    v129 = __cxa_allocate_exception(0x48uLL);
    v130 = a2[1];
    *(_QWORD *)&v161 = *a2;
    *((_QWORD *)&v161 + 1) = v130;
    if (v130)
    {
      v131 = (unint64_t *)(v130 + 8);
      do
        v132 = __ldxr(v131);
      while (__stxr(v132 + 1, v131));
    }
    std::to_string(&v168, v14);
    v133 = std::string::insert(&v168, 0, "resized_dims of size ");
    v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
    v169.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v134;
    v133->__r_.__value_.__l.__size_ = 0;
    v133->__r_.__value_.__r.__words[2] = 0;
    v133->__r_.__value_.__r.__words[0] = 0;
    v135 = std::string::append(&v169, " and an input tensor x of rank ");
    v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
    v170.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v136;
    v135->__r_.__value_.__l.__size_ = 0;
    v135->__r_.__value_.__r.__words[2] = 0;
    v135->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v167, v16);
    if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v137 = &v167;
    else
      v137 = (std::string *)v167.__r_.__value_.__r.__words[0];
    if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v167.__r_.__value_.__r.__words[2]);
    else
      size = v167.__r_.__value_.__l.__size_;
    v139 = std::string::append(&v170, (const std::string::value_type *)v137, size);
    v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
    v171.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v140;
    v139->__r_.__value_.__l.__size_ = 0;
    v139->__r_.__value_.__r.__words[2] = 0;
    v139->__r_.__value_.__r.__words[0] = 0;
    v141 = std::string::append(&v171, " are incompatible.");
    v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
    v160 = v141->__r_.__value_.__r.__words[2];
    v159 = v142;
    v141->__r_.__value_.__l.__size_ = 0;
    v141->__r_.__value_.__r.__words[2] = 0;
    v141->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)v129, &v161, (uint64_t)&v159, 315);
  }
  std::string::basic_string[abi:ne180100]<0>(&v171, "shape");
  v17 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v171);
  if (!v17)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v18 = v14;
  v152 = v9;
  if (MIL::IRTypedArgument::IsValue(**((MIL::IRTypedArgument ***)v17 + 5)))
  {
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v171.__r_.__value_.__l.__data_);
    goto LABEL_20;
  }
  v21 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
  v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v21 + 16))(**v21);
  v23 = v22;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v171.__r_.__value_.__l.__data_);
    if (v23)
      goto LABEL_20;
  }
  else if (v22)
  {
LABEL_20:
    std::string::basic_string[abi:ne180100]<0>(&v171, "shape");
    v24 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v171);
    if (!v24)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    IsValue = MIL::IRTypedArgument::IsValue(**((MIL::IRTypedArgument ***)v24 + 5));
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v171.__r_.__value_.__l.__data_);
    v149 = a4;
    if (IsValue)
    {
      std::string::basic_string[abi:ne180100]<0>(&v171, "shape");
      v26 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v171);
      v27 = MIL::IRValue::AsTensor(v26);
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v171.__r_.__value_.__l.__data_);
      MIL::IRTensorValue::TryGetDataView<unsigned int>(&v171, v27);
      if (v171.__r_.__value_.__s.__data_[0])
      {
        memset(&v170, 0, sizeof(v170));
        std::vector<long long>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)&v170, (unsigned int *)v171.__r_.__value_.__l.__size_, (unsigned int *)(v171.__r_.__value_.__l.__size_ + 4 * v171.__r_.__value_.__r.__words[2]), v171.__r_.__value_.__r.__words[2]);
        v28 = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
      }
      else
      {
        v28 = 0uLL;
      }
      *(_OWORD *)__p = v28;
      MIL::IRTensorValue::TryGetDataView<int>(&v170, v27);
      if (v170.__r_.__value_.__s.__data_[0])
      {
        memset(&v169, 0, sizeof(v169));
        std::vector<long long>::__init_with_size[abi:ne180100]<int const*,int const*>((char *)&v169, (int *)v170.__r_.__value_.__l.__size_, (int *)(v170.__r_.__value_.__l.__size_ + 4 * v170.__r_.__value_.__r.__words[2]), v170.__r_.__value_.__r.__words[2]);
        if (__p[0])
          operator delete(__p[0]);
        *(_OWORD *)__p = *(_OWORD *)&v169.__r_.__value_.__l.__data_;
      }
      MIL::IRTensorValue::TryGetDataView<unsigned short>(&v169, v27);
      if (v169.__r_.__value_.__s.__data_[0])
      {
        memset(&v168, 0, sizeof(v168));
        std::vector<long long>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>((char *)&v168, (unsigned __int16 *)v169.__r_.__value_.__l.__size_, (unsigned __int16 *)(v169.__r_.__value_.__l.__size_ + 2 * v169.__r_.__value_.__r.__words[2]), v169.__r_.__value_.__r.__words[2]);
        if (__p[0])
          operator delete(__p[0]);
        *(_OWORD *)__p = *(_OWORD *)&v168.__r_.__value_.__l.__data_;
      }
      MIL::IRTensorValue::TryGetDataView<short>(&v168, v27);
      if (v168.__r_.__value_.__s.__data_[0])
      {
        memset(&v167, 0, sizeof(v167));
        std::vector<long long>::__init_with_size[abi:ne180100]<short const*,short const*>((char *)&v167, (__int16 *)v168.__r_.__value_.__l.__size_, (__int16 *)(v168.__r_.__value_.__l.__size_ + 2 * v168.__r_.__value_.__r.__words[2]), v168.__r_.__value_.__r.__words[2]);
        if (__p[0])
          operator delete(__p[0]);
        v71 = *(_OWORD *)&v167.__r_.__value_.__l.__data_;
      }
      else
      {
        v71 = *(_OWORD *)__p;
      }
      v147 = a2;
      __pa = (_QWORD *)v71;
      v148 = *((_QWORD *)&v71 + 1) - v71;
      if ((uint64_t)(*((_QWORD *)&v71 + 1) - v71) >> 3 < (unint64_t)v14
        || ((uint64_t)(*((_QWORD *)&v71 + 1) - v71) >> 3) > v16)
      {
        v143 = __cxa_allocate_exception(0x48uLL);
        v144 = a2[1];
        *(_QWORD *)&v158 = *a2;
        *((_QWORD *)&v158 + 1) = v144;
        if (v144)
        {
          v145 = (unint64_t *)(v144 + 8);
          do
            v146 = __ldxr(v145);
          while (__stxr(v146 + 1, v145));
        }
        std::string::basic_string[abi:ne180100]<0>(v157, "\"shape\" must be >= \"resized_dims\", and<= rank(\"x\").");
        MIL::ValidationError::ValidationError((uint64_t)v143, &v158, (uint64_t)v157, 315);
      }
      if ((uint64_t)(v16 - v14) >= 1)
      {
        v72 = 0;
        v73 = 0;
        v74 = (char *)v165;
        do
        {
          v75 = *(char **)v10;
          if (v74 >= v166)
          {
            v76 = (v74 - (_BYTE *)v164) >> 3;
            if ((unint64_t)(v76 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v77 = (v166 - (_BYTE *)v164) >> 2;
            if (v77 <= v76 + 1)
              v77 = v76 + 1;
            if ((unint64_t)(v166 - (_BYTE *)v164) >= 0x7FFFFFFFFFFFFFF8)
              v78 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v78 = v77;
            if (v78)
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v166, v78);
            else
              v79 = 0;
            v80 = &v79[8 * v76];
            *(_QWORD *)v80 = *(_QWORD *)&v75[8 * v72];
            v74 = v80 + 8;
            v82 = (char *)v164;
            v81 = (char *)v165;
            if (v165 != v164)
            {
              do
              {
                v83 = *((_QWORD *)v81 - 1);
                v81 -= 8;
                *((_QWORD *)v80 - 1) = v83;
                v80 -= 8;
              }
              while (v81 != v82);
              v81 = (char *)v164;
            }
            v164 = v80;
            v165 = (uint64_t *)v74;
            v166 = &v79[8 * v78];
            if (v81)
              operator delete(v81);
          }
          else
          {
            *(_QWORD *)v74 = *(_QWORD *)&v75[8 * v72];
            v74 += 8;
          }
          v165 = (uint64_t *)v74;
          v72 = ++v73;
        }
        while ((uint64_t)(v16 - v14) > v73);
      }
      if (v14)
      {
        v84 = 0;
        v85 = (v148 >> 3) - v14;
        v86 = v16 - v14;
        do
        {
          v87 = (MIL::MILContext *)__pa[(v85 + v84)];
          if (v87)
          {
            if ((unint64_t)v87 >= 0x8000)
            {
              v119 = __cxa_allocate_exception(0x48uLL);
              v120 = v147[1];
              *(_QWORD *)&v156 = *v147;
              *((_QWORD *)&v156 + 1) = v120;
              if (v120)
              {
                v121 = (unint64_t *)(v120 + 8);
                do
                  v122 = __ldxr(v121);
                while (__stxr(v122 + 1, v121));
              }
              std::to_string(&v171, (uint64_t)v87);
              v123 = std::string::insert(&v171, 0, "Target shape value is out of bounds: ");
              v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
              v155 = v123->__r_.__value_.__r.__words[2];
              v154 = v124;
              v123->__r_.__value_.__l.__size_ = 0;
              v123->__r_.__value_.__r.__words[2] = 0;
              v123->__r_.__value_.__r.__words[0] = 0;
              MIL::ValidationError::ValidationError((uint64_t)v119, &v156, (uint64_t)&v154, 315);
            }
            v88 = MIL::IRConstantDimension::Make(*a1, v87);
            v89 = v88;
            v90 = v165;
            if (v165 >= (uint64_t *)v166)
            {
              v95 = ((char *)v165 - (_BYTE *)v164) >> 3;
              if ((unint64_t)(v95 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v96 = (v166 - (_BYTE *)v164) >> 2;
              if (v96 <= v95 + 1)
                v96 = v95 + 1;
              if ((unint64_t)(v166 - (_BYTE *)v164) >= 0x7FFFFFFFFFFFFFF8)
                v97 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v97 = v96;
              if (v97)
                v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v166, v97);
              else
                v98 = 0;
              v101 = &v98[8 * v95];
              *(_QWORD *)v101 = v89;
              v91 = (uint64_t *)(v101 + 8);
              v103 = (char *)v164;
              v102 = (char *)v165;
              if (v165 != v164)
              {
                do
                {
                  v104 = *((_QWORD *)v102 - 1);
                  v102 -= 8;
                  *((_QWORD *)v101 - 1) = v104;
                  v101 -= 8;
                }
                while (v102 != v103);
                goto LABEL_155;
              }
              goto LABEL_156;
            }
            *v165 = v88;
            v91 = v90 + 1;
          }
          else
          {
            v92 = (v86 + v84);
            v93 = *(char **)v10;
            v94 = v165;
            if (v165 >= (uint64_t *)v166)
            {
              v99 = ((char *)v165 - (_BYTE *)v164) >> 3;
              if ((unint64_t)(v99 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v100 = (v166 - (_BYTE *)v164) >> 2;
              if (v100 <= v99 + 1)
                v100 = v99 + 1;
              if ((unint64_t)(v166 - (_BYTE *)v164) >= 0x7FFFFFFFFFFFFFF8)
                v97 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v97 = v100;
              if (v97)
                v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v166, v97);
              else
                v98 = 0;
              v101 = &v98[8 * v99];
              *(_QWORD *)v101 = *(_QWORD *)&v93[8 * v92];
              v91 = (uint64_t *)(v101 + 8);
              v105 = (char *)v164;
              v102 = (char *)v165;
              if (v165 != v164)
              {
                do
                {
                  v106 = *((_QWORD *)v102 - 1);
                  v102 -= 8;
                  *((_QWORD *)v101 - 1) = v106;
                  v101 -= 8;
                }
                while (v102 != v105);
LABEL_155:
                v102 = (char *)v164;
              }
LABEL_156:
              v164 = v101;
              v165 = v91;
              v166 = &v98[8 * v97];
              if (v102)
                operator delete(v102);
              goto LABEL_158;
            }
            *v165 = *(_QWORD *)&v93[8 * v92];
            v91 = v94 + 1;
          }
LABEL_158:
          v165 = v91;
          ++v84;
        }
        while (v84 != v18);
      }
      if (__pa)
        operator delete(__pa);
    }
    else
    {
      for (i = 0; MIL::IRTensorValueType::Rank(v8) - v14 > i; ++i)
      {
        v30 = *(char **)v10;
        v31 = v165;
        if (v165 >= (uint64_t *)v166)
        {
          v33 = ((char *)v165 - (_BYTE *)v164) >> 3;
          if ((unint64_t)(v33 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v34 = (v166 - (_BYTE *)v164) >> 2;
          if (v34 <= v33 + 1)
            v34 = v33 + 1;
          if ((unint64_t)(v166 - (_BYTE *)v164) >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v166, v35);
          else
            v36 = 0;
          v37 = &v36[8 * v33];
          *(_QWORD *)v37 = *(_QWORD *)&v30[8 * i];
          v32 = (uint64_t *)(v37 + 8);
          v39 = (char *)v164;
          v38 = (char *)v165;
          if (v165 != v164)
          {
            do
            {
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v37 - 1) = v40;
              v37 -= 8;
            }
            while (v38 != v39);
            v38 = (char *)v164;
          }
          v164 = v37;
          v165 = v32;
          v166 = &v36[8 * v35];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v165 = *(_QWORD *)&v30[8 * i];
          v32 = v31 + 1;
        }
        v165 = v32;
      }
      if (v14)
      {
        for (j = 0; j != v14; ++j)
        {
          v42 = MIL::IRUnknownDimension::Make(*a1, 0);
          v43 = v42;
          v44 = v165;
          if (v165 >= (uint64_t *)v166)
          {
            v46 = ((char *)v165 - (_BYTE *)v164) >> 3;
            if ((unint64_t)(v46 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v47 = (v166 - (_BYTE *)v164) >> 2;
            if (v47 <= v46 + 1)
              v47 = v46 + 1;
            if ((unint64_t)(v166 - (_BYTE *)v164) >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v47;
            if (v48)
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v166, v48);
            else
              v49 = 0;
            v50 = (uint64_t *)&v49[8 * v46];
            *v50 = v43;
            v45 = v50 + 1;
            v52 = (char *)v164;
            v51 = (char *)v165;
            if (v165 != v164)
            {
              do
              {
                v53 = *((_QWORD *)v51 - 1);
                v51 -= 8;
                *--v50 = v53;
              }
              while (v51 != v52);
              v51 = (char *)v164;
            }
            v164 = v50;
            v165 = v45;
            v166 = &v49[8 * v48];
            if (v51)
              operator delete(v51);
          }
          else
          {
            *v165 = v42;
            v45 = v44 + 1;
          }
          v165 = v45;
        }
      }
    }
    v19 = MIL::IRTensorValueType::MakeWithShape(*a1, v152, (uint64_t)&v164);
    a4 = v149;
    *v149 = 0;
    v149[1] = 0;
    v149[2] = 0;
    v20 = operator new(8uLL);
    goto LABEL_162;
  }
  v54 = (uint64_t **)a4;
  v55 = 0;
  memset(&v171, 0, sizeof(v171));
  while (MIL::IRTensorValueType::Rank(v8) - v14 > v55)
  {
    v56 = *(char **)v10;
    v57 = v171.__r_.__value_.__l.__size_;
    if (v171.__r_.__value_.__l.__size_ >= v171.__r_.__value_.__r.__words[2])
    {
      v59 = (uint64_t)(v171.__r_.__value_.__l.__size_ - v171.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v59 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v60 = (uint64_t)(v171.__r_.__value_.__r.__words[2] - v171.__r_.__value_.__r.__words[0]) >> 2;
      if (v60 <= v59 + 1)
        v60 = v59 + 1;
      if (v171.__r_.__value_.__r.__words[2] - v171.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      if (v61)
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v171.__r_.__value_.__r.__words[2], v61);
      else
        v62 = 0;
      v63 = &v62[8 * v59];
      *(_QWORD *)v63 = *(_QWORD *)&v56[8 * v55];
      v58 = (std::string::size_type)(v63 + 8);
      v64 = (char *)v171.__r_.__value_.__l.__size_;
      v65 = v171.__r_.__value_.__r.__words[0];
      if (v171.__r_.__value_.__l.__size_ != v171.__r_.__value_.__r.__words[0])
      {
        do
        {
          v66 = *((_QWORD *)v64 - 1);
          v64 -= 8;
          *((_QWORD *)v63 - 1) = v66;
          v63 -= 8;
        }
        while (v64 != (char *)v65);
        v64 = (char *)v171.__r_.__value_.__r.__words[0];
      }
      v171.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
      v171.__r_.__value_.__l.__size_ = v58;
      v171.__r_.__value_.__r.__words[2] = (std::string::size_type)&v62[8 * v61];
      if (v64)
        operator delete(v64);
    }
    else
    {
      *(_QWORD *)v171.__r_.__value_.__l.__size_ = *(_QWORD *)&v56[8 * v55];
      v58 = v57 + 8;
    }
    v171.__r_.__value_.__l.__size_ = v58;
    ++v55;
  }
  v67 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
  v68 = v67;
  v69 = v171.__r_.__value_.__l.__size_;
  if (v171.__r_.__value_.__l.__size_ >= v171.__r_.__value_.__r.__words[2])
  {
    v108 = (uint64_t)(v171.__r_.__value_.__l.__size_ - v171.__r_.__value_.__r.__words[0]) >> 3;
    if ((unint64_t)(v108 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v109 = (uint64_t)(v171.__r_.__value_.__r.__words[2] - v171.__r_.__value_.__r.__words[0]) >> 2;
    if (v109 <= v108 + 1)
      v109 = v108 + 1;
    if (v171.__r_.__value_.__r.__words[2] - v171.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
      v110 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v110 = v109;
    if (v110)
      v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v171.__r_.__value_.__r.__words[2], v110);
    else
      v111 = 0;
    v112 = (uint64_t *)&v111[8 * v108];
    v113 = (std::string::size_type)&v111[8 * v110];
    *v112 = v68;
    v70 = (std::string::size_type)(v112 + 1);
    v114 = (char *)v171.__r_.__value_.__l.__size_;
    v115 = v171.__r_.__value_.__r.__words[0];
    if (v171.__r_.__value_.__l.__size_ != v171.__r_.__value_.__r.__words[0])
    {
      do
      {
        v116 = *((_QWORD *)v114 - 1);
        v114 -= 8;
        *--v112 = v116;
      }
      while (v114 != (char *)v115);
      v114 = (char *)v171.__r_.__value_.__r.__words[0];
    }
    v171.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
    v171.__r_.__value_.__l.__size_ = v70;
    v171.__r_.__value_.__r.__words[2] = v113;
    if (v114)
      operator delete(v114);
  }
  else
  {
    *(_QWORD *)v171.__r_.__value_.__l.__size_ = v67;
    v70 = v69 + 8;
  }
  v171.__r_.__value_.__l.__size_ = v70;
  v117 = MIL::IRTensorValueType::MakeWithShape(*a1, v152, (uint64_t)&v171);
  *v54 = 0;
  v54[1] = 0;
  v54[2] = 0;
  v118 = (uint64_t *)operator new(8uLL);
  *v54 = v118;
  *v118++ = v117;
  v54[1] = v118;
  v54[2] = v118;
  if (v171.__r_.__value_.__r.__words[0])
  {
    v171.__r_.__value_.__l.__size_ = v171.__r_.__value_.__r.__words[0];
    operator delete(v171.__r_.__value_.__l.__data_);
  }
LABEL_163:
  if (v164)
  {
    v165 = (uint64_t *)v164;
    operator delete(v164);
  }
}

void sub_1E08DD718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50)
{
  void *v50;
  char v51;
  uint64_t v52;

  if (a37 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  if (*(char *)(v52 - 217) < 0)
    operator delete(*(void **)(v52 - 240));
  if (*(char *)(v52 - 121) < 0)
    operator delete(*(void **)(v52 - 144));
  if (*(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  if (*(char *)(v52 - 185) < 0)
    operator delete(*(void **)(v52 - 208));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  if ((v51 & 1) != 0)
    __cxa_free_exception(v50);
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  _Unwind_Resume(a1);
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(char *result, unsigned int *a2, unsigned int *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  unsigned int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E08DDA30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<int const*,int const*>(char *result, int *a2, int *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E08DDAA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(char *result, unsigned __int16 *a2, unsigned __int16 *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  unsigned int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E08DDB10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<short const*,short const*>(char *result, __int16 *a2, __int16 *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E08DDB80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::ios17::CropResize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  std::__shared_weak_count_vtbl *v49;
  unsigned __int8 *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  unsigned __int8 *v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  unsigned __int8 *v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  unsigned __int8 *v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  unsigned __int8 *v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  unsigned __int8 *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  char **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t *v131;
  char *v132;
  char *v133;
  char *v134;
  __int128 v135;
  char *v136;
  char *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  char **v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  _OWORD *v156;
  unsigned __int8 *v157;
  void *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count *v165;
  unint64_t *p_shared_owners;
  unint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  void *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count_vtbl *v177;
  void *v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count_vtbl *v184;
  void *v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count_vtbl *v191;
  void *v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count_vtbl *v198;
  void *v199;
  std::__shared_weak_count *v200;
  std::__shared_weak_count_vtbl *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count_vtbl *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  void *v212;
  void *v213;
  std::__shared_weak_count *v214;
  std::__shared_weak_count_vtbl *v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count_vtbl *v219;
  void *v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count_vtbl *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count_vtbl *v226;
  void *v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count_vtbl *v233;
  void *v234;
  std::__shared_weak_count *v235;
  std::__shared_weak_count_vtbl *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count_vtbl *v240;
  void *v241;
  std::__shared_weak_count *v242;
  std::__shared_weak_count_vtbl *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count_vtbl *v247;
  void *v248;
  std::__shared_weak_count *v249;
  std::__shared_weak_count_vtbl *v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count_vtbl *v254;
  void *v255;
  std::__shared_weak_count *v256;
  std::__shared_weak_count_vtbl *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count_vtbl *v261;
  void *v262;
  std::__shared_weak_count *v263;
  std::__shared_weak_count_vtbl *v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count_vtbl *v268;
  void *v269;
  std::__shared_weak_count *v270;
  std::__shared_weak_count_vtbl *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count_vtbl *v275;
  void *v276;
  std::__shared_weak_count *v277;
  std::__shared_weak_count_vtbl *v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count_vtbl *v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  std::__shared_weak_count_vtbl *v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  void *v289;
  void *v290;
  std::__shared_weak_count *v291;
  std::__shared_weak_count_vtbl *v292;
  uint64_t i;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  void *v297;
  void *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count_vtbl *v300;
  uint64_t j;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  void *v305;
  void *v306;
  std::__shared_weak_count *v307;
  std::__shared_weak_count_vtbl *v308;
  uint64_t k;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  void *v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  std::__shared_weak_count_vtbl *v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t result;
  uint64_t v323;
  void *v324;
  std::__shared_weak_count *v325;
  void *v326[2];
  char v327;
  void *v328;
  std::__shared_weak_count *v329;
  void *v330[2];
  char v331;
  void *v332;
  std::__shared_weak_count *v333;
  void *v334[2];
  char v335;
  void *v336;
  std::__shared_weak_count *v337;
  void *v338;
  std::__shared_weak_count *v339;
  void *v340[2];
  char v341;
  std::__shared_weak_count_vtbl *v342;
  std::__shared_weak_count *v343;
  void *v344[2];
  char v345;
  std::__shared_weak_count_vtbl *v346;
  std::__shared_weak_count *v347;
  void *v348[2];
  char v349;
  std::__shared_weak_count_vtbl *v350;
  std::__shared_weak_count *v351;
  void *v352[2];
  char v353;
  std::__shared_weak_count_vtbl *v354;
  std::__shared_weak_count *v355;
  void *v356[2];
  char v357;
  void *v358[2];
  char v359;
  std::__shared_weak_count_vtbl *v360;
  std::__shared_weak_count *v361;
  void *v362[2];
  char v363;
  void *v364[2];
  char v365;
  std::__shared_weak_count_vtbl *v366;
  std::__shared_weak_count *v367;
  void *v368[2];
  char v369;
  void *v370[2];
  char v371;
  std::__shared_weak_count_vtbl *v372;
  std::__shared_weak_count *v373;
  void *v374[2];
  char v375;
  void *v376[2];
  char v377;
  std::__shared_weak_count_vtbl *v378;
  std::__shared_weak_count *v379;
  void *v380[2];
  char v381;
  void *v382[2];
  char v383;
  std::__shared_weak_count_vtbl *v384;
  std::__shared_weak_count *v385;
  void *v386[2];
  char v387;
  void *v388[2];
  char v389;
  std::__shared_weak_count_vtbl *v390;
  std::__shared_weak_count *v391;
  void *v392;
  std::__shared_weak_count *v393;
  void *v394[2];
  char v395;
  std::__shared_weak_count_vtbl *v396;
  std::__shared_weak_count *v397;
  void *v398[2];
  char v399;
  void *v400[2];
  char v401;
  std::__shared_weak_count_vtbl *v402;
  std::__shared_weak_count *v403;
  void *v404[2];
  char v405;
  void *v406[2];
  char v407;
  std::__shared_weak_count_vtbl *v408;
  std::__shared_weak_count *v409;
  void *v410[2];
  char v411;
  void *v412[2];
  char v413;
  std::__shared_weak_count_vtbl *v414;
  std::__shared_weak_count *v415;
  void *v416[2];
  char v417;
  void *v418[2];
  char v419;
  std::__shared_weak_count_vtbl *v420;
  std::__shared_weak_count *v421;
  std::__shared_weak_count_vtbl *v422;
  std::__shared_weak_count *v423;
  __n128 v424;
  __int128 v425;
  __int128 v426;
  void *v427[2];
  uint64_t v428;
  void *v429;
  void *v430;
  _QWORD *v431;
  __n128 v432;
  uint64_t v433;
  uint64_t v434;
  _QWORD *v435;
  char **v436;
  __n128 v437;
  __n128 v438;
  __n128 v439;
  __n128 v440;
  __n128 v441;
  __n128 v442;
  __n128 v443;
  __n128 v444;
  __n128 v445;
  void *__p;
  void *v447;
  _QWORD *v448;
  void *v449;
  void *v450;
  _QWORD *v451;
  __n128 v452;
  _QWORD *v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  _QWORD v457[3];
  _QWORD v458[3];
  _QWORD v459[3];
  _QWORD v460[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared_weak;
  uint64_t p_on_zero_shared;
  uint64_t v464;
  _QWORD v465[3];
  _QWORD *v466;
  _BYTE v467[24];
  _BYTE *v468;
  _QWORD v469[3];
  _QWORD *v470;
  std::__shared_weak_count_vtbl *v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;

  v474 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v453 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v11->__on_zero_shared_weak;
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared_weak;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v11->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  v11->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v10;
  Scalar = v11;
  v454 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  v472 = (uint64_t)&v16->__on_zero_shared_weak;
  v473 = &v16->__on_zero_shared_weak;
  v16->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v14;
  v16->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v15;
  v471 = v16;
  v455 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v471);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = operator new(0x20uLL);
  v451 = v21 + 4;
  *v21 = v17;
  v21[1] = v18;
  v21[2] = v19;
  v21[3] = v20;
  v449 = v21;
  v450 = v21 + 4;
  v456 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v449);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = operator new(0x20uLL);
  v448 = v26 + 4;
  *v26 = v22;
  v26[1] = v23;
  v26[2] = v24;
  v26[3] = v25;
  __p = v26;
  v447 = v26 + 4;
  v457[0] = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v454, 4, &v452);
  MIL::IRParameter::Make(&v452, (uint64_t *)&v429);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v429);
  v27 = v429;
  v429 = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v452.n128_u64[1];
  if (v452.n128_u64[1])
  {
    v29 = (unint64_t *)(v452.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (__p)
  {
    v447 = __p;
    operator delete(__p);
  }
  if (v449)
  {
    v450 = v449;
    operator delete(v449);
  }
  if (v471)
  {
    v472 = (uint64_t)v471;
    operator delete(v471);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v31 = v453;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v34 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared_weak = (uint64_t)&v34->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v34->__on_zero_shared;
  v34->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  v34->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  Scalar = v34;
  v454 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v37 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v472 = (uint64_t)&v37->__on_zero_shared;
  v473 = &v37->__on_zero_shared;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v35;
  v37->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  v471 = v37;
  v455 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v471);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v40 = operator new(0x10uLL);
  v451 = v40 + 2;
  *v40 = v38;
  v40[1] = v39;
  v449 = v40;
  v450 = v40 + 2;
  v456 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v449);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v454, 3, &v445);
  MIL::IRParameter::Make(&v445, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v31, "boxes", (uint64_t *)&__p);
  v41 = __p;
  __p = 0;
  if (v41)
    (*(void (**)(void *))(*(_QWORD *)v41 + 8))(v41);
  v42 = (std::__shared_weak_count *)v445.n128_u64[1];
  if (v445.n128_u64[1])
  {
    v43 = (unint64_t *)(v445.n128_u64[1] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v449)
  {
    v450 = v449;
    operator delete(v449);
  }
  if (v471)
  {
    v472 = (uint64_t)v471;
    operator delete(v471);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v45 = v453;
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = operator new(8uLL);
  v454 = v47;
  *v47 = v46;
  v456 = (uint64_t)(v47 + 1);
  v455 = (uint64_t)(v47 + 1);
  v471 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v454);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v49;
  v49->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v48;
  p_on_zero_shared_weak = (uint64_t)&v49->~__shared_weak_count_0;
  p_on_zero_shared = (uint64_t)&v49->~__shared_weak_count_0;
  v472 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v471, 2, &v444);
  MIL::IRParameter::Make(&v444, (uint64_t *)&v449);
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v45, "box_indices", (uint64_t *)&v449);
  v51 = v449;
  v449 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v444.n128_u64[1];
  if (v444.n128_u64[1])
  {
    v53 = (unint64_t *)(v444.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  if (v454)
  {
    v455 = (uint64_t)v454;
    operator delete(v454);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v55 = v453;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v443);
  MIL::IRParameter::Make(&v443, (uint64_t *)&v454);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v55, "target_height", (uint64_t *)&v454);
  v57 = v454;
  v454 = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v443.n128_u64[1];
  if (v443.n128_u64[1])
  {
    v59 = (unint64_t *)(v443.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  v61 = v453;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v442);
  MIL::IRParameter::Make(&v442, (uint64_t *)&v454);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v61, "target_width", (uint64_t *)&v454);
  v63 = v454;
  v454 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v442.n128_u64[1];
  if (v442.n128_u64[1])
  {
    v65 = (unint64_t *)(v442.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  v67 = v453;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v441);
  MIL::IRParameter::Make(&v441, (uint64_t *)&v454);
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[23],std::unique_ptr<MIL::IRParameter>>(v67, "normalized_coordinates", (uint64_t *)&v454);
  v69 = v454;
  v454 = 0;
  if (v69)
    (*(void (**)(void *))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v441.n128_u64[1];
  if (v441.n128_u64[1])
  {
    v71 = (unint64_t *)(v441.n128_u64[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v68 + 5) + 32))(*((_QWORD *)v68 + 5), 1);
  v73 = v453;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v440);
  MIL::IRParameter::Make(&v440, (uint64_t *)&v454);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v73, "spatial_scale", (uint64_t *)&v454);
  v75 = v454;
  v454 = 0;
  if (v75)
    (*(void (**)(void *))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v440.n128_u64[1];
  if (v440.n128_u64[1])
  {
    v77 = (unint64_t *)(v440.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  v79 = v453;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v439);
  MIL::IRParameter::Make(&v439, (uint64_t *)&v454);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[20],std::unique_ptr<MIL::IRParameter>>(v79, "box_coordinate_mode", (uint64_t *)&v454);
  v81 = v454;
  v454 = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v439.n128_u64[1];
  if (v439.n128_u64[1])
  {
    v83 = (unint64_t *)(v439.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 32))(*((_QWORD *)v80 + 5), 1);
  v85 = v453;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v438);
  MIL::IRParameter::Make(&v438, (uint64_t *)&v454);
  v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v85, "sampling_mode", (uint64_t *)&v454);
  v87 = v454;
  v454 = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  v88 = (std::__shared_weak_count *)v438.n128_u64[1];
  if (v438.n128_u64[1])
  {
    v89 = (unint64_t *)(v438.n128_u64[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v86 + 5) + 32))(*((_QWORD *)v86 + 5), 1);
  v91 = v453;
  v454 = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v455 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  v456 = MIL::IRTensorValueType::MakeScalar(a1, 9);
  v457[0] = MIL::IRTensorValueType::MakeScalar(a1, 14);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v454, 4, &v437);
  MIL::IRParameter::Make(&v437, (uint64_t *)&Scalar);
  v92 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v91, "pad_value", (uint64_t *)&Scalar);
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = (std::__shared_weak_count *)v437.n128_u64[1];
  if (v437.n128_u64[1])
  {
    v95 = (unint64_t *)(v437.n128_u64[1] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v92 + 5) + 32))(*((_QWORD *)v92 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v92 + 5) + 48))(*((_QWORD *)v92 + 5), 1);
  v436 = 0;
  v97 = operator new();
  *(_QWORD *)v97 = 0;
  *(_QWORD *)(v97 + 8) = 0;
  *(_QWORD *)(v97 + 16) = 0;
  v454 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v436, (void **)v97);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v454, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v436, 1uLL);
  v98 = v436;
  v99 = MIL::IRUnknownDimension::Make(a1, 0);
  v100 = MIL::IRUnknownDimension::Make(a1, 0);
  v101 = MIL::IRUnknownDimension::Make(a1, 0);
  v102 = MIL::IRUnknownDimension::Make(a1, 0);
  v103 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  v472 = (uint64_t)&v103->__on_zero_shared_weak;
  v473 = &v103->__on_zero_shared_weak;
  v103->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v99;
  v103->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v100;
  v103->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v101;
  v103->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v102;
  v471 = v103;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v471);
  v104 = MIL::IRUnknownDimension::Make(a1, 0);
  v105 = MIL::IRUnknownDimension::Make(a1, 0);
  v106 = MIL::IRUnknownDimension::Make(a1, 0);
  v107 = MIL::IRUnknownDimension::Make(a1, 0);
  v108 = operator new(0x20uLL);
  v451 = v108 + 4;
  *v108 = v104;
  v108[1] = v105;
  v108[2] = v106;
  v108[3] = v107;
  v449 = v108;
  v450 = v108 + 4;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v449);
  v109 = MIL::IRUnknownDimension::Make(a1, 0);
  v110 = MIL::IRUnknownDimension::Make(a1, 0);
  v111 = MIL::IRUnknownDimension::Make(a1, 0);
  v112 = MIL::IRUnknownDimension::Make(a1, 0);
  v113 = operator new(0x20uLL);
  v448 = v113 + 4;
  *v113 = v109;
  v113[1] = v110;
  v113[2] = v111;
  v113[3] = v112;
  __p = v113;
  v447 = v113 + 4;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&__p);
  v114 = MIL::IRUnknownDimension::Make(a1, 0);
  v115 = MIL::IRUnknownDimension::Make(a1, 0);
  v116 = MIL::IRUnknownDimension::Make(a1, 0);
  v117 = MIL::IRUnknownDimension::Make(a1, 0);
  v118 = operator new(0x20uLL);
  v431 = v118 + 4;
  *v118 = v114;
  v118[1] = v115;
  v118[2] = v116;
  v118[3] = v117;
  v429 = v118;
  v430 = v118 + 4;
  v464 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v429);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v432);
  MIL::IRParameter::Make(&v432, &v433);
  v119 = v433;
  v434 = v433;
  if (v433)
  {
    v120 = (_QWORD *)operator new();
    v121 = v433;
    *v120 = &unk_1EA99F888;
    v120[1] = 0;
    v120[2] = 0;
    v120[3] = v121;
  }
  else
  {
    v120 = 0;
  }
  v435 = v120;
  v433 = 0;
  v122 = v98[2];
  v123 = v98[1];
  if (v123 >= v122)
  {
    v125 = (v123 - *v98) >> 4;
    v126 = v125 + 1;
    if ((unint64_t)(v125 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v127 = v122 - *v98;
    if (v127 >> 3 > v126)
      v126 = v127 >> 3;
    if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0)
      v128 = 0xFFFFFFFFFFFFFFFLL;
    else
      v128 = v126;
    v457[1] = v98 + 2;
    v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v98 + 2), v128);
    v131 = (uint64_t *)&v129[16 * v125];
    *v131 = v119;
    v131[1] = (uint64_t)v120;
    v435 = 0;
    v434 = 0;
    v133 = *v98;
    v132 = v98[1];
    if (v132 == *v98)
    {
      v136 = v98[1];
      v134 = &v129[16 * v125];
    }
    else
    {
      v134 = &v129[16 * v125];
      do
      {
        v135 = *((_OWORD *)v132 - 1);
        v132 -= 16;
        *((_OWORD *)v134 - 1) = v135;
        v134 -= 16;
        *(_QWORD *)v132 = 0;
        *((_QWORD *)v132 + 1) = 0;
      }
      while (v132 != v133);
      v136 = *v98;
      v132 = v98[1];
    }
    v124 = (char *)(v131 + 2);
    *v98 = v134;
    v455 = (uint64_t)v136;
    v98[1] = (char *)(v131 + 2);
    v456 = (uint64_t)v132;
    v137 = v98[2];
    v98[2] = &v129[16 * v130];
    v457[0] = v137;
    v454 = v136;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v454);
  }
  else
  {
    *(_QWORD *)v123 = v119;
    *((_QWORD *)v123 + 1) = v120;
    v124 = v123 + 16;
    v435 = 0;
    v434 = 0;
  }
  v98[1] = v124;
  v138 = v433;
  v433 = 0;
  if (v138)
    (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
  v139 = (std::__shared_weak_count *)v432.n128_u64[1];
  if (v432.n128_u64[1])
  {
    v140 = (unint64_t *)(v432.n128_u64[1] + 8);
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  if (v429)
  {
    v430 = v429;
    operator delete(v429);
  }
  if (__p)
  {
    v447 = __p;
    operator delete(__p);
  }
  if (v449)
  {
    v450 = v449;
    operator delete(v449);
  }
  if (v471)
  {
    v472 = (uint64_t)v471;
    operator delete(v471);
  }
  *(_OWORD *)v427 = *(_OWORD *)a2;
  v428 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v142 = (uint64_t)v453;
  *(_QWORD *)&v426 = v453;
  if (v453)
  {
    v143 = (_QWORD *)operator new();
    *v143 = &unk_1EA99F8E8;
    v143[1] = 0;
    v143[2] = 0;
    v143[3] = v142;
  }
  else
  {
    v143 = 0;
  }
  *((_QWORD *)&v426 + 1) = v143;
  v453 = 0;
  *(_QWORD *)&v425 = v436;
  if (v436)
  {
    v144 = (_QWORD *)operator new();
    v145 = v436;
    *v144 = &unk_1EA99F948;
    v144[1] = 0;
    v144[2] = 0;
    v144[3] = v145;
  }
  else
  {
    v144 = 0;
  }
  *((_QWORD *)&v425 + 1) = v144;
  v436 = 0;
  v469[0] = &unk_1EA99FAC8;
  v469[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateCropResize;
  v470 = v469;
  v468 = 0;
  MIL::IROperator::Make((__int128 *)v427, &v426, &v425, (uint64_t)v469, (uint64_t)v467, a3);
  v146 = v468;
  if (v468 == v467)
  {
    v147 = 4;
    v146 = v467;
  }
  else
  {
    if (!v468)
      goto LABEL_132;
    v147 = 5;
  }
  (*(void (**)(void))(*v146 + 8 * v147))();
LABEL_132:
  v148 = v470;
  if (v470 == v469)
  {
    v149 = 4;
    v148 = v469;
    goto LABEL_136;
  }
  if (v470)
  {
    v149 = 5;
LABEL_136:
    (*(void (**)(void))(*v148 + 8 * v149))();
  }
  v150 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
  if (*((_QWORD *)&v425 + 1))
  {
    v151 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = (std::__shared_weak_count *)*((_QWORD *)&v426 + 1);
  if (*((_QWORD *)&v426 + 1))
  {
    v154 = (unint64_t *)(*((_QWORD *)&v426 + 1) + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  if (SHIBYTE(v428) < 0)
    operator delete(v427[0]);
  v471 = 0;
  v156 = (_OWORD *)operator new();
  *v156 = 0u;
  v156[1] = 0u;
  *((_DWORD *)v156 + 8) = 1065353216;
  v471 = (std::__shared_weak_count_vtbl *)v156;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v424);
  MIL::IRParameter::Make(&v424, (uint64_t *)&v454);
  v157 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v156, "minimum_compute_type", (uint64_t *)&v454);
  v158 = v454;
  v454 = 0;
  if (v158)
    (*(void (**)(void *))(*(_QWORD *)v158 + 8))(v158);
  v159 = (std::__shared_weak_count *)v424.n128_u64[1];
  if (v424.n128_u64[1])
  {
    v160 = (unint64_t *)(v424.n128_u64[1] + 8);
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v157 + 5) + 32))(*((_QWORD *)v157 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v157 + 5) + 48))(*((_QWORD *)v157 + 5), 1);
  v162 = *a3;
  v163 = v471;
  v422 = v471;
  if (v471)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v163;
  }
  else
  {
    v164 = 0;
  }
  v423 = v164;
  v471 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v162 + 184))(v162, &v422);
  v165 = v423;
  if (v423)
  {
    p_shared_owners = (unint64_t *)&v423->__shared_owners_;
    do
      v167 = __ldaxr(p_shared_owners);
    while (__stlxr(v167 - 1, p_shared_owners));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = *a3;
  v465[0] = &off_1EA99FBD8;
  v465[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceCropResize;
  v466 = v465;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v168 + 200))(v168, v465);
  v169 = v466;
  if (v466 == v465)
  {
    v170 = 4;
    v169 = v465;
  }
  else
  {
    if (!v466)
      goto LABEL_169;
    v170 = 5;
  }
  (*(void (**)(void))(*v169 + 8 * v170))();
LABEL_169:
  MIL::Validation::TensorDTypeConstraints::Make(&v454);
  v171 = v454;
  std::string::basic_string[abi:ne180100]<0>(v418, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v418, 0, (uint64_t *)&Scalar);
  v420 = Scalar;
  if (Scalar)
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = Scalar;
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = v173;
  }
  else
  {
    v172 = 0;
  }
  v421 = v172;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v416, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v171 + 24))(v171, &v420, v416);
  if (v417 < 0)
    operator delete(v416[0]);
  v174 = v421;
  if (v421)
  {
    v175 = (unint64_t *)&v421->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = Scalar;
  Scalar = 0;
  if (v177)
    (*((void (**)(std::__shared_weak_count_vtbl *))v177->~__shared_weak_count + 1))(v177);
  if (v419 < 0)
    operator delete(v418[0]);
  v178 = v454;
  std::string::basic_string[abi:ne180100]<0>(v412, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v412, 0, (uint64_t *)&Scalar);
  v414 = Scalar;
  if (Scalar)
  {
    v179 = (std::__shared_weak_count *)operator new();
    v180 = Scalar;
    v179->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v179->__shared_owners_ = 0;
    v179->__shared_weak_owners_ = 0;
    v179[1].__vftable = v180;
  }
  else
  {
    v179 = 0;
  }
  v415 = v179;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v410, "BOX_T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v178 + 24))(v178, &v414, v410);
  if (v411 < 0)
    operator delete(v410[0]);
  v181 = v415;
  if (v415)
  {
    v182 = (unint64_t *)&v415->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = Scalar;
  Scalar = 0;
  if (v184)
    (*((void (**)(std::__shared_weak_count_vtbl *))v184->~__shared_weak_count + 1))(v184);
  if (v413 < 0)
    operator delete(v412[0]);
  v185 = v454;
  std::string::basic_string[abi:ne180100]<0>(v406, "box_indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v406, 1, (uint64_t *)&Scalar);
  v408 = Scalar;
  if (Scalar)
  {
    v186 = (std::__shared_weak_count *)operator new();
    v187 = Scalar;
    v186->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v186->__shared_owners_ = 0;
    v186->__shared_weak_owners_ = 0;
    v186[1].__vftable = v187;
  }
  else
  {
    v186 = 0;
  }
  v409 = v186;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v404, "BOX_INDEX_T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v185 + 24))(v185, &v408, v404);
  if (v405 < 0)
    operator delete(v404[0]);
  v188 = v409;
  if (v409)
  {
    v189 = (unint64_t *)&v409->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = Scalar;
  Scalar = 0;
  if (v191)
    (*((void (**)(std::__shared_weak_count_vtbl *))v191->~__shared_weak_count + 1))(v191);
  if (v407 < 0)
    operator delete(v406[0]);
  v192 = v454;
  std::string::basic_string[abi:ne180100]<0>(v400, "pad_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v400, 1, (uint64_t *)&Scalar);
  v402 = Scalar;
  if (Scalar)
  {
    v193 = (std::__shared_weak_count *)operator new();
    v194 = Scalar;
    v193->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v193->__shared_owners_ = 0;
    v193->__shared_weak_owners_ = 0;
    v193[1].__vftable = v194;
  }
  else
  {
    v193 = 0;
  }
  v403 = v193;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v398, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v192 + 24))(v192, &v402, v398);
  if (v399 < 0)
    operator delete(v398[0]);
  v195 = v403;
  if (v403)
  {
    v196 = (unint64_t *)&v403->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  v198 = Scalar;
  Scalar = 0;
  if (v198)
    (*((void (**)(std::__shared_weak_count_vtbl *))v198->~__shared_weak_count + 1))(v198);
  if (v401 < 0)
    operator delete(v400[0]);
  v199 = v454;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v396 = Scalar;
  if (Scalar)
  {
    v200 = (std::__shared_weak_count *)operator new();
    v201 = Scalar;
    v200->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v200->__shared_owners_ = 0;
    v200->__shared_weak_owners_ = 0;
    v200[1].__vftable = v201;
  }
  else
  {
    v200 = 0;
  }
  v397 = v200;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v394, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v199 + 24))(v199, &v396, v394);
  if (v395 < 0)
    operator delete(v394[0]);
  v202 = v397;
  if (v397)
  {
    v203 = (unint64_t *)&v397->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  v205 = Scalar;
  Scalar = 0;
  if (v205)
    (*((void (**)(std::__shared_weak_count_vtbl *))v205->~__shared_weak_count + 1))(v205);
  v206 = *a3;
  v392 = v454;
  if (v454)
  {
    v207 = (std::__shared_weak_count *)operator new();
    v208 = (std::__shared_weak_count_vtbl *)v454;
    v207->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v207->__shared_owners_ = 0;
    v207->__shared_weak_owners_ = 0;
    v207[1].__vftable = v208;
  }
  else
  {
    v207 = 0;
  }
  v393 = v207;
  v454 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v206 + 56))(v206, &v392);
  v209 = v393;
  if (v393)
  {
    v210 = (unint64_t *)&v393->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  v212 = v454;
  v454 = 0;
  if (v212)
    (*(void (**)(void *))(*(_QWORD *)v212 + 8))(v212);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v454);
  v213 = v454;
  std::string::basic_string[abi:ne180100]<0>(v388, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v388, 0, (uint64_t *)&Scalar);
  v390 = Scalar;
  if (Scalar)
  {
    v214 = (std::__shared_weak_count *)operator new();
    v215 = Scalar;
    v214->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v214->__shared_owners_ = 0;
    v214->__shared_weak_owners_ = 0;
    v214[1].__vftable = v215;
  }
  else
  {
    v214 = 0;
  }
  v391 = v214;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v386, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v213 + 24))(v213, &v390, 0, v386);
  if (v387 < 0)
    operator delete(v386[0]);
  v216 = v391;
  if (v391)
  {
    v217 = (unint64_t *)&v391->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  v219 = Scalar;
  Scalar = 0;
  if (v219)
    (*((void (**)(std::__shared_weak_count_vtbl *))v219->~__shared_weak_count + 1))(v219);
  if (v389 < 0)
    operator delete(v388[0]);
  v220 = v454;
  std::string::basic_string[abi:ne180100]<0>(v382, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v382, 0, (uint64_t *)&Scalar);
  v384 = Scalar;
  if (Scalar)
  {
    v221 = (std::__shared_weak_count *)operator new();
    v222 = Scalar;
    v221->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v221->__shared_owners_ = 0;
    v221->__shared_weak_owners_ = 0;
    v221[1].__vftable = v222;
  }
  else
  {
    v221 = 0;
  }
  v385 = v221;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v380, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v220 + 24))(v220, &v384, 1, v380);
  if (v381 < 0)
    operator delete(v380[0]);
  v223 = v385;
  if (v385)
  {
    v224 = (unint64_t *)&v385->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = Scalar;
  Scalar = 0;
  if (v226)
    (*((void (**)(std::__shared_weak_count_vtbl *))v226->~__shared_weak_count + 1))(v226);
  if (v383 < 0)
    operator delete(v382[0]);
  v227 = v454;
  std::string::basic_string[abi:ne180100]<0>(v376, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v376, 0, (uint64_t *)&Scalar);
  v378 = Scalar;
  if (Scalar)
  {
    v228 = (std::__shared_weak_count *)operator new();
    v229 = Scalar;
    v228->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v228->__shared_owners_ = 0;
    v228->__shared_weak_owners_ = 0;
    v228[1].__vftable = v229;
  }
  else
  {
    v228 = 0;
  }
  v379 = v228;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v374, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v227 + 24))(v227, &v378, 2, v374);
  if (v375 < 0)
    operator delete(v374[0]);
  v230 = v379;
  if (v379)
  {
    v231 = (unint64_t *)&v379->__shared_owners_;
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
    }
  }
  v233 = Scalar;
  Scalar = 0;
  if (v233)
    (*((void (**)(std::__shared_weak_count_vtbl *))v233->~__shared_weak_count + 1))(v233);
  if (v377 < 0)
    operator delete(v376[0]);
  v234 = v454;
  std::string::basic_string[abi:ne180100]<0>(v370, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v370, 0, (uint64_t *)&Scalar);
  v372 = Scalar;
  if (Scalar)
  {
    v235 = (std::__shared_weak_count *)operator new();
    v236 = Scalar;
    v235->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v235->__shared_owners_ = 0;
    v235->__shared_weak_owners_ = 0;
    v235[1].__vftable = v236;
  }
  else
  {
    v235 = 0;
  }
  v373 = v235;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v368, "W");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v234 + 24))(v234, &v372, 3, v368);
  if (v369 < 0)
    operator delete(v368[0]);
  v237 = v373;
  if (v373)
  {
    v238 = (unint64_t *)&v373->__shared_owners_;
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  v240 = Scalar;
  Scalar = 0;
  if (v240)
    (*((void (**)(std::__shared_weak_count_vtbl *))v240->~__shared_weak_count + 1))(v240);
  if (v371 < 0)
    operator delete(v370[0]);
  v241 = v454;
  std::string::basic_string[abi:ne180100]<0>(v364, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v364, 0, (uint64_t *)&Scalar);
  v366 = Scalar;
  if (Scalar)
  {
    v242 = (std::__shared_weak_count *)operator new();
    v243 = Scalar;
    v242->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v242->__shared_owners_ = 0;
    v242->__shared_weak_owners_ = 0;
    v242[1].__vftable = v243;
  }
  else
  {
    v242 = 0;
  }
  v367 = v242;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v362, "N");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v241 + 24))(v241, &v366, 0, v362);
  if (v363 < 0)
    operator delete(v362[0]);
  v244 = v367;
  if (v367)
  {
    v245 = (unint64_t *)&v367->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  v247 = Scalar;
  Scalar = 0;
  if (v247)
    (*((void (**)(std::__shared_weak_count_vtbl *))v247->~__shared_weak_count + 1))(v247);
  if (v365 < 0)
    operator delete(v364[0]);
  v248 = v454;
  std::string::basic_string[abi:ne180100]<0>(v358, "box_indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v358, 1, (uint64_t *)&Scalar);
  v360 = Scalar;
  if (Scalar)
  {
    v249 = (std::__shared_weak_count *)operator new();
    v250 = Scalar;
    v249->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v249->__shared_owners_ = 0;
    v249->__shared_weak_owners_ = 0;
    v249[1].__vftable = v250;
  }
  else
  {
    v249 = 0;
  }
  v361 = v249;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v356, "N");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v248 + 24))(v248, &v360, 0, v356);
  if (v357 < 0)
    operator delete(v356[0]);
  v251 = v361;
  if (v361)
  {
    v252 = (unint64_t *)&v361->__shared_owners_;
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  v254 = Scalar;
  Scalar = 0;
  if (v254)
    (*((void (**)(std::__shared_weak_count_vtbl *))v254->~__shared_weak_count + 1))(v254);
  if (v359 < 0)
    operator delete(v358[0]);
  v255 = v454;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v354 = Scalar;
  if (Scalar)
  {
    v256 = (std::__shared_weak_count *)operator new();
    v257 = Scalar;
    v256->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v256->__shared_owners_ = 0;
    v256->__shared_weak_owners_ = 0;
    v256[1].__vftable = v257;
  }
  else
  {
    v256 = 0;
  }
  v355 = v256;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v352, "N");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v255 + 24))(v255, &v354, 0, v352);
  if (v353 < 0)
    operator delete(v352[0]);
  v258 = v355;
  if (v355)
  {
    v259 = (unint64_t *)&v355->__shared_owners_;
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
  v261 = Scalar;
  Scalar = 0;
  if (v261)
    (*((void (**)(std::__shared_weak_count_vtbl *))v261->~__shared_weak_count + 1))(v261);
  v262 = v454;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v350 = Scalar;
  if (Scalar)
  {
    v263 = (std::__shared_weak_count *)operator new();
    v264 = Scalar;
    v263->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v263->__shared_owners_ = 0;
    v263->__shared_weak_owners_ = 0;
    v263[1].__vftable = v264;
  }
  else
  {
    v263 = 0;
  }
  v351 = v263;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v348, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v262 + 24))(v262, &v350, 1, v348);
  if (v349 < 0)
    operator delete(v348[0]);
  v265 = v351;
  if (v351)
  {
    v266 = (unint64_t *)&v351->__shared_owners_;
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  v268 = Scalar;
  Scalar = 0;
  if (v268)
    (*((void (**)(std::__shared_weak_count_vtbl *))v268->~__shared_weak_count + 1))(v268);
  v269 = v454;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v346 = Scalar;
  if (Scalar)
  {
    v270 = (std::__shared_weak_count *)operator new();
    v271 = Scalar;
    v270->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v270->__shared_owners_ = 0;
    v270->__shared_weak_owners_ = 0;
    v270[1].__vftable = v271;
  }
  else
  {
    v270 = 0;
  }
  v347 = v270;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v344, "target_height");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v269 + 24))(v269, &v346, 2, v344);
  if (v345 < 0)
    operator delete(v344[0]);
  v272 = v347;
  if (v347)
  {
    v273 = (unint64_t *)&v347->__shared_owners_;
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }
  v275 = Scalar;
  Scalar = 0;
  if (v275)
    (*((void (**)(std::__shared_weak_count_vtbl *))v275->~__shared_weak_count + 1))(v275);
  v276 = v454;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v342 = Scalar;
  if (Scalar)
  {
    v277 = (std::__shared_weak_count *)operator new();
    v278 = Scalar;
    v277->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v277->__shared_owners_ = 0;
    v277->__shared_weak_owners_ = 0;
    v277[1].__vftable = v278;
  }
  else
  {
    v277 = 0;
  }
  v343 = v277;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v340, "target_width");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v276 + 24))(v276, &v342, 3, v340);
  if (v341 < 0)
    operator delete(v340[0]);
  v279 = v343;
  if (v343)
  {
    v280 = (unint64_t *)&v343->__shared_owners_;
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  v282 = Scalar;
  Scalar = 0;
  if (v282)
    (*((void (**)(std::__shared_weak_count_vtbl *))v282->~__shared_weak_count + 1))(v282);
  v283 = *a3;
  v338 = v454;
  if (v454)
  {
    v284 = (std::__shared_weak_count *)operator new();
    v285 = (std::__shared_weak_count_vtbl *)v454;
    v284->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v284->__shared_owners_ = 0;
    v284->__shared_weak_owners_ = 0;
    v284[1].__vftable = v285;
  }
  else
  {
    v284 = 0;
  }
  v339 = v284;
  v454 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v283 + 56))(v283, &v338);
  v286 = v339;
  if (v339)
  {
    v287 = (unint64_t *)&v339->__shared_owners_;
    do
      v288 = __ldaxr(v287);
    while (__stlxr(v288 - 1, v287));
    if (!v288)
    {
      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
      std::__shared_weak_count::__release_weak(v286);
    }
  }
  v289 = v454;
  v454 = 0;
  if (v289)
    (*(void (**)(void *))(*(_QWORD *)v289 + 8))(v289);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v449);
  v290 = v449;
  std::string::basic_string[abi:ne180100]<0>(v334, "box_coordinate_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v334, 0, (uint64_t *)&__p);
  v336 = __p;
  if (__p)
  {
    v291 = (std::__shared_weak_count *)operator new();
    v292 = (std::__shared_weak_count_vtbl *)__p;
    v291->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v291->__shared_owners_ = 0;
    v291->__shared_weak_owners_ = 0;
    v291[1].__vftable = v292;
  }
  else
  {
    v291 = 0;
  }
  v337 = v291;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v454, "CENTER_SIZE_HEIGHT_FIRST");
  std::string::basic_string[abi:ne180100]<0>(v457, "CENTER_SIZE_WIDTH_FIRST");
  std::string::basic_string[abi:ne180100]<0>(v458, "CORNERS_HEIGHT_FIRST");
  std::string::basic_string[abi:ne180100]<0>(v459, "CORNERS_WIDTH_FIRST");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v454, 4);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v290 + 24))(v290, &v336, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v459[i + 2]) < 0)
      operator delete((void *)v459[i]);
  }
  v294 = v337;
  if (v337)
  {
    v295 = (unint64_t *)&v337->__shared_owners_;
    do
      v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }
  v297 = __p;
  __p = 0;
  if (v297)
    (*(void (**)(void *))(*(_QWORD *)v297 + 8))(v297);
  if (v335 < 0)
    operator delete(v334[0]);
  v298 = v449;
  std::string::basic_string[abi:ne180100]<0>(v330, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v330, 0, (uint64_t *)&__p);
  v332 = __p;
  if (__p)
  {
    v299 = (std::__shared_weak_count *)operator new();
    v300 = (std::__shared_weak_count_vtbl *)__p;
    v299->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v299->__shared_owners_ = 0;
    v299->__shared_weak_owners_ = 0;
    v299[1].__vftable = v300;
  }
  else
  {
    v299 = 0;
  }
  v333 = v299;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v454, "ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v457, "DEFAULT");
  std::string::basic_string[abi:ne180100]<0>(v458, "OFFSET_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v459, "STRICT_ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v460, "UNALIGN_CORNERS");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v454, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v298 + 24))(v298, &v332, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v460[j + 2]) < 0)
      operator delete((void *)v460[j]);
  }
  v302 = v333;
  if (v333)
  {
    v303 = (unint64_t *)&v333->__shared_owners_;
    do
      v304 = __ldaxr(v303);
    while (__stlxr(v304 - 1, v303));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
      std::__shared_weak_count::__release_weak(v302);
    }
  }
  v305 = __p;
  __p = 0;
  if (v305)
    (*(void (**)(void *))(*(_QWORD *)v305 + 8))(v305);
  if (v331 < 0)
    operator delete(v330[0]);
  v306 = v449;
  std::string::basic_string[abi:ne180100]<0>(v326, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v326, 1, (uint64_t *)&__p);
  v328 = __p;
  if (__p)
  {
    v307 = (std::__shared_weak_count *)operator new();
    v308 = (std::__shared_weak_count_vtbl *)__p;
    v307->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v307->__shared_owners_ = 0;
    v307->__shared_weak_owners_ = 0;
    v307[1].__vftable = v308;
  }
  else
  {
    v307 = 0;
  }
  v329 = v307;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v454, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v457, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v458, "int32");
  std::string::basic_string[abi:ne180100]<0>(v459, "int8");
  std::string::basic_string[abi:ne180100]<0>(v460, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v454, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v306 + 24))(v306, &v328, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -15; k -= 3)
  {
    if (SHIBYTE(v460[k + 2]) < 0)
      operator delete((void *)v460[k]);
  }
  v310 = v329;
  if (v329)
  {
    v311 = (unint64_t *)&v329->__shared_owners_;
    do
      v312 = __ldaxr(v311);
    while (__stlxr(v312 - 1, v311));
    if (!v312)
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v310);
    }
  }
  v313 = __p;
  __p = 0;
  if (v313)
    (*(void (**)(void *))(*(_QWORD *)v313 + 8))(v313);
  if (v327 < 0)
    operator delete(v326[0]);
  v314 = *a3;
  v324 = v449;
  if (v449)
  {
    v315 = (std::__shared_weak_count *)operator new();
    v316 = (std::__shared_weak_count_vtbl *)v449;
    v315->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v315->__shared_owners_ = 0;
    v315->__shared_weak_owners_ = 0;
    v315[1].__vftable = v316;
  }
  else
  {
    v315 = 0;
  }
  v325 = v315;
  v449 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v314 + 56))(v314, &v324);
  v317 = v325;
  if (v325)
  {
    v318 = (unint64_t *)&v325->__shared_owners_;
    do
      v319 = __ldaxr(v318);
    while (__stlxr(v319 - 1, v318));
    if (!v319)
    {
      ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
      std::__shared_weak_count::__release_weak(v317);
    }
  }
  v320 = v449;
  v449 = 0;
  if (v320)
    (*(void (**)(void *))(*(_QWORD *)v320 + 8))(v320);
  if (v471)
  {
    v321 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v471);
    MEMORY[0x1E0C023A0](v321, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v436, 0);
  result = (uint64_t)v453;
  if (v453)
  {
    v323 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v453);
    return MEMORY[0x1E0C023A0](v323, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08E03FC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x540];
  STACK[0x540] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x490], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x568], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Resample::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _anonymous_namespace_ *Scalar;
  std::__shared_weak_count *v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  void *v74;
  _QWORD *v75;
  unsigned __int8 *v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _anonymous_namespace_ *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  _QWORD *v89;
  unsigned __int8 *v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  unsigned __int8 *v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  unsigned __int8 *v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  unsigned __int8 *v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  unsigned __int8 *v114;
  void *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  void *v131;
  _QWORD *v132;
  void *v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  _QWORD *v144;
  _QWORD *v145;
  char *v146;
  __int128 v147;
  _QWORD *v148;
  uint64_t v149;
  void *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  void *v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  _OWORD *v168;
  unsigned __int8 *v169;
  void *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  void *v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  void *v189;
  void *v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  void *v196;
  void *v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  void *v203;
  void *v204;
  std::__shared_weak_count *v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  void *v217;
  void *v218;
  std::__shared_weak_count *v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  void *v224;
  void *v225;
  std::__shared_weak_count *v226;
  std::__shared_weak_count_vtbl *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  void *v231;
  void *v232;
  std::__shared_weak_count *v233;
  std::__shared_weak_count_vtbl *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  void *v238;
  void *v239;
  std::__shared_weak_count *v240;
  std::__shared_weak_count_vtbl *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  void *v245;
  void *v246;
  std::__shared_weak_count *v247;
  std::__shared_weak_count_vtbl *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  void *v252;
  void *v253;
  std::__shared_weak_count *v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  void *v259;
  void *v260;
  std::__shared_weak_count *v261;
  std::__shared_weak_count_vtbl *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  void *v266;
  void *v267;
  std::__shared_weak_count *v268;
  std::__shared_weak_count_vtbl *v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  void *v273;
  void *v274;
  std::__shared_weak_count *v275;
  std::__shared_weak_count_vtbl *v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  void *v280;
  void *v281;
  std::__shared_weak_count *v282;
  std::__shared_weak_count_vtbl *v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  void *v287;
  void *v288;
  std::__shared_weak_count *v289;
  std::__shared_weak_count_vtbl *v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  void *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count_vtbl *v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  void *v301;
  void *v302;
  std::__shared_weak_count *v303;
  std::__shared_weak_count_vtbl *v304;
  uint64_t i;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count_vtbl *v309;
  void *v310;
  std::__shared_weak_count *v311;
  std::__shared_weak_count_vtbl *v312;
  uint64_t j;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count_vtbl *v317;
  void *v318;
  std::__shared_weak_count *v319;
  std::__shared_weak_count_vtbl *v320;
  uint64_t k;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count_vtbl *v325;
  void *v326;
  std::__shared_weak_count *v327;
  std::__shared_weak_count_vtbl *v328;
  uint64_t m;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count_vtbl *v333;
  void *v334;
  std::__shared_weak_count *v335;
  std::__shared_weak_count_vtbl *v336;
  uint64_t n;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count_vtbl *v341;
  void *v342;
  std::__shared_weak_count *v343;
  std::__shared_weak_count_vtbl *v344;
  uint64_t ii;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count_vtbl *v349;
  uint64_t v350;
  std::__shared_weak_count *v351;
  std::__shared_weak_count_vtbl *v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  void *v356;
  uint64_t v357;
  uint64_t result;
  uint64_t v359;
  void *v360;
  std::__shared_weak_count *v361;
  void *v362[2];
  char v363;
  std::__shared_weak_count_vtbl *v364;
  std::__shared_weak_count *v365;
  void *v366[2];
  char v367;
  std::__shared_weak_count_vtbl *v368;
  std::__shared_weak_count *v369;
  void *v370[2];
  char v371;
  std::__shared_weak_count_vtbl *v372;
  std::__shared_weak_count *v373;
  void *v374[2];
  char v375;
  std::__shared_weak_count_vtbl *v376;
  std::__shared_weak_count *v377;
  void *v378[2];
  char v379;
  std::__shared_weak_count_vtbl *v380;
  std::__shared_weak_count *v381;
  void *v382[2];
  char v383;
  std::__shared_weak_count_vtbl *v384;
  std::__shared_weak_count *v385;
  void *v386;
  std::__shared_weak_count *v387;
  void *v388[2];
  char v389;
  void *v390;
  std::__shared_weak_count *v391;
  void *v392[2];
  char v393;
  void *v394;
  std::__shared_weak_count *v395;
  void *v396[2];
  char v397;
  void *v398;
  std::__shared_weak_count *v399;
  void *v400[2];
  char v401;
  void *v402;
  std::__shared_weak_count *v403;
  void *v404[2];
  char v405;
  void *v406[2];
  char v407;
  void *v408;
  std::__shared_weak_count *v409;
  void *v410[2];
  char v411;
  void *v412[2];
  char v413;
  void *v414;
  std::__shared_weak_count *v415;
  void *v416[2];
  char v417;
  void *v418[2];
  char v419;
  void *v420;
  std::__shared_weak_count *v421;
  void *v422[2];
  char v423;
  void *v424[2];
  char v425;
  void *v426;
  std::__shared_weak_count *v427;
  void *v428[2];
  char v429;
  void *v430[2];
  char v431;
  void *v432;
  std::__shared_weak_count *v433;
  void *v434[2];
  char v435;
  void *v436[2];
  char v437;
  void *v438;
  std::__shared_weak_count *v439;
  void *v440[2];
  char v441;
  void *v442[2];
  char v443;
  void *v444;
  std::__shared_weak_count *v445;
  void *v446;
  std::__shared_weak_count *v447;
  void *v448[2];
  char v449;
  void *v450;
  std::__shared_weak_count *v451;
  void *v452[2];
  char v453;
  void *v454[2];
  char v455;
  void *v456;
  std::__shared_weak_count *v457;
  void *v458[2];
  char v459;
  void *v460[2];
  char v461;
  void *v462;
  std::__shared_weak_count *v463;
  void *v464[2];
  char v465;
  void *v466[2];
  char v467;
  void *v468;
  std::__shared_weak_count *v469;
  std::__shared_weak_count_vtbl *v470;
  std::__shared_weak_count *v471;
  __n128 v472;
  __int128 v473;
  __int128 v474;
  void *v475[2];
  uint64_t v476;
  __n128 v477;
  __n128 v478;
  __n128 v479;
  __n128 v480;
  __n128 v481;
  __n128 v482;
  void *v483[2];
  char v484;
  void *v485;
  std::__shared_weak_count *v486;
  __n128 v487;
  void *v488[2];
  char v489;
  void *v490;
  std::__shared_weak_count *v491;
  __n128 v492;
  void *v493;
  void *v494;
  _QWORD *v495;
  void *v496;
  void *v497;
  _QWORD *v498;
  void *v499;
  void *v500;
  _QWORD *v501;
  void *v502;
  void *v503;
  _QWORD *v504;
  __n128 v505;
  uint64_t v506;
  __n128 v507;
  _QWORD *v508;
  void *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  _QWORD v515[3];
  _QWORD v516[3];
  void *v517[3];
  void *__p;
  void *v519;
  _QWORD *v520;
  _QWORD v521[3];
  _QWORD *v522;
  _BYTE v523[24];
  _BYTE *v524;
  _BYTE v525[24];
  _BYTE *v526;
  std::__shared_weak_count_vtbl *v527;
  uint64_t v528;
  void (__cdecl **v529)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v530;
  uint64_t p_on_zero_shared_weak;
  void (__cdecl **v532)(std::__shared_weak_count *__hidden);
  uint64_t v533;

  v533 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v508 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = operator new(0x20uLL);
  v511 = (uint64_t)(v11 + 4);
  *v11 = v7;
  v11[1] = v8;
  v11[2] = v9;
  v11[3] = v10;
  v509 = v11;
  v510 = (uint64_t)(v11 + 4);
  v530 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v509);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x20uLL);
  v520 = v16 + 4;
  *v16 = v12;
  v16[1] = v13;
  v16[2] = v14;
  v16[3] = v15;
  __p = v16;
  v519 = v16 + 4;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v530, 2, &v507);
  MIL::IRParameter::Make(&v507, (uint64_t *)&v502);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v502);
  v17 = v502;
  v502 = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v507.n128_u64[1];
  if (v507.n128_u64[1])
  {
    v19 = (unint64_t *)(v507.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v519 = __p;
    operator delete(__p);
  }
  if (v509)
  {
    v510 = (uint64_t)v509;
    operator delete(v509);
  }
  v21 = v508;
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v26 = operator new(0x20uLL);
  v520 = v26 + 4;
  *v26 = v22;
  v26[1] = v23;
  v26[2] = v24;
  v26[3] = v25;
  __p = v26;
  v519 = v26 + 4;
  v509 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v31 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v31->__on_zero_shared_weak;
  v532 = &v31->__on_zero_shared_weak;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v31->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v31->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v29;
  v31->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v30;
  v530 = v31;
  v510 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v530);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v36 = operator new(0x20uLL);
  v504 = v36 + 4;
  *v36 = v32;
  v36[1] = v33;
  v36[2] = v34;
  v36[3] = v35;
  v502 = v36;
  v503 = v36 + 4;
  v511 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v502);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v41 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  v528 = (uint64_t)&v41->__on_zero_shared_weak;
  v529 = &v41->__on_zero_shared_weak;
  v41->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v37;
  v41->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
  v41->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v39;
  v41->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v40;
  v527 = v41;
  v512 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v527);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v46 = operator new(0x20uLL);
  v501 = v46 + 4;
  *v46 = v42;
  v46[1] = v43;
  v46[2] = v44;
  v46[3] = v45;
  v499 = v46;
  v500 = v46 + 4;
  v513 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v499);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v51 = operator new(0x20uLL);
  v498 = v51 + 4;
  *v51 = v47;
  v51[1] = v48;
  v51[2] = v49;
  v51[3] = v50;
  v496 = v51;
  v497 = v51 + 4;
  v514 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v496);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v56 = operator new(0x20uLL);
  v495 = v56 + 4;
  *v56 = v52;
  v56[1] = v53;
  v56[2] = v54;
  v56[3] = v55;
  v493 = v56;
  v494 = v56 + 4;
  v515[0] = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v493);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v509, 7, &v505);
  MIL::IRParameter::Make(&v505, &v506);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v21, "coordinates", &v506);
  v57 = v506;
  v506 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v505.n128_u64[1];
  if (v505.n128_u64[1])
  {
    v59 = (unint64_t *)(v505.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v493)
  {
    v494 = v493;
    operator delete(v493);
  }
  if (v496)
  {
    v497 = v496;
    operator delete(v496);
  }
  if (v499)
  {
    v500 = v499;
    operator delete(v499);
  }
  if (v527)
  {
    v528 = (uint64_t)v527;
    operator delete(v527);
  }
  if (v502)
  {
    v503 = v502;
    operator delete(v502);
  }
  if (v530)
  {
    p_on_zero_shared_weak = (uint64_t)v530;
    operator delete(v530);
  }
  if (__p)
  {
    v519 = __p;
    operator delete(__p);
  }
  v61 = v508;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v492);
  MIL::IRParameter::Make(&v492, (uint64_t *)&v509);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v61, "coordinates_format", (uint64_t *)&v509);
  v63 = v509;
  v509 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v492.n128_u64[1];
  if (v492.n128_u64[1])
  {
    v65 = (unint64_t *)(v492.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 48))(*((_QWORD *)v62 + 5), 1);
  v67 = *((_QWORD *)v62 + 5);
  Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  std::string::basic_string[abi:ne180100]<0>(v488, "xy");
  MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)v488, &v509);
  v490 = v509;
  if (v509)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v70 = (std::__shared_weak_count_vtbl *)v509;
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = v70;
  }
  else
  {
    v69 = 0;
  }
  v491 = v69;
  v509 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v67 + 112))(v67, &v490);
  v71 = v491;
  if (v491)
  {
    p_shared_owners = (unint64_t *)&v491->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v509;
  v509 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  if (v489 < 0)
    operator delete(v488[0]);
  v75 = v508;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v487);
  MIL::IRParameter::Make(&v487, (uint64_t *)&v509);
  v76 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v75, "coordinates_type", (uint64_t *)&v509);
  v77 = v509;
  v509 = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = (std::__shared_weak_count *)v487.n128_u64[1];
  if (v487.n128_u64[1])
  {
    v79 = (unint64_t *)(v487.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 32))(*((_QWORD *)v76 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 48))(*((_QWORD *)v76 + 5), 1);
  v81 = *((_QWORD *)v76 + 5);
  v82 = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  std::string::basic_string[abi:ne180100]<0>(v483, "absolute");
  MIL::IRTensorValueType::MakeStringValue(v82, (const MIL::IRTensorValueType *)v483, &v509);
  v485 = v509;
  if (v509)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)v509;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v486 = v83;
  v509 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v81 + 112))(v81, &v485);
  v85 = v486;
  if (v486)
  {
    v86 = (unint64_t *)&v486->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v509;
  v509 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  if (v484 < 0)
    operator delete(v483[0]);
  v89 = v508;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v482);
  MIL::IRParameter::Make(&v482, (uint64_t *)&v509);
  v90 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v89, "sampling_mode", (uint64_t *)&v509);
  v91 = v509;
  v509 = 0;
  if (v91)
    (*(void (**)(void *))(*(_QWORD *)v91 + 8))(v91);
  v92 = (std::__shared_weak_count *)v482.n128_u64[1];
  if (v482.n128_u64[1])
  {
    v93 = (unint64_t *)(v482.n128_u64[1] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v90 + 5) + 32))(*((_QWORD *)v90 + 5), 1);
  v95 = v508;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v481);
  MIL::IRParameter::Make(&v481, (uint64_t *)&v509);
  v96 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v95, "padding_mode", (uint64_t *)&v509);
  v97 = v509;
  v509 = 0;
  if (v97)
    (*(void (**)(void *))(*(_QWORD *)v97 + 8))(v97);
  v98 = (std::__shared_weak_count *)v481.n128_u64[1];
  if (v481.n128_u64[1])
  {
    v99 = (unint64_t *)(v481.n128_u64[1] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v96 + 5) + 32))(*((_QWORD *)v96 + 5), 1);
  v101 = v508;
  v509 = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v510 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v509, 2, &v480);
  MIL::IRParameter::Make(&v480, (uint64_t *)&__p);
  v102 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v101, "padding_value", (uint64_t *)&__p);
  v103 = __p;
  __p = 0;
  if (v103)
    (*(void (**)(void *))(*(_QWORD *)v103 + 8))(v103);
  v104 = (std::__shared_weak_count *)v480.n128_u64[1];
  if (v480.n128_u64[1])
  {
    v105 = (unint64_t *)(v480.n128_u64[1] + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v102 + 5) + 32))(*((_QWORD *)v102 + 5), 1);
  v107 = v508;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v479);
  MIL::IRParameter::Make(&v479, (uint64_t *)&v509);
  v108 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v107, "coordinates_mode", (uint64_t *)&v509);
  v109 = v509;
  v509 = 0;
  if (v109)
    (*(void (**)(void *))(*(_QWORD *)v109 + 8))(v109);
  v110 = (std::__shared_weak_count *)v479.n128_u64[1];
  if (v479.n128_u64[1])
  {
    v111 = (unint64_t *)(v479.n128_u64[1] + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v108 + 5) + 32))(*((_QWORD *)v108 + 5), 1);
  v113 = v508;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v478);
  MIL::IRParameter::Make(&v478, (uint64_t *)&v509);
  v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v113, "align_corners", (uint64_t *)&v509);
  v115 = v509;
  v509 = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  v116 = (std::__shared_weak_count *)v478.n128_u64[1];
  if (v478.n128_u64[1])
  {
    v117 = (unint64_t *)(v478.n128_u64[1] + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v114 + 5) + 32))(*((_QWORD *)v114 + 5), 1);
  v499 = 0;
  v119 = operator new();
  *(_QWORD *)v119 = 0;
  *(_QWORD *)(v119 + 8) = 0;
  *(_QWORD *)(v119 + 16) = 0;
  v509 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v499, (void **)v119);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v509, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v499, 1uLL);
  v120 = v499;
  v121 = MIL::IRUnknownDimension::Make(a1, 0);
  v122 = MIL::IRUnknownDimension::Make(a1, 0);
  v123 = MIL::IRUnknownDimension::Make(a1, 0);
  v124 = MIL::IRUnknownDimension::Make(a1, 0);
  v125 = operator new(0x20uLL);
  v520 = v125 + 4;
  *v125 = v121;
  v125[1] = v122;
  v125[2] = v123;
  v125[3] = v124;
  __p = v125;
  v519 = v125 + 4;
  v527 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v126 = MIL::IRUnknownDimension::Make(a1, 0);
  v127 = MIL::IRUnknownDimension::Make(a1, 0);
  v128 = MIL::IRUnknownDimension::Make(a1, 0);
  v129 = MIL::IRUnknownDimension::Make(a1, 0);
  v130 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v130->__on_zero_shared_weak;
  v532 = &v130->__on_zero_shared_weak;
  v130->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v126;
  v130->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v127;
  v130->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v128;
  v130->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v129;
  v530 = v130;
  v528 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v530);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v527, 2, &v477);
  MIL::IRParameter::Make(&v477, (uint64_t *)&v496);
  v131 = v496;
  v502 = v496;
  if (v496)
  {
    v132 = (_QWORD *)operator new();
    v133 = v496;
    *v132 = &unk_1EA99F888;
    v132[1] = 0;
    v132[2] = 0;
    v132[3] = v133;
  }
  else
  {
    v132 = 0;
  }
  v503 = v132;
  v496 = 0;
  v134 = v120[2];
  v135 = (_QWORD *)v120[1];
  if ((unint64_t)v135 >= v134)
  {
    v137 = ((uint64_t)v135 - *v120) >> 4;
    v138 = v137 + 1;
    if ((unint64_t)(v137 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v139 = v134 - *v120;
    if (v139 >> 3 > v138)
      v138 = v139 >> 3;
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF0)
      v140 = 0xFFFFFFFFFFFFFFFLL;
    else
      v140 = v138;
    v513 = (uint64_t)(v120 + 2);
    v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v120 + 2), v140);
    v143 = &v141[16 * v137];
    *(_QWORD *)v143 = v131;
    *((_QWORD *)v143 + 1) = v132;
    v503 = 0;
    v502 = 0;
    v145 = (_QWORD *)*v120;
    v144 = (_QWORD *)v120[1];
    if (v144 == (_QWORD *)*v120)
    {
      v148 = (_QWORD *)v120[1];
      v146 = &v141[16 * v137];
    }
    else
    {
      v146 = &v141[16 * v137];
      do
      {
        v147 = *((_OWORD *)v144 - 1);
        v144 -= 2;
        *((_OWORD *)v146 - 1) = v147;
        v146 -= 16;
        *v144 = 0;
        v144[1] = 0;
      }
      while (v144 != v145);
      v148 = (_QWORD *)*v120;
      v144 = (_QWORD *)v120[1];
    }
    v136 = v143 + 16;
    *v120 = v146;
    v510 = (uint64_t)v148;
    v120[1] = v143 + 16;
    v511 = (uint64_t)v144;
    v149 = v120[2];
    v120[2] = &v141[16 * v142];
    v512 = v149;
    v509 = v148;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v509);
  }
  else
  {
    *v135 = v131;
    v135[1] = v132;
    v136 = v135 + 2;
    v503 = 0;
    v502 = 0;
  }
  v120[1] = v136;
  v150 = v496;
  v496 = 0;
  if (v150)
    (*(void (**)(void *))(*(_QWORD *)v150 + 8))(v150);
  v151 = (std::__shared_weak_count *)v477.n128_u64[1];
  if (v477.n128_u64[1])
  {
    v152 = (unint64_t *)(v477.n128_u64[1] + 8);
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  if (v530)
  {
    p_on_zero_shared_weak = (uint64_t)v530;
    operator delete(v530);
  }
  if (__p)
  {
    v519 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v475 = *(_OWORD *)a2;
  v476 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v154 = (uint64_t)v508;
  *(_QWORD *)&v474 = v508;
  if (v508)
  {
    v155 = (_QWORD *)operator new();
    *v155 = &unk_1EA99F8E8;
    v155[1] = 0;
    v155[2] = 0;
    v155[3] = v154;
  }
  else
  {
    v155 = 0;
  }
  *((_QWORD *)&v474 + 1) = v155;
  v508 = 0;
  *(_QWORD *)&v473 = v499;
  if (v499)
  {
    v156 = (_QWORD *)operator new();
    v157 = v499;
    *v156 = &unk_1EA99F948;
    v156[1] = 0;
    v156[2] = 0;
    v156[3] = v157;
  }
  else
  {
    v156 = 0;
  }
  *((_QWORD *)&v473 + 1) = v156;
  v499 = 0;
  v526 = 0;
  v524 = 0;
  MIL::IROperator::Make((__int128 *)v475, &v474, &v473, (uint64_t)v525, (uint64_t)v523, a3);
  v158 = v524;
  if (v524 == v523)
  {
    v159 = 4;
    v158 = v523;
  }
  else
  {
    if (!v524)
      goto LABEL_145;
    v159 = 5;
  }
  (*(void (**)(void))(*v158 + 8 * v159))();
LABEL_145:
  v160 = v526;
  if (v526 == v525)
  {
    v161 = 4;
    v160 = v525;
    goto LABEL_149;
  }
  if (v526)
  {
    v161 = 5;
LABEL_149:
    (*(void (**)(void))(*v160 + 8 * v161))();
  }
  v162 = (std::__shared_weak_count *)*((_QWORD *)&v473 + 1);
  if (*((_QWORD *)&v473 + 1))
  {
    v163 = (unint64_t *)(*((_QWORD *)&v473 + 1) + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = (std::__shared_weak_count *)*((_QWORD *)&v474 + 1);
  if (*((_QWORD *)&v474 + 1))
  {
    v166 = (unint64_t *)(*((_QWORD *)&v474 + 1) + 8);
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  if (SHIBYTE(v476) < 0)
    operator delete(v475[0]);
  v530 = 0;
  v168 = (_OWORD *)operator new();
  *v168 = 0u;
  v168[1] = 0u;
  *((_DWORD *)v168 + 8) = 1065353216;
  v530 = (std::__shared_weak_count_vtbl *)v168;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v472);
  MIL::IRParameter::Make(&v472, (uint64_t *)&v509);
  v169 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v168, "minimum_compute_type", (uint64_t *)&v509);
  v170 = v509;
  v509 = 0;
  if (v170)
    (*(void (**)(void *))(*(_QWORD *)v170 + 8))(v170);
  v171 = (std::__shared_weak_count *)v472.n128_u64[1];
  if (v472.n128_u64[1])
  {
    v172 = (unint64_t *)(v472.n128_u64[1] + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v169 + 5) + 32))(*((_QWORD *)v169 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v169 + 5) + 48))(*((_QWORD *)v169 + 5), 1);
  v174 = *a3;
  v175 = v530;
  v470 = v530;
  if (v530)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = v175;
  }
  else
  {
    v176 = 0;
  }
  v471 = v176;
  v530 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v174 + 184))(v174, &v470);
  v177 = v471;
  if (v471)
  {
    v178 = (unint64_t *)&v471->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = *a3;
  v521[0] = &off_1EA99FBD8;
  v521[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResample;
  v522 = v521;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v180 + 200))(v180, v521);
  v181 = v522;
  if (v522 == v521)
  {
    v182 = 4;
    v181 = v521;
  }
  else
  {
    if (!v522)
      goto LABEL_182;
    v182 = 5;
  }
  (*(void (**)(void))(*v181 + 8 * v182))();
LABEL_182:
  MIL::Validation::TensorDTypeConstraints::Make(&v509);
  v183 = v509;
  std::string::basic_string[abi:ne180100]<0>(v466, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v466, 0, (uint64_t *)&__p);
  v468 = __p;
  if (__p)
  {
    v184 = (std::__shared_weak_count *)operator new();
    v185 = (std::__shared_weak_count_vtbl *)__p;
    v184->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v184->__shared_owners_ = 0;
    v184->__shared_weak_owners_ = 0;
    v184[1].__vftable = v185;
  }
  else
  {
    v184 = 0;
  }
  v469 = v184;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v464, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v183 + 24))(v183, &v468, v464);
  if (v465 < 0)
    operator delete(v464[0]);
  v186 = v469;
  if (v469)
  {
    v187 = (unint64_t *)&v469->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = __p;
  __p = 0;
  if (v189)
    (*(void (**)(void *))(*(_QWORD *)v189 + 8))(v189);
  if (v467 < 0)
    operator delete(v466[0]);
  v190 = v509;
  std::string::basic_string[abi:ne180100]<0>(v460, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v460, 0, (uint64_t *)&__p);
  v462 = __p;
  if (__p)
  {
    v191 = (std::__shared_weak_count *)operator new();
    v192 = (std::__shared_weak_count_vtbl *)__p;
    v191->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v191->__shared_owners_ = 0;
    v191->__shared_weak_owners_ = 0;
    v191[1].__vftable = v192;
  }
  else
  {
    v191 = 0;
  }
  v463 = v191;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v458, "U");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v190 + 24))(v190, &v462, v458);
  if (v459 < 0)
    operator delete(v458[0]);
  v193 = v463;
  if (v463)
  {
    v194 = (unint64_t *)&v463->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = __p;
  __p = 0;
  if (v196)
    (*(void (**)(void *))(*(_QWORD *)v196 + 8))(v196);
  if (v461 < 0)
    operator delete(v460[0]);
  v197 = v509;
  std::string::basic_string[abi:ne180100]<0>(v454, "padding_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v454, 0, (uint64_t *)&__p);
  v456 = __p;
  if (__p)
  {
    v198 = (std::__shared_weak_count *)operator new();
    v199 = (std::__shared_weak_count_vtbl *)__p;
    v198->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v198->__shared_owners_ = 0;
    v198->__shared_weak_owners_ = 0;
    v198[1].__vftable = v199;
  }
  else
  {
    v198 = 0;
  }
  v457 = v198;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v452, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v197 + 24))(v197, &v456, v452);
  if (v453 < 0)
    operator delete(v452[0]);
  v200 = v457;
  if (v457)
  {
    v201 = (unint64_t *)&v457->__shared_owners_;
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  v203 = __p;
  __p = 0;
  if (v203)
    (*(void (**)(void *))(*(_QWORD *)v203 + 8))(v203);
  if (v455 < 0)
    operator delete(v454[0]);
  v204 = v509;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v450 = __p;
  if (__p)
  {
    v205 = (std::__shared_weak_count *)operator new();
    v206 = (std::__shared_weak_count_vtbl *)__p;
    v205->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v205->__shared_owners_ = 0;
    v205->__shared_weak_owners_ = 0;
    v205[1].__vftable = v206;
  }
  else
  {
    v205 = 0;
  }
  v451 = v205;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v448, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v204 + 24))(v204, &v450, v448);
  if (v449 < 0)
    operator delete(v448[0]);
  v207 = v451;
  if (v451)
  {
    v208 = (unint64_t *)&v451->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = __p;
  __p = 0;
  if (v210)
    (*(void (**)(void *))(*(_QWORD *)v210 + 8))(v210);
  v211 = *a3;
  v446 = v509;
  if (v509)
  {
    v212 = (std::__shared_weak_count *)operator new();
    v213 = (std::__shared_weak_count_vtbl *)v509;
    v212->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v212->__shared_owners_ = 0;
    v212->__shared_weak_owners_ = 0;
    v212[1].__vftable = v213;
  }
  else
  {
    v212 = 0;
  }
  v447 = v212;
  v509 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v211 + 56))(v211, &v446);
  v214 = v447;
  if (v447)
  {
    v215 = (unint64_t *)&v447->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = v509;
  v509 = 0;
  if (v217)
    (*(void (**)(void *))(*(_QWORD *)v217 + 8))(v217);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v509);
  v218 = v509;
  std::string::basic_string[abi:ne180100]<0>(v442, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v442, 0, (uint64_t *)&__p);
  v444 = __p;
  if (__p)
  {
    v219 = (std::__shared_weak_count *)operator new();
    v220 = (std::__shared_weak_count_vtbl *)__p;
    v219->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v219->__shared_owners_ = 0;
    v219->__shared_weak_owners_ = 0;
    v219[1].__vftable = v220;
  }
  else
  {
    v219 = 0;
  }
  v445 = v219;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v440, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v218 + 24))(v218, &v444, 0, v440);
  if (v441 < 0)
    operator delete(v440[0]);
  v221 = v445;
  if (v445)
  {
    v222 = (unint64_t *)&v445->__shared_owners_;
    do
      v223 = __ldaxr(v222);
    while (__stlxr(v223 - 1, v222));
    if (!v223)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  v224 = __p;
  __p = 0;
  if (v224)
    (*(void (**)(void *))(*(_QWORD *)v224 + 8))(v224);
  if (v443 < 0)
    operator delete(v442[0]);
  v225 = v509;
  std::string::basic_string[abi:ne180100]<0>(v436, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v436, 0, (uint64_t *)&__p);
  v438 = __p;
  if (__p)
  {
    v226 = (std::__shared_weak_count *)operator new();
    v227 = (std::__shared_weak_count_vtbl *)__p;
    v226->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v226->__shared_owners_ = 0;
    v226->__shared_weak_owners_ = 0;
    v226[1].__vftable = v227;
  }
  else
  {
    v226 = 0;
  }
  v439 = v226;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v434, "C");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v225 + 24))(v225, &v438, 1, v434);
  if (v435 < 0)
    operator delete(v434[0]);
  v228 = v439;
  if (v439)
  {
    v229 = (unint64_t *)&v439->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v231 = __p;
  __p = 0;
  if (v231)
    (*(void (**)(void *))(*(_QWORD *)v231 + 8))(v231);
  if (v437 < 0)
    operator delete(v436[0]);
  v232 = v509;
  std::string::basic_string[abi:ne180100]<0>(v430, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v430, 0, (uint64_t *)&__p);
  v432 = __p;
  if (__p)
  {
    v233 = (std::__shared_weak_count *)operator new();
    v234 = (std::__shared_weak_count_vtbl *)__p;
    v233->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v233->__shared_owners_ = 0;
    v233->__shared_weak_owners_ = 0;
    v233[1].__vftable = v234;
  }
  else
  {
    v233 = 0;
  }
  v433 = v233;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v428, "H_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v232 + 24))(v232, &v432, 2, v428);
  if (v429 < 0)
    operator delete(v428[0]);
  v235 = v433;
  if (v433)
  {
    v236 = (unint64_t *)&v433->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v238 = __p;
  __p = 0;
  if (v238)
    (*(void (**)(void *))(*(_QWORD *)v238 + 8))(v238);
  if (v431 < 0)
    operator delete(v430[0]);
  v239 = v509;
  std::string::basic_string[abi:ne180100]<0>(v424, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v424, 0, (uint64_t *)&__p);
  v426 = __p;
  if (__p)
  {
    v240 = (std::__shared_weak_count *)operator new();
    v241 = (std::__shared_weak_count_vtbl *)__p;
    v240->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v240->__shared_owners_ = 0;
    v240->__shared_weak_owners_ = 0;
    v240[1].__vftable = v241;
  }
  else
  {
    v240 = 0;
  }
  v427 = v240;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v422, "W_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v239 + 24))(v239, &v426, 3, v422);
  if (v423 < 0)
    operator delete(v422[0]);
  v242 = v427;
  if (v427)
  {
    v243 = (unint64_t *)&v427->__shared_owners_;
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  v245 = __p;
  __p = 0;
  if (v245)
    (*(void (**)(void *))(*(_QWORD *)v245 + 8))(v245);
  if (v425 < 0)
    operator delete(v424[0]);
  v246 = v509;
  std::string::basic_string[abi:ne180100]<0>(v418, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v418, 0, (uint64_t *)&__p);
  v420 = __p;
  if (__p)
  {
    v247 = (std::__shared_weak_count *)operator new();
    v248 = (std::__shared_weak_count_vtbl *)__p;
    v247->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v247->__shared_owners_ = 0;
    v247->__shared_weak_owners_ = 0;
    v247[1].__vftable = v248;
  }
  else
  {
    v247 = 0;
  }
  v421 = v247;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v416, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v246 + 24))(v246, &v420, 0, v416);
  if (v417 < 0)
    operator delete(v416[0]);
  v249 = v421;
  if (v421)
  {
    v250 = (unint64_t *)&v421->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  v252 = __p;
  __p = 0;
  if (v252)
    (*(void (**)(void *))(*(_QWORD *)v252 + 8))(v252);
  if (v419 < 0)
    operator delete(v418[0]);
  v253 = v509;
  std::string::basic_string[abi:ne180100]<0>(v412, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v412, 0, (uint64_t *)&__p);
  v414 = __p;
  if (__p)
  {
    v254 = (std::__shared_weak_count *)operator new();
    v255 = (std::__shared_weak_count_vtbl *)__p;
    v254->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v254->__shared_owners_ = 0;
    v254->__shared_weak_owners_ = 0;
    v254[1].__vftable = v255;
  }
  else
  {
    v254 = 0;
  }
  v415 = v254;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v410, "H_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v253 + 24))(v253, &v414, 1, v410);
  if (v411 < 0)
    operator delete(v410[0]);
  v256 = v415;
  if (v415)
  {
    v257 = (unint64_t *)&v415->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v259 = __p;
  __p = 0;
  if (v259)
    (*(void (**)(void *))(*(_QWORD *)v259 + 8))(v259);
  if (v413 < 0)
    operator delete(v412[0]);
  v260 = v509;
  std::string::basic_string[abi:ne180100]<0>(v406, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v406, 0, (uint64_t *)&__p);
  v408 = __p;
  if (__p)
  {
    v261 = (std::__shared_weak_count *)operator new();
    v262 = (std::__shared_weak_count_vtbl *)__p;
    v261->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v261->__shared_owners_ = 0;
    v261->__shared_weak_owners_ = 0;
    v261[1].__vftable = v262;
  }
  else
  {
    v261 = 0;
  }
  v409 = v261;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v404, "W_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v260 + 24))(v260, &v408, 2, v404);
  if (v405 < 0)
    operator delete(v404[0]);
  v263 = v409;
  if (v409)
  {
    v264 = (unint64_t *)&v409->__shared_owners_;
    do
      v265 = __ldaxr(v264);
    while (__stlxr(v265 - 1, v264));
    if (!v265)
    {
      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
      std::__shared_weak_count::__release_weak(v263);
    }
  }
  v266 = __p;
  __p = 0;
  if (v266)
    (*(void (**)(void *))(*(_QWORD *)v266 + 8))(v266);
  if (v407 < 0)
    operator delete(v406[0]);
  v267 = v509;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v402 = __p;
  if (__p)
  {
    v268 = (std::__shared_weak_count *)operator new();
    v269 = (std::__shared_weak_count_vtbl *)__p;
    v268->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v268->__shared_owners_ = 0;
    v268->__shared_weak_owners_ = 0;
    v268[1].__vftable = v269;
  }
  else
  {
    v268 = 0;
  }
  v403 = v268;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v400, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v267 + 24))(v267, &v402, 0, v400);
  if (v401 < 0)
    operator delete(v400[0]);
  v270 = v403;
  if (v403)
  {
    v271 = (unint64_t *)&v403->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
      std::__shared_weak_count::__release_weak(v270);
    }
  }
  v273 = __p;
  __p = 0;
  if (v273)
    (*(void (**)(void *))(*(_QWORD *)v273 + 8))(v273);
  v274 = v509;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v398 = __p;
  if (__p)
  {
    v275 = (std::__shared_weak_count *)operator new();
    v276 = (std::__shared_weak_count_vtbl *)__p;
    v275->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v275->__shared_owners_ = 0;
    v275->__shared_weak_owners_ = 0;
    v275[1].__vftable = v276;
  }
  else
  {
    v275 = 0;
  }
  v399 = v275;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v396, "C");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v274 + 24))(v274, &v398, 1, v396);
  if (v397 < 0)
    operator delete(v396[0]);
  v277 = v399;
  if (v399)
  {
    v278 = (unint64_t *)&v399->__shared_owners_;
    do
      v279 = __ldaxr(v278);
    while (__stlxr(v279 - 1, v278));
    if (!v279)
    {
      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
      std::__shared_weak_count::__release_weak(v277);
    }
  }
  v280 = __p;
  __p = 0;
  if (v280)
    (*(void (**)(void *))(*(_QWORD *)v280 + 8))(v280);
  v281 = v509;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v394 = __p;
  if (__p)
  {
    v282 = (std::__shared_weak_count *)operator new();
    v283 = (std::__shared_weak_count_vtbl *)__p;
    v282->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v282->__shared_owners_ = 0;
    v282->__shared_weak_owners_ = 0;
    v282[1].__vftable = v283;
  }
  else
  {
    v282 = 0;
  }
  v395 = v282;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v392, "H_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v281 + 24))(v281, &v394, 2, v392);
  if (v393 < 0)
    operator delete(v392[0]);
  v284 = v395;
  if (v395)
  {
    v285 = (unint64_t *)&v395->__shared_owners_;
    do
      v286 = __ldaxr(v285);
    while (__stlxr(v286 - 1, v285));
    if (!v286)
    {
      ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
      std::__shared_weak_count::__release_weak(v284);
    }
  }
  v287 = __p;
  __p = 0;
  if (v287)
    (*(void (**)(void *))(*(_QWORD *)v287 + 8))(v287);
  v288 = v509;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v390 = __p;
  if (__p)
  {
    v289 = (std::__shared_weak_count *)operator new();
    v290 = (std::__shared_weak_count_vtbl *)__p;
    v289->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v289->__shared_owners_ = 0;
    v289->__shared_weak_owners_ = 0;
    v289[1].__vftable = v290;
  }
  else
  {
    v289 = 0;
  }
  v391 = v289;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v388, "W_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v288 + 24))(v288, &v390, 3, v388);
  if (v389 < 0)
    operator delete(v388[0]);
  v291 = v391;
  if (v391)
  {
    v292 = (unint64_t *)&v391->__shared_owners_;
    do
      v293 = __ldaxr(v292);
    while (__stlxr(v293 - 1, v292));
    if (!v293)
    {
      ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
      std::__shared_weak_count::__release_weak(v291);
    }
  }
  v294 = __p;
  __p = 0;
  if (v294)
    (*(void (**)(void *))(*(_QWORD *)v294 + 8))(v294);
  v295 = *a3;
  v386 = v509;
  if (v509)
  {
    v296 = (std::__shared_weak_count *)operator new();
    v297 = (std::__shared_weak_count_vtbl *)v509;
    v296->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v296->__shared_owners_ = 0;
    v296->__shared_weak_owners_ = 0;
    v296[1].__vftable = v297;
  }
  else
  {
    v296 = 0;
  }
  v387 = v296;
  v509 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v295 + 56))(v295, &v386);
  v298 = v387;
  if (v387)
  {
    v299 = (unint64_t *)&v387->__shared_owners_;
    do
      v300 = __ldaxr(v299);
    while (__stlxr(v300 - 1, v299));
    if (!v300)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  v301 = v509;
  v509 = 0;
  if (v301)
    (*(void (**)(void *))(*(_QWORD *)v301 + 8))(v301);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v502);
  v302 = v502;
  std::string::basic_string[abi:ne180100]<0>(v382, "coordinates_format");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v382, 1, (uint64_t *)&v527);
  v384 = v527;
  if (v527)
  {
    v303 = (std::__shared_weak_count *)operator new();
    v304 = v527;
    v303->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v303->__shared_owners_ = 0;
    v303->__shared_weak_owners_ = 0;
    v303[1].__vftable = v304;
  }
  else
  {
    v303 = 0;
  }
  v385 = v303;
  v527 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v509, "xy");
  std::string::basic_string[abi:ne180100]<0>(&v512, "yx");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v509, 2);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, _QWORD))(*(_QWORD *)v302 + 24))(v302, &v384, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -48; i -= 24)
  {
    if (*((char *)&v514 + i + 7) < 0)
      operator delete(*(void **)((char *)&v512 + i));
  }
  v306 = v385;
  if (v385)
  {
    v307 = (unint64_t *)&v385->__shared_owners_;
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  v309 = v527;
  v527 = 0;
  if (v309)
    (*((void (**)(std::__shared_weak_count_vtbl *))v309->~__shared_weak_count + 1))(v309);
  if (v383 < 0)
    operator delete(v382[0]);
  v310 = v502;
  std::string::basic_string[abi:ne180100]<0>(v378, "coordinates_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v378, 1, (uint64_t *)&v527);
  v380 = v527;
  if (v527)
  {
    v311 = (std::__shared_weak_count *)operator new();
    v312 = v527;
    v311->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v311->__shared_owners_ = 0;
    v311->__shared_weak_owners_ = 0;
    v311[1].__vftable = v312;
  }
  else
  {
    v311 = 0;
  }
  v381 = v311;
  v527 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v509, "absolute");
  std::string::basic_string[abi:ne180100]<0>(&v512, "relative");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v509, 2);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, _QWORD))(*(_QWORD *)v310 + 24))(v310, &v380, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -48; j -= 24)
  {
    if (*((char *)&v514 + j + 7) < 0)
      operator delete(*(void **)((char *)&v512 + j));
  }
  v314 = v381;
  if (v381)
  {
    v315 = (unint64_t *)&v381->__shared_owners_;
    do
      v316 = __ldaxr(v315);
    while (__stlxr(v316 - 1, v315));
    if (!v316)
    {
      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
      std::__shared_weak_count::__release_weak(v314);
    }
  }
  v317 = v527;
  v527 = 0;
  if (v317)
    (*((void (**)(std::__shared_weak_count_vtbl *))v317->~__shared_weak_count + 1))(v317);
  if (v379 < 0)
    operator delete(v378[0]);
  v318 = v502;
  std::string::basic_string[abi:ne180100]<0>(v374, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v374, 0, (uint64_t *)&v527);
  v376 = v527;
  if (v527)
  {
    v319 = (std::__shared_weak_count *)operator new();
    v320 = v527;
    v319->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v319->__shared_owners_ = 0;
    v319->__shared_weak_owners_ = 0;
    v319[1].__vftable = v320;
  }
  else
  {
    v319 = 0;
  }
  v377 = v319;
  v527 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v509, "bilinear");
  std::string::basic_string[abi:ne180100]<0>(&v512, "nearest");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v509, 2);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, _QWORD))(*(_QWORD *)v318 + 24))(v318, &v376, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (k = 0; k != -48; k -= 24)
  {
    if (*((char *)&v514 + k + 7) < 0)
      operator delete(*(void **)((char *)&v512 + k));
  }
  v322 = v377;
  if (v377)
  {
    v323 = (unint64_t *)&v377->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  v325 = v527;
  v527 = 0;
  if (v325)
    (*((void (**)(std::__shared_weak_count_vtbl *))v325->~__shared_weak_count + 1))(v325);
  if (v375 < 0)
    operator delete(v374[0]);
  v326 = v502;
  std::string::basic_string[abi:ne180100]<0>(v370, "padding_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v370, 0, (uint64_t *)&v527);
  v372 = v527;
  if (v527)
  {
    v327 = (std::__shared_weak_count *)operator new();
    v328 = v527;
    v327->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v327->__shared_owners_ = 0;
    v327->__shared_weak_owners_ = 0;
    v327[1].__vftable = v328;
  }
  else
  {
    v327 = 0;
  }
  v373 = v327;
  v527 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v509, "border");
  std::string::basic_string[abi:ne180100]<0>(&v512, "constant");
  std::string::basic_string[abi:ne180100]<0>(v515, "reflection");
  std::string::basic_string[abi:ne180100]<0>(v516, "symmetric");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v509, 4);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, _QWORD))(*(_QWORD *)v326 + 24))(v326, &v372, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (m = 0; m != -12; m -= 3)
  {
    if (SHIBYTE(v516[m + 2]) < 0)
      operator delete((void *)v516[m]);
  }
  v330 = v373;
  if (v373)
  {
    v331 = (unint64_t *)&v373->__shared_owners_;
    do
      v332 = __ldaxr(v331);
    while (__stlxr(v332 - 1, v331));
    if (!v332)
    {
      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
      std::__shared_weak_count::__release_weak(v330);
    }
  }
  v333 = v527;
  v527 = 0;
  if (v333)
    (*((void (**)(std::__shared_weak_count_vtbl *))v333->~__shared_weak_count + 1))(v333);
  if (v371 < 0)
    operator delete(v370[0]);
  v334 = v502;
  std::string::basic_string[abi:ne180100]<0>(v366, "coordinates_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v366, 0, (uint64_t *)&v527);
  v368 = v527;
  if (v527)
  {
    v335 = (std::__shared_weak_count *)operator new();
    v336 = v527;
    v335->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v335->__shared_owners_ = 0;
    v335->__shared_weak_owners_ = 0;
    v335[1].__vftable = v336;
  }
  else
  {
    v335 = 0;
  }
  v369 = v335;
  v527 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v509, "normalized_minus_one_to_one");
  std::string::basic_string[abi:ne180100]<0>(&v512, "normalized_zero_to_one");
  std::string::basic_string[abi:ne180100]<0>(v515, "unnormalized");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v509, 3);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, _QWORD))(*(_QWORD *)v334 + 24))(v334, &v368, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (n = 0; n != -9; n -= 3)
  {
    if (SHIBYTE(v515[n + 2]) < 0)
      operator delete((void *)v515[n]);
  }
  v338 = v369;
  if (v369)
  {
    v339 = (unint64_t *)&v369->__shared_owners_;
    do
      v340 = __ldaxr(v339);
    while (__stlxr(v340 - 1, v339));
    if (!v340)
    {
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v338);
    }
  }
  v341 = v527;
  v527 = 0;
  if (v341)
    (*((void (**)(std::__shared_weak_count_vtbl *))v341->~__shared_weak_count + 1))(v341);
  if (v367 < 0)
    operator delete(v366[0]);
  v342 = v502;
  std::string::basic_string[abi:ne180100]<0>(v362, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v362, 1, (uint64_t *)&v527);
  v364 = v527;
  if (v527)
  {
    v343 = (std::__shared_weak_count *)operator new();
    v344 = v527;
    v343->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v343->__shared_owners_ = 0;
    v343->__shared_weak_owners_ = 0;
    v343[1].__vftable = v344;
  }
  else
  {
    v343 = 0;
  }
  v365 = v343;
  v527 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v509, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v512, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v515, "int32");
  std::string::basic_string[abi:ne180100]<0>(v516, "int8");
  std::string::basic_string[abi:ne180100]<0>(v517, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v509, 5);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v342 + 24))(v342, &v364, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (ii = 0; ii != -15; ii -= 3)
  {
    if (SHIBYTE(v517[ii + 2]) < 0)
      operator delete(v517[ii]);
  }
  v346 = v365;
  if (v365)
  {
    v347 = (unint64_t *)&v365->__shared_owners_;
    do
      v348 = __ldaxr(v347);
    while (__stlxr(v348 - 1, v347));
    if (!v348)
    {
      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
      std::__shared_weak_count::__release_weak(v346);
    }
  }
  v349 = v527;
  v527 = 0;
  if (v349)
    (*((void (**)(std::__shared_weak_count_vtbl *))v349->~__shared_weak_count + 1))(v349);
  if (v363 < 0)
    operator delete(v362[0]);
  v350 = *a3;
  v360 = v502;
  if (v502)
  {
    v351 = (std::__shared_weak_count *)operator new();
    v352 = (std::__shared_weak_count_vtbl *)v502;
    v351->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v351->__shared_owners_ = 0;
    v351->__shared_weak_owners_ = 0;
    v351[1].__vftable = v352;
  }
  else
  {
    v351 = 0;
  }
  v361 = v351;
  v502 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v350 + 56))(v350, &v360);
  v353 = v361;
  if (v361)
  {
    v354 = (unint64_t *)&v361->__shared_owners_;
    do
      v355 = __ldaxr(v354);
    while (__stlxr(v355 - 1, v354));
    if (!v355)
    {
      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
      std::__shared_weak_count::__release_weak(v353);
    }
  }
  v356 = v502;
  v502 = 0;
  if (v356)
    (*(void (**)(void *))(*(_QWORD *)v356 + 8))(v356);
  if (v530)
  {
    v357 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v530);
    MEMORY[0x1E0C023A0](v357, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v499, 0);
  result = (uint64_t)v508;
  if (v508)
  {
    v359 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v508);
    return MEMORY[0x1E0C023A0](v359, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08E3D3C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x5E0];
  STACK[0x5E0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x5C8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x620], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Resize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  void **v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  void **v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  void **v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  char **v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  void **v73;
  char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char **v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _OWORD *v93;
  unsigned __int8 *v94;
  void **v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  void **v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  void **v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void **v135;
  void **v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count_vtbl *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  void **v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  void **v149;
  void *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  uint64_t i;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  void *v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  uint64_t j;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  void *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  uint64_t k;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t result;
  uint64_t v183;
  void *v184;
  std::__shared_weak_count *v185;
  void *v186[2];
  char v187;
  void *v188;
  std::__shared_weak_count *v189;
  void *v190[2];
  char v191;
  void *v192;
  std::__shared_weak_count *v193;
  void *v194[2];
  char v195;
  void *v196;
  std::__shared_weak_count *v197;
  void **v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202[2];
  char v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  void **v206;
  std::__shared_weak_count *v207;
  void *v208[2];
  char v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count *v211;
  void *v212[2];
  char v213;
  void *v214[2];
  char v215;
  std::__shared_weak_count_vtbl *v216;
  std::__shared_weak_count *v217;
  void *v218[2];
  char v219;
  void *v220[2];
  char v221;
  std::__shared_weak_count_vtbl *v222;
  std::__shared_weak_count *v223;
  void *v224;
  std::__shared_weak_count *v225;
  __n128 v226;
  __int128 v227;
  __int128 v228;
  void *v229[2];
  uint64_t v230;
  __n128 v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  char **v235;
  __n128 v236;
  __n128 v237;
  __n128 v238;
  void *v239;
  void *v240;
  _QWORD *v241;
  __n128 v242;
  void *__p;
  void *v244;
  _QWORD *v245;
  void *v246;
  void *v247;
  _QWORD *v248;
  __n128 v249;
  _QWORD *v250;
  void **v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD v254[3];
  _QWORD v255[3];
  _QWORD v256[3];
  _QWORD v257[3];
  uint64_t v258[3];
  _QWORD v259[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v261;
  uint64_t v262;
  _QWORD v263[3];
  _QWORD *v264;
  _BYTE v265[24];
  _BYTE *v266;
  _QWORD v267[3];
  _QWORD *v268;
  uint64_t v269;

  v269 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v250 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v261 = (uint64_t)&v8->~__shared_weak_count_0;
  v262 = (uint64_t)&v8->~__shared_weak_count_0;
  v251 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v246 = v10;
  *v10 = v9;
  v248 = v10 + 1;
  v247 = v10 + 1;
  v252 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v246);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v245 = v12 + 1;
  v244 = v12 + 1;
  v253 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v251, 3, &v249);
  MIL::IRParameter::Make(&v249, (uint64_t *)&v239);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v239);
  v13 = v239;
  v239 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v249.n128_u64[1];
  if (v249.n128_u64[1])
  {
    v15 = (unint64_t *)(v249.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v244 = __p;
    operator delete(__p);
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  if (Scalar)
  {
    v261 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v250;
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v261 = (uint64_t)&v19->~__shared_weak_count_0;
  v262 = (uint64_t)&v19->~__shared_weak_count_0;
  v251 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = operator new(8uLL);
  v246 = v21;
  *v21 = v20;
  v248 = v21 + 1;
  v247 = v21 + 1;
  v252 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v246);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v245 = v23 + 1;
  v244 = v23 + 1;
  v253 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = operator new(8uLL);
  v239 = v25;
  *v25 = v24;
  v241 = v25 + 1;
  v240 = v25 + 1;
  v254[0] = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v239);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v251, 4, &v242);
  MIL::IRParameter::Make(&v242, &v233);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v17, "shape", &v233);
  v26 = v233;
  v233 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = (std::__shared_weak_count *)v242.n128_u64[1];
  if (v242.n128_u64[1])
  {
    v28 = (unint64_t *)(v242.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v239)
  {
    v240 = v239;
    operator delete(v239);
  }
  if (__p)
  {
    v244 = __p;
    operator delete(__p);
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  if (Scalar)
  {
    v261 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v30 = v250;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 16);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v238);
  MIL::IRParameter::Make(&v238, (uint64_t *)&v251);
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v30, "resized_dims", (uint64_t *)&v251);
  v32 = v251;
  v251 = 0;
  if (v32)
    (*((void (**)(void **))*v32 + 1))(v32);
  v33 = (std::__shared_weak_count *)v238.n128_u64[1];
  if (v238.n128_u64[1])
  {
    v34 = (unint64_t *)(v238.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  v36 = v250;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v237);
  MIL::IRParameter::Make(&v237, (uint64_t *)&v251);
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v36, "interpolation_mode", (uint64_t *)&v251);
  v38 = v251;
  v251 = 0;
  if (v38)
    (*((void (**)(void **))*v38 + 1))(v38);
  v39 = (std::__shared_weak_count *)v237.n128_u64[1];
  if (v237.n128_u64[1])
  {
    v40 = (unint64_t *)(v237.n128_u64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 32))(*((_QWORD *)v37 + 5), 1);
  v42 = v250;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v236);
  MIL::IRParameter::Make(&v236, (uint64_t *)&v251);
  v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v42, "sampling_mode", (uint64_t *)&v251);
  v44 = v251;
  v251 = 0;
  if (v44)
    (*((void (**)(void **))*v44 + 1))(v44);
  v45 = (std::__shared_weak_count *)v236.n128_u64[1];
  if (v236.n128_u64[1])
  {
    v46 = (unint64_t *)(v236.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 32))(*((_QWORD *)v43 + 5), 1);
  v235 = 0;
  v48 = operator new();
  *(_QWORD *)v48 = 0;
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v48 + 16) = 0;
  v251 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v235, (void **)v48);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v251, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v235, 1uLL);
  v49 = v235;
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  v246 = v51;
  *v51 = v50;
  v248 = v51 + 1;
  v247 = v51 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v246);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  __p = v53;
  *v53 = v52;
  v245 = v53 + 1;
  v244 = v53 + 1;
  v261 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(8uLL);
  v239 = v55;
  *v55 = v54;
  v241 = v55 + 1;
  v240 = v55 + 1;
  v262 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v239);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v231);
  MIL::IRParameter::Make(&v231, &v232);
  v56 = v232;
  v233 = v232;
  if (v232)
  {
    v57 = (_QWORD *)operator new();
    v58 = v232;
    *v57 = &unk_1EA99F888;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  v234 = v57;
  v232 = 0;
  v59 = v49[2];
  v60 = v49[1];
  if (v60 >= v59)
  {
    v62 = (v60 - *v49) >> 4;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v64 = v59 - *v49;
    if (v64 >> 3 > v63)
      v63 = v64 >> 3;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
      v65 = 0xFFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    v254[1] = v49 + 2;
    v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v49 + 2), v65);
    v68 = (uint64_t *)&v66[16 * v62];
    *v68 = v56;
    v68[1] = (uint64_t)v57;
    v234 = 0;
    v233 = 0;
    v70 = *v49;
    v69 = v49[1];
    if (v69 == *v49)
    {
      v73 = (void **)v49[1];
      v71 = &v66[16 * v62];
    }
    else
    {
      v71 = &v66[16 * v62];
      do
      {
        v72 = *((_OWORD *)v69 - 1);
        v69 -= 16;
        *((_OWORD *)v71 - 1) = v72;
        v71 -= 16;
        *(_QWORD *)v69 = 0;
        *((_QWORD *)v69 + 1) = 0;
      }
      while (v69 != v70);
      v73 = (void **)*v49;
      v69 = v49[1];
    }
    v61 = (char *)(v68 + 2);
    *v49 = v71;
    v252 = (uint64_t)v73;
    v49[1] = (char *)(v68 + 2);
    v253 = (uint64_t)v69;
    v74 = v49[2];
    v49[2] = &v66[16 * v67];
    v254[0] = v74;
    v251 = v73;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v251);
  }
  else
  {
    *(_QWORD *)v60 = v56;
    *((_QWORD *)v60 + 1) = v57;
    v61 = v60 + 16;
    v234 = 0;
    v233 = 0;
  }
  v49[1] = v61;
  v75 = v232;
  v232 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v231.n128_u64[1];
  if (v231.n128_u64[1])
  {
    v77 = (unint64_t *)(v231.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (v239)
  {
    v240 = v239;
    operator delete(v239);
  }
  if (__p)
  {
    v244 = __p;
    operator delete(__p);
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  *(_OWORD *)v229 = *(_OWORD *)a2;
  v230 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v79 = (uint64_t)v250;
  *(_QWORD *)&v228 = v250;
  if (v250)
  {
    v80 = (_QWORD *)operator new();
    *v80 = &unk_1EA99F8E8;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v79;
  }
  else
  {
    v80 = 0;
  }
  *((_QWORD *)&v228 + 1) = v80;
  v250 = 0;
  *(_QWORD *)&v227 = v235;
  if (v235)
  {
    v81 = (_QWORD *)operator new();
    v82 = v235;
    *v81 = &unk_1EA99F948;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v82;
  }
  else
  {
    v81 = 0;
  }
  *((_QWORD *)&v227 + 1) = v81;
  v235 = 0;
  v267[0] = &unk_1EA99FAC8;
  v267[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateResize;
  v268 = v267;
  v266 = 0;
  MIL::IROperator::Make((__int128 *)v229, &v228, &v227, (uint64_t)v267, (uint64_t)v265, a3);
  v83 = v266;
  if (v266 == v265)
  {
    v84 = 4;
    v83 = v265;
  }
  else
  {
    if (!v266)
      goto LABEL_91;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_91:
  v85 = v268;
  if (v268 == v267)
  {
    v86 = 4;
    v85 = v267;
    goto LABEL_95;
  }
  if (v268)
  {
    v86 = 5;
LABEL_95:
    (*(void (**)(void))(*v85 + 8 * v86))();
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
  if (*((_QWORD *)&v227 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
  if (*((_QWORD *)&v228 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (SHIBYTE(v230) < 0)
    operator delete(v229[0]);
  v246 = 0;
  v93 = (_OWORD *)operator new();
  *v93 = 0u;
  v93[1] = 0u;
  *((_DWORD *)v93 + 8) = 1065353216;
  v246 = v93;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v226);
  MIL::IRParameter::Make(&v226, (uint64_t *)&v251);
  v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v93, "minimum_compute_type", (uint64_t *)&v251);
  v95 = v251;
  v251 = 0;
  if (v95)
    (*((void (**)(void **))*v95 + 1))(v95);
  v96 = (std::__shared_weak_count *)v226.n128_u64[1];
  if (v226.n128_u64[1])
  {
    v97 = (unint64_t *)(v226.n128_u64[1] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v94 + 5) + 32))(*((_QWORD *)v94 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v94 + 5) + 48))(*((_QWORD *)v94 + 5), 1);
  v99 = *a3;
  v100 = (std::__shared_weak_count_vtbl *)v246;
  v224 = v246;
  if (v246)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v100;
  }
  else
  {
    v101 = 0;
  }
  v225 = v101;
  v246 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v99 + 184))(v99, &v224);
  v102 = v225;
  if (v225)
  {
    p_shared_owners = (unint64_t *)&v225->__shared_owners_;
    do
      v104 = __ldaxr(p_shared_owners);
    while (__stlxr(v104 - 1, p_shared_owners));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = *a3;
  v263[0] = &off_1EA99FBD8;
  v263[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceResize;
  v264 = v263;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v105 + 200))(v105, v263);
  v106 = v264;
  if (v264 == v263)
  {
    v107 = 4;
    v106 = v263;
  }
  else
  {
    if (!v264)
      goto LABEL_128;
    v107 = 5;
  }
  (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_128:
  MIL::Validation::TensorDTypeConstraints::Make(&v251);
  v108 = v251;
  std::string::basic_string[abi:ne180100]<0>(v220, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v220, 0, (uint64_t *)&Scalar);
  v222 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v223 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v218, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v108 + 3))(v108, &v222, v218);
  if (v219 < 0)
    operator delete(v218[0]);
  v111 = v223;
  if (v223)
  {
    v112 = (unint64_t *)&v223->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v221 < 0)
    operator delete(v220[0]);
  v115 = v251;
  std::string::basic_string[abi:ne180100]<0>(v214, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v214, 0, (uint64_t *)&Scalar);
  v216 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v217 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v212, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v115 + 3))(v115, &v216, v212);
  if (v213 < 0)
    operator delete(v212[0]);
  v118 = v217;
  if (v217)
  {
    v119 = (unint64_t *)&v217->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  if (v215 < 0)
    operator delete(v214[0]);
  v122 = v251;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v210 = Scalar;
  if (Scalar)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = Scalar;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v211 = v123;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v208, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v122 + 3))(v122, &v210, v208);
  if (v209 < 0)
    operator delete(v208[0]);
  v125 = v211;
  if (v211)
  {
    v126 = (unint64_t *)&v211->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = Scalar;
  Scalar = 0;
  if (v128)
    (*((void (**)(std::__shared_weak_count_vtbl *))v128->~__shared_weak_count + 1))(v128);
  v129 = *a3;
  v206 = v251;
  if (v251)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = v251;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = (std::__shared_weak_count_vtbl *)v131;
  }
  else
  {
    v130 = 0;
  }
  v207 = v130;
  v251 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v129 + 56))(v129, &v206);
  v132 = v207;
  if (v207)
  {
    v133 = (unint64_t *)&v207->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v251;
  v251 = 0;
  if (v135)
    (*((void (**)(void **))*v135 + 1))(v135);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v251);
  v136 = v251;
  std::string::basic_string[abi:ne180100]<0>(v202, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v202, 0, (uint64_t *)&Scalar);
  v204 = Scalar;
  if (Scalar)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = Scalar;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v205 = v137;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v136 + 3))(v136, &v204, 0, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v139 = v205;
  if (v205)
  {
    v140 = (unint64_t *)&v205->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = Scalar;
  Scalar = 0;
  if (v142)
    (*((void (**)(std::__shared_weak_count_vtbl *))v142->~__shared_weak_count + 1))(v142);
  if (v203 < 0)
    operator delete(v202[0]);
  v143 = *a3;
  v198 = v251;
  if (v251)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = v251;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = (std::__shared_weak_count_vtbl *)v145;
  }
  else
  {
    v144 = 0;
  }
  v199 = v144;
  v251 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v143 + 56))(v143, &v198);
  v146 = v199;
  if (v199)
  {
    v147 = (unint64_t *)&v199->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v251;
  v251 = 0;
  if (v149)
    (*((void (**)(void **))*v149 + 1))(v149);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v150 = __p;
  std::string::basic_string[abi:ne180100]<0>(v194, "interpolation_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v194, 0, (uint64_t *)&v239);
  v196 = v239;
  if (v239)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = (std::__shared_weak_count_vtbl *)v239;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v197 = v151;
  v239 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v251, "LINEAR");
  std::string::basic_string[abi:ne180100]<0>(v254, "NEAREST_NEIGHBOR");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v251, 2);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v150 + 24))(v150, &v196, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v254[i + 2]) < 0)
      operator delete((void *)v254[i]);
  }
  v154 = v197;
  if (v197)
  {
    v155 = (unint64_t *)&v197->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = v239;
  v239 = 0;
  if (v157)
    (*(void (**)(void *))(*(_QWORD *)v157 + 8))(v157);
  if (v195 < 0)
    operator delete(v194[0]);
  v158 = __p;
  std::string::basic_string[abi:ne180100]<0>(v190, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v190, 0, (uint64_t *)&v239);
  v192 = v239;
  if (v239)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = (std::__shared_weak_count_vtbl *)v239;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v193 = v159;
  v239 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v251, "ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v254, "DEFAULT");
  std::string::basic_string[abi:ne180100]<0>(v255, "OFFSET_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v256, "STRICT_ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v257, "UNALIGN_CORNERS");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v251, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v158 + 24))(v158, &v192, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v257[j + 2]) < 0)
      operator delete((void *)v257[j]);
  }
  v162 = v193;
  if (v193)
  {
    v163 = (unint64_t *)&v193->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = v239;
  v239 = 0;
  if (v165)
    (*(void (**)(void *))(*(_QWORD *)v165 + 8))(v165);
  if (v191 < 0)
    operator delete(v190[0]);
  v166 = __p;
  std::string::basic_string[abi:ne180100]<0>(v186, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v186, 1, (uint64_t *)&v239);
  v188 = v239;
  if (v239)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = (std::__shared_weak_count_vtbl *)v239;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v189 = v167;
  v239 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v251, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v254, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v255, "int16");
  std::string::basic_string[abi:ne180100]<0>(v256, "int32");
  std::string::basic_string[abi:ne180100]<0>(v257, "int8");
  std::string::basic_string[abi:ne180100]<0>(v258, "uint16");
  std::string::basic_string[abi:ne180100]<0>(v259, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v251, 7);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v166 + 24))(v166, &v188, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -21; k -= 3)
  {
    if (SHIBYTE(v259[k + 2]) < 0)
      operator delete((void *)v259[k]);
  }
  v170 = v189;
  if (v189)
  {
    v171 = (unint64_t *)&v189->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = v239;
  v239 = 0;
  if (v173)
    (*(void (**)(void *))(*(_QWORD *)v173 + 8))(v173);
  if (v187 < 0)
    operator delete(v186[0]);
  v174 = *a3;
  v184 = __p;
  if (__p)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = (std::__shared_weak_count_vtbl *)__p;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v185 = v175;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v174 + 56))(v174, &v184);
  v177 = v185;
  if (v185)
  {
    v178 = (unint64_t *)&v185->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = __p;
  __p = 0;
  if (v180)
    (*(void (**)(void *))(*(_QWORD *)v180 + 8))(v180);
  if (v246)
  {
    v181 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v246);
    MEMORY[0x1E0C023A0](v181, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v235, 0);
  result = (uint64_t)v250;
  if (v250)
  {
    v183 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v250);
    return MEMORY[0x1E0C023A0](v183, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08E62F4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x270];
  STACK[0x270] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x288], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2B0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateMatMul(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  int v7;
  MIL::IRValueType *v8;
  uint64_t v9;
  int v10;
  MIL::IRValueType *OutputType;
  uint64_t v12;
  int v13;
  uint64_t ParameterValue;
  uint64_t v15;
  uint64_t *LocationPtr;
  void *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  const void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *__p[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  int v44;

  std::string::basic_string[abi:ne180100]<0>(&v40, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
  if (SHIBYTE(v41) < 0)
    operator delete(v40);
  std::string::basic_string[abi:ne180100]<0>(&v40, "y");
  v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v9 = MIL::IRValueType::AsTensorType(v8);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  if (SHIBYTE(v41) < 0)
    operator delete(v40);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  v12 = MIL::IRValueType::AsTensorType(OutputType);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  std::string::basic_string[abi:ne180100]<0>(&v40, "x");
  ParameterValue = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&v40, 0);
  if (SHIBYTE(v41) < 0)
    operator delete(v40);
  std::string::basic_string[abi:ne180100]<0>(&v40, "y");
  v15 = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&v40, 0);
  if (SHIBYTE(v41) < 0)
    operator delete(v40);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  if ((ParameterValue != 0) != (v15 == 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "Input x");
    std::string::basic_string[abi:ne180100]<0>(__p, "input y");
    if (v37 < 0)
      operator delete(__p[0]);
    if (v39 < 0)
      operator delete(v38[0]);
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v40))
    {
      if (v7 == v13)
      {
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
      }
      else
      {
        v18 = LocationPtr[1];
        v34 = *LocationPtr;
        v35 = (std::__shared_weak_count *)v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        std::string::basic_string[abi:ne180100]<0>(v32, "Output must have the same data type as the inputs x and y.");
        MIL::ValidationResult::ValidationResult(a2, &v34, 315, v32);
        if (v33 < 0)
          operator delete(v32[0]);
        v21 = v35;
        if (v35)
        {
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
    }
    else
    {
      *(_OWORD *)(a2 + 8) = v41;
      v41 = 0uLL;
      *(_OWORD *)(a2 + 24) = v42;
      *(_QWORD *)(a2 + 40) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_QWORD *)a2 = &off_1EA99F170;
      *(_DWORD *)(a2 + 48) = v44;
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v40);
    return;
  }
  if (ParameterValue)
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "Non-const input y");
    std::string::basic_string[abi:ne180100]<0>(v28, "output");
    if (v29 < 0)
      operator delete(v28[0]);
    if (v31 < 0)
    {
      v17 = (void *)v30[0];
LABEL_28:
      operator delete(v17);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "Non-const input x");
    std::string::basic_string[abi:ne180100]<0>(v24, "output");
    if (v25 < 0)
      operator delete(v24[0]);
    if (v27 < 0)
    {
      v17 = v26[0];
      goto LABEL_28;
    }
  }
}

void sub_1E08E6DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a38 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v52 - 136));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::`anonymous namespace'::ValidateDtypesAreSame(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, const void **a4@<X3>, uint64_t a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string v25;
  std::string v26;
  void *__p[2];
  std::string::size_type v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  if (a2 == a3)
  {
    MIL::ValidationResult::ValidationResult(a6);
  }
  else
  {
    v9 = (std::__shared_weak_count *)a1[1];
    v29 = *a1;
    v30 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (*((char *)a4 + 23) >= 0)
      v12 = *((unsigned __int8 *)a4 + 23);
    else
      v12 = (size_t)a4[1];
    v13 = &v25;
    std::string::basic_string[abi:ne180100]((uint64_t)&v25, v12 + 5);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v25.__r_.__value_.__r.__words[0];
    if (v12)
    {
      if (*((char *)a4 + 23) >= 0)
        v14 = a4;
      else
        v14 = *a4;
      memmove(v13, v14, v12);
    }
    strcpy((char *)v13 + v12, " and ");
    v15 = *(char *)(a5 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)a5;
    else
      v16 = *(const std::string::value_type **)a5;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a5 + 23);
    else
      v17 = *(_QWORD *)(a5 + 8);
    v18 = std::string::append(&v25, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v26, " must have the same data type.");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v28 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a6, &v29, 315, __p);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v22 = v30;
    if (v30)
    {
      v23 = (unint64_t *)&v30->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
}

void sub_1E08E70A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 72);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceMatMul(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRValueType *v9;
  const void *SingleValue;
  int v11;
  const void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int v19;
  void (****v20)(MIL::MILContextImpl *__hidden);
  int v21;
  uint64_t v22;
  uint64_t *v23;
  void *exception;
  __int128 v25;
  MIL::IRTensorValueType *v26;
  MIL::IRTensorValueType *v27;
  void (**v28)(MIL::ValidationResult *__hidden);
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *__p;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int v41;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  v27 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "y");
  v9 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  v26 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v9);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_x");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  v11 = MIL::IRValue::GetScalar<BOOL>(SingleValue);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_y");
  v12 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  v13 = MIL::IRValue::GetScalar<BOOL>(v12);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  v14 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "y");
  v15 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  v16 = v15 == 0;
  v17 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v27 + 88))(v27);
  v18 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v26 + 88))(v26);
  v19 = v18;
  if ((v14 != 0) == v16)
  {
    if (v14)
      v17 = v18;
    v20 = a1;
    v21 = v11;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "Input x");
    std::string::basic_string[abi:ne180100]<0>(v33, "input y");
    v20 = a1;
    v21 = v11;
    if (v34 < 0)
      operator delete(v33[0]);
    if (v36 < 0)
      operator delete(v35[0]);
    if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
    {
      exception = __cxa_allocate_exception(0x48uLL);
      v25 = v38;
      v38 = 0uLL;
      v29 = v25;
      v30 = v39;
      v31 = v40;
      v39 = 0uLL;
      v40 = 0;
      v28 = &off_1EA99F170;
      v32 = v41;
      MIL::ValidationError::ValidationError(exception, &v28);
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
  }
  MIL::ValueTypeInferenceUtils::GetMatmulOutShape(v20, v27, v26, v21, v13, (unint64_t *)&__p);
  v22 = MIL::IRTensorValueType::MakeWithShape(*v20, v17, (uint64_t)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v23 = (uint64_t *)operator new(8uLL);
  *a4 = v23;
  *v23++ = v22;
  a4[1] = v23;
  a4[2] = v23;
  if (__p)
  {
    *(_QWORD *)&v38 = __p;
    operator delete(__p);
  }
}

void sub_1E08E7410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a12);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a31);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Linear::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  void **v72;
  char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  char **v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _OWORD *v92;
  unsigned __int8 *v93;
  void **v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  void **v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  void **v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  void **v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  void **v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void **v141;
  void **v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count_vtbl *v148;
  void **v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count_vtbl *v155;
  void **v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count_vtbl *v162;
  void **v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count_vtbl *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  void **v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void **v176;
  void *v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count_vtbl *v179;
  uint64_t i;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t result;
  uint64_t v194;
  void *v195;
  std::__shared_weak_count *v196;
  void *v197[2];
  char v198;
  void *v199;
  std::__shared_weak_count *v200;
  void **v201;
  std::__shared_weak_count *v202;
  void *v203[2];
  char v204;
  void *v205[2];
  char v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  void *v209[2];
  char v210;
  void *v211[2];
  char v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  void *v215[2];
  char v216;
  void *v217[2];
  char v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  void *v221[2];
  char v222;
  void *v223[2];
  char v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  void **v227;
  std::__shared_weak_count *v228;
  void *v229[2];
  char v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  void *v233[2];
  char v234;
  void *v235[2];
  char v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  void *v239[2];
  char v240;
  void *v241[2];
  char v242;
  std::__shared_weak_count_vtbl *v243;
  std::__shared_weak_count *v244;
  void *v245[2];
  char v246;
  void *v247[2];
  char v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  void *v251;
  std::__shared_weak_count *v252;
  __n128 v253;
  __int128 v254;
  __int128 v255;
  void *v256[2];
  uint64_t v257;
  void *v258;
  void *v259;
  _QWORD *v260;
  __n128 v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  char **v265;
  __n128 v266;
  __n128 v267;
  void *__p;
  void *v269;
  _QWORD *v270;
  void *v271;
  void *v272;
  _QWORD *v273;
  __n128 v274;
  _QWORD *v275;
  void **v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD v279[3];
  uint64_t v280[3];
  uint64_t v281[3];
  _QWORD v282[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v285;
  _QWORD v286[3];
  _QWORD *v287;
  _BYTE v288[24];
  _BYTE *v289;
  _BYTE v290[24];
  _BYTE *v291;
  uint64_t v292;

  v292 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v275 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v285 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v276 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = operator new(0x10uLL);
  v273 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v271 = v12;
  v272 = v12 + 2;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v271);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = operator new(0x10uLL);
  v270 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v269 = v15 + 2;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v276, 3, &v274);
  MIL::IRParameter::Make(&v274, (uint64_t *)&v258);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v258);
  v16 = v258;
  v258 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v274.n128_u64[1];
  if (v274.n128_u64[1])
  {
    v18 = (unint64_t *)(v274.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v269 = __p;
    operator delete(__p);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v275;
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v23->__on_zero_shared;
  v285 = (uint64_t)&v23->__on_zero_shared;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  v23->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  Scalar = v23;
  v276 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = operator new(0x10uLL);
  v273 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v271 = v26;
  v272 = v26 + 2;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v271);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(0x10uLL);
  v270 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  __p = v29;
  v269 = v29 + 2;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v276, 3, &v267);
  MIL::IRParameter::Make(&v267, (uint64_t *)&v258);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v20, "weight", (uint64_t *)&v258);
  v31 = v258;
  v258 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v267.n128_u64[1];
  if (v267.n128_u64[1])
  {
    v33 = (unint64_t *)(v267.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v269 = __p;
    operator delete(__p);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v35 = v275;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v37;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  p_on_zero_shared = (uint64_t)&v37->~__shared_weak_count_0;
  v285 = (uint64_t)&v37->~__shared_weak_count_0;
  v276 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = operator new(8uLL);
  v271 = v39;
  *v39 = v38;
  v273 = v39 + 1;
  v272 = v39 + 1;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v271);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = operator new(8uLL);
  __p = v41;
  *v41 = v40;
  v270 = v41 + 1;
  v269 = v41 + 1;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v276, 3, &v266);
  MIL::IRParameter::Make(&v266, (uint64_t *)&v258);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "bias", (uint64_t *)&v258);
  v43 = v258;
  v258 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v266.n128_u64[1];
  if (v266.n128_u64[1])
  {
    v45 = (unint64_t *)(v266.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (__p)
  {
    v269 = __p;
    operator delete(__p);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v265 = 0;
  v47 = operator new();
  *(_QWORD *)v47 = 0;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  v276 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v265, (void **)v47);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v276, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v265, 1uLL);
  v48 = v265;
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v271 = v50;
  *v50 = v49;
  v273 = v50 + 1;
  v272 = v50 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v271);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  __p = v52;
  *v52 = v51;
  v270 = v52 + 1;
  v269 = v52 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v258 = v54;
  *v54 = v53;
  v260 = v54 + 1;
  v259 = v54 + 1;
  v285 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v258);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v261);
  MIL::IRParameter::Make(&v261, &v262);
  v55 = v262;
  v263 = v262;
  if (v262)
  {
    v56 = (_QWORD *)operator new();
    v57 = v262;
    *v56 = &unk_1EA99F888;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  v264 = v56;
  v262 = 0;
  v58 = v48[2];
  v59 = v48[1];
  if (v59 >= v58)
  {
    v61 = (v59 - *v48) >> 4;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v63 = v58 - *v48;
    if (v63 >> 3 > v62)
      v62 = v63 >> 3;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
      v64 = 0xFFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    v279[1] = v48 + 2;
    v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v48 + 2), v64);
    v67 = (uint64_t *)&v65[16 * v61];
    *v67 = v55;
    v67[1] = (uint64_t)v56;
    v264 = 0;
    v263 = 0;
    v69 = *v48;
    v68 = v48[1];
    if (v68 == *v48)
    {
      v72 = (void **)v48[1];
      v70 = &v65[16 * v61];
    }
    else
    {
      v70 = &v65[16 * v61];
      do
      {
        v71 = *((_OWORD *)v68 - 1);
        v68 -= 16;
        *((_OWORD *)v70 - 1) = v71;
        v70 -= 16;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
      }
      while (v68 != v69);
      v72 = (void **)*v48;
      v68 = v48[1];
    }
    v60 = (char *)(v67 + 2);
    *v48 = v70;
    v277 = (uint64_t)v72;
    v48[1] = (char *)(v67 + 2);
    v278 = (uint64_t)v68;
    v73 = v48[2];
    v48[2] = &v65[16 * v66];
    v279[0] = v73;
    v276 = v72;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v276);
  }
  else
  {
    *(_QWORD *)v59 = v55;
    *((_QWORD *)v59 + 1) = v56;
    v60 = v59 + 16;
    v264 = 0;
    v263 = 0;
  }
  v48[1] = v60;
  v74 = v262;
  v262 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v261.n128_u64[1];
  if (v261.n128_u64[1])
  {
    v76 = (unint64_t *)(v261.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v258)
  {
    v259 = v258;
    operator delete(v258);
  }
  if (__p)
  {
    v269 = __p;
    operator delete(__p);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  *(_OWORD *)v256 = *(_OWORD *)a2;
  v257 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v78 = (uint64_t)v275;
  *(_QWORD *)&v255 = v275;
  if (v275)
  {
    v79 = (_QWORD *)operator new();
    *v79 = &unk_1EA99F8E8;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v78;
  }
  else
  {
    v79 = 0;
  }
  *((_QWORD *)&v255 + 1) = v79;
  v275 = 0;
  *(_QWORD *)&v254 = v265;
  if (v265)
  {
    v80 = (_QWORD *)operator new();
    v81 = v265;
    *v80 = &unk_1EA99F948;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v81;
  }
  else
  {
    v80 = 0;
  }
  *((_QWORD *)&v254 + 1) = v80;
  v265 = 0;
  v291 = 0;
  v289 = 0;
  MIL::IROperator::Make((__int128 *)v256, &v255, &v254, (uint64_t)v290, (uint64_t)v288, a3);
  v82 = v289;
  if (v289 == v288)
  {
    v83 = 4;
    v82 = v288;
  }
  else
  {
    if (!v289)
      goto LABEL_81;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_81:
  v84 = v291;
  if (v291 == v290)
  {
    v85 = 4;
    v84 = v290;
    goto LABEL_85;
  }
  if (v291)
  {
    v85 = 5;
LABEL_85:
    (*(void (**)(void))(*v84 + 8 * v85))();
  }
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
  if (*((_QWORD *)&v254 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
  if (*((_QWORD *)&v255 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v255 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (SHIBYTE(v257) < 0)
    operator delete(v256[0]);
  v271 = 0;
  v92 = (_OWORD *)operator new();
  *v92 = 0u;
  v92[1] = 0u;
  *((_DWORD *)v92 + 8) = 1065353216;
  v271 = v92;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v253);
  MIL::IRParameter::Make(&v253, (uint64_t *)&v276);
  v93 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v92, "minimum_compute_type", (uint64_t *)&v276);
  v94 = v276;
  v276 = 0;
  if (v94)
    (*((void (**)(void **))*v94 + 1))(v94);
  v95 = (std::__shared_weak_count *)v253.n128_u64[1];
  if (v253.n128_u64[1])
  {
    v96 = (unint64_t *)(v253.n128_u64[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v93 + 5) + 32))(*((_QWORD *)v93 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v93 + 5) + 48))(*((_QWORD *)v93 + 5), 1);
  v98 = *a3;
  v99 = (std::__shared_weak_count_vtbl *)v271;
  v251 = v271;
  if (v271)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v99;
  }
  else
  {
    v100 = 0;
  }
  v252 = v100;
  v271 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v98 + 184))(v98, &v251);
  v101 = v252;
  if (v252)
  {
    p_shared_owners = (unint64_t *)&v252->__shared_owners_;
    do
      v103 = __ldaxr(p_shared_owners);
    while (__stlxr(v103 - 1, p_shared_owners));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = *a3;
  v286[0] = &off_1EA99FBD8;
  v286[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceLinear;
  v287 = v286;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v104 + 200))(v104, v286);
  v105 = v287;
  if (v287 == v286)
  {
    v106 = 4;
    v105 = v286;
  }
  else
  {
    if (!v287)
      goto LABEL_118;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_118:
  MIL::Validation::TensorDTypeConstraints::Make(&v276);
  v107 = v276;
  std::string::basic_string[abi:ne180100]<0>(v247, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v247, 0, (uint64_t *)&Scalar);
  v249 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v250 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v245, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v107 + 3))(v107, &v249, v245);
  if (v246 < 0)
    operator delete(v245[0]);
  v110 = v250;
  if (v250)
  {
    v111 = (unint64_t *)&v250->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  if (v248 < 0)
    operator delete(v247[0]);
  v114 = v276;
  std::string::basic_string[abi:ne180100]<0>(v241, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v241, 0, (uint64_t *)&Scalar);
  v243 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v244 = v115;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v239, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v114 + 3))(v114, &v243, v239);
  if (v240 < 0)
    operator delete(v239[0]);
  v117 = v244;
  if (v244)
  {
    v118 = (unint64_t *)&v244->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*((void (**)(std::__shared_weak_count_vtbl *))v120->~__shared_weak_count + 1))(v120);
  if (v242 < 0)
    operator delete(v241[0]);
  v121 = v276;
  std::string::basic_string[abi:ne180100]<0>(v235, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v235, 1, (uint64_t *)&Scalar);
  v237 = Scalar;
  if (Scalar)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = Scalar;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v238 = v122;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v233, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v121 + 3))(v121, &v237, v233);
  if (v234 < 0)
    operator delete(v233[0]);
  v124 = v238;
  if (v238)
  {
    v125 = (unint64_t *)&v238->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = Scalar;
  Scalar = 0;
  if (v127)
    (*((void (**)(std::__shared_weak_count_vtbl *))v127->~__shared_weak_count + 1))(v127);
  if (v236 < 0)
    operator delete(v235[0]);
  v128 = v276;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v231 = Scalar;
  if (Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v232 = v129;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v229, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v128 + 3))(v128, &v231, v229);
  if (v230 < 0)
    operator delete(v229[0]);
  v131 = v232;
  if (v232)
  {
    v132 = (unint64_t *)&v232->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = Scalar;
  Scalar = 0;
  if (v134)
    (*((void (**)(std::__shared_weak_count_vtbl *))v134->~__shared_weak_count + 1))(v134);
  v135 = *a3;
  v227 = v276;
  if (v276)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = v276;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = (std::__shared_weak_count_vtbl *)v137;
  }
  else
  {
    v136 = 0;
  }
  v228 = v136;
  v276 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v135 + 56))(v135, &v227);
  v138 = v228;
  if (v228)
  {
    v139 = (unint64_t *)&v228->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v276;
  v276 = 0;
  if (v141)
    (*((void (**)(void **))*v141 + 1))(v141);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v276);
  v142 = v276;
  std::string::basic_string[abi:ne180100]<0>(v223, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v223, 0, (uint64_t *)&Scalar);
  v225 = Scalar;
  if (Scalar)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = Scalar;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v226 = v143;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v221, "D_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v142 + 3))(v142, &v225, -1, v221);
  if (v222 < 0)
    operator delete(v221[0]);
  v145 = v226;
  if (v226)
  {
    v146 = (unint64_t *)&v226->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = Scalar;
  Scalar = 0;
  if (v148)
    (*((void (**)(std::__shared_weak_count_vtbl *))v148->~__shared_weak_count + 1))(v148);
  if (v224 < 0)
    operator delete(v223[0]);
  v149 = v276;
  std::string::basic_string[abi:ne180100]<0>(v217, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v217, 0, (uint64_t *)&Scalar);
  v219 = Scalar;
  if (Scalar)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = Scalar;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v220 = v150;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v215, "D_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v149 + 3))(v149, &v219, 0, v215);
  if (v216 < 0)
    operator delete(v215[0]);
  v152 = v220;
  if (v220)
  {
    v153 = (unint64_t *)&v220->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = Scalar;
  Scalar = 0;
  if (v155)
    (*((void (**)(std::__shared_weak_count_vtbl *))v155->~__shared_weak_count + 1))(v155);
  if (v218 < 0)
    operator delete(v217[0]);
  v156 = v276;
  std::string::basic_string[abi:ne180100]<0>(v211, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v211, 0, (uint64_t *)&Scalar);
  v213 = Scalar;
  if (Scalar)
  {
    v157 = (std::__shared_weak_count *)operator new();
    v158 = Scalar;
    v157->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v157->__shared_owners_ = 0;
    v157->__shared_weak_owners_ = 0;
    v157[1].__vftable = v158;
  }
  else
  {
    v157 = 0;
  }
  v214 = v157;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v209, "D_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v156 + 3))(v156, &v213, 1, v209);
  if (v210 < 0)
    operator delete(v209[0]);
  v159 = v214;
  if (v214)
  {
    v160 = (unint64_t *)&v214->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = Scalar;
  Scalar = 0;
  if (v162)
    (*((void (**)(std::__shared_weak_count_vtbl *))v162->~__shared_weak_count + 1))(v162);
  if (v212 < 0)
    operator delete(v211[0]);
  v163 = v276;
  std::string::basic_string[abi:ne180100]<0>(v205, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v205, 1, (uint64_t *)&Scalar);
  v207 = Scalar;
  if (Scalar)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = Scalar;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v208 = v164;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v203, "D_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v163 + 3))(v163, &v207, 0, v203);
  if (v204 < 0)
    operator delete(v203[0]);
  v166 = v208;
  if (v208)
  {
    v167 = (unint64_t *)&v208->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = Scalar;
  Scalar = 0;
  if (v169)
    (*((void (**)(std::__shared_weak_count_vtbl *))v169->~__shared_weak_count + 1))(v169);
  if (v206 < 0)
    operator delete(v205[0]);
  v170 = *a3;
  v201 = v276;
  if (v276)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = v276;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = (std::__shared_weak_count_vtbl *)v172;
  }
  else
  {
    v171 = 0;
  }
  v202 = v171;
  v276 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v170 + 56))(v170, &v201);
  v173 = v202;
  if (v202)
  {
    v174 = (unint64_t *)&v202->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = v276;
  v276 = 0;
  if (v176)
    (*((void (**)(void **))*v176 + 1))(v176);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v177 = __p;
  std::string::basic_string[abi:ne180100]<0>(v197, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v197, 1, (uint64_t *)&v258);
  v199 = v258;
  if (v258)
  {
    v178 = (std::__shared_weak_count *)operator new();
    v179 = (std::__shared_weak_count_vtbl *)v258;
    v178->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v178->__shared_owners_ = 0;
    v178->__shared_weak_owners_ = 0;
    v178[1].__vftable = v179;
  }
  else
  {
    v178 = 0;
  }
  v200 = v178;
  v258 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v276, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v279, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v280, "int32");
  std::string::basic_string[abi:ne180100]<0>(v281, "int8");
  std::string::basic_string[abi:ne180100]<0>(v282, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v276, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v177 + 24))(v177, &v199, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v282[i + 2]) < 0)
      operator delete((void *)v282[i]);
  }
  v181 = v200;
  if (v200)
  {
    v182 = (unint64_t *)&v200->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = v258;
  v258 = 0;
  if (v184)
    (*(void (**)(void *))(*(_QWORD *)v184 + 8))(v184);
  if (v198 < 0)
    operator delete(v197[0]);
  v185 = *a3;
  v195 = __p;
  if (__p)
  {
    v186 = (std::__shared_weak_count *)operator new();
    v187 = (std::__shared_weak_count_vtbl *)__p;
    v186->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v186->__shared_owners_ = 0;
    v186->__shared_weak_owners_ = 0;
    v186[1].__vftable = v187;
  }
  else
  {
    v186 = 0;
  }
  v196 = v186;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v185 + 56))(v185, &v195);
  v188 = v196;
  if (v196)
  {
    v189 = (unint64_t *)&v196->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = __p;
  __p = 0;
  if (v191)
    (*(void (**)(void *))(*(_QWORD *)v191 + 8))(v191);
  if (v271)
  {
    v192 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v271);
    MEMORY[0x1E0C023A0](v192, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v265, 0);
  result = (uint64_t)v275;
  if (v275)
  {
    v194 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v275);
    return MEMORY[0x1E0C023A0](v194, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08E8CCC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x300];
  STACK[0x300] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x318], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2D8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x340], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::MatMul::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  void **v71;
  char *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char **v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _OWORD *v91;
  unsigned __int8 *v92;
  void **v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  void **v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count_vtbl *v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void **v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void **v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count_vtbl *v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count_vtbl *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void **v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void **v154;
  void *v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  uint64_t i;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t result;
  uint64_t v172;
  void *v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  void *v177;
  std::__shared_weak_count *v178;
  void **v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  void *v183[2];
  char v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  void *v187[2];
  char v188;
  void *v189[2];
  char v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  void **v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  void *v199[2];
  char v200;
  void *v201[2];
  char v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  void *v205[2];
  char v206;
  void *v207[2];
  char v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  void *v211;
  std::__shared_weak_count *v212;
  __n128 v213;
  __int128 v214;
  __int128 v215;
  void *v216[2];
  uint64_t v217;
  void *v218;
  void *v219;
  _QWORD *v220;
  __n128 v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  char **v225;
  __n128 v226;
  __n128 v227;
  __n128 v228;
  void *__p;
  void *v230;
  _QWORD *v231;
  void *v232;
  void *v233;
  _QWORD *v234;
  __n128 v235;
  _QWORD *v236;
  void **v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD v240[3];
  uint64_t v241[3];
  uint64_t v242[3];
  _QWORD v243[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v246;
  _QWORD v247[3];
  _QWORD *v248;
  _BYTE v249[24];
  _BYTE *v250;
  _QWORD v251[3];
  _QWORD *v252;
  uint64_t v253;

  v253 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v236 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v246 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v237 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v234 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v232 = v12;
  v233 = v12 + 2;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v232);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v231 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v230 = v15 + 2;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v237, 3, &v235);
  MIL::IRParameter::Make(&v235, (uint64_t *)&v218);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v218);
  v16 = v218;
  v218 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v235.n128_u64[1];
  if (v235.n128_u64[1])
  {
    v18 = (unint64_t *)(v235.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v236;
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v23->__on_zero_shared;
  v246 = (uint64_t)&v23->__on_zero_shared;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  v23->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  Scalar = v23;
  v237 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(0x10uLL);
  v234 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v232 = v26;
  v233 = v26 + 2;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v232);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v231 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  __p = v29;
  v230 = v29 + 2;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v237, 3, &v228);
  MIL::IRParameter::Make(&v228, (uint64_t *)&v218);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v20, "y", (uint64_t *)&v218);
  v30 = v218;
  v218 = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v228.n128_u64[1];
  if (v228.n128_u64[1])
  {
    v32 = (unint64_t *)(v228.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v34 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v227);
  MIL::IRParameter::Make(&v227, (uint64_t *)&v237);
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v34, "transpose_x", (uint64_t *)&v237);
  v36 = v237;
  v237 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = (std::__shared_weak_count *)v227.n128_u64[1];
  if (v227.n128_u64[1])
  {
    v38 = (unint64_t *)(v227.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  v40 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v226);
  MIL::IRParameter::Make(&v226, (uint64_t *)&v237);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v40, "transpose_y", (uint64_t *)&v237);
  v42 = v237;
  v237 = 0;
  if (v42)
    (*((void (**)(void **))*v42 + 1))(v42);
  v43 = (std::__shared_weak_count *)v226.n128_u64[1];
  if (v226.n128_u64[1])
  {
    v44 = (unint64_t *)(v226.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  v225 = 0;
  v46 = operator new();
  *(_QWORD *)v46 = 0;
  *(_QWORD *)(v46 + 8) = 0;
  *(_QWORD *)(v46 + 16) = 0;
  v237 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v225, (void **)v46);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v237, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v225, 1uLL);
  v47 = v225;
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v232 = v49;
  *v49 = v48;
  v234 = v49 + 1;
  v233 = v49 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v232);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  __p = v51;
  *v51 = v50;
  v231 = v51 + 1;
  v230 = v51 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  v218 = v53;
  *v53 = v52;
  v219 = v53 + 1;
  v220 = v53 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v218);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v221);
  MIL::IRParameter::Make(&v221, &v222);
  v54 = v222;
  v223 = v222;
  if (v222)
  {
    v55 = (_QWORD *)operator new();
    v56 = v222;
    *v55 = &unk_1EA99F888;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v56;
  }
  else
  {
    v55 = 0;
  }
  v224 = v55;
  v222 = 0;
  v57 = v47[2];
  v58 = v47[1];
  if (v58 >= v57)
  {
    v60 = (v58 - *v47) >> 4;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v62 = v57 - *v47;
    if (v62 >> 3 > v61)
      v61 = v62 >> 3;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
      v63 = 0xFFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    v240[1] = v47 + 2;
    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v47 + 2), v63);
    v66 = (uint64_t *)&v64[16 * v60];
    *v66 = v54;
    v66[1] = (uint64_t)v55;
    v224 = 0;
    v223 = 0;
    v68 = *v47;
    v67 = v47[1];
    if (v67 == *v47)
    {
      v71 = (void **)v47[1];
      v69 = &v64[16 * v60];
    }
    else
    {
      v69 = &v64[16 * v60];
      do
      {
        v70 = *((_OWORD *)v67 - 1);
        v67 -= 16;
        *((_OWORD *)v69 - 1) = v70;
        v69 -= 16;
        *(_QWORD *)v67 = 0;
        *((_QWORD *)v67 + 1) = 0;
      }
      while (v67 != v68);
      v71 = (void **)*v47;
      v67 = v47[1];
    }
    v59 = (char *)(v66 + 2);
    *v47 = v69;
    v238 = (uint64_t)v71;
    v47[1] = (char *)(v66 + 2);
    v239 = (uint64_t)v67;
    v72 = v47[2];
    v47[2] = &v64[16 * v65];
    v240[0] = v72;
    v237 = v71;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v237);
  }
  else
  {
    *(_QWORD *)v58 = v54;
    *((_QWORD *)v58 + 1) = v55;
    v59 = v58 + 16;
    v224 = 0;
    v223 = 0;
  }
  v47[1] = v59;
  v73 = v222;
  v222 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = (std::__shared_weak_count *)v221.n128_u64[1];
  if (v221.n128_u64[1])
  {
    v75 = (unint64_t *)(v221.n128_u64[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  *(_OWORD *)v216 = *(_OWORD *)a2;
  v217 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v77 = (uint64_t)v236;
  *(_QWORD *)&v215 = v236;
  if (v236)
  {
    v78 = (_QWORD *)operator new();
    *v78 = &unk_1EA99F8E8;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v77;
  }
  else
  {
    v78 = 0;
  }
  *((_QWORD *)&v215 + 1) = v78;
  v236 = 0;
  *(_QWORD *)&v214 = v225;
  if (v225)
  {
    v79 = (_QWORD *)operator new();
    v80 = v225;
    *v79 = &unk_1EA99F948;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v80;
  }
  else
  {
    v79 = 0;
  }
  *((_QWORD *)&v214 + 1) = v79;
  v225 = 0;
  v251[0] = &unk_1EA99FAC8;
  v251[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateMatMul;
  v252 = v251;
  v250 = 0;
  MIL::IROperator::Make((__int128 *)v216, &v215, &v214, (uint64_t)v251, (uint64_t)v249, a3);
  v81 = v250;
  if (v250 == v249)
  {
    v82 = 4;
    v81 = v249;
  }
  else
  {
    if (!v250)
      goto LABEL_82;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_82:
  v83 = v252;
  if (v252 == v251)
  {
    v84 = 4;
    v83 = v251;
    goto LABEL_86;
  }
  if (v252)
  {
    v84 = 5;
LABEL_86:
    (*(void (**)(void))(*v83 + 8 * v84))();
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
  if (*((_QWORD *)&v214 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (SHIBYTE(v217) < 0)
    operator delete(v216[0]);
  v232 = 0;
  v91 = (_OWORD *)operator new();
  *v91 = 0u;
  v91[1] = 0u;
  *((_DWORD *)v91 + 8) = 1065353216;
  v232 = v91;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v213);
  MIL::IRParameter::Make(&v213, (uint64_t *)&v237);
  v92 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v91, "minimum_compute_type", (uint64_t *)&v237);
  v93 = v237;
  v237 = 0;
  if (v93)
    (*((void (**)(void **))*v93 + 1))(v93);
  v94 = (std::__shared_weak_count *)v213.n128_u64[1];
  if (v213.n128_u64[1])
  {
    v95 = (unint64_t *)(v213.n128_u64[1] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v92 + 5) + 32))(*((_QWORD *)v92 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v92 + 5) + 48))(*((_QWORD *)v92 + 5), 1);
  v97 = *a3;
  v98 = (std::__shared_weak_count_vtbl *)v232;
  v211 = v232;
  if (v232)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v98;
  }
  else
  {
    v99 = 0;
  }
  v212 = v99;
  v232 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v97 + 184))(v97, &v211);
  v100 = v212;
  if (v212)
  {
    p_shared_owners = (unint64_t *)&v212->__shared_owners_;
    do
      v102 = __ldaxr(p_shared_owners);
    while (__stlxr(v102 - 1, p_shared_owners));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = *a3;
  v247[0] = &off_1EA99FBD8;
  v247[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceMatMul;
  v248 = v247;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v103 + 200))(v103, v247);
  v104 = v248;
  if (v248 == v247)
  {
    v105 = 4;
    v104 = v247;
  }
  else
  {
    if (!v248)
      goto LABEL_119;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_119:
  MIL::Validation::TensorDTypeConstraints::Make(&v237);
  v106 = v237;
  std::string::basic_string[abi:ne180100]<0>(v207, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v207, 0, (uint64_t *)&Scalar);
  v209 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v210 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v205, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v106 + 3))(v106, &v209, v205);
  if (v206 < 0)
    operator delete(v205[0]);
  v109 = v210;
  if (v210)
  {
    v110 = (unint64_t *)&v210->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*((void (**)(std::__shared_weak_count_vtbl *))v112->~__shared_weak_count + 1))(v112);
  if (v208 < 0)
    operator delete(v207[0]);
  v113 = v237;
  std::string::basic_string[abi:ne180100]<0>(v201, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v201, 0, (uint64_t *)&Scalar);
  v203 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v204 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v199, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v113 + 3))(v113, &v203, v199);
  if (v200 < 0)
    operator delete(v199[0]);
  v116 = v204;
  if (v204)
  {
    v117 = (unint64_t *)&v204->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
  if (v202 < 0)
    operator delete(v201[0]);
  v120 = v237;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v197 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v198 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "V");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v120 + 3))(v120, &v197, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v123 = v198;
  if (v198)
  {
    v124 = (unint64_t *)&v198->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*((void (**)(std::__shared_weak_count_vtbl *))v126->~__shared_weak_count + 1))(v126);
  v127 = *a3;
  v193 = v237;
  if (v237)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = v237;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = (std::__shared_weak_count_vtbl *)v129;
  }
  else
  {
    v128 = 0;
  }
  v194 = v128;
  v237 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v127 + 56))(v127, &v193);
  v130 = v194;
  if (v194)
  {
    v131 = (unint64_t *)&v194->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v237;
  v237 = 0;
  if (v133)
    (*((void (**)(void **))*v133 + 1))(v133);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v237);
  v134 = v237;
  std::string::basic_string[abi:ne180100]<0>(v189, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v189, 0, (uint64_t *)&Scalar);
  v191 = Scalar;
  if (Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v192 = v135;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v187, "XD");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v134 + 3))(v134, &v191, 0, v187);
  if (v188 < 0)
    operator delete(v187[0]);
  v137 = v192;
  if (v192)
  {
    v138 = (unint64_t *)&v192->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = Scalar;
  Scalar = 0;
  if (v140)
    (*((void (**)(std::__shared_weak_count_vtbl *))v140->~__shared_weak_count + 1))(v140);
  if (v190 < 0)
    operator delete(v189[0]);
  v141 = v237;
  std::string::basic_string[abi:ne180100]<0>(v183, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v183, 0, (uint64_t *)&Scalar);
  v185 = Scalar;
  if (Scalar)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = Scalar;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v186 = v142;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v181, "YD");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v141 + 3))(v141, &v185, 0, v181);
  if (v182 < 0)
    operator delete(v181[0]);
  v144 = v186;
  if (v186)
  {
    v145 = (unint64_t *)&v186->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = Scalar;
  Scalar = 0;
  if (v147)
    (*((void (**)(std::__shared_weak_count_vtbl *))v147->~__shared_weak_count + 1))(v147);
  if (v184 < 0)
    operator delete(v183[0]);
  v148 = *a3;
  v179 = v237;
  if (v237)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = v237;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = (std::__shared_weak_count_vtbl *)v150;
  }
  else
  {
    v149 = 0;
  }
  v180 = v149;
  v237 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v148 + 56))(v148, &v179);
  v151 = v180;
  if (v180)
  {
    v152 = (unint64_t *)&v180->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = v237;
  v237 = 0;
  if (v154)
    (*((void (**)(void **))*v154 + 1))(v154);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v155 = __p;
  std::string::basic_string[abi:ne180100]<0>(v175, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v175, 1, (uint64_t *)&v218);
  v177 = v218;
  if (v218)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = (std::__shared_weak_count_vtbl *)v218;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v178 = v156;
  v218 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v237, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v240, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v241, "int32");
  std::string::basic_string[abi:ne180100]<0>(v242, "int8");
  std::string::basic_string[abi:ne180100]<0>(v243, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v237, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v155 + 24))(v155, &v177, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v243[i + 2]) < 0)
      operator delete((void *)v243[i]);
  }
  v159 = v178;
  if (v178)
  {
    v160 = (unint64_t *)&v178->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = v218;
  v218 = 0;
  if (v162)
    (*(void (**)(void *))(*(_QWORD *)v162 + 8))(v162);
  if (v176 < 0)
    operator delete(v175[0]);
  v163 = *a3;
  v173 = __p;
  if (__p)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = (std::__shared_weak_count_vtbl *)__p;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v174 = v164;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v163 + 56))(v163, &v173);
  v166 = v174;
  if (v174)
  {
    v167 = (unint64_t *)&v174->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = __p;
  __p = 0;
  if (v169)
    (*(void (**)(void *))(*(_QWORD *)v169 + 8))(v169);
  if (v232)
  {
    v170 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v232);
    MEMORY[0x1E0C023A0](v170, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v225, 0);
  result = (uint64_t)v236;
  if (v236)
  {
    v172 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v236);
    return MEMORY[0x1E0C023A0](v172, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08EA8CC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x250];
  STACK[0x250] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x268], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x218], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorBufferToTensor(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorBufferToTensor(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E08EAF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorToTensorBuffer(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorToTensorBuffer(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08EB010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferencePixelBufferToTensor(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferencePixelBufferToTensor(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08EB0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorToPixelBuffer(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorToPixelBuffer(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08EB140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateCircularBufferToTensor(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRMemoryLayoutValueType *v6;
  MIL::IRCircularBufferValueType *v7;
  MIL::IRValueType *OutputType;
  uint64_t v9;
  uint64_t SliceShape;
  uint64_t v11;
  size_t v12;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *__p;
  char v25;

  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(ParameterType);
  v7 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v6);
  if (v25 < 0)
    operator delete(__p);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  v9 = MIL::IRValueType::AsTensorType(OutputType);
  SliceShape = MIL::IRCircularBufferValueType::GetSliceShape(v7);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v12 = *(_QWORD *)(SliceShape + 8) - *(_QWORD *)SliceShape;
  if (v12 == *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 && !memcmp(*(const void **)SliceShape, *(const void **)v11, v12))
  {
    MIL::ValidationResult::ValidationResult(a2);
  }
  else
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v14 = (std::__shared_weak_count *)LocationPtr[1];
    v22 = *LocationPtr;
    v23 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v20, "Output shape must match the input shape.");
    MIL::ValidationResult::ValidationResult(a2, &v22, 313, v20);
    if (v21 < 0)
      operator delete(v20[0]);
    v17 = v23;
    if (v23)
    {
      v18 = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1E08EB2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceCircularBufferToTensor(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRMemoryLayoutValueType *v7;
  MIL::IRCircularBufferValueType *v8;
  uint64_t SliceShape;
  void (***v10)(MIL::MILContextImpl *__hidden);
  int DataType;
  uint64_t v12;
  uint64_t *v13;
  void *__p;
  void *v15;
  uint64_t v16;

  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(SingleValueType);
  v8 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v7);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  SliceShape = MIL::IRCircularBufferValueType::GetSliceShape(v8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)SliceShape, *(_QWORD *)(SliceShape + 8), (uint64_t)(*(_QWORD *)(SliceShape + 8) - *(_QWORD *)SliceShape) >> 3);
  v10 = *a1;
  DataType = MIL::IRCircularBufferValueType::GetDataType(v8);
  v12 = MIL::IRTensorValueType::MakeWithShape(v10, DataType, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = (uint64_t *)operator new(8uLL);
  *a3 = v13;
  *v13++ = v12;
  a3[1] = v13;
  a3[2] = v13;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_1E08EB3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateTensorToCircularBuffer(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  MIL::IRValueType *v7;
  MIL::IRTensorValueType *v8;
  MIL::IRValueType *v9;
  MIL::IRTensorValueType *v10;
  MIL::IRValueType *OutputType;
  MIL::IRMemoryLayoutValueType *v12;
  MIL::IRCircularBufferValueType *v13;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t SliceShape;
  size_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const void *ParameterValue;
  unint64_t v32;
  const void *v33;
  uint64_t v34;
  MIL::IRValue *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53[2];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57[2];
  void *v58[2];
  char v59;
  int v60;
  uint64_t Data;
  unint64_t v62;
  void *__p[2];
  char v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  void *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;

  std::string::basic_string[abi:ne180100]<0>(&v69, "input");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v70) < 0)
    operator delete(v69);
  std::string::basic_string[abi:ne180100]<0>(&v69, "strides");
  v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v70) < 0)
    operator delete(v69);
  std::string::basic_string[abi:ne180100]<0>(&v69, "interleave_factors");
  v9 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v10 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v9);
  if (SHIBYTE(v70) < 0)
    operator delete(v69);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  v12 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(OutputType);
  v13 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v12);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v15 = (std::__shared_weak_count *)LocationPtr[1];
  v67 = *LocationPtr;
  v68 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors(v6, v8, v10, (uint64_t)&v67, (MIL::ValidationResult *)&v69);
  v18 = v68;
  if (v68)
  {
    v19 = (unint64_t *)&v68->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v69))
    goto LABEL_49;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  SliceShape = MIL::IRCircularBufferValueType::GetSliceShape(v13);
  v23 = *(_QWORD *)(v21 + 8) - *(_QWORD *)v21;
  if (v23 != *(_QWORD *)(SliceShape + 8) - *(_QWORD *)SliceShape
    || memcmp(*(const void **)v21, *(const void **)SliceShape, v23))
  {
    v24 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v25 = (std::__shared_weak_count *)v24[1];
    v65 = *v24;
    v66 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Output shape must match the input shape.");
    MIL::ValidationResult::ValidationResult(a2, &v65, 313, __p);
    if (v64 < 0)
      operator delete(__p[0]);
    v28 = v66;
    if (v66)
    {
      v29 = (unint64_t *)&v66->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      goto LABEL_26;
    }
    goto LABEL_50;
  }
  std::string::basic_string[abi:ne180100]<0>(v58, "wrap_dim");
  ParameterValue = (const void *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v58, 0);
  v32 = MIL::IRValue::GetScalar<long long>(ParameterValue);
  if (v59 < 0)
    operator delete(v58[0]);
  std::string::basic_string[abi:ne180100]<0>(v58, "slice_wrap_dim_size");
  v33 = (const void *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v58, 0);
  v34 = MIL::IRValue::GetScalar<long long>(v33);
  if (v59 < 0)
    operator delete(v58[0]);
  std::string::basic_string[abi:ne180100]<0>(v58, "shape");
  v35 = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v58, 0);
  if (v59 < 0)
    operator delete(v58[0]);
  v36 = (uint64_t *)MIL::IRValue::AsTensor(v35);
  Data = MIL::IRTensorValue::GetDataView<long long>(v36);
  v62 = v37;
  v38 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v39 = (std::__shared_weak_count *)v38[1];
  v57[0] = *v38;
  v57[1] = (uint64_t)v39;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  MIL::MILResult::operator=((uint64_t)&v69, (uint64_t)v58);
  v73 = v60;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v58);
  if (v39)
  {
    v42 = (unint64_t *)&v39->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v69))
  {
LABEL_49:
    *(_OWORD *)(a2 + 8) = v70;
    v70 = 0uLL;
    *(_OWORD *)(a2 + 24) = v71;
    *(_QWORD *)(a2 + 40) = v72;
    v71 = 0uLL;
    v72 = 0;
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v73;
    goto LABEL_50;
  }
  if (!v62)
  {
LABEL_48:
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
    goto LABEL_50;
  }
  v44 = 0;
  while (1)
  {
    v45 = *(_QWORD *)MIL::Util::Span<long long const,18446744073709551615ul>::At(&Data, v44);
    v46 = (_QWORD *)MIL::IRCircularBufferValueType::GetSliceShape(v13);
    if (v44 >= (uint64_t)(v46[1] - *v46) >> 3)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v46 + 8 * v44) + 16))(*(_QWORD *)(*v46 + 8 * v44));
    if (v45 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 48))(v47))
      break;
    if (++v44 >= v62)
      goto LABEL_48;
  }
  v48 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v49 = (std::__shared_weak_count *)v48[1];
  v55 = *v48;
  v56 = v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  std::string::basic_string[abi:ne180100]<0>(v53, "Buffer shape is smaller than slice shape dimension.");
  MIL::ValidationResult::ValidationResult(a2, &v55, 315, v53);
  if (v54 < 0)
    operator delete(v53[0]);
  v28 = v56;
  if (v56)
  {
    v52 = (unint64_t *)&v56->__shared_owners_;
    do
      v30 = __ldaxr(v52);
    while (__stlxr(v30 - 1, v52));
LABEL_26:
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_50:
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v69);
}

void sub_1E08EB8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  uint64_t v37;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v37 - 120));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::`anonymous namespace'::ValidateWrapDim(unint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  if ((a1 & 0x8000000000000000) != 0 || a3[1] <= a1)
  {
    v13 = (std::__shared_weak_count *)a4[1];
    v23 = *a4;
    v24 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "Wrap dimension must be between 0 and num of dimensions - 1.");
    MIL::ValidationResult::ValidationResult(a5, &v23, 315, v21);
    if (v22 < 0)
      operator delete(v21[0]);
    v10 = v24;
    if (v24)
    {
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v12 = __ldaxr(v16);
      while (__stlxr(v12 - 1, v16));
      goto LABEL_22;
    }
  }
  else
  {
    if ((a2 & 0x8000000000000000) == 0
      && *(_QWORD *)MIL::Util::Span<long long const,18446744073709551615ul>::At(a3, a1) >= a2)
    {
      MIL::ValidationResult::ValidationResult(a5);
      return;
    }
    v7 = (std::__shared_weak_count *)a4[1];
    v19 = *a4;
    v20 = v7;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Buffer shape is smaller than slice shape dimension.");
    MIL::ValidationResult::ValidationResult(a5, &v19, 315, __p);
    if (v18 < 0)
      operator delete(__p[0]);
    v10 = v20;
    if (v20)
    {
      v11 = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
LABEL_22:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1E08EBB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorToCircularBuffer(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  MIL::IRValueType *v10;
  uint64_t v11;
  MIL::IRValueType *v12;
  MIL::IRTensorValueType *v13;
  MIL::IRValueType *v14;
  MIL::IRTensorValueType *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  MIL::IRValue *SingleValue;
  uint64_t *v23;
  _BYTE *v24;
  MIL::MILContext **v25;
  MIL::IRValue *v26;
  uint64_t *v27;
  _BYTE *v28;
  MIL::MILContext **v29;
  MIL::IRValue *v30;
  uint64_t *v31;
  uint64_t v32;
  MIL::MILContext *v33;
  MIL::MILContext *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD **v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void (***v45)(MIL::MILContextImpl *__hidden);
  MIL::MILContext **v46;
  uint64_t v47;
  MIL::IRValue *v48;
  uint64_t *v49;
  uint64_t v50;
  MIL::IRValue *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void (***v58)(MIL::MILContextImpl *__hidden);
  MIL::MILContext **v59;
  uint64_t Int64Scalar;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void (***v65)(MIL::MILContextImpl *__hidden);
  unsigned __int8 *v66;
  uint64_t UInt8Scalar;
  _QWORD *v68;
  uint64_t v69;
  void (***v70)(MIL::MILContextImpl *__hidden);
  int v71;
  uint64_t v72;
  uint64_t *v73;
  void *exception;
  void *v75;
  void *v76;
  _BYTE *v77;
  void *v78;
  _BYTE *v79;
  _QWORD v80[2];
  _QWORD v81[2];
  void *Data;
  _BYTE *v83;
  std::string v84[2];
  int v85;
  uint64_t v86[2];
  void *__p[2];
  __int128 v88;
  int v89;
  int v90;
  _QWORD v91[2];
  std::string v92[2];
  int v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  void *v96[2];
  char v97;
  int v98;

  std::string::basic_string[abi:ne180100]<0>(v96, "input");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v96);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v97 < 0)
    operator delete(v96[0]);
  std::string::basic_string[abi:ne180100]<0>(v96, "shape");
  v10 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v96);
  v11 = MIL::IRValueType::AsTensorType(v10);
  if (v97 < 0)
    operator delete(v96[0]);
  std::string::basic_string[abi:ne180100]<0>(v96, "strides");
  v12 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v96);
  v13 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v12);
  if (v97 < 0)
    operator delete(v96[0]);
  std::string::basic_string[abi:ne180100]<0>(v96, "interleave_factors");
  v14 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v96);
  v15 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v14);
  if (v97 < 0)
    operator delete(v96[0]);
  v16 = (std::__shared_weak_count *)a2[1];
  v94 = *a2;
  v95 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors(v9, v13, v15, (uint64_t)&v94, (MIL::ValidationResult *)v96);
  v19 = v95;
  if (v95)
  {
    v20 = (unint64_t *)&v95->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v96))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v92, (uint64_t)v96);
    v92[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v93 = v98;
    MIL::ValidationError::ValidationError(exception, v92);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "wrap_dim");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  v23 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  Data = (void *)MIL::IRTensorValue::GetDataView<long long>(v23);
  v83 = v24;
  v25 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(&Data, 0);
  if (SBYTE7(v88) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "slice_wrap_dim_size");
  v26 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  v27 = (uint64_t *)MIL::IRValue::AsTensor(v26);
  Data = (void *)MIL::IRTensorValue::GetDataView<long long>(v27);
  v83 = v28;
  v29 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(&Data, 0);
  if (SBYTE7(v88) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  v30 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  v31 = (uint64_t *)MIL::IRValue::AsTensor(v30);
  v91[0] = MIL::IRTensorValue::GetDataView<long long>(v31);
  v91[1] = v32;
  if (SBYTE7(v88) < 0)
    operator delete(__p[0]);
  v33 = *v25;
  v34 = *v29;
  v35 = *a2;
  v36 = (std::__shared_weak_count *)a2[1];
  v86[0] = v35;
  v86[1] = (uint64_t)v36;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  MIL::MILResult::operator=((uint64_t)v96, (uint64_t)__p);
  v98 = v90;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (v36)
  {
    v39 = (unint64_t *)&v36->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v96))
  {
    v75 = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v84, (uint64_t)v96);
    v84[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v85 = v98;
    MIL::ValidationError::ValidationError(v75, v84);
  }
  v41 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
  if (v41[1] == *v41)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v42 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v41 + 16))(**v41);
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42);
  std::vector<MIL::IRDimension const*>::vector(&Data, v43);
  if (v83 != Data)
  {
    v44 = 0;
    do
    {
      v45 = *a1;
      v46 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(v91, v44);
      v47 = MIL::IRConstantDimension::Make(v45, *v46);
      *((_QWORD *)Data + v44++) = v47;
    }
    while (v44 < (v83 - (_BYTE *)Data) >> 3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "strides");
  v48 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  v49 = (uint64_t *)MIL::IRValue::AsTensor(v48);
  v81[0] = MIL::IRTensorValue::GetDataView<long long>(v49);
  v81[1] = v50;
  if (SBYTE7(v88) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "interleave_factors");
  v51 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  v52 = (void *)MIL::IRValue::AsTensor(v51);
  v80[0] = MIL::IRTensorValue::GetDataView<unsigned char>(v52);
  v80[1] = v53;
  if (SBYTE7(v88) < 0)
    operator delete(__p[0]);
  v54 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v13 + 96))(v13);
  if (*(_QWORD *)(v54 + 8) == *(_QWORD *)v54)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v55 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v54);
  v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 48))(v55);
  std::vector<MIL::IRProperty const*>::vector(&v78, v56);
  if (v79 != v78)
  {
    v57 = 0;
    do
    {
      v58 = *a1;
      v59 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(v81, v57);
      Int64Scalar = MIL::IRConstantProperty::MakeInt64Scalar(v58, *v59);
      *((_QWORD *)v78 + v57++) = Int64Scalar;
    }
    while (v57 < (v79 - (_BYTE *)v78) >> 3);
  }
  v61 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v15 + 96))(v15);
  if (*(_QWORD *)(v61 + 8) == *(_QWORD *)v61)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v62 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v61);
  v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 48))(v62);
  std::vector<MIL::IRProperty const*>::vector(&v76, v63);
  if (v77 != v76)
  {
    v64 = 0;
    do
    {
      v65 = *a1;
      v66 = (unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(v80, v64);
      UInt8Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(v65, (MIL::MILContext *)*v66);
      *((_QWORD *)v76 + v64++) = UInt8Scalar;
    }
    while (v64 < (v77 - (_BYTE *)v76) >> 3);
  }
  v68 = (_QWORD *)MIL::IRConstantProperty::MakeInt64Scalar(*a1, *v25);
  v69 = MIL::IRConstantDimension::Make(*a1, *v29);
  v70 = *a1;
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  *(_OWORD *)__p = 0u;
  v88 = 0u;
  v89 = 1065353216;
  v72 = MIL::IRCircularBufferValueType::MakeWithShape(v70, v71, (uint64_t)&Data, (uint64_t)&v78, (uint64_t)&v76, v68, v69, (uint64_t *)__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v73 = (uint64_t *)operator new(8uLL);
  *a4 = v73;
  *v73++ = v72;
  a4[1] = v73;
  a4[2] = v73;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if (Data)
  {
    v83 = Data;
    operator delete(Data);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v96);
}

void sub_1E08EC220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a22);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v36 - 144));
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::CircularBufferToTensor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  void *v73;
  _QWORD *v74;
  void *v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v88;
  __int128 v89;
  _QWORD *v90;
  uint64_t v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  void *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  uint64_t v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void **v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void **v133;
  uint64_t result;
  uint64_t v135;
  void **v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  void *v144[2];
  char v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  __n128 v152;
  __int128 v153;
  __int128 v154;
  int v155;
  void *__p;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  __int128 v165;
  __int128 v166;
  int v167;
  void *v168;
  void *v169;
  _QWORD *v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  __int128 v177;
  __int128 v178;
  int v179;
  void *v180;
  void *v181;
  _QWORD *v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  void *v186;
  void *v187;
  _QWORD *v188;
  __int128 v189;
  __int128 v190;
  int v191;
  void *v192;
  void *v193;
  _QWORD *v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  __int128 v201;
  __int128 v202;
  int v203;
  void *v204;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  void *v210;
  void *v211;
  _QWORD *v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  void *v216;
  void *v217;
  _QWORD *v218;
  void *v219;
  void *v220;
  _QWORD *v221;
  __n128 v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  _QWORD *v227;
  _QWORD v228[3];
  _QWORD *v229;
  _BYTE v230[24];
  _BYTE *v231;
  _QWORD v232[3];
  _QWORD *v233;
  void **v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

  v240 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v224 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v219 = v8;
  *v8 = v7;
  v221 = v8 + 1;
  v220 = v8 + 1;
  v9 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v216 = v10;
  *v10 = v9;
  v218 = v10 + 1;
  v217 = v10 + 1;
  v11 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v213 = v12;
  *v12 = v11;
  v215 = v12 + 1;
  v214 = v12 + 1;
  v13 = (_QWORD *)MIL::IRUnknownProperty::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v225 = 0u;
  v226 = 0u;
  LODWORD(v227) = 1065353216;
  v234 = (void **)MIL::IRCircularBufferValueType::MakeWithShape(a1, 9, (uint64_t)&v219, (uint64_t)&v216, (uint64_t)&v213, v13, v14, (uint64_t *)&v225);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v210 = v16;
  *v16 = v15;
  v212 = v16 + 1;
  v211 = v16 + 1;
  v17 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v207 = v18;
  *v18 = v17;
  v209 = v18 + 1;
  v208 = v18 + 1;
  v19 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v204 = v20;
  *v20 = v19;
  v206 = v20 + 1;
  v205 = v20 + 1;
  v21 = (_QWORD *)MIL::IRUnknownProperty::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v201 = 0u;
  v202 = 0u;
  v203 = 1065353216;
  v235 = MIL::IRCircularBufferValueType::MakeWithShape(a1, 10, (uint64_t)&v210, (uint64_t)&v207, (uint64_t)&v204, v21, v22, (uint64_t *)&v201);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v198 = v24;
  *v24 = v23;
  v200 = v24 + 1;
  v199 = v24 + 1;
  v25 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v195 = v26;
  *v26 = v25;
  v197 = v26 + 1;
  v196 = v26 + 1;
  v27 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v192 = v28;
  *v28 = v27;
  v194 = v28 + 1;
  v193 = v28 + 1;
  v29 = (_QWORD *)MIL::IRUnknownProperty::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v189 = 0u;
  v190 = 0u;
  v191 = 1065353216;
  v236 = MIL::IRCircularBufferValueType::MakeWithShape(a1, 14, (uint64_t)&v198, (uint64_t)&v195, (uint64_t)&v192, v29, v30, (uint64_t *)&v189);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v186 = v32;
  *v32 = v31;
  v188 = v32 + 1;
  v187 = v32 + 1;
  v33 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v183 = v34;
  *v34 = v33;
  v184 = v34 + 1;
  v185 = v34 + 1;
  v35 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v180 = v36;
  *v36 = v35;
  v181 = v36 + 1;
  v182 = v36 + 1;
  v37 = (_QWORD *)MIL::IRUnknownProperty::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v177 = 0u;
  v178 = 0u;
  v179 = 1065353216;
  v237 = MIL::IRCircularBufferValueType::MakeWithShape(a1, 15, (uint64_t)&v186, (uint64_t)&v183, (uint64_t)&v180, v37, v38, (uint64_t *)&v177);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v174 = v40;
  *v40 = v39;
  v175 = v40 + 1;
  v176 = v40 + 1;
  v41 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v171 = v42;
  *v42 = v41;
  v172 = v42 + 1;
  v173 = v42 + 1;
  v43 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v168 = v44;
  *v44 = v43;
  v169 = v44 + 1;
  v170 = v44 + 1;
  v45 = (_QWORD *)MIL::IRUnknownProperty::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v165 = 0u;
  v166 = 0u;
  v167 = 1065353216;
  v238 = MIL::IRCircularBufferValueType::MakeWithShape(a1, 4, (uint64_t)&v174, (uint64_t)&v171, (uint64_t)&v168, v45, v46, (uint64_t *)&v165);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v162 = v48;
  *v48 = v47;
  v163 = v48 + 1;
  v164 = v48 + 1;
  v49 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v159 = v50;
  *v50 = v49;
  v160 = v50 + 1;
  v161 = v50 + 1;
  v51 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  __p = v52;
  *v52 = v51;
  v157 = v52 + 1;
  v158 = v52 + 1;
  v53 = (_QWORD *)MIL::IRUnknownProperty::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v153 = 0u;
  v154 = 0u;
  v155 = 1065353216;
  v239 = MIL::IRCircularBufferValueType::MakeWithShape(a1, 5, (uint64_t)&v162, (uint64_t)&v159, (uint64_t)&__p, v53, v54, (uint64_t *)&v153);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 6, &v222);
  MIL::IRParameter::Make(&v222, &v223);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", &v223);
  v55 = v223;
  v223 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v222.n128_u64[1];
  if (v222.n128_u64[1])
  {
    v57 = (unint64_t *)(v222.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v153);
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v165);
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v177);
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v189);
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v201);
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v225);
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  v213 = 0;
  v59 = operator new();
  *(_QWORD *)v59 = 0;
  *(_QWORD *)(v59 + 8) = 0;
  *(_QWORD *)(v59 + 16) = 0;
  v234 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v213, (void **)v59);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v234, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v213, 1uLL);
  v60 = v213;
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  *(_QWORD *)&v201 = v62;
  *v62 = v61;
  *(_QWORD *)&v202 = v62 + 1;
  *((_QWORD *)&v201 + 1) = v62 + 1;
  v234 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v201);
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  *(_QWORD *)&v189 = v64;
  *v64 = v63;
  *(_QWORD *)&v190 = v64 + 1;
  *((_QWORD *)&v189 + 1) = v64 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v189);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  *(_QWORD *)&v177 = v66;
  *v66 = v65;
  *((_QWORD *)&v177 + 1) = v66 + 1;
  *(_QWORD *)&v178 = v66 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v177);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  *(_QWORD *)&v165 = v68;
  *v68 = v67;
  *((_QWORD *)&v165 + 1) = v68 + 1;
  *(_QWORD *)&v166 = v68 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v165);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  *(_QWORD *)&v153 = v70;
  *v70 = v69;
  *((_QWORD *)&v153 + 1) = v70 + 1;
  *(_QWORD *)&v154 = v70 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v153);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v219 = v72;
  *v72 = v71;
  v221 = v72 + 1;
  v220 = v72 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v219);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 6, &v152);
  MIL::IRParameter::Make(&v152, (uint64_t *)&v210);
  v73 = v210;
  v216 = v210;
  if (v210)
  {
    v74 = (_QWORD *)operator new();
    v75 = v210;
    *v74 = &unk_1EA99F888;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  v217 = v74;
  v210 = 0;
  v76 = v60[2];
  v77 = (_QWORD *)v60[1];
  if ((unint64_t)v77 >= v76)
  {
    v79 = ((uint64_t)v77 - *v60) >> 4;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v81 = v76 - *v60;
    if (v81 >> 3 > v80)
      v80 = v81 >> 3;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
      v82 = 0xFFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    v227 = v60 + 2;
    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v60 + 2), v82);
    v85 = &v83[16 * v79];
    *(_QWORD *)v85 = v73;
    *((_QWORD *)v85 + 1) = v74;
    v217 = 0;
    v216 = 0;
    v87 = (_QWORD *)*v60;
    v86 = (_QWORD *)v60[1];
    if (v86 == (_QWORD *)*v60)
    {
      v90 = (_QWORD *)v60[1];
      v88 = &v83[16 * v79];
    }
    else
    {
      v88 = &v83[16 * v79];
      do
      {
        v89 = *((_OWORD *)v86 - 1);
        v86 -= 2;
        *((_OWORD *)v88 - 1) = v89;
        v88 -= 16;
        *v86 = 0;
        v86[1] = 0;
      }
      while (v86 != v87);
      v90 = (_QWORD *)*v60;
      v86 = (_QWORD *)v60[1];
    }
    v78 = v85 + 16;
    *v60 = v88;
    *(_QWORD *)&v225 = v90;
    *((_QWORD *)&v225 + 1) = v90;
    v60[1] = v85 + 16;
    *(_QWORD *)&v226 = v86;
    v91 = v60[2];
    v60[2] = &v83[16 * v84];
    *((_QWORD *)&v226 + 1) = v91;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v225);
  }
  else
  {
    *v77 = v73;
    v77[1] = v74;
    v78 = v77 + 2;
    v217 = 0;
    v216 = 0;
  }
  v60[1] = v78;
  v92 = v210;
  v210 = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  v93 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v94 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if ((_QWORD)v153)
  {
    *((_QWORD *)&v153 + 1) = v153;
    operator delete((void *)v153);
  }
  if ((_QWORD)v165)
  {
    *((_QWORD *)&v165 + 1) = v165;
    operator delete((void *)v165);
  }
  if ((_QWORD)v177)
  {
    *((_QWORD *)&v177 + 1) = v177;
    operator delete((void *)v177);
  }
  if ((_QWORD)v189)
  {
    *((_QWORD *)&v189 + 1) = v189;
    operator delete((void *)v189);
  }
  if ((_QWORD)v201)
  {
    *((_QWORD *)&v201 + 1) = v201;
    operator delete((void *)v201);
  }
  v150 = *(_OWORD *)a2;
  v151 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v96 = v224;
  *(_QWORD *)&v149 = v224;
  if (v224)
  {
    v97 = (_QWORD *)operator new();
    *v97 = &unk_1EA99F8E8;
    v97[1] = 0;
    v97[2] = 0;
    v97[3] = v96;
  }
  else
  {
    v97 = 0;
  }
  *((_QWORD *)&v149 + 1) = v97;
  v224 = 0;
  *(_QWORD *)&v148 = v213;
  if (v213)
  {
    v98 = (_QWORD *)operator new();
    v99 = v213;
    *v98 = &unk_1EA99F948;
    v98[1] = 0;
    v98[2] = 0;
    v98[3] = v99;
  }
  else
  {
    v98 = 0;
  }
  *((_QWORD *)&v148 + 1) = v98;
  v213 = 0;
  v232[0] = &unk_1EA99FAC8;
  v232[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateCircularBufferToTensor;
  v233 = v232;
  v231 = 0;
  MIL::IROperator::Make(&v150, &v149, &v148, (uint64_t)v232, (uint64_t)v230, a3);
  v100 = v231;
  if (v231 == v230)
  {
    v101 = 4;
    v100 = v230;
  }
  else
  {
    if (!v231)
      goto LABEL_91;
    v101 = 5;
  }
  (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_91:
  v102 = v233;
  if (v233 == v232)
  {
    v103 = 4;
    v102 = v232;
    goto LABEL_95;
  }
  if (v233)
  {
    v103 = 5;
LABEL_95:
    (*(void (**)(void))(*v102 + 8 * v103))();
  }
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
  if (*((_QWORD *)&v148 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  if (SHIBYTE(v151) < 0)
    operator delete((void *)v150);
  v110 = *a3;
  v228[0] = &off_1EA99FBD8;
  v228[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceCircularBufferToTensor;
  v229 = v228;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v110 + 200))(v110, v228);
  v111 = v229;
  if (v229 == v228)
  {
    v112 = 4;
    v111 = v228;
  }
  else
  {
    if (!v229)
      goto LABEL_113;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_113:
  MIL::Validation::TensorDTypeConstraints::Make(&v234);
  v113 = v234;
  std::string::basic_string[abi:ne180100]<0>(v144, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v144, 0, (uint64_t *)&v225);
  v146 = v225;
  if ((_QWORD)v225)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v225;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v147 = v114;
  *(_QWORD *)&v225 = 0;
  std::string::basic_string[abi:ne180100]<0>(v142, "T");
  (*((void (**)(void **, uint64_t *, void **))*v113 + 3))(v113, &v146, v142);
  if (v143 < 0)
    operator delete(v142[0]);
  v116 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v118 = __ldaxr(p_shared_owners);
    while (__stlxr(v118 - 1, p_shared_owners));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v225;
  *(_QWORD *)&v225 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  if (v145 < 0)
    operator delete(v144[0]);
  v120 = v234;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v225);
  v140 = v225;
  if ((_QWORD)v225)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v225;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v141 = v121;
  *(_QWORD *)&v225 = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "T");
  (*((void (**)(void **, uint64_t *, void **))*v120 + 3))(v120, &v140, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v123 = v141;
  if (v141)
  {
    v124 = (unint64_t *)&v141->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v225;
  *(_QWORD *)&v225 = 0;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  v127 = *a3;
  v136 = v234;
  if (v234)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = v234;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = (std::__shared_weak_count_vtbl *)v129;
  }
  else
  {
    v128 = 0;
  }
  v137 = v128;
  v234 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v127 + 56))(v127, &v136);
  v130 = v137;
  if (v137)
  {
    v131 = (unint64_t *)&v137->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v234;
  v234 = 0;
  if (v133)
    (*((void (**)(void **))*v133 + 1))(v133);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v213, 0);
  result = v224;
  if (v224)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v224);
    return MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08ED358(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 120);
  *(_QWORD *)(v2 - 120) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x308], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x368], 0);
  _Unwind_Resume(a1);
}

void sub_1E08ED8A0()
{
  JUMPOUT(0x1E08ED77CLL);
}

void sub_1E08ED8A8()
{
  JUMPOUT(0x1E08ED7B4);
}

void sub_1E08ED8B0()
{
  JUMPOUT(0x1E08ED7ECLL);
}

void sub_1E08ED8B8()
{
  JUMPOUT(0x1E08ED824);
}

void sub_1E08ED8C0()
{
  JUMPOUT(0x1E08ED85CLL);
}

uint64_t MIL::Operators::Common::ios17::PixelBufferToTensor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  char *v73;
  char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char **v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t result;
  uint64_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  void *v164[2];
  char v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  void *v168[2];
  char v169;
  void *v170[2];
  char v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  void *v174[2];
  char v175;
  void *v176[2];
  char v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  __int128 v186;
  __int128 v187;
  void *v188[2];
  uint64_t v189;
  void *v190;
  void *v191;
  _QWORD *v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  void *v199;
  void *v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  _QWORD *v204;
  void *v205;
  void *v206;
  _QWORD *v207;
  __n128 v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  char **v212;
  __n128 v213;
  void *__p;
  void *v215;
  _QWORD *v216;
  __n128 v217;
  _QWORD *v218;
  _QWORD v219[3];
  _QWORD *v220;
  _BYTE v221[24];
  _BYTE *v222;
  _QWORD v223[3];
  _QWORD *v224;
  void *v225;
  void *v226;
  _QWORD *v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  char *v235;
  char *v236;
  char **v237;
  uint64_t v238;

  v238 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v218 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = operator new(0x10uLL);
  *((_QWORD *)&v234 + 1) = v9 + 2;
  v235 = (char *)(v9 + 2);
  *v9 = v7;
  v9[1] = v8;
  *(_QWORD *)&v234 = v9;
  v10 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v10;
  v216 = v11 + 1;
  v215 = v11 + 1;
  v228 = 0u;
  v229 = 0u;
  LODWORD(v230) = 1065353216;
  v225 = (void *)MIL::IRPixelBufferValueType::MakeWithShape(a1, 0x14u, &v234, (uint64_t)&__p, (uint64_t *)&v228);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v225, 1, &v217);
  MIL::IRParameter::Make(&v217, (uint64_t *)&v205);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", (uint64_t *)&v205);
  v12 = v205;
  v205 = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  v13 = (std::__shared_weak_count *)v217.n128_u64[1];
  if (v217.n128_u64[1])
  {
    v14 = (unint64_t *)(v217.n128_u64[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v228);
  if (__p)
  {
    v215 = __p;
    operator delete(__p);
  }
  if ((_QWORD)v234)
  {
    *((_QWORD *)&v234 + 1) = v234;
    operator delete((void *)v234);
  }
  v16 = v218;
  *(_QWORD *)&v234 = MIL::IRTensorValueType::MakeScalar(a1, 14);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 1, &v213);
  MIL::IRParameter::Make(&v213, (uint64_t *)&v228);
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v16, "plane_index", (uint64_t *)&v228);
  v18 = v228;
  *(_QWORD *)&v228 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v213.n128_u64[1];
  if (v213.n128_u64[1])
  {
    v20 = (unint64_t *)(v213.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v17 + 5) + 32))(*((_QWORD *)v17 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v17 + 5) + 48))(*((_QWORD *)v17 + 5), 1);
  v212 = 0;
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)&v228 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v212, (void **)v22);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v228, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v212, 1uLL);
  v23 = v212;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = operator new(0x18uLL);
  v216 = v27 + 3;
  *v27 = v24;
  v27[1] = v25;
  v27[2] = v26;
  __p = v27;
  v215 = v27 + 3;
  *(_QWORD *)&v228 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&__p);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = operator new(0x18uLL);
  v206 = v31 + 3;
  v207 = v31 + 3;
  *v31 = v28;
  v31[1] = v29;
  v31[2] = v30;
  v205 = v31;
  *((_QWORD *)&v228 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v205);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(0x18uLL);
  v226 = v35 + 3;
  v227 = v35 + 3;
  *v35 = v32;
  v35[1] = v33;
  v35[2] = v34;
  v225 = v35;
  *(_QWORD *)&v229 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v225);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = operator new(0x18uLL);
  v203 = v39 + 3;
  v204 = v39 + 3;
  *v39 = v36;
  v39[1] = v37;
  v39[2] = v38;
  v202 = v39;
  *((_QWORD *)&v229 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v202);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x18uLL);
  v200 = v43 + 3;
  v201 = v43 + 3;
  *v43 = v40;
  v43[1] = v41;
  v43[2] = v42;
  v199 = v43;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v199);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = operator new(0x18uLL);
  v197 = v47 + 3;
  v198 = v47 + 3;
  *v47 = v44;
  v47[1] = v45;
  v47[2] = v46;
  v196 = v47;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v196);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = operator new(0x18uLL);
  v194 = v51 + 3;
  v195 = v51 + 3;
  *v51 = v48;
  v51[1] = v49;
  v51[2] = v50;
  v193 = v51;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v193);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = operator new(0x18uLL);
  v191 = v55 + 3;
  v192 = v55 + 3;
  *v55 = v52;
  v55[1] = v53;
  v55[2] = v54;
  v190 = v55;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v190);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v228, 8, &v208);
  MIL::IRParameter::Make(&v208, &v209);
  v56 = v209;
  v210 = v209;
  if (v209)
  {
    v57 = (_QWORD *)operator new();
    v58 = v209;
    *v57 = &unk_1EA99F888;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  v211 = v57;
  v209 = 0;
  v59 = v23[2];
  v60 = v23[1];
  if (v60 >= v59)
  {
    v62 = (v60 - *v23) >> 4;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v64 = v59 - *v23;
    if (v64 >> 3 > v63)
      v63 = v64 >> 3;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
      v65 = 0xFFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    v237 = v23 + 2;
    v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v23 + 2), v65);
    v68 = (uint64_t *)&v66[16 * v62];
    *v68 = v56;
    v68[1] = (uint64_t)v57;
    v211 = 0;
    v210 = 0;
    v70 = *v23;
    v69 = v23[1];
    if (v69 == *v23)
    {
      v73 = v23[1];
      v71 = &v66[16 * v62];
    }
    else
    {
      v71 = &v66[16 * v62];
      do
      {
        v72 = *((_OWORD *)v69 - 1);
        v69 -= 16;
        *((_OWORD *)v71 - 1) = v72;
        v71 -= 16;
        *(_QWORD *)v69 = 0;
        *((_QWORD *)v69 + 1) = 0;
      }
      while (v69 != v70);
      v73 = *v23;
      v69 = v23[1];
    }
    v61 = (char *)(v68 + 2);
    *v23 = v71;
    *(_QWORD *)&v234 = v73;
    *((_QWORD *)&v234 + 1) = v73;
    v23[1] = (char *)(v68 + 2);
    v235 = v69;
    v74 = v23[2];
    v23[2] = &v66[16 * v67];
    v236 = v74;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v234);
  }
  else
  {
    *(_QWORD *)v60 = v56;
    *((_QWORD *)v60 + 1) = v57;
    v61 = v60 + 16;
    v211 = 0;
    v210 = 0;
  }
  v23[1] = v61;
  v75 = v209;
  v209 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v208.n128_u64[1];
  if (v208.n128_u64[1])
  {
    v77 = (unint64_t *)(v208.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v225)
  {
    v226 = v225;
    operator delete(v225);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (__p)
  {
    v215 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v188 = *(_OWORD *)a2;
  v189 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v79 = (uint64_t)v218;
  *(_QWORD *)&v187 = v218;
  if (v218)
  {
    v80 = (_QWORD *)operator new();
    *v80 = &unk_1EA99F8E8;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v79;
  }
  else
  {
    v80 = 0;
  }
  *((_QWORD *)&v187 + 1) = v80;
  v218 = 0;
  *(_QWORD *)&v186 = v212;
  if (v212)
  {
    v81 = (_QWORD *)operator new();
    v82 = v212;
    *v81 = &unk_1EA99F948;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v82;
  }
  else
  {
    v81 = 0;
  }
  *((_QWORD *)&v186 + 1) = v81;
  v212 = 0;
  v223[0] = &unk_1EA99FAC8;
  v223[1] = MIL::Operators::Common::ios17::CustomValidators::ValidatePixelBufferToTensor;
  v224 = v223;
  v222 = 0;
  MIL::IROperator::Make((__int128 *)v188, &v187, &v186, (uint64_t)v223, (uint64_t)v221, a3);
  v83 = v222;
  if (v222 == v221)
  {
    v84 = 4;
    v83 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_70;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_70:
  v85 = v224;
  if (v224 == v223)
  {
    v86 = 4;
    v85 = v223;
    goto LABEL_74;
  }
  if (v224)
  {
    v86 = 5;
LABEL_74:
    (*(void (**)(void))(*v85 + 8 * v86))();
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (SHIBYTE(v189) < 0)
    operator delete(v188[0]);
  v93 = *a3;
  v219[0] = &off_1EA99FBD8;
  v219[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferencePixelBufferToTensor;
  v220 = v219;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v93 + 200))(v93, v219);
  v94 = v220;
  if (v220 == v219)
  {
    v95 = 4;
    v94 = v219;
  }
  else
  {
    if (!v220)
      goto LABEL_92;
    v95 = 5;
  }
  (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_92:
  MIL::Validation::TensorDTypeConstraints::Make(&v228);
  v96 = v228;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v234);
  v184 = v234;
  if ((_QWORD)v234)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = (std::__shared_weak_count_vtbl *)v234;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v185 = v97;
  *(_QWORD *)&v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "T");
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v96 + 24))(v96, &v184, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v99 = v185;
  if (v185)
  {
    p_shared_owners = (unint64_t *)&v185->__shared_owners_;
    do
      v101 = __ldaxr(p_shared_owners);
    while (__stlxr(v101 - 1, p_shared_owners));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v234;
  *(_QWORD *)&v234 = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  v103 = *a3;
  v180 = v228;
  if ((_QWORD)v228)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = (std::__shared_weak_count_vtbl *)v228;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v181 = v104;
  *(_QWORD *)&v228 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v103 + 56))(v103, &v180);
  v106 = v181;
  if (v181)
  {
    v107 = (unint64_t *)&v181->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v228;
  *(_QWORD *)&v228 = 0;
  if (v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v228);
  v110 = v228;
  std::string::basic_string[abi:ne180100]<0>(v176, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v176, 0, (uint64_t *)&v234);
  v178 = v234;
  if ((_QWORD)v234)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)v234;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v179 = v111;
  *(_QWORD *)&v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v174, "H");
  (*(void (**)(uint64_t, uint64_t *, _QWORD, void **))(*(_QWORD *)v110 + 24))(v110, &v178, 0, v174);
  if (v175 < 0)
    operator delete(v174[0]);
  v113 = v179;
  if (v179)
  {
    v114 = (unint64_t *)&v179->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v234;
  *(_QWORD *)&v234 = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  if (v177 < 0)
    operator delete(v176[0]);
  v117 = v228;
  std::string::basic_string[abi:ne180100]<0>(v170, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v170, 0, (uint64_t *)&v234);
  v172 = v234;
  if ((_QWORD)v234)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = (std::__shared_weak_count_vtbl *)v234;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v173 = v118;
  *(_QWORD *)&v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v168, "W");
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v117 + 24))(v117, &v172, 1, v168);
  if (v169 < 0)
    operator delete(v168[0]);
  v120 = v173;
  if (v173)
  {
    v121 = (unint64_t *)&v173->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v234;
  *(_QWORD *)&v234 = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  if (v171 < 0)
    operator delete(v170[0]);
  v124 = v228;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v234);
  v166 = v234;
  if ((_QWORD)v234)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)v234;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v167 = v125;
  *(_QWORD *)&v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v164, "C");
  (*(void (**)(uint64_t, uint64_t *, _QWORD, void **))(*(_QWORD *)v124 + 24))(v124, &v166, 0, v164);
  if (v165 < 0)
    operator delete(v164[0]);
  v127 = v167;
  if (v167)
  {
    v128 = (unint64_t *)&v167->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v234;
  *(_QWORD *)&v234 = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v131 = v228;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v234);
  v162 = v234;
  if ((_QWORD)v234)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = (std::__shared_weak_count_vtbl *)v234;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v163 = v132;
  *(_QWORD *)&v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "H_OUT");
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v131 + 24))(v131, &v162, 1, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v134 = v163;
  if (v163)
  {
    v135 = (unint64_t *)&v163->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v234;
  *(_QWORD *)&v234 = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  v138 = v228;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v234);
  v158 = v234;
  if ((_QWORD)v234)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = (std::__shared_weak_count_vtbl *)v234;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v159 = v139;
  *(_QWORD *)&v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "W_OUT");
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v138 + 24))(v138, &v158, 2, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v141 = v159;
  if (v159)
  {
    v142 = (unint64_t *)&v159->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = v234;
  *(_QWORD *)&v234 = 0;
  if (v144)
    (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
  v145 = *a3;
  v154 = v228;
  if ((_QWORD)v228)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = (std::__shared_weak_count_vtbl *)v228;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v155 = v146;
  *(_QWORD *)&v228 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v145 + 56))(v145, &v154);
  v148 = v155;
  if (v155)
  {
    v149 = (unint64_t *)&v155->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v228;
  *(_QWORD *)&v228 = 0;
  if (v151)
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v212, 0);
  result = (uint64_t)v218;
  if (v218)
  {
    v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v218);
    return MEMORY[0x1E0C023A0](v153, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08EEA50(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 176);
  *(_QWORD *)(v2 - 176) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x230], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x270], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::TensorBufferToTensor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  _QWORD *v75;
  char *v76;
  __int128 v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void **v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *p_shared_owners;
  unint64_t v106;
  void *v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void **v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void **v121;
  uint64_t result;
  uint64_t v123;
  void **v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  void *v134;
  std::__shared_weak_count *v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  void *__p;
  void *v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  void *v147;
  void *v148;
  _QWORD *v149;
  void *v150;
  void *v151;
  _QWORD *v152;
  void *v153;
  void *v154;
  _QWORD *v155;
  void *v156;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  void *v168;
  void *v169;
  _QWORD *v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  void *v177;
  void *v178;
  _QWORD *v179;
  void *v180;
  void *v181;
  _QWORD *v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  __n128 v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  void *v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD v194[3];
  _QWORD *v195;
  _BYTE v196[24];
  _BYTE *v197;
  _QWORD v198[3];
  _QWORD *v199;
  void **v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v188 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v189 = v8;
  *v8 = v7;
  v191 = v8 + 1;
  v190 = v8 + 1;
  v9 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v183 = v10;
  *v10 = v9;
  v185 = v10 + 1;
  v184 = v10 + 1;
  v200 = (void **)MIL::IRTensorBufferValueType::MakeWithShape(a1, 9, (uint64_t)&v189, (uint64_t)&v183);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v180 = v12;
  *v12 = v11;
  v182 = v12 + 1;
  v181 = v12 + 1;
  v13 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v177 = v14;
  *v14 = v13;
  v178 = v14 + 1;
  v179 = v14 + 1;
  v201 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 10, (uint64_t)&v180, (uint64_t)&v177);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v174 = v16;
  *v16 = v15;
  v175 = v16 + 1;
  v176 = v16 + 1;
  v17 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v171 = v18;
  *v18 = v17;
  v172 = v18 + 1;
  v173 = v18 + 1;
  v202 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 11, (uint64_t)&v174, (uint64_t)&v171);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v168 = v20;
  *v20 = v19;
  v169 = v20 + 1;
  v170 = v20 + 1;
  v21 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v165 = v22;
  *v22 = v21;
  v166 = v22 + 1;
  v167 = v22 + 1;
  v203 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 14, (uint64_t)&v168, (uint64_t)&v165);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v162 = v24;
  *v24 = v23;
  v163 = v24 + 1;
  v164 = v24 + 1;
  v25 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v159 = v26;
  *v26 = v25;
  v160 = v26 + 1;
  v161 = v26 + 1;
  v204 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 15, (uint64_t)&v162, (uint64_t)&v159);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v156 = v28;
  *v28 = v27;
  v157 = v28 + 1;
  v158 = v28 + 1;
  v29 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v153 = v30;
  *v30 = v29;
  v154 = v30 + 1;
  v155 = v30 + 1;
  v205 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 16, (uint64_t)&v156, (uint64_t)&v153);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v150 = v32;
  *v32 = v31;
  v151 = v32 + 1;
  v152 = v32 + 1;
  v33 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v147 = v34;
  *v34 = v33;
  v148 = v34 + 1;
  v149 = v34 + 1;
  v206 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 4, (uint64_t)&v150, (uint64_t)&v147);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v144 = v36;
  *v36 = v35;
  v145 = v36 + 1;
  v146 = v36 + 1;
  v37 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  __p = v38;
  *v38 = v37;
  v142 = v38 + 1;
  v143 = v38 + 1;
  v207 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 5, (uint64_t)&v144, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v200, 8, &v186);
  MIL::IRParameter::Make(&v186, &v187);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", &v187);
  v39 = v187;
  v187 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = (std::__shared_weak_count *)v186.n128_u64[1];
  if (v186.n128_u64[1])
  {
    v41 = (unint64_t *)(v186.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  v156 = 0;
  v43 = operator new();
  *(_QWORD *)v43 = 0;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 16) = 0;
  v200 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v156, (void **)v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v200, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v156, 1uLL);
  v44 = v156;
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v183 = v46;
  *v46 = v45;
  v185 = v46 + 1;
  v184 = v46 + 1;
  v200 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v183);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v180 = v48;
  *v48 = v47;
  v182 = v48 + 1;
  v181 = v48 + 1;
  v201 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v180);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v177 = v50;
  *v50 = v49;
  v178 = v50 + 1;
  v179 = v50 + 1;
  v202 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v177);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v174 = v52;
  *v52 = v51;
  v175 = v52 + 1;
  v176 = v52 + 1;
  v203 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v174);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v171 = v54;
  *v54 = v53;
  v172 = v54 + 1;
  v173 = v54 + 1;
  v204 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v171);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v168 = v56;
  *v56 = v55;
  v169 = v56 + 1;
  v170 = v56 + 1;
  v205 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v168);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v165 = v58;
  *v58 = v57;
  v166 = v58 + 1;
  v167 = v58 + 1;
  v206 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v162 = v60;
  *v60 = v59;
  v163 = v60 + 1;
  v164 = v60 + 1;
  v207 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v200, 8, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v153);
  v61 = v153;
  v159 = v153;
  if (v153)
  {
    v62 = (_QWORD *)operator new();
    v63 = v153;
    *v62 = &unk_1EA99F888;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  v160 = v62;
  v153 = 0;
  v64 = v44[2];
  v65 = (_QWORD *)v44[1];
  if ((unint64_t)v65 >= v64)
  {
    v67 = ((uint64_t)v65 - *v44) >> 4;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v69 = v64 - *v44;
    if (v69 >> 3 > v68)
      v68 = v69 >> 3;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
      v70 = 0xFFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    v193 = v44 + 2;
    v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v44 + 2), v70);
    v73 = &v71[16 * v67];
    *(_QWORD *)v73 = v61;
    *((_QWORD *)v73 + 1) = v62;
    v159 = 0;
    v160 = 0;
    v75 = (_QWORD *)*v44;
    v74 = (_QWORD *)v44[1];
    if (v74 == (_QWORD *)*v44)
    {
      v78 = (_QWORD *)v44[1];
      v76 = &v71[16 * v67];
    }
    else
    {
      v76 = &v71[16 * v67];
      do
      {
        v77 = *((_OWORD *)v74 - 1);
        v74 -= 2;
        *((_OWORD *)v76 - 1) = v77;
        v76 -= 16;
        *v74 = 0;
        v74[1] = 0;
      }
      while (v74 != v75);
      v78 = (_QWORD *)*v44;
      v74 = (_QWORD *)v44[1];
    }
    v66 = v73 + 16;
    *v44 = v76;
    v190 = v78;
    v44[1] = v73 + 16;
    v191 = v74;
    v79 = v44[2];
    v44[2] = &v71[16 * v72];
    v192 = v79;
    v189 = v78;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v189);
  }
  else
  {
    *v65 = v61;
    v65[1] = v62;
    v66 = v65 + 2;
    v159 = 0;
    v160 = 0;
  }
  v44[1] = v66;
  v80 = v153;
  v153 = 0;
  if (v80)
    (*(void (**)(void *))(*(_QWORD *)v80 + 8))(v80);
  v81 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v82 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v84 = v188;
  *(_QWORD *)&v137 = v188;
  if (v188)
  {
    v85 = (_QWORD *)operator new();
    *v85 = &unk_1EA99F8E8;
    v85[1] = 0;
    v85[2] = 0;
    v85[3] = v84;
  }
  else
  {
    v85 = 0;
  }
  *((_QWORD *)&v137 + 1) = v85;
  v188 = 0;
  *(_QWORD *)&v136 = v156;
  if (v156)
  {
    v86 = (_QWORD *)operator new();
    v87 = v156;
    *v86 = &unk_1EA99F948;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v87;
  }
  else
  {
    v86 = 0;
  }
  *((_QWORD *)&v136 + 1) = v86;
  v156 = 0;
  v198[0] = &unk_1EA99FAC8;
  v198[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateTensorBufferToTensor;
  v199 = v198;
  v197 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v198, (uint64_t)v196, a3);
  v88 = v197;
  if (v197 == v196)
  {
    v89 = 4;
    v88 = v196;
  }
  else
  {
    if (!v197)
      goto LABEL_91;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_91:
  v90 = v199;
  if (v199 == v198)
  {
    v91 = 4;
    v90 = v198;
    goto LABEL_95;
  }
  if (v199)
  {
    v91 = 5;
LABEL_95:
    (*(void (**)(void))(*v90 + 8 * v91))();
  }
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v98 = *a3;
  v194[0] = &off_1EA99FBD8;
  v194[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorBufferToTensor;
  v195 = v194;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v98 + 200))(v98, v194);
  v99 = v195;
  if (v195 == v194)
  {
    v100 = 4;
    v99 = v194;
  }
  else
  {
    if (!v195)
      goto LABEL_113;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_113:
  MIL::Validation::TensorDTypeConstraints::Make(&v200);
  v101 = v200;
  std::string::basic_string[abi:ne180100]<0>(v132, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v132, 0, (uint64_t *)&v189);
  v134 = v189;
  if (v189)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v189;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v135 = v102;
  v189 = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "T");
  (*((void (**)(void **, void **, void **))*v101 + 3))(v101, &v134, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v104 = v135;
  if (v135)
  {
    p_shared_owners = (unint64_t *)&v135->__shared_owners_;
    do
      v106 = __ldaxr(p_shared_owners);
    while (__stlxr(v106 - 1, p_shared_owners));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v189;
  v189 = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  if (v133 < 0)
    operator delete(v132[0]);
  v108 = v200;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v189);
  v128 = v189;
  if (v189)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)v189;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v129 = v109;
  v189 = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*((void (**)(void **, void **, void **))*v108 + 3))(v108, &v128, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v111 = v129;
  if (v129)
  {
    v112 = (unint64_t *)&v129->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v189;
  v189 = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  v115 = *a3;
  v124 = v200;
  if (v200)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = v200;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = (std::__shared_weak_count_vtbl *)v117;
  }
  else
  {
    v116 = 0;
  }
  v125 = v116;
  v200 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v115 + 56))(v115, &v124);
  v118 = v125;
  if (v125)
  {
    v119 = (unint64_t *)&v125->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v200;
  v200 = 0;
  if (v121)
    (*((void (**)(void **))*v121 + 1))(v121);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v156, 0);
  result = v188;
  if (v188)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v188);
    return MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08EFD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49)
{
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;

  v52 = *(_QWORD *)(v50 - 136);
  *(_QWORD *)(v50 - 136) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *v49;
  *v49 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x248], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::TensorToCircularBuffer::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  unsigned __int8 *v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void **v41;
  unsigned __int8 *v42;
  char *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  char **v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  __int128 v123;
  char *v124;
  char *v125;
  char *v126;
  std::__shared_weak_count *v127;
  unint64_t *p_shared_owners;
  unint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  char **v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  void **v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  char *v157;
  void **v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  void **v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  void **v171;
  uint64_t result;
  uint64_t v173;
  void **v174;
  std::__shared_weak_count *v175;
  void *v176[2];
  char v177;
  char *v178;
  std::__shared_weak_count *v179;
  void *v180[2];
  char v181;
  void *v182[2];
  char v183;
  char *v184;
  std::__shared_weak_count *v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190[4];
  int v191;
  void *v192;
  void *v193;
  _QWORD *v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  __int128 __p;
  __int128 v202;
  int v203;
  void *v204;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  void *v210;
  void *v211;
  _QWORD *v212;
  __int128 v213;
  __int128 v214;
  int v215;
  void *v216;
  void *v217;
  _QWORD *v218;
  void *v219;
  void *v220;
  _QWORD *v221;
  void *v222;
  void *v223;
  _QWORD *v224;
  __int128 v225;
  __int128 v226;
  int v227;
  void *v228;
  void *v229;
  _QWORD *v230;
  void *v231;
  void *v232;
  _QWORD *v233;
  void *v234;
  void *v235;
  _QWORD *v236;
  __int128 v237;
  __int128 v238;
  int v239;
  void *v240;
  void *v241;
  _QWORD *v242;
  void *v243;
  void *v244;
  _QWORD *v245;
  void *v246;
  void *v247;
  _QWORD *v248;
  void *v249;
  void *v250;
  _QWORD *v251;
  void *v252;
  void *v253;
  _QWORD *v254;
  void *v255;
  void *v256;
  _QWORD *v257;
  __n128 v258;
  uint64_t v259;
  __int128 v260;
  char **v261;
  __n128 v262;
  __n128 v263;
  __n128 v264;
  __n128 v265;
  __n128 v266;
  __n128 v267;
  _QWORD *v268;
  _QWORD v269[3];
  _QWORD *v270;
  _BYTE v271[24];
  _BYTE *v272;
  _QWORD v273[3];
  _QWORD *v274;
  __int128 v275;
  __int128 v276;
  int v277;
  void **v278;
  void **v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *Scalar;
  char *v285;
  char *v286;
  char *v287;
  char **v288;
  uint64_t v289;

  v289 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v268 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v285 = v8 + 8;
  v286 = v8 + 8;
  v278 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  *(_QWORD *)&v275 = v10;
  *v10 = v9;
  *((_QWORD *)&v275 + 1) = v10 + 1;
  *(_QWORD *)&v276 = v10 + 1;
  v279 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v275);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  *(_QWORD *)&v237 = v12;
  *v12 = v11;
  *(_QWORD *)&v238 = v12 + 1;
  *((_QWORD *)&v237 + 1) = v12 + 1;
  v280 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v237);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  *(_QWORD *)&v225 = v14;
  *v14 = v13;
  *(_QWORD *)&v226 = v14 + 1;
  *((_QWORD *)&v225 + 1) = v14 + 1;
  v281 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v225);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  *(_QWORD *)&v213 = v16;
  *v16 = v15;
  *((_QWORD *)&v213 + 1) = v16 + 1;
  *(_QWORD *)&v214 = v16 + 1;
  v282 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v213);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  *(_QWORD *)&__p = v18;
  *v18 = v17;
  *((_QWORD *)&__p + 1) = v18 + 1;
  *(_QWORD *)&v202 = v18 + 1;
  v283 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v278, 6, &v267);
  MIL::IRParameter::Make(&v267, v190);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", v190);
  v19 = v190[0];
  v190[0] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v267.n128_u64[1];
  if (v267.n128_u64[1])
  {
    v21 = (unint64_t *)(v267.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if ((_QWORD)v213)
  {
    *((_QWORD *)&v213 + 1) = v213;
    operator delete((void *)v213);
  }
  if ((_QWORD)v225)
  {
    *((_QWORD *)&v225 + 1) = v225;
    operator delete((void *)v225);
  }
  if ((_QWORD)v237)
  {
    *((_QWORD *)&v237 + 1) = v237;
    operator delete((void *)v237);
  }
  if ((_QWORD)v275)
  {
    *((_QWORD *)&v275 + 1) = v275;
    operator delete((void *)v275);
  }
  if (Scalar)
  {
    v285 = Scalar;
    operator delete(Scalar);
  }
  v23 = v268;
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = (void **)operator new(8uLL);
  v278 = v25;
  *v25 = (void *)v24;
  v279 = v25 + 1;
  v280 = (uint64_t)(v25 + 1);
  *(_QWORD *)&v275 = MIL::IRTensorValueType::MakeWithShape(a1, 12, (uint64_t)&v278);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v275, 1, &v266);
  MIL::IRParameter::Make(&v266, (uint64_t *)&Scalar);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v23, "shape", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*(void (**)(char *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v266.n128_u64[1];
  if (v266.n128_u64[1])
  {
    v29 = (unint64_t *)(v266.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v278)
  {
    v279 = v278;
    operator delete(v278);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v268;
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = (void **)operator new(8uLL);
  v278 = v33;
  *v33 = (void *)v32;
  v279 = v33 + 1;
  v280 = (uint64_t)(v33 + 1);
  *(_QWORD *)&v275 = MIL::IRTensorValueType::MakeWithShape(a1, 12, (uint64_t)&v278);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v275, 1, &v265);
  MIL::IRParameter::Make(&v265, (uint64_t *)&Scalar);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v31, "strides", (uint64_t *)&Scalar);
  v35 = Scalar;
  Scalar = 0;
  if (v35)
    (*(void (**)(char *))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v265.n128_u64[1];
  if (v265.n128_u64[1])
  {
    v37 = (unint64_t *)(v265.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v278)
  {
    v279 = v278;
    operator delete(v278);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v39 = v268;
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = (void **)operator new(8uLL);
  v278 = v41;
  *v41 = (void *)v40;
  v279 = v41 + 1;
  v280 = (uint64_t)(v41 + 1);
  *(_QWORD *)&v275 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v278);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v275, 1, &v264);
  MIL::IRParameter::Make(&v264, (uint64_t *)&Scalar);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v39, "interleave_factors", (uint64_t *)&Scalar);
  v43 = Scalar;
  Scalar = 0;
  if (v43)
    (*(void (**)(char *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v264.n128_u64[1];
  if (v264.n128_u64[1])
  {
    v45 = (unint64_t *)(v264.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v278)
  {
    v279 = v278;
    operator delete(v278);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  v47 = v268;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 12);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v263);
  MIL::IRParameter::Make(&v263, (uint64_t *)&v278);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v47, "wrap_dim", (uint64_t *)&v278);
  v49 = v278;
  v278 = 0;
  if (v49)
    (*((void (**)(void **))*v49 + 1))(v49);
  v50 = (std::__shared_weak_count *)v263.n128_u64[1];
  if (v263.n128_u64[1])
  {
    v51 = (unint64_t *)(v263.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v53 = v268;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 12);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v262);
  MIL::IRParameter::Make(&v262, (uint64_t *)&v278);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[20],std::unique_ptr<MIL::IRParameter>>(v53, "slice_wrap_dim_size", (uint64_t *)&v278);
  v55 = v278;
  v278 = 0;
  if (v55)
    (*((void (**)(void **))*v55 + 1))(v55);
  v56 = (std::__shared_weak_count *)v262.n128_u64[1];
  if (v262.n128_u64[1])
  {
    v57 = (unint64_t *)(v262.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  v261 = 0;
  v59 = operator new();
  *(_QWORD *)v59 = 0;
  *(_QWORD *)(v59 + 8) = 0;
  *(_QWORD *)(v59 + 16) = 0;
  v278 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v261, (void **)v59);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v278, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v261, 1uLL);
  v60 = v261;
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v255 = v62;
  *v62 = v61;
  v257 = v62 + 1;
  v256 = v62 + 1;
  v63 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v252 = v64;
  *v64 = v63;
  v254 = v64 + 1;
  v253 = v64 + 1;
  v65 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v249 = v66;
  *v66 = v65;
  v251 = v66 + 1;
  v250 = v66 + 1;
  v67 = (_QWORD *)MIL::IRUnknownProperty::Make(a1, 0);
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v275 = 0u;
  v276 = 0u;
  v277 = 1065353216;
  v278 = (void **)MIL::IRCircularBufferValueType::MakeWithShape(a1, 9, (uint64_t)&v255, (uint64_t)&v252, (uint64_t)&v249, v67, v68, (uint64_t *)&v275);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v246 = v70;
  *v70 = v69;
  v248 = v70 + 1;
  v247 = v70 + 1;
  v71 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v243 = v72;
  *v72 = v71;
  v245 = v72 + 1;
  v244 = v72 + 1;
  v73 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v240 = v74;
  *v74 = v73;
  v242 = v74 + 1;
  v241 = v74 + 1;
  v75 = (_QWORD *)MIL::IRUnknownProperty::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v237 = 0u;
  v238 = 0u;
  v239 = 1065353216;
  v279 = (void **)MIL::IRCircularBufferValueType::MakeWithShape(a1, 10, (uint64_t)&v246, (uint64_t)&v243, (uint64_t)&v240, v75, v76, (uint64_t *)&v237);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(8uLL);
  v234 = v78;
  *v78 = v77;
  v236 = v78 + 1;
  v235 = v78 + 1;
  v79 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(8uLL);
  v231 = v80;
  *v80 = v79;
  v233 = v80 + 1;
  v232 = v80 + 1;
  v81 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v82 = operator new(8uLL);
  v228 = v82;
  *v82 = v81;
  v230 = v82 + 1;
  v229 = v82 + 1;
  v83 = (_QWORD *)MIL::IRUnknownProperty::Make(a1, 0);
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v225 = 0u;
  v226 = 0u;
  v227 = 1065353216;
  v280 = MIL::IRCircularBufferValueType::MakeWithShape(a1, 14, (uint64_t)&v234, (uint64_t)&v231, (uint64_t)&v228, v83, v84, (uint64_t *)&v225);
  v85 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v86 = operator new(8uLL);
  v222 = v86;
  *v86 = v85;
  v224 = v86 + 1;
  v223 = v86 + 1;
  v87 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v88 = operator new(8uLL);
  v219 = v88;
  *v88 = v87;
  v220 = v88 + 1;
  v221 = v88 + 1;
  v89 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v90 = operator new(8uLL);
  v216 = v90;
  *v90 = v89;
  v217 = v90 + 1;
  v218 = v90 + 1;
  v91 = (_QWORD *)MIL::IRUnknownProperty::Make(a1, 0);
  v92 = MIL::IRUnknownDimension::Make(a1, 0);
  v213 = 0u;
  v214 = 0u;
  v215 = 1065353216;
  v281 = MIL::IRCircularBufferValueType::MakeWithShape(a1, 15, (uint64_t)&v222, (uint64_t)&v219, (uint64_t)&v216, v91, v92, (uint64_t *)&v213);
  v93 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v94 = operator new(8uLL);
  v210 = v94;
  *v94 = v93;
  v211 = v94 + 1;
  v212 = v94 + 1;
  v95 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v96 = operator new(8uLL);
  v207 = v96;
  *v96 = v95;
  v208 = v96 + 1;
  v209 = v96 + 1;
  v97 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v98 = operator new(8uLL);
  v204 = v98;
  *v98 = v97;
  v205 = v98 + 1;
  v206 = v98 + 1;
  v99 = (_QWORD *)MIL::IRUnknownProperty::Make(a1, 0);
  v100 = MIL::IRUnknownDimension::Make(a1, 0);
  __p = 0u;
  v202 = 0u;
  v203 = 1065353216;
  v282 = MIL::IRCircularBufferValueType::MakeWithShape(a1, 4, (uint64_t)&v210, (uint64_t)&v207, (uint64_t)&v204, v99, v100, (uint64_t *)&__p);
  v101 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v102 = operator new(8uLL);
  v198 = v102;
  *v102 = v101;
  v199 = v102 + 1;
  v200 = v102 + 1;
  v103 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v104 = operator new(8uLL);
  v195 = v104;
  *v104 = v103;
  v196 = v104 + 1;
  v197 = v104 + 1;
  v105 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v106 = operator new(8uLL);
  v192 = v106;
  *v106 = v105;
  v193 = v106 + 1;
  v194 = v106 + 1;
  v107 = (_QWORD *)MIL::IRUnknownProperty::Make(a1, 0);
  v108 = MIL::IRUnknownDimension::Make(a1, 0);
  memset(v190, 0, sizeof(v190));
  v191 = 1065353216;
  v283 = MIL::IRCircularBufferValueType::MakeWithShape(a1, 5, (uint64_t)&v198, (uint64_t)&v195, (uint64_t)&v192, v107, v108, v190);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v278, 6, &v258);
  MIL::IRParameter::Make(&v258, &v259);
  *(_QWORD *)&v260 = v259;
  if (v259)
  {
    v109 = (_QWORD *)operator new();
    v110 = v259;
    *v109 = &unk_1EA99F888;
    v109[1] = 0;
    v109[2] = 0;
    v109[3] = v110;
  }
  else
  {
    v109 = 0;
  }
  *((_QWORD *)&v260 + 1) = v109;
  v259 = 0;
  v111 = v60[2];
  v112 = v60[1];
  if (v112 >= v111)
  {
    v113 = (v112 - *v60) >> 4;
    v114 = v113 + 1;
    if ((unint64_t)(v113 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v115 = v111 - *v60;
    if (v115 >> 3 > v114)
      v114 = v115 >> 3;
    if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF0)
      v116 = 0xFFFFFFFFFFFFFFFLL;
    else
      v116 = v114;
    v288 = v60 + 2;
    v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v60 + 2), v116);
    v119 = &v117[16 * v113];
    *(_OWORD *)v119 = v260;
    v260 = 0uLL;
    v121 = *v60;
    v120 = v60[1];
    if (v120 == *v60)
    {
      v124 = v60[1];
      v122 = &v117[16 * v113];
    }
    else
    {
      v122 = &v117[16 * v113];
      do
      {
        v123 = *((_OWORD *)v120 - 1);
        v120 -= 16;
        *((_OWORD *)v122 - 1) = v123;
        v122 -= 16;
        *(_QWORD *)v120 = 0;
        *((_QWORD *)v120 + 1) = 0;
      }
      while (v120 != v121);
      v124 = *v60;
      v120 = v60[1];
    }
    v125 = v119 + 16;
    *v60 = v122;
    Scalar = v124;
    v285 = v124;
    v60[1] = v119 + 16;
    v286 = v120;
    v126 = v60[2];
    v60[2] = &v117[16 * v118];
    v287 = v126;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
    v127 = (std::__shared_weak_count *)*((_QWORD *)&v260 + 1);
    v60[1] = v125;
    if (v127)
    {
      p_shared_owners = (unint64_t *)&v127->__shared_owners_;
      do
        v129 = __ldaxr(p_shared_owners);
      while (__stlxr(v129 - 1, p_shared_owners));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
  }
  else
  {
    *(_QWORD *)v112 = v260;
    *((_QWORD *)v112 + 1) = v109;
    v260 = 0uLL;
    v60[1] = v112 + 16;
  }
  v130 = v259;
  v259 = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v131 = (std::__shared_weak_count *)v258.n128_u64[1];
  if (v258.n128_u64[1])
  {
    v132 = (unint64_t *)(v258.n128_u64[1] + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v190);
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&__p);
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v213);
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v225);
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v237);
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v275);
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (v255)
  {
    v256 = v255;
    operator delete(v255);
  }
  v188 = *(_OWORD *)a2;
  v189 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v134 = (uint64_t)v268;
  *(_QWORD *)&v187 = v268;
  if (v268)
  {
    v135 = (_QWORD *)operator new();
    *v135 = &unk_1EA99F8E8;
    v135[1] = 0;
    v135[2] = 0;
    v135[3] = v134;
  }
  else
  {
    v135 = 0;
  }
  *((_QWORD *)&v187 + 1) = v135;
  v268 = 0;
  *(_QWORD *)&v186 = v261;
  if (v261)
  {
    v136 = (_QWORD *)operator new();
    v137 = v261;
    *v136 = &unk_1EA99F948;
    v136[1] = 0;
    v136[2] = 0;
    v136[3] = v137;
  }
  else
  {
    v136 = 0;
  }
  *((_QWORD *)&v186 + 1) = v136;
  v261 = 0;
  v273[0] = &unk_1EA99FAC8;
  v273[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateTensorToCircularBuffer;
  v274 = v273;
  v272 = 0;
  MIL::IROperator::Make(&v188, &v187, &v186, (uint64_t)v273, (uint64_t)v271, a3);
  v138 = v272;
  if (v272 == v271)
  {
    v139 = 4;
    v138 = v271;
  }
  else
  {
    if (!v272)
      goto LABEL_136;
    v139 = 5;
  }
  (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_136:
  v140 = v274;
  if (v274 == v273)
  {
    v141 = 4;
    v140 = v273;
    goto LABEL_140;
  }
  if (v274)
  {
    v141 = 5;
LABEL_140:
    (*(void (**)(void))(*v140 + 8 * v141))();
  }
  v142 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v143 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v146 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  if (SHIBYTE(v189) < 0)
    operator delete((void *)v188);
  v148 = *a3;
  v269[0] = &off_1EA99FBD8;
  v269[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorToCircularBuffer;
  v270 = v269;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v148 + 200))(v148, v269);
  v149 = v270;
  if (v270 == v269)
  {
    v150 = 4;
    v149 = v269;
  }
  else
  {
    if (!v270)
      goto LABEL_158;
    v150 = 5;
  }
  (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_158:
  MIL::Validation::TensorDTypeConstraints::Make(&v278);
  v151 = v278;
  std::string::basic_string[abi:ne180100]<0>(v182, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v182, 0, (uint64_t *)&Scalar);
  v184 = Scalar;
  if (Scalar)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = (std::__shared_weak_count_vtbl *)Scalar;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v185 = v152;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v180, "T");
  (*((void (**)(void **, char **, void **))*v151 + 3))(v151, &v184, v180);
  if (v181 < 0)
    operator delete(v180[0]);
  v154 = v185;
  if (v185)
  {
    v155 = (unint64_t *)&v185->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = Scalar;
  Scalar = 0;
  if (v157)
    (*(void (**)(char *))(*(_QWORD *)v157 + 8))(v157);
  if (v183 < 0)
    operator delete(v182[0]);
  v158 = v278;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v178 = Scalar;
  if (Scalar)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = (std::__shared_weak_count_vtbl *)Scalar;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v179 = v159;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v176, "T");
  (*((void (**)(void **, char **, void **))*v158 + 3))(v158, &v178, v176);
  if (v177 < 0)
    operator delete(v176[0]);
  v161 = v179;
  if (v179)
  {
    v162 = (unint64_t *)&v179->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = Scalar;
  Scalar = 0;
  if (v164)
    (*(void (**)(char *))(*(_QWORD *)v164 + 8))(v164);
  v165 = *a3;
  v174 = v278;
  if (v278)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = v278;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = (std::__shared_weak_count_vtbl *)v167;
  }
  else
  {
    v166 = 0;
  }
  v175 = v166;
  v278 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v165 + 56))(v165, &v174);
  v168 = v175;
  if (v175)
  {
    v169 = (unint64_t *)&v175->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v278;
  v278 = 0;
  if (v171)
    (*((void (**)(void **))*v171 + 1))(v171);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v261, 0);
  result = (uint64_t)v268;
  if (v268)
  {
    v173 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v268);
    return MEMORY[0x1E0C023A0](v173, 0x10A0C408EF24B1CLL);
  }
  return result;
}

